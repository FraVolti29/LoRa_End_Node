
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021390  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  080214e0  080214e0  000224e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080221f8  080221f8  000255d8  2**0
                  CONTENTS
  4 .ARM          00000008  080221f8  080221f8  000231f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022200  08022200  000255d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08022200  08022200  00023200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08022208  08022208  00023208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00025500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000698  20000000  08022210  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .AI_SRAM1     0000002c  200006a0  080228a8  000246a0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 LW_NVM_RAM    00000b98  20008000  20008000  00026000  2**2
                  ALLOC
 12 .bss          0000176c  200006cc  200006cc  000256cc  2**2
                  ALLOC
 13 RAM1_region   00000000  20001e38  20001e38  000255d8  2**0
                  CONTENTS
 14 RAM2_region   00000000  20009000  20009000  000255d8  2**0
                  CONTENTS
 15 ._user_heap_stack 00000a00  20001e38  20001e38  000256cc  2**0
                  ALLOC
 16 .ARM.attributes 0000002a  00000000  00000000  000255d8  2**0
                  CONTENTS, READONLY
 17 .debug_info   0004e54c  00000000  00000000  00025602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000b79a  00000000  00000000  00073b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003b88  00000000  00000000  0007f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002d3e  00000000  00000000  00082e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000349ac  00000000  00000000  00085bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000528f8  00000000  00000000  000ba55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f756a  00000000  00000000  0010ce52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000086  00000000  00000000  002043bc  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ffe8  00000000  00000000  00204444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000af  00000000  00000000  0021442c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006cc 	.word	0x200006cc
 800015c:	00000000 	.word	0x00000000
 8000160:	080214b8 	.word	0x080214b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006d0 	.word	0x200006d0
 800017c:	080214b8 	.word	0x080214b8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000976:	2afd      	cmp	r2, #253	@ 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	@ 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	@ 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	@ 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__gesf2>:
 8000bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__lesf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	e002      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bd2:	bf00      	nop

08000bd4 <__cmpsf2>:
 8000bd4:	f04f 0c01 	mov.w	ip, #1
 8000bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d011      	beq.n	8000c14 <__cmpsf2+0x40>
 8000bf0:	b001      	add	sp, #4
 8000bf2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bf6:	bf18      	it	ne
 8000bf8:	ea90 0f01 	teqne	r0, r1
 8000bfc:	bf58      	it	pl
 8000bfe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c02:	bf88      	it	hi
 8000c04:	17c8      	asrhi	r0, r1, #31
 8000c06:	bf38      	it	cc
 8000c08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c0c:	bf18      	it	ne
 8000c0e:	f040 0001 	orrne.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	d102      	bne.n	8000c20 <__cmpsf2+0x4c>
 8000c1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1e:	d105      	bne.n	8000c2c <__cmpsf2+0x58>
 8000c20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c24:	d1e4      	bne.n	8000bf0 <__cmpsf2+0x1c>
 8000c26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c2a:	d0e1      	beq.n	8000bf0 <__cmpsf2+0x1c>
 8000c2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_cfrcmple>:
 8000c34:	4684      	mov	ip, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4661      	mov	r1, ip
 8000c3a:	e7ff      	b.n	8000c3c <__aeabi_cfcmpeq>

08000c3c <__aeabi_cfcmpeq>:
 8000c3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c3e:	f7ff ffc9 	bl	8000bd4 <__cmpsf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	bf48      	it	mi
 8000c46:	f110 0f00 	cmnmi.w	r0, #0
 8000c4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c4c <__aeabi_fcmpeq>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff fff4 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fcmplt>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff ffea 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c68:	bf34      	ite	cc
 8000c6a:	2001      	movcc	r0, #1
 8000c6c:	2000      	movcs	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmple>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffe0 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c7c:	bf94      	ite	ls
 8000c7e:	2001      	movls	r0, #1
 8000c80:	2000      	movhi	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmpge>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffd2 	bl	8000c34 <__aeabi_cfrcmple>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpgt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffc8 	bl	8000c34 <__aeabi_cfrcmple>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_f2iz>:
 8000cb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cb8:	d30f      	bcc.n	8000cda <__aeabi_f2iz+0x2a>
 8000cba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc2:	d90d      	bls.n	8000ce0 <__aeabi_f2iz+0x30>
 8000cc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ccc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd4:	bf18      	it	ne
 8000cd6:	4240      	negne	r0, r0
 8000cd8:	4770      	bx	lr
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	4770      	bx	lr
 8000ce0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ce4:	d101      	bne.n	8000cea <__aeabi_f2iz+0x3a>
 8000ce6:	0242      	lsls	r2, r0, #9
 8000ce8:	d105      	bne.n	8000cf6 <__aeabi_f2iz+0x46>
 8000cea:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_f2uiz>:
 8000cfc:	0042      	lsls	r2, r0, #1
 8000cfe:	d20e      	bcs.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d00:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d04:	d30b      	bcc.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d06:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d0e:	d409      	bmi.n	8000d24 <__aeabi_f2uiz+0x28>
 8000d10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d18:	fa23 f002 	lsr.w	r0, r3, r2
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr
 8000d24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d28:	d101      	bne.n	8000d2e <__aeabi_f2uiz+0x32>
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	d102      	bne.n	8000d34 <__aeabi_f2uiz+0x38>
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	4770      	bx	lr
 8000d34:	f04f 0000 	mov.w	r0, #0
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b988 	b.w	8001064 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f806 	bl	8000d6c <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__udivmoddi4>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	9d08      	ldr	r5, [sp, #32]
 8000d72:	468e      	mov	lr, r1
 8000d74:	4604      	mov	r4, r0
 8000d76:	4688      	mov	r8, r1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d14a      	bne.n	8000e12 <__udivmoddi4+0xa6>
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	d962      	bls.n	8000e48 <__udivmoddi4+0xdc>
 8000d82:	fab2 f682 	clz	r6, r2
 8000d86:	b14e      	cbz	r6, 8000d9c <__udivmoddi4+0x30>
 8000d88:	f1c6 0320 	rsb	r3, r6, #32
 8000d8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d90:	fa20 f303 	lsr.w	r3, r0, r3
 8000d94:	40b7      	lsls	r7, r6
 8000d96:	ea43 0808 	orr.w	r8, r3, r8
 8000d9a:	40b4      	lsls	r4, r6
 8000d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fb01 f20c 	mul.w	r2, r1, ip
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d909      	bls.n	8000dce <__udivmoddi4+0x62>
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc0:	f080 80ea 	bcs.w	8000f98 <__udivmoddi4+0x22c>
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f240 80e7 	bls.w	8000f98 <__udivmoddi4+0x22c>
 8000dca:	3902      	subs	r1, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9a      	subs	r2, r3, r2
 8000dd0:	b2a3      	uxth	r3, r4
 8000dd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000de2:	459c      	cmp	ip, r3
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0x8e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	f080 80d6 	bcs.w	8000f9c <__udivmoddi4+0x230>
 8000df0:	459c      	cmp	ip, r3
 8000df2:	f240 80d3 	bls.w	8000f9c <__udivmoddi4+0x230>
 8000df6:	443b      	add	r3, r7
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfe:	eba3 030c 	sub.w	r3, r3, ip
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11d      	cbz	r5, 8000e0e <__udivmoddi4+0xa2>
 8000e06:	40f3      	lsrs	r3, r6
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d905      	bls.n	8000e22 <__udivmoddi4+0xb6>
 8000e16:	b10d      	cbz	r5, 8000e1c <__udivmoddi4+0xb0>
 8000e18:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e7f5      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e22:	fab3 f183 	clz	r1, r3
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d146      	bne.n	8000eb8 <__udivmoddi4+0x14c>
 8000e2a:	4573      	cmp	r3, lr
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xc8>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 8105 	bhi.w	800103e <__udivmoddi4+0x2d2>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0e5      	beq.n	8000e0e <__udivmoddi4+0xa2>
 8000e42:	e9c5 4800 	strd	r4, r8, [r5]
 8000e46:	e7e2      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f000 8090 	beq.w	8000f6e <__udivmoddi4+0x202>
 8000e4e:	fab2 f682 	clz	r6, r2
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	f040 80a4 	bne.w	8000fa0 <__udivmoddi4+0x234>
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	0c03      	lsrs	r3, r0, #16
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	b280      	uxth	r0, r0
 8000e62:	b2bc      	uxth	r4, r7
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e72:	fb04 f20c 	mul.w	r2, r4, ip
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x11e>
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x11c>
 8000e82:	429a      	cmp	r2, r3
 8000e84:	f200 80e0 	bhi.w	8001048 <__udivmoddi4+0x2dc>
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	1a9b      	subs	r3, r3, r2
 8000e8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e98:	fb02 f404 	mul.w	r4, r2, r4
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x144>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x142>
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	f200 80ca 	bhi.w	8001042 <__udivmoddi4+0x2d6>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	1b1b      	subs	r3, r3, r4
 8000eb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0x98>
 8000eb8:	f1c1 0620 	rsb	r6, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ecc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	fa00 f801 	lsl.w	r8, r0, r1
 8000eda:	fa1f fc87 	uxth.w	ip, r7
 8000ede:	fbbe f0f9 	udiv	r0, lr, r9
 8000ee2:	0c1c      	lsrs	r4, r3, #16
 8000ee4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x1a0>
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000efe:	f080 809c 	bcs.w	800103a <__udivmoddi4+0x2ce>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f240 8099 	bls.w	800103a <__udivmoddi4+0x2ce>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	eba4 040e 	sub.w	r4, r4, lr
 8000f10:	fa1f fe83 	uxth.w	lr, r3
 8000f14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f18:	fb09 4413 	mls	r4, r9, r3, r4
 8000f1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f24:	45a4      	cmp	ip, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1ce>
 8000f28:	193c      	adds	r4, r7, r4
 8000f2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f2e:	f080 8082 	bcs.w	8001036 <__udivmoddi4+0x2ca>
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d97f      	bls.n	8001036 <__udivmoddi4+0x2ca>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f46:	4564      	cmp	r4, ip
 8000f48:	4673      	mov	r3, lr
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	d362      	bcc.n	8001014 <__udivmoddi4+0x2a8>
 8000f4e:	d05f      	beq.n	8001010 <__udivmoddi4+0x2a4>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x1fe>
 8000f52:	ebb8 0203 	subs.w	r2, r8, r3
 8000f56:	eb64 0409 	sbc.w	r4, r4, r9
 8000f5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f62:	431e      	orrs	r6, r3
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	e74f      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000f6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f72:	0c01      	lsrs	r1, r0, #16
 8000f74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f78:	b280      	uxth	r0, r0
 8000f7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4638      	mov	r0, r7
 8000f82:	463c      	mov	r4, r7
 8000f84:	46b8      	mov	r8, r7
 8000f86:	46be      	mov	lr, r7
 8000f88:	2620      	movs	r6, #32
 8000f8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f8e:	eba2 0208 	sub.w	r2, r2, r8
 8000f92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f96:	e766      	b.n	8000e66 <__udivmoddi4+0xfa>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	e718      	b.n	8000dce <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e72c      	b.n	8000dfa <__udivmoddi4+0x8e>
 8000fa0:	f1c6 0220 	rsb	r2, r6, #32
 8000fa4:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa8:	40b7      	lsls	r7, r6
 8000faa:	40b1      	lsls	r1, r6
 8000fac:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fba:	b2bc      	uxth	r4, r7
 8000fbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc0:	0c11      	lsrs	r1, r2, #16
 8000fc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc6:	fb08 f904 	mul.w	r9, r8, r4
 8000fca:	40b0      	lsls	r0, r6
 8000fcc:	4589      	cmp	r9, r1
 8000fce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fd2:	b280      	uxth	r0, r0
 8000fd4:	d93e      	bls.n	8001054 <__udivmoddi4+0x2e8>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fdc:	d201      	bcs.n	8000fe2 <__udivmoddi4+0x276>
 8000fde:	4589      	cmp	r9, r1
 8000fe0:	d81f      	bhi.n	8001022 <__udivmoddi4+0x2b6>
 8000fe2:	eba1 0109 	sub.w	r1, r1, r9
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff8:	4542      	cmp	r2, r8
 8000ffa:	d229      	bcs.n	8001050 <__udivmoddi4+0x2e4>
 8000ffc:	18ba      	adds	r2, r7, r2
 8000ffe:	f109 31ff 	add.w	r1, r9, #4294967295
 8001002:	d2c4      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001004:	4542      	cmp	r2, r8
 8001006:	d2c2      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001008:	f1a9 0102 	sub.w	r1, r9, #2
 800100c:	443a      	add	r2, r7
 800100e:	e7be      	b.n	8000f8e <__udivmoddi4+0x222>
 8001010:	45f0      	cmp	r8, lr
 8001012:	d29d      	bcs.n	8000f50 <__udivmoddi4+0x1e4>
 8001014:	ebbe 0302 	subs.w	r3, lr, r2
 8001018:	eb6c 0c07 	sbc.w	ip, ip, r7
 800101c:	3801      	subs	r0, #1
 800101e:	46e1      	mov	r9, ip
 8001020:	e796      	b.n	8000f50 <__udivmoddi4+0x1e4>
 8001022:	eba7 0909 	sub.w	r9, r7, r9
 8001026:	4449      	add	r1, r9
 8001028:	f1a8 0c02 	sub.w	ip, r8, #2
 800102c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001030:	fb09 f804 	mul.w	r8, r9, r4
 8001034:	e7db      	b.n	8000fee <__udivmoddi4+0x282>
 8001036:	4673      	mov	r3, lr
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1ce>
 800103a:	4650      	mov	r0, sl
 800103c:	e766      	b.n	8000f0c <__udivmoddi4+0x1a0>
 800103e:	4608      	mov	r0, r1
 8001040:	e6fd      	b.n	8000e3e <__udivmoddi4+0xd2>
 8001042:	443b      	add	r3, r7
 8001044:	3a02      	subs	r2, #2
 8001046:	e733      	b.n	8000eb0 <__udivmoddi4+0x144>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	443b      	add	r3, r7
 800104e:	e71c      	b.n	8000e8a <__udivmoddi4+0x11e>
 8001050:	4649      	mov	r1, r9
 8001052:	e79c      	b.n	8000f8e <__udivmoddi4+0x222>
 8001054:	eba1 0109 	sub.w	r1, r1, r9
 8001058:	46c4      	mov	ip, r8
 800105a:	fbb1 f9fe 	udiv	r9, r1, lr
 800105e:	fb09 f804 	mul.w	r8, r9, r4
 8001062:	e7c4      	b.n	8000fee <__udivmoddi4+0x282>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001074:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010bc:	68fb      	ldr	r3, [r7, #12]
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	43db      	mvns	r3, r3
 80010da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010de:	4013      	ands	r3, r2
 80010e0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010f0:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <MX_ADC_Init+0x94>)
 80010f2:	4a24      	ldr	r2, [pc, #144]	@ (8001184 <MX_ADC_Init+0x98>)
 80010f4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f6:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_ADC_Init+0x94>)
 80010f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010fc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <MX_ADC_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_ADC_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_ADC_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_ADC_Init+0x94>)
 8001112:	2204      	movs	r2, #4
 8001114:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_ADC_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_ADC_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_ADC_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_ADC_Init+0x94>)
 800112a:	2201      	movs	r2, #1
 800112c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_ADC_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_ADC_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_ADC_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_ADC_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_ADC_Init+0x94>)
 800114c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001150:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_ADC_Init+0x94>)
 8001154:	2207      	movs	r2, #7
 8001156:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_ADC_Init+0x94>)
 800115a:	2207      	movs	r2, #7
 800115c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_ADC_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_ADC_Init+0x94>)
 800116e:	f001 fe8f 	bl	8002e90 <HAL_ADC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001178:	f000 f958 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200006e8 	.word	0x200006e8
 8001184:	40012400 	.word	0x40012400

08001188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <HAL_ADC_MspInit+0x50>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d112      	bne.n	80011d0 <HAL_ADC_MspInit+0x48>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ae:	f7ff ff73 	bl	8001098 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff ff58 	bl	8001068 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b8:	2304      	movs	r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011bc:	2303      	movs	r3, #3
 80011be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <HAL_ADC_MspInit+0x54>)
 80011cc:	f003 faa0 	bl	8004710 <HAL_GPIO_Init>

    /* USER CODE END ADC_MspInit 1 */

  }

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40012400 	.word	0x40012400
 80011dc:	48000400 	.word	0x48000400

080011e0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_ADC_MspDeInit+0x2c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d107      	bne.n	8001202 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f6:	f7ff ff67 	bl	80010c8 <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80011fa:	2104      	movs	r1, #4
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <HAL_ADC_MspDeInit+0x30>)
 80011fe:	f003 fbe7 	bl	80049d0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40012400 	.word	0x40012400
 8001210:	48000400 	.word	0x48000400

08001214 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800122c:	f7ff ff5e 	bl	80010ec <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001230:	481a      	ldr	r0, [pc, #104]	@ (800129c <ADC_ReadChannels+0x88>)
 8001232:	f002 fc4c 	bl	8003ace <HAL_ADCEx_Calibration_Start>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800123c:	f000 f8f6 	bl	800142c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4619      	mov	r1, r3
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <ADC_ReadChannels+0x88>)
 8001254:	f002 f958 	bl	8003508 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800125e:	f000 f8e5 	bl	800142c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001262:	480e      	ldr	r0, [pc, #56]	@ (800129c <ADC_ReadChannels+0x88>)
 8001264:	f002 f834 	bl	80032d0 <HAL_ADC_Start>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800126e:	f000 f8dd 	bl	800142c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001272:	f04f 31ff 	mov.w	r1, #4294967295
 8001276:	4809      	ldr	r0, [pc, #36]	@ (800129c <ADC_ReadChannels+0x88>)
 8001278:	f002 f8a2 	bl	80033c0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800127c:	4807      	ldr	r0, [pc, #28]	@ (800129c <ADC_ReadChannels+0x88>)
 800127e:	f002 f86d 	bl	800335c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001282:	4806      	ldr	r0, [pc, #24]	@ (800129c <ADC_ReadChannels+0x88>)
 8001284:	f002 f933 	bl	80034ee <HAL_ADC_GetValue>
 8001288:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <ADC_ReadChannels+0x88>)
 800128c:	f001 ff94 	bl	80031b8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001290:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200006e8 	.word	0x200006e8

080012a0 <LL_AHB1_GRP1_EnableClock>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c4:	68fb      	ldr	r3, [r7, #12]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012d4:	2004      	movs	r0, #4
 80012d6:	f7ff ffe3 	bl	80012a0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff ffe0 	bl	80012a0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2102      	movs	r1, #2
 80012e4:	200f      	movs	r0, #15
 80012e6:	f002 fdb6 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f002 fdcd 	bl	8003e8a <HAL_NVIC_EnableIRQ>

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <LL_AHB2_GRP1_EnableClock>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001302:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001310:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001318:	68fb      	ldr	r3, [r7, #12]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
#endif

#if MY_TX
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff ffdb 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff ffd8 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	2004      	movs	r0, #4
 8001346:	f7ff ffd5 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2080      	movs	r0, #128	@ 0x80
 800134c:	f7ff ffd2 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pins : PA14 PA12 PA15 PA13
                             PA11 PA10 PA0 PA9
                             PA6 PA1 PA7 PA4
                             PA5 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13
 8001350:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8001354:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_9
			|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7
			|GPIO_PIN_5|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f003 f9d3 	bl	8004710 <HAL_GPIO_Init>

	// PA7 defined seperately t
	GPIO_InitStruct.Pin = GPIO_PIN_7; //PC13
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f003 f9c5 	bl	8004710 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f003 fbed 	bl	8004b6c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB15 PB3 PB4 PB7
                             PB9 PB14 PB5 PB8
                             PB13 PB2 PB6 PB12
                             PB1 PB11 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001392:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001396:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_8
			|GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_12
			|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 80013a6:	f003 f9b3 	bl	8004710 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC2 PC1 PC0
                             PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80013aa:	f242 0347 	movw	r3, #8263	@ 0x2047
 80013ae:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b0:	2303      	movs	r3, #3
 80013b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <MX_GPIO_Init+0xc0>)
 80013be:	f003 f9a7 	bl	8004710 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c2:	2308      	movs	r3, #8
 80013c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_GPIO_Init+0xc4>)
 80013d4:	f003 f99c 	bl	8004710 <HAL_GPIO_Init>

#endif

#endif

}
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48001c00 	.word	0x48001c00

080013ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_Init();														// Configure HAL
	HAL_PWR_EnablePVD();											// Enable PVD
#endif

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 80013f0:	f01b ff64 	bl	801d2bc <My_Set_All_GPIO_To_Analog_Mode>
#endif

	My_PS_Detection();												// Power Supply (PS) Detection Function: Detects if the System is Supplied by a Power Supply with a voltage > 2.9 V or by an Harvester
 80013f4:	f01c faa8 	bl	801d948 <My_PS_Detection>

#if MY_UNDERVOLTING_FEATURE

	My_SystemClock_Config(); 										// Configure the System Clock Frequency Below 16 MHz to allow Undervolting
 80013f8:	f01c f9f4 	bl	801d7e4 <My_SystemClock_Config>
	my_SystemClock_Config_done = 1;									// SystemClock is Configures
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <main+0x3c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);	// Configure Undervolting
 8001402:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001406:	f004 fab3 	bl	8005970 <HAL_PWREx_ControlVoltageScaling>
	my_SystemClock_Config_done = 1;	// SystemClock is Configured

#endif

#if MY_TX_ABP
	MX_RTC_Init();
 800140a:	f000 f83d 	bl	8001488 <MX_RTC_Init>
#endif

	MX_LPTIM1_Init();
 800140e:	f01a fda3 	bl	801bf58 <MX_LPTIM1_Init>

#if !MY_DEBUGGER_ENABLED
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001412:	f7ff ff87 	bl	8001324 <MX_GPIO_Init>
#if AI
	MX_ADC_Init();
 8001416:	f7ff fe69 	bl	80010ec <MX_ADC_Init>
	MX_X_CUBE_AI_Init(); 				// initialization AI
 800141a:	f01a fb2b 	bl	801ba74 <MX_X_CUBE_AI_Init>
#endif
	MX_LoRaWAN_Init();
 800141e:	f000 ffab 	bl	8002378 <MX_LoRaWAN_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_LoRaWAN_Process();
 8001422:	f000 ffb7 	bl	8002394 <MX_LoRaWAN_Process>
 8001426:	e7fc      	b.n	8001422 <main+0x36>
 8001428:	2000074c 	.word	0x2000074c

0800142c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <Error_Handler+0x8>

08001438 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800144c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <LL_APB1_GRP1_EnableClock>:
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001464:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001474:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147c:	68fb      	ldr	r3, [r7, #12]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

#if MY_TX_ABP
	My_RTC_Init();
 800148c:	f01b f944 	bl	801c718 <My_RTC_Init>
	    Error_Handler();
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
#endif

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b090      	sub	sp, #64	@ 0x40
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	2238      	movs	r2, #56	@ 0x38
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f01f f973 	bl	8020790 <memset>
	if(rtcHandle->Instance==RTC)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <HAL_RTC_MspInit+0x70>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d122      	bne.n	80014fa <HAL_RTC_MspInit+0x66>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clocks
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b8:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 fd59 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RTC_MspInit+0x40>
		{
			Error_Handler();
 80014d0:	f7ff ffac 	bl	800142c <Error_Handler>
		}

		/* RTC clock enable */
		__HAL_RCC_RTC_ENABLE();
 80014d4:	f7ff ffb0 	bl	8001438 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 80014d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80014dc:	f7ff ffbc 	bl	8001458 <LL_APB1_GRP1_EnableClock>

		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2002      	movs	r0, #2
 80014e6:	f002 fcb6 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	202a      	movs	r0, #42	@ 0x2a
 80014f0:	f002 fcb1 	bl	8003e56 <HAL_NVIC_SetPriority>
#if MY_TX_OTAA
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
#endif
		/* USER CODE BEGIN RTC_MspInit 1 */
		HAL_RTCEx_EnableBypassShadow(rtcHandle);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f006 facd 	bl	8007a94 <HAL_RTCEx_EnableBypassShadow>
		/* USER CODE END RTC_MspInit 1 */
	}
}
 80014fa:	bf00      	nop
 80014fc:	3740      	adds	r7, #64	@ 0x40
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40002800 	.word	0x40002800

08001508 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800150e:	2201      	movs	r2, #1
 8001510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	58000400 	.word	0x58000400

08001520 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800153c:	f001 faf8 	bl	8002b30 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001540:	f7ff ffe2 	bl	8001508 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001544:	2001      	movs	r0, #1
 8001546:	f004 fad3 	bl	8005af0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001552:	f001 fafb 	bl	8002b4c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001556:	f000 feb9 	bl	80022cc <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}

0800155e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001562:	f001 fae5 	bl	8002b30 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001566:	2101      	movs	r1, #1
 8001568:	2000      	movs	r0, #0
 800156a:	f004 f985 	bl	8005878 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}

08001572 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001576:	f001 fae9 	bl	8002b4c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f002 fc65 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800158c:	2001      	movs	r0, #1
 800158e:	f002 fc7c 	bl	8003e8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	bf00      	nop
 80015a4:	e7fd      	b.n	80015a2 <HardFault_Handler+0x4>

080015a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	bf00      	nop
 80015b4:	e7fd      	b.n	80015b2 <BusFault_Handler+0x4>

080015b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD and PVM detector.
  */
void PVD_PVM_IRQHandler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80015f2:	f004 faa7 	bl	8005b44 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001602:	f006 fa79 	bl	8007af8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000750 	.word	0x20000750

08001610 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001614:	2001      	movs	r0, #1
 8001616:	f003 fac1 	bl	8004b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}

0800161e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001622:	2002      	movs	r0, #2
 8001624:	f003 faba 	bl	8004b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <DMA1_Channel5_IRQHandler+0x10>)
 8001632:	f002 fecf 	bl	80043d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000838 	.word	0x20000838

08001640 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001644:	2040      	movs	r0, #64	@ 0x40
 8001646:	f003 faa9 	bl	8004b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <USART2_IRQHandler+0x10>)
 8001656:	f007 f899 	bl	800878c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200007a4 	.word	0x200007a4

08001664 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <RTC_Alarm_IRQHandler+0x10>)
 800166a:	f006 f90f 	bl	800788c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000750 	.word	0x20000750

08001678 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <SUBGHZ_Radio_IRQHandler+0x10>)
 800167e:	f006 fd9f 	bl	80081c0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000788 	.word	0x20000788

0800168c <LPTIM1_IRQHandler>:

/* USER CODE BEGIN 1 */
void LPTIM1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

	HAL_LPTIM_IRQHandler(&hlptim1);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <LPTIM1_IRQHandler+0x10>)
 8001692:	f01c fd75 	bl	801e180 <HAL_LPTIM_IRQHandler>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20001b40 	.word	0x20001b40

080016a0 <LPTIM2_IRQHandler>:

void LPTIM2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	HAL_LPTIM_IRQHandler(&hlptim2);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <LPTIM2_IRQHandler+0x10>)
 80016a6:	f01c fd6b 	bl	801e180 <HAL_LPTIM_IRQHandler>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20001b7c 	.word	0x20001b7c

080016b4 <COMP_IRQHandler>:

void COMP_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80016b8:	4803      	ldr	r0, [pc, #12]	@ (80016c8 <COMP_IRQHandler+0x14>)
 80016ba:	f01c fa7d 	bl	801dbb8 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 80016be:	4803      	ldr	r0, [pc, #12]	@ (80016cc <COMP_IRQHandler+0x18>)
 80016c0:	f01c fa7a 	bl	801dbb8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20001ae8 	.word	0x20001ae8
 80016cc:	20001b14 	.word	0x20001b14

080016d0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_SUBGHZ_Init+0x20>)
 8001706:	2208      	movs	r2, #8
 8001708:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_SUBGHZ_Init+0x20>)
 800170c:	f006 fad6 	bl	8007cbc <HAL_SUBGHZ_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001716:	f7ff fe89 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000788 	.word	0x20000788

08001724 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff ffcf 	bl	80016d0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2032      	movs	r0, #50	@ 0x32
 8001738:	f002 fb8d 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800173c:	2032      	movs	r0, #50	@ 0x32
 800173e:	f002 fba4 	bl	8003e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800175c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
//	DBG_Init();

	/* USER CODE END SystemApp_Init_1 */

	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ffe8 	bl	800174a <LL_RCC_SetClkAfterWakeFromStop>

	/*Initialize timer and RTC*/
	UTIL_TIMER_Init();
 800177a:	f019 fc13 	bl	801afa4 <UTIL_TIMER_Init>
	SYS_TimerInitialisedFlag = 1;
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <SystemApp_Init+0x40>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
	/* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
	DBG_Init();
 8001784:	f000 f8a8 	bl	80018d8 <DBG_Init>

	/*Initialize the terminal */
	UTIL_ADV_TRACE_Init();
 8001788:	f018 fdb8 	bl	801a2fc <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <SystemApp_Init+0x44>)
 800178e:	f018 fe63 	bl	801a458 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

	/* #warning "should be removed when proper obl is done" */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <SystemApp_Init+0x48>)
 8001794:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001798:	611a      	str	r2, [r3, #16]

	/*Set verbose LEVEL*/
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800179a:	2002      	movs	r0, #2
 800179c:	f018 fe6a 	bl	801a474 <UTIL_ADV_TRACE_SetVerboseLevel>

	/*Initialize the Sensors */
//	EnvSensors_Init();

	/*Init low power manager*/
	UTIL_LPM_Init();
 80017a0:	f019 f852 	bl	801a848 <UTIL_LPM_Init>
	/* Disable Stand-by mode */
	UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80017a4:	2101      	movs	r1, #1
 80017a6:	2001      	movs	r0, #1
 80017a8:	f019 f88e 	bl	801a8c8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

	/* USER CODE BEGIN SystemApp_Init_2 */

	/* USER CODE END SystemApp_Init_2 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000794 	.word	0x20000794
 80017b4:	080017c9 	.word	0x080017c9
 80017b8:	58004000 	.word	0x58004000

080017bc <UTIL_SEQ_Idle>:

/**
 * @brief redefines __weak function in stm32_seq.c such to enter low power
 */
void UTIL_SEQ_Idle(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_SEQ_Idle_1 */

	/* USER CODE END UTIL_SEQ_Idle_1 */
	UTIL_LPM_EnterLowPower();
 80017c0:	f019 f8b2 	bl	801a928 <UTIL_LPM_EnterLowPower>
	/* USER CODE BEGIN UTIL_SEQ_Idle_2 */

	/* USER CODE END UTIL_SEQ_Idle_2 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <TimestampNow>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TimestampNow_1 */

	/* USER CODE END TimestampNow_1 */
	SysTime_t curtime = SysTimeGet();
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f019 fb26 	bl	801ae28 <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <TimestampNow+0x3c>)
 80017e6:	2110      	movs	r1, #16
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f81d 	bl	8001828 <tiny_snprintf_like>
	*size = strlen((char *)buff);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe fcc6 	bl	8000180 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN TimestampNow_2 */

	/* USER CODE END TimestampNow_2 */
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	080214e0 	.word	0x080214e0

08001808 <UTIL_ADV_TRACE_PreSendHook>:
/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800180c:	2101      	movs	r1, #1
 800180e:	2002      	movs	r0, #2
 8001810:	f019 f82a 	bl	801a868 <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

	/* USER CODE END UTIL_LPM_SetStopMode_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800181c:	2100      	movs	r1, #0
 800181e:	2002      	movs	r0, #2
 8001820:	f019 f822 	bl	801a868 <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

	/* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001828:	b40c      	push	{r2, r3}
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN tiny_snprintf_like_1 */

	/* USER CODE END tiny_snprintf_like_1 */
	va_list vaArgs;
	va_start(vaArgs, strFormat);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	60fb      	str	r3, [r7, #12]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f019 fed3 	bl	801b5ec <tiny_vsnprintf_like>
	va_end(vaArgs);
	/* USER CODE BEGIN tiny_snprintf_like_2 */

	/* USER CODE END tiny_snprintf_like_2 */
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001850:	b002      	add	sp, #8
 8001852:	4770      	bx	lr

08001854 <HAL_InitTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	/*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
	/* USER CODE BEGIN HAL_InitTick_1 */

	/* USER CODE END HAL_InitTick_1 */
	return HAL_OK;
 800185c:	2300      	movs	r3, #0
	/* USER CODE BEGIN HAL_InitTick_2 */

	/* USER CODE END HAL_InitTick_2 */
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_GetTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
uint32_t HAL_GetTick(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_GetTick_1 */

	/* USER CODE END HAL_GetTick_1 */
	if (SYS_TimerInitialisedFlag == 0)
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_GetTick+0x24>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_GetTick+0x18>

		/* USER CODE END HAL_GetTick_EarlyCall */
	}
	else
	{
		ret = TIMER_IF_GetTimerValue();
 800187a:	f000 f9c7 	bl	8001c0c <TIMER_IF_GetTimerValue>
 800187e:	6078      	str	r0, [r7, #4]
	}
	/* USER CODE BEGIN HAL_GetTick_2 */

	/* USER CODE END HAL_GetTick_2 */
	return ret;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000794 	.word	0x20000794

08001890 <HAL_Delay>:

/**
 * @note This function overwrites the __weak one from HAL
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa3d 	bl	8001d1a <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <LL_AHB2_GRP1_EnableClock>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
#define DEBUGGER_ENABLED MY_DEBUGGER_ENABLED
  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80018de:	f001 f943 	bl	8002b68 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80018e2:	f001 f947 	bl	8002b74 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80018e6:	f001 f94b 	bl	8002b80 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001904:	2002      	movs	r0, #2
 8001906:	f7ff ffcf 	bl	80018a8 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800190a:	2002      	movs	r0, #2
 800190c:	f7ff ffcc 	bl	80018a8 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001914:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	@ (8001950 <DBG_Init+0x78>)
 800191c:	f002 fef8 	bl	8004710 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001924:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4809      	ldr	r0, [pc, #36]	@ (8001950 <DBG_Init+0x78>)
 800192c:	f002 fef0 	bl	8004710 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <DBG_Init+0x78>)
 8001938:	f003 f918 	bl	8004b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001942:	4803      	ldr	r0, [pc, #12]	@ (8001950 <DBG_Init+0x78>)
 8001944:	f003 f912 	bl	8004b6c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400

08001954 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e00a      	b.n	800197c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001966:	f3af 8000 	nop.w
 800196a:	4601      	mov	r1, r0
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	b2ca      	uxtb	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf0      	blt.n	8001966 <_read+0x12>
  }

  return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e009      	b.n	80019b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	60ba      	str	r2, [r7, #8]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf1      	blt.n	80019a0 <_write+0x12>
  }
  return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_close>:

int _close(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ec:	605a      	str	r2, [r3, #4]
  return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_isatty>:

int _isatty(int file)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f01e fef8 	bl	802084c <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20008000 	.word	0x20008000
 8001a88:	00000800 	.word	0x00000800
 8001a8c:	20000798 	.word	0x20000798
 8001a90:	20001e38 	.word	0x20001e38

08001a94 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <TIMER_IF_Init+0x5c>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	f083 0301 	eor.w	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001acc:	f7ff fcdc 	bl	8001488 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001ad0:	f000 f856 	bl	8001b80 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ad4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ada:	f005 fe7b 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ae6:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ae8:	f005 ffd4 	bl	8007a94 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 f9c9 	bl	8001e84 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001af2:	f000 f85f 	bl	8001bb4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <TIMER_IF_Init+0x5c>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001afc:	79fb      	ldrb	r3, [r7, #7]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000079c 	.word	0x2000079c
 8001b0c:	20000750 	.word	0x20000750

08001b10 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08e      	sub	sp, #56	@ 0x38
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	222c      	movs	r2, #44	@ 0x2c
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f01e fe32 	bl	8020790 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001b2c:	f000 f828 	bl	8001b80 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <TIMER_IF_StartTimer+0x68>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b4c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <TIMER_IF_StartTimer+0x6c>)
 8001b5e:	f005 fd2d 	bl	80075bc <HAL_RTC_SetAlarm_IT>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001b68:	f7ff fc60 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3738      	adds	r7, #56	@ 0x38
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200007a0 	.word	0x200007a0
 8001b7c:	20000750 	.word	0x20000750

08001b80 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <TIMER_IF_StopTimer+0x2c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001b90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b94:	4806      	ldr	r0, [pc, #24]	@ (8001bb0 <TIMER_IF_StopTimer+0x30>)
 8001b96:	f005 fe1d 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <TIMER_IF_StopTimer+0x30>)
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40002800 	.word	0x40002800
 8001bb0:	20000750 	.word	0x20000750

08001bb4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001bb8:	f000 f984 	bl	8001ec4 <GetTimerTicks>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a03      	ldr	r2, [pc, #12]	@ (8001bcc <TIMER_IF_SetTimerContext+0x18>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001bc2:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <TIMER_IF_SetTimerContext+0x18>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200007a0 	.word	0x200007a0

08001bd0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <TIMER_IF_GetTimerContext+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	200007a0 	.word	0x200007a0

08001be4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001bee:	f000 f969 	bl	8001ec4 <GetTimerTicks>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200007a0 	.word	0x200007a0

08001c0c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <TIMER_IF_GetTimerValue+0x24>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001c1e:	f000 f951 	bl	8001ec4 <GetTimerTicks>
 8001c22:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000079c 	.word	0x2000079c

08001c34 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001c3e:	2303      	movs	r3, #3
 8001c40:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001c4e:	b5b0      	push	{r4, r5, r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001c56:	2100      	movs	r1, #0
 8001c58:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	460a      	mov	r2, r1
 8001c60:	4603      	mov	r3, r0
 8001c62:	0d95      	lsrs	r5, r2, #22
 8001c64:	0294      	lsls	r4, r2, #10
 8001c66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7ff f863 	bl	8000d3c <__aeabi_uldivmod>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdb0      	pop	{r4, r5, r7, pc}

08001c88 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001c88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001c92:	2100      	movs	r1, #0
 8001c94:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	2000      	movs	r0, #0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4605      	mov	r5, r0
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f04f 0a00 	mov.w	sl, #0
 8001ca6:	f04f 0b00 	mov.w	fp, #0
 8001caa:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001cae:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001cb2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001cb6:	4650      	mov	r0, sl
 8001cb8:	4659      	mov	r1, fp
 8001cba:	1b02      	subs	r2, r0, r4
 8001cbc:	eb61 0305 	sbc.w	r3, r1, r5
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	0099      	lsls	r1, r3, #2
 8001cca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001cce:	0090      	lsls	r0, r2, #2
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	eb12 0804 	adds.w	r8, r2, r4
 8001cd8:	eb43 0905 	adc.w	r9, r3, r5
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ce8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	4640      	mov	r0, r8
 8001cf6:	4649      	mov	r1, r9
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	0a82      	lsrs	r2, r0, #10
 8001d02:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001d06:	0a8b      	lsrs	r3, r1, #10
 8001d08:	4613      	mov	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d18:	4770      	bx	lr

08001d1a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff93 	bl	8001c4e <TIMER_IF_Convert_ms2Tick>
 8001d28:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001d2a:	f000 f8cb 	bl	8001ec4 <GetTimerTicks>
 8001d2e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001d30:	e000      	b.n	8001d34 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001d32:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001d34:	f000 f8c6 	bl	8001ec4 <GetTimerTicks>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f6      	bhi.n	8001d32 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_RTCEx_SSRUEventCallback>:
//
//	/* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
//}

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001d56:	f000 f8a5 	bl	8001ea4 <TIMER_IF_BkUp_Read_MSBticks>
 8001d5a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f88f 	bl	8001e84 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001d6e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001d7c:	f000 f8a2 	bl	8001ec4 <GetTimerTicks>
 8001d80:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001d82:	f000 f88f 	bl	8001ea4 <TIMER_IF_BkUp_Read_MSBticks>
 8001d86:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	000b      	movs	r3, r1
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001da0:	2000      	movs	r0, #0
 8001da2:	460c      	mov	r4, r1
 8001da4:	4605      	mov	r5, r0
 8001da6:	eb12 0804 	adds.w	r8, r2, r4
 8001daa:	eb43 0905 	adc.w	r9, r3, r5
 8001dae:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001db2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	0a82      	lsrs	r2, r0, #10
 8001dc0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001dc4:	0a8b      	lsrs	r3, r1, #10
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001dd8:	f04f 0b00 	mov.w	fp, #0
 8001ddc:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff50 	bl	8001c88 <TIMER_IF_Convert_Tick2ms>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3730      	adds	r7, #48	@ 0x30
 8001df6:	46bd      	mov	sp, r7
 8001df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001dfc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001e0a:	f005 fe8f 	bl	8007b2c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000750 	.word	0x20000750

08001e1c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	2101      	movs	r1, #1
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001e2a:	f005 fe7f 	bl	8007b2c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000750 	.word	0x20000750

08001e3c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001e46:	2100      	movs	r1, #0
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001e4a:	f005 fe87 	bl	8007b5c <HAL_RTCEx_BKUPRead>
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000750 	.word	0x20000750

08001e60 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001e6e:	f005 fe75 	bl	8007b5c <HAL_RTCEx_BKUPRead>
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001e74:	687b      	ldr	r3, [r7, #4]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000750 	.word	0x20000750

08001e84 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001e92:	f005 fe4b 	bl	8007b2c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000750 	.word	0x20000750

08001ea4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001eaa:	2102      	movs	r1, #2
 8001eac:	4804      	ldr	r0, [pc, #16]	@ (8001ec0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001eae:	f005 fe55 	bl	8007b5c <HAL_RTCEx_BKUPRead>
 8001eb2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001eb4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000750 	.word	0x20000750

08001ec4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001eca:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <GetTimerTicks+0x34>)
 8001ecc:	f7ff fde2 	bl	8001a94 <LL_RTC_TIME_GetSubSecond>
 8001ed0:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ed2:	e003      	b.n	8001edc <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001ed4:	4808      	ldr	r0, [pc, #32]	@ (8001ef8 <GetTimerTicks+0x34>)
 8001ed6:	f7ff fddd 	bl	8001a94 <LL_RTC_TIME_GetSubSecond>
 8001eda:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001edc:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <GetTimerTicks+0x34>)
 8001ede:	f7ff fdd9 	bl	8001a94 <LL_RTC_TIME_GetSubSecond>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d1f4      	bne.n	8001ed4 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40002800 	.word	0x40002800

08001efc <LL_AHB2_GRP1_EnableClock>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <LL_APB1_GRP1_EnableClock>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f50:	68fb      	ldr	r3, [r7, #12]
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <LL_APB1_GRP1_DisableClock>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f72:	4013      	ands	r3, r2
 8001f74:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f86:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <MX_USART2_UART_Init+0x94>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc8:	4811      	ldr	r0, [pc, #68]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fca:	f006 fac2 	bl	8008552 <HAL_UART_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fd4:	f7ff fa2a 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	480d      	ldr	r0, [pc, #52]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fdc:	f008 fbe5 	bl	800a7aa <HAL_UARTEx_SetTxFifoThreshold>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fe6:	f7ff fa21 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fea:	2100      	movs	r1, #0
 8001fec:	4808      	ldr	r0, [pc, #32]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fee:	f008 fc1a 	bl	800a826 <HAL_UARTEx_SetRxFifoThreshold>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ff8:	f7ff fa18 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001ffe:	f008 fb99 	bl	800a734 <HAL_UARTEx_EnableFifoMode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002008:	f7ff fa10 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200007a4 	.word	0x200007a4
 8002014:	40004400 	.word	0x40004400

08002018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b096      	sub	sp, #88	@ 0x58
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2238      	movs	r2, #56	@ 0x38
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f01e fba9 	bl	8020790 <memset>
  if(uartHandle->Instance==USART2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a33      	ldr	r2, [pc, #204]	@ (8002110 <HAL_UART_MspInit+0xf8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d15f      	bne.n	8002108 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002048:	2302      	movs	r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800204c:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_UART_MspInit+0xfc>)
 800204e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4618      	mov	r0, r3
 8002056:	f004 ff91 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002060:	f7ff f9e4 	bl	800142c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002064:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002068:	f7ff ff60 	bl	8001f2c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff ff45 	bl	8001efc <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002072:	230c      	movs	r3, #12
 8002074:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002082:	2307      	movs	r3, #7
 8002084:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002090:	f002 fb3e 	bl	8004710 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002094:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_UART_MspInit+0x100>)
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_UART_MspInit+0x104>)
 8002098:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800209a:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <HAL_UART_MspInit+0x100>)
 800209c:	2214      	movs	r2, #20
 800209e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020a2:	2210      	movs	r2, #16
 80020a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020ca:	4813      	ldr	r0, [pc, #76]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020cc:	f001 ff08 	bl	8003ee0 <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80020d6:	f7ff f9a9 	bl	800142c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020da:	2110      	movs	r1, #16
 80020dc:	480e      	ldr	r0, [pc, #56]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020de:	f002 fa3f 	bl	8004560 <HAL_DMA_ConfigChannelAttributes>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 80020e8:	f7ff f9a0 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020f0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2102      	movs	r1, #2
 80020fc:	2025      	movs	r0, #37	@ 0x25
 80020fe:	f001 feaa 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002102:	2025      	movs	r0, #37	@ 0x25
 8002104:	f001 fec1 	bl	8003e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002108:	bf00      	nop
 800210a:	3758      	adds	r7, #88	@ 0x58
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40004400 	.word	0x40004400
 8002114:	000c0004 	.word	0x000c0004
 8002118:	20000838 	.word	0x20000838
 800211c:	40020058 	.word	0x40020058

08002120 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_UART_MspDeInit+0x3c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d110      	bne.n	8002154 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002132:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002136:	f7ff ff11 	bl	8001f5c <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800213a:	210c      	movs	r1, #12
 800213c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002140:	f002 fc46 	bl	80049d0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002148:	4618      	mov	r0, r3
 800214a:	f001 ff71 	bl	8004030 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800214e:	2025      	movs	r0, #37	@ 0x25
 8002150:	f001 fea9 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40004400 	.word	0x40004400

08002160 <LL_APB1_GRP1_ForceReset>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_APB1_GRP1_ReleaseReset>:
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	43db      	mvns	r3, r3
 8002194:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002198:	4013      	ands	r3, r2
 800219a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <LL_EXTI_EnableIT_0_31+0x24>)
 80021b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80021b6:	4905      	ldr	r1, [pc, #20]	@ (80021cc <LL_EXTI_EnableIT_0_31+0x24>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	58000800 	.word	0x58000800

080021d0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80021d8:	4a07      	ldr	r2, [pc, #28]	@ (80021f8 <vcom_Init+0x28>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80021de:	f7ff f877 	bl	80012d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021e2:	f7ff fecd 	bl	8001f80 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80021e6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80021ea:	f7ff ffdd 	bl	80021a8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80021ee:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000089c 	.word	0x2000089c

080021fc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002200:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002204:	f7ff ffac 	bl	8002160 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002208:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800220c:	f7ff ffb9 	bl	8002182 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002210:	4804      	ldr	r0, [pc, #16]	@ (8002224 <vcom_DeInit+0x28>)
 8002212:	f7ff ff85 	bl	8002120 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002216:	200f      	movs	r0, #15
 8002218:	f001 fe45 	bl	8003ea6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800221c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200007a4 	.word	0x200007a4

08002228 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	461a      	mov	r2, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4804      	ldr	r0, [pc, #16]	@ (800224c <vcom_Trace_DMA+0x24>)
 800223c:	f006 fa26 	bl	800868c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002240:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200007a4 	.word	0x200007a4

08002250 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002258:	4a19      	ldr	r2, [pc, #100]	@ (80022c0 <vcom_ReceiveInit+0x70>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800225e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002262:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	e893 0006 	ldmia.w	r3, {r1, r2}
 800226c:	4815      	ldr	r0, [pc, #84]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 800226e:	f008 f9d4 	bl	800a61a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002272:	bf00      	nop
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002282:	d0f7      	beq.n	8002274 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002284:	bf00      	nop
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002294:	d1f7      	bne.n	8002286 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80022a4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80022a6:	4807      	ldr	r0, [pc, #28]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 80022a8:	f008 fa12 	bl	800a6d0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80022ac:	2201      	movs	r2, #1
 80022ae:	4906      	ldr	r1, [pc, #24]	@ (80022c8 <vcom_ReceiveInit+0x78>)
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 80022b2:	f006 f99f 	bl	80085f4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80022b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200008a0 	.word	0x200008a0
 80022c4:	200007a4 	.word	0x200007a4
 80022c8:	20000898 	.word	0x20000898

080022cc <vcom_Resume>:

void vcom_Resume(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d0:	4808      	ldr	r0, [pc, #32]	@ (80022f4 <vcom_Resume+0x28>)
 80022d2:	f006 f93e 	bl	8008552 <HAL_UART_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80022dc:	f7ff f8a6 	bl	800142c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <vcom_Resume+0x2c>)
 80022e2:	f001 fdfd 	bl	8003ee0 <HAL_DMA_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80022ec:	f7ff f89e 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200007a4 	.word	0x200007a4
 80022f8:	20000838 	.word	0x20000838

080022fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <HAL_UART_TxCpltCallback+0x24>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d103      	bne.n	8002316 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_UART_TxCpltCallback+0x28>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2000      	movs	r0, #0
 8002314:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40004400 	.word	0x40004400
 8002324:	2000089c 	.word	0x2000089c

08002328 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_UART_RxCpltCallback+0x44>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d113      	bne.n	8002362 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <HAL_UART_RxCpltCallback+0x48>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_UART_RxCpltCallback+0x30>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800234c:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <HAL_UART_RxCpltCallback+0x48>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	2101      	movs	r1, #1
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <HAL_UART_RxCpltCallback+0x4c>)
 8002356:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	4906      	ldr	r1, [pc, #24]	@ (8002374 <HAL_UART_RxCpltCallback+0x4c>)
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f006 f949 	bl	80085f4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40004400 	.word	0x40004400
 8002370:	200008a0 	.word	0x200008a0
 8002374:	20000898 	.word	0x20000898

08002378 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */
	my_MX_GPIO_Init_done = 1;
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <MX_LoRaWAN_Init+0x18>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002382:	f7ff f9f5 	bl	8001770 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002386:	f000 f80d 	bl	80023a4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200008a4 	.word	0x200008a4

08002394 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f018 fb16 	bl	801a9cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
#endif

#if MY_TX

#if MY_TX_ABP
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RTF), UTIL_SEQ_RFU, SendTxData);	// Register task for: SendTxData
 80023a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002424 <LoRaWAN_Init+0x80>)
 80023aa:	2100      	movs	r1, #0
 80023ac:	2010      	movs	r0, #16
 80023ae:	f018 fc09 	bl	801abc4 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
 80023b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002428 <LoRaWAN_Init+0x84>)
 80023b4:	2100      	movs	r1, #0
 80023b6:	2020      	movs	r0, #32
 80023b8:	f018 fc04 	bl	801abc4 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
 80023bc:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <LoRaWAN_Init+0x88>)
 80023be:	2100      	movs	r1, #0
 80023c0:	2040      	movs	r0, #64	@ 0x40
 80023c2:	f018 fbff 	bl	801abc4 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
 80023c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002430 <LoRaWAN_Init+0x8c>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80023ce:	f018 fbf9 	bl	801abc4 <UTIL_SEQ_RegTask>
#if AI
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_AIF), UTIL_SEQ_RFU, My_AIF);		// Register Task for: My_AIF
 80023d2:	4a18      	ldr	r2, [pc, #96]	@ (8002434 <LoRaWAN_Init+0x90>)
 80023d4:	2100      	movs	r1, #0
 80023d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80023da:	f018 fbf3 	bl	801abc4 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
#endif

	LoraInfo_Init();									 					// LoRaWAN info (Region, ClassB, Kms(Key Management Service))
 80023de:	f000 f9bf 	bl	8002760 <LoraInfo_Init>

	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);     					// LoRaMacPrimitives: Used to notify LmHandler of LoRaMac events and LoRaMacCallbacks On MacProcessNotify:
 80023e2:	4915      	ldr	r1, [pc, #84]	@ (8002438 <LoRaWAN_Init+0x94>)
 80023e4:	4815      	ldr	r0, [pc, #84]	@ (800243c <LoRaWAN_Init+0x98>)
 80023e6:	f008 facb 	bl	800a980 <LmHandlerInit>
	// When a radio interrupt (IRQ) occurs, it means that the radio has finished transmitting or receiving a message and needs to be handled by the MAC layer

	//LmHandlerParams.TxDatarate = 2;
	LmHandlerConfigure(&LmHandlerParams);                					// LoRaWAN Configuration using LmHandlerParams
 80023ea:	4815      	ldr	r0, [pc, #84]	@ (8002440 <LoRaWAN_Init+0x9c>)
 80023ec:	f008 faf6 	bl	800a9dc <LmHandlerConfigure>

	LmHandlerJoin(ActivationType, ForceRejoin);          					// LoRaWAN network ACTIVATION_TYPE_ABP file  (LmHandlerJoin) is modified, to work only with ABP no need to OTAA activation
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <LoRaWAN_Init+0xa0>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <LoRaWAN_Init+0xa4>)
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f008 fc10 	bl	800ac20 <LmHandlerJoin>

	if (my_Current_State != PSS)
 8002400:	4b12      	ldr	r3, [pc, #72]	@ (800244c <LoRaWAN_Init+0xa8>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d002      	beq.n	800240e <LoRaWAN_Init+0x6a>
	{
		my_SubghzApp_Init_done = 1;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <LoRaWAN_Init+0xac>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
#if MY_RADIO_DEACTIVATION
		Radio.Sleep();
#endif
	}
#if MY_TX_ABP
	SendTxData();
 800240e:	f000 f93b 	bl	8002688 <SendTxData>
#endif
	my_LoRAWAN_Init++;
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <LoRaWAN_Init+0xb0>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <LoRaWAN_Init+0xb0>)
 800241c:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END LoRaWAN_Init_Last */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	08002689 	.word	0x08002689
 8002428:	0801c84d 	.word	0x0801c84d
 800242c:	0801c9f5 	.word	0x0801c9f5
 8002430:	0801cb35 	.word	0x0801cb35
 8002434:	0801cbf9 	.word	0x0801cbf9
 8002438:	01030000 	.word	0x01030000
 800243c:	20000004 	.word	0x20000004
 8002440:	20000050 	.word	0x20000050
 8002444:	20000000 	.word	0x20000000
 8002448:	200008a6 	.word	0x200008a6
 800244c:	20001be9 	.word	0x20001be9
 8002450:	200008a7 	.word	0x200008a7
 8002454:	200008a5 	.word	0x200008a5

08002458 <My_Adv_Data_Init>:


#if MY_TX

void My_Adv_Data_Init(void)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]

	if (my_LoRAWAN_Init++ > N_LORA_TX)
 8002462:	4b5f      	ldr	r3, [pc, #380]	@ (80025e0 <My_Adv_Data_Init+0x188>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	b2d1      	uxtb	r1, r2
 800246a:	4a5d      	ldr	r2, [pc, #372]	@ (80025e0 <My_Adv_Data_Init+0x188>)
 800246c:	7011      	strb	r1, [r2, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f240 80a7 	bls.w	80025c2 <My_Adv_Data_Init+0x16a>
	{
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time >> 8) & 0xFF); 			// 0
 8002474:	4b5b      	ldr	r3, [pc, #364]	@ (80025e4 <My_Adv_Data_Init+0x18c>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	b298      	uxth	r0, r3
 800247c:	4b5a      	ldr	r3, [pc, #360]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	6079      	str	r1, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	b2c2      	uxtb	r2, r0
 800248a:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time & 0xFF); 					// 1
 800248c:	4b55      	ldr	r3, [pc, #340]	@ (80025e4 <My_Adv_Data_Init+0x18c>)
 800248e:	8818      	ldrh	r0, [r3, #0]
 8002490:	4b55      	ldr	r3, [pc, #340]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1c59      	adds	r1, r3, #1
 8002498:	6079      	str	r1, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	b2c2      	uxtb	r2, r0
 800249e:	701a      	strb	r2, [r3, #0]

#if MY_ES_FEATURE_ENABLE

		if(my_Cmode == DCM)
 80024a0:	4b52      	ldr	r3, [pc, #328]	@ (80025ec <My_Adv_Data_Init+0x194>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <My_Adv_Data_Init+0x58>
		{
			my_ESD_Level = 0;
 80024a8:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <My_Adv_Data_Init+0x198>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e00a      	b.n	80024c6 <My_Adv_Data_Init+0x6e>
		}
		else if (my_Cmode == CCM)
 80024b0:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <My_Adv_Data_Init+0x194>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d103      	bne.n	80024c0 <My_Adv_Data_Init+0x68>
		{
			my_ESD_Level = 1;
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <My_Adv_Data_Init+0x198>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e002      	b.n	80024c6 <My_Adv_Data_Init+0x6e>
		}
		else
		{
			my_ESD_Level = 2;
 80024c0:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <My_Adv_Data_Init+0x198>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
		}
		AppData.Buffer[i++] = (uint8_t)(my_ESD_Level & 0xFF); 					// 2
 80024c6:	4b48      	ldr	r3, [pc, #288]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	1c59      	adds	r1, r3, #1
 80024ce:	6079      	str	r1, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a47      	ldr	r2, [pc, #284]	@ (80025f0 <My_Adv_Data_Init+0x198>)
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(My_EBK_status & 0xFF); 					// 3
 80024d8:	4b43      	ldr	r3, [pc, #268]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	1c59      	adds	r1, r3, #1
 80024e0:	6079      	str	r1, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a43      	ldr	r2, [pc, #268]	@ (80025f4 <My_Adv_Data_Init+0x19c>)
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE

#if MY_SHT40
		/**** Get Temperature from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 24) & 0xFF); 			// 4
 80024ea:	4b43      	ldr	r3, [pc, #268]	@ (80025f8 <My_Adv_Data_Init+0x1a0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e18      	lsrs	r0, r3, #24
 80024f0:	4b3d      	ldr	r3, [pc, #244]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	6079      	str	r1, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2c2      	uxtb	r2, r0
 80024fe:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 16) & 0xFF); 			// 5
 8002500:	4b3d      	ldr	r3, [pc, #244]	@ (80025f8 <My_Adv_Data_Init+0x1a0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0c18      	lsrs	r0, r3, #16
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	1c59      	adds	r1, r3, #1
 800250e:	6079      	str	r1, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	b2c2      	uxtb	r2, r0
 8002514:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 8) & 0xFF); 			// 6
 8002516:	4b38      	ldr	r3, [pc, #224]	@ (80025f8 <My_Adv_Data_Init+0x1a0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0a18      	lsrs	r0, r3, #8
 800251c:	4b32      	ldr	r3, [pc, #200]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	6079      	str	r1, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	b2c2      	uxtb	r2, r0
 800252a:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Temp & 0xFF); 					// 7
 800252c:	4b32      	ldr	r3, [pc, #200]	@ (80025f8 <My_Adv_Data_Init+0x1a0>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	1c59      	adds	r1, r3, #1
 8002538:	6079      	str	r1, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	b2c2      	uxtb	r2, r0
 800253e:	701a      	strb	r2, [r3, #0]

		/**** Get RH from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 24) & 0xFF); 		// 8
 8002540:	4b2e      	ldr	r3, [pc, #184]	@ (80025fc <My_Adv_Data_Init+0x1a4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e18      	lsrs	r0, r3, #24
 8002546:	4b28      	ldr	r3, [pc, #160]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1c59      	adds	r1, r3, #1
 800254e:	6079      	str	r1, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	b2c2      	uxtb	r2, r0
 8002554:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 16) & 0xFF); 		// 9
 8002556:	4b29      	ldr	r3, [pc, #164]	@ (80025fc <My_Adv_Data_Init+0x1a4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0c18      	lsrs	r0, r3, #16
 800255c:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	6079      	str	r1, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	b2c2      	uxtb	r2, r0
 800256a:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 8) & 0xFF); 			// 10
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <My_Adv_Data_Init+0x1a4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0a18      	lsrs	r0, r3, #8
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1c59      	adds	r1, r3, #1
 800257a:	6079      	str	r1, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	b2c2      	uxtb	r2, r0
 8002580:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Humid & 0xFF); 				// 11
 8002582:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <My_Adv_Data_Init+0x1a4>)
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	1c59      	adds	r1, r3, #1
 800258e:	6079      	str	r1, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	b2c2      	uxtb	r2, r0
 8002594:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time_stop >> 8) & 0xFF); 		// 43
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time_stop & 0xFF); 			// 44
#endif
		/* Send the result of the neural network*/
#if AI
		AppData.Buffer[i++] = (uint8_t)(my_SoilSensor);
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <My_Adv_Data_Init+0x1a8>)
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1c59      	adds	r1, r3, #1
 80025a2:	6079      	str	r1, [r7, #4]
 80025a4:	18d4      	adds	r4, r2, r3
 80025a6:	f7fe fba9 	bl	8000cfc <__aeabi_f2uiz>
 80025aa:	4603      	mov	r3, r0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	7023      	strb	r3, [r4, #0]
		AppData.Buffer[i++] = (uint8_t)(result_nn);
 80025b0:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	6079      	str	r1, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <My_Adv_Data_Init+0x1ac>)
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	701a      	strb	r2, [r3, #0]
#endif
	}

	AppData.BufferSize = i;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 80025c8:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <My_Adv_Data_Init+0x190>)
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
	my_Trise_time = 0;
 80025d0:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <My_Adv_Data_Init+0x18c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	801a      	strh	r2, [r3, #0]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd90      	pop	{r4, r7, pc}
 80025de:	bf00      	nop
 80025e0:	200008a5 	.word	0x200008a5
 80025e4:	20001bc6 	.word	0x20001bc6
 80025e8:	20000068 	.word	0x20000068
 80025ec:	20001bea 	.word	0x20001bea
 80025f0:	20001bb8 	.word	0x20001bb8
 80025f4:	20001bb9 	.word	0x20001bb9
 80025f8:	20001bf8 	.word	0x20001bf8
 80025fc:	20001bfc 	.word	0x20001bfc
 8002600:	20001bec 	.word	0x20001bec
 8002604:	20001a48 	.word	0x20001a48

08002608 <My_EMS_Adv_Data_Init>:

void My_EMS_Adv_Data_Init(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
	uint8_t j = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	70fb      	strb	r3, [r7, #3]

	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 8002616:	2300      	movs	r3, #0
 8002618:	70fb      	strb	r3, [r7, #3]
 800261a:	e021      	b.n	8002660 <My_EMS_Adv_Data_Init+0x58>
	{
		AppData.Buffer[i++] = (uint8_t)((my_ems_buffer[j] >> 8) & 0xFF);
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	4a18      	ldr	r2, [pc, #96]	@ (8002680 <My_EMS_Adv_Data_Init+0x78>)
 8002620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	b298      	uxth	r0, r3
 8002628:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <My_EMS_Adv_Data_Init+0x7c>)
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	6079      	str	r1, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	b2c2      	uxtb	r2, r0
 8002636:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_ems_buffer[j] & 0xFF);
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	4a11      	ldr	r2, [pc, #68]	@ (8002680 <My_EMS_Adv_Data_Init+0x78>)
 800263c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8002640:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <My_EMS_Adv_Data_Init+0x7c>)
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1c59      	adds	r1, r3, #1
 8002648:	6079      	str	r1, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	b2c2      	uxtb	r2, r0
 800264e:	701a      	strb	r2, [r3, #0]
		my_ems_buffer[j] = 0;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	4a0b      	ldr	r2, [pc, #44]	@ (8002680 <My_EMS_Adv_Data_Init+0x78>)
 8002654:	2100      	movs	r1, #0
 8002656:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	3301      	adds	r3, #1
 800265e:	70fb      	strb	r3, [r7, #3]
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	2b08      	cmp	r3, #8
 8002664:	d9da      	bls.n	800261c <My_EMS_Adv_Data_Init+0x14>
	}
	AppData.BufferSize = i;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <My_EMS_Adv_Data_Init+0x7c>)
 800266c:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <My_EMS_Adv_Data_Init+0x7c>)
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]

}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20001bcc 	.word	0x20001bcc
 8002684:	20000068 	.word	0x20000068

08002688 <SendTxData>:

void SendTxData(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 800268c:	f01a fe16 	bl	801d2bc <My_Set_All_GPIO_To_Analog_Mode>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);											// Open VDD to ES Switch
 8002690:	2000      	movs	r0, #0
 8002692:	f01b f97d 	bl	801d990 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_OPEN);										// unBias the Sensors
#endif

	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0); 	// Configure Radio Interrupt with the Highest Priority
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	2032      	movs	r0, #50	@ 0x32
 800269c:	f001 fbdb 	bl	8003e56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);			// Set Radio Interrupt
 80026a0:	2032      	movs	r0, #50	@ 0x32
 80026a2:	f001 fbf2 	bl	8003e8a <HAL_NVIC_EnableIRQ>

	if (my_Current_State == PSS)
 80026a6:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <SendTxData+0xa0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d113      	bne.n	80026d6 <SendTxData+0x4e>
	{
		HAL_ResumeTick();
 80026ae:	f000 fa4d 	bl	8002b4c <HAL_ResumeTick>
		while(1)
		{
			My_Adv_Data_Init();
 80026b2:	f7ff fed1 	bl	8002458 <My_Adv_Data_Init>
			HAL_Delay(3000);			// If Supplied by a Battery --> Add a delay for the Idle time between TX
 80026b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80026ba:	f7ff f8e9 	bl	8001890 <HAL_Delay>
			my_Previous_State = PSS;
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <SendTxData+0xa4>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
			LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 80026c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <SendTxData+0xa8>)
 80026c6:	78db      	ldrb	r3, [r3, #3]
 80026c8:	2200      	movs	r2, #0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4819      	ldr	r0, [pc, #100]	@ (8002734 <SendTxData+0xac>)
 80026ce:	f008 fae3 	bl	800ac98 <LmHandlerSend>
			My_Adv_Data_Init();
 80026d2:	bf00      	nop
 80026d4:	e7ed      	b.n	80026b2 <SendTxData+0x2a>
		}
	}
	else
	{
		My_Exit_Stop2_Mode_WFI();
 80026d6:	f01a feab 	bl	801d430 <My_Exit_Stop2_Mode_WFI>

		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);	// Clear LPTIM1 Interrupt
 80026da:	2027      	movs	r0, #39	@ 0x27
 80026dc:	f001 fbf1 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);		// Disable LPTIM1 Interrupt
 80026e0:	2027      	movs	r0, #39	@ 0x27
 80026e2:	f001 fbe0 	bl	8003ea6 <HAL_NVIC_DisableIRQ>

		if (my_Current_State != SMS)
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <SendTxData+0xa0>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b07      	cmp	r3, #7
 80026ec:	d005      	beq.n	80026fa <SendTxData+0x72>
		{
			my_Previous_State = EHS;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <SendTxData+0xa4>)
 80026f0:	2203      	movs	r2, #3
 80026f2:	701a      	strb	r2, [r3, #0]
			my_Current_State = RTS;				// EHS --> RTS
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <SendTxData+0xa0>)
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
		}

		/*Check if it is the first Wake-up event after the Energy Missing State (EMS)
		 *If the system just woke up from EMS it sends the buffer that has been filled during the night
		 */
		if(my_Previous_State == EMS)
 80026fa:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <SendTxData+0xa4>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d102      	bne.n	8002708 <SendTxData+0x80>
		{
			My_EMS_Adv_Data_Init();
 8002702:	f7ff ff81 	bl	8002608 <My_EMS_Adv_Data_Init>
 8002706:	e001      	b.n	800270c <SendTxData+0x84>
		}
		else 									// Otherwise it sends the last measurement
		{
			My_Adv_Data_Init();
 8002708:	f7ff fea6 	bl	8002458 <My_Adv_Data_Init>
		}

		BSP_RADIO_Init();
 800270c:	f000 f8de 	bl	80028cc <BSP_RADIO_Init>
		LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 8002710:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <SendTxData+0xa8>)
 8002712:	78db      	ldrb	r3, [r3, #3]
 8002714:	2200      	movs	r2, #0
 8002716:	4619      	mov	r1, r3
 8002718:	4806      	ldr	r0, [pc, #24]	@ (8002734 <SendTxData+0xac>)
 800271a:	f008 fabd 	bl	800ac98 <LmHandlerSend>
		BSP_RADIO_DeInit();
 800271e:	f000 f913 	bl	8002948 <BSP_RADIO_DeInit>
	}
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20001be9 	.word	0x20001be9
 800272c:	20001be8 	.word	0x20001be8
 8002730:	20000050 	.word	0x20000050
 8002734:	20000068 	.word	0x20000068

08002738 <OnTxData>:

}
#endif
#if MY_TX_ABP
static void OnTxData(LmHandlerTxParams_t *params)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnTxData_1 */

	/* USER CODE END OnTxData_1 */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <OnMacProcessNotify>:
}
#endif

#if MY_TX
static void OnMacProcessNotify(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
#if MY_TX_ABP
	/* USER CODE BEGIN OnMacProcessNotify_1 */
	LoRaMacProcess( );                                                            // should be Called at first the LoRaMAC process before to run all package process features
 800274e:	f00a f915 	bl	800c97c <LoRaMacProcess>

	/* USER CODE END OnMacProcessNotify_1 */

	/* USER CODE BEGIN OnMacProcessNotify_2 */
	UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
 8002752:	2100      	movs	r1, #0
 8002754:	2020      	movs	r0, #32
 8002756:	f018 fa57 	bl	801ac08 <UTIL_SEQ_SetTask>
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
		}
	/* USER CODE END OnMacProcessNotify_2 */
#endif
	/* USER CODE END OnMacProcessNotify_2 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 8002764:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <LoraInfo_Init+0x5c>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800276a:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <LoraInfo_Init+0x5c>)
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002770:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <LoraInfo_Init+0x5c>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <LoraInfo_Init+0x5c>)
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800277c:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <LoraInfo_Init+0x5c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f043 0320 	orr.w	r3, r3, #32
 8002784:	4a0d      	ldr	r2, [pc, #52]	@ (80027bc <LoraInfo_Init+0x5c>)
 8002786:	6053      	str	r3, [r2, #4]
#endif
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <LoraInfo_Init+0x5c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <LoraInfo_Init+0x60>)
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	2000      	movs	r0, #0
 8002798:	f017 fdde 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800279c:	bf00      	nop
 800279e:	f017 fdc9 	bl	801a334 <UTIL_ADV_TRACE_IsBufferEmpty>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d1fa      	bne.n	800279e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <LoraInfo_Init+0x5c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 80027b2:	4b02      	ldr	r3, [pc, #8]	@ (80027bc <LoraInfo_Init+0x5c>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000099c 	.word	0x2000099c
 80027c0:	080214ec 	.word	0x080214ec

080027c4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 80027c8:	4b02      	ldr	r3, [pc, #8]	@ (80027d4 <LoraInfo_GetPtr+0x10>)
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	2000099c 	.word	0x2000099c

080027d8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80027dc:	f000 f876 	bl	80028cc <BSP_RADIO_Init>
 80027e0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f8ce 	bl	8002994 <BSP_RADIO_ConfigRFSwitch>
 80027f8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002806:	f000 f921 	bl	8002a4c <BSP_RADIO_GetTxConfig>
 800280a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}

08002810 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002814:	f000 f921 	bl	8002a5a <BSP_RADIO_IsTCXO>
 8002818:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}

0800281e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002822:	f000 f921 	bl	8002a68 <BSP_RADIO_IsDCDC>
 8002826:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}

0800282c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 f91c 	bl	8002a76 <BSP_RADIO_GetRFOMaxPowerConfig>
 800283e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002848:	480d      	ldr	r0, [pc, #52]	@ (8002880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800284a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800284c:	f01b f972 	bl	801db34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <LoopForever+0x6>)
  ldr r1, =_edata
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <LoopForever+0xe>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002868:	4c0a      	ldr	r4, [pc, #40]	@ (8002894 <LoopForever+0x16>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002876:	f01d ffef 	bl	8020858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800287a:	f7fe fdb7 	bl	80013ec <main>

0800287e <LoopForever>:

LoopForever:
    b LoopForever
 800287e:	e7fe      	b.n	800287e <LoopForever>
  ldr   r0, =_estack
 8002880:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002888:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 800288c:	08022210 	.word	0x08022210
  ldr r2, =_sbss
 8002890:	200006cc 	.word	0x200006cc
  ldr r4, =_ebss
 8002894:	20001e38 	.word	0x20001e38

08002898 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC_IRQHandler>

0800289a <LL_AHB2_GRP1_EnableClock>:
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80028e0:	2004      	movs	r0, #4
 80028e2:	f7ff ffda 	bl	800289a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80028e6:	2310      	movs	r3, #16
 80028e8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4812      	ldr	r0, [pc, #72]	@ (8002944 <BSP_RADIO_Init+0x78>)
 80028fc:	f001 ff08 	bl	8004710 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002900:	2320      	movs	r3, #32
 8002902:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	4619      	mov	r1, r3
 8002908:	480e      	ldr	r0, [pc, #56]	@ (8002944 <BSP_RADIO_Init+0x78>)
 800290a:	f001 ff01 	bl	8004710 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800290e:	2308      	movs	r3, #8
 8002910:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	4619      	mov	r1, r3
 8002916:	480b      	ldr	r0, [pc, #44]	@ (8002944 <BSP_RADIO_Init+0x78>)
 8002918:	f001 fefa 	bl	8004710 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800291c:	2200      	movs	r2, #0
 800291e:	2120      	movs	r1, #32
 8002920:	4808      	ldr	r0, [pc, #32]	@ (8002944 <BSP_RADIO_Init+0x78>)
 8002922:	f002 f923 	bl	8004b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002926:	2200      	movs	r2, #0
 8002928:	2110      	movs	r1, #16
 800292a:	4806      	ldr	r0, [pc, #24]	@ (8002944 <BSP_RADIO_Init+0x78>)
 800292c:	f002 f91e 	bl	8004b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002930:	2200      	movs	r2, #0
 8002932:	2108      	movs	r1, #8
 8002934:	4803      	ldr	r0, [pc, #12]	@ (8002944 <BSP_RADIO_Init+0x78>)
 8002936:	f002 f919 	bl	8004b6c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	48000800 	.word	0x48000800

08002948 <BSP_RADIO_DeInit>:
/**
  * @brief  DeInit Radio Switch
  * @retval BSP status
  */
int32_t BSP_RADIO_DeInit(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800294c:	2004      	movs	r0, #4
 800294e:	f7ff ffa4 	bl	800289a <LL_AHB2_GRP1_EnableClock>

  /* Turn off switch */
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002952:	2200      	movs	r2, #0
 8002954:	2110      	movs	r1, #16
 8002956:	480e      	ldr	r0, [pc, #56]	@ (8002990 <BSP_RADIO_DeInit+0x48>)
 8002958:	f002 f908 	bl	8004b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800295c:	2200      	movs	r2, #0
 800295e:	2120      	movs	r1, #32
 8002960:	480b      	ldr	r0, [pc, #44]	@ (8002990 <BSP_RADIO_DeInit+0x48>)
 8002962:	f002 f903 	bl	8004b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002966:	2200      	movs	r2, #0
 8002968:	2108      	movs	r1, #8
 800296a:	4809      	ldr	r0, [pc, #36]	@ (8002990 <BSP_RADIO_DeInit+0x48>)
 800296c:	f002 f8fe 	bl	8004b6c <HAL_GPIO_WritePin>
  
  /* DeInit the Radio Switch pin */
  HAL_GPIO_DeInit(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN);
 8002970:	2110      	movs	r1, #16
 8002972:	4807      	ldr	r0, [pc, #28]	@ (8002990 <BSP_RADIO_DeInit+0x48>)
 8002974:	f002 f82c 	bl	80049d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN);
 8002978:	2120      	movs	r1, #32
 800297a:	4805      	ldr	r0, [pc, #20]	@ (8002990 <BSP_RADIO_DeInit+0x48>)
 800297c:	f002 f828 	bl	80049d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN);
 8002980:	2108      	movs	r1, #8
 8002982:	4803      	ldr	r0, [pc, #12]	@ (8002990 <BSP_RADIO_DeInit+0x48>)
 8002984:	f002 f824 	bl	80049d0 <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	48000800 	.word	0x48000800

08002994 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d84b      	bhi.n	8002a3c <BSP_RADIO_ConfigRFSwitch+0xa8>
 80029a4:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <BSP_RADIO_ConfigRFSwitch+0x18>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029dd 	.word	0x080029dd
 80029b4:	080029fd 	.word	0x080029fd
 80029b8:	08002a1d 	.word	0x08002a1d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80029bc:	2200      	movs	r2, #0
 80029be:	2108      	movs	r1, #8
 80029c0:	4821      	ldr	r0, [pc, #132]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029c2:	f002 f8d3 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2110      	movs	r1, #16
 80029ca:	481f      	ldr	r0, [pc, #124]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029cc:	f002 f8ce 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2120      	movs	r1, #32
 80029d4:	481c      	ldr	r0, [pc, #112]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029d6:	f002 f8c9 	bl	8004b6c <HAL_GPIO_WritePin>
      break;      
 80029da:	e030      	b.n	8002a3e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80029dc:	2201      	movs	r2, #1
 80029de:	2108      	movs	r1, #8
 80029e0:	4819      	ldr	r0, [pc, #100]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029e2:	f002 f8c3 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029e6:	2201      	movs	r2, #1
 80029e8:	2110      	movs	r1, #16
 80029ea:	4817      	ldr	r0, [pc, #92]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029ec:	f002 f8be 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029f0:	2200      	movs	r2, #0
 80029f2:	2120      	movs	r1, #32
 80029f4:	4814      	ldr	r0, [pc, #80]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029f6:	f002 f8b9 	bl	8004b6c <HAL_GPIO_WritePin>
      break;
 80029fa:	e020      	b.n	8002a3e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80029fc:	2201      	movs	r2, #1
 80029fe:	2108      	movs	r1, #8
 8002a00:	4811      	ldr	r0, [pc, #68]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a02:	f002 f8b3 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a06:	2201      	movs	r2, #1
 8002a08:	2110      	movs	r1, #16
 8002a0a:	480f      	ldr	r0, [pc, #60]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a0c:	f002 f8ae 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a10:	2201      	movs	r2, #1
 8002a12:	2120      	movs	r1, #32
 8002a14:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a16:	f002 f8a9 	bl	8004b6c <HAL_GPIO_WritePin>
      break;
 8002a1a:	e010      	b.n	8002a3e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2108      	movs	r1, #8
 8002a20:	4809      	ldr	r0, [pc, #36]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a22:	f002 f8a3 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a26:	2200      	movs	r2, #0
 8002a28:	2110      	movs	r1, #16
 8002a2a:	4807      	ldr	r0, [pc, #28]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a2c:	f002 f89e 	bl	8004b6c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a30:	2201      	movs	r2, #1
 8002a32:	2120      	movs	r1, #32
 8002a34:	4804      	ldr	r0, [pc, #16]	@ (8002a48 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a36:	f002 f899 	bl	8004b6c <HAL_GPIO_WritePin>
      break;
 8002a3a:	e000      	b.n	8002a3e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8002a3c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	48000800 	.word	0x48000800

08002a4c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002a86:	230f      	movs	r3, #15
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e001      	b.n	8002a90 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002a8c:	2316      	movs	r3, #22
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a90:	68fb      	ldr	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002aa0:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a03      	ldr	r2, [pc, #12]	@ (8002ab4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6053      	str	r3, [r2, #4]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	e0042000 	.word	0xe0042000

08002ab8 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a03      	ldr	r2, [pc, #12]	@ (8002ad0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002ac2:	f023 0302 	bic.w	r3, r3, #2
 8002ac6:	6053      	str	r3, [r2, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	e0042000 	.word	0xe0042000

08002ad4 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a03      	ldr	r2, [pc, #12]	@ (8002aec <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6053      	str	r3, [r2, #4]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	e0042000 	.word	0xe0042000

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afa:	2003      	movs	r0, #3
 8002afc:	f001 f9a0 	bl	8003e40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b00:	f004 f85e 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a09      	ldr	r2, [pc, #36]	@ (8002b2c <HAL_Init+0x3c>)
 8002b08:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b0a:	200f      	movs	r0, #15
 8002b0c:	f7fe fea2 	bl	8001854 <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	71fb      	strb	r3, [r7, #7]
 8002b1a:	e001      	b.n	8002b20 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b1c:	f7fe fd2f 	bl	800157e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b20:	79fb      	ldrb	r3, [r7, #7]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000070 	.word	0x20000070

08002b30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <HAL_SuspendTick+0x18>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a03      	ldr	r2, [pc, #12]	@ (8002b48 <HAL_SuspendTick+0x18>)
 8002b3a:	f023 0302 	bic.w	r3, r3, #2
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <HAL_ResumeTick+0x18>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a03      	ldr	r2, [pc, #12]	@ (8002b64 <HAL_ResumeTick+0x18>)
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002b6c:	f7ff ff96 	bl	8002a9c <LL_DBGMCU_DisableDBGSleepMode>
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002b78:	f7ff ff9e 	bl	8002ab8 <LL_DBGMCU_DisableDBGStopMode>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002b84:	f7ff ffa6 	bl	8002ad4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2107      	movs	r1, #7
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	401a      	ands	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2107      	movs	r1, #7
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	210f      	movs	r1, #15
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 010f 	and.w	r1, r3, #15
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	0219      	lsls	r1, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	400b      	ands	r3, r1
 8002d06:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d2e:	f023 0317 	bic.w	r3, r3, #23
 8002d32:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d54:	f023 0317 	bic.w	r3, r3, #23
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6093      	str	r3, [r2, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d7a:	d101      	bne.n	8002d80 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d9c:	f023 0317 	bic.w	r3, r3, #23
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dc2:	f023 0317 	bic.w	r3, r3, #23
 8002dc6:	f043 0202 	orr.w	r2, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <LL_ADC_IsEnabled+0x18>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <LL_ADC_IsEnabled+0x1a>
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d101      	bne.n	8002e14 <LL_ADC_IsDisableOngoing+0x18>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_ADC_IsDisableOngoing+0x1a>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e30:	f023 0317 	bic.w	r3, r3, #23
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e56:	f023 0317 	bic.w	r3, r3, #23
 8002e5a:	f043 0210 	orr.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d101      	bne.n	8002e84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e17e      	b.n	80031b0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe f961 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff44 	bl	8002d66 <LL_ADC_IsInternalRegulatorEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d115      	bne.n	8002f10 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff18 	bl	8002d1e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eee:	4b9e      	ldr	r3, [pc, #632]	@ (8003168 <HAL_ADC_Init+0x2d8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	4a9d      	ldr	r2, [pc, #628]	@ (800316c <HAL_ADC_Init+0x2dc>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	3301      	adds	r3, #1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f02:	e002      	b.n	8002f0a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f9      	bne.n	8002f04 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff26 	bl	8002d66 <LL_ADC_IsInternalRegulatorEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f043 0210 	orr.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff93 	bl	8002e6c <LL_ADC_REG_IsConversionOngoing>
 8002f46:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 8124 	bne.w	800319e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 8120 	bne.w	800319e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f66:	f043 0202 	orr.w	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff30 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 80a7 	bne.w	80030ce <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7e1b      	ldrb	r3, [r3, #24]
 8002f88:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f8a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e5b      	ldrb	r3, [r3, #25]
 8002f90:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f92:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7e9b      	ldrb	r3, [r3, #26]
 8002f98:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f9a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fa0:	2a00      	cmp	r2, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_ADC_Init+0x11a>
 8002fa4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_Init+0x11c>
 8002faa:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002fac:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002fb2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da04      	bge.n	8002fc6 <HAL_ADC_Init+0x136>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc4:	e001      	b.n	8002fca <HAL_ADC_Init+0x13a>
 8002fc6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002fca:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002fd2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fd4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d114      	bne.n	8003010 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7e9b      	ldrb	r3, [r3, #26]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e00b      	b.n	8003010 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003024:	4313      	orrs	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003036:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	430b      	orrs	r3, r1
 8003042:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003050:	4313      	orrs	r3, r2
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d111      	bne.n	8003086 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800306e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003074:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800307a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	4b38      	ldr	r3, [pc, #224]	@ (8003170 <HAL_ADC_Init+0x2e0>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	6979      	ldr	r1, [r7, #20]
 8003096:	430b      	orrs	r3, r1
 8003098:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80030a2:	d014      	beq.n	80030ce <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ac:	d00f      	beq.n	80030ce <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030b6:	d00a      	beq.n	80030ce <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80030b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003174 <HAL_ADC_Init+0x2e4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80030c8:	492a      	ldr	r1, [pc, #168]	@ (8003174 <HAL_ADC_Init+0x2e4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d6:	461a      	mov	r2, r3
 80030d8:	2100      	movs	r1, #0
 80030da:	f7ff fd76 	bl	8002bca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	461a      	mov	r2, r3
 80030e8:	4923      	ldr	r1, [pc, #140]	@ (8003178 <HAL_ADC_Init+0x2e8>)
 80030ea:	f7ff fd6e 	bl	8002bca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d108      	bne.n	8003108 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f062 020f 	orn	r2, r2, #15
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
 8003106:	e017      	b.n	8003138 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003110:	d112      	bne.n	8003138 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	3b01      	subs	r3, #1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f003 031c 	and.w	r3, r3, #28
 8003124:	f06f 020f 	mvn.w	r2, #15
 8003128:	fa02 f103 	lsl.w	r1, r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fd61 	bl	8002c06 <LL_ADC_GetSamplingTimeCommonChannels>
 8003144:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800314a:	429a      	cmp	r2, r3
 800314c:	d116      	bne.n	800317c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	f023 0303 	bic.w	r3, r3, #3
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003164:	e023      	b.n	80031ae <HAL_ADC_Init+0x31e>
 8003166:	bf00      	nop
 8003168:	20000070 	.word	0x20000070
 800316c:	053e2d63 	.word	0x053e2d63
 8003170:	1ffffc02 	.word	0x1ffffc02
 8003174:	40012708 	.word	0x40012708
 8003178:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	f023 0312 	bic.w	r3, r3, #18
 8003184:	f043 0210 	orr.w	r2, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800319c:	e007      	b.n	80031ae <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07a      	b.n	80032c0 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 face 	bl	8003778 <ADC_ConversionStop>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fb92 	bl	8003910 <ADC_Disable>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fd9f 	bl	8002d44 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003214:	f023 0303 	bic.w	r3, r3, #3
 8003218:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f240 329f 	movw	r2, #927	@ 0x39f
 8003222:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68d9      	ldr	r1, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b26      	ldr	r3, [pc, #152]	@ (80032c8 <HAL_ADC_DeInit+0x110>)
 8003230:	400b      	ands	r3, r1
 8003232:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003242:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0207 	bic.w	r2, r2, #7
 8003252:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003262:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003272:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_ADC_DeInit+0x114>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a0d      	ldr	r2, [pc, #52]	@ (80032cc <HAL_ADC_DeInit+0x114>)
 8003298:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800329c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd ff9e 	bl	80011e0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	833e0200 	.word	0x833e0200
 80032cc:	40012708 	.word	0x40012708

080032d0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fdc5 	bl	8002e6c <LL_ADC_REG_IsConversionOngoing>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d132      	bne.n	800334e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_Start+0x26>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e02e      	b.n	8003354 <HAL_ADC_Start+0x84>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa80 	bl	8003804 <ADC_Enable>
 8003304:	4603      	mov	r3, r0
 8003306:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11a      	bne.n	8003344 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	221c      	movs	r2, #28
 800332e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fd6f 	bl	8002e20 <LL_ADC_REG_StartConversion>
 8003342:	e006      	b.n	8003352 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800334c:	e001      	b.n	8003352 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800334e:	2302      	movs	r3, #2
 8003350:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_ADC_Stop+0x16>
 800336e:	2302      	movs	r3, #2
 8003370:	e022      	b.n	80033b8 <HAL_ADC_Stop+0x5c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9fc 	bl	8003778 <ADC_ConversionStop>
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d111      	bne.n	80033ae <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fac0 	bl	8003910 <ADC_Disable>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d102      	bne.n	80033d8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80033d2:	2308      	movs	r3, #8
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e010      	b.n	80033fa <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e077      	b.n	80034e6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033f6:	2304      	movs	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033fa:	f7fe fa35 	bl	8001868 <HAL_GetTick>
 80033fe:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003400:	e021      	b.n	8003446 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d01d      	beq.n	8003446 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800340a:	f7fe fa2d 	bl	8001868 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <HAL_ADC_PollForConversion+0x60>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d112      	bne.n	8003446 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	f043 0204 	orr.w	r2, r3, #4
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e04f      	b.n	80034e6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0d6      	beq.n	8003402 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fbe6 	bl	8002c36 <LL_ADC_REG_IsTriggerSourceSWStart>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d031      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7e9b      	ldrb	r3, [r3, #26]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d12d      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d126      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fcee 	bl	8002e6c <LL_ADC_REG_IsConversionOngoing>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d112      	bne.n	80034bc <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 020c 	bic.w	r2, r2, #12
 80034a4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80034ba:	e00b      	b.n	80034d4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	220c      	movs	r2, #12
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
	...

08003508 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x28>
 800352c:	2302      	movs	r3, #2
 800352e:	e110      	b.n	8003752 <HAL_ADC_ConfigChannel+0x24a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fc95 	bl	8002e6c <LL_ADC_REG_IsConversionOngoing>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 80f7 	bne.w	8003738 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	f000 80b1 	beq.w	80036b6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800355c:	d004      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003562:	4a7e      	ldr	r2, [pc, #504]	@ (800375c <HAL_ADC_ConfigChannel+0x254>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d108      	bne.n	800357a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f7ff fb92 	bl	8002c9c <LL_ADC_REG_SetSequencerChAdd>
 8003578:	e041      	b.n	80035fe <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	210f      	movs	r1, #15
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0xa0>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	e011      	b.n	80035cc <HAL_ADC_ConfigChannel+0xc4>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	6849      	ldr	r1, [r1, #4]
 80035d0:	f001 011f 	and.w	r1, r1, #31
 80035d4:	408b      	lsls	r3, r1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d808      	bhi.n	80035fe <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f7ff fb2e 	bl	8002c5a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	461a      	mov	r2, r3
 800360c:	f7ff fb6b 	bl	8002ce6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f280 8097 	bge.w	8003748 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361a:	4851      	ldr	r0, [pc, #324]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 800361c:	f7ff fac8 	bl	8002bb0 <LL_ADC_GetCommonPathInternalCh>
 8003620:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a4f      	ldr	r2, [pc, #316]	@ (8003764 <HAL_ADC_ConfigChannel+0x25c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d120      	bne.n	800366e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11b      	bne.n	800366e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800363c:	4619      	mov	r1, r3
 800363e:	4848      	ldr	r0, [pc, #288]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 8003640:	f7ff faa4 	bl	8002b8c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003644:	4b48      	ldr	r3, [pc, #288]	@ (8003768 <HAL_ADC_ConfigChannel+0x260>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	4a48      	ldr	r2, [pc, #288]	@ (800376c <HAL_ADC_ConfigChannel+0x264>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800365e:	e002      	b.n	8003666 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3b01      	subs	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f9      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800366c:	e06c      	b.n	8003748 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3f      	ldr	r2, [pc, #252]	@ (8003770 <HAL_ADC_ConfigChannel+0x268>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d10c      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003688:	4619      	mov	r1, r3
 800368a:	4835      	ldr	r0, [pc, #212]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 800368c:	f7ff fa7e 	bl	8002b8c <LL_ADC_SetCommonPathInternalCh>
 8003690:	e05a      	b.n	8003748 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a37      	ldr	r2, [pc, #220]	@ (8003774 <HAL_ADC_ConfigChannel+0x26c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d155      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d150      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036ac:	4619      	mov	r1, r3
 80036ae:	482c      	ldr	r0, [pc, #176]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 80036b0:	f7ff fa6c 	bl	8002b8c <LL_ADC_SetCommonPathInternalCh>
 80036b4:	e048      	b.n	8003748 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036be:	d004      	beq.n	80036ca <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036c4:	4a25      	ldr	r2, [pc, #148]	@ (800375c <HAL_ADC_ConfigChannel+0x254>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d107      	bne.n	80036da <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7ff faf3 	bl	8002cc0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da32      	bge.n	8003748 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e2:	481f      	ldr	r0, [pc, #124]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 80036e4:	f7ff fa64 	bl	8002bb0 <LL_ADC_GetCommonPathInternalCh>
 80036e8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_ADC_ConfigChannel+0x25c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d107      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036fa:	4619      	mov	r1, r3
 80036fc:	4818      	ldr	r0, [pc, #96]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 80036fe:	f7ff fa45 	bl	8002b8c <LL_ADC_SetCommonPathInternalCh>
 8003702:	e021      	b.n	8003748 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a19      	ldr	r2, [pc, #100]	@ (8003770 <HAL_ADC_ConfigChannel+0x268>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d107      	bne.n	800371e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003714:	4619      	mov	r1, r3
 8003716:	4812      	ldr	r0, [pc, #72]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 8003718:	f7ff fa38 	bl	8002b8c <LL_ADC_SetCommonPathInternalCh>
 800371c:	e014      	b.n	8003748 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <HAL_ADC_ConfigChannel+0x26c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10f      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800372e:	4619      	mov	r1, r3
 8003730:	480b      	ldr	r0, [pc, #44]	@ (8003760 <HAL_ADC_ConfigChannel+0x258>)
 8003732:	f7ff fa2b 	bl	8002b8c <LL_ADC_SetCommonPathInternalCh>
 8003736:	e007      	b.n	8003748 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003750:	7ffb      	ldrb	r3, [r7, #31]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	80000004 	.word	0x80000004
 8003760:	40012708 	.word	0x40012708
 8003764:	b0001000 	.word	0xb0001000
 8003768:	20000070 	.word	0x20000070
 800376c:	053e2d63 	.word	0x053e2d63
 8003770:	b8004000 	.word	0xb8004000
 8003774:	b4002000 	.word	0xb4002000

08003778 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fb71 	bl	8002e6c <LL_ADC_REG_IsConversionOngoing>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d033      	beq.n	80037f8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb31 	bl	8002dfc <LL_ADC_IsDisableOngoing>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fb4e 	bl	8002e46 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037aa:	f7fe f85d 	bl	8001868 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037b0:	e01b      	b.n	80037ea <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037b2:	f7fe f859 	bl	8001868 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d914      	bls.n	80037ea <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	f043 0210 	orr.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037de:	f043 0201 	orr.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e007      	b.n	80037fa <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1dc      	bne.n	80037b2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fadf 	bl	8002dd8 <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d169      	bne.n	80038f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <ADC_Enable+0xfc>)
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003832:	f043 0210 	orr.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e055      	b.n	80038f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fa9c 	bl	8002d8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003854:	482b      	ldr	r0, [pc, #172]	@ (8003904 <ADC_Enable+0x100>)
 8003856:	f7ff f9ab 	bl	8002bb0 <LL_ADC_GetCommonPathInternalCh>
 800385a:	4603      	mov	r3, r0
 800385c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00f      	beq.n	8003884 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003864:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <ADC_Enable+0x104>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	4a28      	ldr	r2, [pc, #160]	@ (800390c <ADC_Enable+0x108>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003874:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003876:	e002      	b.n	800387e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3b01      	subs	r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f9      	bne.n	8003878 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7e5b      	ldrb	r3, [r3, #25]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d033      	beq.n	80038f4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800388c:	f7fd ffec 	bl	8001868 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003892:	e028      	b.n	80038e6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fa9d 	bl	8002dd8 <LL_ADC_IsEnabled>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fa6f 	bl	8002d8c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ae:	f7fd ffdb 	bl	8001868 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d914      	bls.n	80038e6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d00d      	beq.n	80038e6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e007      	b.n	80038f6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d1cf      	bne.n	8003894 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	80000017 	.word	0x80000017
 8003904:	40012708 	.word	0x40012708
 8003908:	20000070 	.word	0x20000070
 800390c:	053e2d63 	.word	0x053e2d63

08003910 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fa6d 	bl	8002dfc <LL_ADC_IsDisableOngoing>
 8003922:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fa55 	bl	8002dd8 <LL_ADC_IsEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d047      	beq.n	80039c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d144      	bne.n	80039c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0305 	and.w	r3, r3, #5
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10c      	bne.n	8003962 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fa30 	bl	8002db2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2203      	movs	r2, #3
 8003958:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800395a:	f7fd ff85 	bl	8001868 <HAL_GetTick>
 800395e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003960:	e029      	b.n	80039b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e023      	b.n	80039c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800397e:	f7fd ff73 	bl	8001868 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d914      	bls.n	80039b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e007      	b.n	80039c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1dc      	bne.n	800397e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <LL_ADC_SetCalibrationFactor>:
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039de:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <LL_ADC_GetCalibrationFactor>:
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <LL_ADC_Enable>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a22:	f023 0317 	bic.w	r3, r3, #23
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_Disable>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a48:	f023 0317 	bic.w	r3, r3, #23
 8003a4c:	f043 0202 	orr.w	r2, r3, #2
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <LL_ADC_IsEnabled>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <LL_ADC_IsEnabled+0x18>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <LL_ADC_IsEnabled+0x1a>
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <LL_ADC_StartCalibration>:
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a92:	f023 0317 	bic.w	r3, r3, #23
 8003a96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003abc:	d101      	bne.n	8003ac2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b088      	sub	sp, #32
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_ADCEx_Calibration_Start+0x1e>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e0b9      	b.n	8003c60 <HAL_ADCEx_Calibration_Start+0x192>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff0b 	bl	8003910 <ADC_Disable>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffab 	bl	8003a5e <LL_ADC_IsEnabled>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 809d 	bne.w	8003c4a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b18:	f043 0202 	orr.w	r2, r3, #2
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e02e      	b.n	8003ba6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff98 	bl	8003a82 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b52:	e014      	b.n	8003b7e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	3301      	adds	r3, #1
 8003b58:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003b60:	d30d      	bcc.n	8003b7e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	f023 0312 	bic.w	r3, r3, #18
 8003b6a:	f043 0210 	orr.w	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e070      	b.n	8003c60 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff90 	bl	8003aa8 <LL_ADC_IsCalibrationOnGoing>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e2      	bne.n	8003b54 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ff2f 	bl	80039f6 <LL_ADC_GetCalibrationFactor>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	2b07      	cmp	r3, #7
 8003baa:	d9cd      	bls.n	8003b48 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ff29 	bl	8003a12 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ff01 	bl	80039ce <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff31 	bl	8003a38 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bd6:	f7fd fe47 	bl	8001868 <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bdc:	e01c      	b.n	8003c18 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bde:	f7fd fe43 	bl	8001868 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d915      	bls.n	8003c18 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff34 	bl	8003a5e <LL_ADC_IsEnabled>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00d      	beq.n	8003c18 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	f043 0210 	orr.w	r2, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e023      	b.n	8003c60 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff1e 	bl	8003a5e <LL_ADC_IsEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1da      	bne.n	8003bde <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68d9      	ldr	r1, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	f023 0303 	bic.w	r3, r3, #3
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c48:	e005      	b.n	8003c56 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f043 0210 	orr.w	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db0b      	blt.n	8003cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	4906      	ldr	r1, [pc, #24]	@ (8003d00 <__NVIC_EnableIRQ+0x34>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db12      	blt.n	8003d3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	490a      	ldr	r1, [pc, #40]	@ (8003d48 <__NVIC_DisableIRQ+0x44>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	3320      	adds	r3, #32
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d30:	f3bf 8f4f 	dsb	sy
}
 8003d34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d36:	f3bf 8f6f 	isb	sy
}
 8003d3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db0c      	blt.n	8003d78 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	4907      	ldr	r1, [pc, #28]	@ (8003d84 <__NVIC_ClearPendingIRQ+0x38>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d72:	3360      	adds	r3, #96	@ 0x60
 8003d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000e100 	.word	0xe000e100

08003d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	db0a      	blt.n	8003db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	490c      	ldr	r1, [pc, #48]	@ (8003dd4 <__NVIC_SetPriority+0x4c>)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	440b      	add	r3, r1
 8003dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db0:	e00a      	b.n	8003dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	4908      	ldr	r1, [pc, #32]	@ (8003dd8 <__NVIC_SetPriority+0x50>)
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	3b04      	subs	r3, #4
 8003dc0:	0112      	lsls	r2, r2, #4
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	761a      	strb	r2, [r3, #24]
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000e100 	.word	0xe000e100
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b089      	sub	sp, #36	@ 0x24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f1c3 0307 	rsb	r3, r3, #7
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	bf28      	it	cs
 8003dfa:	2304      	movcs	r3, #4
 8003dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3304      	adds	r3, #4
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d902      	bls.n	8003e0c <NVIC_EncodePriority+0x30>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3b03      	subs	r3, #3
 8003e0a:	e000      	b.n	8003e0e <NVIC_EncodePriority+0x32>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	401a      	ands	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e24:	f04f 31ff 	mov.w	r1, #4294967295
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	43d9      	mvns	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	4313      	orrs	r3, r2
         );
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	@ 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff0d 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e64:	f7ff ff24 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f7ff ffb4 	bl	8003ddc <NVIC_EncodePriority>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff83 	bl	8003d88 <__NVIC_SetPriority>
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff17 	bl	8003ccc <__NVIC_EnableIRQ>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4603      	mov	r3, r0
 8003eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff25 	bl	8003d04 <__NVIC_DisableIRQ>
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff3b 	bl	8003d4c <__NVIC_ClearPendingIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e08e      	b.n	8004010 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_DMA_Init+0x138>)
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d80f      	bhi.n	8003f1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b45      	ldr	r3, [pc, #276]	@ (800401c <HAL_DMA_Init+0x13c>)
 8003f06:	4413      	add	r3, r2
 8003f08:	4a45      	ldr	r2, [pc, #276]	@ (8004020 <HAL_DMA_Init+0x140>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	009a      	lsls	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a42      	ldr	r2, [pc, #264]	@ (8004024 <HAL_DMA_Init+0x144>)
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f1c:	e00e      	b.n	8003f3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b40      	ldr	r3, [pc, #256]	@ (8004028 <HAL_DMA_Init+0x148>)
 8003f26:	4413      	add	r3, r2
 8003f28:	4a3d      	ldr	r2, [pc, #244]	@ (8004020 <HAL_DMA_Init+0x140>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a3c      	ldr	r2, [pc, #240]	@ (800402c <HAL_DMA_Init+0x14c>)
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f56:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6819      	ldr	r1, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb52 	bl	8004638 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f9c:	d102      	bne.n	8003fa4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_DMA_Init+0x106>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d80c      	bhi.n	8003fe6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb7b 	bl	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	e008      	b.n	8003ff8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40020407 	.word	0x40020407
 800401c:	bffdfff8 	.word	0xbffdfff8
 8004020:	cccccccd 	.word	0xcccccccd
 8004024:	40020000 	.word	0x40020000
 8004028:	bffdfbf8 	.word	0xbffdfbf8
 800402c:	40020400 	.word	0x40020400

08004030 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07b      	b.n	800413a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b3a      	ldr	r3, [pc, #232]	@ (8004144 <HAL_DMA_DeInit+0x114>)
 800405a:	429a      	cmp	r2, r3
 800405c:	d80f      	bhi.n	800407e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	4b38      	ldr	r3, [pc, #224]	@ (8004148 <HAL_DMA_DeInit+0x118>)
 8004066:	4413      	add	r3, r2
 8004068:	4a38      	ldr	r2, [pc, #224]	@ (800414c <HAL_DMA_DeInit+0x11c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	009a      	lsls	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a35      	ldr	r2, [pc, #212]	@ (8004150 <HAL_DMA_DeInit+0x120>)
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40
 800407c:	e00e      	b.n	800409c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b33      	ldr	r3, [pc, #204]	@ (8004154 <HAL_DMA_DeInit+0x124>)
 8004086:	4413      	add	r3, r2
 8004088:	4a30      	ldr	r2, [pc, #192]	@ (800414c <HAL_DMA_DeInit+0x11c>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	009a      	lsls	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2f      	ldr	r2, [pc, #188]	@ (8004158 <HAL_DMA_DeInit+0x128>)
 800409a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	f003 021c 	and.w	r2, r3, #28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f202 	lsl.w	r2, r1, r2
 80040b6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fabd 	bl	8004638 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040ce:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00f      	beq.n	80040f8 <HAL_DMA_DeInit+0xc8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d80b      	bhi.n	80040f8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 faf1 	bl	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040f6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40020407 	.word	0x40020407
 8004148:	bffdfff8 	.word	0xbffdfff8
 800414c:	cccccccd 	.word	0xcccccccd
 8004150:	40020000 	.word	0x40020000
 8004154:	bffdfbf8 	.word	0xbffdfbf8
 8004158:	40020400 	.word	0x40020400

0800415c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_DMA_Start_IT+0x20>
 8004178:	2302      	movs	r3, #2
 800417a:	e069      	b.n	8004250 <HAL_DMA_Start_IT+0xf4>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d155      	bne.n	800423c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fa02 	bl	80045be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 020e 	orr.w	r2, r2, #14
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e00f      	b.n	80041f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 020a 	orr.w	r2, r2, #10
 80041f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004210:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004228:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e008      	b.n	800424e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2280      	movs	r2, #128	@ 0x80
 8004240:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e04f      	b.n	800430a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d008      	beq.n	8004288 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2204      	movs	r2, #4
 800427a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e040      	b.n	800430a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 020e 	bic.w	r2, r2, #14
 8004296:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	f003 021c 	and.w	r2, r3, #28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00c      	beq.n	80042f8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d005      	beq.n	8004338 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2204      	movs	r2, #4
 8004330:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e047      	b.n	80043c8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 020e 	bic.w	r2, r2, #14
 8004346:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004362:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436c:	f003 021c 	and.w	r2, r3, #28
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004384:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00c      	beq.n	80043a8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800439c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
    }
  }
  return status;
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f0:	f003 031c 	and.w	r3, r3, #28
 80043f4:	2204      	movs	r2, #4
 80043f6:	409a      	lsls	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d027      	beq.n	8004450 <HAL_DMA_IRQHandler+0x7c>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d022      	beq.n	8004450 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0204 	bic.w	r2, r2, #4
 8004426:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442c:	f003 021c 	and.w	r2, r3, #28
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	2104      	movs	r1, #4
 8004436:	fa01 f202 	lsl.w	r2, r1, r2
 800443a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8081 	beq.w	8004548 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800444e:	e07b      	b.n	8004548 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004454:	f003 031c 	and.w	r3, r3, #28
 8004458:	2202      	movs	r2, #2
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d03d      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x10c>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d038      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 020a 	bic.w	r2, r2, #10
 800448a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4b2e      	ldr	r3, [pc, #184]	@ (8004554 <HAL_DMA_IRQHandler+0x180>)
 800449c:	429a      	cmp	r2, r3
 800449e:	d909      	bls.n	80044b4 <HAL_DMA_IRQHandler+0xe0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	f003 031c 	and.w	r3, r3, #28
 80044a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004558 <HAL_DMA_IRQHandler+0x184>)
 80044aa:	2102      	movs	r1, #2
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	6053      	str	r3, [r2, #4]
 80044b2:	e008      	b.n	80044c6 <HAL_DMA_IRQHandler+0xf2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	f003 031c 	and.w	r3, r3, #28
 80044bc:	4a27      	ldr	r2, [pc, #156]	@ (800455c <HAL_DMA_IRQHandler+0x188>)
 80044be:	2102      	movs	r1, #2
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d038      	beq.n	8004548 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80044de:	e033      	b.n	8004548 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e4:	f003 031c 	and.w	r3, r3, #28
 80044e8:	2208      	movs	r2, #8
 80044ea:	409a      	lsls	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d02a      	beq.n	800454a <HAL_DMA_IRQHandler+0x176>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d025      	beq.n	800454a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 020e 	bic.w	r2, r2, #14
 800450c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	f003 021c 	and.w	r2, r3, #28
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	2101      	movs	r1, #1
 800451c:	fa01 f202 	lsl.w	r2, r1, r2
 8004520:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004548:	bf00      	nop
 800454a:	bf00      	nop
}
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40020080 	.word	0x40020080
 8004558:	40020400 	.word	0x40020400
 800455c:	40020000 	.word	0x40020000

08004560 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d103      	bne.n	800457c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	72fb      	strb	r3, [r7, #11]
    return status;
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	e01b      	b.n	80045b4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e003      	b.n	80045aa <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045a8:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]

  return status;
 80045b2:	7afb      	ldrb	r3, [r7, #11]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045d4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045e6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ec:	f003 021c 	and.w	r2, r3, #28
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f202 	lsl.w	r2, r1, r2
 80045fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b10      	cmp	r3, #16
 800460a:	d108      	bne.n	800461e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800461c:	e007      	b.n	800462e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	4b1c      	ldr	r3, [pc, #112]	@ (80046b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004648:	429a      	cmp	r2, r3
 800464a:	d813      	bhi.n	8004674 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	089b      	lsrs	r3, r3, #2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004658:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3b08      	subs	r3, #8
 8004668:	4a14      	ldr	r2, [pc, #80]	@ (80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e011      	b.n	8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	009a      	lsls	r2, r3, #2
 800467c:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800467e:	4413      	add	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	3b08      	subs	r3, #8
 800468c:	4a0b      	ldr	r2, [pc, #44]	@ (80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	3307      	adds	r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a0a      	ldr	r2, [pc, #40]	@ (80046c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800469c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2201      	movs	r2, #1
 80046a6:	409a      	lsls	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40020407 	.word	0x40020407
 80046bc:	cccccccd 	.word	0xcccccccd
 80046c0:	4002081c 	.word	0x4002081c
 80046c4:	40020880 	.word	0x40020880

080046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046d8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	461a      	mov	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a08      	ldr	r2, [pc, #32]	@ (800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80046ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2201      	movs	r2, #1
 80046f8:	409a      	lsls	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	1000823f 	.word	0x1000823f
 800470c:	40020940 	.word	0x40020940

08004710 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800471e:	e140      	b.n	80049a2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8132 	beq.w	800499c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d005      	beq.n	8004750 <HAL_GPIO_Init+0x40>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d130      	bne.n	80047b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004786:	2201      	movs	r2, #1
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0201 	and.w	r2, r3, #1
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d017      	beq.n	80047ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2203      	movs	r2, #3
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d123      	bne.n	8004842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	08da      	lsrs	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3208      	adds	r2, #8
 8004802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	220f      	movs	r2, #15
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3208      	adds	r2, #8
 800483c:	6939      	ldr	r1, [r7, #16]
 800483e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	2203      	movs	r2, #3
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4013      	ands	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0203 	and.w	r2, r3, #3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 808c 	beq.w	800499c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004884:	4a4e      	ldr	r2, [pc, #312]	@ (80049c0 <HAL_GPIO_Init+0x2b0>)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	3302      	adds	r3, #2
 800488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	2207      	movs	r2, #7
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048ae:	d00d      	beq.n	80048cc <HAL_GPIO_Init+0x1bc>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a44      	ldr	r2, [pc, #272]	@ (80049c4 <HAL_GPIO_Init+0x2b4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <HAL_GPIO_Init+0x1b8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a43      	ldr	r2, [pc, #268]	@ (80049c8 <HAL_GPIO_Init+0x2b8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_GPIO_Init+0x1b4>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e004      	b.n	80048ce <HAL_GPIO_Init+0x1be>
 80048c4:	2307      	movs	r3, #7
 80048c6:	e002      	b.n	80048ce <HAL_GPIO_Init+0x1be>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <HAL_GPIO_Init+0x1be>
 80048cc:	2300      	movs	r3, #0
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	f002 0203 	and.w	r2, r2, #3
 80048d4:	0092      	lsls	r2, r2, #2
 80048d6:	4093      	lsls	r3, r2
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048de:	4938      	ldr	r1, [pc, #224]	@ (80049c0 <HAL_GPIO_Init+0x2b0>)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	3302      	adds	r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ec:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004910:	4a2e      	ldr	r2, [pc, #184]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004916:	4b2d      	ldr	r3, [pc, #180]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43db      	mvns	r3, r3
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800493a:	4a24      	ldr	r2, [pc, #144]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004940:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 8004942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004946:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004966:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800496e:	4b17      	ldr	r3, [pc, #92]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 8004970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004974:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	43db      	mvns	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004994:	4a0d      	ldr	r2, [pc, #52]	@ (80049cc <HAL_GPIO_Init+0x2bc>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3301      	adds	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f aeb7 	bne.w	8004720 <HAL_GPIO_Init+0x10>
  }
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	48000400 	.word	0x48000400
 80049c8:	48000800 	.word	0x48000800
 80049cc:	58000800 	.word	0x58000800

080049d0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049de:	e0af      	b.n	8004b40 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049e0:	2201      	movs	r2, #1
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a2 	beq.w	8004b3a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049f6:	4a59      	ldr	r2, [pc, #356]	@ (8004b5c <HAL_GPIO_DeInit+0x18c>)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	3302      	adds	r3, #2
 80049fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a02:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a1e:	d00d      	beq.n	8004a3c <HAL_GPIO_DeInit+0x6c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a4f      	ldr	r2, [pc, #316]	@ (8004b60 <HAL_GPIO_DeInit+0x190>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <HAL_GPIO_DeInit+0x68>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a4e      	ldr	r2, [pc, #312]	@ (8004b64 <HAL_GPIO_DeInit+0x194>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_GPIO_DeInit+0x64>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e004      	b.n	8004a3e <HAL_GPIO_DeInit+0x6e>
 8004a34:	2307      	movs	r3, #7
 8004a36:	e002      	b.n	8004a3e <HAL_GPIO_DeInit+0x6e>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_GPIO_DeInit+0x6e>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	f002 0203 	and.w	r2, r2, #3
 8004a44:	0092      	lsls	r2, r2, #2
 8004a46:	4093      	lsls	r3, r2
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d136      	bne.n	8004abc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004a4e:	4b46      	ldr	r3, [pc, #280]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a50:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	4943      	ldr	r1, [pc, #268]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a60:	4b41      	ldr	r3, [pc, #260]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a62:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	493f      	ldr	r1, [pc, #252]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a72:	4b3d      	ldr	r3, [pc, #244]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	493b      	ldr	r1, [pc, #236]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a80:	4b39      	ldr	r3, [pc, #228]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	4937      	ldr	r1, [pc, #220]	@ (8004b68 <HAL_GPIO_DeInit+0x198>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	2207      	movs	r2, #7
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b5c <HAL_GPIO_DeInit+0x18c>)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	089b      	lsrs	r3, r3, #2
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	43da      	mvns	r2, r3
 8004aae:	482b      	ldr	r0, [pc, #172]	@ (8004b5c <HAL_GPIO_DeInit+0x18c>)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	089b      	lsrs	r3, r3, #2
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	08da      	lsrs	r2, r3, #3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3208      	adds	r2, #8
 8004ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	220f      	movs	r2, #15
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43db      	mvns	r3, r3
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	08d2      	lsrs	r2, r2, #3
 8004af0:	4019      	ands	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3208      	adds	r2, #8
 8004af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	2103      	movs	r1, #3
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	2101      	movs	r1, #1
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	2103      	movs	r1, #3
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	401a      	ands	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f47f af49 	bne.w	80049e0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	48000400 	.word	0x48000400
 8004b64:	48000800 	.word	0x48000800
 8004b68:	58000800 	.word	0x58000800

08004b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b7c:	787b      	ldrb	r3, [r7, #1]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b88:	e002      	b.n	8004b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b8a:	887a      	ldrh	r2, [r7, #2]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr
	...

08004b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ba6:	4b08      	ldr	r3, [pc, #32]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bb2:	4a05      	ldr	r2, [pc, #20]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f806 	bl	8004bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	58000800 	.word	0x58000800

08004bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e081      	b.n	8004cf6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f879 	bl	8004cfe <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	@ 0x24
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d107      	bne.n	8004c5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	e006      	b.n	8004c68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d104      	bne.n	8004c7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	817b      	strh	r3, [r7, #10]
 8004d20:	4613      	mov	r3, r2
 8004d22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	f040 80da 	bne.w	8004ee6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_I2C_Master_Transmit+0x30>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e0d3      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0x1d8>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d48:	f7fc fd8e 	bl	8001868 <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2319      	movs	r3, #25
 8004d54:	2201      	movs	r2, #1
 8004d56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f9e5 	bl	800512a <I2C_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0be      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2221      	movs	r2, #33	@ 0x21
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2210      	movs	r2, #16
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	893a      	ldrh	r2, [r7, #8]
 8004d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2bff      	cmp	r3, #255	@ 0xff
 8004d9a:	d90e      	bls.n	8004dba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	22ff      	movs	r2, #255	@ 0xff
 8004da0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	8979      	ldrh	r1, [r7, #10]
 8004daa:	4b51      	ldr	r3, [pc, #324]	@ (8004ef0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fbd0 	bl	8005558 <I2C_TransferConfig>
 8004db8:	e06c      	b.n	8004e94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	8979      	ldrh	r1, [r7, #10]
 8004dcc:	4b48      	ldr	r3, [pc, #288]	@ (8004ef0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fbbf 	bl	8005558 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004dda:	e05b      	b.n	8004e94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	6a39      	ldr	r1, [r7, #32]
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f9e2 	bl	80051aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e07b      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d034      	beq.n	8004e94 <HAL_I2C_Master_Transmit+0x184>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d130      	bne.n	8004e94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2180      	movs	r1, #128	@ 0x80
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f974 	bl	800512a <I2C_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e04d      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2bff      	cmp	r3, #255	@ 0xff
 8004e54:	d90e      	bls.n	8004e74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	22ff      	movs	r2, #255	@ 0xff
 8004e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	8979      	ldrh	r1, [r7, #10]
 8004e64:	2300      	movs	r3, #0
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb73 	bl	8005558 <I2C_TransferConfig>
 8004e72:	e00f      	b.n	8004e94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	8979      	ldrh	r1, [r7, #10]
 8004e86:	2300      	movs	r3, #0
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fb62 	bl	8005558 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d19e      	bne.n	8004ddc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	6a39      	ldr	r1, [r7, #32]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f9c1 	bl	800522a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e01a      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6859      	ldr	r1, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004ec6:	400b      	ands	r3, r1
 8004ec8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e000      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
  }
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	80002000 	.word	0x80002000
 8004ef4:	fe00e800 	.word	0xfe00e800

08004ef8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	461a      	mov	r2, r3
 8004f04:	460b      	mov	r3, r1
 8004f06:	817b      	strh	r3, [r7, #10]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	f040 80db 	bne.w	80050d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_I2C_Master_Receive+0x30>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0d4      	b.n	80050d2 <HAL_I2C_Master_Receive+0x1da>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f30:	f7fc fc9a 	bl	8001868 <HAL_GetTick>
 8004f34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2319      	movs	r3, #25
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f8f1 	bl	800512a <I2C_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e0bf      	b.n	80050d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2222      	movs	r2, #34	@ 0x22
 8004f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	893a      	ldrh	r2, [r7, #8]
 8004f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2bff      	cmp	r3, #255	@ 0xff
 8004f82:	d90e      	bls.n	8004fa2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	22ff      	movs	r2, #255	@ 0xff
 8004f88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	8979      	ldrh	r1, [r7, #10]
 8004f92:	4b52      	ldr	r3, [pc, #328]	@ (80050dc <HAL_I2C_Master_Receive+0x1e4>)
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fadc 	bl	8005558 <I2C_TransferConfig>
 8004fa0:	e06d      	b.n	800507e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	8979      	ldrh	r1, [r7, #10]
 8004fb4:	4b49      	ldr	r3, [pc, #292]	@ (80050dc <HAL_I2C_Master_Receive+0x1e4>)
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 facb 	bl	8005558 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004fc2:	e05c      	b.n	800507e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	6a39      	ldr	r1, [r7, #32]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f96b 	bl	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e07c      	b.n	80050d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d034      	beq.n	800507e <HAL_I2C_Master_Receive+0x186>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	d130      	bne.n	800507e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2200      	movs	r2, #0
 8005024:	2180      	movs	r1, #128	@ 0x80
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f87f 	bl	800512a <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e04d      	b.n	80050d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	2bff      	cmp	r3, #255	@ 0xff
 800503e:	d90e      	bls.n	800505e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	22ff      	movs	r2, #255	@ 0xff
 8005044:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504a:	b2da      	uxtb	r2, r3
 800504c:	8979      	ldrh	r1, [r7, #10]
 800504e:	2300      	movs	r3, #0
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fa7e 	bl	8005558 <I2C_TransferConfig>
 800505c:	e00f      	b.n	800507e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506c:	b2da      	uxtb	r2, r3
 800506e:	8979      	ldrh	r1, [r7, #10]
 8005070:	2300      	movs	r3, #0
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fa6d 	bl	8005558 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d19d      	bne.n	8004fc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	6a39      	ldr	r1, [r7, #32]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f8cc 	bl	800522a <I2C_WaitOnSTOPFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e01a      	b.n	80050d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2220      	movs	r2, #32
 80050a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6859      	ldr	r1, [r3, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <HAL_I2C_Master_Receive+0x1e8>)
 80050b0:	400b      	ands	r3, r1
 80050b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	80002400 	.word	0x80002400
 80050e0:	fe00e800 	.word	0xfe00e800

080050e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d103      	bne.n	8005102 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d007      	beq.n	8005120 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	619a      	str	r2, [r3, #24]
  }
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4613      	mov	r3, r2
 8005138:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513a:	e022      	b.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d01e      	beq.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005144:	f7fc fb90 	bl	8001868 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d302      	bcc.n	800515a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d113      	bne.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e00f      	b.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	429a      	cmp	r2, r3
 800519e:	d0cd      	beq.n	800513c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051b6:	e02c      	b.n	8005212 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f8eb 	bl	8005398 <I2C_IsErrorOccurred>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e02a      	b.n	8005222 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d01e      	beq.n	8005212 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d4:	f7fc fb48 	bl	8001868 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d302      	bcc.n	80051ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d113      	bne.n	8005212 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e007      	b.n	8005222 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d1cb      	bne.n	80051b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005236:	e028      	b.n	800528a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f8ab 	bl	8005398 <I2C_IsErrorOccurred>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e026      	b.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524c:	f7fc fb0c 	bl	8001868 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d113      	bne.n	800528a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e007      	b.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b20      	cmp	r3, #32
 8005296:	d1cf      	bne.n	8005238 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052b0:	e064      	b.n	800537c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f86e 	bl	8005398 <I2C_IsErrorOccurred>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e062      	b.n	800538c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d138      	bne.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d105      	bne.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e04e      	b.n	800538c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d107      	bne.n	800530c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2210      	movs	r2, #16
 8005302:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2204      	movs	r2, #4
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
 800530a:	e002      	b.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2220      	movs	r2, #32
 8005318:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b1b      	ldr	r3, [pc, #108]	@ (8005394 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005326:	400b      	ands	r3, r1
 8005328:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e022      	b.n	800538c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7fc fa8f 	bl	8001868 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e007      	b.n	800538c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b04      	cmp	r3, #4
 8005388:	d193      	bne.n	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	fe00e800 	.word	0xfe00e800

08005398 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	@ 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d068      	beq.n	8005496 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2210      	movs	r2, #16
 80053ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053cc:	e049      	b.n	8005462 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d045      	beq.n	8005462 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053d6:	f7fc fa47 	bl	8001868 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d302      	bcc.n	80053ec <I2C_IsErrorOccurred+0x54>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d13a      	bne.n	8005462 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800540a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800540e:	d121      	bne.n	8005454 <I2C_IsErrorOccurred+0xbc>
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005416:	d01d      	beq.n	8005454 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	2b20      	cmp	r3, #32
 800541c:	d01a      	beq.n	8005454 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800542e:	f7fc fa1b 	bl	8001868 <HAL_GetTick>
 8005432:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005434:	e00e      	b.n	8005454 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005436:	f7fc fa17 	bl	8001868 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b19      	cmp	r3, #25
 8005442:	d907      	bls.n	8005454 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f043 0320 	orr.w	r3, r3, #32
 800544a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005452:	e006      	b.n	8005462 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b20      	cmp	r3, #32
 8005460:	d1e9      	bne.n	8005436 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b20      	cmp	r3, #32
 800546e:	d003      	beq.n	8005478 <I2C_IsErrorOccurred+0xe0>
 8005470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0aa      	beq.n	80053ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2220      	movs	r2, #32
 8005486:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	f043 0304 	orr.w	r3, r3, #4
 800548e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f043 0308 	orr.w	r3, r3, #8
 80054d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	f043 0302 	orr.w	r3, r3, #2
 80054f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01c      	beq.n	8005546 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff fde9 	bl	80050e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6859      	ldr	r1, [r3, #4]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4b0d      	ldr	r3, [pc, #52]	@ (8005554 <I2C_IsErrorOccurred+0x1bc>)
 800551e:	400b      	ands	r3, r1
 8005520:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800554a:	4618      	mov	r0, r3
 800554c:	3728      	adds	r7, #40	@ 0x28
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	fe00e800 	.word	0xfe00e800

08005558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	817b      	strh	r3, [r7, #10]
 8005566:	4613      	mov	r3, r2
 8005568:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005570:	7a7b      	ldrb	r3, [r7, #9]
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005578:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	4313      	orrs	r3, r2
 8005582:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005586:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	0d5b      	lsrs	r3, r3, #21
 8005592:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005596:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <I2C_TransferConfig+0x5c>)
 8005598:	430b      	orrs	r3, r1
 800559a:	43db      	mvns	r3, r3
 800559c:	ea02 0103 	and.w	r1, r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	03ff63ff 	.word	0x03ff63ff

080055b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d138      	bne.n	8005640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055d8:	2302      	movs	r3, #2
 80055da:	e032      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	@ 0x24
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800560a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b20      	cmp	r3, #32
 8005660:	d139      	bne.n	80056d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800566c:	2302      	movs	r3, #2
 800566e:	e033      	b.n	80056d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	@ 0x24
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800569e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
	...

080056e4 <LL_EXTI_EnableIT_0_31>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <LL_EXTI_EnableIT_0_31+0x24>)
 80056ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80056f2:	4905      	ldr	r1, [pc, #20]	@ (8005708 <LL_EXTI_EnableIT_0_31+0x24>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	58000800 	.word	0x58000800

0800570c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005714:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <LL_EXTI_DisableIT_0_31+0x24>)
 8005716:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	43db      	mvns	r3, r3
 800571e:	4904      	ldr	r1, [pc, #16]	@ (8005730 <LL_EXTI_DisableIT_0_31+0x24>)
 8005720:	4013      	ands	r3, r2
 8005722:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	58000800 	.word	0x58000800

08005734 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4904      	ldr	r1, [pc, #16]	@ (8005754 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]

}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	58000800 	.word	0x58000800

08005758 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005760:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	43db      	mvns	r3, r3
 8005768:	4903      	ldr	r1, [pc, #12]	@ (8005778 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800576a:	4013      	ands	r3, r2
 800576c:	600b      	str	r3, [r1, #0]

}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	58000800 	.word	0x58000800

0800577c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005784:	4b05      	ldr	r3, [pc, #20]	@ (800579c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4904      	ldr	r1, [pc, #16]	@ (800579c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	58000800 	.word	0x58000800

080057a0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	43db      	mvns	r3, r3
 80057b0:	4903      	ldr	r1, [pc, #12]	@ (80057c0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	58000800 	.word	0x58000800

080057c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057c8:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a03      	ldr	r2, [pc, #12]	@ (80057dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80057ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	58000400 	.word	0x58000400

080057e0 <HAL_PWR_ConfigPVD>:
  * @note   For devices dual core: if "sConfigPVD->Mode" is set to PVD_MODE_IT,
  *         wake-up target is set to wake-up the selected CPU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80057e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <HAL_PWR_ConfigPVD+0x78>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f023 020e 	bic.w	r2, r3, #14
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4918      	ldr	r1, [pc, #96]	@ (8005858 <HAL_PWR_ConfigPVD+0x78>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WL series, power PVD event is not available on EXTI lines   */
  /*       (only interruption is available through EXTI line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80057fa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80057fe:	f7ff ff85 	bl	800570c <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005802:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005806:	f7ff ffcb 	bl	80057a0 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800580a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800580e:	f7ff ffa3 	bl	8005758 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_PWR_ConfigPVD+0x46>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800581e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005822:	f7ff ff5f 	bl	80056e4 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_PWR_ConfigPVD+0x5a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005832:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005836:	f7ff ffa1 	bl	800577c <LL_EXTI_EnableFallingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_PWR_ConfigPVD+0x6e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005846:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800584a:	f7ff ff73 	bl	8005734 <LL_EXTI_EnableRisingTrig_0_31>
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	58000400 	.word	0x58000400

0800585c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <HAL_PWR_EnablePVD+0x18>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4a03      	ldr	r2, [pc, #12]	@ (8005874 <HAL_PWR_EnablePVD+0x18>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6053      	str	r3, [r2, #4]
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	58000400 	.word	0x58000400

08005878 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10c      	bne.n	80058a4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800588a:	4b13      	ldr	r3, [pc, #76]	@ (80058d8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005896:	d10d      	bne.n	80058b4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005898:	f000 f8cc 	bl	8005a34 <HAL_PWREx_DisableLowPowerRunMode>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80058a2:	e015      	b.n	80058d0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80058a4:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <HAL_PWR_EnterSLEEPMode+0x60>)
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80058b0:	f000 f8b2 	bl	8005a18 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80058b4:	4b09      	ldr	r3, [pc, #36]	@ (80058dc <HAL_PWR_EnterSLEEPMode+0x64>)
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	4a08      	ldr	r2, [pc, #32]	@ (80058dc <HAL_PWR_EnterSLEEPMode+0x64>)
 80058ba:	f023 0304 	bic.w	r3, r3, #4
 80058be:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80058c6:	bf30      	wfi
 80058c8:	e002      	b.n	80058d0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80058ca:	bf40      	sev
    __WFE();
 80058cc:	bf20      	wfe
    __WFE();
 80058ce:	bf20      	wfe
  }
}
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	58000400 	.word	0x58000400
 80058dc:	e000ed00 	.word	0xe000ed00

080058e0 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80058e8:	4b04      	ldr	r3, [pc, #16]	@ (80058fc <LL_EXTI_ReadFlag_0_31+0x1c>)
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4013      	ands	r3, r2
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	58000800 	.word	0x58000800

08005900 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8005908:	4b04      	ldr	r3, [pc, #16]	@ (800591c <LL_EXTI_ReadFlag_32_63+0x1c>)
 800590a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4013      	ands	r3, r2
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	58000800 	.word	0x58000800

08005920 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005928:	4a03      	ldr	r2, [pc, #12]	@ (8005938 <LL_EXTI_ClearFlag_0_31+0x18>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60d3      	str	r3, [r2, #12]
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	58000800 	.word	0x58000800

0800593c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005944:	4a03      	ldr	r2, [pc, #12]	@ (8005954 <LL_EXTI_ClearFlag_32_63+0x18>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr
 8005954:	58000800 	.word	0x58000800

08005958 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800595c:	4b03      	ldr	r3, [pc, #12]	@ (800596c <HAL_PWREx_GetVoltageRange+0x14>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr
 800596c:	58000400 	.word	0x58000400

08005970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597e:	d12f      	bne.n	80059e0 <HAL_PWREx_ControlVoltageScaling+0x70>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005980:	4b22      	ldr	r3, [pc, #136]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800598c:	d037      	beq.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800598e:	4b1f      	ldr	r3, [pc, #124]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005996:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8005998:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800599c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800599e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2232      	movs	r2, #50	@ 0x32
 80059a4:	fb02 f303 	mul.w	r3, r2, r3
 80059a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	0c9b      	lsrs	r3, r3, #18
 80059b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059b2:	e002      	b.n	80059ba <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059ba:	4b14      	ldr	r3, [pc, #80]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c6:	d102      	bne.n	80059ce <HAL_PWREx_ControlVoltageScaling+0x5e>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f2      	bne.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x44>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059ce:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059da:	d110      	bne.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x8e>
      {
        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e00f      	b.n	8005a00 <HAL_PWREx_ControlVoltageScaling+0x90>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059e0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ec:	d007      	beq.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059ee:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059f6:	4a05      	ldr	r2, [pc, #20]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	58000400 	.word	0x58000400
 8005a10:	20000070 	.word	0x20000070
 8005a14:	431bde83 	.word	0x431bde83

08005a18 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a1c:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a03      	ldr	r2, [pc, #12]	@ (8005a30 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a26:	6013      	str	r3, [r2, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr
 8005a30:	58000400 	.word	0x58000400

08005a34 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a3a:	4b16      	ldr	r3, [pc, #88]	@ (8005a94 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a44:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005a46:	4b14      	ldr	r3, [pc, #80]	@ (8005a98 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2232      	movs	r2, #50	@ 0x32
 8005a4c:	fb02 f303 	mul.w	r3, r2, r3
 8005a50:	4a12      	ldr	r2, [pc, #72]	@ (8005a9c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	0c9b      	lsrs	r3, r3, #18
 8005a58:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a5a:	e002      	b.n	8005a62 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a62:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a6e:	d102      	bne.n	8005a76 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f2      	bne.n	8005a5c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a76:	4b07      	ldr	r3, [pc, #28]	@ (8005a94 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a82:	d101      	bne.n	8005a88 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e000      	b.n	8005a8a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	58000400 	.word	0x58000400
 8005a98:	20000070 	.word	0x20000070
 8005a9c:	431bde83 	.word	0x431bde83

08005aa0 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP0);

#else
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae8 <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a0e      	ldr	r2, [pc, #56]	@ (8005ae8 <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8005ab0:	f023 0307 	bic.w	r3, r3, #7
 8005ab4:	6013      	str	r3, [r2, #0]

#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	4a0c      	ldr	r2, [pc, #48]	@ (8005aec <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005abc:	f043 0304 	orr.w	r3, r3, #4
 8005ac0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005ac8:	bf30      	wfi
 8005aca:	e002      	b.n	8005ad2 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005acc:	bf40      	sev
    __WFE();
 8005ace:	bf20      	wfe
    __WFE();
 8005ad0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ad2:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	4a05      	ldr	r2, [pc, #20]	@ (8005aec <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	6113      	str	r3, [r2, #16]
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	58000400 	.word	0x58000400
 8005aec:	e000ed00 	.word	0xe000ed00

08005af0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 0307 	bic.w	r3, r3, #7
 8005b02:	4a0e      	ldr	r2, [pc, #56]	@ (8005b3c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005b04:	f043 0302 	orr.w	r3, r3, #2
 8005b08:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b40 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005b1c:	bf30      	wfi
 8005b1e:	e002      	b.n	8005b26 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005b20:	bf40      	sev
    __WFE();
 8005b22:	bf20      	wfe
    __WFE();
 8005b24:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	4a05      	ldr	r2, [pc, #20]	@ (8005b40 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	6113      	str	r3, [r2, #16]
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr
 8005b3c:	58000400 	.word	0x58000400
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0UL)
 8005b48:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005b4c:	f7ff fec8 	bl	80058e0 <LL_EXTI_ReadFlag_0_31>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005b56:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005b5a:	f7ff fee1 	bl	8005920 <LL_EXTI_ClearFlag_0_31>

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005b5e:	f016 fb65 	bl	801c22c <HAL_PWR_PVDCallback>
  }

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0UL)
 8005b62:	2004      	movs	r0, #4
 8005b64:	f7ff fecc 	bl	8005900 <LL_EXTI_ReadFlag_32_63>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
  {
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005b6e:	2004      	movs	r0, #4
 8005b70:	f7ff fee4 	bl	800593c <LL_EXTI_ClearFlag_32_63>

    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8005b74:	f000 f802 	bl	8005b7c <HAL_PWREx_PVM3Callback>
  }
}
 8005b78:	bf00      	nop
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005b8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b98:	d101      	bne.n	8005b9e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr
 8005ba8:	58000400 	.word	0x58000400

08005bac <LL_RCC_HSE_EnableTcxo>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <LL_RCC_HSE_DisableTcxo>:
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bda:	6013      	str	r3, [r2, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bf6:	d101      	bne.n	8005bfc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <LL_RCC_HSE_Enable>:
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c18:	6013      	str	r3, [r2, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <LL_RCC_HSE_Disable>:
{
 8005c22:	b480      	push	{r7}
 8005c24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
}
 8005c36:	bf00      	nop
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <LL_RCC_HSE_IsReady>:
{
 8005c3e:	b480      	push	{r7}
 8005c40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c50:	d101      	bne.n	8005c56 <LL_RCC_HSE_IsReady+0x18>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <LL_RCC_HSE_IsReady+0x1a>
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_HSI_Enable>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <LL_RCC_HSI_Disable>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <LL_RCC_HSI_IsReady>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005caa:	d101      	bne.n	8005cb0 <LL_RCC_HSI_IsReady+0x18>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <LL_RCC_HSI_IsReady+0x1a>
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <LL_RCC_HSI_SetCalibTrimming>:
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	061b      	lsls	r3, r3, #24
 8005cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr

08005ce2 <LL_RCC_LSE_IsReady>:
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d101      	bne.n	8005cfa <LL_RCC_LSE_IsReady+0x18>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <LL_RCC_LSE_IsReady+0x1a>
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <LL_RCC_LSI_Enable>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005d1c:	bf00      	nop
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <LL_RCC_LSI_Disable>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <LL_RCC_LSI_IsReady>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d101      	bne.n	8005d5c <LL_RCC_LSI_IsReady+0x18>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <LL_RCC_LSI_IsReady+0x1a>
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_MSI_Enable>:
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	6013      	str	r3, [r2, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <LL_RCC_MSI_Disable>:
{
 8005d82:	b480      	push	{r7}
 8005d84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	6013      	str	r3, [r2, #0]
}
 8005d96:	bf00      	nop
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <LL_RCC_MSI_IsReady>:
{
 8005d9e:	b480      	push	{r7}
 8005da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d101      	bne.n	8005db4 <LL_RCC_MSI_IsReady+0x16>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <LL_RCC_MSI_IsReady+0x18>
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr

08005dbe <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d101      	bne.n	8005dd4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <LL_RCC_MSI_GetRange>:
{
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e26:	4313      	orrs	r3, r2
 8005e28:	604b      	str	r3, [r1, #4]
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <LL_RCC_SetSysClkSource>:
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f023 0203 	bic.w	r2, r3, #3
 8005e46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	608b      	str	r3, [r1, #8]
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <LL_RCC_GetSysClkSource>:
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 030c 	and.w	r3, r3, #12
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <LL_RCC_SetAHBPrescaler>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ea6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <LL_RCC_SetAHB3Prescaler>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ed0:	f023 020f 	bic.w	r2, r3, #15
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr

08005eec <LL_RCC_SetAPB1Prescaler>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005efe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <LL_RCC_SetAPB2Prescaler>:
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <LL_RCC_GetAHBPrescaler>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr

08005f4e <LL_RCC_GetAHB3Prescaler>:
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_GetAPB1Prescaler>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <LL_RCC_GetAPB2Prescaler>:
{
 8005f7e:	b480      	push	{r7}
 8005f80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr

08005f94 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fa6:	6013      	str	r3, [r2, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fde:	d101      	bne.n	8005fe4 <LL_RCC_PLL_IsReady+0x18>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <LL_RCC_PLL_IsReady+0x1a>
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr

08005fee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	0a1b      	lsrs	r3, r3, #8
 8005ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr

08006006 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006006:	b480      	push	{r7}
 8006008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800600a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800602a:	4618      	mov	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0303 	and.w	r3, r3, #3
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800604c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605a:	d101      	bne.n	8006060 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr

0800606a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800606a:	b480      	push	{r7}
 800606c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800606e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006072:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800607e:	d101      	bne.n	8006084 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800608e:	b480      	push	{r7}
 8006090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006096:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800609a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800609e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a2:	d101      	bne.n	80060a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80060b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060c4:	d101      	bne.n	80060ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060e6:	d101      	bne.n	80060ec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e36f      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800610a:	f7ff fea6 	bl	8005e5a <LL_RCC_GetSysClkSource>
 800610e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006110:	f7ff ff8f 	bl	8006032 <LL_RCC_PLL_GetMainSource>
 8006114:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80c4 	beq.w	80062ac <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_RCC_OscConfig+0x3e>
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2b0c      	cmp	r3, #12
 800612e:	d176      	bne.n	800621e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d173      	bne.n	800621e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e353      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_OscConfig+0x68>
 8006154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800615e:	e006      	b.n	800616e <HAL_RCC_OscConfig+0x76>
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800616e:	4293      	cmp	r3, r2
 8006170:	d222      	bcs.n	80061b8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fd5a 	bl	8006c30 <RCC_SetFlashLatencyFromMSIRange>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e331      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006190:	f043 0308 	orr.w	r3, r3, #8
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061a8:	4313      	orrs	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fe2b 	bl	8005e0c <LL_RCC_MSI_SetCalibTrimming>
 80061b6:	e021      	b.n	80061fc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061c2:	f043 0308 	orr.w	r3, r3, #8
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061da:	4313      	orrs	r3, r2
 80061dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fe12 	bl	8005e0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fd1f 	bl	8006c30 <RCC_SetFlashLatencyFromMSIRange>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e2f6      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061fc:	f000 fce0 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006200:	4603      	mov	r3, r0
 8006202:	4aa7      	ldr	r2, [pc, #668]	@ (80064a0 <HAL_RCC_OscConfig+0x3a8>)
 8006204:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8006206:	4ba7      	ldr	r3, [pc, #668]	@ (80064a4 <HAL_RCC_OscConfig+0x3ac>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fb fb22 	bl	8001854 <HAL_InitTick>
 8006210:	4603      	mov	r3, r0
 8006212:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006214:	7cfb      	ldrb	r3, [r7, #19]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d047      	beq.n	80062aa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800621a:	7cfb      	ldrb	r3, [r7, #19]
 800621c:	e2e5      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d02c      	beq.n	8006280 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006226:	f7ff fd9e 	bl	8005d66 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800622a:	f7fb fb1d 	bl	8001868 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006232:	f7fb fb19 	bl	8001868 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e2d2      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006244:	f7ff fdab 	bl	8005d9e <LL_RCC_MSI_IsReady>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f1      	beq.n	8006232 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800624e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006258:	f043 0308 	orr.w	r3, r3, #8
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fdc7 	bl	8005e0c <LL_RCC_MSI_SetCalibTrimming>
 800627e:	e015      	b.n	80062ac <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006280:	f7ff fd7f 	bl	8005d82 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006284:	f7fb faf0 	bl	8001868 <HAL_GetTick>
 8006288:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800628c:	f7fb faec 	bl	8001868 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e2a5      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800629e:	f7ff fd7e 	bl	8005d9e <LL_RCC_MSI_IsReady>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f1      	bne.n	800628c <HAL_RCC_OscConfig+0x194>
 80062a8:	e000      	b.n	80062ac <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80062aa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d058      	beq.n	800636a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d005      	beq.n	80062ca <HAL_RCC_OscConfig+0x1d2>
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d108      	bne.n	80062d6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d105      	bne.n	80062d6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d14b      	bne.n	800636a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e289      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80062d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062e8:	4313      	orrs	r3, r2
 80062ea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f4:	d102      	bne.n	80062fc <HAL_RCC_OscConfig+0x204>
 80062f6:	f7ff fc86 	bl	8005c06 <LL_RCC_HSE_Enable>
 80062fa:	e00d      	b.n	8006318 <HAL_RCC_OscConfig+0x220>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8006304:	d104      	bne.n	8006310 <HAL_RCC_OscConfig+0x218>
 8006306:	f7ff fc51 	bl	8005bac <LL_RCC_HSE_EnableTcxo>
 800630a:	f7ff fc7c 	bl	8005c06 <LL_RCC_HSE_Enable>
 800630e:	e003      	b.n	8006318 <HAL_RCC_OscConfig+0x220>
 8006310:	f7ff fc87 	bl	8005c22 <LL_RCC_HSE_Disable>
 8006314:	f7ff fc58 	bl	8005bc8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d012      	beq.n	8006346 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fb faa2 	bl	8001868 <HAL_GetTick>
 8006324:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006328:	f7fb fa9e 	bl	8001868 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	@ 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e257      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800633a:	f7ff fc80 	bl	8005c3e <LL_RCC_HSE_IsReady>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f1      	beq.n	8006328 <HAL_RCC_OscConfig+0x230>
 8006344:	e011      	b.n	800636a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fb fa8f 	bl	8001868 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800634e:	f7fb fa8b 	bl	8001868 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b64      	cmp	r3, #100	@ 0x64
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e244      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006360:	f7ff fc6d 	bl	8005c3e <LL_RCC_HSE_IsReady>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f1      	bne.n	800634e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d046      	beq.n	8006404 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d005      	beq.n	8006388 <HAL_RCC_OscConfig+0x290>
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d10e      	bne.n	80063a0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d10b      	bne.n	80063a0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e22a      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff fc8e 	bl	8005cba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800639e:	e031      	b.n	8006404 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d019      	beq.n	80063dc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063a8:	f7ff fc5a 	bl	8005c60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fb fa5c 	bl	8001868 <HAL_GetTick>
 80063b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b4:	f7fb fa58 	bl	8001868 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e211      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80063c6:	f7ff fc67 	bl	8005c98 <LL_RCC_HSI_IsReady>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f1      	beq.n	80063b4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fc70 	bl	8005cba <LL_RCC_HSI_SetCalibTrimming>
 80063da:	e013      	b.n	8006404 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063dc:	f7ff fc4e 	bl	8005c7c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e0:	f7fb fa42 	bl	8001868 <HAL_GetTick>
 80063e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e8:	f7fb fa3e 	bl	8001868 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e1f7      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80063fa:	f7ff fc4d 	bl	8005c98 <LL_RCC_HSI_IsReady>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f1      	bne.n	80063e8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d06e      	beq.n	80064ee <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d056      	beq.n	80064c6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8006418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800641c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006420:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	429a      	cmp	r2, r3
 800642e:	d031      	beq.n	8006494 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d006      	beq.n	8006448 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e1d0      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8006452:	f7ff fc67 	bl	8005d24 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006456:	f7fb fa07 	bl	8001868 <HAL_GetTick>
 800645a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800645e:	f7fb fa03 	bl	8001868 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b11      	cmp	r3, #17
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e1bc      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006470:	f7ff fc68 	bl	8005d44 <LL_RCC_LSI_IsReady>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f1      	bne.n	800645e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800647a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800647e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006482:	f023 0210 	bic.w	r2, r3, #16
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006494:	f7ff fc36 	bl	8005d04 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006498:	f7fb f9e6 	bl	8001868 <HAL_GetTick>
 800649c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800649e:	e00c      	b.n	80064ba <HAL_RCC_OscConfig+0x3c2>
 80064a0:	20000070 	.word	0x20000070
 80064a4:	20000074 	.word	0x20000074
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a8:	f7fb f9de 	bl	8001868 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b11      	cmp	r3, #17
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e197      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80064ba:	f7ff fc43 	bl	8005d44 <LL_RCC_LSI_IsReady>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0f1      	beq.n	80064a8 <HAL_RCC_OscConfig+0x3b0>
 80064c4:	e013      	b.n	80064ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064c6:	f7ff fc2d 	bl	8005d24 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ca:	f7fb f9cd 	bl	8001868 <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d2:	f7fb f9c9 	bl	8001868 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b11      	cmp	r3, #17
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e182      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80064e4:	f7ff fc2e 	bl	8005d44 <LL_RCC_LSI_IsReady>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f1      	bne.n	80064d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80d8 	beq.w	80066ac <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064fc:	f7ff fb44 	bl	8005b88 <LL_PWR_IsEnabledBkUpAccess>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d113      	bne.n	800652e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006506:	f7ff f95d 	bl	80057c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800650a:	f7fb f9ad 	bl	8001868 <HAL_GetTick>
 800650e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006510:	e008      	b.n	8006524 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006512:	f7fb f9a9 	bl	8001868 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e162      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006524:	f7ff fb30 	bl	8005b88 <LL_PWR_IsEnabledBkUpAccess>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f1      	beq.n	8006512 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d07b      	beq.n	800662e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2b85      	cmp	r3, #133	@ 0x85
 800653c:	d003      	beq.n	8006546 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b05      	cmp	r3, #5
 8006544:	d109      	bne.n	800655a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006552:	f043 0304 	orr.w	r3, r3, #4
 8006556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655a:	f7fb f985 	bl	8001868 <HAL_GetTick>
 800655e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006568:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006574:	e00a      	b.n	800658c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006576:	f7fb f977 	bl	8001868 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e12e      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800658c:	f7ff fba9 	bl	8005ce2 <LL_RCC_LSE_IsReady>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0ef      	beq.n	8006576 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2b81      	cmp	r3, #129	@ 0x81
 800659c:	d003      	beq.n	80065a6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b85      	cmp	r3, #133	@ 0x85
 80065a4:	d121      	bne.n	80065ea <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a6:	f7fb f95f 	bl	8001868 <HAL_GetTick>
 80065aa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fb f951 	bl	8001868 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e108      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0ec      	beq.n	80065c2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80065e8:	e060      	b.n	80066ac <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fb f93d 	bl	8001868 <HAL_GetTick>
 80065ee:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006604:	e00a      	b.n	800661c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006606:	f7fb f92f 	bl	8001868 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006614:	4293      	cmp	r3, r2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e0e6      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800661c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1ec      	bne.n	8006606 <HAL_RCC_OscConfig+0x50e>
 800662c:	e03e      	b.n	80066ac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800662e:	f7fb f91b 	bl	8001868 <HAL_GetTick>
 8006632:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006648:	e00a      	b.n	8006660 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664a:	f7fb f90d 	bl	8001868 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e0c4      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1ec      	bne.n	800664a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006670:	f7fb f8fa 	bl	8001868 <HAL_GetTick>
 8006674:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fb f8ec 	bl	8001868 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0a3      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80066a2:	f7ff fb1e 	bl	8005ce2 <LL_RCC_LSE_IsReady>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1ef      	bne.n	800668c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8099 	beq.w	80067e8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2b0c      	cmp	r3, #12
 80066ba:	d06c      	beq.n	8006796 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d14b      	bne.n	800675c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c4:	f7ff fc74 	bl	8005fb0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c8:	f7fb f8ce 	bl	8001868 <HAL_GetTick>
 80066cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fb f8ca 	bl	8001868 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b0a      	cmp	r3, #10
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e083      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80066e2:	f7ff fc73 	bl	8005fcc <LL_RCC_PLL_IsReady>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f1      	bne.n	80066d0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	4b40      	ldr	r3, [pc, #256]	@ (80067f4 <HAL_RCC_OscConfig+0x6fc>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066fe:	4311      	orrs	r1, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006704:	0212      	lsls	r2, r2, #8
 8006706:	4311      	orrs	r1, r2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800670c:	4311      	orrs	r1, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006712:	4311      	orrs	r1, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006718:	430a      	orrs	r2, r1
 800671a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800671e:	4313      	orrs	r3, r2
 8006720:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006722:	f7ff fc37 	bl	8005f94 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006734:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006736:	f7fb f897 	bl	8001868 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673e:	f7fb f893 	bl	8001868 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b0a      	cmp	r3, #10
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e04c      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006750:	f7ff fc3c 	bl	8005fcc <LL_RCC_PLL_IsReady>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0f1      	beq.n	800673e <HAL_RCC_OscConfig+0x646>
 800675a:	e045      	b.n	80067e8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800675c:	f7ff fc28 	bl	8005fb0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fb f882 	bl	8001868 <HAL_GetTick>
 8006764:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006768:	f7fb f87e 	bl	8001868 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b0a      	cmp	r3, #10
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e037      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800677a:	f7ff fc27 	bl	8005fcc <LL_RCC_PLL_IsReady>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f1      	bne.n	8006768 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800678e:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <HAL_RCC_OscConfig+0x700>)
 8006790:	4013      	ands	r3, r2
 8006792:	60cb      	str	r3, [r1, #12]
 8006794:	e028      	b.n	80067e8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e023      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f003 0203 	and.w	r2, r3, #3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d115      	bne.n	80067e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d10e      	bne.n	80067e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d106      	bne.n	80067e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d001      	beq.n	80067e8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	11c1808c 	.word	0x11c1808c
 80067f8:	eefefffc 	.word	0xeefefffc

080067fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e12c      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006810:	4b98      	ldr	r3, [pc, #608]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d91b      	bls.n	8006856 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b95      	ldr	r3, [pc, #596]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f023 0207 	bic.w	r2, r3, #7
 8006826:	4993      	ldr	r1, [pc, #588]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800682e:	f7fb f81b 	bl	8001868 <HAL_GetTick>
 8006832:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006834:	e008      	b.n	8006848 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006836:	f7fb f817 	bl	8001868 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e110      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006848:	4b8a      	ldr	r3, [pc, #552]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d1ef      	bne.n	8006836 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fb02 	bl	8005e70 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800686c:	f7fa fffc 	bl	8001868 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006874:	f7fa fff8 	bl	8001868 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e0f1      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006886:	f7ff fbdf 	bl	8006048 <LL_RCC_IsActiveFlag_HPRE>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f1      	beq.n	8006874 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d016      	beq.n	80068ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff faf8 	bl	8005e96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068a6:	f7fa ffdf 	bl	8001868 <HAL_GetTick>
 80068aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068ae:	f7fa ffdb 	bl	8001868 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0d4      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80068c0:	f7ff fbd3 	bl	800606a <LL_RCC_IsActiveFlag_C2HPRE>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f1      	beq.n	80068ae <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff faf0 	bl	8005ec0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068e0:	f7fa ffc2 	bl	8001868 <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068e8:	f7fa ffbe 	bl	8001868 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0b7      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80068fa:	f7ff fbc8 	bl	800608e <LL_RCC_IsActiveFlag_SHDHPRE>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f1      	beq.n	80068e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d016      	beq.n	800693e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fae9 	bl	8005eec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800691a:	f7fa ffa5 	bl	8001868 <HAL_GetTick>
 800691e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006920:	e008      	b.n	8006934 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006922:	f7fa ffa1 	bl	8001868 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e09a      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006934:	f7ff fbbd 	bl	80060b2 <LL_RCC_IsActiveFlag_PPRE1>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f1      	beq.n	8006922 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d017      	beq.n	800697a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fade 	bl	8005f12 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006956:	f7fa ff87 	bl	8001868 <HAL_GetTick>
 800695a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800695e:	f7fa ff83 	bl	8001868 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e07c      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006970:	f7ff fbb0 	bl	80060d4 <LL_RCC_IsActiveFlag_PPRE2>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f1      	beq.n	800695e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d043      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d106      	bne.n	800699c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800698e:	f7ff f956 	bl	8005c3e <LL_RCC_HSE_IsReady>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11e      	bne.n	80069d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e066      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d106      	bne.n	80069b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80069a4:	f7ff fb12 	bl	8005fcc <LL_RCC_PLL_IsReady>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d113      	bne.n	80069d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e05b      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80069ba:	f7ff f9f0 	bl	8005d9e <LL_RCC_MSI_IsReady>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e050      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80069c8:	f7ff f966 	bl	8005c98 <LL_RCC_HSI_IsReady>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e049      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fa2a 	bl	8005e34 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069e0:	f7fa ff42 	bl	8001868 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e8:	f7fa ff3e 	bl	8001868 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e035      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fe:	f7ff fa2c 	bl	8005e5a <LL_RCC_GetSysClkSource>
 8006a02:	4602      	mov	r2, r0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d1ec      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a0e:	4b19      	ldr	r3, [pc, #100]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d21b      	bcs.n	8006a54 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1c:	4b15      	ldr	r3, [pc, #84]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f023 0207 	bic.w	r2, r3, #7
 8006a24:	4913      	ldr	r1, [pc, #76]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a2c:	f7fa ff1c 	bl	8001868 <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a34:	f7fa ff18 	bl	8001868 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e011      	b.n	8006a6a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a46:	4b0b      	ldr	r3, [pc, #44]	@ (8006a74 <HAL_RCC_ClockConfig+0x278>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d1ef      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006a54:	f000 f8b4 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	4a07      	ldr	r2, [pc, #28]	@ (8006a78 <HAL_RCC_ClockConfig+0x27c>)
 8006a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8006a5e:	4b07      	ldr	r3, [pc, #28]	@ (8006a7c <HAL_RCC_ClockConfig+0x280>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fa fef6 	bl	8001854 <HAL_InitTick>
 8006a68:	4603      	mov	r3, r0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	58004000 	.word	0x58004000
 8006a78:	20000070 	.word	0x20000070
 8006a7c:	20000074 	.word	0x20000074

08006a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a8e:	f7ff f9e4 	bl	8005e5a <LL_RCC_GetSysClkSource>
 8006a92:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a94:	f7ff facd 	bl	8006032 <LL_RCC_PLL_GetMainSource>
 8006a98:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x2c>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b0c      	cmp	r3, #12
 8006aa4:	d139      	bne.n	8006b1a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d136      	bne.n	8006b1a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006aac:	f7ff f987 	bl	8005dbe <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d115      	bne.n	8006ae2 <HAL_RCC_GetSysClockFreq+0x62>
 8006ab6:	f7ff f982 	bl	8005dbe <LL_RCC_MSI_IsEnabledRangeSelect>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_GetSysClockFreq+0x4e>
 8006ac0:	f7ff f98d 	bl	8005dde <LL_RCC_MSI_GetRange>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	e005      	b.n	8006ada <HAL_RCC_GetSysClockFreq+0x5a>
 8006ace:	f7ff f991 	bl	8005df4 <LL_RCC_MSI_GetRangeAfterStandby>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	4a36      	ldr	r2, [pc, #216]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x134>)
 8006adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae0:	e014      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x8c>
 8006ae2:	f7ff f96c 	bl	8005dbe <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <HAL_RCC_GetSysClockFreq+0x7a>
 8006aec:	f7ff f977 	bl	8005dde <LL_RCC_MSI_GetRange>
 8006af0:	4603      	mov	r3, r0
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	e005      	b.n	8006b06 <HAL_RCC_GetSysClockFreq+0x86>
 8006afa:	f7ff f97b 	bl	8005df4 <LL_RCC_MSI_GetRangeAfterStandby>
 8006afe:	4603      	mov	r3, r0
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	4a2b      	ldr	r2, [pc, #172]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x134>)
 8006b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d115      	bne.n	8006b40 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b18:	e012      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d102      	bne.n	8006b26 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b20:	4b25      	ldr	r3, [pc, #148]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e00c      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d109      	bne.n	8006b40 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006b2c:	f7ff f85a 	bl	8005be4 <LL_RCC_HSE_IsEnabledDiv2>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d102      	bne.n	8006b3c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006b36:	4b20      	ldr	r3, [pc, #128]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e001      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b3e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b40:	f7ff f98b 	bl	8005e5a <LL_RCC_GetSysClkSource>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d12f      	bne.n	8006baa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006b4a:	f7ff fa72 	bl	8006032 <LL_RCC_PLL_GetMainSource>
 8006b4e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d003      	beq.n	8006b5e <HAL_RCC_GetSysClockFreq+0xde>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d003      	beq.n	8006b64 <HAL_RCC_GetSysClockFreq+0xe4>
 8006b5c:	e00d      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006b5e:	4b16      	ldr	r3, [pc, #88]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b60:	60fb      	str	r3, [r7, #12]
        break;
 8006b62:	e00d      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006b64:	f7ff f83e 	bl	8005be4 <LL_RCC_HSE_IsEnabledDiv2>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d102      	bne.n	8006b74 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006b6e:	4b12      	ldr	r3, [pc, #72]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b70:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006b72:	e005      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006b74:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b76:	60fb      	str	r3, [r7, #12]
        break;
 8006b78:	e002      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	60fb      	str	r3, [r7, #12]
        break;
 8006b7e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006b80:	f7ff fa35 	bl	8005fee <LL_RCC_PLL_GetN>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	fb03 f402 	mul.w	r4, r3, r2
 8006b8c:	f7ff fa46 	bl	800601c <LL_RCC_PLL_GetDivider>
 8006b90:	4603      	mov	r3, r0
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	3301      	adds	r3, #1
 8006b96:	fbb4 f4f3 	udiv	r4, r4, r3
 8006b9a:	f7ff fa34 	bl	8006006 <LL_RCC_PLL_GetR>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	0f5b      	lsrs	r3, r3, #29
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ba8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006baa:	697b      	ldr	r3, [r7, #20]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd90      	pop	{r4, r7, pc}
 8006bb4:	08021ad4 	.word	0x08021ad4
 8006bb8:	00f42400 	.word	0x00f42400
 8006bbc:	01e84800 	.word	0x01e84800

08006bc0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bc0:	b598      	push	{r3, r4, r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006bc4:	f7ff ff5c 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8006bc8:	4604      	mov	r4, r0
 8006bca:	f7ff f9b5 	bl	8005f38 <LL_RCC_GetAHBPrescaler>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	4a03      	ldr	r2, [pc, #12]	@ (8006be4 <HAL_RCC_GetHCLKFreq+0x24>)
 8006bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bdc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd98      	pop	{r3, r4, r7, pc}
 8006be4:	08021a74 	.word	0x08021a74

08006be8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006be8:	b598      	push	{r3, r4, r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006bec:	f7ff ffe8 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	f7ff f9b9 	bl	8005f68 <LL_RCC_GetAPB1Prescaler>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	4a03      	ldr	r2, [pc, #12]	@ (8006c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c00:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	bd98      	pop	{r3, r4, r7, pc}
 8006c08:	08021ab4 	.word	0x08021ab4

08006c0c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c0c:	b598      	push	{r3, r4, r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006c10:	f7ff ffd6 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006c14:	4604      	mov	r4, r0
 8006c16:	f7ff f9b2 	bl	8005f7e <LL_RCC_GetAPB2Prescaler>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	0adb      	lsrs	r3, r3, #11
 8006c1e:	4a03      	ldr	r2, [pc, #12]	@ (8006c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	bd98      	pop	{r3, r4, r7, pc}
 8006c2c:	08021ab4 	.word	0x08021ab4

08006c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	4a10      	ldr	r2, [pc, #64]	@ (8006c84 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c46:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006c48:	f7ff f981 	bl	8005f4e <LL_RCC_GetAHB3Prescaler>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	091b      	lsrs	r3, r3, #4
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	4a0c      	ldr	r2, [pc, #48]	@ (8006c88 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4a09      	ldr	r2, [pc, #36]	@ (8006c8c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006c66:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6a:	0c9c      	lsrs	r4, r3, #18
 8006c6c:	f7fe fe74 	bl	8005958 <HAL_PWREx_GetVoltageRange>
 8006c70:	4603      	mov	r3, r0
 8006c72:	4619      	mov	r1, r3
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 f80b 	bl	8006c90 <RCC_SetFlashLatency>
 8006c7a:	4603      	mov	r3, r0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd90      	pop	{r4, r7, pc}
 8006c84:	08021ad4 	.word	0x08021ad4
 8006c88:	08021a74 	.word	0x08021a74
 8006c8c:	431bde83 	.word	0x431bde83

08006c90 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08e      	sub	sp, #56	@ 0x38
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8006d84 <RCC_SetFlashLatency+0xf4>)
 8006c9c:	f107 0320 	add.w	r3, r7, #32
 8006ca0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ca4:	6018      	str	r0, [r3, #0]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006caa:	4a37      	ldr	r2, [pc, #220]	@ (8006d88 <RCC_SetFlashLatency+0xf8>)
 8006cac:	f107 0318 	add.w	r3, r7, #24
 8006cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cb4:	6018      	str	r0, [r3, #0]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006cba:	4a34      	ldr	r2, [pc, #208]	@ (8006d8c <RCC_SetFlashLatency+0xfc>)
 8006cbc:	f107 030c 	add.w	r3, r7, #12
 8006cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd0:	d11b      	bne.n	8006d0a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd6:	e014      	b.n	8006d02 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	3338      	adds	r3, #56	@ 0x38
 8006cde:	443b      	add	r3, r7
 8006ce0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d807      	bhi.n	8006cfc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	3338      	adds	r3, #56	@ 0x38
 8006cf2:	443b      	add	r3, r7
 8006cf4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cfa:	e021      	b.n	8006d40 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	3301      	adds	r3, #1
 8006d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d9e7      	bls.n	8006cd8 <RCC_SetFlashLatency+0x48>
 8006d08:	e01a      	b.n	8006d40 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d0e:	e014      	b.n	8006d3a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	3338      	adds	r3, #56	@ 0x38
 8006d16:	443b      	add	r3, r7
 8006d18:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d807      	bhi.n	8006d34 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	3338      	adds	r3, #56	@ 0x38
 8006d2a:	443b      	add	r3, r7
 8006d2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d32:	e005      	b.n	8006d40 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d36:	3301      	adds	r3, #1
 8006d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d9e7      	bls.n	8006d10 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d40:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <RCC_SetFlashLatency+0x100>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 0207 	bic.w	r2, r3, #7
 8006d48:	4911      	ldr	r1, [pc, #68]	@ (8006d90 <RCC_SetFlashLatency+0x100>)
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d50:	f7fa fd8a 	bl	8001868 <HAL_GetTick>
 8006d54:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006d56:	e008      	b.n	8006d6a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006d58:	f7fa fd86 	bl	8001868 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e007      	b.n	8006d7a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006d6a:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <RCC_SetFlashLatency+0x100>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d1ef      	bne.n	8006d58 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3738      	adds	r7, #56	@ 0x38
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	0802153c 	.word	0x0802153c
 8006d88:	08021544 	.word	0x08021544
 8006d8c:	0802154c 	.word	0x0802154c
 8006d90:	58004000 	.word	0x58004000

08006d94 <LL_RCC_LSE_IsReady>:
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d101      	bne.n	8006dac <LL_RCC_LSE_IsReady+0x18>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <LL_RCC_LSE_IsReady+0x1a>
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <LL_RCC_SetUSARTClockSource>:
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	0c1b      	lsrs	r3, r3, #16
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	401a      	ands	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_SetI2SClockSource>:
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <LL_RCC_SetLPUARTClockSource>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <LL_RCC_SetI2CClockSource>:
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e46:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	091b      	lsrs	r3, r3, #4
 8006e4e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006e52:	43db      	mvns	r3, r3
 8006e54:	401a      	ands	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006e5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <LL_RCC_SetLPTIMClockSource>:
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr

08006ea4 <LL_RCC_SetRNGClockSource>:
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bc80      	pop	{r7}
 8006ecc:	4770      	bx	lr

08006ece <LL_RCC_SetADCClockSource>:
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <LL_RCC_SetRTCClockSource>:
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <LL_RCC_GetRTCClockSource>:
{
 8006f22:	b480      	push	{r7}
 8006f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr

08006f3a <LL_RCC_ForceBackupDomainReset>:
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f52:	bf00      	nop
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr

08006f5a <LL_RCC_ReleaseBackupDomainReset>:
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f72:	bf00      	nop
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr
	...

08006f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006f88:	2300      	movs	r3, #0
 8006f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d058      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006f9c:	f7fe fc12 	bl	80057c4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fa0:	f7fa fc62 	bl	8001868 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006fa6:	e009      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa8:	f7fa fc5e 	bl	8001868 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d902      	bls.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	74fb      	strb	r3, [r7, #19]
        break;
 8006fba:	e006      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc8:	d1ee      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006fca:	7cfb      	ldrb	r3, [r7, #19]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d13c      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006fd0:	f7ff ffa7 	bl	8006f22 <LL_RCC_GetRTCClockSource>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d00f      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fec:	f7ff ffa5 	bl	8006f3a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff0:	f7ff ffb3 	bl	8006f5a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ff4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d014      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007008:	f7fa fc2e 	bl	8001868 <HAL_GetTick>
 800700c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800700e:	e00b      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007010:	f7fa fc2a 	bl	8001868 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701e:	4293      	cmp	r3, r2
 8007020:	d902      	bls.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	74fb      	strb	r3, [r7, #19]
            break;
 8007026:	e004      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007028:	f7ff feb4 	bl	8006d94 <LL_RCC_LSE_IsReady>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d1ee      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007032:	7cfb      	ldrb	r3, [r7, #19]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d105      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ff5b 	bl	8006ef8 <LL_RCC_SetRTCClockSource>
 8007042:	e004      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007044:	7cfb      	ldrb	r3, [r7, #19]
 8007046:	74bb      	strb	r3, [r7, #18]
 8007048:	e001      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704a:	7cfb      	ldrb	r3, [r7, #19]
 800704c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff fea9 	bl	8006db6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff fe9e 	bl	8006db6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fec0 	bl	8006e10 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fee6 	bl	8006e72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fedb 	bl	8006e72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fed0 	bl	8006e72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff fea9 	bl	8006e3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fe9e 	bl	8006e3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fe93 	bl	8006e3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b00      	cmp	r3, #0
 800711e:	d011      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fe5e 	bl	8006de6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007132:	d107      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800713e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d010      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fea5 	bl	8006ea4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715e:	2b00      	cmp	r3, #0
 8007160:	d107      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800716c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007170:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d011      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fea3 	bl	8006ece <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007190:	d107      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800719c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80071a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	58000400 	.word	0x58000400

080071b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d071      	beq.n	80072a6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fa f95c 	bl	8001494 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80071e4:	4b32      	ldr	r3, [pc, #200]	@ (80072b0 <HAL_RTC_Init+0x100>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d051      	beq.n	8007294 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071f0:	4b2f      	ldr	r3, [pc, #188]	@ (80072b0 <HAL_RTC_Init+0x100>)
 80071f2:	22ca      	movs	r2, #202	@ 0xca
 80071f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80071f6:	4b2e      	ldr	r3, [pc, #184]	@ (80072b0 <HAL_RTC_Init+0x100>)
 80071f8:	2253      	movs	r2, #83	@ 0x53
 80071fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fb9d 	bl	800793c <RTC_EnterInitMode>
 8007202:	4603      	mov	r3, r0
 8007204:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d13f      	bne.n	800728c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800720c:	4b28      	ldr	r3, [pc, #160]	@ (80072b0 <HAL_RTC_Init+0x100>)
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	4a27      	ldr	r2, [pc, #156]	@ (80072b0 <HAL_RTC_Init+0x100>)
 8007212:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800721a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800721c:	4b24      	ldr	r3, [pc, #144]	@ (80072b0 <HAL_RTC_Init+0x100>)
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6859      	ldr	r1, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	4319      	orrs	r1, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	430b      	orrs	r3, r1
 8007230:	491f      	ldr	r1, [pc, #124]	@ (80072b0 <HAL_RTC_Init+0x100>)
 8007232:	4313      	orrs	r3, r2
 8007234:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	041b      	lsls	r3, r3, #16
 8007240:	491b      	ldr	r1, [pc, #108]	@ (80072b0 <HAL_RTC_Init+0x100>)
 8007242:	4313      	orrs	r3, r2
 8007244:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007246:	4b1a      	ldr	r3, [pc, #104]	@ (80072b0 <HAL_RTC_Init+0x100>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007256:	430b      	orrs	r3, r1
 8007258:	4915      	ldr	r1, [pc, #84]	@ (80072b0 <HAL_RTC_Init+0x100>)
 800725a:	4313      	orrs	r3, r2
 800725c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fba0 	bl	80079a4 <RTC_ExitInitMode>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10e      	bne.n	800728c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800726e:	4b10      	ldr	r3, [pc, #64]	@ (80072b0 <HAL_RTC_Init+0x100>)
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a19      	ldr	r1, [r3, #32]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	4319      	orrs	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	430b      	orrs	r3, r1
 8007286:	490a      	ldr	r1, [pc, #40]	@ (80072b0 <HAL_RTC_Init+0x100>)
 8007288:	4313      	orrs	r3, r2
 800728a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728c:	4b08      	ldr	r3, [pc, #32]	@ (80072b0 <HAL_RTC_Init+0x100>)
 800728e:	22ff      	movs	r2, #255	@ 0xff
 8007290:	625a      	str	r2, [r3, #36]	@ 0x24
 8007292:	e001      	b.n	8007298 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40002800 	.word	0x40002800

080072b4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_RTC_SetTime+0x1a>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e088      	b.n	80073e0 <HAL_RTC_SetTime+0x12c>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072de:	4b42      	ldr	r3, [pc, #264]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 80072e0:	22ca      	movs	r2, #202	@ 0xca
 80072e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80072e4:	4b40      	ldr	r3, [pc, #256]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 80072e6:	2253      	movs	r2, #83	@ 0x53
 80072e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fb26 	bl	800793c <RTC_EnterInitMode>
 80072f0:	4603      	mov	r3, r0
 80072f2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80072f4:	7cfb      	ldrb	r3, [r7, #19]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d15e      	bne.n	80073b8 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80072fa:	4b3b      	ldr	r3, [pc, #236]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007306:	d057      	beq.n	80073b8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d125      	bne.n	800735a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800730e:	4b36      	ldr	r3, [pc, #216]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d102      	bne.n	8007320 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2200      	movs	r2, #0
 800731e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fb7b 	bl	8007a20 <RTC_ByteToBcd2>
 800732a:	4603      	mov	r3, r0
 800732c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fb74 	bl	8007a20 <RTC_ByteToBcd2>
 8007338:	4603      	mov	r3, r0
 800733a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800733c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	789b      	ldrb	r3, [r3, #2]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fb6c 	bl	8007a20 <RTC_ByteToBcd2>
 8007348:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800734a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	78db      	ldrb	r3, [r3, #3]
 8007352:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e017      	b.n	800738a <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800735a:	4b23      	ldr	r3, [pc, #140]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007378:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800737e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	78db      	ldrb	r3, [r3, #3]
 8007384:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800738a:	4a17      	ldr	r2, [pc, #92]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007392:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007396:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8007398:	4b13      	ldr	r3, [pc, #76]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	4a12      	ldr	r2, [pc, #72]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 800739e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073a2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80073a4:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	68d9      	ldr	r1, [r3, #12]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	430b      	orrs	r3, r1
 80073b2:	490d      	ldr	r1, [pc, #52]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 faf3 	bl	80079a4 <RTC_ExitInitMode>
 80073be:	4603      	mov	r3, r0
 80073c0:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073c2:	4b09      	ldr	r3, [pc, #36]	@ (80073e8 <HAL_RTC_SetTime+0x134>)
 80073c4:	22ff      	movs	r2, #255	@ 0xff
 80073c6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80073c8:	7cfb      	ldrb	r3, [r7, #19]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 80073de:	7cfb      	ldrb	r3, [r7, #19]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd90      	pop	{r4, r7, pc}
 80073e8:	40002800 	.word	0x40002800

080073ec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80073f8:	4b2c      	ldr	r3, [pc, #176]	@ (80074ac <HAL_RTC_GetTime+0xc0>)
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007400:	4b2a      	ldr	r3, [pc, #168]	@ (80074ac <HAL_RTC_GetTime+0xc0>)
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800740c:	d049      	beq.n	80074a2 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800740e:	4b27      	ldr	r3, [pc, #156]	@ (80074ac <HAL_RTC_GetTime+0xc0>)
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800741a:	4b24      	ldr	r3, [pc, #144]	@ (80074ac <HAL_RTC_GetTime+0xc0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007422:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007426:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007432:	b2da      	uxtb	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007442:	b2da      	uxtb	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007450:	b2da      	uxtb	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	0d9b      	lsrs	r3, r3, #22
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d11a      	bne.n	80074a2 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 faf4 	bl	8007a5e <RTC_Bcd2ToByte>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 faeb 	bl	8007a5e <RTC_Bcd2ToByte>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fae2 	bl	8007a5e <RTC_Bcd2ToByte>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40002800 	.word	0x40002800

080074b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_RTC_SetDate+0x1a>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e071      	b.n	80075ae <HAL_RTC_SetDate+0xfe>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2202      	movs	r2, #2
 80074d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10e      	bne.n	80074fe <HAL_RTC_SetDate+0x4e>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	f023 0310 	bic.w	r3, r3, #16
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	330a      	adds	r3, #10
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d11c      	bne.n	800753e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	78db      	ldrb	r3, [r3, #3]
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fa89 	bl	8007a20 <RTC_ByteToBcd2>
 800750e:	4603      	mov	r3, r0
 8007510:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fa82 	bl	8007a20 <RTC_ByteToBcd2>
 800751c:	4603      	mov	r3, r0
 800751e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007520:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	789b      	ldrb	r3, [r3, #2]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fa7a 	bl	8007a20 <RTC_ByteToBcd2>
 800752c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800752e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e00e      	b.n	800755c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	78db      	ldrb	r3, [r3, #3]
 8007542:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800754a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007550:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800755c:	4b16      	ldr	r3, [pc, #88]	@ (80075b8 <HAL_RTC_SetDate+0x108>)
 800755e:	22ca      	movs	r2, #202	@ 0xca
 8007560:	625a      	str	r2, [r3, #36]	@ 0x24
 8007562:	4b15      	ldr	r3, [pc, #84]	@ (80075b8 <HAL_RTC_SetDate+0x108>)
 8007564:	2253      	movs	r2, #83	@ 0x53
 8007566:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f9e7 	bl	800793c <RTC_EnterInitMode>
 800756e:	4603      	mov	r3, r0
 8007570:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8007578:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <HAL_RTC_SetDate+0x108>)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007580:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007584:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fa0c 	bl	80079a4 <RTC_ExitInitMode>
 800758c:	4603      	mov	r3, r0
 800758e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007590:	4b09      	ldr	r3, [pc, #36]	@ (80075b8 <HAL_RTC_SetDate+0x108>)
 8007592:	22ff      	movs	r2, #255	@ 0xff
 8007594:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007596:	7cfb      	ldrb	r3, [r7, #19]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d103      	bne.n	80075a4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 80075ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd90      	pop	{r4, r7, pc}
 80075b6:	bf00      	nop
 80075b8:	40002800 	.word	0x40002800

080075bc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_RTC_SetAlarm_IT+0x1e>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e0f3      	b.n	80077c2 <HAL_RTC_SetAlarm_IT+0x206>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80075ea:	4b78      	ldr	r3, [pc, #480]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075f2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075fa:	d06a      	beq.n	80076d2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d13a      	bne.n	8007678 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007602:	4b72      	ldr	r3, [pc, #456]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2200      	movs	r2, #0
 8007612:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f9fd 	bl	8007a20 <RTC_ByteToBcd2>
 8007626:	4603      	mov	r3, r0
 8007628:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f9f6 	bl	8007a20 <RTC_ByteToBcd2>
 8007634:	4603      	mov	r3, r0
 8007636:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007638:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	789b      	ldrb	r3, [r3, #2]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f9ee 	bl	8007a20 <RTC_ByteToBcd2>
 8007644:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007646:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	78db      	ldrb	r3, [r3, #3]
 800764e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007650:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f9e0 	bl	8007a20 <RTC_ByteToBcd2>
 8007660:	4603      	mov	r3, r0
 8007662:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007664:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800766c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e02c      	b.n	80076d2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007680:	d00d      	beq.n	800769e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800768a:	d008      	beq.n	800769e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800768c:	4b4f      	ldr	r3, [pc, #316]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076aa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80076b0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	78db      	ldrb	r3, [r3, #3]
 80076b6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80076b8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076c0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80076c2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80076c8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076d2:	4b3e      	ldr	r3, [pc, #248]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 80076d4:	22ca      	movs	r2, #202	@ 0xca
 80076d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80076d8:	4b3c      	ldr	r3, [pc, #240]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 80076da:	2253      	movs	r2, #83	@ 0x53
 80076dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076e6:	d12c      	bne.n	8007742 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80076e8:	4b38      	ldr	r3, [pc, #224]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	4a37      	ldr	r2, [pc, #220]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 80076ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80076f2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80076f4:	4b35      	ldr	r3, [pc, #212]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007700:	d107      	bne.n	8007712 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	4930      	ldr	r1, [pc, #192]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 800770c:	4313      	orrs	r3, r2
 800770e:	644b      	str	r3, [r1, #68]	@ 0x44
 8007710:	e006      	b.n	8007720 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007712:	4a2e      	ldr	r2, [pc, #184]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007718:	4a2c      	ldr	r2, [pc, #176]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007720:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772c:	f043 0201 	orr.w	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007734:	4b25      	ldr	r3, [pc, #148]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	4a24      	ldr	r2, [pc, #144]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 800773a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800773e:	6193      	str	r3, [r2, #24]
 8007740:	e02b      	b.n	800779a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007742:	4b22      	ldr	r3, [pc, #136]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	4a21      	ldr	r2, [pc, #132]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007748:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800774c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800774e:	4b1f      	ldr	r3, [pc, #124]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007750:	2202      	movs	r2, #2
 8007752:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800775a:	d107      	bne.n	800776c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	4919      	ldr	r1, [pc, #100]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007766:	4313      	orrs	r3, r2
 8007768:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800776a:	e006      	b.n	800777a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800776c:	4a17      	ldr	r2, [pc, #92]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007772:	4a16      	ldr	r2, [pc, #88]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800777a:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007786:	f043 0202 	orr.w	r2, r3, #2
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800778e:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	4a0e      	ldr	r2, [pc, #56]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007794:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007798:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800779a:	4b0d      	ldr	r3, [pc, #52]	@ (80077d0 <HAL_RTC_SetAlarm_IT+0x214>)
 800779c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a0:	4a0b      	ldr	r2, [pc, #44]	@ (80077d0 <HAL_RTC_SetAlarm_IT+0x214>)
 80077a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077aa:	4b08      	ldr	r3, [pc, #32]	@ (80077cc <HAL_RTC_SetAlarm_IT+0x210>)
 80077ac:	22ff      	movs	r2, #255	@ 0xff
 80077ae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd90      	pop	{r4, r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40002800 	.word	0x40002800
 80077d0:	58000800 	.word	0x58000800

080077d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_RTC_DeactivateAlarm+0x18>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e048      	b.n	800787e <HAL_RTC_DeactivateAlarm+0xaa>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077fc:	4b22      	ldr	r3, [pc, #136]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 80077fe:	22ca      	movs	r2, #202	@ 0xca
 8007800:	625a      	str	r2, [r3, #36]	@ 0x24
 8007802:	4b21      	ldr	r3, [pc, #132]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007804:	2253      	movs	r2, #83	@ 0x53
 8007806:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800780e:	d115      	bne.n	800783c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007810:	4b1d      	ldr	r3, [pc, #116]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	4a1c      	ldr	r2, [pc, #112]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007816:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800781a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800781c:	4b1a      	ldr	r3, [pc, #104]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 800781e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007820:	4a19      	ldr	r2, [pc, #100]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007826:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782c:	f023 0201 	bic.w	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007834:	4b14      	ldr	r3, [pc, #80]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007836:	2201      	movs	r2, #1
 8007838:	65da      	str	r2, [r3, #92]	@ 0x5c
 800783a:	e014      	b.n	8007866 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800783c:	4b12      	ldr	r3, [pc, #72]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	4a11      	ldr	r2, [pc, #68]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007842:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007846:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007848:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 800784a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800784c:	4a0e      	ldr	r2, [pc, #56]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 800784e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007852:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007858:	f023 0202 	bic.w	r2, r3, #2
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007860:	4b09      	ldr	r3, [pc, #36]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007862:	2202      	movs	r2, #2
 8007864:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007866:	4b08      	ldr	r3, [pc, #32]	@ (8007888 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007868:	22ff      	movs	r2, #255	@ 0xff
 800786a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr
 8007888:	40002800 	.word	0x40002800

0800788c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	cnt++;
 8007894:	4b14      	ldr	r3, [pc, #80]	@ (80078e8 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	b2da      	uxtb	r2, r3
 800789c:	4b12      	ldr	r3, [pc, #72]	@ (80078e8 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800789e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80078a0:	4b12      	ldr	r3, [pc, #72]	@ (80078ec <HAL_RTC_AlarmIRQHandler+0x60>)
 80078a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <HAL_RTC_AlarmIRQHandler+0x36>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80078b6:	4b0d      	ldr	r3, [pc, #52]	@ (80078ec <HAL_RTC_AlarmIRQHandler+0x60>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f014 fe6f 	bl	801c5a0 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RTC_AlarmIRQHandler+0x4c>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80078cc:	4b07      	ldr	r3, [pc, #28]	@ (80078ec <HAL_RTC_AlarmIRQHandler+0x60>)
 80078ce:	2202      	movs	r2, #2
 80078d0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f014 fe90 	bl	801c5f8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80078e0:	bf00      	nop
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	200009ac 	.word	0x200009ac
 80078ec:	40002800 	.word	0x40002800

080078f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80078f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007938 <HAL_RTC_WaitForSynchro+0x48>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007938 <HAL_RTC_WaitForSynchro+0x48>)
 80078fe:	f023 0320 	bic.w	r3, r3, #32
 8007902:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007904:	f7f9 ffb0 	bl	8001868 <HAL_GetTick>
 8007908:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800790a:	e009      	b.n	8007920 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800790c:	f7f9 ffac 	bl	8001868 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800791a:	d901      	bls.n	8007920 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e006      	b.n	800792e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007920:	4b05      	ldr	r3, [pc, #20]	@ (8007938 <HAL_RTC_WaitForSynchro+0x48>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0320 	and.w	r3, r3, #32
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0ef      	beq.n	800790c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40002800 	.word	0x40002800

0800793c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007948:	4b15      	ldr	r3, [pc, #84]	@ (80079a0 <RTC_EnterInitMode+0x64>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007950:	2b00      	cmp	r3, #0
 8007952:	d120      	bne.n	8007996 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007954:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <RTC_EnterInitMode+0x64>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4a11      	ldr	r2, [pc, #68]	@ (80079a0 <RTC_EnterInitMode+0x64>)
 800795a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800795e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007960:	f7f9 ff82 	bl	8001868 <HAL_GetTick>
 8007964:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007966:	e00d      	b.n	8007984 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007968:	f7f9 ff7e 	bl	8001868 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007976:	d905      	bls.n	8007984 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2203      	movs	r2, #3
 8007980:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007984:	4b06      	ldr	r3, [pc, #24]	@ (80079a0 <RTC_EnterInitMode+0x64>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <RTC_EnterInitMode+0x5a>
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b03      	cmp	r3, #3
 8007994:	d1e8      	bne.n	8007968 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40002800 	.word	0x40002800

080079a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80079b0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a1c <RTC_ExitInitMode+0x78>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	4a19      	ldr	r2, [pc, #100]	@ (8007a1c <RTC_ExitInitMode+0x78>)
 80079b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80079bc:	4b17      	ldr	r3, [pc, #92]	@ (8007a1c <RTC_ExitInitMode+0x78>)
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10c      	bne.n	80079e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff91 	bl	80078f0 <HAL_RTC_WaitForSynchro>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01e      	beq.n	8007a12 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	73fb      	strb	r3, [r7, #15]
 80079e0:	e017      	b.n	8007a12 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079e2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a1c <RTC_ExitInitMode+0x78>)
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	4a0d      	ldr	r2, [pc, #52]	@ (8007a1c <RTC_ExitInitMode+0x78>)
 80079e8:	f023 0320 	bic.w	r3, r3, #32
 80079ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff ff7e 	bl	80078f0 <HAL_RTC_WaitForSynchro>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2203      	movs	r2, #3
 80079fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a06:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <RTC_ExitInitMode+0x78>)
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	4a04      	ldr	r2, [pc, #16]	@ (8007a1c <RTC_ExitInitMode+0x78>)
 8007a0c:	f043 0320 	orr.w	r3, r3, #32
 8007a10:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40002800 	.word	0x40002800

08007a20 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007a32:	e005      	b.n	8007a40 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	3b0a      	subs	r3, #10
 8007a3e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	2b09      	cmp	r3, #9
 8007a44:	d8f6      	bhi.n	8007a34 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	b2db      	uxtb	r3, r3
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	4770      	bx	lr

08007a5e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	4603      	mov	r3, r0
 8007a66:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	091b      	lsrs	r3, r3, #4
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	4413      	add	r3, r2
 8007a88:	b2db      	uxtb	r3, r3
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_RTCEx_EnableBypassShadow+0x16>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e01f      	b.n	8007aea <HAL_RTCEx_EnableBypassShadow+0x56>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aba:	4b0e      	ldr	r3, [pc, #56]	@ (8007af4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007abc:	22ca      	movs	r2, #202	@ 0xca
 8007abe:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8007af4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007ac2:	2253      	movs	r2, #83	@ 0x53
 8007ac4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8007af4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	4a0a      	ldr	r2, [pc, #40]	@ (8007af4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007acc:	f043 0320 	orr.w	r3, r3, #32
 8007ad0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ad2:	4b08      	ldr	r3, [pc, #32]	@ (8007af4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007ad4:	22ff      	movs	r2, #255	@ 0xff
 8007ad6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bc80      	pop	{r7}
 8007af2:	4770      	bx	lr
 8007af4:	40002800 	.word	0x40002800

08007af8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007b00:	4b09      	ldr	r3, [pc, #36]	@ (8007b28 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007b0e:	2240      	movs	r2, #64	@ 0x40
 8007b10:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa f91b 	bl	8001d4e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40002800 	.word	0x40002800

08007b2c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007b38:	4b07      	ldr	r3, [pc, #28]	@ (8007b58 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007b3a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4413      	add	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	371c      	adds	r7, #28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	4000b100 	.word	0x4000b100

08007b5c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007b66:	4b07      	ldr	r3, [pc, #28]	@ (8007b84 <HAL_RTCEx_BKUPRead+0x28>)
 8007b68:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	4000b100 	.word	0x4000b100

08007b88 <LL_PWR_SetRadioBusyTrigger>:
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007b90:	4b06      	ldr	r3, [pc, #24]	@ (8007bac <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b98:	4904      	ldr	r1, [pc, #16]	@ (8007bac <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	608b      	str	r3, [r1, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	58000400 	.word	0x58000400

08007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007bb4:	4b05      	ldr	r3, [pc, #20]	@ (8007bcc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bba:	4a04      	ldr	r2, [pc, #16]	@ (8007bcc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bc80      	pop	{r7}
 8007bca:	4770      	bx	lr
 8007bcc:	58000400 	.word	0x58000400

08007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007bd4:	4b05      	ldr	r3, [pc, #20]	@ (8007bec <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bda:	4a04      	ldr	r2, [pc, #16]	@ (8007bec <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007bdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007be4:	bf00      	nop
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	58000400 	.word	0x58000400

08007bf0 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007bf4:	4b03      	ldr	r3, [pc, #12]	@ (8007c04 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bfa:	619a      	str	r2, [r3, #24]
}
 8007bfc:	bf00      	nop
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr
 8007c04:	58000400 	.word	0x58000400

08007c08 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d101      	bne.n	8007c1c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	58000400 	.word	0x58000400

08007c2c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007c30:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d101      	bne.n	8007c40 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	58000400 	.word	0x58000400

08007c50 <LL_RCC_RF_DisableReset>:
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007c68:	bf00      	nop
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <LL_RCC_IsRFUnderReset>:
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c84:	d101      	bne.n	8007c8a <LL_RCC_IsRFUnderReset+0x1a>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <LL_RCC_IsRFUnderReset+0x1c>
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <LL_EXTI_EnableIT_32_63>:
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <LL_EXTI_EnableIT_32_63+0x24>)
 8007c9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007ca2:	4905      	ldr	r1, [pc, #20]	@ (8007cb8 <LL_EXTI_EnableIT_32_63+0x24>)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	58000800 	.word	0x58000800

08007cbc <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	73fb      	strb	r3, [r7, #15]
    return status;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	e052      	b.n	8007d78 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	799b      	ldrb	r3, [r3, #6]
 8007cda:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <HAL_SUBGHZ_Init+0x2c>
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d109      	bne.n	8007cfc <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7f9 fd18 	bl	8001724 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007cf4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007cf8:	f7ff ffcc 	bl	8007c94 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d126      	bne.n	8007d50 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8007d08:	f7ff ffa2 	bl	8007c50 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007d80 <HAL_SUBGHZ_Init+0xc4>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	0cdb      	lsrs	r3, r3, #19
 8007d1a:	2264      	movs	r2, #100	@ 0x64
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
 8007d20:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	609a      	str	r2, [r3, #8]
        break;
 8007d32:	e007      	b.n	8007d44 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007d3a:	f7ff ff99 	bl	8007c70 <LL_RCC_IsRFUnderReset>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1ee      	bne.n	8007d22 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d44:	f7ff ff34 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007d48:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007d4c:	f7ff ff1c 	bl	8007b88 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007d50:	f7ff ff4e 	bl	8007bf0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fab6 	bl	80082d0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	719a      	strb	r2, [r3, #6]

  return status;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000070 	.word	0x20000070

08007d84 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	607a      	str	r2, [r7, #4]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	460b      	mov	r3, r1
 8007d92:	817b      	strh	r3, [r7, #10]
 8007d94:	4613      	mov	r3, r2
 8007d96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	799b      	ldrb	r3, [r3, #6]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d14a      	bne.n	8007e38 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	795b      	ldrb	r3, [r3, #5]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007daa:	2302      	movs	r3, #2
 8007dac:	e045      	b.n	8007e3a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2202      	movs	r2, #2
 8007db8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fb56 	bl	800846c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007dc0:	f7ff ff06 	bl	8007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007dc4:	210d      	movs	r1, #13
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 faa2 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007dcc:	897b      	ldrh	r3, [r7, #10]
 8007dce:	0a1b      	lsrs	r3, r3, #8
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fa9a 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007ddc:	897b      	ldrh	r3, [r7, #10]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	4619      	mov	r1, r3
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 fa94 	bl	8008310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007de8:	2300      	movs	r3, #0
 8007dea:	82bb      	strh	r3, [r7, #20]
 8007dec:	e00a      	b.n	8007e04 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007dee:	8abb      	ldrh	r3, [r7, #20]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4413      	add	r3, r2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	4619      	mov	r1, r3
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fa89 	bl	8008310 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007dfe:	8abb      	ldrh	r3, [r7, #20]
 8007e00:	3301      	adds	r3, #1
 8007e02:	82bb      	strh	r3, [r7, #20]
 8007e04:	8aba      	ldrh	r2, [r7, #20]
 8007e06:	893b      	ldrh	r3, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d3f0      	bcc.n	8007dee <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e0c:	f7ff fed0 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fb4f 	bl	80084b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	75fb      	strb	r3, [r7, #23]
 8007e22:	e001      	b.n	8007e28 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	715a      	strb	r2, [r3, #5]

    return status;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	e000      	b.n	8007e3a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b088      	sub	sp, #32
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	460b      	mov	r3, r1
 8007e50:	817b      	strh	r3, [r7, #10]
 8007e52:	4613      	mov	r3, r2
 8007e54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	799b      	ldrb	r3, [r3, #6]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d14a      	bne.n	8007efa <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	795b      	ldrb	r3, [r3, #5]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e045      	b.n	8007efc <HAL_SUBGHZ_ReadRegisters+0xba>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 faf8 	bl	800846c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007e7c:	f7ff fea8 	bl	8007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007e80:	211d      	movs	r1, #29
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fa44 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007e88:	897b      	ldrh	r3, [r7, #10]
 8007e8a:	0a1b      	lsrs	r3, r3, #8
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	4619      	mov	r1, r3
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fa3c 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007e98:	897b      	ldrh	r3, [r7, #10]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 fa36 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fa32 	bl	8008310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	82fb      	strh	r3, [r7, #22]
 8007eb0:	e009      	b.n	8007ec6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007eb2:	69b9      	ldr	r1, [r7, #24]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fa81 	bl	80083bc <SUBGHZSPI_Receive>
      pData++;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ec0:	8afb      	ldrh	r3, [r7, #22]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	82fb      	strh	r3, [r7, #22]
 8007ec6:	8afa      	ldrh	r2, [r7, #22]
 8007ec8:	893b      	ldrh	r3, [r7, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d3f1      	bcc.n	8007eb2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ece:	f7ff fe6f 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 faee 	bl	80084b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e001      	b.n	8007eea <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	715a      	strb	r2, [r3, #5]

    return status;
 8007ef6:	7ffb      	ldrb	r3, [r7, #31]
 8007ef8:	e000      	b.n	8007efc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007efa:	2302      	movs	r3, #2
  }
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	460b      	mov	r3, r1
 8007f12:	72fb      	strb	r3, [r7, #11]
 8007f14:	4613      	mov	r3, r2
 8007f16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	799b      	ldrb	r3, [r3, #6]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d14a      	bne.n	8007fb8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e045      	b.n	8007fba <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 fa99 	bl	800846c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	2b84      	cmp	r3, #132	@ 0x84
 8007f3e:	d002      	beq.n	8007f46 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	2b94      	cmp	r3, #148	@ 0x94
 8007f44:	d103      	bne.n	8007f4e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	711a      	strb	r2, [r3, #4]
 8007f4c:	e002      	b.n	8007f54 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007f54:	f7ff fe3c 	bl	8007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f9d7 	bl	8008310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	82bb      	strh	r3, [r7, #20]
 8007f66:	e00a      	b.n	8007f7e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007f68:	8abb      	ldrh	r3, [r7, #20]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4619      	mov	r1, r3
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f9cc 	bl	8008310 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007f78:	8abb      	ldrh	r3, [r7, #20]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	82bb      	strh	r3, [r7, #20]
 8007f7e:	8aba      	ldrh	r2, [r7, #20]
 8007f80:	893b      	ldrh	r3, [r7, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d3f0      	bcc.n	8007f68 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007f86:	f7ff fe13 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
 8007f8c:	2b84      	cmp	r3, #132	@ 0x84
 8007f8e:	d002      	beq.n	8007f96 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fa8f 	bl	80084b4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	75fb      	strb	r3, [r7, #23]
 8007fa2:	e001      	b.n	8007fa8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	715a      	strb	r2, [r3, #5]

    return status;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	e000      	b.n	8007fba <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007fb8:	2302      	movs	r3, #2
  }
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b088      	sub	sp, #32
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	460b      	mov	r3, r1
 8007fd0:	72fb      	strb	r3, [r7, #11]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	799b      	ldrb	r3, [r3, #6]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d13d      	bne.n	8008060 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	795b      	ldrb	r3, [r3, #5]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e038      	b.n	8008062 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 fa38 	bl	800846c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ffc:	f7ff fde8 	bl	8007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f983 	bl	8008310 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 f97f 	bl	8008310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008012:	2300      	movs	r3, #0
 8008014:	82fb      	strh	r3, [r7, #22]
 8008016:	e009      	b.n	800802c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f9ce 	bl	80083bc <SUBGHZSPI_Receive>
      pData++;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	3301      	adds	r3, #1
 8008024:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008026:	8afb      	ldrh	r3, [r7, #22]
 8008028:	3301      	adds	r3, #1
 800802a:	82fb      	strh	r3, [r7, #22]
 800802c:	8afa      	ldrh	r2, [r7, #22]
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	429a      	cmp	r2, r3
 8008032:	d3f1      	bcc.n	8008018 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008034:	f7ff fdbc 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fa3b 	bl	80084b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	77fb      	strb	r3, [r7, #31]
 800804a:	e001      	b.n	8008050 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	715a      	strb	r2, [r3, #5]

    return status;
 800805c:	7ffb      	ldrb	r3, [r7, #31]
 800805e:	e000      	b.n	8008062 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008060:	2302      	movs	r3, #2
  }
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b086      	sub	sp, #24
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	461a      	mov	r2, r3
 8008076:	460b      	mov	r3, r1
 8008078:	72fb      	strb	r3, [r7, #11]
 800807a:	4613      	mov	r3, r2
 800807c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	799b      	ldrb	r3, [r3, #6]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	d13e      	bne.n	8008106 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	795b      	ldrb	r3, [r3, #5]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008090:	2302      	movs	r3, #2
 8008092:	e039      	b.n	8008108 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f9e6 	bl	800846c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80080a0:	f7ff fd96 	bl	8007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80080a4:	210e      	movs	r1, #14
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f932 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	4619      	mov	r1, r3
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f92d 	bl	8008310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80080b6:	2300      	movs	r3, #0
 80080b8:	82bb      	strh	r3, [r7, #20]
 80080ba:	e00a      	b.n	80080d2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80080bc:	8abb      	ldrh	r3, [r7, #20]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4413      	add	r3, r2
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f922 	bl	8008310 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80080cc:	8abb      	ldrh	r3, [r7, #20]
 80080ce:	3301      	adds	r3, #1
 80080d0:	82bb      	strh	r3, [r7, #20]
 80080d2:	8aba      	ldrh	r2, [r7, #20]
 80080d4:	893b      	ldrh	r3, [r7, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d3f0      	bcc.n	80080bc <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80080da:	f7ff fd69 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 f9e8 	bl	80084b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	75fb      	strb	r3, [r7, #23]
 80080f0:	e001      	b.n	80080f6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	715a      	strb	r2, [r3, #5]

    return status;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	e000      	b.n	8008108 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
  }
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	461a      	mov	r2, r3
 800811c:	460b      	mov	r3, r1
 800811e:	72fb      	strb	r3, [r7, #11]
 8008120:	4613      	mov	r3, r2
 8008122:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	799b      	ldrb	r3, [r3, #6]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b01      	cmp	r3, #1
 8008130:	d141      	bne.n	80081b6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	795b      	ldrb	r3, [r3, #5]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800813a:	2302      	movs	r3, #2
 800813c:	e03c      	b.n	80081b8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f991 	bl	800846c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800814a:	f7ff fd41 	bl	8007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800814e:	211e      	movs	r1, #30
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f8dd 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	4619      	mov	r1, r3
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f8d8 	bl	8008310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008160:	2100      	movs	r1, #0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f8d4 	bl	8008310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008168:	2300      	movs	r3, #0
 800816a:	82fb      	strh	r3, [r7, #22]
 800816c:	e009      	b.n	8008182 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800816e:	69b9      	ldr	r1, [r7, #24]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f923 	bl	80083bc <SUBGHZSPI_Receive>
      pData++;
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	3301      	adds	r3, #1
 800817a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800817c:	8afb      	ldrh	r3, [r7, #22]
 800817e:	3301      	adds	r3, #1
 8008180:	82fb      	strh	r3, [r7, #22]
 8008182:	8afa      	ldrh	r2, [r7, #22]
 8008184:	893b      	ldrh	r3, [r7, #8]
 8008186:	429a      	cmp	r2, r3
 8008188:	d3f1      	bcc.n	800816e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800818a:	f7ff fd11 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f990 	bl	80084b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	77fb      	strb	r3, [r7, #31]
 80081a0:	e001      	b.n	80081a6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	715a      	strb	r2, [r3, #5]

    return status;
 80081b2:	7ffb      	ldrb	r3, [r7, #31]
 80081b4:	e000      	b.n	80081b8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80081b6:	2302      	movs	r3, #2
  }
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3720      	adds	r7, #32
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80081c8:	2300      	movs	r3, #0
 80081ca:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80081cc:	f107 020c 	add.w	r2, r7, #12
 80081d0:	2302      	movs	r3, #2
 80081d2:	2112      	movs	r1, #18
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fef4 	bl	8007fc2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80081da:	7b3b      	ldrb	r3, [r7, #12]
 80081dc:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80081de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	b21a      	sxth	r2, r3
 80081e6:	7b7b      	ldrb	r3, [r7, #13]
 80081e8:	b21b      	sxth	r3, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	b21b      	sxth	r3, r3
 80081ee:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80081f0:	f107 020c 	add.w	r2, r7, #12
 80081f4:	2302      	movs	r3, #2
 80081f6:	2102      	movs	r1, #2
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fe83 	bl	8007f04 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80081fe:	89fb      	ldrh	r3, [r7, #14]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f011 fea9 	bl	8019f60 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800820e:	89fb      	ldrh	r3, [r7, #14]
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <HAL_SUBGHZ_IRQHandler+0x60>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f011 feae 	bl	8019f7c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008220:	89fb      	ldrh	r3, [r7, #14]
 8008222:	089b      	lsrs	r3, r3, #2
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_SUBGHZ_IRQHandler+0x72>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f011 fefd 	bl	801a02c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008232:	89fb      	ldrh	r3, [r7, #14]
 8008234:	08db      	lsrs	r3, r3, #3
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f011 ff02 	bl	801a048 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008244:	89fb      	ldrh	r3, [r7, #14]
 8008246:	091b      	lsrs	r3, r3, #4
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f011 ff07 	bl	801a064 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <HAL_SUBGHZ_IRQHandler+0xa8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f011 fed4 	bl	801a010 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008268:	89fb      	ldrh	r3, [r7, #14]
 800826a:	099b      	lsrs	r3, r3, #6
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <HAL_SUBGHZ_IRQHandler+0xba>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f011 fe8f 	bl	8019f98 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800827a:	89fb      	ldrh	r3, [r7, #14]
 800827c:	09db      	lsrs	r3, r3, #7
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <HAL_SUBGHZ_IRQHandler+0xe4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008286:	89fb      	ldrh	r3, [r7, #14]
 8008288:	0a1b      	lsrs	r3, r3, #8
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008292:	2101      	movs	r1, #1
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f011 fe8d 	bl	8019fb4 <HAL_SUBGHZ_CADStatusCallback>
 800829a:	e003      	b.n	80082a4 <HAL_SUBGHZ_IRQHandler+0xe4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f011 fe88 	bl	8019fb4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80082a4:	89fb      	ldrh	r3, [r7, #14]
 80082a6:	0a5b      	lsrs	r3, r3, #9
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_SUBGHZ_IRQHandler+0xf6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f011 fe9d 	bl	8019ff0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80082b6:	89fb      	ldrh	r3, [r7, #14]
 80082b8:	0b9b      	lsrs	r3, r3, #14
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_SUBGHZ_IRQHandler+0x108>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f011 fedc 	bl	801a080 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80082c8:	bf00      	nop
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80082d8:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <SUBGHZSPI_Init+0x3c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a0b      	ldr	r2, [pc, #44]	@ (800830c <SUBGHZSPI_Init+0x3c>)
 80082de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082e2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80082e4:	4a09      	ldr	r2, [pc, #36]	@ (800830c <SUBGHZSPI_Init+0x3c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80082ec:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80082ee:	4b07      	ldr	r3, [pc, #28]	@ (800830c <SUBGHZSPI_Init+0x3c>)
 80082f0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80082f4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80082f6:	4b05      	ldr	r3, [pc, #20]	@ (800830c <SUBGHZSPI_Init+0x3c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a04      	ldr	r2, [pc, #16]	@ (800830c <SUBGHZSPI_Init+0x3c>)
 80082fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008300:	6013      	str	r3, [r2, #0]
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	bc80      	pop	{r7}
 800830a:	4770      	bx	lr
 800830c:	58010000 	.word	0x58010000

08008310 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008320:	4b23      	ldr	r3, [pc, #140]	@ (80083b0 <SUBGHZSPI_Transmit+0xa0>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4613      	mov	r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	1a9b      	subs	r3, r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	0cdb      	lsrs	r3, r3, #19
 800832e:	2264      	movs	r2, #100	@ 0x64
 8008330:	fb02 f303 	mul.w	r3, r2, r3
 8008334:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	609a      	str	r2, [r3, #8]
      break;
 8008346:	e008      	b.n	800835a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3b01      	subs	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800834e:	4b19      	ldr	r3, [pc, #100]	@ (80083b4 <SUBGHZSPI_Transmit+0xa4>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b02      	cmp	r3, #2
 8008358:	d1ed      	bne.n	8008336 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800835a:	4b17      	ldr	r3, [pc, #92]	@ (80083b8 <SUBGHZSPI_Transmit+0xa8>)
 800835c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008364:	4b12      	ldr	r3, [pc, #72]	@ (80083b0 <SUBGHZSPI_Transmit+0xa0>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	0cdb      	lsrs	r3, r3, #19
 8008372:	2264      	movs	r2, #100	@ 0x64
 8008374:	fb02 f303 	mul.w	r3, r2, r3
 8008378:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d105      	bne.n	800838c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	609a      	str	r2, [r3, #8]
      break;
 800838a:	e008      	b.n	800839e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b01      	subs	r3, #1
 8008390:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008392:	4b08      	ldr	r3, [pc, #32]	@ (80083b4 <SUBGHZSPI_Transmit+0xa4>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b01      	cmp	r3, #1
 800839c:	d1ed      	bne.n	800837a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800839e:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <SUBGHZSPI_Transmit+0xa4>)
 80083a0:	68db      	ldr	r3, [r3, #12]

  return status;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000070 	.word	0x20000070
 80083b4:	58010000 	.word	0x58010000
 80083b8:	5801000c 	.word	0x5801000c

080083bc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80083ca:	4b25      	ldr	r3, [pc, #148]	@ (8008460 <SUBGHZSPI_Receive+0xa4>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	0cdb      	lsrs	r3, r3, #19
 80083d8:	2264      	movs	r2, #100	@ 0x64
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d105      	bne.n	80083f2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	609a      	str	r2, [r3, #8]
      break;
 80083f0:	e008      	b.n	8008404 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80083f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008464 <SUBGHZSPI_Receive+0xa8>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b02      	cmp	r3, #2
 8008402:	d1ed      	bne.n	80083e0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008404:	4b18      	ldr	r3, [pc, #96]	@ (8008468 <SUBGHZSPI_Receive+0xac>)
 8008406:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	22ff      	movs	r2, #255	@ 0xff
 800840c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800840e:	4b14      	ldr	r3, [pc, #80]	@ (8008460 <SUBGHZSPI_Receive+0xa4>)
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4613      	mov	r3, r2
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	0cdb      	lsrs	r3, r3, #19
 800841c:	2264      	movs	r2, #100	@ 0x64
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d105      	bne.n	8008436 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	609a      	str	r2, [r3, #8]
      break;
 8008434:	e008      	b.n	8008448 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3b01      	subs	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800843c:	4b09      	ldr	r3, [pc, #36]	@ (8008464 <SUBGHZSPI_Receive+0xa8>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b01      	cmp	r3, #1
 8008446:	d1ed      	bne.n	8008424 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008448:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <SUBGHZSPI_Receive+0xa8>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	b2da      	uxtb	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	701a      	strb	r2, [r3, #0]

  return status;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
}
 8008454:	4618      	mov	r0, r3
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000070 	.word	0x20000070
 8008464:	58010000 	.word	0x58010000
 8008468:	5801000c 	.word	0x5801000c

0800846c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	791b      	ldrb	r3, [r3, #4]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d111      	bne.n	80084a0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800847c:	4b0c      	ldr	r3, [pc, #48]	@ (80084b0 <SUBGHZ_CheckDeviceReady+0x44>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4613      	mov	r3, r2
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	4413      	add	r3, r2
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800848c:	f7ff fba0 	bl	8007bd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3b01      	subs	r3, #1
 8008494:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1f9      	bne.n	8008490 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800849c:	f7ff fb88 	bl	8007bb0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f807 	bl	80084b4 <SUBGHZ_WaitOnBusy>
 80084a6:	4603      	mov	r3, r0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000070 	.word	0x20000070

080084b4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80084c0:	4b12      	ldr	r3, [pc, #72]	@ (800850c <SUBGHZ_WaitOnBusy+0x58>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4613      	mov	r3, r2
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	4413      	add	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	0d1b      	lsrs	r3, r3, #20
 80084ce:	2264      	movs	r2, #100	@ 0x64
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80084d6:	f7ff fba9 	bl	8007c2c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80084da:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	609a      	str	r2, [r3, #8]
      break;
 80084ec:	e009      	b.n	8008502 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80084f4:	f7ff fb88 	bl	8007c08 <LL_PWR_IsActiveFlag_RFBUSYS>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4013      	ands	r3, r2
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d0e9      	beq.n	80084d6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000070 	.word	0x20000070

08008510 <LL_RCC_GetUSARTClockSource>:
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800851c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	401a      	ands	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	041b      	lsls	r3, r3, #16
 8008528:	4313      	orrs	r3, r2
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <LL_RCC_GetLPUARTClockSource>:
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800853c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008540:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4013      	ands	r3, r2
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr

08008552 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e042      	b.n	80085ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f9 fd4e 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2224      	movs	r2, #36	@ 0x24
 8008580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fc3b 	bl	8008e10 <UART_SetConfig>
 800859a:	4603      	mov	r3, r0
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e022      	b.n	80085ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fea3 	bl	80092f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0201 	orr.w	r2, r2, #1
 80085e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 ff29 	bl	800943a <UART_CheckIdleState>
 80085e8:	4603      	mov	r3, r0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
	...

080085f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	@ 0x28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008608:	2b20      	cmp	r3, #32
 800860a:	d137      	bne.n	800867c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <HAL_UART_Receive_IT+0x24>
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e030      	b.n	800867e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a18      	ldr	r2, [pc, #96]	@ (8008688 <HAL_UART_Receive_IT+0x94>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d01f      	beq.n	800866c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d018      	beq.n	800866c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	613b      	str	r3, [r7, #16]
   return(result);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800864e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	623b      	str	r3, [r7, #32]
 800865a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	69f9      	ldr	r1, [r7, #28]
 800865e:	6a3a      	ldr	r2, [r7, #32]
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	61bb      	str	r3, [r7, #24]
   return(result);
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e6      	bne.n	800863a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800866c:	88fb      	ldrh	r3, [r7, #6]
 800866e:	461a      	mov	r2, r3
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fff8 	bl	8009668 <UART_Start_Receive_IT>
 8008678:	4603      	mov	r3, r0
 800867a:	e000      	b.n	800867e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800867c:	2302      	movs	r3, #2
  }
}
 800867e:	4618      	mov	r0, r3
 8008680:	3728      	adds	r7, #40	@ 0x28
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40008000 	.word	0x40008000

0800868c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	@ 0x28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d167      	bne.n	8008774 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <HAL_UART_Transmit_DMA+0x24>
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e060      	b.n	8008776 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	88fa      	ldrh	r2, [r7, #6]
 80086c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2221      	movs	r2, #33	@ 0x21
 80086d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d028      	beq.n	8008734 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086e6:	4a26      	ldr	r2, [pc, #152]	@ (8008780 <HAL_UART_Transmit_DMA+0xf4>)
 80086e8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ee:	4a25      	ldr	r2, [pc, #148]	@ (8008784 <HAL_UART_Transmit_DMA+0xf8>)
 80086f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086f6:	4a24      	ldr	r2, [pc, #144]	@ (8008788 <HAL_UART_Transmit_DMA+0xfc>)
 80086f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086fe:	2200      	movs	r2, #0
 8008700:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800870a:	4619      	mov	r1, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3328      	adds	r3, #40	@ 0x28
 8008712:	461a      	mov	r2, r3
 8008714:	88fb      	ldrh	r3, [r7, #6]
 8008716:	f7fb fd21 	bl	800415c <HAL_DMA_Start_IT>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d009      	beq.n	8008734 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2210      	movs	r2, #16
 8008724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e020      	b.n	8008776 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2240      	movs	r2, #64	@ 0x40
 800873a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	613b      	str	r3, [r7, #16]
   return(result);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008752:	627b      	str	r3, [r7, #36]	@ 0x24
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3308      	adds	r3, #8
 800875a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800875c:	623a      	str	r2, [r7, #32]
 800875e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	69f9      	ldr	r1, [r7, #28]
 8008762:	6a3a      	ldr	r2, [r7, #32]
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	61bb      	str	r3, [r7, #24]
   return(result);
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e5      	bne.n	800873c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	e000      	b.n	8008776 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008774:	2302      	movs	r3, #2
  }
}
 8008776:	4618      	mov	r0, r3
 8008778:	3728      	adds	r7, #40	@ 0x28
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	080099f3 	.word	0x080099f3
 8008784:	08009a8d 	.word	0x08009a8d
 8008788:	08009aa9 	.word	0x08009aa9

0800878c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b0ba      	sub	sp, #232	@ 0xe8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80087b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80087ba:	4013      	ands	r3, r2
 80087bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80087c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d11b      	bne.n	8008800 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d015      	beq.n	8008800 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d105      	bne.n	80087ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d009      	beq.n	8008800 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 82e3 	beq.w	8008dbc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
      }
      return;
 80087fe:	e2dd      	b.n	8008dbc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8123 	beq.w	8008a50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800880a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800880e:	4b8d      	ldr	r3, [pc, #564]	@ (8008a44 <HAL_UART_IRQHandler+0x2b8>)
 8008810:	4013      	ands	r3, r2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800881a:	4b8b      	ldr	r3, [pc, #556]	@ (8008a48 <HAL_UART_IRQHandler+0x2bc>)
 800881c:	4013      	ands	r3, r2
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8116 	beq.w	8008a50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d011      	beq.n	8008854 <HAL_UART_IRQHandler+0xc8>
 8008830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2201      	movs	r2, #1
 8008842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884a:	f043 0201 	orr.w	r2, r3, #1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d011      	beq.n	8008884 <HAL_UART_IRQHandler+0xf8>
 8008860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2202      	movs	r2, #2
 8008872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887a:	f043 0204 	orr.w	r2, r3, #4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b00      	cmp	r3, #0
 800888e:	d011      	beq.n	80088b4 <HAL_UART_IRQHandler+0x128>
 8008890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2204      	movs	r2, #4
 80088a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088aa:	f043 0202 	orr.w	r2, r3, #2
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d017      	beq.n	80088f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d105      	bne.n	80088d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80088d0:	4b5c      	ldr	r3, [pc, #368]	@ (8008a44 <HAL_UART_IRQHandler+0x2b8>)
 80088d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2208      	movs	r2, #8
 80088de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e6:	f043 0208 	orr.w	r2, r3, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d012      	beq.n	8008922 <HAL_UART_IRQHandler+0x196>
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00c      	beq.n	8008922 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008918:	f043 0220 	orr.w	r2, r3, #32
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8249 	beq.w	8008dc0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d013      	beq.n	8008962 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800894a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d007      	beq.n	8008962 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008976:	2b40      	cmp	r3, #64	@ 0x40
 8008978:	d005      	beq.n	8008986 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800897a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800897e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008982:	2b00      	cmp	r3, #0
 8008984:	d054      	beq.n	8008a30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 ffce 	bl	8009928 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008996:	2b40      	cmp	r3, #64	@ 0x40
 8008998:	d146      	bne.n	8008a28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80089b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1d9      	bne.n	800899a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d017      	beq.n	8008a20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f6:	4a15      	ldr	r2, [pc, #84]	@ (8008a4c <HAL_UART_IRQHandler+0x2c0>)
 80089f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fb fc87 	bl	8004314 <HAL_DMA_Abort_IT>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d019      	beq.n	8008a40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1e:	e00f      	b.n	8008a40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f9e0 	bl	8008de6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a26:	e00b      	b.n	8008a40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f9dc 	bl	8008de6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2e:	e007      	b.n	8008a40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f9d8 	bl	8008de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008a3e:	e1bf      	b.n	8008dc0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a40:	bf00      	nop
    return;
 8008a42:	e1bd      	b.n	8008dc0 <HAL_UART_IRQHandler+0x634>
 8008a44:	10000001 	.word	0x10000001
 8008a48:	04000120 	.word	0x04000120
 8008a4c:	08009b29 	.word	0x08009b29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	f040 8153 	bne.w	8008d00 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a5e:	f003 0310 	and.w	r3, r3, #16
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 814c 	beq.w	8008d00 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a6c:	f003 0310 	and.w	r3, r3, #16
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 8145 	beq.w	8008d00 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2210      	movs	r2, #16
 8008a7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a88:	2b40      	cmp	r3, #64	@ 0x40
 8008a8a:	f040 80bb 	bne.w	8008c04 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 818f 	beq.w	8008dc4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008aac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	f080 8187 	bcs.w	8008dc4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008abc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 8087 	bne.w	8008be2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1da      	bne.n	8008ad4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3308      	adds	r3, #8
 8008b24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e1      	bne.n	8008b1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3308      	adds	r3, #8
 8008b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e3      	bne.n	8008b5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba8:	e853 3f00 	ldrex	r3, [r3]
 8008bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bb0:	f023 0310 	bic.w	r3, r3, #16
 8008bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e4      	bne.n	8008ba0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fb fb3b 	bl	8004258 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f8fb 	bl	8008df8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c02:	e0df      	b.n	8008dc4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 80d1 	beq.w	8008dc8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 80cc 	beq.w	8008dc8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e4      	bne.n	8008c30 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	623b      	str	r3, [r7, #32]
   return(result);
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e1      	bne.n	8008c66 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0310 	bic.w	r3, r3, #16
 8008cca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	69b9      	ldr	r1, [r7, #24]
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e4      	bne.n	8008cb6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f87d 	bl	8008df8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cfe:	e063      	b.n	8008dc8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00e      	beq.n	8008d2a <HAL_UART_IRQHandler+0x59e>
 8008d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d008      	beq.n	8008d2a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fc5e 	bl	800a5e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d28:	e051      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d014      	beq.n	8008d60 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d03a      	beq.n	8008dcc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
    }
    return;
 8008d5e:	e035      	b.n	8008dcc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d009      	beq.n	8008d80 <HAL_UART_IRQHandler+0x5f4>
 8008d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 feeb 	bl	8009b54 <UART_EndTransmit_IT>
    return;
 8008d7e:	e026      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <HAL_UART_IRQHandler+0x614>
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 fc35 	bl	800a608 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d9e:	e016      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d010      	beq.n	8008dce <HAL_UART_IRQHandler+0x642>
 8008dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da0c      	bge.n	8008dce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 fc1e 	bl	800a5f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dba:	e008      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
      return;
 8008dbc:	bf00      	nop
 8008dbe:	e006      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
    return;
 8008dc0:	bf00      	nop
 8008dc2:	e004      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
      return;
 8008dc4:	bf00      	nop
 8008dc6:	e002      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
      return;
 8008dc8:	bf00      	nop
 8008dca:	e000      	b.n	8008dce <HAL_UART_IRQHandler+0x642>
    return;
 8008dcc:	bf00      	nop
  }
}
 8008dce:	37e8      	adds	r7, #232	@ 0xe8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bc80      	pop	{r7}
 8008de4:	4770      	bx	lr

08008de6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bc80      	pop	{r7}
 8008df6:	4770      	bx	lr

08008df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr
	...

08008e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e14:	b08c      	sub	sp, #48	@ 0x30
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4b94      	ldr	r3, [pc, #592]	@ (8009090 <UART_SetConfig+0x280>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a89      	ldr	r2, [pc, #548]	@ (8009094 <UART_SetConfig+0x284>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008e86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e90:	430b      	orrs	r3, r1
 8008e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9a:	f023 010f 	bic.w	r1, r3, #15
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a7a      	ldr	r2, [pc, #488]	@ (8009098 <UART_SetConfig+0x288>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d127      	bne.n	8008f04 <UART_SetConfig+0xf4>
 8008eb4:	2003      	movs	r0, #3
 8008eb6:	f7ff fb2b 	bl	8008510 <LL_RCC_GetUSARTClockSource>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d81b      	bhi.n	8008efc <UART_SetConfig+0xec>
 8008ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <UART_SetConfig+0xbc>)
 8008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eca:	bf00      	nop
 8008ecc:	08008edd 	.word	0x08008edd
 8008ed0:	08008eed 	.word	0x08008eed
 8008ed4:	08008ee5 	.word	0x08008ee5
 8008ed8:	08008ef5 	.word	0x08008ef5
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee2:	e080      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eea:	e07c      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008eec:	2304      	movs	r3, #4
 8008eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef2:	e078      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efa:	e074      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008efc:	2310      	movs	r3, #16
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f02:	e070      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a64      	ldr	r2, [pc, #400]	@ (800909c <UART_SetConfig+0x28c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d138      	bne.n	8008f80 <UART_SetConfig+0x170>
 8008f0e:	200c      	movs	r0, #12
 8008f10:	f7ff fafe 	bl	8008510 <LL_RCC_GetUSARTClockSource>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008f1a:	2b0c      	cmp	r3, #12
 8008f1c:	d82c      	bhi.n	8008f78 <UART_SetConfig+0x168>
 8008f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <UART_SetConfig+0x114>)
 8008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f24:	08008f59 	.word	0x08008f59
 8008f28:	08008f79 	.word	0x08008f79
 8008f2c:	08008f79 	.word	0x08008f79
 8008f30:	08008f79 	.word	0x08008f79
 8008f34:	08008f69 	.word	0x08008f69
 8008f38:	08008f79 	.word	0x08008f79
 8008f3c:	08008f79 	.word	0x08008f79
 8008f40:	08008f79 	.word	0x08008f79
 8008f44:	08008f61 	.word	0x08008f61
 8008f48:	08008f79 	.word	0x08008f79
 8008f4c:	08008f79 	.word	0x08008f79
 8008f50:	08008f79 	.word	0x08008f79
 8008f54:	08008f71 	.word	0x08008f71
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5e:	e042      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008f60:	2302      	movs	r3, #2
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e03e      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6e:	e03a      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008f70:	2308      	movs	r3, #8
 8008f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f76:	e036      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f7e:	e032      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a43      	ldr	r2, [pc, #268]	@ (8009094 <UART_SetConfig+0x284>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d12a      	bne.n	8008fe0 <UART_SetConfig+0x1d0>
 8008f8a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008f8e:	f7ff fad1 	bl	8008534 <LL_RCC_GetLPUARTClockSource>
 8008f92:	4603      	mov	r3, r0
 8008f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f98:	d01a      	beq.n	8008fd0 <UART_SetConfig+0x1c0>
 8008f9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f9e:	d81b      	bhi.n	8008fd8 <UART_SetConfig+0x1c8>
 8008fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa4:	d00c      	beq.n	8008fc0 <UART_SetConfig+0x1b0>
 8008fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008faa:	d815      	bhi.n	8008fd8 <UART_SetConfig+0x1c8>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <UART_SetConfig+0x1a8>
 8008fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fb4:	d008      	beq.n	8008fc8 <UART_SetConfig+0x1b8>
 8008fb6:	e00f      	b.n	8008fd8 <UART_SetConfig+0x1c8>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fbe:	e012      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc6:	e00e      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008fc8:	2304      	movs	r3, #4
 8008fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fce:	e00a      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd6:	e006      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008fd8:	2310      	movs	r3, #16
 8008fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fde:	e002      	b.n	8008fe6 <UART_SetConfig+0x1d6>
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a2a      	ldr	r2, [pc, #168]	@ (8009094 <UART_SetConfig+0x284>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	f040 80a4 	bne.w	800913a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d823      	bhi.n	8009042 <UART_SetConfig+0x232>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <UART_SetConfig+0x1f0>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009025 	.word	0x08009025
 8009004:	08009043 	.word	0x08009043
 8009008:	0800902d 	.word	0x0800902d
 800900c:	08009043 	.word	0x08009043
 8009010:	08009033 	.word	0x08009033
 8009014:	08009043 	.word	0x08009043
 8009018:	08009043 	.word	0x08009043
 800901c:	08009043 	.word	0x08009043
 8009020:	0800903b 	.word	0x0800903b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009024:	f7fd fde0 	bl	8006be8 <HAL_RCC_GetPCLK1Freq>
 8009028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800902a:	e010      	b.n	800904e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800902c:	4b1c      	ldr	r3, [pc, #112]	@ (80090a0 <UART_SetConfig+0x290>)
 800902e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009030:	e00d      	b.n	800904e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009032:	f7fd fd25 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8009036:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009038:	e009      	b.n	800904e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800903a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009040:	e005      	b.n	800904e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800904c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8137 	beq.w	80092c4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905a:	4a12      	ldr	r2, [pc, #72]	@ (80090a4 <UART_SetConfig+0x294>)
 800905c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009060:	461a      	mov	r2, r3
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	fbb3 f3f2 	udiv	r3, r3, r2
 8009068:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	4613      	mov	r3, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	4413      	add	r3, r2
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	429a      	cmp	r2, r3
 8009078:	d305      	bcc.n	8009086 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	429a      	cmp	r2, r3
 8009084:	d910      	bls.n	80090a8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800908c:	e11a      	b.n	80092c4 <UART_SetConfig+0x4b4>
 800908e:	bf00      	nop
 8009090:	cfff69f3 	.word	0xcfff69f3
 8009094:	40008000 	.word	0x40008000
 8009098:	40013800 	.word	0x40013800
 800909c:	40004400 	.word	0x40004400
 80090a0:	00f42400 	.word	0x00f42400
 80090a4:	08021b14 	.word	0x08021b14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	2200      	movs	r2, #0
 80090ac:	60bb      	str	r3, [r7, #8]
 80090ae:	60fa      	str	r2, [r7, #12]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b4:	4a8e      	ldr	r2, [pc, #568]	@ (80092f0 <UART_SetConfig+0x4e0>)
 80090b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	2200      	movs	r2, #0
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090ca:	f7f7 fe37 	bl	8000d3c <__aeabi_uldivmod>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4610      	mov	r0, r2
 80090d4:	4619      	mov	r1, r3
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	f04f 0300 	mov.w	r3, #0
 80090de:	020b      	lsls	r3, r1, #8
 80090e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090e4:	0202      	lsls	r2, r0, #8
 80090e6:	6979      	ldr	r1, [r7, #20]
 80090e8:	6849      	ldr	r1, [r1, #4]
 80090ea:	0849      	lsrs	r1, r1, #1
 80090ec:	2000      	movs	r0, #0
 80090ee:	460c      	mov	r4, r1
 80090f0:	4605      	mov	r5, r0
 80090f2:	eb12 0804 	adds.w	r8, r2, r4
 80090f6:	eb43 0905 	adc.w	r9, r3, r5
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	469a      	mov	sl, r3
 8009102:	4693      	mov	fp, r2
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 fe16 	bl	8000d3c <__aeabi_uldivmod>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4613      	mov	r3, r2
 8009116:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800911e:	d308      	bcc.n	8009132 <UART_SetConfig+0x322>
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009126:	d204      	bcs.n	8009132 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6a3a      	ldr	r2, [r7, #32]
 800912e:	60da      	str	r2, [r3, #12]
 8009130:	e0c8      	b.n	80092c4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009138:	e0c4      	b.n	80092c4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009142:	d167      	bne.n	8009214 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009144:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009148:	2b08      	cmp	r3, #8
 800914a:	d828      	bhi.n	800919e <UART_SetConfig+0x38e>
 800914c:	a201      	add	r2, pc, #4	@ (adr r2, 8009154 <UART_SetConfig+0x344>)
 800914e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009152:	bf00      	nop
 8009154:	08009179 	.word	0x08009179
 8009158:	08009181 	.word	0x08009181
 800915c:	08009189 	.word	0x08009189
 8009160:	0800919f 	.word	0x0800919f
 8009164:	0800918f 	.word	0x0800918f
 8009168:	0800919f 	.word	0x0800919f
 800916c:	0800919f 	.word	0x0800919f
 8009170:	0800919f 	.word	0x0800919f
 8009174:	08009197 	.word	0x08009197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009178:	f7fd fd36 	bl	8006be8 <HAL_RCC_GetPCLK1Freq>
 800917c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800917e:	e014      	b.n	80091aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009180:	f7fd fd44 	bl	8006c0c <HAL_RCC_GetPCLK2Freq>
 8009184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009186:	e010      	b.n	80091aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009188:	4b5a      	ldr	r3, [pc, #360]	@ (80092f4 <UART_SetConfig+0x4e4>)
 800918a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800918c:	e00d      	b.n	80091aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800918e:	f7fd fc77 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8009192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009194:	e009      	b.n	80091aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800919a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800919c:	e005      	b.n	80091aa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8089 	beq.w	80092c4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b6:	4a4e      	ldr	r2, [pc, #312]	@ (80092f0 <UART_SetConfig+0x4e0>)
 80091b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091bc:	461a      	mov	r2, r3
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091c4:	005a      	lsls	r2, r3, #1
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	441a      	add	r2, r3
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	2b0f      	cmp	r3, #15
 80091dc:	d916      	bls.n	800920c <UART_SetConfig+0x3fc>
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091e4:	d212      	bcs.n	800920c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f023 030f 	bic.w	r3, r3, #15
 80091ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	085b      	lsrs	r3, r3, #1
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	8bfb      	ldrh	r3, [r7, #30]
 80091fe:	4313      	orrs	r3, r2
 8009200:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	8bfa      	ldrh	r2, [r7, #30]
 8009208:	60da      	str	r2, [r3, #12]
 800920a:	e05b      	b.n	80092c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009212:	e057      	b.n	80092c4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009214:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009218:	2b08      	cmp	r3, #8
 800921a:	d828      	bhi.n	800926e <UART_SetConfig+0x45e>
 800921c:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <UART_SetConfig+0x414>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009249 	.word	0x08009249
 8009228:	08009251 	.word	0x08009251
 800922c:	08009259 	.word	0x08009259
 8009230:	0800926f 	.word	0x0800926f
 8009234:	0800925f 	.word	0x0800925f
 8009238:	0800926f 	.word	0x0800926f
 800923c:	0800926f 	.word	0x0800926f
 8009240:	0800926f 	.word	0x0800926f
 8009244:	08009267 	.word	0x08009267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009248:	f7fd fcce 	bl	8006be8 <HAL_RCC_GetPCLK1Freq>
 800924c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800924e:	e014      	b.n	800927a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009250:	f7fd fcdc 	bl	8006c0c <HAL_RCC_GetPCLK2Freq>
 8009254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009256:	e010      	b.n	800927a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009258:	4b26      	ldr	r3, [pc, #152]	@ (80092f4 <UART_SetConfig+0x4e4>)
 800925a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800925c:	e00d      	b.n	800927a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800925e:	f7fd fc0f 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8009262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009264:	e009      	b.n	800927a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800926a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800926c:	e005      	b.n	800927a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009278:	bf00      	nop
    }

    if (pclk != 0U)
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	d021      	beq.n	80092c4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	4a1a      	ldr	r2, [pc, #104]	@ (80092f0 <UART_SetConfig+0x4e0>)
 8009286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928a:	461a      	mov	r2, r3
 800928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	441a      	add	r2, r3
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	2b0f      	cmp	r3, #15
 80092a8:	d909      	bls.n	80092be <UART_SetConfig+0x4ae>
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b0:	d205      	bcs.n	80092be <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60da      	str	r2, [r3, #12]
 80092bc:	e002      	b.n	80092c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2200      	movs	r2, #0
 80092d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80092e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3730      	adds	r7, #48	@ 0x30
 80092e8:	46bd      	mov	sp, r7
 80092ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ee:	bf00      	nop
 80092f0:	08021b14 	.word	0x08021b14
 80092f4:	00f42400 	.word	0x00f42400

080092f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ae:	f003 0320 	and.w	r3, r3, #32
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01a      	beq.n	800940e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093f6:	d10a      	bne.n	800940e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	605a      	str	r2, [r3, #4]
  }
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	bc80      	pop	{r7}
 8009438:	4770      	bx	lr

0800943a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af02      	add	r7, sp, #8
 8009440:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800944a:	f7f8 fa0d 	bl	8001868 <HAL_GetTick>
 800944e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b08      	cmp	r3, #8
 800945c:	d10e      	bne.n	800947c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800945e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f832 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e028      	b.n	80094ce <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d10e      	bne.n	80094a8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800948a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f81c 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e012      	b.n	80094ce <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2220      	movs	r2, #32
 80094ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b09c      	sub	sp, #112	@ 0x70
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	603b      	str	r3, [r7, #0]
 80094e2:	4613      	mov	r3, r2
 80094e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e6:	e0a9      	b.n	800963c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ee:	f000 80a5 	beq.w	800963c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f2:	f7f8 f9b9 	bl	8001868 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80094fe:	429a      	cmp	r2, r3
 8009500:	d302      	bcc.n	8009508 <UART_WaitOnFlagUntilTimeout+0x32>
 8009502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009504:	2b00      	cmp	r3, #0
 8009506:	d140      	bne.n	800958a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009518:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800951c:	667b      	str	r3, [r7, #100]	@ 0x64
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009526:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009528:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800952c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e6      	bne.n	8009508 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800954a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954c:	f023 0301 	bic.w	r3, r3, #1
 8009550:	663b      	str	r3, [r7, #96]	@ 0x60
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800955a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800955c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009560:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e5      	bne.n	800953a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e069      	b.n	800965e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	2b00      	cmp	r3, #0
 8009596:	d051      	beq.n	800963c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a6:	d149      	bne.n	800963c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80095c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80095de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e6      	bne.n	80095b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	613b      	str	r3, [r7, #16]
   return(result);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f023 0301 	bic.w	r3, r3, #1
 80095fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3308      	adds	r3, #8
 8009602:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009604:	623a      	str	r2, [r7, #32]
 8009606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69f9      	ldr	r1, [r7, #28]
 800960a:	6a3a      	ldr	r2, [r7, #32]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	61bb      	str	r3, [r7, #24]
   return(result);
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e5      	bne.n	80095e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2220      	movs	r2, #32
 8009624:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e010      	b.n	800965e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69da      	ldr	r2, [r3, #28]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	4013      	ands	r3, r2
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	429a      	cmp	r2, r3
 800964a:	bf0c      	ite	eq
 800964c:	2301      	moveq	r3, #1
 800964e:	2300      	movne	r3, #0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	429a      	cmp	r2, r3
 8009658:	f43f af46 	beq.w	80094e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3770      	adds	r7, #112	@ 0x70
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009668:	b480      	push	{r7}
 800966a:	b0a3      	sub	sp, #140	@ 0x8c
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	88fa      	ldrh	r2, [r7, #6]
 8009680:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	88fa      	ldrh	r2, [r7, #6]
 8009688:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800969a:	d10e      	bne.n	80096ba <UART_Start_Receive_IT+0x52>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <UART_Start_Receive_IT+0x48>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80096aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096ae:	e02d      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	22ff      	movs	r2, #255	@ 0xff
 80096b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096b8:	e028      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10d      	bne.n	80096de <UART_Start_Receive_IT+0x76>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <UART_Start_Receive_IT+0x6c>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	22ff      	movs	r2, #255	@ 0xff
 80096ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096d2:	e01b      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	227f      	movs	r2, #127	@ 0x7f
 80096d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096dc:	e016      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e6:	d10d      	bne.n	8009704 <UART_Start_Receive_IT+0x9c>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d104      	bne.n	80096fa <UART_Start_Receive_IT+0x92>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	227f      	movs	r2, #127	@ 0x7f
 80096f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096f8:	e008      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	223f      	movs	r2, #63	@ 0x3f
 80096fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009702:	e003      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2222      	movs	r2, #34	@ 0x22
 8009718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3308      	adds	r3, #8
 8009722:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800972c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009740:	673a      	str	r2, [r7, #112]	@ 0x70
 8009742:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009746:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800974e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e3      	bne.n	800971c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800975c:	d14f      	bne.n	80097fe <UART_Start_Receive_IT+0x196>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009764:	88fa      	ldrh	r2, [r7, #6]
 8009766:	429a      	cmp	r2, r3
 8009768:	d349      	bcc.n	80097fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009772:	d107      	bne.n	8009784 <UART_Start_Receive_IT+0x11c>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4a46      	ldr	r2, [pc, #280]	@ (8009898 <UART_Start_Receive_IT+0x230>)
 8009780:	675a      	str	r2, [r3, #116]	@ 0x74
 8009782:	e002      	b.n	800978a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4a45      	ldr	r2, [pc, #276]	@ (800989c <UART_Start_Receive_IT+0x234>)
 8009788:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01a      	beq.n	80097c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80097a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097b6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80097ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80097bc:	e841 2300 	strex	r3, r2, [r1]
 80097c0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80097c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e4      	bne.n	8009792 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3308      	adds	r3, #8
 80097e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80097e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80097ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80097ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80097f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e5      	bne.n	80097c8 <UART_Start_Receive_IT+0x160>
 80097fc:	e046      	b.n	800988c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009806:	d107      	bne.n	8009818 <UART_Start_Receive_IT+0x1b0>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d103      	bne.n	8009818 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a23      	ldr	r2, [pc, #140]	@ (80098a0 <UART_Start_Receive_IT+0x238>)
 8009814:	675a      	str	r2, [r3, #116]	@ 0x74
 8009816:	e002      	b.n	800981e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4a22      	ldr	r2, [pc, #136]	@ (80098a4 <UART_Start_Receive_IT+0x23c>)
 800981c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d019      	beq.n	800985a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800983a:	677b      	str	r3, [r7, #116]	@ 0x74
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	461a      	mov	r2, r3
 8009842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009844:	637b      	str	r3, [r7, #52]	@ 0x34
 8009846:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800984a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e6      	bne.n	8009826 <UART_Start_Receive_IT+0x1be>
 8009858:	e018      	b.n	800988c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	e853 3f00 	ldrex	r3, [r3]
 8009866:	613b      	str	r3, [r7, #16]
   return(result);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f043 0320 	orr.w	r3, r3, #32
 800986e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009878:	623b      	str	r3, [r7, #32]
 800987a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	69f9      	ldr	r1, [r7, #28]
 800987e:	6a3a      	ldr	r2, [r7, #32]
 8009880:	e841 2300 	strex	r3, r2, [r1]
 8009884:	61bb      	str	r3, [r7, #24]
   return(result);
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e6      	bne.n	800985a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	378c      	adds	r7, #140	@ 0x8c
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr
 8009898:	0800a27d 	.word	0x0800a27d
 800989c:	08009f1d 	.word	0x08009f1d
 80098a0:	08009d65 	.word	0x08009d65
 80098a4:	08009bad 	.word	0x08009bad

080098a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b08f      	sub	sp, #60	@ 0x3c
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e6      	bne.n	80098b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009902:	61ba      	str	r2, [r7, #24]
 8009904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6979      	ldr	r1, [r7, #20]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	613b      	str	r3, [r7, #16]
   return(result);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e5      	bne.n	80098e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2220      	movs	r2, #32
 800991a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800991e:	bf00      	nop
 8009920:	373c      	adds	r7, #60	@ 0x3c
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr

08009928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009928:	b480      	push	{r7}
 800992a:	b095      	sub	sp, #84	@ 0x54
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009938:	e853 3f00 	ldrex	r3, [r3]
 800993c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800994e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009950:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009952:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009954:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e6      	bne.n	8009930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3308      	adds	r3, #8
 8009968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	61fb      	str	r3, [r7, #28]
   return(result);
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009978:	f023 0301 	bic.w	r3, r3, #1
 800997c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800998c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e3      	bne.n	8009962 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d118      	bne.n	80099d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f023 0310 	bic.w	r3, r3, #16
 80099b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6979      	ldr	r1, [r7, #20]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	613b      	str	r3, [r7, #16]
   return(result);
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80099e8:	bf00      	nop
 80099ea:	3754      	adds	r7, #84	@ 0x54
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bc80      	pop	{r7}
 80099f0:	4770      	bx	lr

080099f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b090      	sub	sp, #64	@ 0x40
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d137      	bne.n	8009a7e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	623b      	str	r3, [r7, #32]
   return(result);
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3308      	adds	r3, #8
 8009a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a36:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a3e:	e841 2300 	strex	r3, r2, [r1]
 8009a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1e5      	bne.n	8009a16 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	461a      	mov	r2, r3
 8009a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a68:	61fb      	str	r3, [r7, #28]
 8009a6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6c:	69b9      	ldr	r1, [r7, #24]
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	e841 2300 	strex	r3, r2, [r1]
 8009a74:	617b      	str	r3, [r7, #20]
   return(result);
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e6      	bne.n	8009a4a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a7c:	e002      	b.n	8009a84 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009a80:	f7f8 fc3c 	bl	80022fc <HAL_UART_TxCpltCallback>
}
 8009a84:	bf00      	nop
 8009a86:	3740      	adds	r7, #64	@ 0x40
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a98:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff f99a 	bl	8008dd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aa0:	bf00      	nop
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009abc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ad0:	2b80      	cmp	r3, #128	@ 0x80
 8009ad2:	d109      	bne.n	8009ae8 <UART_DMAError+0x40>
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	2b21      	cmp	r3, #33	@ 0x21
 8009ad8:	d106      	bne.n	8009ae8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009ae2:	6978      	ldr	r0, [r7, #20]
 8009ae4:	f7ff fee0 	bl	80098a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af2:	2b40      	cmp	r3, #64	@ 0x40
 8009af4:	d109      	bne.n	8009b0a <UART_DMAError+0x62>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b22      	cmp	r3, #34	@ 0x22
 8009afa:	d106      	bne.n	8009b0a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009b04:	6978      	ldr	r0, [r7, #20]
 8009b06:	f7ff ff0f 	bl	8009928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b10:	f043 0210 	orr.w	r2, r3, #16
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b1a:	6978      	ldr	r0, [r7, #20]
 8009b1c:	f7ff f963 	bl	8008de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b20:	bf00      	nop
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff f94d 	bl	8008de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b70:	61fb      	str	r3, [r7, #28]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7e:	6979      	ldr	r1, [r7, #20]
 8009b80:	69ba      	ldr	r2, [r7, #24]
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	613b      	str	r3, [r7, #16]
   return(result);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e6      	bne.n	8009b5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7f8 fbad 	bl	80022fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba2:	bf00      	nop
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b09c      	sub	sp, #112	@ 0x70
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009bba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bc4:	2b22      	cmp	r3, #34	@ 0x22
 8009bc6:	f040 80be 	bne.w	8009d46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009bd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009bd8:	b2d9      	uxtb	r1, r3
 8009bda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be4:	400a      	ands	r2, r1
 8009be6:	b2d2      	uxtb	r2, r2
 8009be8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f040 80a1 	bne.w	8009d56 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e6      	bne.n	8009c14 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c58:	f023 0301 	bic.w	r3, r3, #1
 8009c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3308      	adds	r3, #8
 8009c64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e5      	bne.n	8009c46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a33      	ldr	r2, [pc, #204]	@ (8009d60 <UART_RxISR_8BIT+0x1b4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d01f      	beq.n	8009cd8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d018      	beq.n	8009cd8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cae:	e853 3f00 	ldrex	r3, [r3]
 8009cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009cba:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e6      	bne.n	8009ca6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d12e      	bne.n	8009d3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0310 	bic.w	r3, r3, #16
 8009cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	69b9      	ldr	r1, [r7, #24]
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	617b      	str	r3, [r7, #20]
   return(result);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f003 0310 	and.w	r3, r3, #16
 8009d22:	2b10      	cmp	r3, #16
 8009d24:	d103      	bne.n	8009d2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff f85e 	bl	8008df8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d3c:	e00b      	b.n	8009d56 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7f8 faf2 	bl	8002328 <HAL_UART_RxCpltCallback>
}
 8009d44:	e007      	b.n	8009d56 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0208 	orr.w	r2, r2, #8
 8009d54:	619a      	str	r2, [r3, #24]
}
 8009d56:	bf00      	nop
 8009d58:	3770      	adds	r7, #112	@ 0x70
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40008000 	.word	0x40008000

08009d64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b09c      	sub	sp, #112	@ 0x70
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d7c:	2b22      	cmp	r3, #34	@ 0x22
 8009d7e:	f040 80be 	bne.w	8009efe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d90:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009d96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009da0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da6:	1c9a      	adds	r2, r3, #2
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	3b01      	subs	r3, #1
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 80a1 	bne.w	8009f0e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009df0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009df2:	e841 2300 	strex	r3, r2, [r1]
 8009df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1e6      	bne.n	8009dcc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3308      	adds	r3, #8
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	f023 0301 	bic.w	r3, r3, #1
 8009e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e5      	bne.n	8009dfe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a33      	ldr	r2, [pc, #204]	@ (8009f18 <UART_RxISR_16BIT+0x1b4>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d01f      	beq.n	8009e90 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d018      	beq.n	8009e90 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e7e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d12e      	bne.n	8009ef6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f023 0310 	bic.w	r3, r3, #16
 8009eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ebc:	61bb      	str	r3, [r7, #24]
 8009ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6979      	ldr	r1, [r7, #20]
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e6      	bne.n	8009e9e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	2b10      	cmp	r3, #16
 8009edc:	d103      	bne.n	8009ee6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2210      	movs	r2, #16
 8009ee4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7fe ff82 	bl	8008df8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ef4:	e00b      	b.n	8009f0e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7f8 fa16 	bl	8002328 <HAL_UART_RxCpltCallback>
}
 8009efc:	e007      	b.n	8009f0e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	699a      	ldr	r2, [r3, #24]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f042 0208 	orr.w	r2, r2, #8
 8009f0c:	619a      	str	r2, [r3, #24]
}
 8009f0e:	bf00      	nop
 8009f10:	3770      	adds	r7, #112	@ 0x70
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	40008000 	.word	0x40008000

08009f1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b0ac      	sub	sp, #176	@ 0xb0
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009f2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f52:	2b22      	cmp	r3, #34	@ 0x22
 8009f54:	f040 8182 	bne.w	800a25c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f5e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f62:	e125      	b.n	800a1b0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f6e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009f72:	b2d9      	uxtb	r1, r3
 8009f74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7e:	400a      	ands	r2, r1
 8009f80:	b2d2      	uxtb	r2, r2
 8009f82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fae:	f003 0307 	and.w	r3, r3, #7
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d053      	beq.n	800a05e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d011      	beq.n	8009fe6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00b      	beq.n	8009fe6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fdc:	f043 0201 	orr.w	r2, r3, #1
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d011      	beq.n	800a016 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2202      	movs	r2, #2
 800a004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a00c:	f043 0204 	orr.w	r2, r3, #4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a01a:	f003 0304 	and.w	r3, r3, #4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d011      	beq.n	800a046 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00b      	beq.n	800a046 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2204      	movs	r2, #4
 800a034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a03c:	f043 0202 	orr.w	r2, r3, #2
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7fe fec8 	bl	8008de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	f040 80a2 	bne.w	800a1b0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a07a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a07c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a08e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a090:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a094:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a09c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e4      	bne.n	800a06c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0ac:	e853 3f00 	ldrex	r3, [r3]
 800a0b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a0b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0b8:	f023 0301 	bic.w	r3, r3, #1
 800a0bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a0ca:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a0cc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a0d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a0d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e1      	bne.n	800a0a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2220      	movs	r2, #32
 800a0e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a5f      	ldr	r2, [pc, #380]	@ (800a274 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d021      	beq.n	800a140 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01a      	beq.n	800a140 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a11a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a11e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a12c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a12e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a132:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a13a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e4      	bne.n	800a10a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a144:	2b01      	cmp	r3, #1
 800a146:	d130      	bne.n	800a1aa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	f023 0310 	bic.w	r3, r3, #16
 800a162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a170:	643b      	str	r3, [r7, #64]	@ 0x40
 800a172:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a178:	e841 2300 	strex	r3, r2, [r1]
 800a17c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e4      	bne.n	800a14e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	f003 0310 	and.w	r3, r3, #16
 800a18e:	2b10      	cmp	r3, #16
 800a190:	d103      	bne.n	800a19a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2210      	movs	r2, #16
 800a198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7fe fe28 	bl	8008df8 <HAL_UARTEx_RxEventCallback>
 800a1a8:	e002      	b.n	800a1b0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7f8 f8bc 	bl	8002328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d006      	beq.n	800a1c6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a1b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f47f aecf 	bne.w	8009f64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d049      	beq.n	800a26c <UART_RxISR_8BIT_FIFOEN+0x350>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1de:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d242      	bcs.n	800a26c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3308      	adds	r3, #8
 800a206:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a20a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a20c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e3      	bne.n	800a1e6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a15      	ldr	r2, [pc, #84]	@ (800a278 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a222:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	60bb      	str	r3, [r7, #8]
   return(result);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f043 0320 	orr.w	r3, r3, #32
 800a238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a246:	61bb      	str	r3, [r7, #24]
 800a248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6979      	ldr	r1, [r7, #20]
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	613b      	str	r3, [r7, #16]
   return(result);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e4      	bne.n	800a224 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a25a:	e007      	b.n	800a26c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f042 0208 	orr.w	r2, r2, #8
 800a26a:	619a      	str	r2, [r3, #24]
}
 800a26c:	bf00      	nop
 800a26e:	37b0      	adds	r7, #176	@ 0xb0
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	40008000 	.word	0x40008000
 800a278:	08009bad 	.word	0x08009bad

0800a27c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b0ae      	sub	sp, #184	@ 0xb8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a28a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2b2:	2b22      	cmp	r3, #34	@ 0x22
 800a2b4:	f040 8186 	bne.w	800a5c4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2be:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2c2:	e129      	b.n	800a518 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a2da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a2de:	4013      	ands	r3, r2
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ec:	1c9a      	adds	r2, r3, #2
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a30e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	2b00      	cmp	r3, #0
 800a318:	d053      	beq.n	800a3c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a31a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d011      	beq.n	800a34a <UART_RxISR_16BIT_FIFOEN+0xce>
 800a326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00b      	beq.n	800a34a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2201      	movs	r2, #1
 800a338:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a340:	f043 0201 	orr.w	r2, r3, #1
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a34a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d011      	beq.n	800a37a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00b      	beq.n	800a37a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2202      	movs	r2, #2
 800a368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a370:	f043 0204 	orr.w	r2, r3, #4
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a37a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a37e:	f003 0304 	and.w	r3, r3, #4
 800a382:	2b00      	cmp	r3, #0
 800a384:	d011      	beq.n	800a3aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00b      	beq.n	800a3aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2204      	movs	r2, #4
 800a398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3a0:	f043 0202 	orr.w	r2, r3, #2
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d006      	beq.n	800a3c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7fe fd16 	bl	8008de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f040 80a4 	bne.w	800a518 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a3de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e2      	bne.n	800a3d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3308      	adds	r3, #8
 800a410:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a41a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a41c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a420:	f023 0301 	bic.w	r3, r3, #1
 800a424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3308      	adds	r3, #8
 800a42e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a432:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a434:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a438:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e1      	bne.n	800a40a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2220      	movs	r2, #32
 800a44a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a5f      	ldr	r2, [pc, #380]	@ (800a5dc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d021      	beq.n	800a4a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01a      	beq.n	800a4a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a47a:	e853 3f00 	ldrex	r3, [r3]
 800a47e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a482:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a486:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a494:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a496:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a49a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a49c:	e841 2300 	strex	r3, r2, [r1]
 800a4a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e4      	bne.n	800a472 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d130      	bne.n	800a512 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c6:	f023 0310 	bic.w	r3, r3, #16
 800a4ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4e0:	e841 2300 	strex	r3, r2, [r1]
 800a4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e4      	bne.n	800a4b6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f003 0310 	and.w	r3, r3, #16
 800a4f6:	2b10      	cmp	r3, #16
 800a4f8:	d103      	bne.n	800a502 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2210      	movs	r2, #16
 800a500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7fe fc74 	bl	8008df8 <HAL_UARTEx_RxEventCallback>
 800a510:	e002      	b.n	800a518 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7f7 ff08 	bl	8002328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a518:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a524:	f003 0320 	and.w	r3, r3, #32
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f47f aecb 	bne.w	800a2c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a534:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a538:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d049      	beq.n	800a5d4 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a546:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d242      	bcs.n	800a5d4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3308      	adds	r3, #8
 800a554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	623b      	str	r3, [r7, #32]
   return(result);
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3308      	adds	r3, #8
 800a56e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a572:	633a      	str	r2, [r7, #48]	@ 0x30
 800a574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e3      	bne.n	800a54e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a15      	ldr	r2, [pc, #84]	@ (800a5e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a58a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	e853 3f00 	ldrex	r3, [r3]
 800a598:	60fb      	str	r3, [r7, #12]
   return(result);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f043 0320 	orr.w	r3, r3, #32
 800a5a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a5ae:	61fb      	str	r3, [r7, #28]
 800a5b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b2:	69b9      	ldr	r1, [r7, #24]
 800a5b4:	69fa      	ldr	r2, [r7, #28]
 800a5b6:	e841 2300 	strex	r3, r2, [r1]
 800a5ba:	617b      	str	r3, [r7, #20]
   return(result);
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1e4      	bne.n	800a58c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5c2:	e007      	b.n	800a5d4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0208 	orr.w	r2, r2, #8
 800a5d2:	619a      	str	r2, [r3, #24]
}
 800a5d4:	bf00      	nop
 800a5d6:	37b8      	adds	r7, #184	@ 0xb8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	40008000 	.word	0x40008000
 800a5e0:	08009d65 	.word	0x08009d65

0800a5e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bc80      	pop	{r7}
 800a5f4:	4770      	bx	lr

0800a5f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	bc80      	pop	{r7}
 800a606:	4770      	bx	lr

0800a608 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr

0800a61a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b088      	sub	sp, #32
 800a61e:	af02      	add	r7, sp, #8
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	1d3b      	adds	r3, r7, #4
 800a624:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a636:	2302      	movs	r3, #2
 800a638:	e046      	b.n	800a6c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2224      	movs	r2, #36	@ 0x24
 800a646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0201 	bic.w	r2, r2, #1
 800a658:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d105      	bne.n	800a680 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a674:	1d3b      	adds	r3, r7, #4
 800a676:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 f911 	bl	800a8a2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f042 0201 	orr.w	r2, r2, #1
 800a68e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a690:	f7f7 f8ea 	bl	8001868 <HAL_GetTick>
 800a694:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a696:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7fe ff16 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	75fb      	strb	r3, [r7, #23]
 800a6b4:	e003      	b.n	800a6be <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b089      	sub	sp, #36	@ 0x24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d101      	bne.n	800a6e6 <HAL_UARTEx_EnableStopMode+0x16>
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e021      	b.n	800a72a <HAL_UARTEx_EnableStopMode+0x5a>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	e853 3f00 	ldrex	r3, [r3]
 800a6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f043 0302 	orr.w	r3, r3, #2
 800a702:	61fb      	str	r3, [r7, #28]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	461a      	mov	r2, r3
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	61bb      	str	r3, [r7, #24]
 800a70e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6979      	ldr	r1, [r7, #20]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	e841 2300 	strex	r3, r2, [r1]
 800a718:	613b      	str	r3, [r7, #16]
   return(result);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e6      	bne.n	800a6ee <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3724      	adds	r7, #36	@ 0x24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bc80      	pop	{r7}
 800a732:	4770      	bx	lr

0800a734 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a742:	2b01      	cmp	r3, #1
 800a744:	d101      	bne.n	800a74a <HAL_UARTEx_EnableFifoMode+0x16>
 800a746:	2302      	movs	r3, #2
 800a748:	e02b      	b.n	800a7a2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2224      	movs	r2, #36	@ 0x24
 800a756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0201 	bic.w	r2, r2, #1
 800a770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800a780:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f8ac 	bl	800a8e8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e02d      	b.n	800a81e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2224      	movs	r2, #36	@ 0x24
 800a7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0201 	bic.w	r2, r2, #1
 800a7e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f872 	bl	800a8e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e02d      	b.n	800a89a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2224      	movs	r2, #36	@ 0x24
 800a84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0201 	bic.w	r2, r2, #1
 800a864:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f834 	bl	800a8e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	1d3b      	adds	r3, r7, #4
 800a8ac:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f023 0210 	bic.w	r2, r3, #16
 800a8ba:	893b      	ldrh	r3, [r7, #8]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a8d0:	7abb      	ldrb	r3, [r7, #10]
 800a8d2:	061a      	lsls	r2, r3, #24
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	605a      	str	r2, [r3, #4]
}
 800a8dc:	bf00      	nop
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bc80      	pop	{r7}
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d108      	bne.n	800a90a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a908:	e031      	b.n	800a96e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a90a:	2308      	movs	r3, #8
 800a90c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a90e:	2308      	movs	r3, #8
 800a910:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	0e5b      	lsrs	r3, r3, #25
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 0307 	and.w	r3, r3, #7
 800a920:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	0f5b      	lsrs	r3, r3, #29
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f003 0307 	and.w	r3, r3, #7
 800a930:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a932:	7bbb      	ldrb	r3, [r7, #14]
 800a934:	7b3a      	ldrb	r2, [r7, #12]
 800a936:	4910      	ldr	r1, [pc, #64]	@ (800a978 <UARTEx_SetNbDataToProcess+0x90>)
 800a938:	5c8a      	ldrb	r2, [r1, r2]
 800a93a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a93e:	7b3a      	ldrb	r2, [r7, #12]
 800a940:	490e      	ldr	r1, [pc, #56]	@ (800a97c <UARTEx_SetNbDataToProcess+0x94>)
 800a942:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a944:	fb93 f3f2 	sdiv	r3, r3, r2
 800a948:	b29a      	uxth	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	7b7a      	ldrb	r2, [r7, #13]
 800a954:	4908      	ldr	r1, [pc, #32]	@ (800a978 <UARTEx_SetNbDataToProcess+0x90>)
 800a956:	5c8a      	ldrb	r2, [r1, r2]
 800a958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a95c:	7b7a      	ldrb	r2, [r7, #13]
 800a95e:	4907      	ldr	r1, [pc, #28]	@ (800a97c <UARTEx_SetNbDataToProcess+0x94>)
 800a960:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a962:	fb93 f3f2 	sdiv	r3, r3, r2
 800a966:	b29a      	uxth	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a96e:	bf00      	nop
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr
 800a978:	08021b2c 	.word	0x08021b2c
 800a97c:	08021b34 	.word	0x08021b34

0800a980 <LmHandlerInit>:
}
#endif

#if MY_TX
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800a98a:	4a0d      	ldr	r2, [pc, #52]	@ (800a9c0 <LmHandlerInit+0x40>)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6013      	str	r3, [r2, #0]

#if MY_TX_ABP
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800a990:	4b0c      	ldr	r3, [pc, #48]	@ (800a9c4 <LmHandlerInit+0x44>)
 800a992:	4a0d      	ldr	r2, [pc, #52]	@ (800a9c8 <LmHandlerInit+0x48>)
 800a994:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800a996:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c4 <LmHandlerInit+0x44>)
 800a998:	4a0c      	ldr	r2, [pc, #48]	@ (800a9cc <LmHandlerInit+0x4c>)
 800a99a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800a99c:	4b09      	ldr	r3, [pc, #36]	@ (800a9c4 <LmHandlerInit+0x44>)
 800a99e:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d0 <LmHandlerInit+0x50>)
 800a9a0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800a9a2:	4b08      	ldr	r3, [pc, #32]	@ (800a9c4 <LmHandlerInit+0x44>)
 800a9a4:	4a0b      	ldr	r2, [pc, #44]	@ (800a9d4 <LmHandlerInit+0x54>)
 800a9a6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800a9a8:	4b05      	ldr	r3, [pc, #20]	@ (800a9c0 <LmHandlerInit+0x40>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a9d8 <LmHandlerInit+0x58>)
 800a9b0:	6153      	str	r3, [r2, #20]
		LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
		LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
		LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
		LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
#endif
    return LORAMAC_HANDLER_SUCCESS;
 800a9b2:	2300      	movs	r3, #0

}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	200009f4 	.word	0x200009f4
 800a9c4:	200009f8 	.word	0x200009f8
 800a9c8:	0800b055 	.word	0x0800b055
 800a9cc:	0800b0c9 	.word	0x0800b0c9
 800a9d0:	0800b199 	.word	0x0800b199
 800a9d4:	0800b2e9 	.word	0x0800b2e9
 800a9d8:	20000a08 	.word	0x20000a08

0800a9dc <LmHandlerConfigure>:
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b092      	sub	sp, #72	@ 0x48
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
	MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800a9e4:	2218      	movs	r2, #24
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	4884      	ldr	r0, [pc, #528]	@ (800abfc <LmHandlerConfigure+0x220>)
 800a9ea:	f00c ff50 	bl	801788e <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800a9ee:	4b84      	ldr	r3, [pc, #528]	@ (800ac00 <LmHandlerConfigure+0x224>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800a9f4:	f7f7 fee6 	bl	80027c4 <LoraInfo_GetPtr>
 800a9f8:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800a9fa:	4b80      	ldr	r3, [pc, #512]	@ (800abfc <LmHandlerConfigure+0x220>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	2301      	movs	r3, #1
 800aa02:	4093      	lsls	r3, r2
 800aa04:	461a      	mov	r2, r3
 800aa06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d107      	bne.n	800aa20 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800aa10:	4b7c      	ldr	r3, [pc, #496]	@ (800ac04 <LmHandlerConfigure+0x228>)
 800aa12:	2201      	movs	r2, #1
 800aa14:	2100      	movs	r1, #0
 800aa16:	2000      	movs	r0, #0
 800aa18:	f00f fc9e 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800aa1c:	bf00      	nop
 800aa1e:	e7fd      	b.n	800aa1c <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800aa20:	4b76      	ldr	r3, [pc, #472]	@ (800abfc <LmHandlerConfigure+0x220>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	461a      	mov	r2, r3
 800aa26:	4978      	ldr	r1, [pc, #480]	@ (800ac08 <LmHandlerConfigure+0x22c>)
 800aa28:	4878      	ldr	r0, [pc, #480]	@ (800ac0c <LmHandlerConfigure+0x230>)
 800aa2a:	f004 f83f 	bl	800eaac <LoRaMacInitialization>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	e0dc      	b.n	800abf4 <LmHandlerConfigure+0x218>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800aa3a:	2327      	movs	r3, #39	@ 0x27
 800aa3c:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800aa3e:	f107 0318 	add.w	r3, r7, #24
 800aa42:	4618      	mov	r0, r3
 800aa44:	f004 fd5e 	bl	800f504 <LoRaMacMibSetRequestConfirm>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d103      	bne.n	800aa56 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800aa4e:	4b70      	ldr	r3, [pc, #448]	@ (800ac10 <LmHandlerConfigure+0x234>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e02a      	b.n	800aaac <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800aa56:	2328      	movs	r3, #40	@ 0x28
 800aa58:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800aa5a:	4b6e      	ldr	r3, [pc, #440]	@ (800ac14 <LmHandlerConfigure+0x238>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00c      	beq.n	800aa7e <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800aa64:	f107 0318 	add.w	r3, r7, #24
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f004 fb73 	bl	800f154 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800aa6e:	4b69      	ldr	r3, [pc, #420]	@ (800ac14 <LmHandlerConfigure+0x238>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	69fa      	ldr	r2, [r7, #28]
 800aa76:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800aa7e:	2327      	movs	r3, #39	@ 0x27
 800aa80:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800aa82:	f107 0318 	add.w	r3, r7, #24
 800aa86:	4618      	mov	r0, r3
 800aa88:	f004 fd3c 	bl	800f504 <LoRaMacMibSetRequestConfirm>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10c      	bne.n	800aaac <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800aa92:	2301      	movs	r3, #1
 800aa94:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800aa96:	f107 0318 	add.w	r3, r7, #24
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f004 fb5a 	bl	800f154 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800aaa0:	7f3b      	ldrb	r3, [r7, #28]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800aaa6:	4b5a      	ldr	r3, [pc, #360]	@ (800ac10 <LmHandlerConfigure+0x234>)
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800aaac:	4b58      	ldr	r3, [pc, #352]	@ (800ac10 <LmHandlerConfigure+0x234>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d022      	beq.n	800aafa <LmHandlerConfigure+0x11e>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800aab4:	4b57      	ldr	r3, [pc, #348]	@ (800ac14 <LmHandlerConfigure+0x238>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800aabe:	4b55      	ldr	r3, [pc, #340]	@ (800ac14 <LmHandlerConfigure+0x238>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	2000      	movs	r0, #0
 800aac6:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800aac8:	2327      	movs	r3, #39	@ 0x27
 800aaca:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800aacc:	f107 0318 	add.w	r3, r7, #24
 800aad0:	4618      	mov	r0, r3
 800aad2:	f004 fb3f 	bl	800f154 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800aada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aadc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800aae0:	4b46      	ldr	r3, [pc, #280]	@ (800abfc <LmHandlerConfigure+0x220>)
 800aae2:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800aae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae6:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800aaea:	4b44      	ldr	r3, [pc, #272]	@ (800abfc <LmHandlerConfigure+0x220>)
 800aaec:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800aaee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf0:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800aaf4:	4b41      	ldr	r3, [pc, #260]	@ (800abfc <LmHandlerConfigure+0x220>)
 800aaf6:	709a      	strb	r2, [r3, #2]
 800aaf8:	e008      	b.n	800ab0c <LmHandlerConfigure+0x130>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800aafa:	2305      	movs	r3, #5
 800aafc:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800aafe:	2300      	movs	r3, #0
 800ab00:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ab02:	f107 0318 	add.w	r3, r7, #24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f004 fcfc 	bl	800f504 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800ab0c:	4b3e      	ldr	r3, [pc, #248]	@ (800ac08 <LmHandlerConfigure+0x22c>)
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	4a3d      	ldr	r2, [pc, #244]	@ (800ac08 <LmHandlerConfigure+0x22c>)
 800ab12:	68d2      	ldr	r2, [r2, #12]
 800ab14:	4611      	mov	r1, r2
 800ab16:	4618      	mov	r0, r3
 800ab18:	f00c fb4c 	bl	80171b4 <SecureElementInitMcuID>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <LmHandlerConfigure+0x14c>
    {
        return LORAMAC_HANDLER_ERROR;
 800ab22:	f04f 33ff 	mov.w	r3, #4294967295
 800ab26:	e065      	b.n	800abf4 <LmHandlerConfigure+0x218>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800ab28:	2306      	movs	r3, #6
 800ab2a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ab2c:	f107 0318 	add.w	r3, r7, #24
 800ab30:	4618      	mov	r0, r3
 800ab32:	f004 fb0f 	bl	800f154 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4a37      	ldr	r2, [pc, #220]	@ (800ac18 <LmHandlerConfigure+0x23c>)
 800ab3a:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab3c:	f107 0318 	add.w	r3, r7, #24
 800ab40:	4618      	mov	r0, r3
 800ab42:	f004 fcdf 	bl	800f504 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800ab46:	2302      	movs	r3, #2
 800ab48:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800ab4a:	4b33      	ldr	r3, [pc, #204]	@ (800ac18 <LmHandlerConfigure+0x23c>)
 800ab4c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ab4e:	f107 0318 	add.w	r3, r7, #24
 800ab52:	4618      	mov	r0, r3
 800ab54:	f004 fafe 	bl	800f154 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800ab5c:	4b2f      	ldr	r3, [pc, #188]	@ (800ac1c <LmHandlerConfigure+0x240>)
 800ab5e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ab60:	f107 0318 	add.w	r3, r7, #24
 800ab64:	4618      	mov	r0, r3
 800ab66:	f004 faf5 	bl	800f154 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800ab6a:	f00c fba3 	bl	80172b4 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ab6e:	230f      	movs	r3, #15
 800ab70:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ab72:	2301      	movs	r3, #1
 800ab74:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab76:	f107 0318 	add.w	r3, r7, #24
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f004 fcc2 	bl	800f504 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ab80:	2310      	movs	r3, #16
 800ab82:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ab84:	2300      	movs	r3, #0
 800ab86:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab88:	f107 0318 	add.w	r3, r7, #24
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f004 fcb9 	bl	800f504 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ab92:	2304      	movs	r3, #4
 800ab94:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ab96:	4b19      	ldr	r3, [pc, #100]	@ (800abfc <LmHandlerConfigure+0x220>)
 800ab98:	789b      	ldrb	r3, [r3, #2]
 800ab9a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab9c:	f107 0318 	add.w	r3, r7, #24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f004 fcaf 	bl	800f504 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800aba6:	233a      	movs	r3, #58	@ 0x3a
 800aba8:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800abaa:	4b14      	ldr	r3, [pc, #80]	@ (800abfc <LmHandlerConfigure+0x220>)
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800abb0:	f107 0318 	add.w	r3, r7, #24
 800abb4:	4618      	mov	r0, r3
 800abb6:	f004 fca5 	bl	800f504 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800abba:	230f      	movs	r3, #15
 800abbc:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800abbe:	4b0f      	ldr	r3, [pc, #60]	@ (800abfc <LmHandlerConfigure+0x220>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f107 0210 	add.w	r2, r7, #16
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f007 fbc2 	bl	8012352 <RegionGetPhyParam>
 800abce:	4603      	mov	r3, r0
 800abd0:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	bf14      	ite	ne
 800abd8:	2301      	movne	r3, #1
 800abda:	2300      	moveq	r3, #0
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	4b07      	ldr	r3, [pc, #28]	@ (800abfc <LmHandlerConfigure+0x220>)
 800abe0:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800abe2:	2014      	movs	r0, #20
 800abe4:	f000 fa1e 	bl	800b024 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800abe8:	4b04      	ldr	r3, [pc, #16]	@ (800abfc <LmHandlerConfigure+0x220>)
 800abea:	79db      	ldrb	r3, [r3, #7]
 800abec:	4618      	mov	r0, r3
 800abee:	f005 fb03 	bl	80101f8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3748      	adds	r7, #72	@ 0x48
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	200009dc 	.word	0x200009dc
 800ac00:	20000a24 	.word	0x20000a24
 800ac04:	08021558 	.word	0x08021558
 800ac08:	20000a08 	.word	0x20000a08
 800ac0c:	200009f8 	.word	0x200009f8
 800ac10:	20000a25 	.word	0x20000a25
 800ac14:	200009f4 	.word	0x200009f4
 800ac18:	200009b0 	.word	0x200009b0
 800ac1c:	200009b8 	.word	0x200009b8

0800ac20 <LmHandlerJoin>:
    return DutyCycleWaitTime;
}
#if MY_TX
#if MY_TX_ABP
void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08c      	sub	sp, #48	@ 0x30
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	460a      	mov	r2, r1
 800ac2a:	71fb      	strb	r3, [r7, #7]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	71bb      	strb	r3, [r7, #6]

	if( mode == ACTIVATION_TYPE_ABP )
 800ac30:	79fb      	ldrb	r3, [r7, #7]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d10d      	bne.n	800ac52 <LmHandlerJoin+0x32>
	{

		MibRequestConfirm_t mibReq;

		JoinParams.forceRejoin = forceRejoin;
 800ac36:	4a09      	ldr	r2, [pc, #36]	@ (800ac5c <LmHandlerJoin+0x3c>)
 800ac38:	79bb      	ldrb	r3, [r7, #6]
 800ac3a:	7213      	strb	r3, [r2, #8]

		LoRaMacStart();
 800ac3c:	f004 f9ec 	bl	800f018 <LoRaMacStart>

		mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ac40:	2301      	movs	r3, #1
 800ac42:	723b      	strb	r3, [r7, #8]
		mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800ac44:	2301      	movs	r3, #1
 800ac46:	733b      	strb	r3, [r7, #12]
		LoRaMacMibSetRequestConfirm( &mibReq );
 800ac48:	f107 0308 	add.w	r3, r7, #8
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f004 fc59 	bl	800f504 <LoRaMacMibSetRequestConfirm>
	}
}
 800ac52:	bf00      	nop
 800ac54:	3730      	adds	r7, #48	@ 0x30
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20000078 	.word	0x20000078

0800ac60 <LmHandlerJoinStatus>:
#endif /* LORAMAC_VERSION */
}
#endif

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08c      	sub	sp, #48	@ 0x30
 800ac64:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ac66:	2301      	movs	r3, #1
 800ac68:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800ac6a:	1d3b      	adds	r3, r7, #4
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f004 fa71 	bl	800f154 <LoRaMacMibGetRequestConfirm>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800ac78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d106      	bne.n	800ac8e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ac80:	7a3b      	ldrb	r3, [r7, #8]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800ac86:	2300      	movs	r3, #0
 800ac88:	e002      	b.n	800ac90 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800ac8e:	2300      	movs	r3, #0
    }
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3730      	adds	r7, #48	@ 0x30
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <LmHandlerSend>:
LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	@ 0x28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
 800aca4:	4613      	mov	r3, r2
 800aca6:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800aca8:	23ff      	movs	r3, #255	@ 0xff
 800acaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800acae:	f001 fbbf 	bl	800c430 <LoRaMacIsBusy>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800acb8:	f06f 0301 	mvn.w	r3, #1
 800acbc:	e0ab      	b.n	800ae16 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800acbe:	f001 fbdf 	bl	800c480 <LoRaMacIsStopped>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800acc8:	f06f 0302 	mvn.w	r3, #2
 800accc:	e0a3      	b.n	800ae16 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800acce:	f7ff ffc7 	bl	800ac60 <LmHandlerJoinStatus>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d00a      	beq.n	800acee <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800acd8:	4b51      	ldr	r3, [pc, #324]	@ (800ae20 <LmHandlerSend+0x188>)
 800acda:	79db      	ldrb	r3, [r3, #7]
 800acdc:	4a50      	ldr	r2, [pc, #320]	@ (800ae20 <LmHandlerSend+0x188>)
 800acde:	7a12      	ldrb	r2, [r2, #8]
 800ace0:	4611      	mov	r1, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff ff9c 	bl	800ac20 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ace8:	f06f 0302 	mvn.w	r3, #2
 800acec:	e093      	b.n	800ae16 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800acee:	4a4d      	ldr	r2, [pc, #308]	@ (800ae24 <LmHandlerSend+0x18c>)
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	bf14      	ite	ne
 800acfa:	2301      	movne	r3, #1
 800acfc:	2300      	moveq	r3, #0
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ad02:	4b49      	ldr	r3, [pc, #292]	@ (800ae28 <LmHandlerSend+0x190>)
 800ad04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ad08:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	785b      	ldrb	r3, [r3, #1]
 800ad0e:	f107 020c 	add.w	r2, r7, #12
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f004 f98d 	bl	800f034 <LoRaMacQueryTxPossible>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d009      	beq.n	800ad34 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ad20:	2300      	movs	r3, #0
 800ad22:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ad2c:	23f9      	movs	r3, #249	@ 0xf9
 800ad2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad32:	e008      	b.n	800ad46 <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	785b      	ldrb	r3, [r3, #1]
 800ad3e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ad46:	4b37      	ldr	r3, [pc, #220]	@ (800ae24 <LmHandlerSend+0x18c>)
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	3310      	adds	r3, #16
 800ad4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad50:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ad54:	4b34      	ldr	r3, [pc, #208]	@ (800ae28 <LmHandlerSend+0x190>)
 800ad56:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ad5a:	4b32      	ldr	r3, [pc, #200]	@ (800ae24 <LmHandlerSend+0x18c>)
 800ad5c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800ad5e:	78ba      	ldrb	r2, [r7, #2]
 800ad60:	f107 0310 	add.w	r3, r7, #16
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f005 f90e 	bl	800ff88 <LoRaMacMcpsRequest>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ad72:	6a3b      	ldr	r3, [r7, #32]
 800ad74:	4a2d      	ldr	r2, [pc, #180]	@ (800ae2c <LmHandlerSend+0x194>)
 800ad76:	6013      	str	r3, [r2, #0]

    switch( status )
 800ad78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad7c:	2b11      	cmp	r3, #17
 800ad7e:	d843      	bhi.n	800ae08 <LmHandlerSend+0x170>
 800ad80:	a201      	add	r2, pc, #4	@ (adr r2, 800ad88 <LmHandlerSend+0xf0>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800add1 	.word	0x0800add1
 800ad8c:	0800ade9 	.word	0x0800ade9
 800ad90:	0800ae09 	.word	0x0800ae09
 800ad94:	0800ae09 	.word	0x0800ae09
 800ad98:	0800ae09 	.word	0x0800ae09
 800ad9c:	0800ae09 	.word	0x0800ae09
 800ada0:	0800ae09 	.word	0x0800ae09
 800ada4:	0800adf1 	.word	0x0800adf1
 800ada8:	0800ae09 	.word	0x0800ae09
 800adac:	0800ae09 	.word	0x0800ae09
 800adb0:	0800ae09 	.word	0x0800ae09
 800adb4:	0800ae01 	.word	0x0800ae01
 800adb8:	0800ae09 	.word	0x0800ae09
 800adbc:	0800ae09 	.word	0x0800ae09
 800adc0:	0800ade9 	.word	0x0800ade9
 800adc4:	0800ade9 	.word	0x0800ade9
 800adc8:	0800ade9 	.word	0x0800ade9
 800adcc:	0800adf9 	.word	0x0800adf9
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800add0:	4b17      	ldr	r3, [pc, #92]	@ (800ae30 <LmHandlerSend+0x198>)
 800add2:	2200      	movs	r2, #0
 800add4:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800add6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800adda:	f113 0f07 	cmn.w	r3, #7
 800adde:	d017      	beq.n	800ae10 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ade0:	2300      	movs	r3, #0
 800ade2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800ade6:	e013      	b.n	800ae10 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ade8:	23fe      	movs	r3, #254	@ 0xfe
 800adea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800adee:	e010      	b.n	800ae12 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800adf0:	23fd      	movs	r3, #253	@ 0xfd
 800adf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800adf6:	e00c      	b.n	800ae12 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800adf8:	23fb      	movs	r3, #251	@ 0xfb
 800adfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800adfe:	e008      	b.n	800ae12 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ae00:	23fa      	movs	r3, #250	@ 0xfa
 800ae02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ae06:	e004      	b.n	800ae12 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ae08:	23ff      	movs	r3, #255	@ 0xff
 800ae0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ae0e:	e000      	b.n	800ae12 <LmHandlerSend+0x17a>
            break;
 800ae10:	bf00      	nop
    }

    return lmhStatus;
 800ae12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3728      	adds	r7, #40	@ 0x28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20000078 	.word	0x20000078
 800ae24:	20000084 	.word	0x20000084
 800ae28:	200009dc 	.word	0x200009dc
 800ae2c:	20000a20 	.word	0x20000a20
 800ae30:	20000a24 	.word	0x20000a24

0800ae34 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ae3a:	2309      	movs	r3, #9
 800ae3c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ae3e:	463b      	mov	r3, r7
 800ae40:	4618      	mov	r0, r3
 800ae42:	f004 ff09 	bl	800fc58 <LoRaMacMlmeRequest>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	4a06      	ldr	r2, [pc, #24]	@ (800ae68 <LmHandlerDeviceTimeReq+0x34>)
 800ae4e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ae56:	2300      	movs	r3, #0
 800ae58:	e001      	b.n	800ae5e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ae5a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20000a20 	.word	0x20000a20

0800ae6c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ae76:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bc80      	pop	{r7}
 800ae82:	4770      	bx	lr

0800ae84 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08e      	sub	sp, #56	@ 0x38
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800ae94:	f001 facc 	bl	800c430 <LoRaMacIsBusy>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ae9e:	f06f 0301 	mvn.w	r3, #1
 800aea2:	e071      	b.n	800af88 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800aea4:	f7ff fedc 	bl	800ac60 <LmHandlerJoinStatus>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d002      	beq.n	800aeb4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800aeae:	f06f 0302 	mvn.w	r3, #2
 800aeb2:	e069      	b.n	800af88 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800aeb8:	f107 030c 	add.w	r3, r7, #12
 800aebc:	4618      	mov	r0, r3
 800aebe:	f004 f949 	bl	800f154 <LoRaMacMibGetRequestConfirm>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800aec8:	f04f 33ff 	mov.w	r3, #4294967295
 800aecc:	e05c      	b.n	800af88 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800aece:	7c3b      	ldrb	r3, [r7, #16]
 800aed0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800aed4:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d052      	beq.n	800af84 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d028      	beq.n	800af36 <LmHandlerRequestClass+0xb2>
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	dc48      	bgt.n	800af7a <LmHandlerRequestClass+0xf6>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <LmHandlerRequestClass+0x6e>
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d01e      	beq.n	800af2e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800aef0:	e043      	b.n	800af7a <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800aef2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d041      	beq.n	800af7e <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800aefe:	f107 030c 	add.w	r3, r7, #12
 800af02:	4618      	mov	r0, r3
 800af04:	f004 fafe 	bl	800f504 <LoRaMacMibSetRequestConfirm>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10b      	bne.n	800af26 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800af0e:	4b20      	ldr	r3, [pc, #128]	@ (800af90 <LmHandlerRequestClass+0x10c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af14:	2b00      	cmp	r3, #0
 800af16:	d032      	beq.n	800af7e <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800af18:	4b1d      	ldr	r3, [pc, #116]	@ (800af90 <LmHandlerRequestClass+0x10c>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1e:	79fa      	ldrb	r2, [r7, #7]
 800af20:	4610      	mov	r0, r2
 800af22:	4798      	blx	r3
                break;
 800af24:	e02b      	b.n	800af7e <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800af26:	23ff      	movs	r3, #255	@ 0xff
 800af28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af2c:	e027      	b.n	800af7e <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800af2e:	23ff      	movs	r3, #255	@ 0xff
 800af30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af34:	e026      	b.n	800af84 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800af36:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800af3e:	23ff      	movs	r3, #255	@ 0xff
 800af40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af44:	e01d      	b.n	800af82 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800af4a:	f107 030c 	add.w	r3, r7, #12
 800af4e:	4618      	mov	r0, r3
 800af50:	f004 fad8 	bl	800f504 <LoRaMacMibSetRequestConfirm>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10b      	bne.n	800af72 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800af5a:	4b0d      	ldr	r3, [pc, #52]	@ (800af90 <LmHandlerRequestClass+0x10c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00e      	beq.n	800af82 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800af64:	4b0a      	ldr	r3, [pc, #40]	@ (800af90 <LmHandlerRequestClass+0x10c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af6a:	79fa      	ldrb	r2, [r7, #7]
 800af6c:	4610      	mov	r0, r2
 800af6e:	4798      	blx	r3
                break;
 800af70:	e007      	b.n	800af82 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800af72:	23ff      	movs	r3, #255	@ 0xff
 800af74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af78:	e003      	b.n	800af82 <LmHandlerRequestClass+0xfe>
                break;
 800af7a:	bf00      	nop
 800af7c:	e002      	b.n	800af84 <LmHandlerRequestClass+0x100>
                break;
 800af7e:	bf00      	nop
 800af80:	e000      	b.n	800af84 <LmHandlerRequestClass+0x100>
                break;
 800af82:	bf00      	nop
        }
    }
    return errorStatus;
 800af84:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3738      	adds	r7, #56	@ 0x38
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	200009f4 	.word	0x200009f4

0800af94 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08c      	sub	sp, #48	@ 0x30
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d102      	bne.n	800afa8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800afa2:	f04f 33ff 	mov.w	r3, #4294967295
 800afa6:	e010      	b.n	800afca <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800afa8:	2300      	movs	r3, #0
 800afaa:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800afac:	f107 0308 	add.w	r3, r7, #8
 800afb0:	4618      	mov	r0, r3
 800afb2:	f004 f8cf 	bl	800f154 <LoRaMacMibGetRequestConfirm>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800afbc:	f04f 33ff 	mov.w	r3, #4294967295
 800afc0:	e003      	b.n	800afca <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800afc2:	7b3a      	ldrb	r2, [r7, #12]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3730      	adds	r7, #48	@ 0x30
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08c      	sub	sp, #48	@ 0x30
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800afe2:	f04f 33ff 	mov.w	r3, #4294967295
 800afe6:	e016      	b.n	800b016 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800afe8:	2320      	movs	r3, #32
 800afea:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	4618      	mov	r0, r3
 800aff2:	f004 f8af 	bl	800f154 <LoRaMacMibGetRequestConfirm>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800affc:	f04f 33ff 	mov.w	r3, #4294967295
 800b000:	e009      	b.n	800b016 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800b002:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f993 2000 	ldrsb.w	r2, [r3]
 800b010:	4b03      	ldr	r3, [pc, #12]	@ (800b020 <LmHandlerGetTxDatarate+0x4c>)
 800b012:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3730      	adds	r7, #48	@ 0x30
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200009dc 	.word	0x200009dc

0800b024 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08c      	sub	sp, #48	@ 0x30
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800b02c:	2323      	movs	r3, #35	@ 0x23
 800b02e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	4618      	mov	r0, r3
 800b03a:	f004 fa63 	bl	800f504 <LoRaMacMibSetRequestConfirm>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800b044:	f04f 33ff 	mov.w	r3, #4294967295
 800b048:	e000      	b.n	800b04c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3730      	adds	r7, #48	@ 0x30
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800b05c:	4b18      	ldr	r3, [pc, #96]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b05e:	2201      	movs	r2, #1
 800b060:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	785a      	ldrb	r2, [r3, #1]
 800b066:	4b16      	ldr	r3, [pc, #88]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b068:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	789b      	ldrb	r3, [r3, #2]
 800b06e:	b25a      	sxtb	r2, r3
 800b070:	4b13      	ldr	r3, [pc, #76]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b072:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	4a11      	ldr	r2, [pc, #68]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b07a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800b082:	4b0f      	ldr	r3, [pc, #60]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b084:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b08e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	791b      	ldrb	r3, [r3, #4]
 800b094:	461a      	mov	r2, r3
 800b096:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b098:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800b09a:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c4 <McpsConfirm+0x70>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d004      	beq.n	800b0ae <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b0a4:	4b07      	ldr	r3, [pc, #28]	@ (800b0c4 <McpsConfirm+0x70>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0aa:	4805      	ldr	r0, [pc, #20]	@ (800b0c0 <McpsConfirm+0x6c>)
 800b0ac:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	f000 f963 	bl	800b37c <LmHandlerPackagesNotify>
}
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000084 	.word	0x20000084
 800b0c4:	200009f4 	.word	0x200009f4

0800b0c8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800b0d6:	4b2d      	ldr	r3, [pc, #180]	@ (800b18c <McpsIndication+0xc4>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	785a      	ldrb	r2, [r3, #1]
 800b0e0:	4b2a      	ldr	r3, [pc, #168]	@ (800b18c <McpsIndication+0xc4>)
 800b0e2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800b0e4:	4b29      	ldr	r3, [pc, #164]	@ (800b18c <McpsIndication+0xc4>)
 800b0e6:	785b      	ldrb	r3, [r3, #1]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d14b      	bne.n	800b184 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	791b      	ldrb	r3, [r3, #4]
 800b0f0:	b25a      	sxtb	r2, r3
 800b0f2:	4b26      	ldr	r3, [pc, #152]	@ (800b18c <McpsIndication+0xc4>)
 800b0f4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0fc:	b25a      	sxtb	r2, r3
 800b0fe:	4b23      	ldr	r3, [pc, #140]	@ (800b18c <McpsIndication+0xc4>)
 800b100:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800b108:	4b20      	ldr	r3, [pc, #128]	@ (800b18c <McpsIndication+0xc4>)
 800b10a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	78da      	ldrb	r2, [r3, #3]
 800b110:	4b1e      	ldr	r3, [pc, #120]	@ (800b18c <McpsIndication+0xc4>)
 800b112:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	4a1c      	ldr	r2, [pc, #112]	@ (800b18c <McpsIndication+0xc4>)
 800b11a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	78db      	ldrb	r3, [r3, #3]
 800b120:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	7b1b      	ldrb	r3, [r3, #12]
 800b126:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800b12e:	4b18      	ldr	r3, [pc, #96]	@ (800b190 <McpsIndication+0xc8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d007      	beq.n	800b148 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800b138:	4b15      	ldr	r3, [pc, #84]	@ (800b190 <McpsIndication+0xc8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13e:	f107 0210 	add.w	r2, r7, #16
 800b142:	4912      	ldr	r1, [pc, #72]	@ (800b18c <McpsIndication+0xc4>)
 800b144:	4610      	mov	r0, r2
 800b146:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800b148:	4b11      	ldr	r3, [pc, #68]	@ (800b190 <McpsIndication+0xc8>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d007      	beq.n	800b162 <McpsIndication+0x9a>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	7e1b      	ldrb	r3, [r3, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800b15a:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <McpsIndication+0xc8>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b160:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	2001      	movs	r0, #1
 800b166:	f000 f909 	bl	800b37c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800b16a:	f107 030f 	add.w	r3, r7, #15
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff ff10 	bl	800af94 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	795b      	ldrb	r3, [r3, #5]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800b17c:	4b05      	ldr	r3, [pc, #20]	@ (800b194 <McpsIndication+0xcc>)
 800b17e:	2201      	movs	r2, #1
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	e000      	b.n	800b186 <McpsIndication+0xbe>
        return;
 800b184:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	200000a0 	.word	0x200000a0
 800b190:	200009f4 	.word	0x200009f4
 800b194:	20000a24 	.word	0x20000a24

0800b198 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08c      	sub	sp, #48	@ 0x30
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800b1a0:	4b49      	ldr	r3, [pc, #292]	@ (800b2c8 <MlmeConfirm+0x130>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	785a      	ldrb	r2, [r3, #1]
 800b1aa:	4b47      	ldr	r3, [pc, #284]	@ (800b2c8 <MlmeConfirm+0x130>)
 800b1ac:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800b1ae:	4b47      	ldr	r3, [pc, #284]	@ (800b2cc <MlmeConfirm+0x134>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b1b8:	4b44      	ldr	r3, [pc, #272]	@ (800b2cc <MlmeConfirm+0x134>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1be:	4842      	ldr	r0, [pc, #264]	@ (800b2c8 <MlmeConfirm+0x130>)
 800b1c0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	2002      	movs	r0, #2
 800b1c6:	f000 f8d9 	bl	800b37c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	2b0b      	cmp	r3, #11
 800b1d2:	d872      	bhi.n	800b2ba <MlmeConfirm+0x122>
 800b1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1dc <MlmeConfirm+0x44>)
 800b1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1da:	bf00      	nop
 800b1dc:	0800b20d 	.word	0x0800b20d
 800b1e0:	0800b2bb 	.word	0x0800b2bb
 800b1e4:	0800b2bb 	.word	0x0800b2bb
 800b1e8:	0800b2bb 	.word	0x0800b2bb
 800b1ec:	0800b289 	.word	0x0800b289
 800b1f0:	0800b2bb 	.word	0x0800b2bb
 800b1f4:	0800b2bb 	.word	0x0800b2bb
 800b1f8:	0800b2bb 	.word	0x0800b2bb
 800b1fc:	0800b2bb 	.word	0x0800b2bb
 800b200:	0800b2bb 	.word	0x0800b2bb
 800b204:	0800b2a1 	.word	0x0800b2a1
 800b208:	0800b2bb 	.word	0x0800b2bb
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800b20c:	2306      	movs	r3, #6
 800b20e:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800b210:	f107 0308 	add.w	r3, r7, #8
 800b214:	4618      	mov	r0, r3
 800b216:	f003 ff9d 	bl	800f154 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800b21a:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d0 <MlmeConfirm+0x138>)
 800b21c:	79db      	ldrb	r3, [r3, #7]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	4611      	mov	r1, r2
 800b222:	4618      	mov	r0, r3
 800b224:	f00c fa98 	bl	8017758 <SecureElementSetDevAddr>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d102      	bne.n	800b234 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4a28      	ldr	r2, [pc, #160]	@ (800b2d4 <MlmeConfirm+0x13c>)
 800b232:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800b234:	4828      	ldr	r0, [pc, #160]	@ (800b2d8 <MlmeConfirm+0x140>)
 800b236:	f7ff fecd 	bl	800afd4 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800b23a:	4828      	ldr	r0, [pc, #160]	@ (800b2dc <MlmeConfirm+0x144>)
 800b23c:	f000 f91a 	bl	800b474 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b240:	4b21      	ldr	r3, [pc, #132]	@ (800b2c8 <MlmeConfirm+0x130>)
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d108      	bne.n	800b25a <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b248:	4b21      	ldr	r3, [pc, #132]	@ (800b2d0 <MlmeConfirm+0x138>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800b24e:	4b24      	ldr	r3, [pc, #144]	@ (800b2e0 <MlmeConfirm+0x148>)
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff fe16 	bl	800ae84 <LmHandlerRequestClass>
 800b258:	e002      	b.n	800b260 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800b25a:	4b1d      	ldr	r3, [pc, #116]	@ (800b2d0 <MlmeConfirm+0x138>)
 800b25c:	22ff      	movs	r2, #255	@ 0xff
 800b25e:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800b260:	4b1a      	ldr	r3, [pc, #104]	@ (800b2cc <MlmeConfirm+0x134>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b26a:	4b18      	ldr	r3, [pc, #96]	@ (800b2cc <MlmeConfirm+0x134>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b270:	4817      	ldr	r0, [pc, #92]	@ (800b2d0 <MlmeConfirm+0x138>)
 800b272:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b274:	4b14      	ldr	r3, [pc, #80]	@ (800b2c8 <MlmeConfirm+0x130>)
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d120      	bne.n	800b2be <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800b27c:	4b14      	ldr	r3, [pc, #80]	@ (800b2d0 <MlmeConfirm+0x138>)
 800b27e:	79db      	ldrb	r3, [r3, #7]
 800b280:	4618      	mov	r0, r3
 800b282:	f00c f82b 	bl	80172dc <SecureElementPrintSessionKeys>
                }
            }
            break;
 800b286:	e01a      	b.n	800b2be <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800b288:	4b16      	ldr	r3, [pc, #88]	@ (800b2e4 <MlmeConfirm+0x14c>)
 800b28a:	2201      	movs	r2, #1
 800b28c:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7a1a      	ldrb	r2, [r3, #8]
 800b292:	4b14      	ldr	r3, [pc, #80]	@ (800b2e4 <MlmeConfirm+0x14c>)
 800b294:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	7a5a      	ldrb	r2, [r3, #9]
 800b29a:	4b12      	ldr	r3, [pc, #72]	@ (800b2e4 <MlmeConfirm+0x14c>)
 800b29c:	74da      	strb	r2, [r3, #19]
            }
            break;
 800b29e:	e00f      	b.n	800b2c0 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d105      	bne.n	800b2b4 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800b2a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e0 <MlmeConfirm+0x148>)
 800b2aa:	7c1b      	ldrb	r3, [r3, #16]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff fddd 	bl	800ae6c <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800b2b2:	e005      	b.n	800b2c0 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800b2b4:	f7ff fdbe 	bl	800ae34 <LmHandlerDeviceTimeReq>
            break;
 800b2b8:	e002      	b.n	800b2c0 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800b2ba:	bf00      	nop
 800b2bc:	e000      	b.n	800b2c0 <MlmeConfirm+0x128>
            break;
 800b2be:	bf00      	nop
    }
}
 800b2c0:	bf00      	nop
 800b2c2:	3730      	adds	r7, #48	@ 0x30
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	20000084 	.word	0x20000084
 800b2cc:	200009f4 	.word	0x200009f4
 800b2d0:	20000078 	.word	0x20000078
 800b2d4:	200009b0 	.word	0x200009b0
 800b2d8:	2000007c 	.word	0x2000007c
 800b2dc:	2000007d 	.word	0x2000007d
 800b2e0:	200009dc 	.word	0x200009dc
 800b2e4:	200000a0 	.word	0x200000a0

0800b2e8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800b2f2:	4b20      	ldr	r3, [pc, #128]	@ (800b374 <MlmeIndication+0x8c>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	785a      	ldrb	r2, [r3, #1]
 800b2fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b374 <MlmeIndication+0x8c>)
 800b2fe:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	789b      	ldrb	r3, [r3, #2]
 800b304:	b25a      	sxtb	r2, r3
 800b306:	4b1b      	ldr	r3, [pc, #108]	@ (800b374 <MlmeIndication+0x8c>)
 800b308:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b310:	b25a      	sxtb	r2, r3
 800b312:	4b18      	ldr	r3, [pc, #96]	@ (800b374 <MlmeIndication+0x8c>)
 800b314:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800b31c:	4b15      	ldr	r3, [pc, #84]	@ (800b374 <MlmeIndication+0x8c>)
 800b31e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	78da      	ldrb	r2, [r3, #3]
 800b324:	4b13      	ldr	r3, [pc, #76]	@ (800b374 <MlmeIndication+0x8c>)
 800b326:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	4a11      	ldr	r2, [pc, #68]	@ (800b374 <MlmeIndication+0x8c>)
 800b32e:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800b330:	4b11      	ldr	r3, [pc, #68]	@ (800b378 <MlmeIndication+0x90>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00d      	beq.n	800b356 <MlmeIndication+0x6e>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b0a      	cmp	r3, #10
 800b340:	d009      	beq.n	800b356 <MlmeIndication+0x6e>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b0e      	cmp	r3, #14
 800b348:	d005      	beq.n	800b356 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800b34a:	4b0b      	ldr	r3, [pc, #44]	@ (800b378 <MlmeIndication+0x90>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	4908      	ldr	r1, [pc, #32]	@ (800b374 <MlmeIndication+0x8c>)
 800b352:	2000      	movs	r0, #0
 800b354:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	2003      	movs	r0, #3
 800b35a:	f000 f80f 	bl	800b37c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b0a      	cmp	r3, #10
 800b364:	d001      	beq.n	800b36a <MlmeIndication+0x82>
 800b366:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800b368:	e000      	b.n	800b36c <MlmeIndication+0x84>
            break;
 800b36a:	bf00      	nop
    }
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	200000a0 	.word	0x200000a0
 800b378:	200009f4 	.word	0x200009f4

0800b37c <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	6039      	str	r1, [r7, #0]
 800b386:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
 800b38c:	e067      	b.n	800b45e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800b38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b392:	4a37      	ldr	r2, [pc, #220]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d05a      	beq.n	800b452 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800b39c:	79fb      	ldrb	r3, [r7, #7]
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d84e      	bhi.n	800b440 <LmHandlerPackagesNotify+0xc4>
 800b3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a8 <LmHandlerPackagesNotify+0x2c>)
 800b3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a8:	0800b3b9 	.word	0x0800b3b9
 800b3ac:	0800b3db 	.word	0x0800b3db
 800b3b0:	0800b3fd 	.word	0x0800b3fd
 800b3b4:	0800b41f 	.word	0x0800b41f
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800b3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3bc:	4a2c      	ldr	r2, [pc, #176]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d03d      	beq.n	800b444 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800b3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3cc:	4a28      	ldr	r2, [pc, #160]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	6838      	ldr	r0, [r7, #0]
 800b3d6:	4798      	blx	r3
                        }
                        break;
 800b3d8:	e034      	b.n	800b444 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800b3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3de:	4a24      	ldr	r2, [pc, #144]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3e4:	69db      	ldr	r3, [r3, #28]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d02e      	beq.n	800b448 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800b3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ee:	4a20      	ldr	r2, [pc, #128]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	6838      	ldr	r0, [r7, #0]
 800b3f8:	4798      	blx	r3
                        }
                        break;
 800b3fa:	e025      	b.n	800b448 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800b3fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b400:	4a1b      	ldr	r2, [pc, #108]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d01f      	beq.n	800b44c <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800b40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b410:	4a17      	ldr	r2, [pc, #92]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	6838      	ldr	r0, [r7, #0]
 800b41a:	4798      	blx	r3
                        }
                        break;
 800b41c:	e016      	b.n	800b44c <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800b41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b422:	4a13      	ldr	r2, [pc, #76]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d010      	beq.n	800b450 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800b42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b432:	4a0f      	ldr	r2, [pc, #60]	@ (800b470 <LmHandlerPackagesNotify+0xf4>)
 800b434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b43a:	6838      	ldr	r0, [r7, #0]
 800b43c:	4798      	blx	r3
                        }
                        break;
 800b43e:	e007      	b.n	800b450 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800b440:	bf00      	nop
 800b442:	e006      	b.n	800b452 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b444:	bf00      	nop
 800b446:	e004      	b.n	800b452 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b448:	bf00      	nop
 800b44a:	e002      	b.n	800b452 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b44c:	bf00      	nop
 800b44e:	e000      	b.n	800b452 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b450:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	3301      	adds	r3, #1
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	73fb      	strb	r3, [r7, #15]
 800b45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b462:	2b04      	cmp	r3, #4
 800b464:	dd93      	ble.n	800b38e <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	200009c8 	.word	0x200009c8

0800b474 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08c      	sub	sp, #48	@ 0x30
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800b482:	f04f 33ff 	mov.w	r3, #4294967295
 800b486:	e016      	b.n	800b4b6 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800b488:	2321      	movs	r3, #33	@ 0x21
 800b48a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b48c:	f107 0308 	add.w	r3, r7, #8
 800b490:	4618      	mov	r0, r3
 800b492:	f003 fe5f 	bl	800f154 <LoRaMacMibGetRequestConfirm>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800b49c:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a0:	e009      	b.n	800b4b6 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800b4a2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f993 2000 	ldrsb.w	r2, [r3]
 800b4b0:	4b03      	ldr	r3, [pc, #12]	@ (800b4c0 <LmHandlerGetTxPower+0x4c>)
 800b4b2:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3730      	adds	r7, #48	@ 0x30
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	200009dc 	.word	0x200009dc

0800b4c4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b4ca:	f00f feb9 	bl	801b240 <UTIL_TIMER_GetCurrentTime>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4a0c      	ldr	r2, [pc, #48]	@ (800b504 <OnRadioTxDone+0x40>)
 800b4d2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b4d4:	4c0c      	ldr	r4, [pc, #48]	@ (800b508 <OnRadioTxDone+0x44>)
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f00f fca5 	bl	801ae28 <SysTimeGet>
 800b4de:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800b4e2:	463a      	mov	r2, r7
 800b4e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4e8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b4ec:	4a07      	ldr	r2, [pc, #28]	@ (800b50c <OnRadioTxDone+0x48>)
 800b4ee:	7813      	ldrb	r3, [r2, #0]
 800b4f0:	f043 0320 	orr.w	r3, r3, #32
 800b4f4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b4f6:	f003 fa89 	bl	800ea0c <OnMacProcessNotify>
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );

}
 800b4fa:	bf00      	nop
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd90      	pop	{r4, r7, pc}
 800b502:	bf00      	nop
 800b504:	20000fd8 	.word	0x20000fd8
 800b508:	20000a28 	.word	0x20000a28
 800b50c:	20000fd4 	.word	0x20000fd4

0800b510 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	4608      	mov	r0, r1
 800b51a:	4611      	mov	r1, r2
 800b51c:	461a      	mov	r2, r3
 800b51e:	4603      	mov	r3, r0
 800b520:	817b      	strh	r3, [r7, #10]
 800b522:	460b      	mov	r3, r1
 800b524:	813b      	strh	r3, [r7, #8]
 800b526:	4613      	mov	r3, r2
 800b528:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b52a:	f00f fe89 	bl	801b240 <UTIL_TIMER_GetCurrentTime>
 800b52e:	4603      	mov	r3, r0
 800b530:	4a11      	ldr	r2, [pc, #68]	@ (800b578 <OnRadioRxDone+0x68>)
 800b532:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800b534:	4a10      	ldr	r2, [pc, #64]	@ (800b578 <OnRadioRxDone+0x68>)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800b53a:	4a0f      	ldr	r2, [pc, #60]	@ (800b578 <OnRadioRxDone+0x68>)
 800b53c:	897b      	ldrh	r3, [r7, #10]
 800b53e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800b540:	4a0d      	ldr	r2, [pc, #52]	@ (800b578 <OnRadioRxDone+0x68>)
 800b542:	893b      	ldrh	r3, [r7, #8]
 800b544:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800b546:	4a0c      	ldr	r2, [pc, #48]	@ (800b578 <OnRadioRxDone+0x68>)
 800b548:	79fb      	ldrb	r3, [r7, #7]
 800b54a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800b54c:	4a0b      	ldr	r2, [pc, #44]	@ (800b57c <OnRadioRxDone+0x6c>)
 800b54e:	7813      	ldrb	r3, [r2, #0]
 800b550:	f043 0310 	orr.w	r3, r3, #16
 800b554:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800b556:	4a09      	ldr	r2, [pc, #36]	@ (800b57c <OnRadioRxDone+0x6c>)
 800b558:	7813      	ldrb	r3, [r2, #0]
 800b55a:	f043 0301 	orr.w	r3, r3, #1
 800b55e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800b560:	f003 fa54 	bl	800ea0c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b564:	4b06      	ldr	r3, [pc, #24]	@ (800b580 <OnRadioRxDone+0x70>)
 800b566:	2201      	movs	r2, #1
 800b568:	2100      	movs	r1, #0
 800b56a:	2002      	movs	r0, #2
 800b56c:	f00e fef4 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
}
 800b570:	bf00      	nop
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	20000fdc 	.word	0x20000fdc
 800b57c:	20000fd4 	.word	0x20000fd4
 800b580:	080215a4 	.word	0x080215a4

0800b584 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b588:	4a07      	ldr	r2, [pc, #28]	@ (800b5a8 <OnRadioTxTimeout+0x24>)
 800b58a:	7813      	ldrb	r3, [r2, #0]
 800b58c:	f043 0308 	orr.w	r3, r3, #8
 800b590:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b592:	f003 fa3b 	bl	800ea0c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b596:	4b05      	ldr	r3, [pc, #20]	@ (800b5ac <OnRadioTxTimeout+0x28>)
 800b598:	2201      	movs	r2, #1
 800b59a:	2100      	movs	r1, #0
 800b59c:	2002      	movs	r0, #2
 800b59e:	f00e fedb 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>

}
 800b5a2:	bf00      	nop
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20000fd4 	.word	0x20000fd4
 800b5ac:	080215b4 	.word	0x080215b4

0800b5b0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800b5b4:	4a04      	ldr	r2, [pc, #16]	@ (800b5c8 <OnRadioRxError+0x18>)
 800b5b6:	7813      	ldrb	r3, [r2, #0]
 800b5b8:	f043 0304 	orr.w	r3, r3, #4
 800b5bc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b5be:	f003 fa25 	bl	800ea0c <OnMacProcessNotify>
}
 800b5c2:	bf00      	nop
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000fd4 	.word	0x20000fd4

0800b5cc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b5d0:	4a07      	ldr	r2, [pc, #28]	@ (800b5f0 <OnRadioRxTimeout+0x24>)
 800b5d2:	7813      	ldrb	r3, [r2, #0]
 800b5d4:	f043 0302 	orr.w	r3, r3, #2
 800b5d8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b5da:	f003 fa17 	bl	800ea0c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b5de:	4b05      	ldr	r3, [pc, #20]	@ (800b5f4 <OnRadioRxTimeout+0x28>)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	2002      	movs	r0, #2
 800b5e6:	f00e feb7 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
}
 800b5ea:	bf00      	nop
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000fd4 	.word	0x20000fd4
 800b5f4:	080215c4 	.word	0x080215c4

0800b5f8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b5fc:	4b08      	ldr	r3, [pc, #32]	@ (800b620 <UpdateRxSlotIdleState+0x28>)
 800b5fe:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b602:	2b02      	cmp	r3, #2
 800b604:	d004      	beq.n	800b610 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800b606:	4b07      	ldr	r3, [pc, #28]	@ (800b624 <UpdateRxSlotIdleState+0x2c>)
 800b608:	2206      	movs	r2, #6
 800b60a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800b60e:	e003      	b.n	800b618 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b610:	4b04      	ldr	r3, [pc, #16]	@ (800b624 <UpdateRxSlotIdleState+0x2c>)
 800b612:	2202      	movs	r2, #2
 800b614:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800b618:	bf00      	nop
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bc80      	pop	{r7}
 800b61e:	4770      	bx	lr
 800b620:	20008000 	.word	0x20008000
 800b624:	20000a28 	.word	0x20000a28

0800b628 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b092      	sub	sp, #72	@ 0x48
 800b62c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b62e:	4b54      	ldr	r3, [pc, #336]	@ (800b780 <ProcessRadioTxDone+0x158>)
 800b630:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b634:	2b02      	cmp	r3, #2
 800b636:	d002      	beq.n	800b63e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800b638:	4b52      	ldr	r3, [pc, #328]	@ (800b784 <ProcessRadioTxDone+0x15c>)
 800b63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63c:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
    TimerStart( &MacCtx.RxWindowTimer2 );
    CRITICAL_SECTION_END( );
#else
    if (Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE)
 800b63e:	4b50      	ldr	r3, [pc, #320]	@ (800b780 <ProcessRadioTxDone+0x158>)
 800b640:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b644:	2b00      	cmp	r3, #0
 800b646:	d12b      	bne.n	800b6a0 <ProcessRadioTxDone+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b648:	f3ef 8310 	mrs	r3, PRIMASK
 800b64c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    {
        // Setup timers
        CRITICAL_SECTION_BEGIN( );
 800b650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800b652:	b672      	cpsid	i
}
 800b654:	bf00      	nop
        uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800b656:	f00f fdf3 	bl	801b240 <UTIL_TIMER_GetCurrentTime>
 800b65a:	4602      	mov	r2, r0
 800b65c:	4b4a      	ldr	r3, [pc, #296]	@ (800b788 <ProcessRadioTxDone+0x160>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	63bb      	str	r3, [r7, #56]	@ 0x38
        TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800b664:	4b49      	ldr	r3, [pc, #292]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b666:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800b66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	4619      	mov	r1, r3
 800b670:	4847      	ldr	r0, [pc, #284]	@ (800b790 <ProcessRadioTxDone+0x168>)
 800b672:	f00f fdbb 	bl	801b1ec <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer1 );
 800b676:	4846      	ldr	r0, [pc, #280]	@ (800b790 <ProcessRadioTxDone+0x168>)
 800b678:	f00f fcda 	bl	801b030 <UTIL_TIMER_Start>
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800b67c:	4b43      	ldr	r3, [pc, #268]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b67e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800b682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	4619      	mov	r1, r3
 800b688:	4842      	ldr	r0, [pc, #264]	@ (800b794 <ProcessRadioTxDone+0x16c>)
 800b68a:	f00f fdaf 	bl	801b1ec <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800b68e:	4841      	ldr	r0, [pc, #260]	@ (800b794 <ProcessRadioTxDone+0x16c>)
 800b690:	f00f fcce 	bl	801b030 <UTIL_TIMER_Start>
 800b694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b696:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b69a:	f383 8810 	msr	PRIMASK, r3
}
 800b69e:	e00e      	b.n	800b6be <ProcessRadioTxDone+0x96>
        CRITICAL_SECTION_END( );
    }
    else
    {
        MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b6a0:	4b3a      	ldr	r3, [pc, #232]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b6a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b6a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6aa:	4a38      	ldr	r2, [pc, #224]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b6ac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b6b0:	4a36      	ldr	r2, [pc, #216]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b6b2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b6b6:	f043 0310 	orr.w	r3, r3, #16
 800b6ba:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800b6be:	4b33      	ldr	r3, [pc, #204]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b6c0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01a      	beq.n	800b6fe <ProcessRadioTxDone+0xd6>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800b6c8:	2315      	movs	r3, #21
 800b6ca:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b6ce:	4b2c      	ldr	r3, [pc, #176]	@ (800b780 <ProcessRadioTxDone+0x158>)
 800b6d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b6d4:	f107 0220 	add.w	r2, r7, #32
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f006 fe39 	bl	8012352 <RegionGetPhyParam>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800b6e4:	4b29      	ldr	r3, [pc, #164]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b6e6:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4829      	ldr	r0, [pc, #164]	@ (800b798 <ProcessRadioTxDone+0x170>)
 800b6f2:	f00f fd7b 	bl	801b1ec <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800b6f6:	4828      	ldr	r0, [pc, #160]	@ (800b798 <ProcessRadioTxDone+0x170>)
 800b6f8:	f00f fc9a 	bl	801b030 <UTIL_TIMER_Start>
 800b6fc:	e003      	b.n	800b706 <ProcessRadioTxDone+0xde>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b6fe:	4b23      	ldr	r3, [pc, #140]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800b706:	4b20      	ldr	r3, [pc, #128]	@ (800b788 <ProcessRadioTxDone+0x160>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a1d      	ldr	r2, [pc, #116]	@ (800b780 <ProcessRadioTxDone+0x158>)
 800b70c:	62d3      	str	r3, [r2, #44]	@ 0x2c

     //Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800b70e:	4b1f      	ldr	r3, [pc, #124]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b710:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800b714:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800b716:	4b1c      	ldr	r3, [pc, #112]	@ (800b788 <ProcessRadioTxDone+0x160>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b71c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b720:	4618      	mov	r0, r3
 800b722:	f00f fbb9 	bl	801ae98 <SysTimeGetMcuTime>
 800b726:	4638      	mov	r0, r7
 800b728:	4b15      	ldr	r3, [pc, #84]	@ (800b780 <ProcessRadioTxDone+0x158>)
 800b72a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800b72e:	9200      	str	r2, [sp, #0]
 800b730:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800b734:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b738:	ca06      	ldmia	r2, {r1, r2}
 800b73a:	f00f fb0e 	bl	801ad5a <SysTimeSub>
 800b73e:	f107 0314 	add.w	r3, r7, #20
 800b742:	463a      	mov	r2, r7
 800b744:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b748:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800b74c:	4b0f      	ldr	r3, [pc, #60]	@ (800b78c <ProcessRadioTxDone+0x164>)
 800b74e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800b752:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800b754:	2301      	movs	r3, #1
 800b756:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b758:	4b09      	ldr	r3, [pc, #36]	@ (800b780 <ProcessRadioTxDone+0x158>)
 800b75a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <ProcessRadioTxDone+0x13e>
    {
        txDone.Joined  = false;
 800b762:	2300      	movs	r3, #0
 800b764:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800b766:	4b06      	ldr	r3, [pc, #24]	@ (800b780 <ProcessRadioTxDone+0x158>)
 800b768:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b76c:	f107 0208 	add.w	r2, r7, #8
 800b770:	4611      	mov	r1, r2
 800b772:	4618      	mov	r0, r3
 800b774:	f006 fe0e 	bl	8012394 <RegionSetBandTxDone>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

}
 800b778:	bf00      	nop
 800b77a:	3740      	adds	r7, #64	@ 0x40
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	20008000 	.word	0x20008000
 800b784:	08021f8c 	.word	0x08021f8c
 800b788:	20000fd8 	.word	0x20000fd8
 800b78c:	20000a28 	.word	0x20000a28
 800b790:	20000da8 	.word	0x20000da8
 800b794:	20000dc0 	.word	0x20000dc0
 800b798:	20000e28 	.word	0x20000e28

0800b79c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b7a0:	4b10      	ldr	r3, [pc, #64]	@ (800b7e4 <PrepareRxDoneAbort+0x48>)
 800b7a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b7a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b7e4 <PrepareRxDoneAbort+0x48>)
 800b7ac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800b7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e4 <PrepareRxDoneAbort+0x48>)
 800b7b2:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	f001 f9fa 	bl	800cbb4 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800b7c0:	4a08      	ldr	r2, [pc, #32]	@ (800b7e4 <PrepareRxDoneAbort+0x48>)
 800b7c2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b7c6:	f043 0302 	orr.w	r3, r3, #2
 800b7ca:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b7ce:	4a05      	ldr	r2, [pc, #20]	@ (800b7e4 <PrepareRxDoneAbort+0x48>)
 800b7d0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b7d4:	f043 0310 	orr.w	r3, r3, #16
 800b7d8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800b7dc:	f7ff ff0c 	bl	800b5f8 <UpdateRxSlotIdleState>
}
 800b7e0:	bf00      	nop
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20000a28 	.word	0x20000a28

0800b7e8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b0ab      	sub	sp, #172	@ 0xac
 800b7ec:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800b7ee:	2312      	movs	r3, #18
 800b7f0:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800b7f4:	4b81      	ldr	r3, [pc, #516]	@ (800b9fc <ProcessRadioRxDone+0x214>)
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint16_t size = RxDoneParams.Size;
 800b7fc:	4b7f      	ldr	r3, [pc, #508]	@ (800b9fc <ProcessRadioRxDone+0x214>)
 800b7fe:	891b      	ldrh	r3, [r3, #8]
 800b800:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800b804:	4b7d      	ldr	r3, [pc, #500]	@ (800b9fc <ProcessRadioRxDone+0x214>)
 800b806:	895b      	ldrh	r3, [r3, #10]
 800b808:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    int8_t snr = RxDoneParams.Snr;
 800b80c:	4b7b      	ldr	r3, [pc, #492]	@ (800b9fc <ProcessRadioRxDone+0x214>)
 800b80e:	7b1b      	ldrb	r3, [r3, #12]
 800b810:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    uint8_t pktHeaderLen = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    uint32_t downLinkCounter = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800b81e:	4b78      	ldr	r3, [pc, #480]	@ (800ba00 <ProcessRadioRxDone+0x218>)
 800b820:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b824:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint8_t multicast = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800b82e:	2301      	movs	r3, #1
 800b830:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800b834:	2301      	movs	r3, #1
 800b836:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800b83a:	4a72      	ldr	r2, [pc, #456]	@ (800ba04 <ProcessRadioRxDone+0x21c>)
 800b83c:	7813      	ldrb	r3, [r2, #0]
 800b83e:	f023 0301 	bic.w	r3, r3, #1
 800b842:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800b844:	4b70      	ldr	r3, [pc, #448]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800b84c:	4a6e      	ldr	r2, [pc, #440]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b84e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800b852:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800b856:	4a6c      	ldr	r2, [pc, #432]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b858:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b85c:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800b860:	4b69      	ldr	r3, [pc, #420]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b862:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800b866:	4b68      	ldr	r3, [pc, #416]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b868:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800b86c:	4b66      	ldr	r3, [pc, #408]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800b874:	4b64      	ldr	r3, [pc, #400]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800b87c:	4b62      	ldr	r3, [pc, #392]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800b884:	4b60      	ldr	r3, [pc, #384]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b886:	2200      	movs	r2, #0
 800b888:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800b88c:	4b5e      	ldr	r3, [pc, #376]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800b894:	4b5c      	ldr	r3, [pc, #368]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b896:	2200      	movs	r2, #0
 800b898:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800b89c:	4b5a      	ldr	r3, [pc, #360]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800b8a4:	4b58      	ldr	r3, [pc, #352]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b8ac:	4b56      	ldr	r3, [pc, #344]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800b8b4:	4b54      	ldr	r3, [pc, #336]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800b8bc:	4b52      	ldr	r3, [pc, #328]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800b8c4:	4b50      	ldr	r3, [pc, #320]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800b8cc:	4b4f      	ldr	r3, [pc, #316]	@ (800ba0c <ProcessRadioRxDone+0x224>)
 800b8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d0:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800b8d2:	4b4d      	ldr	r3, [pc, #308]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b8d4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b8dc:	484c      	ldr	r0, [pc, #304]	@ (800ba10 <ProcessRadioRxDone+0x228>)
 800b8de:	f00f fc15 	bl	801b10c <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800b8e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800b8ec:	f004 fdae 	bl	801044c <LoRaMacClassBRxBeacon>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00b      	beq.n	800b90e <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800b8f6:	4a44      	ldr	r2, [pc, #272]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b8f8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800b8fc:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800b900:	4a41      	ldr	r2, [pc, #260]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b902:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b906:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800b90a:	f000 bc75 	b.w	800c1f8 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b90e:	4b3c      	ldr	r3, [pc, #240]	@ (800ba00 <ProcessRadioRxDone+0x218>)
 800b910:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b914:	2b01      	cmp	r3, #1
 800b916:	d11e      	bne.n	800b956 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b918:	f004 fdab 	bl	8010472 <LoRaMacClassBIsPingExpected>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00a      	beq.n	800b938 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b922:	2000      	movs	r0, #0
 800b924:	f004 fd5c 	bl	80103e0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b928:	2000      	movs	r0, #0
 800b92a:	f004 fd7d 	bl	8010428 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800b92e:	4b36      	ldr	r3, [pc, #216]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b930:	2204      	movs	r2, #4
 800b932:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800b936:	e00e      	b.n	800b956 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b938:	f004 fda2 	bl	8010480 <LoRaMacClassBIsMulticastExpected>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d009      	beq.n	800b956 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b942:	2000      	movs	r0, #0
 800b944:	f004 fd56 	bl	80103f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b948:	2000      	movs	r0, #0
 800b94a:	f004 fd76 	bl	801043a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800b94e:	4b2e      	ldr	r3, [pc, #184]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b950:	2205      	movs	r2, #5
 800b952:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800b956:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d107      	bne.n	800b96e <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b95e:	4b2a      	ldr	r3, [pc, #168]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800b966:	f7ff ff19 	bl	800b79c <PrepareRxDoneAbort>
        return;
 800b96a:	f000 bc45 	b.w	800c1f8 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800b96e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	f887 208e 	strb.w	r2, [r7, #142]	@ 0x8e
 800b978:	461a      	mov	r2, r3
 800b97a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b97e:	4413      	add	r3, r2
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800b986:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800b98a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	3b01      	subs	r3, #1
 800b992:	2b06      	cmp	r3, #6
 800b994:	f200 8403 	bhi.w	800c19e <ProcessRadioRxDone+0x9b6>
 800b998:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a0 <ProcessRadioRxDone+0x1b8>)
 800b99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99e:	bf00      	nop
 800b9a0:	0800b9bd 	.word	0x0800b9bd
 800b9a4:	0800c19f 	.word	0x0800c19f
 800b9a8:	0800bbbb 	.word	0x0800bbbb
 800b9ac:	0800c19f 	.word	0x0800c19f
 800b9b0:	0800bbb3 	.word	0x0800bbb3
 800b9b4:	0800c19f 	.word	0x0800c19f
 800b9b8:	0800c143 	.word	0x0800c143
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800b9bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b9c0:	2b10      	cmp	r3, #16
 800b9c2:	d807      	bhi.n	800b9d4 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b9c4:	4b10      	ldr	r3, [pc, #64]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b9cc:	f7ff fee6 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800b9d0:	f000 bc12 	b.w	800c1f8 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800b9d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b9d8:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800b9da:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800b9e2:	4b07      	ldr	r3, [pc, #28]	@ (800ba00 <ProcessRadioRxDone+0x218>)
 800b9e4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d013      	beq.n	800ba14 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ba08 <ProcessRadioRxDone+0x220>)
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b9f4:	f7ff fed2 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800b9f8:	e3fe      	b.n	800c1f8 <ProcessRadioRxDone+0xa10>
 800b9fa:	bf00      	nop
 800b9fc:	20000fdc 	.word	0x20000fdc
 800ba00:	20008000 	.word	0x20008000
 800ba04:	20000fd4 	.word	0x20000fd4
 800ba08:	20000a28 	.word	0x20000a28
 800ba0c:	08021f8c 	.word	0x08021f8c
 800ba10:	20000dc0 	.word	0x20000dc0
            }

            SecureElementGetJoinEui( joinEui );
 800ba14:	f107 0308 	add.w	r3, r7, #8
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f00b feb7 	bl	801778c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800ba1e:	f107 0218 	add.w	r2, r7, #24
 800ba22:	f107 0308 	add.w	r3, r7, #8
 800ba26:	4619      	mov	r1, r3
 800ba28:	20ff      	movs	r0, #255	@ 0xff
 800ba2a:	f005 ff17 	bl	801185c <LoRaMacCryptoHandleJoinAccept>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ba3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ba3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	b25b      	sxtb	r3, r3
 800ba46:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ba48:	4bb1      	ldr	r3, [pc, #708]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800ba4a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ba4e:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800ba50:	4baf      	ldr	r3, [pc, #700]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800ba52:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ba56:	1d39      	adds	r1, r7, #4
 800ba58:	2207      	movs	r2, #7
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f006 fcc7 	bl	80123ee <RegionVerify>
 800ba60:	4603      	mov	r3, r0
 800ba62:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800ba66:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f040 8095 	bne.w	800bb9a <ProcessRadioRxDone+0x3b2>
 800ba70:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 8090 	beq.w	800bb9a <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ba7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4ba3      	ldr	r3, [pc, #652]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800ba82:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ba86:	4ba2      	ldr	r3, [pc, #648]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800ba88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ba8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba90:	021b      	lsls	r3, r3, #8
 800ba92:	4313      	orrs	r3, r2
 800ba94:	4a9e      	ldr	r2, [pc, #632]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800ba96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ba9a:	4b9d      	ldr	r3, [pc, #628]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800ba9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800baa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800baa4:	041b      	lsls	r3, r3, #16
 800baa6:	4313      	orrs	r3, r2
 800baa8:	4a99      	ldr	r2, [pc, #612]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800baaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab0:	4a97      	ldr	r2, [pc, #604]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bab2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800bab6:	4b96      	ldr	r3, [pc, #600]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bab8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800babc:	4619      	mov	r1, r3
 800babe:	2002      	movs	r0, #2
 800bac0:	f00b fe4a 	bl	8017758 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800bac4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bac8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	461a      	mov	r2, r3
 800bad0:	4b8f      	ldr	r3, [pc, #572]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bad2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bada:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	461a      	mov	r2, r3
 800bae2:	4b8b      	ldr	r3, [pc, #556]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bae4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bae8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800baec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	4b86      	ldr	r3, [pc, #536]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800baf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800bafa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bafe:	461a      	mov	r2, r3
 800bb00:	4b83      	ldr	r3, [pc, #524]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb02:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800bb04:	4b82      	ldr	r3, [pc, #520]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800bb0c:	4b80      	ldr	r3, [pc, #512]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb0e:	2201      	movs	r2, #1
 800bb10:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800bb12:	4b7f      	ldr	r3, [pc, #508]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bb1a:	fb02 f303 	mul.w	r3, r2, r3
 800bb1e:	4a7c      	ldr	r2, [pc, #496]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb20:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800bb22:	4b7b      	ldr	r3, [pc, #492]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb26:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bb2a:	4a79      	ldr	r2, [pc, #484]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb2c:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800bb2e:	4b78      	ldr	r3, [pc, #480]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb30:	2201      	movs	r2, #1
 800bb32:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800bb36:	4b76      	ldr	r3, [pc, #472]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800bb3e:	f107 0318 	add.w	r3, r7, #24
 800bb42:	3312      	adds	r3, #18
 800bb44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800bb48:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	3b11      	subs	r3, #17
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800bb56:	4b6f      	ldr	r3, [pc, #444]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bb58:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800bb5c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800bb60:	4b6b      	ldr	r3, [pc, #428]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bb66:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f006 fc5f 	bl	8012430 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bb72:	4b67      	ldr	r3, [pc, #412]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bb74:	2202      	movs	r2, #2
 800bb76:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800bb7a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f005 f97a 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 8311 	beq.w	800c1ae <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800bb8c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800bb90:	4619      	mov	r1, r3
 800bb92:	2000      	movs	r0, #0
 800bb94:	f005 f8e4 	bl	8010d60 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800bb98:	e309      	b.n	800c1ae <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	f005 f96c 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 8302 	beq.w	800c1ac <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800bba8:	2101      	movs	r1, #1
 800bbaa:	2007      	movs	r0, #7
 800bbac:	f005 f8d8 	bl	8010d60 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800bbb0:	e2fc      	b.n	800c1ac <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bbb2:	4b58      	ldr	r3, [pc, #352]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bbba:	4b55      	ldr	r3, [pc, #340]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bbbc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bbc0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800bbc4:	4b53      	ldr	r3, [pc, #332]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bbc6:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800bbca:	b25b      	sxtb	r3, r3
 800bbcc:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bbd0:	230d      	movs	r3, #13
 800bbd2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800bbd6:	4b4e      	ldr	r3, [pc, #312]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bbd8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bbe0:	230e      	movs	r3, #14
 800bbe2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbe6:	4b4a      	ldr	r3, [pc, #296]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bbe8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bbec:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f006 fbad 	bl	8012352 <RegionGetPhyParam>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	673b      	str	r3, [r7, #112]	@ 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800bbfc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bc00:	3b0d      	subs	r3, #13
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	b21b      	sxth	r3, r3
 800bc06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc0a:	b21a      	sxth	r2, r3
 800bc0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc0e:	b21b      	sxth	r3, r3
 800bc10:	429a      	cmp	r2, r3
 800bc12:	dc03      	bgt.n	800bc1c <ProcessRadioRxDone+0x434>
 800bc14:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bc18:	2b0b      	cmp	r3, #11
 800bc1a:	d806      	bhi.n	800bc2a <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc1c:	4b3d      	ldr	r3, [pc, #244]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bc24:	f7ff fdba 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800bc28:	e2e6      	b.n	800c1f8 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800bc2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc2e:	643b      	str	r3, [r7, #64]	@ 0x40
            macMsgData.BufSize = size;
 800bc30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800bc3a:	4b37      	ldr	r3, [pc, #220]	@ (800bd18 <ProcessRadioRxDone+0x530>)
 800bc3c:	667b      	str	r3, [r7, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800bc3e:	23ff      	movs	r3, #255	@ 0xff
 800bc40:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800bc44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f006 f904 	bl	8011e56 <LoRaMacParserData>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d006      	beq.n	800bc62 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc54:	4b2f      	ldr	r3, [pc, #188]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bc5c:	f7ff fd9e 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800bc60:	e2ca      	b.n	800c1f8 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bc62:	4b2b      	ldr	r3, [pc, #172]	@ (800bd10 <ProcessRadioRxDone+0x528>)
 800bc64:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d132      	bne.n	800bcd2 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800bc6c:	f004 fc01 	bl	8010472 <LoRaMacClassBIsPingExpected>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d014      	beq.n	800bca0 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bc76:	2000      	movs	r0, #0
 800bc78:	f004 fbb2 	bl	80103e0 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	f004 fbd3 	bl	8010428 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bc82:	4b24      	ldr	r3, [pc, #144]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bc84:	2204      	movs	r2, #4
 800bc86:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bc8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc8c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bc90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	4619      	mov	r1, r3
 800bc98:	4610      	mov	r0, r2
 800bc9a:	f004 fc73 	bl	8010584 <LoRaMacClassBSetFPendingBit>
 800bc9e:	e018      	b.n	800bcd2 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bca0:	f004 fbee 	bl	8010480 <LoRaMacClassBIsMulticastExpected>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d013      	beq.n	800bcd2 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bcaa:	2000      	movs	r0, #0
 800bcac:	f004 fba2 	bl	80103f4 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f004 fbc2 	bl	801043a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bcb6:	4b17      	ldr	r3, [pc, #92]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bcb8:	2205      	movs	r2, #5
 800bcba:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bcbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcc0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bcc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	4619      	mov	r1, r3
 800bccc:	4610      	mov	r0, r2
 800bcce:	f004 fc59 	bl	8010584 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800bcd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcd4:	4a0f      	ldr	r2, [pc, #60]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bcd6:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800bcda:	f107 0212 	add.w	r2, r7, #18
 800bcde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f002 fd8d 	bl	800e804 <DetermineFrameType>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d006      	beq.n	800bcfe <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bcf0:	4b08      	ldr	r3, [pc, #32]	@ (800bd14 <ProcessRadioRxDone+0x52c>)
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bcf8:	f7ff fd50 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800bcfc:	e27c      	b.n	800c1f8 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            downLinkCounter = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800bd0e:	e055      	b.n	800bdbc <ProcessRadioRxDone+0x5d4>
 800bd10:	20008000 	.word	0x20008000
 800bd14:	20000a28 	.word	0x20000a28
 800bd18:	20000c60 	.word	0x20000c60
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bd1c:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd20:	499f      	ldr	r1, [pc, #636]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bd22:	4613      	mov	r3, r2
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	4413      	add	r3, r2
 800bd28:	011b      	lsls	r3, r3, #4
 800bd2a:	440b      	add	r3, r1
 800bd2c:	33ec      	adds	r3, #236	@ 0xec
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d13d      	bne.n	800bdb2 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800bd36:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd3a:	4999      	ldr	r1, [pc, #612]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	4413      	add	r3, r2
 800bd42:	011b      	lsls	r3, r3, #4
 800bd44:	440b      	add	r3, r1
 800bd46:	33e9      	adds	r3, #233	@ 0xe9
 800bd48:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d031      	beq.n	800bdb2 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800bd54:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd58:	4991      	ldr	r1, [pc, #580]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	4413      	add	r3, r2
 800bd60:	011b      	lsls	r3, r3, #4
 800bd62:	440b      	add	r3, r1
 800bd64:	33ea      	adds	r3, #234	@ 0xea
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800bd6c:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd70:	498b      	ldr	r1, [pc, #556]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bd72:	4613      	mov	r3, r2
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	4413      	add	r3, r2
 800bd78:	011b      	lsls	r3, r3, #4
 800bd7a:	440b      	add	r3, r1
 800bd7c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800bd86:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd8a:	4985      	ldr	r1, [pc, #532]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	4413      	add	r3, r2
 800bd92:	011b      	lsls	r3, r3, #4
 800bd94:	440b      	add	r3, r1
 800bd96:	33ec      	adds	r3, #236	@ 0xec
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800bd9e:	4b80      	ldr	r3, [pc, #512]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bda0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d10e      	bne.n	800bdc6 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800bda8:	4b7e      	ldr	r3, [pc, #504]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bdaa:	2203      	movs	r2, #3
 800bdac:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800bdb0:	e009      	b.n	800bdc6 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bdb2:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800bdbc:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0ab      	beq.n	800bd1c <ProcessRadioRxDone+0x534>
 800bdc4:	e000      	b.n	800bdc8 <ProcessRadioRxDone+0x5e0>
                    break;
 800bdc6:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800bdc8:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d117      	bne.n	800be00 <ProcessRadioRxDone+0x618>
 800bdd0:	7cbb      	ldrb	r3, [r7, #18]
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d10d      	bne.n	800bdf2 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800bdd6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d106      	bne.n	800bdf2 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800bde4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bde8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdec:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d006      	beq.n	800be00 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdf2:	4b6c      	ldr	r3, [pc, #432]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bdfa:	f7ff fccf 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800bdfe:	e1fb      	b.n	800c1f8 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800be00:	7cb9      	ldrb	r1, [r7, #18]
 800be02:	4c67      	ldr	r4, [pc, #412]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800be04:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800be08:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800be0c:	f107 0314 	add.w	r3, r7, #20
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	f107 0313 	add.w	r3, r7, #19
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800be1c:	f000 fee4 	bl	800cbe8 <GetFCntDown>
 800be20:	4603      	mov	r3, r0
 800be22:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be26:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d017      	beq.n	800be5e <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800be2e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800be32:	2b07      	cmp	r3, #7
 800be34:	d104      	bne.n	800be40 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800be36:	4b5b      	ldr	r3, [pc, #364]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800be38:	2208      	movs	r2, #8
 800be3a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800be3e:	e003      	b.n	800be48 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be40:	4b58      	ldr	r3, [pc, #352]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800be42:	2201      	movs	r2, #1
 800be44:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	4a56      	ldr	r2, [pc, #344]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800be4c:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	4a54      	ldr	r2, [pc, #336]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800be54:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800be58:	f7ff fca0 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800be5c:	e1cc      	b.n	800c1f8 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800be5e:	7cfa      	ldrb	r2, [r7, #19]
 800be60:	6979      	ldr	r1, [r7, #20]
 800be62:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800be66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	460b      	mov	r3, r1
 800be6e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800be72:	f005 fe53 	bl	8011b1c <LoRaMacCryptoUnsecureMessage>
 800be76:	4603      	mov	r3, r0
 800be78:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be7c:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00f      	beq.n	800bea4 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800be84:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d104      	bne.n	800be96 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800be8c:	4b45      	ldr	r3, [pc, #276]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800be8e:	220a      	movs	r2, #10
 800be90:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800be94:	e003      	b.n	800be9e <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800be96:	4b43      	ldr	r3, [pc, #268]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800be98:	220b      	movs	r2, #11
 800be9a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800be9e:	f7ff fc7d 	bl	800b79c <PrepareRxDoneAbort>
                return;
 800bea2:	e1a9      	b.n	800c1f8 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bea4:	4b3f      	ldr	r3, [pc, #252]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800beac:	4a3d      	ldr	r2, [pc, #244]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800beae:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800beb2:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800beb6:	4b3b      	ldr	r3, [pc, #236]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800beb8:	2200      	movs	r2, #0
 800beba:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800bebe:	4b39      	ldr	r3, [pc, #228]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	4a36      	ldr	r2, [pc, #216]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800beca:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	4a34      	ldr	r2, [pc, #208]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bed2:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800bed6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800beda:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bf14      	ite	ne
 800bee4:	2301      	movne	r3, #1
 800bee6:	2300      	moveq	r3, #0
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	4b2e      	ldr	r3, [pc, #184]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800beec:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bef0:	4b2c      	ldr	r3, [pc, #176]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800bef8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800befc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	bf14      	ite	ne
 800bf06:	2301      	movne	r3, #1
 800bf08:	2300      	moveq	r3, #0
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	4b25      	ldr	r3, [pc, #148]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf0e:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800bf12:	4b24      	ldr	r3, [pc, #144]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf14:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d004      	beq.n	800bf26 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800bf1c:	4b21      	ldr	r3, [pc, #132]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf1e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d106      	bne.n	800bf34 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800bf26:	4b1e      	ldr	r3, [pc, #120]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800bf2c:	4b1c      	ldr	r3, [pc, #112]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800bf34:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d104      	bne.n	800bf46 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800bf3c:	4b19      	ldr	r3, [pc, #100]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800bf44:	e03a      	b.n	800bfbc <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800bf46:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800bf4a:	f023 031f 	bic.w	r3, r3, #31
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2ba0      	cmp	r3, #160	@ 0xa0
 800bf52:	d12b      	bne.n	800bfac <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800bf54:	4b12      	ldr	r3, [pc, #72]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800bf5c:	4b10      	ldr	r3, [pc, #64]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bf5e:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d102      	bne.n	800bf6c <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800bf66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf68:	4a0d      	ldr	r2, [pc, #52]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bf6a:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bf6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bf74:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf76:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d01e      	beq.n	800bfbc <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800bf7e:	4b09      	ldr	r3, [pc, #36]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf80:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d019      	beq.n	800bfbc <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800bf88:	4b05      	ldr	r3, [pc, #20]	@ (800bfa0 <ProcessRadioRxDone+0x7b8>)
 800bf8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf8e:	4a05      	ldr	r2, [pc, #20]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf90:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800bf94:	4b04      	ldr	r3, [pc, #16]	@ (800bfa8 <ProcessRadioRxDone+0x7c0>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a02      	ldr	r2, [pc, #8]	@ (800bfa4 <ProcessRadioRxDone+0x7bc>)
 800bf9a:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800bf9e:	e00d      	b.n	800bfbc <ProcessRadioRxDone+0x7d4>
 800bfa0:	20008000 	.word	0x20008000
 800bfa4:	20000a28 	.word	0x20000a28
 800bfa8:	20000fdc 	.word	0x20000fdc
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800bfac:	4b94      	ldr	r3, [pc, #592]	@ (800c200 <ProcessRadioRxDone+0xa18>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bfb4:	4b93      	ldr	r3, [pc, #588]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800bfbc:	4b90      	ldr	r3, [pc, #576]	@ (800c200 <ProcessRadioRxDone+0xa18>)
 800bfbe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <ProcessRadioRxDone+0x7ec>
 800bfc6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bfca:	f003 0310 	and.w	r3, r3, #16
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d008      	beq.n	800bfe6 <ProcessRadioRxDone+0x7fe>
 800bfd4:	4b8a      	ldr	r3, [pc, #552]	@ (800c200 <ProcessRadioRxDone+0xa18>)
 800bfd6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d103      	bne.n	800bfe6 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800bfde:	4b89      	ldr	r3, [pc, #548]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800bfe6:	4b87      	ldr	r3, [pc, #540]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800bfe8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800bfec:	4a85      	ldr	r2, [pc, #532]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800bfee:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800bff2:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 800bff6:	4618      	mov	r0, r3
 800bff8:	f001 ff98 	bl	800df2c <RemoveMacCommands>

            switch( fType )
 800bffc:	7cbb      	ldrb	r3, [r7, #18]
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d873      	bhi.n	800c0ea <ProcessRadioRxDone+0x902>
 800c002:	a201      	add	r2, pc, #4	@ (adr r2, 800c008 <ProcessRadioRxDone+0x820>)
 800c004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c008:	0800c019 	.word	0x0800c019
 800c00c:	0800c069 	.word	0x0800c069
 800c010:	0800c09f 	.word	0x0800c09f
 800c014:	0800c0c5 	.word	0x0800c0c5
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c018:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c01c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c020:	b2db      	uxtb	r3, r3
 800c022:	461c      	mov	r4, r3
 800c024:	4b77      	ldr	r3, [pc, #476]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c026:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c02a:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800c02e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800c032:	f102 0010 	add.w	r0, r2, #16
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	460b      	mov	r3, r1
 800c03a:	4622      	mov	r2, r4
 800c03c:	2100      	movs	r1, #0
 800c03e:	f000 ff4f 	bl	800cee0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c042:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c046:	4b6f      	ldr	r3, [pc, #444]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c048:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c04c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c04e:	4a6d      	ldr	r2, [pc, #436]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c050:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c054:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800c058:	4b6a      	ldr	r3, [pc, #424]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c05a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c05e:	4b69      	ldr	r3, [pc, #420]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c060:	2201      	movs	r2, #1
 800c062:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800c066:	e047      	b.n	800c0f8 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c068:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c06c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c070:	b2db      	uxtb	r3, r3
 800c072:	461c      	mov	r4, r3
 800c074:	4b63      	ldr	r3, [pc, #396]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c076:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c07a:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800c07e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800c082:	f102 0010 	add.w	r0, r2, #16
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	460b      	mov	r3, r1
 800c08a:	4622      	mov	r2, r4
 800c08c:	2100      	movs	r1, #0
 800c08e:	f000 ff27 	bl	800cee0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c092:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c096:	4b5b      	ldr	r3, [pc, #364]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c098:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800c09c:	e02c      	b.n	800c0f8 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800c09e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800c0a0:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800c0a4:	4b57      	ldr	r3, [pc, #348]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c0a6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c0aa:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	f000 ff14 	bl	800cee0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c0b8:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c0bc:	4b51      	ldr	r3, [pc, #324]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c0be:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800c0c2:	e019      	b.n	800c0f8 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c0c4:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c0c8:	4b4e      	ldr	r3, [pc, #312]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c0ca:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c0ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0d0:	4a4c      	ldr	r2, [pc, #304]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c0d2:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c0d6:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800c0da:	4b4a      	ldr	r3, [pc, #296]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c0dc:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c0e0:	4b48      	ldr	r3, [pc, #288]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800c0e8:	e006      	b.n	800c0f8 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c0ea:	4b46      	ldr	r3, [pc, #280]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800c0f2:	f7ff fb53 	bl	800b79c <PrepareRxDoneAbort>
                    break;
 800c0f6:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800c0f8:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800c0fc:	2be0      	cmp	r3, #224	@ 0xe0
 800c0fe:	d118      	bne.n	800c132 <ProcessRadioRxDone+0x94a>
 800c100:	4b3f      	ldr	r3, [pc, #252]	@ (800c200 <ProcessRadioRxDone+0xa18>)
 800c102:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800c106:	f083 0301 	eor.w	r3, r3, #1
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d010      	beq.n	800c132 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c110:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c114:	4b3b      	ldr	r3, [pc, #236]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c116:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800c11a:	4b3a      	ldr	r3, [pc, #232]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800c122:	4b38      	ldr	r3, [pc, #224]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c124:	2200      	movs	r2, #0
 800c126:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800c12a:	4b36      	ldr	r3, [pc, #216]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c132:	4a34      	ldr	r2, [pc, #208]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c134:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c138:	f043 0302 	orr.w	r3, r3, #2
 800c13c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800c140:	e035      	b.n	800c1ae <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c142:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800c146:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c14a:	18d1      	adds	r1, r2, r3
 800c14c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800c150:	b29b      	uxth	r3, r3
 800c152:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	b29b      	uxth	r3, r3
 800c15a:	461a      	mov	r2, r3
 800c15c:	482a      	ldr	r0, [pc, #168]	@ (800c208 <ProcessRadioRxDone+0xa20>)
 800c15e:	f00b fb96 	bl	801788e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c162:	4b28      	ldr	r3, [pc, #160]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c164:	2203      	movs	r2, #3
 800c166:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c16a:	4b26      	ldr	r3, [pc, #152]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c172:	4b24      	ldr	r3, [pc, #144]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c174:	4a24      	ldr	r2, [pc, #144]	@ (800c208 <ProcessRadioRxDone+0xa20>)
 800c176:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c17a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	b2da      	uxtb	r2, r3
 800c188:	4b1e      	ldr	r3, [pc, #120]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c18a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c18e:	4a1d      	ldr	r2, [pc, #116]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c190:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c194:	f043 0302 	orr.w	r3, r3, #2
 800c198:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800c19c:	e007      	b.n	800c1ae <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c19e:	4b19      	ldr	r3, [pc, #100]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800c1a6:	f7ff faf9 	bl	800b79c <PrepareRxDoneAbort>
            break;
 800c1aa:	e000      	b.n	800c1ae <ProcessRadioRxDone+0x9c6>
            break;
 800c1ac:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c1ae:	4b15      	ldr	r3, [pc, #84]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c1b0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d004      	beq.n	800c1c2 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800c1b8:	4b12      	ldr	r3, [pc, #72]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c1ba:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d10c      	bne.n	800c1dc <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800c1c2:	4b10      	ldr	r3, [pc, #64]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c1c4:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800c1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c1ce:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d002      	beq.n	800c1dc <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f000 fcec 	bl	800cbb4 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800c1dc:	4b09      	ldr	r3, [pc, #36]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c1de:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d006      	beq.n	800c1f4 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800c1e6:	4a07      	ldr	r2, [pc, #28]	@ (800c204 <ProcessRadioRxDone+0xa1c>)
 800c1e8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c1ec:	f043 0310 	orr.w	r3, r3, #16
 800c1f0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800c1f4:	f7ff fa00 	bl	800b5f8 <UpdateRxSlotIdleState>
}
 800c1f8:	37a4      	adds	r7, #164	@ 0xa4
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd90      	pop	{r4, r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20008000 	.word	0x20008000
 800c204:	20000a28 	.word	0x20000a28
 800c208:	20000c60 	.word	0x20000c60

0800c20c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c210:	4b11      	ldr	r3, [pc, #68]	@ (800c258 <ProcessRadioTxTimeout+0x4c>)
 800c212:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c216:	2b02      	cmp	r3, #2
 800c218:	d002      	beq.n	800c220 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800c21a:	4b10      	ldr	r3, [pc, #64]	@ (800c25c <ProcessRadioTxTimeout+0x50>)
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800c220:	f7ff f9ea 	bl	800b5f8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c224:	4b0e      	ldr	r3, [pc, #56]	@ (800c260 <ProcessRadioTxTimeout+0x54>)
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c22c:	2002      	movs	r0, #2
 800c22e:	f004 fdef 	bl	8010e10 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c232:	4b0b      	ldr	r3, [pc, #44]	@ (800c260 <ProcessRadioTxTimeout+0x54>)
 800c234:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800c23c:	4b08      	ldr	r3, [pc, #32]	@ (800c260 <ProcessRadioTxTimeout+0x54>)
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c244:	4a06      	ldr	r2, [pc, #24]	@ (800c260 <ProcessRadioTxTimeout+0x54>)
 800c246:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c24a:	f043 0310 	orr.w	r3, r3, #16
 800c24e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800c252:	bf00      	nop
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20008000 	.word	0x20008000
 800c25c:	08021f8c 	.word	0x08021f8c
 800c260:	20000a28 	.word	0x20000a28

0800c264 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	460a      	mov	r2, r1
 800c26e:	71fb      	strb	r3, [r7, #7]
 800c270:	4613      	mov	r3, r2
 800c272:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800c274:	2300      	movs	r3, #0
 800c276:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c278:	4b3d      	ldr	r3, [pc, #244]	@ (800c370 <HandleRadioRxErrorTimeout+0x10c>)
 800c27a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d002      	beq.n	800c288 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800c282:	4b3c      	ldr	r3, [pc, #240]	@ (800c374 <HandleRadioRxErrorTimeout+0x110>)
 800c284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c286:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c288:	f004 f8ec 	bl	8010464 <LoRaMacClassBIsBeaconExpected>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d007      	beq.n	800c2a2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800c292:	2002      	movs	r0, #2
 800c294:	f004 f89a 	bl	80103cc <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c298:	2000      	movs	r0, #0
 800c29a:	f004 f8bc 	bl	8010416 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c2a2:	4b33      	ldr	r3, [pc, #204]	@ (800c370 <HandleRadioRxErrorTimeout+0x10c>)
 800c2a4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d119      	bne.n	800c2e0 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c2ac:	f004 f8e1 	bl	8010472 <LoRaMacClassBIsPingExpected>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d007      	beq.n	800c2c6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	f004 f892 	bl	80103e0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c2bc:	2000      	movs	r0, #0
 800c2be:	f004 f8b3 	bl	8010428 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c2c6:	f004 f8db 	bl	8010480 <LoRaMacClassBIsMulticastExpected>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d007      	beq.n	800c2e0 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	f004 f88f 	bl	80103f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f004 f8af 	bl	801043a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	f083 0301 	eor.w	r3, r3, #1
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d03b      	beq.n	800c364 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c2ec:	4b22      	ldr	r3, [pc, #136]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c2ee:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d122      	bne.n	800c33c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800c2f6:	4b20      	ldr	r3, [pc, #128]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c2f8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d003      	beq.n	800c308 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800c300:	4a1d      	ldr	r2, [pc, #116]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c302:	79fb      	ldrb	r3, [r7, #7]
 800c304:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800c308:	79fb      	ldrb	r3, [r7, #7]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f004 fd80 	bl	8010e10 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800c310:	4b17      	ldr	r3, [pc, #92]	@ (800c370 <HandleRadioRxErrorTimeout+0x10c>)
 800c312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c314:	4618      	mov	r0, r3
 800c316:	f00e ffa5 	bl	801b264 <UTIL_TIMER_GetElapsedTime>
 800c31a:	4602      	mov	r2, r0
 800c31c:	4b16      	ldr	r3, [pc, #88]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c31e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800c322:	429a      	cmp	r2, r3
 800c324:	d31e      	bcc.n	800c364 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800c326:	4815      	ldr	r0, [pc, #84]	@ (800c37c <HandleRadioRxErrorTimeout+0x118>)
 800c328:	f00e fef0 	bl	801b10c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c32c:	4a12      	ldr	r2, [pc, #72]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c32e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c332:	f043 0310 	orr.w	r3, r3, #16
 800c336:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800c33a:	e013      	b.n	800c364 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800c33c:	4b0e      	ldr	r3, [pc, #56]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c33e:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800c346:	4a0c      	ldr	r2, [pc, #48]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c348:	79bb      	ldrb	r3, [r7, #6]
 800c34a:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800c34e:	79bb      	ldrb	r3, [r7, #6]
 800c350:	4618      	mov	r0, r3
 800c352:	f004 fd5d 	bl	8010e10 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800c356:	4a08      	ldr	r2, [pc, #32]	@ (800c378 <HandleRadioRxErrorTimeout+0x114>)
 800c358:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c35c:	f043 0310 	orr.w	r3, r3, #16
 800c360:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800c364:	f7ff f948 	bl	800b5f8 <UpdateRxSlotIdleState>
}
 800c368:	bf00      	nop
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20008000 	.word	0x20008000
 800c374:	08021f8c 	.word	0x08021f8c
 800c378:	20000a28 	.word	0x20000a28
 800c37c:	20000dc0 	.word	0x20000dc0

0800c380 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c384:	2106      	movs	r1, #6
 800c386:	2005      	movs	r0, #5
 800c388:	f7ff ff6c 	bl	800c264 <HandleRadioRxErrorTimeout>
}
 800c38c:	bf00      	nop
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c394:	2104      	movs	r1, #4
 800c396:	2003      	movs	r0, #3
 800c398:	f7ff ff64 	bl	800c264 <HandleRadioRxErrorTimeout>
}
 800c39c:	bf00      	nop
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3aa:	607b      	str	r3, [r7, #4]
  return(result);
 800c3ac:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800c3ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3b0:	b672      	cpsid	i
}
 800c3b2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800c3b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c42c <LoRaMacHandleIrqEvents+0x8c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800c3ba:	4b1c      	ldr	r3, [pc, #112]	@ (800c42c <LoRaMacHandleIrqEvents+0x8c>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f383 8810 	msr	PRIMASK, r3
}
 800c3ca:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d027      	beq.n	800c422 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800c3d2:	783b      	ldrb	r3, [r7, #0]
 800c3d4:	f003 0320 	and.w	r3, r3, #32
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800c3de:	f7ff f923 	bl	800b628 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800c3e2:	783b      	ldrb	r3, [r7, #0]
 800c3e4:	f003 0310 	and.w	r3, r3, #16
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800c3ee:	f7ff f9fb 	bl	800b7e8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800c3f2:	783b      	ldrb	r3, [r7, #0]
 800c3f4:	f003 0308 	and.w	r3, r3, #8
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800c3fe:	f7ff ff05 	bl	800c20c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800c402:	783b      	ldrb	r3, [r7, #0]
 800c404:	f003 0304 	and.w	r3, r3, #4
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800c40e:	f7ff ffb7 	bl	800c380 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800c412:	783b      	ldrb	r3, [r7, #0]
 800c414:	f003 0302 	and.w	r3, r3, #2
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d001      	beq.n	800c422 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800c41e:	f7ff ffb7 	bl	800c390 <ProcessRadioRxTimeout>
        }
    }
}
 800c422:	bf00      	nop
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	20000fd4 	.word	0x20000fd4

0800c430 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800c430:	b480      	push	{r7}
 800c432:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800c434:	4b10      	ldr	r3, [pc, #64]	@ (800c478 <LoRaMacIsBusy+0x48>)
 800c436:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d101      	bne.n	800c442 <LoRaMacIsBusy+0x12>
    {
        return false;
 800c43e:	2300      	movs	r3, #0
 800c440:	e015      	b.n	800c46e <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800c442:	4b0e      	ldr	r3, [pc, #56]	@ (800c47c <LoRaMacIsBusy+0x4c>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <LoRaMacIsBusy+0x24>
    {
        return true;
 800c450:	2301      	movs	r3, #1
 800c452:	e00c      	b.n	800c46e <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c454:	4b08      	ldr	r3, [pc, #32]	@ (800c478 <LoRaMacIsBusy+0x48>)
 800c456:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800c45e:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <LoRaMacIsBusy+0x48>)
 800c460:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c464:	2b01      	cmp	r3, #1
 800c466:	d101      	bne.n	800c46c <LoRaMacIsBusy+0x3c>
    {
        return false;
 800c468:	2300      	movs	r3, #0
 800c46a:	e000      	b.n	800c46e <LoRaMacIsBusy+0x3e>
    }
    return true;
 800c46c:	2301      	movs	r3, #1
}
 800c46e:	4618      	mov	r0, r3
 800c470:	46bd      	mov	sp, r7
 800c472:	bc80      	pop	{r7}
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	20000a28 	.word	0x20000a28
 800c47c:	20000fd4 	.word	0x20000fd4

0800c480 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800c484:	4b05      	ldr	r3, [pc, #20]	@ (800c49c <LoRaMacIsStopped+0x1c>)
 800c486:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d101      	bne.n	800c492 <LoRaMacIsStopped+0x12>
    {
        return true;
 800c48e:	2301      	movs	r3, #1
 800c490:	e000      	b.n	800c494 <LoRaMacIsStopped+0x14>
    }
    return false;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	46bd      	mov	sp, r7
 800c498:	bc80      	pop	{r7}
 800c49a:	4770      	bx	lr
 800c49c:	20000a28 	.word	0x20000a28

0800c4a0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800c4aa:	4a04      	ldr	r2, [pc, #16]	@ (800c4bc <LoRaMacEnableRequests+0x1c>)
 800c4ac:	79fb      	ldrb	r3, [r7, #7]
 800c4ae:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800c4b2:	bf00      	nop
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bc80      	pop	{r7}
 800c4ba:	4770      	bx	lr
 800c4bc:	20000a28 	.word	0x20000a28

0800c4c0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800c4c6:	4b2c      	ldr	r3, [pc, #176]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c4c8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c4cc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800c4ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c4d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d14a      	bne.n	800c56e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c4d8:	4b27      	ldr	r3, [pc, #156]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c4da:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c4de:	f003 0301 	and.w	r3, r3, #1
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800c4e8:	4a23      	ldr	r2, [pc, #140]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c4ea:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c4ee:	f023 0301 	bic.w	r3, r3, #1
 800c4f2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c4f6:	4b20      	ldr	r3, [pc, #128]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c4f8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c4fc:	f003 0304 	and.w	r3, r3, #4
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	d006      	beq.n	800c514 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c506:	4a1c      	ldr	r2, [pc, #112]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c508:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c50c:	f023 0304 	bic.w	r3, r3, #4
 800c510:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c514:	2001      	movs	r0, #1
 800c516:	f7ff ffc3 	bl	800c4a0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800c51a:	793b      	ldrb	r3, [r7, #4]
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d005      	beq.n	800c532 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800c526:	4b14      	ldr	r3, [pc, #80]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c528:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4813      	ldr	r0, [pc, #76]	@ (800c57c <LoRaMacHandleRequestEvents+0xbc>)
 800c530:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800c532:	793b      	ldrb	r3, [r7, #4]
 800c534:	f003 0304 	and.w	r3, r3, #4
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00e      	beq.n	800c55c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800c53e:	4810      	ldr	r0, [pc, #64]	@ (800c580 <LoRaMacHandleRequestEvents+0xc0>)
 800c540:	f004 fcb4 	bl	8010eac <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800c544:	f004 fd04 	bl	8010f50 <LoRaMacConfirmQueueGetCnt>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d006      	beq.n	800c55c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c54e:	4a0a      	ldr	r2, [pc, #40]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c550:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c554:	f043 0304 	orr.w	r3, r3, #4
 800c558:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800c55c:	f003 ffae 	bl	80104bc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800c560:	4a05      	ldr	r2, [pc, #20]	@ (800c578 <LoRaMacHandleRequestEvents+0xb8>)
 800c562:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c566:	f023 0310 	bic.w	r3, r3, #16
 800c56a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20000a28 	.word	0x20000a28
 800c57c:	20000e68 	.word	0x20000e68
 800c580:	20000e7c 	.word	0x20000e7c

0800c584 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c588:	4b16      	ldr	r3, [pc, #88]	@ (800c5e4 <LoRaMacHandleIndicationEvents+0x60>)
 800c58a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c58e:	f003 0308 	and.w	r3, r3, #8
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00d      	beq.n	800c5b4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c598:	4a12      	ldr	r2, [pc, #72]	@ (800c5e4 <LoRaMacHandleIndicationEvents+0x60>)
 800c59a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c59e:	f023 0308 	bic.w	r3, r3, #8
 800c5a2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e4 <LoRaMacHandleIndicationEvents+0x60>)
 800c5a8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	490e      	ldr	r1, [pc, #56]	@ (800c5e8 <LoRaMacHandleIndicationEvents+0x64>)
 800c5b0:	480e      	ldr	r0, [pc, #56]	@ (800c5ec <LoRaMacHandleIndicationEvents+0x68>)
 800c5b2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e4 <LoRaMacHandleIndicationEvents+0x60>)
 800c5b6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00d      	beq.n	800c5e0 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c5c4:	4a07      	ldr	r2, [pc, #28]	@ (800c5e4 <LoRaMacHandleIndicationEvents+0x60>)
 800c5c6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c5ca:	f023 0302 	bic.w	r3, r3, #2
 800c5ce:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800c5d2:	4b04      	ldr	r3, [pc, #16]	@ (800c5e4 <LoRaMacHandleIndicationEvents+0x60>)
 800c5d4:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	4903      	ldr	r1, [pc, #12]	@ (800c5e8 <LoRaMacHandleIndicationEvents+0x64>)
 800c5dc:	4804      	ldr	r0, [pc, #16]	@ (800c5f0 <LoRaMacHandleIndicationEvents+0x6c>)
 800c5de:	4798      	blx	r3
    }
}
 800c5e0:	bf00      	nop
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20000a28 	.word	0x20000a28
 800c5e8:	20000eb4 	.word	0x20000eb4
 800c5ec:	20000e90 	.word	0x20000e90
 800c5f0:	20000e48 	.word	0x20000e48

0800c5f4 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c5fa:	4b2a      	ldr	r3, [pc, #168]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c5fc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d048      	beq.n	800c69c <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800c60a:	2300      	movs	r3, #0
 800c60c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800c60e:	2300      	movs	r3, #0
 800c610:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c612:	4b24      	ldr	r3, [pc, #144]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c614:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800c61c:	4b21      	ldr	r3, [pc, #132]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c61e:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c622:	2b03      	cmp	r3, #3
 800c624:	d104      	bne.n	800c630 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800c626:	f002 f94f 	bl	800e8c8 <CheckRetransUnconfirmedUplink>
 800c62a:	4603      	mov	r3, r0
 800c62c:	71fb      	strb	r3, [r7, #7]
 800c62e:	e010      	b.n	800c652 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800c630:	4b1c      	ldr	r3, [pc, #112]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c632:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800c636:	2b01      	cmp	r3, #1
 800c638:	d10b      	bne.n	800c652 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800c63a:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c63c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800c640:	2b00      	cmp	r3, #0
 800c642:	d004      	beq.n	800c64e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800c644:	f002 f96c 	bl	800e920 <CheckRetransConfirmedUplink>
 800c648:	4603      	mov	r3, r0
 800c64a:	71fb      	strb	r3, [r7, #7]
 800c64c:	e001      	b.n	800c652 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800c64e:	2301      	movs	r3, #1
 800c650:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00d      	beq.n	800c674 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800c658:	4813      	ldr	r0, [pc, #76]	@ (800c6a8 <LoRaMacHandleMcpsRequest+0xb4>)
 800c65a:	f00e fd57 	bl	801b10c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c65e:	4b11      	ldr	r3, [pc, #68]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c660:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c664:	f023 0320 	bic.w	r3, r3, #32
 800c668:	4a0e      	ldr	r2, [pc, #56]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c66a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800c66e:	f002 f991 	bl	800e994 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800c672:	e013      	b.n	800c69c <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800c674:	79bb      	ldrb	r3, [r7, #6]
 800c676:	f083 0301 	eor.w	r3, r3, #1
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00d      	beq.n	800c69c <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800c680:	4a08      	ldr	r2, [pc, #32]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c682:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c686:	f023 0310 	bic.w	r3, r3, #16
 800c68a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800c68e:	4b05      	ldr	r3, [pc, #20]	@ (800c6a4 <LoRaMacHandleMcpsRequest+0xb0>)
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800c696:	2000      	movs	r0, #0
 800c698:	f000 f9c8 	bl	800ca2c <OnTxDelayedTimerEvent>
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	20000a28 	.word	0x20000a28
 800c6a8:	20000d90 	.word	0x20000d90

0800c6ac <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c6b0:	4b18      	ldr	r3, [pc, #96]	@ (800c714 <LoRaMacHandleMlmeRequest+0x68>)
 800c6b2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c6b6:	f003 0304 	and.w	r3, r3, #4
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d026      	beq.n	800c70e <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c6c0:	2001      	movs	r0, #1
 800c6c2:	f004 fbd9 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d012      	beq.n	800c6f2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	f004 fb75 	bl	8010dbc <LoRaMacConfirmQueueGetStatus>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d103      	bne.n	800c6e0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800c6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c714 <LoRaMacHandleMlmeRequest+0x68>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c714 <LoRaMacHandleMlmeRequest+0x68>)
 800c6e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c6e6:	f023 0302 	bic.w	r3, r3, #2
 800c6ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c714 <LoRaMacHandleMlmeRequest+0x68>)
 800c6ec:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800c6f0:	e00d      	b.n	800c70e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800c6f2:	2006      	movs	r0, #6
 800c6f4:	f004 fbc0 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d007      	beq.n	800c70e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c6fe:	4b05      	ldr	r3, [pc, #20]	@ (800c714 <LoRaMacHandleMlmeRequest+0x68>)
 800c700:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c704:	f023 0302 	bic.w	r3, r3, #2
 800c708:	4a02      	ldr	r2, [pc, #8]	@ (800c714 <LoRaMacHandleMlmeRequest+0x68>)
 800c70a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800c70e:	bf00      	nop
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20000a28 	.word	0x20000a28

0800c718 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c71c:	200b      	movs	r0, #11
 800c71e:	f004 fbab 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d019      	beq.n	800c75c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c728:	4b0e      	ldr	r3, [pc, #56]	@ (800c764 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c72a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c734:	2b00      	cmp	r3, #0
 800c736:	d111      	bne.n	800c75c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c738:	4b0a      	ldr	r3, [pc, #40]	@ (800c764 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c73a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d009      	beq.n	800c75c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c748:	4b06      	ldr	r3, [pc, #24]	@ (800c764 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c74a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c74e:	f023 0302 	bic.w	r3, r3, #2
 800c752:	4a04      	ldr	r2, [pc, #16]	@ (800c764 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c754:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800c758:	2301      	movs	r3, #1
 800c75a:	e000      	b.n	800c75e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20000a28 	.word	0x20000a28

0800c768 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	71fb      	strb	r3, [r7, #7]
 800c772:	460b      	mov	r3, r1
 800c774:	71bb      	strb	r3, [r7, #6]
 800c776:	4613      	mov	r3, r2
 800c778:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00a      	beq.n	800c796 <CheckForMinimumAbpDatarate+0x2e>
 800c780:	79bb      	ldrb	r3, [r7, #6]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d107      	bne.n	800c796 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800c786:	797b      	ldrb	r3, [r7, #5]
 800c788:	f083 0301 	eor.w	r3, r3, #1
 800c78c:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d001      	beq.n	800c796 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800c792:	2301      	movs	r3, #1
 800c794:	e000      	b.n	800c798 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bc80      	pop	{r7}
 800c7a0:	4770      	bx	lr
	...

0800c7a4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800c7a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c7e0 <LoRaMacCheckForRxAbort+0x3c>)
 800c7aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c7ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00f      	beq.n	800c7d6 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800c7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c7e0 <LoRaMacCheckForRxAbort+0x3c>)
 800c7b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c7bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7c0:	4a07      	ldr	r2, [pc, #28]	@ (800c7e0 <LoRaMacCheckForRxAbort+0x3c>)
 800c7c2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c7c6:	4b06      	ldr	r3, [pc, #24]	@ (800c7e0 <LoRaMacCheckForRxAbort+0x3c>)
 800c7c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c7cc:	f023 0302 	bic.w	r3, r3, #2
 800c7d0:	4a03      	ldr	r2, [pc, #12]	@ (800c7e0 <LoRaMacCheckForRxAbort+0x3c>)
 800c7d2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800c7d6:	bf00      	nop
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bc80      	pop	{r7}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	20000a28 	.word	0x20000a28

0800c7e4 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800c7f4:	4b51      	ldr	r3, [pc, #324]	@ (800c93c <LoRaMacHandleNvm+0x158>)
 800c7f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f040 8099 	bne.w	800c932 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2124      	movs	r1, #36	@ 0x24
 800c804:	4618      	mov	r0, r3
 800c806:	f00b f897 	bl	8017938 <Crc32>
 800c80a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	429a      	cmp	r2, r3
 800c814:	d006      	beq.n	800c824 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800c81c:	89fb      	ldrh	r3, [r7, #14]
 800c81e:	f043 0301 	orr.w	r3, r3, #1
 800c822:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	3328      	adds	r3, #40	@ 0x28
 800c828:	211c      	movs	r1, #28
 800c82a:	4618      	mov	r0, r3
 800c82c:	f00b f884 	bl	8017938 <Crc32>
 800c830:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d006      	beq.n	800c84a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800c842:	89fb      	ldrh	r3, [r7, #14]
 800c844:	f043 0302 	orr.w	r3, r3, #2
 800c848:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3348      	adds	r3, #72	@ 0x48
 800c84e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c852:	4618      	mov	r0, r3
 800c854:	f00b f870 	bl	8017938 <Crc32>
 800c858:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	429a      	cmp	r2, r3
 800c864:	d007      	beq.n	800c876 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800c86e:	89fb      	ldrh	r3, [r7, #14]
 800c870:	f043 0304 	orr.w	r3, r3, #4
 800c874:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800c87c:	21d4      	movs	r1, #212	@ 0xd4
 800c87e:	4618      	mov	r0, r3
 800c880:	f00b f85a 	bl	8017938 <Crc32>
 800c884:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d007      	beq.n	800c8a2 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800c89a:	89fb      	ldrh	r3, [r7, #14]
 800c89c:	f043 0308 	orr.w	r3, r3, #8
 800c8a0:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800c8a8:	2110      	movs	r1, #16
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f00b f844 	bl	8017938 <Crc32>
 800c8b0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d007      	beq.n	800c8ce <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800c8c6:	89fb      	ldrh	r3, [r7, #14]
 800c8c8:	f043 0310 	orr.w	r3, r3, #16
 800c8cc:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800c8d4:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f00b f82d 	bl	8017938 <Crc32>
 800c8de:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d007      	beq.n	800c8fc <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800c8f4:	89fb      	ldrh	r3, [r7, #14]
 800c8f6:	f043 0320 	orr.w	r3, r3, #32
 800c8fa:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 800c902:	2114      	movs	r1, #20
 800c904:	4618      	mov	r0, r3
 800c906:	f00b f817 	bl	8017938 <Crc32>
 800c90a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	429a      	cmp	r2, r3
 800c916:	d007      	beq.n	800c928 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	f8c3 25c8 	str.w	r2, [r3, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800c920:	89fb      	ldrh	r3, [r7, #14]
 800c922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c926:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800c928:	89fb      	ldrh	r3, [r7, #14]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f002 f884 	bl	800ea38 <CallNvmDataChangeCallback>
 800c930:	e000      	b.n	800c934 <LoRaMacHandleNvm+0x150>
        return;
 800c932:	bf00      	nop
}
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	20000a28 	.word	0x20000a28

0800c940 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00d      	beq.n	800c96c <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800c950:	6838      	ldr	r0, [r7, #0]
 800c952:	f00e fc87 	bl	801b264 <UTIL_TIMER_GetElapsedTime>
 800c956:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d905      	bls.n	800c96c <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800c960:	4b05      	ldr	r3, [pc, #20]	@ (800c978 <LoRaMacHandleResponseTimeout+0x38>)
 800c962:	2200      	movs	r2, #0
 800c964:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20008000 	.word	0x20008000

0800c97c <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800c982:	2300      	movs	r3, #0
 800c984:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800c986:	f7ff fd0b 	bl	800c3a0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800c98a:	f003 fe06 	bl	801059a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800c98e:	4b25      	ldr	r3, [pc, #148]	@ (800ca24 <LoRaMacProcess+0xa8>)
 800c990:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c994:	f003 0310 	and.w	r3, r3, #16
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d023      	beq.n	800c9e6 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800c99e:	2000      	movs	r0, #0
 800c9a0:	f7ff fd7e 	bl	800c4a0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800c9a4:	f7ff fefe 	bl	800c7a4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800c9a8:	f002 f864 	bl	800ea74 <IsRequestPending>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d006      	beq.n	800c9c0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800c9b2:	f7ff feb1 	bl	800c718 <LoRaMacCheckForBeaconAcquisition>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d103      	bne.n	800c9ce <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800c9c6:	f7ff fe71 	bl	800c6ac <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800c9ca:	f7ff fe13 	bl	800c5f4 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800c9ce:	f7ff fd77 	bl	800c4c0 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c9d2:	2001      	movs	r0, #1
 800c9d4:	f7ff fd64 	bl	800c4a0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c9d8:	4a12      	ldr	r2, [pc, #72]	@ (800ca24 <LoRaMacProcess+0xa8>)
 800c9da:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c9de:	f043 0320 	orr.w	r3, r3, #32
 800c9e2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800c9e6:	f7ff fdcd 	bl	800c584 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800c9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800ca24 <LoRaMacProcess+0xa8>)
 800c9ec:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d101      	bne.n	800c9f8 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800c9f4:	f001 fc28 	bl	800e248 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800c9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800ca24 <LoRaMacProcess+0xa8>)
 800c9fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c9fe:	f003 0320 	and.w	r3, r3, #32
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d009      	beq.n	800ca1c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ca08:	4a06      	ldr	r2, [pc, #24]	@ (800ca24 <LoRaMacProcess+0xa8>)
 800ca0a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ca0e:	f023 0320 	bic.w	r3, r3, #32
 800ca12:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800ca16:	4804      	ldr	r0, [pc, #16]	@ (800ca28 <LoRaMacProcess+0xac>)
 800ca18:	f7ff fee4 	bl	800c7e4 <LoRaMacHandleNvm>
    }
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20000a28 	.word	0x20000a28
 800ca28:	20008000 	.word	0x20008000

0800ca2c <OnTxDelayedTimerEvent>:


static void OnTxDelayedTimerEvent( void* context )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ca34:	481e      	ldr	r0, [pc, #120]	@ (800cab0 <OnTxDelayedTimerEvent+0x84>)
 800ca36:	f00e fb69 	bl	801b10c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ca3a:	4b1e      	ldr	r3, [pc, #120]	@ (800cab4 <OnTxDelayedTimerEvent+0x88>)
 800ca3c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ca40:	f023 0320 	bic.w	r3, r3, #32
 800ca44:	4a1b      	ldr	r2, [pc, #108]	@ (800cab4 <OnTxDelayedTimerEvent+0x88>)
 800ca46:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ca4a:	4b1b      	ldr	r3, [pc, #108]	@ (800cab8 <OnTxDelayedTimerEvent+0x8c>)
 800ca4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca50:	4a18      	ldr	r2, [pc, #96]	@ (800cab4 <OnTxDelayedTimerEvent+0x88>)
 800ca52:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800ca56:	4611      	mov	r1, r2
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff ff71 	bl	800c940 <LoRaMacHandleResponseTimeout>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d11e      	bne.n	800caa2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ca64:	2001      	movs	r0, #1
 800ca66:	f001 f939 	bl	800dcdc <ScheduleTx>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01a      	beq.n	800caa6 <OnTxDelayedTimerEvent+0x7a>
 800ca70:	2b0b      	cmp	r3, #11
 800ca72:	d018      	beq.n	800caa6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ca74:	4b10      	ldr	r3, [pc, #64]	@ (800cab8 <OnTxDelayedTimerEvent+0x8c>)
 800ca76:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cab4 <OnTxDelayedTimerEvent+0x88>)
 800ca7e:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ca82:	4b0c      	ldr	r3, [pc, #48]	@ (800cab4 <OnTxDelayedTimerEvent+0x88>)
 800ca84:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ca88:	4b0a      	ldr	r3, [pc, #40]	@ (800cab4 <OnTxDelayedTimerEvent+0x88>)
 800ca8a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ca8e:	4b09      	ldr	r3, [pc, #36]	@ (800cab4 <OnTxDelayedTimerEvent+0x88>)
 800ca90:	2209      	movs	r2, #9
 800ca92:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ca96:	2009      	movs	r0, #9
 800ca98:	f004 f9ba 	bl	8010e10 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ca9c:	f001 ff7a 	bl	800e994 <StopRetransmission>
            break;
 800caa0:	e002      	b.n	800caa8 <OnTxDelayedTimerEvent+0x7c>
        return;
 800caa2:	bf00      	nop
 800caa4:	e000      	b.n	800caa8 <OnTxDelayedTimerEvent+0x7c>
            break;
 800caa6:	bf00      	nop
        }
    }
}
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20000d90 	.word	0x20000d90
 800cab4:	20000a28 	.word	0x20000a28
 800cab8:	20008000 	.word	0x20008000

0800cabc <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800cac4:	4b17      	ldr	r3, [pc, #92]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800cac6:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800caca:	4b16      	ldr	r3, [pc, #88]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800cacc:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800cad0:	4b15      	ldr	r3, [pc, #84]	@ (800cb28 <OnRxWindow1TimerEvent+0x6c>)
 800cad2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800cad6:	b25a      	sxtb	r2, r3
 800cad8:	4b12      	ldr	r3, [pc, #72]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800cada:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cade:	4b12      	ldr	r3, [pc, #72]	@ (800cb28 <OnRxWindow1TimerEvent+0x6c>)
 800cae0:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cae4:	4b0f      	ldr	r3, [pc, #60]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800cae6:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800caea:	4b0f      	ldr	r3, [pc, #60]	@ (800cb28 <OnRxWindow1TimerEvent+0x6c>)
 800caec:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800caf0:	4b0c      	ldr	r3, [pc, #48]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800caf2:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800caf6:	4b0b      	ldr	r3, [pc, #44]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800cafe:	4b09      	ldr	r3, [pc, #36]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cb06:	4b08      	ldr	r3, [pc, #32]	@ (800cb28 <OnRxWindow1TimerEvent+0x6c>)
 800cb08:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800cb0c:	4b05      	ldr	r3, [pc, #20]	@ (800cb24 <OnRxWindow1TimerEvent+0x68>)
 800cb0e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800cb12:	4906      	ldr	r1, [pc, #24]	@ (800cb2c <OnRxWindow1TimerEvent+0x70>)
 800cb14:	4806      	ldr	r0, [pc, #24]	@ (800cb30 <OnRxWindow1TimerEvent+0x74>)
 800cb16:	f001 fb63 	bl	800e1e0 <RxWindowSetup>
}
 800cb1a:	bf00      	nop
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20000a28 	.word	0x20000a28
 800cb28:	20008000 	.word	0x20008000
 800cb2c:	20000de0 	.word	0x20000de0
 800cb30:	20000da8 	.word	0x20000da8

0800cb34 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800cb3c:	4b19      	ldr	r3, [pc, #100]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb3e:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d029      	beq.n	800cb9a <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cb46:	4b17      	ldr	r3, [pc, #92]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb48:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800cb4c:	4b15      	ldr	r3, [pc, #84]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb4e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800cb52:	4b15      	ldr	r3, [pc, #84]	@ (800cba8 <OnRxWindow2TimerEvent+0x74>)
 800cb54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb56:	4a13      	ldr	r2, [pc, #76]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb58:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cb5c:	4b12      	ldr	r3, [pc, #72]	@ (800cba8 <OnRxWindow2TimerEvent+0x74>)
 800cb5e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cb62:	4b10      	ldr	r3, [pc, #64]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb64:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cb68:	4b0f      	ldr	r3, [pc, #60]	@ (800cba8 <OnRxWindow2TimerEvent+0x74>)
 800cb6a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800cb6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb70:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cb74:	4b0b      	ldr	r3, [pc, #44]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cb7c:	4b09      	ldr	r3, [pc, #36]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cb84:	4b08      	ldr	r3, [pc, #32]	@ (800cba8 <OnRxWindow2TimerEvent+0x74>)
 800cb86:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800cb8a:	4b06      	ldr	r3, [pc, #24]	@ (800cba4 <OnRxWindow2TimerEvent+0x70>)
 800cb8c:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800cb90:	4906      	ldr	r1, [pc, #24]	@ (800cbac <OnRxWindow2TimerEvent+0x78>)
 800cb92:	4807      	ldr	r0, [pc, #28]	@ (800cbb0 <OnRxWindow2TimerEvent+0x7c>)
 800cb94:	f001 fb24 	bl	800e1e0 <RxWindowSetup>
 800cb98:	e000      	b.n	800cb9c <OnRxWindow2TimerEvent+0x68>
        return;
 800cb9a:	bf00      	nop
}
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	20000a28 	.word	0x20000a28
 800cba8:	20008000 	.word	0x20008000
 800cbac:	20000df8 	.word	0x20000df8
 800cbb0:	20000dc0 	.word	0x20000dc0

0800cbb4 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800cbbc:	4808      	ldr	r0, [pc, #32]	@ (800cbe0 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800cbbe:	f00e faa5 	bl	801b10c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800cbc2:	4b08      	ldr	r3, [pc, #32]	@ (800cbe4 <OnRetransmitTimeoutTimerEvent+0x30>)
 800cbc4:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800cbcc:	4b05      	ldr	r3, [pc, #20]	@ (800cbe4 <OnRetransmitTimeoutTimerEvent+0x30>)
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800cbd4:	f001 ff1a 	bl	800ea0c <OnMacProcessNotify>
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	20000e28 	.word	0x20000e28
 800cbe4:	20000a28 	.word	0x20000a28

0800cbe8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60ba      	str	r2, [r7, #8]
 800cbf0:	607b      	str	r3, [r7, #4]
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73fb      	strb	r3, [r7, #15]
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <GetFCntDown+0x24>
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d002      	beq.n	800cc0c <GetFCntDown+0x24>
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cc0c:	2309      	movs	r3, #9
 800cc0e:	e028      	b.n	800cc62 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d016      	beq.n	800cc44 <GetFCntDown+0x5c>
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d118      	bne.n	800cc4c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800cc1a:	79bb      	ldrb	r3, [r7, #6]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d10d      	bne.n	800cc3c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <GetFCntDown+0x44>
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	2b03      	cmp	r3, #3
 800cc2a:	d103      	bne.n	800cc34 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	2202      	movs	r2, #2
 800cc30:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800cc32:	e00d      	b.n	800cc50 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	2201      	movs	r2, #1
 800cc38:	701a      	strb	r2, [r3, #0]
            break;
 800cc3a:	e009      	b.n	800cc50 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	2203      	movs	r2, #3
 800cc40:	701a      	strb	r2, [r3, #0]
            break;
 800cc42:	e005      	b.n	800cc50 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	2204      	movs	r2, #4
 800cc48:	701a      	strb	r2, [r3, #0]
            break;
 800cc4a:	e001      	b.n	800cc50 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800cc4c:	2305      	movs	r3, #5
 800cc4e:	e008      	b.n	800cc62 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	7818      	ldrb	r0, [r3, #0]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	89db      	ldrh	r3, [r3, #14]
 800cc58:	69fa      	ldr	r2, [r7, #28]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	f004 fd12 	bl	8011684 <LoRaMacCryptoGetFCntDown>
 800cc60:	4603      	mov	r3, r0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800cc6c:	b5b0      	push	{r4, r5, r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc76:	2303      	movs	r3, #3
 800cc78:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800cc7a:	4b6e      	ldr	r3, [pc, #440]	@ (800ce34 <SwitchClass+0x1c8>)
 800cc7c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	f000 80bb 	beq.w	800cdfc <SwitchClass+0x190>
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	f300 80ce 	bgt.w	800ce28 <SwitchClass+0x1bc>
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d003      	beq.n	800cc98 <SwitchClass+0x2c>
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	f000 80a5 	beq.w	800cde0 <SwitchClass+0x174>
 800cc96:	e0c7      	b.n	800ce28 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d109      	bne.n	800ccb2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800cc9e:	4b65      	ldr	r3, [pc, #404]	@ (800ce34 <SwitchClass+0x1c8>)
 800cca0:	4a64      	ldr	r2, [pc, #400]	@ (800ce34 <SwitchClass+0x1c8>)
 800cca2:	3374      	adds	r3, #116	@ 0x74
 800cca4:	326c      	adds	r2, #108	@ 0x6c
 800cca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccaa:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800ccb2:	79fb      	ldrb	r3, [r7, #7]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d10c      	bne.n	800ccd2 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f003 fc04 	bl	80104c8 <LoRaMacClassBSwitchClass>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d103      	bne.n	800ccd2 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ccca:	4a5a      	ldr	r2, [pc, #360]	@ (800ce34 <SwitchClass+0x1c8>)
 800cccc:	79fb      	ldrb	r3, [r7, #7]
 800ccce:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	f040 80a2 	bne.w	800ce1e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ccda:	4a56      	ldr	r2, [pc, #344]	@ (800ce34 <SwitchClass+0x1c8>)
 800ccdc:	79fb      	ldrb	r3, [r7, #7]
 800ccde:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800cce2:	4a55      	ldr	r2, [pc, #340]	@ (800ce38 <SwitchClass+0x1cc>)
 800cce4:	4b54      	ldr	r3, [pc, #336]	@ (800ce38 <SwitchClass+0x1cc>)
 800cce6:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800ccea:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800ccee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccf6:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ccfa:	4b4f      	ldr	r3, [pc, #316]	@ (800ce38 <SwitchClass+0x1cc>)
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cd02:	2300      	movs	r3, #0
 800cd04:	73bb      	strb	r3, [r7, #14]
 800cd06:	e05b      	b.n	800cdc0 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800cd08:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd0c:	4949      	ldr	r1, [pc, #292]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	011b      	lsls	r3, r3, #4
 800cd16:	440b      	add	r3, r1
 800cd18:	33e9      	adds	r3, #233	@ 0xe9
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d049      	beq.n	800cdb4 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800cd20:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd24:	4943      	ldr	r1, [pc, #268]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd26:	4613      	mov	r3, r2
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	4413      	add	r3, r2
 800cd2c:	011b      	lsls	r3, r3, #4
 800cd2e:	440b      	add	r3, r1
 800cd30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cd34:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d13c      	bne.n	800cdb4 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800cd3a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd3e:	493d      	ldr	r1, [pc, #244]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd40:	4613      	mov	r3, r2
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	4413      	add	r3, r2
 800cd46:	011b      	lsls	r3, r3, #4
 800cd48:	440b      	add	r3, r1
 800cd4a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a38      	ldr	r2, [pc, #224]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd52:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800cd54:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd58:	4936      	ldr	r1, [pc, #216]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	4413      	add	r3, r2
 800cd60:	011b      	lsls	r3, r3, #4
 800cd62:	440b      	add	r3, r1
 800cd64:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800cd68:	f993 3000 	ldrsb.w	r3, [r3]
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	4b31      	ldr	r3, [pc, #196]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800cd74:	4b30      	ldr	r3, [pc, #192]	@ (800ce38 <SwitchClass+0x1cc>)
 800cd76:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800cd7a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce38 <SwitchClass+0x1cc>)
 800cd7c:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800cd80:	4b2c      	ldr	r3, [pc, #176]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd84:	4a2c      	ldr	r2, [pc, #176]	@ (800ce38 <SwitchClass+0x1cc>)
 800cd86:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd8c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cd90:	4b29      	ldr	r3, [pc, #164]	@ (800ce38 <SwitchClass+0x1cc>)
 800cd92:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cd96:	4b27      	ldr	r3, [pc, #156]	@ (800ce34 <SwitchClass+0x1c8>)
 800cd98:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800cd9c:	4b26      	ldr	r3, [pc, #152]	@ (800ce38 <SwitchClass+0x1cc>)
 800cd9e:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800cda2:	4b25      	ldr	r3, [pc, #148]	@ (800ce38 <SwitchClass+0x1cc>)
 800cda4:	2203      	movs	r2, #3
 800cda6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800cdaa:	4b23      	ldr	r3, [pc, #140]	@ (800ce38 <SwitchClass+0x1cc>)
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800cdb2:	e009      	b.n	800cdc8 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cdb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	3301      	adds	r3, #1
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	73bb      	strb	r3, [r7, #14]
 800cdc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	dd9f      	ble.n	800cd08 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800cdc8:	4b1b      	ldr	r3, [pc, #108]	@ (800ce38 <SwitchClass+0x1cc>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800cdd0:	4b1a      	ldr	r3, [pc, #104]	@ (800ce3c <SwitchClass+0x1d0>)
 800cdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800cdd6:	f001 fa37 	bl	800e248 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800cdde:	e01e      	b.n	800ce1e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800cde0:	79fb      	ldrb	r3, [r7, #7]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f003 fb70 	bl	80104c8 <LoRaMacClassBSwitchClass>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d117      	bne.n	800ce22 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cdf2:	4a10      	ldr	r2, [pc, #64]	@ (800ce34 <SwitchClass+0x1c8>)
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800cdfa:	e012      	b.n	800ce22 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800cdfc:	79fb      	ldrb	r3, [r7, #7]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d111      	bne.n	800ce26 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800ce02:	4b0d      	ldr	r3, [pc, #52]	@ (800ce38 <SwitchClass+0x1cc>)
 800ce04:	2206      	movs	r2, #6
 800ce06:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ce0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ce34 <SwitchClass+0x1c8>)
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ce12:	4b0a      	ldr	r3, [pc, #40]	@ (800ce3c <SwitchClass+0x1d0>)
 800ce14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce16:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800ce1c:	e003      	b.n	800ce26 <SwitchClass+0x1ba>
            break;
 800ce1e:	bf00      	nop
 800ce20:	e002      	b.n	800ce28 <SwitchClass+0x1bc>
            break;
 800ce22:	bf00      	nop
 800ce24:	e000      	b.n	800ce28 <SwitchClass+0x1bc>
            break;
 800ce26:	bf00      	nop
        }
    }

    return status;
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bdb0      	pop	{r4, r5, r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20008000 	.word	0x20008000
 800ce38:	20000a28 	.word	0x20000a28
 800ce3c:	08021f8c 	.word	0x08021f8c

0800ce40 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ce4a:	4b10      	ldr	r3, [pc, #64]	@ (800ce8c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ce4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ce50:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ce56:	230d      	movs	r3, #13
 800ce58:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ce5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ce8c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ce5c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ce64:	230e      	movs	r3, #14
 800ce66:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ce68:	4b08      	ldr	r3, [pc, #32]	@ (800ce8c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ce6a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ce6e:	f107 0210 	add.w	r2, r7, #16
 800ce72:	4611      	mov	r1, r2
 800ce74:	4618      	mov	r0, r3
 800ce76:	f005 fa6c 	bl	8012352 <RegionGetPhyParam>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	b2db      	uxtb	r3, r3
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20008000 	.word	0x20008000

0800ce90 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	71fb      	strb	r3, [r7, #7]
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	71bb      	strb	r3, [r7, #6]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ceaa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff ffc6 	bl	800ce40 <GetMaxAppPayloadWithoutFOptsLength>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	797b      	ldrb	r3, [r7, #5]
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	4413      	add	r3, r2
 800cec2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800cec4:	89ba      	ldrh	r2, [r7, #12]
 800cec6:	89fb      	ldrh	r3, [r7, #14]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d804      	bhi.n	800ced6 <ValidatePayloadLength+0x46>
 800cecc:	89bb      	ldrh	r3, [r7, #12]
 800cece:	2bff      	cmp	r3, #255	@ 0xff
 800ced0:	d801      	bhi.n	800ced6 <ValidatePayloadLength+0x46>
    {
        return true;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e000      	b.n	800ced8 <ValidatePayloadLength+0x48>
    }
    return false;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800cee0:	b590      	push	{r4, r7, lr}
 800cee2:	b0a5      	sub	sp, #148	@ 0x94
 800cee4:	af02      	add	r7, sp, #8
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	4608      	mov	r0, r1
 800ceea:	4611      	mov	r1, r2
 800ceec:	461a      	mov	r2, r3
 800ceee:	4603      	mov	r3, r0
 800cef0:	70fb      	strb	r3, [r7, #3]
 800cef2:	460b      	mov	r3, r1
 800cef4:	70bb      	strb	r3, [r7, #2]
 800cef6:	4613      	mov	r3, r2
 800cef8:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800cf00:	2300      	movs	r3, #0
 800cf02:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800cf06:	2300      	movs	r3, #0
 800cf08:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800cf0c:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 84b9 	beq.w	800d888 <ProcessMacCommands+0x9a8>
 800cf16:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	f040 84ba 	bne.w	800d894 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800cf20:	f000 bcb2 	b.w	800d888 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800cf24:	78fb      	ldrb	r3, [r7, #3]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	4413      	add	r3, r2
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f003 fdcb 	bl	8010ac8 <LoRaMacCommandsGetCmdSize>
 800cf32:	4603      	mov	r3, r0
 800cf34:	461a      	mov	r2, r3
 800cf36:	78fb      	ldrb	r3, [r7, #3]
 800cf38:	441a      	add	r2, r3
 800cf3a:	78bb      	ldrb	r3, [r7, #2]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	f300 84ab 	bgt.w	800d898 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800cf42:	78fb      	ldrb	r3, [r7, #3]
 800cf44:	1c5a      	adds	r2, r3, #1
 800cf46:	70fa      	strb	r2, [r7, #3]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	3b02      	subs	r3, #2
 800cf52:	2b11      	cmp	r3, #17
 800cf54:	f200 84a2 	bhi.w	800d89c <ProcessMacCommands+0x9bc>
 800cf58:	a201      	add	r2, pc, #4	@ (adr r2, 800cf60 <ProcessMacCommands+0x80>)
 800cf5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5e:	bf00      	nop
 800cf60:	0800cfa9 	.word	0x0800cfa9
 800cf64:	0800cfeb 	.word	0x0800cfeb
 800cf68:	0800d167 	.word	0x0800d167
 800cf6c:	0800d1a5 	.word	0x0800d1a5
 800cf70:	0800d29d 	.word	0x0800d29d
 800cf74:	0800d2ed 	.word	0x0800d2ed
 800cf78:	0800d3a9 	.word	0x0800d3a9
 800cf7c:	0800d3ff 	.word	0x0800d3ff
 800cf80:	0800d4e5 	.word	0x0800d4e5
 800cf84:	0800d89d 	.word	0x0800d89d
 800cf88:	0800d89d 	.word	0x0800d89d
 800cf8c:	0800d58d 	.word	0x0800d58d
 800cf90:	0800d89d 	.word	0x0800d89d
 800cf94:	0800d89d 	.word	0x0800d89d
 800cf98:	0800d6ad 	.word	0x0800d6ad
 800cf9c:	0800d6e1 	.word	0x0800d6e1
 800cfa0:	0800d771 	.word	0x0800d771
 800cfa4:	0800d7e9 	.word	0x0800d7e9
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800cfa8:	2005      	movs	r0, #5
 800cfaa:	f003 ff65 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 845c 	beq.w	800d86e <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800cfb6:	2105      	movs	r1, #5
 800cfb8:	2000      	movs	r0, #0
 800cfba:	f003 fed1 	bl	8010d60 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	1c5a      	adds	r2, r3, #1
 800cfc2:	70fa      	strb	r2, [r7, #3]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4413      	add	r3, r2
 800cfca:	781a      	ldrb	r2, [r3, #0]
 800cfcc:	4bb0      	ldr	r3, [pc, #704]	@ (800d290 <ProcessMacCommands+0x3b0>)
 800cfce:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800cfd2:	78fb      	ldrb	r3, [r7, #3]
 800cfd4:	1c5a      	adds	r2, r3, #1
 800cfd6:	70fa      	strb	r2, [r7, #3]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4413      	add	r3, r2
 800cfde:	781a      	ldrb	r2, [r3, #0]
 800cfe0:	4bab      	ldr	r3, [pc, #684]	@ (800d290 <ProcessMacCommands+0x3b0>)
 800cfe2:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 800cfe6:	f000 bc42 	b.w	800d86e <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800cff0:	2300      	movs	r3, #0
 800cff2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800d002:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d006:	f083 0301 	eor.w	r3, r3, #1
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80a6 	beq.w	800d15e <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800d012:	2301      	movs	r3, #1
 800d014:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	4413      	add	r3, r2
 800d020:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800d022:	4b9c      	ldr	r3, [pc, #624]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d024:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800d028:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d02c:	4b99      	ldr	r3, [pc, #612]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d02e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d032:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800d036:	4b97      	ldr	r3, [pc, #604]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d038:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d03c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d040:	4b94      	ldr	r3, [pc, #592]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d042:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800d046:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d04a:	4b92      	ldr	r3, [pc, #584]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d04c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800d050:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800d054:	4b8f      	ldr	r3, [pc, #572]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d056:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800d05a:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800d05c:	4b8d      	ldr	r3, [pc, #564]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d05e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800d062:	2b00      	cmp	r3, #0
 800d064:	d008      	beq.n	800d078 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800d066:	78ba      	ldrb	r2, [r7, #2]
 800d068:	78fb      	ldrb	r3, [r7, #3]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	3301      	adds	r3, #1
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800d076:	e002      	b.n	800d07e <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800d078:	2305      	movs	r3, #5
 800d07a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800d07e:	4b85      	ldr	r3, [pc, #532]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d080:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d084:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800d088:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800d08c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800d090:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d094:	9301      	str	r3, [sp, #4]
 800d096:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	4623      	mov	r3, r4
 800d09e:	f005 fa5b 	bl	8012558 <RegionLinkAdrReq>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800d0a8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d0ac:	f003 0307 	and.w	r3, r3, #7
 800d0b0:	2b07      	cmp	r3, #7
 800d0b2:	d119      	bne.n	800d0e8 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800d0b4:	4b77      	ldr	r3, [pc, #476]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d0b6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800d0ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	da03      	bge.n	800d0ca <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800d0c2:	4b74      	ldr	r3, [pc, #464]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800d0ca:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800d0ce:	4b71      	ldr	r3, [pc, #452]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d0d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800d0d4:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800d0d8:	4b6e      	ldr	r3, [pc, #440]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d0da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800d0de:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800d0e2:	4b6c      	ldr	r3, [pc, #432]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d0e4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800d0ee:	e00b      	b.n	800d108 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800d0f0:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	2003      	movs	r0, #3
 800d0fa:	f003 fb85 	bl	8010808 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d0fe:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d102:	3301      	adds	r3, #1
 800d104:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800d108:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800d10c:	4a62      	ldr	r2, [pc, #392]	@ (800d298 <ProcessMacCommands+0x3b8>)
 800d10e:	fba2 2303 	umull	r2, r3, r2, r3
 800d112:	089b      	lsrs	r3, r3, #2
 800d114:	b2db      	uxtb	r3, r3
 800d116:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d3e8      	bcc.n	800d0f0 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800d11e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800d122:	78fb      	ldrb	r3, [r7, #3]
 800d124:	4413      	add	r3, r2
 800d126:	b2db      	uxtb	r3, r3
 800d128:	3b01      	subs	r3, #1
 800d12a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800d12c:	78fa      	ldrb	r2, [r7, #3]
 800d12e:	78bb      	ldrb	r3, [r7, #2]
 800d130:	429a      	cmp	r2, r3
 800d132:	d20a      	bcs.n	800d14a <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800d134:	78fb      	ldrb	r3, [r7, #3]
 800d136:	1c5a      	adds	r2, r3, #1
 800d138:	70fa      	strb	r2, [r7, #3]
 800d13a:	461a      	mov	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4413      	add	r3, r2
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	2b03      	cmp	r3, #3
 800d144:	f43f af68 	beq.w	800d018 <ProcessMacCommands+0x138>
 800d148:	e000      	b.n	800d14c <ProcessMacCommands+0x26c>
                            break;
 800d14a:	bf00      	nop

                    if( macIndex < commandsSize )
 800d14c:	78fa      	ldrb	r2, [r7, #3]
 800d14e:	78bb      	ldrb	r3, [r7, #2]
 800d150:	429a      	cmp	r2, r3
 800d152:	f080 838e 	bcs.w	800d872 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	3b01      	subs	r3, #1
 800d15a:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800d15c:	e389      	b.n	800d872 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800d15e:	78fb      	ldrb	r3, [r7, #3]
 800d160:	3304      	adds	r3, #4
 800d162:	70fb      	strb	r3, [r7, #3]
                break;
 800d164:	e385      	b.n	800d872 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	1c5a      	adds	r2, r3, #1
 800d16a:	70fa      	strb	r2, [r7, #3]
 800d16c:	461a      	mov	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4413      	add	r3, r2
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	f003 030f 	and.w	r3, r3, #15
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4b46      	ldr	r3, [pc, #280]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d17c:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800d180:	4b44      	ldr	r3, [pc, #272]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d182:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800d186:	461a      	mov	r2, r3
 800d188:	2301      	movs	r3, #1
 800d18a:	4093      	lsls	r3, r2
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	4b41      	ldr	r3, [pc, #260]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d190:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800d194:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d198:	2200      	movs	r2, #0
 800d19a:	4619      	mov	r1, r3
 800d19c:	2004      	movs	r0, #4
 800d19e:	f003 fb33 	bl	8010808 <LoRaMacCommandsAddCmd>
                break;
 800d1a2:	e371      	b.n	800d888 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800d1a4:	2307      	movs	r3, #7
 800d1a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	091b      	lsrs	r3, r3, #4
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	b25b      	sxtb	r3, r3
 800d1b8:	f003 0307 	and.w	r3, r3, #7
 800d1bc:	b25b      	sxtb	r3, r3
 800d1be:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800d1c2:	78fb      	ldrb	r3, [r7, #3]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	b25b      	sxtb	r3, r3
 800d1cc:	f003 030f 	and.w	r3, r3, #15
 800d1d0:	b25b      	sxtb	r3, r3
 800d1d2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800d1d6:	78fb      	ldrb	r3, [r7, #3]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800d1dc:	78fb      	ldrb	r3, [r7, #3]
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	70fa      	strb	r2, [r7, #3]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d1ec:	78fb      	ldrb	r3, [r7, #3]
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	70fa      	strb	r2, [r7, #3]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	021a      	lsls	r2, r3, #8
 800d1fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1fe:	4313      	orrs	r3, r2
 800d200:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	70fa      	strb	r2, [r7, #3]
 800d208:	461a      	mov	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	041a      	lsls	r2, r3, #16
 800d212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d214:	4313      	orrs	r3, r2
 800d216:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800d218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d21a:	2264      	movs	r2, #100	@ 0x64
 800d21c:	fb02 f303 	mul.w	r3, r2, r3
 800d220:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800d222:	4b1c      	ldr	r3, [pc, #112]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d224:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d228:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d22c:	4611      	mov	r1, r2
 800d22e:	4618      	mov	r0, r3
 800d230:	f005 f9b9 	bl	80125a6 <RegionRxParamSetupReq>
 800d234:	4603      	mov	r3, r0
 800d236:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800d23a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d23e:	f003 0307 	and.w	r3, r3, #7
 800d242:	2b07      	cmp	r3, #7
 800d244:	d117      	bne.n	800d276 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800d246:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	4b11      	ldr	r3, [pc, #68]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d24e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800d252:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800d256:	b2da      	uxtb	r2, r3
 800d258:	4b0e      	ldr	r3, [pc, #56]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d25a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800d25e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d260:	4a0c      	ldr	r2, [pc, #48]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d262:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800d264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d266:	4a0b      	ldr	r2, [pc, #44]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d268:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800d26a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	4b08      	ldr	r3, [pc, #32]	@ (800d294 <ProcessMacCommands+0x3b4>)
 800d272:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800d276:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d27a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800d27e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d282:	2201      	movs	r2, #1
 800d284:	4619      	mov	r1, r3
 800d286:	2005      	movs	r0, #5
 800d288:	f003 fabe 	bl	8010808 <LoRaMacCommandsAddCmd>
                break;
 800d28c:	e2fc      	b.n	800d888 <ProcessMacCommands+0x9a8>
 800d28e:	bf00      	nop
 800d290:	20000a28 	.word	0x20000a28
 800d294:	20008000 	.word	0x20008000
 800d298:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800d29c:	23ff      	movs	r3, #255	@ 0xff
 800d29e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800d2a2:	4bb7      	ldr	r3, [pc, #732]	@ (800d580 <ProcessMacCommands+0x6a0>)
 800d2a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00d      	beq.n	800d2c8 <ProcessMacCommands+0x3e8>
 800d2ac:	4bb4      	ldr	r3, [pc, #720]	@ (800d580 <ProcessMacCommands+0x6a0>)
 800d2ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d007      	beq.n	800d2c8 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800d2b8:	4bb1      	ldr	r3, [pc, #708]	@ (800d580 <ProcessMacCommands+0x6a0>)
 800d2ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4798      	blx	r3
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800d2c8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d2cc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800d2d0:	787b      	ldrb	r3, [r7, #1]
 800d2d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800d2dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	2006      	movs	r0, #6
 800d2e6:	f003 fa8f 	bl	8010808 <LoRaMacCommandsAddCmd>
                break;
 800d2ea:	e2cd      	b.n	800d888 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800d2f2:	78fb      	ldrb	r3, [r7, #3]
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	70fa      	strb	r2, [r7, #3]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	b25b      	sxtb	r3, r3
 800d302:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800d306:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800d30a:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800d30c:	78fb      	ldrb	r3, [r7, #3]
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	70fa      	strb	r2, [r7, #3]
 800d312:	461a      	mov	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4413      	add	r3, r2
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	70fa      	strb	r2, [r7, #3]
 800d322:	461a      	mov	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4413      	add	r3, r2
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	021a      	lsls	r2, r3, #8
 800d32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32e:	4313      	orrs	r3, r2
 800d330:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d332:	78fb      	ldrb	r3, [r7, #3]
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	70fa      	strb	r2, [r7, #3]
 800d338:	461a      	mov	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4413      	add	r3, r2
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	041a      	lsls	r2, r3, #16
 800d342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d344:	4313      	orrs	r3, r2
 800d346:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800d348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34a:	2264      	movs	r2, #100	@ 0x64
 800d34c:	fb02 f303 	mul.w	r3, r2, r3
 800d350:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800d356:	78fb      	ldrb	r3, [r7, #3]
 800d358:	1c5a      	adds	r2, r3, #1
 800d35a:	70fa      	strb	r2, [r7, #3]
 800d35c:	461a      	mov	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4413      	add	r3, r2
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	b25b      	sxtb	r3, r3
 800d366:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800d36a:	4b86      	ldr	r3, [pc, #536]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d36c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d370:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800d374:	4611      	mov	r1, r2
 800d376:	4618      	mov	r0, r3
 800d378:	f005 f930 	bl	80125dc <RegionNewChannelReq>
 800d37c:	4603      	mov	r3, r0
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800d384:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d388:	b25b      	sxtb	r3, r3
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f2c0 8273 	blt.w	800d876 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800d390:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d394:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800d398:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d39c:	2201      	movs	r2, #1
 800d39e:	4619      	mov	r1, r3
 800d3a0:	2007      	movs	r0, #7
 800d3a2:	f003 fa31 	bl	8010808 <LoRaMacCommandsAddCmd>
                }
                break;
 800d3a6:	e266      	b.n	800d876 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800d3a8:	78fb      	ldrb	r3, [r7, #3]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	70fa      	strb	r2, [r7, #3]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	f003 030f 	and.w	r3, r3, #15
 800d3ba:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800d3be:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d104      	bne.n	800d3d0 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800d3c6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800d3d0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d3d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d3d8:	fb02 f303 	mul.w	r3, r2, r3
 800d3dc:	461a      	mov	r2, r3
 800d3de:	4b69      	ldr	r3, [pc, #420]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d3e0:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d3e2:	4b68      	ldr	r3, [pc, #416]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d3e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3e6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d3ea:	4a66      	ldr	r2, [pc, #408]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d3ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800d3ee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	2008      	movs	r0, #8
 800d3f8:	f003 fa06 	bl	8010808 <LoRaMacCommandsAddCmd>
                break;
 800d3fc:	e244      	b.n	800d888 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800d3fe:	78fb      	ldrb	r3, [r7, #3]
 800d400:	1c5a      	adds	r2, r3, #1
 800d402:	70fa      	strb	r2, [r7, #3]
 800d404:	461a      	mov	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800d410:	2300      	movs	r3, #0
 800d412:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800d41c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d420:	f003 0320 	and.w	r3, r3, #32
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800d428:	2301      	movs	r3, #1
 800d42a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800d42e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d432:	f003 0310 	and.w	r3, r3, #16
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800d43a:	2301      	movs	r3, #1
 800d43c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800d440:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d444:	f003 030f 	and.w	r3, r3, #15
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800d44e:	4b4d      	ldr	r3, [pc, #308]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d450:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d454:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d458:	4611      	mov	r1, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f005 f8d9 	bl	8012612 <RegionTxParamSetupReq>
 800d460:	4603      	mov	r3, r0
 800d462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d466:	f000 8208 	beq.w	800d87a <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800d46a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800d46e:	4b45      	ldr	r3, [pc, #276]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d470:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800d474:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800d478:	4b42      	ldr	r3, [pc, #264]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d47a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800d47e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d482:	461a      	mov	r2, r3
 800d484:	4b40      	ldr	r3, [pc, #256]	@ (800d588 <ProcessMacCommands+0x6a8>)
 800d486:	5c9b      	ldrb	r3, [r3, r2]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7f3 f9f3 	bl	8000874 <__aeabi_ui2f>
 800d48e:	4603      	mov	r3, r0
 800d490:	4a3c      	ldr	r2, [pc, #240]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d492:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800d496:	2302      	movs	r3, #2
 800d498:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d49c:	4b39      	ldr	r3, [pc, #228]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d49e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d4a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d4a6:	4b37      	ldr	r3, [pc, #220]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d4a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d4ac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f004 ff4d 	bl	8012352 <RegionGetPhyParam>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800d4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4be:	b25a      	sxtb	r2, r3
 800d4c0:	4b30      	ldr	r3, [pc, #192]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d4c2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	bfb8      	it	lt
 800d4ca:	4613      	movlt	r3, r2
 800d4cc:	b25a      	sxtb	r2, r3
 800d4ce:	4b2d      	ldr	r3, [pc, #180]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d4d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800d4d4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d4d8:	2200      	movs	r2, #0
 800d4da:	4619      	mov	r1, r3
 800d4dc:	2009      	movs	r0, #9
 800d4de:	f003 f993 	bl	8010808 <LoRaMacCommandsAddCmd>
                }
                break;
 800d4e2:	e1ca      	b.n	800d87a <ProcessMacCommands+0x99a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800d4ea:	78fb      	ldrb	r3, [r7, #3]
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	70fa      	strb	r2, [r7, #3]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800d4fc:	78fb      	ldrb	r3, [r7, #3]
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	70fa      	strb	r2, [r7, #3]
 800d502:	461a      	mov	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4413      	add	r3, r2
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d50c:	78fb      	ldrb	r3, [r7, #3]
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	70fa      	strb	r2, [r7, #3]
 800d512:	461a      	mov	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4413      	add	r3, r2
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	021a      	lsls	r2, r3, #8
 800d51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51e:	4313      	orrs	r3, r2
 800d520:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d522:	78fb      	ldrb	r3, [r7, #3]
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	70fa      	strb	r2, [r7, #3]
 800d528:	461a      	mov	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4413      	add	r3, r2
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	041a      	lsls	r2, r3, #16
 800d532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d534:	4313      	orrs	r3, r2
 800d536:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53a:	2264      	movs	r2, #100	@ 0x64
 800d53c:	fb02 f303 	mul.w	r3, r2, r3
 800d540:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800d542:	4b10      	ldr	r3, [pc, #64]	@ (800d584 <ProcessMacCommands+0x6a4>)
 800d544:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d548:	f107 0220 	add.w	r2, r7, #32
 800d54c:	4611      	mov	r1, r2
 800d54e:	4618      	mov	r0, r3
 800d550:	f005 f87a 	bl	8012648 <RegionDlChannelReq>
 800d554:	4603      	mov	r3, r0
 800d556:	b2db      	uxtb	r3, r3
 800d558:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800d55c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d560:	b25b      	sxtb	r3, r3
 800d562:	2b00      	cmp	r3, #0
 800d564:	f2c0 818b 	blt.w	800d87e <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800d568:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d56c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800d570:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d574:	2201      	movs	r2, #1
 800d576:	4619      	mov	r1, r3
 800d578:	200a      	movs	r0, #10
 800d57a:	f003 f945 	bl	8010808 <LoRaMacCommandsAddCmd>
                }
                break;
 800d57e:	e17e      	b.n	800d87e <ProcessMacCommands+0x99e>
 800d580:	20000a28 	.word	0x20000a28
 800d584:	20008000 	.word	0x20008000
 800d588:	08021b3c 	.word	0x08021b3c
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800d58c:	2009      	movs	r0, #9
 800d58e:	f003 fc73 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 8084 	beq.w	800d6a2 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800d59a:	2109      	movs	r1, #9
 800d59c:	2000      	movs	r0, #0
 800d59e:	f003 fbdf 	bl	8010d60 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800d5a2:	f107 0318 	add.w	r3, r7, #24
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800d5ac:	f107 0310 	add.w	r3, r7, #16
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800d5b6:	f107 0308 	add.w	r3, r7, #8
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	1c5a      	adds	r2, r3, #1
 800d5c4:	70fa      	strb	r2, [r7, #3]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800d5d0:	78fb      	ldrb	r3, [r7, #3]
 800d5d2:	1c5a      	adds	r2, r3, #1
 800d5d4:	70fa      	strb	r2, [r7, #3]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4413      	add	r3, r2
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	021a      	lsls	r2, r3, #8
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800d5e6:	78fb      	ldrb	r3, [r7, #3]
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	70fa      	strb	r2, [r7, #3]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	041a      	lsls	r2, r3, #16
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800d5fc:	78fb      	ldrb	r3, [r7, #3]
 800d5fe:	1c5a      	adds	r2, r3, #1
 800d600:	70fa      	strb	r2, [r7, #3]
 800d602:	461a      	mov	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4413      	add	r3, r2
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	061a      	lsls	r2, r3, #24
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	4313      	orrs	r3, r2
 800d610:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800d612:	78fb      	ldrb	r3, [r7, #3]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	70fa      	strb	r2, [r7, #3]
 800d618:	461a      	mov	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4413      	add	r3, r2
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	b21b      	sxth	r3, r3
 800d622:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800d624:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d628:	461a      	mov	r2, r3
 800d62a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d62e:	fb02 f303 	mul.w	r3, r2, r3
 800d632:	121b      	asrs	r3, r3, #8
 800d634:	b21b      	sxth	r3, r3
 800d636:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800d638:	f107 0310 	add.w	r3, r7, #16
 800d63c:	f107 0218 	add.w	r2, r7, #24
 800d640:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d644:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	4b96      	ldr	r3, [pc, #600]	@ (800d8a4 <ProcessMacCommands+0x9c4>)
 800d64c:	4413      	add	r3, r2
 800d64e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800d650:	f107 0308 	add.w	r3, r7, #8
 800d654:	4618      	mov	r0, r3
 800d656:	f00d fbe7 	bl	801ae28 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800d65a:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800d65e:	4b92      	ldr	r3, [pc, #584]	@ (800d8a8 <ProcessMacCommands+0x9c8>)
 800d660:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800d664:	9200      	str	r2, [sp, #0]
 800d666:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800d66a:	f107 0210 	add.w	r2, r7, #16
 800d66e:	ca06      	ldmia	r2, {r1, r2}
 800d670:	f00d fb73 	bl	801ad5a <SysTimeSub>
 800d674:	f107 0010 	add.w	r0, r7, #16
 800d678:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d67e:	f107 0208 	add.w	r2, r7, #8
 800d682:	ca06      	ldmia	r2, {r1, r2}
 800d684:	f00d fb30 	bl	801ace8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800d688:	f107 0310 	add.w	r3, r7, #16
 800d68c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d690:	f00d fb9c 	bl	801adcc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800d694:	f002 ff56 	bl	8010544 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800d698:	4b83      	ldr	r3, [pc, #524]	@ (800d8a8 <ProcessMacCommands+0x9c8>)
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800d6a0:	e0f2      	b.n	800d888 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d6a2:	4b81      	ldr	r3, [pc, #516]	@ (800d8a8 <ProcessMacCommands+0x9c8>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 800d6aa:	e0ed      	b.n	800d888 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800d6ac:	200c      	movs	r0, #12
 800d6ae:	f003 fbe3 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 80e4 	beq.w	800d882 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800d6ba:	210c      	movs	r1, #12
 800d6bc:	2000      	movs	r0, #0
 800d6be:	f003 fb4f 	bl	8010d60 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800d6c2:	4b79      	ldr	r3, [pc, #484]	@ (800d8a8 <ProcessMacCommands+0x9c8>)
 800d6c4:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800d6c8:	2b04      	cmp	r3, #4
 800d6ca:	f000 80da 	beq.w	800d882 <ProcessMacCommands+0x9a2>
 800d6ce:	4b76      	ldr	r3, [pc, #472]	@ (800d8a8 <ProcessMacCommands+0x9c8>)
 800d6d0:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800d6d4:	2b05      	cmp	r3, #5
 800d6d6:	f000 80d4 	beq.w	800d882 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800d6da:	f002 ff14 	bl	8010506 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800d6de:	e0d0      	b.n	800d882 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800d6ea:	78fb      	ldrb	r3, [r7, #3]
 800d6ec:	1c5a      	adds	r2, r3, #1
 800d6ee:	70fa      	strb	r2, [r7, #3]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800d6fa:	78fb      	ldrb	r3, [r7, #3]
 800d6fc:	1c5a      	adds	r2, r3, #1
 800d6fe:	70fa      	strb	r2, [r7, #3]
 800d700:	461a      	mov	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4413      	add	r3, r2
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	021b      	lsls	r3, r3, #8
 800d70a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d70c:	4313      	orrs	r3, r2
 800d70e:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	70fa      	strb	r2, [r7, #3]
 800d716:	461a      	mov	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4413      	add	r3, r2
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	041b      	lsls	r3, r3, #16
 800d720:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d722:	4313      	orrs	r3, r2
 800d724:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800d726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d728:	2264      	movs	r2, #100	@ 0x64
 800d72a:	fb02 f303 	mul.w	r3, r2, r3
 800d72e:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	70fa      	strb	r2, [r7, #3]
 800d736:	461a      	mov	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4413      	add	r3, r2
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	f003 030f 	and.w	r3, r3, #15
 800d742:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800d746:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d74a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d74c:	4618      	mov	r0, r3
 800d74e:	f002 fee0 	bl	8010512 <LoRaMacClassBPingSlotChannelReq>
 800d752:	4603      	mov	r3, r0
 800d754:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800d758:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800d75c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800d760:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d764:	2201      	movs	r2, #1
 800d766:	4619      	mov	r1, r3
 800d768:	2011      	movs	r0, #17
 800d76a:	f003 f84d 	bl	8010808 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 800d76e:	e08b      	b.n	800d888 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800d770:	200d      	movs	r0, #13
 800d772:	f003 fb81 	bl	8010e78 <LoRaMacConfirmQueueIsCmdActive>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 8084 	beq.w	800d886 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800d77e:	210d      	movs	r1, #13
 800d780:	2000      	movs	r0, #0
 800d782:	f003 faed 	bl	8010d60 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800d792:	78fb      	ldrb	r3, [r7, #3]
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	70fa      	strb	r2, [r7, #3]
 800d798:	461a      	mov	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800d7a4:	78fb      	ldrb	r3, [r7, #3]
 800d7a6:	1c5a      	adds	r2, r3, #1
 800d7a8:	70fa      	strb	r2, [r7, #3]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	021b      	lsls	r3, r3, #8
 800d7b4:	b21a      	sxth	r2, r3
 800d7b6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	b21b      	sxth	r3, r3
 800d7be:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	1c5a      	adds	r2, r3, #1
 800d7c6:	70fa      	strb	r2, [r7, #3]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800d7d4:	4b35      	ldr	r3, [pc, #212]	@ (800d8ac <ProcessMacCommands+0x9cc>)
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800d7dc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f002 fea2 	bl	801052a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800d7e6:	e04e      	b.n	800d886 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800d7ee:	78fb      	ldrb	r3, [r7, #3]
 800d7f0:	1c5a      	adds	r2, r3, #1
 800d7f2:	70fa      	strb	r2, [r7, #3]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	70fa      	strb	r2, [r7, #3]
 800d806:	461a      	mov	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4413      	add	r3, r2
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d814:	4313      	orrs	r3, r2
 800d816:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d81a:	78fb      	ldrb	r3, [r7, #3]
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	70fa      	strb	r2, [r7, #3]
 800d820:	461a      	mov	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4413      	add	r3, r2
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	041b      	lsls	r3, r3, #16
 800d82a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d82e:	4313      	orrs	r3, r2
 800d830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800d834:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d838:	2264      	movs	r2, #100	@ 0x64
 800d83a:	fb02 f303 	mul.w	r3, r2, r3
 800d83e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800d842:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d846:	f002 fe83 	bl	8010550 <LoRaMacClassBBeaconFreqReq>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d003      	beq.n	800d858 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800d850:	2301      	movs	r3, #1
 800d852:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800d856:	e002      	b.n	800d85e <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800d858:	2300      	movs	r3, #0
 800d85a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800d85e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d862:	2201      	movs	r2, #1
 800d864:	4619      	mov	r1, r3
 800d866:	2013      	movs	r0, #19
 800d868:	f002 ffce 	bl	8010808 <LoRaMacCommandsAddCmd>
                }
                break;
 800d86c:	e00c      	b.n	800d888 <ProcessMacCommands+0x9a8>
                break;
 800d86e:	bf00      	nop
 800d870:	e00a      	b.n	800d888 <ProcessMacCommands+0x9a8>
                break;
 800d872:	bf00      	nop
 800d874:	e008      	b.n	800d888 <ProcessMacCommands+0x9a8>
                break;
 800d876:	bf00      	nop
 800d878:	e006      	b.n	800d888 <ProcessMacCommands+0x9a8>
                break;
 800d87a:	bf00      	nop
 800d87c:	e004      	b.n	800d888 <ProcessMacCommands+0x9a8>
                break;
 800d87e:	bf00      	nop
 800d880:	e002      	b.n	800d888 <ProcessMacCommands+0x9a8>
                break;
 800d882:	bf00      	nop
 800d884:	e000      	b.n	800d888 <ProcessMacCommands+0x9a8>
                break;
 800d886:	bf00      	nop
    while( macIndex < commandsSize )
 800d888:	78fa      	ldrb	r2, [r7, #3]
 800d88a:	78bb      	ldrb	r3, [r7, #2]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	f4ff ab49 	bcc.w	800cf24 <ProcessMacCommands+0x44>
 800d892:	e004      	b.n	800d89e <ProcessMacCommands+0x9be>
        return;
 800d894:	bf00      	nop
 800d896:	e002      	b.n	800d89e <ProcessMacCommands+0x9be>
            return;
 800d898:	bf00      	nop
 800d89a:	e000      	b.n	800d89e <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800d89c:	bf00      	nop
        }
    }
}
 800d89e:	378c      	adds	r7, #140	@ 0x8c
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd90      	pop	{r4, r7, pc}
 800d8a4:	12d53d80 	.word	0x12d53d80
 800d8a8:	20000a28 	.word	0x20000a28
 800d8ac:	20000fdc 	.word	0x20000fdc

0800d8b0 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b08e      	sub	sp, #56	@ 0x38
 800d8b4:	af02      	add	r7, sp, #8
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	607a      	str	r2, [r7, #4]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	460b      	mov	r3, r1
 800d8be:	72fb      	strb	r3, [r7, #11]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d8ca:	4b66      	ldr	r3, [pc, #408]	@ (800da64 <Send+0x1b4>)
 800d8cc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800d8d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800d8d4:	4b63      	ldr	r3, [pc, #396]	@ (800da64 <Send+0x1b4>)
 800d8d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d8da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d8de:	4b61      	ldr	r3, [pc, #388]	@ (800da64 <Send+0x1b4>)
 800d8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d8e4:	4b5f      	ldr	r3, [pc, #380]	@ (800da64 <Send+0x1b4>)
 800d8e6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800d8ee:	2307      	movs	r3, #7
 800d8f0:	e0b4      	b.n	800da5c <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800d8f2:	4b5c      	ldr	r3, [pc, #368]	@ (800da64 <Send+0x1b4>)
 800d8f4:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d8fc:	4b59      	ldr	r3, [pc, #356]	@ (800da64 <Send+0x1b4>)
 800d8fe:	2200      	movs	r2, #0
 800d900:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800d908:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d90c:	f023 030f 	bic.w	r3, r3, #15
 800d910:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800d914:	4b53      	ldr	r3, [pc, #332]	@ (800da64 <Send+0x1b4>)
 800d916:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800d91a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d91e:	f362 13c7 	bfi	r3, r2, #7, #1
 800d922:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d926:	4b4f      	ldr	r3, [pc, #316]	@ (800da64 <Send+0x1b4>)
 800d928:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d106      	bne.n	800d93e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800d930:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d934:	f043 0310 	orr.w	r3, r3, #16
 800d938:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800d93c:	e005      	b.n	800d94a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800d93e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d942:	f023 0310 	bic.w	r3, r3, #16
 800d946:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800d94a:	4b46      	ldr	r3, [pc, #280]	@ (800da64 <Send+0x1b4>)
 800d94c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d950:	2b00      	cmp	r3, #0
 800d952:	d005      	beq.n	800d960 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800d954:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d958:	f043 0320 	orr.w	r3, r3, #32
 800d95c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800d960:	2301      	movs	r3, #1
 800d962:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800d964:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d968:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	bf14      	ite	ne
 800d972:	2301      	movne	r3, #1
 800d974:	2300      	moveq	r3, #0
 800d976:	b2db      	uxtb	r3, r3
 800d978:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d97a:	4b3a      	ldr	r3, [pc, #232]	@ (800da64 <Send+0x1b4>)
 800d97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d97e:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800d980:	4b38      	ldr	r3, [pc, #224]	@ (800da64 <Send+0x1b4>)
 800d982:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800d986:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800d988:	4b36      	ldr	r3, [pc, #216]	@ (800da64 <Send+0x1b4>)
 800d98a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800d98e:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d990:	4b34      	ldr	r3, [pc, #208]	@ (800da64 <Send+0x1b4>)
 800d992:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d996:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d99a:	4b32      	ldr	r3, [pc, #200]	@ (800da64 <Send+0x1b4>)
 800d99c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800d9a0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d9a4:	4b2f      	ldr	r3, [pc, #188]	@ (800da64 <Send+0x1b4>)
 800d9a6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d9aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800d9ae:	4b2d      	ldr	r3, [pc, #180]	@ (800da64 <Send+0x1b4>)
 800d9b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d9b4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d9b8:	4b2a      	ldr	r3, [pc, #168]	@ (800da64 <Send+0x1b4>)
 800d9ba:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800d9be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800d9c2:	f107 0014 	add.w	r0, r7, #20
 800d9c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	4b26      	ldr	r3, [pc, #152]	@ (800da68 <Send+0x1b8>)
 800d9ce:	4a27      	ldr	r2, [pc, #156]	@ (800da6c <Send+0x1bc>)
 800d9d0:	4927      	ldr	r1, [pc, #156]	@ (800da70 <Send+0x1c0>)
 800d9d2:	f002 fc37 	bl	8010244 <LoRaMacAdrCalcNext>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	461a      	mov	r2, r3
 800d9da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d9de:	f362 1386 	bfi	r3, r2, #6, #1
 800d9e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800d9e6:	7afa      	ldrb	r2, [r7, #11]
 800d9e8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d9ec:	893b      	ldrh	r3, [r7, #8]
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 fc72 	bl	800e2dc <PrepareFrame>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800d9fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <Send+0x15e>
 800da06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da0a:	2b0a      	cmp	r3, #10
 800da0c:	d107      	bne.n	800da1e <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800da0e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f962 	bl	800dcdc <ScheduleTx>
 800da18:	4603      	mov	r3, r0
 800da1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800da1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00a      	beq.n	800da3c <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800da26:	4a0f      	ldr	r2, [pc, #60]	@ (800da64 <Send+0x1b4>)
 800da28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800da2c:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800da30:	4a0c      	ldr	r2, [pc, #48]	@ (800da64 <Send+0x1b4>)
 800da32:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800da36:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800da3a:	e00d      	b.n	800da58 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800da3c:	4b09      	ldr	r3, [pc, #36]	@ (800da64 <Send+0x1b4>)
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	4a07      	ldr	r2, [pc, #28]	@ (800da64 <Send+0x1b4>)
 800da48:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800da4a:	f002 ff83 	bl	8010954 <LoRaMacCommandsRemoveNoneStickyCmds>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d001      	beq.n	800da58 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800da54:	2313      	movs	r3, #19
 800da56:	e001      	b.n	800da5c <Send+0x1ac>
        }
    }
    return status;
 800da58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3730      	adds	r7, #48	@ 0x30
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	20008000 	.word	0x20008000
 800da68:	20008068 	.word	0x20008068
 800da6c:	20008038 	.word	0x20008038
 800da70:	20008039 	.word	0x20008039

0800da74 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800da86:	2301      	movs	r3, #1
 800da88:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	2bff      	cmp	r3, #255	@ 0xff
 800da8e:	d11f      	bne.n	800dad0 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800da90:	2000      	movs	r0, #0
 800da92:	f7ff f8eb 	bl	800cc6c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800da96:	4b15      	ldr	r3, [pc, #84]	@ (800daec <SendReJoinReq+0x78>)
 800da98:	2200      	movs	r2, #0
 800da9a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800da9e:	4b13      	ldr	r3, [pc, #76]	@ (800daec <SendReJoinReq+0x78>)
 800daa0:	4a13      	ldr	r2, [pc, #76]	@ (800daf0 <SendReJoinReq+0x7c>)
 800daa2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800daa6:	4b11      	ldr	r3, [pc, #68]	@ (800daec <SendReJoinReq+0x78>)
 800daa8:	22ff      	movs	r2, #255	@ 0xff
 800daaa:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800daae:	7b3b      	ldrb	r3, [r7, #12]
 800dab0:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800dab4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800dab6:	7b3a      	ldrb	r2, [r7, #12]
 800dab8:	4b0c      	ldr	r3, [pc, #48]	@ (800daec <SendReJoinReq+0x78>)
 800daba:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800dabe:	480d      	ldr	r0, [pc, #52]	@ (800daf4 <SendReJoinReq+0x80>)
 800dac0:	f009 fe64 	bl	801778c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800dac4:	480c      	ldr	r0, [pc, #48]	@ (800daf8 <SendReJoinReq+0x84>)
 800dac6:	f009 fe17 	bl	80176f8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 800daca:	2300      	movs	r3, #0
 800dacc:	73fb      	strb	r3, [r7, #15]

            break;
 800dace:	e002      	b.n	800dad6 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800dad0:	2302      	movs	r3, #2
 800dad2:	73bb      	strb	r3, [r7, #14]
            break;
 800dad4:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 f8ff 	bl	800dcdc <ScheduleTx>
 800dade:	4603      	mov	r3, r0
 800dae0:	73bb      	strb	r3, [r7, #14]
    return status;
 800dae2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	20000a28 	.word	0x20000a28
 800daf0:	20000a2a 	.word	0x20000a2a
 800daf4:	20000b36 	.word	0x20000b36
 800daf8:	20000b3e 	.word	0x20000b3e

0800dafc <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800db00:	f002 fcb0 	bl	8010464 <LoRaMacClassBIsBeaconExpected>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800db0a:	230e      	movs	r3, #14
 800db0c:	e013      	b.n	800db36 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800db0e:	4b0b      	ldr	r3, [pc, #44]	@ (800db3c <CheckForClassBCollision+0x40>)
 800db10:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800db14:	2b01      	cmp	r3, #1
 800db16:	d10d      	bne.n	800db34 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800db18:	f002 fcab 	bl	8010472 <LoRaMacClassBIsPingExpected>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800db22:	230f      	movs	r3, #15
 800db24:	e007      	b.n	800db36 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800db26:	f002 fcab 	bl	8010480 <LoRaMacClassBIsMulticastExpected>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800db30:	230f      	movs	r3, #15
 800db32:	e000      	b.n	800db36 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20008000 	.word	0x20008000

0800db40 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800db40:	b590      	push	{r4, r7, lr}
 800db42:	b083      	sub	sp, #12
 800db44:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db46:	4b2d      	ldr	r3, [pc, #180]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db48:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800db4c:	4b2b      	ldr	r3, [pc, #172]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db4e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800db52:	4b2a      	ldr	r3, [pc, #168]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db54:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800db58:	4b28      	ldr	r3, [pc, #160]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db5a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800db5e:	4b27      	ldr	r3, [pc, #156]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db60:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800db64:	b25b      	sxtb	r3, r3
 800db66:	f004 fdd3 	bl	8012710 <RegionApplyDrOffset>
 800db6a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db6c:	b259      	sxtb	r1, r3
 800db6e:	4b23      	ldr	r3, [pc, #140]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db70:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800db74:	4b21      	ldr	r3, [pc, #132]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db78:	4821      	ldr	r0, [pc, #132]	@ (800dc00 <ComputeRxWindowParameters+0xc0>)
 800db7a:	9000      	str	r0, [sp, #0]
 800db7c:	4620      	mov	r0, r4
 800db7e:	f004 fc89 	bl	8012494 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db82:	4b1e      	ldr	r3, [pc, #120]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db84:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800db88:	4b1c      	ldr	r3, [pc, #112]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db8a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db8e:	b259      	sxtb	r1, r3
 800db90:	4b1a      	ldr	r3, [pc, #104]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db92:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800db96:	4b19      	ldr	r3, [pc, #100]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800db98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db9a:	4c1a      	ldr	r4, [pc, #104]	@ (800dc04 <ComputeRxWindowParameters+0xc4>)
 800db9c:	9400      	str	r4, [sp, #0]
 800db9e:	f004 fc79 	bl	8012494 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800dba2:	4b16      	ldr	r3, [pc, #88]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800dba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dba6:	4a18      	ldr	r2, [pc, #96]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dba8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800dbac:	4413      	add	r3, r2
 800dbae:	4a16      	ldr	r2, [pc, #88]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbb0:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800dbb4:	4b11      	ldr	r3, [pc, #68]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800dbb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dbb8:	4a13      	ldr	r2, [pc, #76]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbba:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800dbbe:	4413      	add	r3, r2
 800dbc0:	4a11      	ldr	r2, [pc, #68]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbc2:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800dbc6:	4b10      	ldr	r3, [pc, #64]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbc8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dbcc:	2b04      	cmp	r3, #4
 800dbce:	d011      	beq.n	800dbf4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800dbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800dbd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbd4:	4a0c      	ldr	r2, [pc, #48]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbd6:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800dbda:	4413      	add	r3, r2
 800dbdc:	4a0a      	ldr	r2, [pc, #40]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbde:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800dbe2:	4b06      	ldr	r3, [pc, #24]	@ (800dbfc <ComputeRxWindowParameters+0xbc>)
 800dbe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbe6:	4a08      	ldr	r2, [pc, #32]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbe8:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800dbec:	4413      	add	r3, r2
 800dbee:	4a06      	ldr	r2, [pc, #24]	@ (800dc08 <ComputeRxWindowParameters+0xc8>)
 800dbf0:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800dbf4:	bf00      	nop
 800dbf6:	3704      	adds	r7, #4
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd90      	pop	{r4, r7, pc}
 800dbfc:	20008000 	.word	0x20008000
 800dc00:	20000de0 	.word	0x20000de0
 800dc04:	20000df8 	.word	0x20000df8
 800dc08:	20000a28 	.word	0x20000a28

0800dc0c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dc16:	4b13      	ldr	r3, [pc, #76]	@ (800dc64 <VerifyTxFrame+0x58>)
 800dc18:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d01b      	beq.n	800dc58 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800dc20:	1d3b      	adds	r3, r7, #4
 800dc22:	4618      	mov	r0, r3
 800dc24:	f002 fee6 	bl	80109f4 <LoRaMacCommandsGetSizeSerializedCmds>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dc2e:	2313      	movs	r3, #19
 800dc30:	e013      	b.n	800dc5a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800dc32:	4b0d      	ldr	r3, [pc, #52]	@ (800dc68 <VerifyTxFrame+0x5c>)
 800dc34:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800dc38:	4a0a      	ldr	r2, [pc, #40]	@ (800dc64 <VerifyTxFrame+0x58>)
 800dc3a:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	b2d2      	uxtb	r2, r2
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7ff f924 	bl	800ce90 <ValidatePayloadLength>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	f083 0301 	eor.w	r3, r3, #1
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800dc54:	2308      	movs	r3, #8
 800dc56:	e000      	b.n	800dc5a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20008000 	.word	0x20008000
 800dc68:	20000a28 	.word	0x20000a28

0800dc6c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800dc72:	4b18      	ldr	r3, [pc, #96]	@ (800dcd4 <SerializeTxFrame+0x68>)
 800dc74:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <SerializeTxFrame+0x16>
 800dc7c:	2b04      	cmp	r3, #4
 800dc7e:	d011      	beq.n	800dca4 <SerializeTxFrame+0x38>
 800dc80:	e021      	b.n	800dcc6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800dc82:	4815      	ldr	r0, [pc, #84]	@ (800dcd8 <SerializeTxFrame+0x6c>)
 800dc84:	f004 f9d9 	bl	801203a <LoRaMacSerializerJoinRequest>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800dc8c:	79fb      	ldrb	r3, [r7, #7]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc92:	2311      	movs	r3, #17
 800dc94:	e01a      	b.n	800dccc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800dc96:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd4 <SerializeTxFrame+0x68>)
 800dc98:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd4 <SerializeTxFrame+0x68>)
 800dca0:	801a      	strh	r2, [r3, #0]
            break;
 800dca2:	e012      	b.n	800dcca <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800dca4:	480c      	ldr	r0, [pc, #48]	@ (800dcd8 <SerializeTxFrame+0x6c>)
 800dca6:	f004 fa4a 	bl	801213e <LoRaMacSerializerData>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800dcae:	79fb      	ldrb	r3, [r7, #7]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800dcb4:	2311      	movs	r3, #17
 800dcb6:	e009      	b.n	800dccc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800dcb8:	4b06      	ldr	r3, [pc, #24]	@ (800dcd4 <SerializeTxFrame+0x68>)
 800dcba:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	4b04      	ldr	r3, [pc, #16]	@ (800dcd4 <SerializeTxFrame+0x68>)
 800dcc2:	801a      	strh	r2, [r3, #0]
            break;
 800dcc4:	e001      	b.n	800dcca <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	e000      	b.n	800dccc <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	20000a28 	.word	0x20000a28
 800dcd8:	20000b30 	.word	0x20000b30

0800dcdc <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b090      	sub	sp, #64	@ 0x40
 800dce0:	af02      	add	r7, sp, #8
 800dce2:	4603      	mov	r3, r0
 800dce4:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dce6:	2303      	movs	r3, #3
 800dce8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800dcec:	f7ff ff06 	bl	800dafc <CheckForClassBCollision>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800dcf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d002      	beq.n	800dd04 <ScheduleTx+0x28>
    {
        return status;
 800dcfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd02:	e092      	b.n	800de2a <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800dd04:	f000 f8f8 	bl	800def8 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800dd08:	f7ff ffb0 	bl	800dc6c <SerializeTxFrame>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800dd12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <ScheduleTx+0x44>
    {
        return status;
 800dd1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd1e:	e084      	b.n	800de2a <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800dd20:	4b44      	ldr	r3, [pc, #272]	@ (800de34 <ScheduleTx+0x158>)
 800dd22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd24:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dd26:	4b43      	ldr	r3, [pc, #268]	@ (800de34 <ScheduleTx+0x158>)
 800dd28:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800dd2c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800dd2e:	4b41      	ldr	r3, [pc, #260]	@ (800de34 <ScheduleTx+0x158>)
 800dd30:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800dd34:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dd36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f00d f8ac 	bl	801ae98 <SysTimeGetMcuTime>
 800dd40:	4638      	mov	r0, r7
 800dd42:	4b3c      	ldr	r3, [pc, #240]	@ (800de34 <ScheduleTx+0x158>)
 800dd44:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800dd48:	9200      	str	r2, [sp, #0]
 800dd4a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd4e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dd52:	ca06      	ldmia	r2, {r1, r2}
 800dd54:	f00d f801 	bl	801ad5a <SysTimeSub>
 800dd58:	f107 0320 	add.w	r3, r7, #32
 800dd5c:	463a      	mov	r2, r7
 800dd5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd62:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800dd66:	4b33      	ldr	r3, [pc, #204]	@ (800de34 <ScheduleTx+0x158>)
 800dd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800dd72:	2301      	movs	r3, #1
 800dd74:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800dd76:	4b30      	ldr	r3, [pc, #192]	@ (800de38 <ScheduleTx+0x15c>)
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dd7c:	4b2d      	ldr	r3, [pc, #180]	@ (800de34 <ScheduleTx+0x158>)
 800dd7e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d104      	bne.n	800dd90 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800dd86:	2301      	movs	r3, #1
 800dd88:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800dd90:	4b28      	ldr	r3, [pc, #160]	@ (800de34 <ScheduleTx+0x158>)
 800dd92:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800dd96:	f107 0114 	add.w	r1, r7, #20
 800dd9a:	4b28      	ldr	r3, [pc, #160]	@ (800de3c <ScheduleTx+0x160>)
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	4b28      	ldr	r3, [pc, #160]	@ (800de40 <ScheduleTx+0x164>)
 800dda0:	4a28      	ldr	r2, [pc, #160]	@ (800de44 <ScheduleTx+0x168>)
 800dda2:	f004 fc92 	bl	80126ca <RegionNextChannel>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800ddac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d025      	beq.n	800de00 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800ddb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddb8:	2b0b      	cmp	r3, #11
 800ddba:	d11e      	bne.n	800ddfa <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ddbc:	4b1e      	ldr	r3, [pc, #120]	@ (800de38 <ScheduleTx+0x15c>)
 800ddbe:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d01c      	beq.n	800de00 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800ddc6:	7bfb      	ldrb	r3, [r7, #15]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d013      	beq.n	800ddf4 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800ddcc:	4b1a      	ldr	r3, [pc, #104]	@ (800de38 <ScheduleTx+0x15c>)
 800ddce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ddd2:	f043 0320 	orr.w	r3, r3, #32
 800ddd6:	4a18      	ldr	r2, [pc, #96]	@ (800de38 <ScheduleTx+0x15c>)
 800ddd8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800dddc:	4b16      	ldr	r3, [pc, #88]	@ (800de38 <ScheduleTx+0x15c>)
 800ddde:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800dde2:	4619      	mov	r1, r3
 800dde4:	4818      	ldr	r0, [pc, #96]	@ (800de48 <ScheduleTx+0x16c>)
 800dde6:	f00d fa01 	bl	801b1ec <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800ddea:	4817      	ldr	r0, [pc, #92]	@ (800de48 <ScheduleTx+0x16c>)
 800ddec:	f00d f920 	bl	801b030 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e01a      	b.n	800de2a <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800ddf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddf8:	e017      	b.n	800de2a <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800ddfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddfe:	e014      	b.n	800de2a <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800de00:	f7ff fe9e 	bl	800db40 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800de04:	f7ff ff02 	bl	800dc0c <VerifyTxFrame>
 800de08:	4603      	mov	r3, r0
 800de0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800de0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <ScheduleTx+0x140>
    {
        return status;
 800de16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800de1a:	e006      	b.n	800de2a <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800de1c:	4b06      	ldr	r3, [pc, #24]	@ (800de38 <ScheduleTx+0x15c>)
 800de1e:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800de22:	4618      	mov	r0, r3
 800de24:	f000 fb74 	bl	800e510 <SendFrameOnChannel>
 800de28:	4603      	mov	r3, r0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3738      	adds	r7, #56	@ 0x38
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	20008000 	.word	0x20008000
 800de38:	20000a28 	.word	0x20000a28
 800de3c:	20008030 	.word	0x20008030
 800de40:	20000ebc 	.word	0x20000ebc
 800de44:	20000e43 	.word	0x20000e43
 800de48:	20000d90 	.word	0x20000d90

0800de4c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	4603      	mov	r3, r0
 800de54:	460a      	mov	r2, r1
 800de56:	71fb      	strb	r3, [r7, #7]
 800de58:	4613      	mov	r3, r2
 800de5a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800de5c:	2312      	movs	r3, #18
 800de5e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800de60:	2300      	movs	r3, #0
 800de62:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800de64:	4b22      	ldr	r3, [pc, #136]	@ (800def0 <SecureFrame+0xa4>)
 800de66:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <SecureFrame+0x28>
 800de6e:	2b04      	cmp	r3, #4
 800de70:	d011      	beq.n	800de96 <SecureFrame+0x4a>
 800de72:	e036      	b.n	800dee2 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800de74:	481f      	ldr	r0, [pc, #124]	@ (800def4 <SecureFrame+0xa8>)
 800de76:	f003 fcb3 	bl	80117e0 <LoRaMacCryptoPrepareJoinRequest>
 800de7a:	4603      	mov	r3, r0
 800de7c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800de7e:	7bfb      	ldrb	r3, [r7, #15]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800de84:	2311      	movs	r3, #17
 800de86:	e02f      	b.n	800dee8 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800de88:	4b19      	ldr	r3, [pc, #100]	@ (800def0 <SecureFrame+0xa4>)
 800de8a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800de8e:	461a      	mov	r2, r3
 800de90:	4b17      	ldr	r3, [pc, #92]	@ (800def0 <SecureFrame+0xa4>)
 800de92:	801a      	strh	r2, [r3, #0]
            break;
 800de94:	e027      	b.n	800dee6 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800de96:	f107 0308 	add.w	r3, r7, #8
 800de9a:	4618      	mov	r0, r3
 800de9c:	f003 fbda 	bl	8011654 <LoRaMacCryptoGetFCntUp>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800dea6:	2312      	movs	r3, #18
 800dea8:	e01e      	b.n	800dee8 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800deaa:	4b11      	ldr	r3, [pc, #68]	@ (800def0 <SecureFrame+0xa4>)
 800deac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800deba:	68b8      	ldr	r0, [r7, #8]
 800debc:	79ba      	ldrb	r2, [r7, #6]
 800debe:	79f9      	ldrb	r1, [r7, #7]
 800dec0:	4b0c      	ldr	r3, [pc, #48]	@ (800def4 <SecureFrame+0xa8>)
 800dec2:	f003 fdb3 	bl	8011a2c <LoRaMacCryptoSecureMessage>
 800dec6:	4603      	mov	r3, r0
 800dec8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ded0:	2311      	movs	r3, #17
 800ded2:	e009      	b.n	800dee8 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ded4:	4b06      	ldr	r3, [pc, #24]	@ (800def0 <SecureFrame+0xa4>)
 800ded6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800deda:	461a      	mov	r2, r3
 800dedc:	4b04      	ldr	r3, [pc, #16]	@ (800def0 <SecureFrame+0xa4>)
 800dede:	801a      	strh	r2, [r3, #0]
            break;
 800dee0:	e001      	b.n	800dee6 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e000      	b.n	800dee8 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	20000a28 	.word	0x20000a28
 800def4:	20000b30 	.word	0x20000b30

0800def8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800def8:	b480      	push	{r7}
 800defa:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800defc:	4b09      	ldr	r3, [pc, #36]	@ (800df24 <CalculateBackOff+0x2c>)
 800defe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800df04:	4b07      	ldr	r3, [pc, #28]	@ (800df24 <CalculateBackOff+0x2c>)
 800df06:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800df0a:	3b01      	subs	r3, #1
 800df0c:	4a06      	ldr	r2, [pc, #24]	@ (800df28 <CalculateBackOff+0x30>)
 800df0e:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 800df12:	fb02 f303 	mul.w	r3, r2, r3
 800df16:	4a03      	ldr	r2, [pc, #12]	@ (800df24 <CalculateBackOff+0x2c>)
 800df18:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800df1a:	bf00      	nop
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bc80      	pop	{r7}
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	20008000 	.word	0x20008000
 800df28:	20000a28 	.word	0x20000a28

0800df2c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	4603      	mov	r3, r0
 800df34:	7139      	strb	r1, [r7, #4]
 800df36:	71fb      	strb	r3, [r7, #7]
 800df38:	4613      	mov	r3, r2
 800df3a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <RemoveMacCommands+0x1c>
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	2b01      	cmp	r3, #1
 800df46:	d10d      	bne.n	800df64 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800df48:	79bb      	ldrb	r3, [r7, #6]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d108      	bne.n	800df60 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800df4e:	793b      	ldrb	r3, [r7, #4]
 800df50:	f003 0320 	and.w	r3, r3, #32
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d004      	beq.n	800df64 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800df5a:	f002 fd1f 	bl	801099c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800df5e:	e001      	b.n	800df64 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800df60:	f002 fd1c 	bl	801099c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800df6c:	b5b0      	push	{r4, r5, r7, lr}
 800df6e:	b092      	sub	sp, #72	@ 0x48
 800df70:	af00      	add	r7, sp, #0
 800df72:	4603      	mov	r3, r0
 800df74:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800df76:	79fb      	ldrb	r3, [r7, #7]
 800df78:	f083 0301 	eor.w	r3, r3, #1
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800df82:	4b88      	ldr	r3, [pc, #544]	@ (800e1a4 <ResetMacParameters+0x238>)
 800df84:	2200      	movs	r2, #0
 800df86:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800df8a:	4b86      	ldr	r3, [pc, #536]	@ (800e1a4 <ResetMacParameters+0x238>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800df90:	4b85      	ldr	r3, [pc, #532]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800df98:	4b83      	ldr	r3, [pc, #524]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800dfa0:	4b81      	ldr	r3, [pc, #516]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800dfa8:	4b7e      	ldr	r3, [pc, #504]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800dfb0:	4b7c      	ldr	r3, [pc, #496]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800dfb8:	4b7a      	ldr	r3, [pc, #488]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfba:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800dfbe:	4b79      	ldr	r3, [pc, #484]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800dfc4:	4b77      	ldr	r3, [pc, #476]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfc6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800dfca:	4b76      	ldr	r3, [pc, #472]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800dfd0:	4b74      	ldr	r3, [pc, #464]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfd2:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800dfd6:	4b73      	ldr	r3, [pc, #460]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfd8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800dfdc:	4b71      	ldr	r3, [pc, #452]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfde:	4a71      	ldr	r2, [pc, #452]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfe0:	336c      	adds	r3, #108	@ 0x6c
 800dfe2:	32b4      	adds	r2, #180	@ 0xb4
 800dfe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfe8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800dfec:	4b6d      	ldr	r3, [pc, #436]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dfee:	4a6d      	ldr	r2, [pc, #436]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dff0:	3374      	adds	r3, #116	@ 0x74
 800dff2:	32bc      	adds	r2, #188	@ 0xbc
 800dff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dff8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800dffc:	4b69      	ldr	r3, [pc, #420]	@ (800e1a4 <ResetMacParameters+0x238>)
 800dffe:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800e002:	4b68      	ldr	r3, [pc, #416]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e004:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800e008:	4b66      	ldr	r3, [pc, #408]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e00a:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800e00e:	4b65      	ldr	r3, [pc, #404]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e010:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800e014:	4b63      	ldr	r3, [pc, #396]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e016:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e01a:	4a62      	ldr	r2, [pc, #392]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e01c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e020:	4b60      	ldr	r3, [pc, #384]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e022:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e026:	4a5f      	ldr	r2, [pc, #380]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e028:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e02c:	4b5d      	ldr	r3, [pc, #372]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e02e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800e032:	4b5c      	ldr	r3, [pc, #368]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e034:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e038:	4b5a      	ldr	r3, [pc, #360]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e03a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800e03e:	4b59      	ldr	r3, [pc, #356]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e040:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800e044:	4b58      	ldr	r3, [pc, #352]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e046:	2200      	movs	r2, #0
 800e048:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800e04c:	4b55      	ldr	r3, [pc, #340]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800e054:	4b53      	ldr	r3, [pc, #332]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e056:	2200      	movs	r2, #0
 800e058:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800e05c:	4b51      	ldr	r3, [pc, #324]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800e064:	4b4f      	ldr	r3, [pc, #316]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e066:	2200      	movs	r2, #0
 800e068:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800e06c:	4b4d      	ldr	r3, [pc, #308]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e06e:	2200      	movs	r2, #0
 800e070:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800e074:	4b4b      	ldr	r3, [pc, #300]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e076:	2200      	movs	r2, #0
 800e078:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800e07c:	4b49      	ldr	r3, [pc, #292]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e07e:	2200      	movs	r2, #0
 800e080:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800e084:	4b47      	ldr	r3, [pc, #284]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e086:	2200      	movs	r2, #0
 800e088:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800e08c:	4b45      	ldr	r3, [pc, #276]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e08e:	2200      	movs	r2, #0
 800e090:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800e094:	4b43      	ldr	r3, [pc, #268]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e096:	2200      	movs	r2, #0
 800e098:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800e09c:	4b41      	ldr	r3, [pc, #260]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e0a8:	4b40      	ldr	r3, [pc, #256]	@ (800e1ac <ResetMacParameters+0x240>)
 800e0aa:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e0ac:	4b40      	ldr	r3, [pc, #256]	@ (800e1b0 <ResetMacParameters+0x244>)
 800e0ae:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 800e0b0:	4b40      	ldr	r3, [pc, #256]	@ (800e1b4 <ResetMacParameters+0x248>)
 800e0b2:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e0b4:	4b3b      	ldr	r3, [pc, #236]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e0b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e0ba:	f107 020c 	add.w	r2, r7, #12
 800e0be:	4611      	mov	r1, r2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f004 f97d 	bl	80123c0 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800e0c6:	4b38      	ldr	r3, [pc, #224]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e0ce:	4b36      	ldr	r3, [pc, #216]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e0d0:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800e0d4:	4b34      	ldr	r3, [pc, #208]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e0d6:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e0da:	4b32      	ldr	r3, [pc, #200]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0de:	4a32      	ldr	r2, [pc, #200]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e0e0:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e0e4:	4b2f      	ldr	r3, [pc, #188]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e0e6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e0ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e0ec:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e0f0:	4b2c      	ldr	r3, [pc, #176]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e0f2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e0f6:	4b2c      	ldr	r3, [pc, #176]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e0f8:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e0fc:	4b2a      	ldr	r3, [pc, #168]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e104:	4b28      	ldr	r3, [pc, #160]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e106:	2201      	movs	r2, #1
 800e108:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e10c:	4b25      	ldr	r3, [pc, #148]	@ (800e1a4 <ResetMacParameters+0x238>)
 800e10e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e112:	4b25      	ldr	r3, [pc, #148]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e114:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e118:	4a23      	ldr	r2, [pc, #140]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e11a:	4b23      	ldr	r3, [pc, #140]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e11c:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800e120:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800e124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e128:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e12c:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e130:	4b1d      	ldr	r3, [pc, #116]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e132:	2201      	movs	r2, #1
 800e134:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e138:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e13a:	2202      	movs	r2, #2
 800e13c:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800e140:	2300      	movs	r3, #0
 800e142:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 800e144:	2300      	movs	r3, #0
 800e146:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 800e148:	4b17      	ldr	r3, [pc, #92]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e14a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d009      	beq.n	800e166 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800e152:	4b15      	ldr	r3, [pc, #84]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e154:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800e15c:	4b12      	ldr	r3, [pc, #72]	@ (800e1a8 <ResetMacParameters+0x23c>)
 800e15e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e162:	695b      	ldr	r3, [r3, #20]
 800e164:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e166:	4b14      	ldr	r3, [pc, #80]	@ (800e1b8 <ResetMacParameters+0x24c>)
 800e168:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e16a:	4b14      	ldr	r3, [pc, #80]	@ (800e1bc <ResetMacParameters+0x250>)
 800e16c:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e16e:	4b14      	ldr	r3, [pc, #80]	@ (800e1c0 <ResetMacParameters+0x254>)
 800e170:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e172:	4b14      	ldr	r3, [pc, #80]	@ (800e1c4 <ResetMacParameters+0x258>)
 800e174:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800e176:	4b14      	ldr	r3, [pc, #80]	@ (800e1c8 <ResetMacParameters+0x25c>)
 800e178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800e17a:	4b14      	ldr	r3, [pc, #80]	@ (800e1cc <ResetMacParameters+0x260>)
 800e17c:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800e17e:	4b14      	ldr	r3, [pc, #80]	@ (800e1d0 <ResetMacParameters+0x264>)
 800e180:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800e182:	4b14      	ldr	r3, [pc, #80]	@ (800e1d4 <ResetMacParameters+0x268>)
 800e184:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800e186:	4b14      	ldr	r3, [pc, #80]	@ (800e1d8 <ResetMacParameters+0x26c>)
 800e188:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800e18a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800e18e:	f107 031c 	add.w	r3, r7, #28
 800e192:	4a12      	ldr	r2, [pc, #72]	@ (800e1dc <ResetMacParameters+0x270>)
 800e194:	4618      	mov	r0, r3
 800e196:	f002 f90e 	bl	80103b6 <LoRaMacClassBInit>
}
 800e19a:	bf00      	nop
 800e19c:	3748      	adds	r7, #72	@ 0x48
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	20008000 	.word	0x20008000
 800e1a8:	20000a28 	.word	0x20000a28
 800e1ac:	20008224 	.word	0x20008224
 800e1b0:	20008238 	.word	0x20008238
 800e1b4:	20000f44 	.word	0x20000f44
 800e1b8:	20000e90 	.word	0x20000e90
 800e1bc:	20000e48 	.word	0x20000e48
 800e1c0:	20000e7c 	.word	0x20000e7c
 800e1c4:	20000eb9 	.word	0x20000eb9
 800e1c8:	200080e4 	.word	0x200080e4
 800e1cc:	20008048 	.word	0x20008048
 800e1d0:	2000804c 	.word	0x2000804c
 800e1d4:	200080e8 	.word	0x200080e8
 800e1d8:	20008130 	.word	0x20008130
 800e1dc:	200085b4 	.word	0x200085b4

0800e1e0 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f00c ff8e 	bl	801b10c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800e1f0:	4b11      	ldr	r3, [pc, #68]	@ (800e238 <RxWindowSetup+0x58>)
 800e1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1f4:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e1f6:	4b11      	ldr	r3, [pc, #68]	@ (800e23c <RxWindowSetup+0x5c>)
 800e1f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e1fc:	4a10      	ldr	r2, [pc, #64]	@ (800e240 <RxWindowSetup+0x60>)
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	4618      	mov	r0, r3
 800e202:	f004 f96a 	bl	80124da <RegionRxConfig>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d010      	beq.n	800e22e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800e20c:	4b0d      	ldr	r3, [pc, #52]	@ (800e244 <RxWindowSetup+0x64>)
 800e20e:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800e212:	4b0c      	ldr	r3, [pc, #48]	@ (800e244 <RxWindowSetup+0x64>)
 800e214:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800e218:	4b07      	ldr	r3, [pc, #28]	@ (800e238 <RxWindowSetup+0x58>)
 800e21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e21c:	4a07      	ldr	r2, [pc, #28]	@ (800e23c <RxWindowSetup+0x5c>)
 800e21e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800e220:	4610      	mov	r0, r2
 800e222:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	7cda      	ldrb	r2, [r3, #19]
 800e228:	4b06      	ldr	r3, [pc, #24]	@ (800e244 <RxWindowSetup+0x64>)
 800e22a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800e22e:	bf00      	nop
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	08021f8c 	.word	0x08021f8c
 800e23c:	20008000 	.word	0x20008000
 800e240:	20000e4c 	.word	0x20000e4c
 800e244:	20000a28 	.word	0x20000a28

0800e248 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800e248:	b590      	push	{r4, r7, lr}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800e24e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2c8 <OpenContinuousRxCWindow+0x80>)
 800e250:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800e254:	4b1c      	ldr	r3, [pc, #112]	@ (800e2c8 <OpenContinuousRxCWindow+0x80>)
 800e256:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800e25a:	b259      	sxtb	r1, r3
 800e25c:	4b1a      	ldr	r3, [pc, #104]	@ (800e2c8 <OpenContinuousRxCWindow+0x80>)
 800e25e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800e262:	4b19      	ldr	r3, [pc, #100]	@ (800e2c8 <OpenContinuousRxCWindow+0x80>)
 800e264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e266:	4c19      	ldr	r4, [pc, #100]	@ (800e2cc <OpenContinuousRxCWindow+0x84>)
 800e268:	9400      	str	r4, [sp, #0]
 800e26a:	f004 f913 	bl	8012494 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e26e:	4b18      	ldr	r3, [pc, #96]	@ (800e2d0 <OpenContinuousRxCWindow+0x88>)
 800e270:	2202      	movs	r2, #2
 800e272:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e276:	4b14      	ldr	r3, [pc, #80]	@ (800e2c8 <OpenContinuousRxCWindow+0x80>)
 800e278:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e27c:	4b14      	ldr	r3, [pc, #80]	@ (800e2d0 <OpenContinuousRxCWindow+0x88>)
 800e27e:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e282:	4b13      	ldr	r3, [pc, #76]	@ (800e2d0 <OpenContinuousRxCWindow+0x88>)
 800e284:	2201      	movs	r2, #1
 800e286:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e28a:	4b0f      	ldr	r3, [pc, #60]	@ (800e2c8 <OpenContinuousRxCWindow+0x80>)
 800e28c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e290:	4a10      	ldr	r2, [pc, #64]	@ (800e2d4 <OpenContinuousRxCWindow+0x8c>)
 800e292:	490e      	ldr	r1, [pc, #56]	@ (800e2cc <OpenContinuousRxCWindow+0x84>)
 800e294:	4618      	mov	r0, r3
 800e296:	f004 f920 	bl	80124da <RegionRxConfig>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00f      	beq.n	800e2c0 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d0 <OpenContinuousRxCWindow+0x88>)
 800e2a2:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800e2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d0 <OpenContinuousRxCWindow+0x88>)
 800e2a8:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800e2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d8 <OpenContinuousRxCWindow+0x90>)
 800e2ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800e2b4:	4b06      	ldr	r3, [pc, #24]	@ (800e2d0 <OpenContinuousRxCWindow+0x88>)
 800e2b6:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 800e2ba:	4b05      	ldr	r3, [pc, #20]	@ (800e2d0 <OpenContinuousRxCWindow+0x88>)
 800e2bc:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800e2c0:	bf00      	nop
 800e2c2:	3704      	adds	r7, #4
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd90      	pop	{r4, r7, pc}
 800e2c8:	20008000 	.word	0x20008000
 800e2cc:	20000e10 	.word	0x20000e10
 800e2d0:	20000a28 	.word	0x20000a28
 800e2d4:	20000e4c 	.word	0x20000e4c
 800e2d8:	08021f8c 	.word	0x08021f8c

0800e2dc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b088      	sub	sp, #32
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	603b      	str	r3, [r7, #0]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800e2ec:	4b81      	ldr	r3, [pc, #516]	@ (800e4f4 <PrepareFrame+0x218>)
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800e2f2:	4b80      	ldr	r3, [pc, #512]	@ (800e4f4 <PrepareFrame+0x218>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800e2fe:	2300      	movs	r3, #0
 800e300:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800e302:	2300      	movs	r3, #0
 800e304:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d101      	bne.n	800e310 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e310:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e312:	461a      	mov	r2, r3
 800e314:	6839      	ldr	r1, [r7, #0]
 800e316:	4878      	ldr	r0, [pc, #480]	@ (800e4f8 <PrepareFrame+0x21c>)
 800e318:	f009 fab9 	bl	801788e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e31c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	4b74      	ldr	r3, [pc, #464]	@ (800e4f4 <PrepareFrame+0x218>)
 800e322:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	781a      	ldrb	r2, [r3, #0]
 800e32a:	4b72      	ldr	r3, [pc, #456]	@ (800e4f4 <PrepareFrame+0x218>)
 800e32c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b07      	cmp	r3, #7
 800e33a:	f000 80b9 	beq.w	800e4b0 <PrepareFrame+0x1d4>
 800e33e:	2b07      	cmp	r3, #7
 800e340:	f300 80ce 	bgt.w	800e4e0 <PrepareFrame+0x204>
 800e344:	2b02      	cmp	r3, #2
 800e346:	d006      	beq.n	800e356 <PrepareFrame+0x7a>
 800e348:	2b04      	cmp	r3, #4
 800e34a:	f040 80c9 	bne.w	800e4e0 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800e34e:	4b69      	ldr	r3, [pc, #420]	@ (800e4f4 <PrepareFrame+0x218>)
 800e350:	2201      	movs	r2, #1
 800e352:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e356:	4b67      	ldr	r3, [pc, #412]	@ (800e4f4 <PrepareFrame+0x218>)
 800e358:	2204      	movs	r2, #4
 800e35a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e35e:	4b65      	ldr	r3, [pc, #404]	@ (800e4f4 <PrepareFrame+0x218>)
 800e360:	4a66      	ldr	r2, [pc, #408]	@ (800e4fc <PrepareFrame+0x220>)
 800e362:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e366:	4b63      	ldr	r3, [pc, #396]	@ (800e4f4 <PrepareFrame+0x218>)
 800e368:	22ff      	movs	r2, #255	@ 0xff
 800e36a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	781a      	ldrb	r2, [r3, #0]
 800e372:	4b60      	ldr	r3, [pc, #384]	@ (800e4f4 <PrepareFrame+0x218>)
 800e374:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e378:	4a5e      	ldr	r2, [pc, #376]	@ (800e4f4 <PrepareFrame+0x218>)
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800e380:	4b5f      	ldr	r3, [pc, #380]	@ (800e500 <PrepareFrame+0x224>)
 800e382:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e386:	4a5b      	ldr	r2, [pc, #364]	@ (800e4f4 <PrepareFrame+0x218>)
 800e388:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	781a      	ldrb	r2, [r3, #0]
 800e390:	4b58      	ldr	r3, [pc, #352]	@ (800e4f4 <PrepareFrame+0x218>)
 800e392:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e396:	4b57      	ldr	r3, [pc, #348]	@ (800e4f4 <PrepareFrame+0x218>)
 800e398:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800e39c:	4b55      	ldr	r3, [pc, #340]	@ (800e4f4 <PrepareFrame+0x218>)
 800e39e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e3a2:	4b54      	ldr	r3, [pc, #336]	@ (800e4f4 <PrepareFrame+0x218>)
 800e3a4:	4a54      	ldr	r2, [pc, #336]	@ (800e4f8 <PrepareFrame+0x21c>)
 800e3a6:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e3aa:	f107 0318 	add.w	r3, r7, #24
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f003 f950 	bl	8011654 <LoRaMacCryptoGetFCntUp>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d001      	beq.n	800e3be <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e3ba:	2312      	movs	r3, #18
 800e3bc:	e096      	b.n	800e4ec <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	4b4c      	ldr	r3, [pc, #304]	@ (800e4f4 <PrepareFrame+0x218>)
 800e3c4:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 800e3c8:	4b4a      	ldr	r3, [pc, #296]	@ (800e4f4 <PrepareFrame+0x218>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800e3d0:	4b48      	ldr	r3, [pc, #288]	@ (800e4f4 <PrepareFrame+0x218>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	4a46      	ldr	r2, [pc, #280]	@ (800e4f4 <PrepareFrame+0x218>)
 800e3dc:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e3e0:	f107 0314 	add.w	r3, r7, #20
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f002 fb05 	bl	80109f4 <LoRaMacCommandsGetSizeSerializedCmds>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e3f0:	2313      	movs	r3, #19
 800e3f2:	e07b      	b.n	800e4ec <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d074      	beq.n	800e4e4 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800e3fa:	4b41      	ldr	r3, [pc, #260]	@ (800e500 <PrepareFrame+0x224>)
 800e3fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e400:	4618      	mov	r0, r3
 800e402:	f7fe fd1d 	bl	800ce40 <GetMaxAppPayloadWithoutFOptsLength>
 800e406:	4603      	mov	r3, r0
 800e408:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e40a:	4b3a      	ldr	r3, [pc, #232]	@ (800e4f4 <PrepareFrame+0x218>)
 800e40c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01d      	beq.n	800e450 <PrepareFrame+0x174>
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	2b0f      	cmp	r3, #15
 800e418:	d81a      	bhi.n	800e450 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e41a:	f107 0314 	add.w	r3, r7, #20
 800e41e:	4a39      	ldr	r2, [pc, #228]	@ (800e504 <PrepareFrame+0x228>)
 800e420:	4619      	mov	r1, r3
 800e422:	200f      	movs	r0, #15
 800e424:	f002 fafc 	bl	8010a20 <LoRaMacCommandsSerializeCmds>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d001      	beq.n	800e432 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e42e:	2313      	movs	r3, #19
 800e430:	e05c      	b.n	800e4ec <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	f003 030f 	and.w	r3, r3, #15
 800e438:	b2d9      	uxtb	r1, r3
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	7813      	ldrb	r3, [r2, #0]
 800e43e:	f361 0303 	bfi	r3, r1, #0, #4
 800e442:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	781a      	ldrb	r2, [r3, #0]
 800e448:	4b2a      	ldr	r3, [pc, #168]	@ (800e4f4 <PrepareFrame+0x218>)
 800e44a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800e44e:	e049      	b.n	800e4e4 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e450:	4b28      	ldr	r3, [pc, #160]	@ (800e4f4 <PrepareFrame+0x218>)
 800e452:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e456:	2b00      	cmp	r3, #0
 800e458:	d010      	beq.n	800e47c <PrepareFrame+0x1a0>
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b0f      	cmp	r3, #15
 800e45e:	d90d      	bls.n	800e47c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e460:	7ffb      	ldrb	r3, [r7, #31]
 800e462:	f107 0114 	add.w	r1, r7, #20
 800e466:	4a28      	ldr	r2, [pc, #160]	@ (800e508 <PrepareFrame+0x22c>)
 800e468:	4618      	mov	r0, r3
 800e46a:	f002 fad9 	bl	8010a20 <LoRaMacCommandsSerializeCmds>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d001      	beq.n	800e478 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e474:	2313      	movs	r3, #19
 800e476:	e039      	b.n	800e4ec <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800e478:	230a      	movs	r3, #10
 800e47a:	e037      	b.n	800e4ec <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e47c:	7ffb      	ldrb	r3, [r7, #31]
 800e47e:	f107 0114 	add.w	r1, r7, #20
 800e482:	4a21      	ldr	r2, [pc, #132]	@ (800e508 <PrepareFrame+0x22c>)
 800e484:	4618      	mov	r0, r3
 800e486:	f002 facb 	bl	8010a20 <LoRaMacCommandsSerializeCmds>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e490:	2313      	movs	r3, #19
 800e492:	e02b      	b.n	800e4ec <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e494:	4b17      	ldr	r3, [pc, #92]	@ (800e4f4 <PrepareFrame+0x218>)
 800e496:	2200      	movs	r2, #0
 800e498:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800e49c:	4b15      	ldr	r3, [pc, #84]	@ (800e4f4 <PrepareFrame+0x218>)
 800e49e:	4a1a      	ldr	r2, [pc, #104]	@ (800e508 <PrepareFrame+0x22c>)
 800e4a0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	4b12      	ldr	r3, [pc, #72]	@ (800e4f4 <PrepareFrame+0x218>)
 800e4aa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800e4ae:	e019      	b.n	800e4e4 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d018      	beq.n	800e4e8 <PrepareFrame+0x20c>
 800e4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e4f4 <PrepareFrame+0x218>)
 800e4b8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d013      	beq.n	800e4e8 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e4c0:	4812      	ldr	r0, [pc, #72]	@ (800e50c <PrepareFrame+0x230>)
 800e4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e4f4 <PrepareFrame+0x218>)
 800e4c4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	f009 f9df 	bl	801788e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e4d0:	4b08      	ldr	r3, [pc, #32]	@ (800e4f4 <PrepareFrame+0x218>)
 800e4d2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	4b06      	ldr	r3, [pc, #24]	@ (800e4f4 <PrepareFrame+0x218>)
 800e4dc:	801a      	strh	r2, [r3, #0]
            }
            break;
 800e4de:	e003      	b.n	800e4e8 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	e003      	b.n	800e4ec <PrepareFrame+0x210>
            break;
 800e4e4:	bf00      	nop
 800e4e6:	e000      	b.n	800e4ea <PrepareFrame+0x20e>
            break;
 800e4e8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800e4ea:	2300      	movs	r3, #0
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3720      	adds	r7, #32
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	20000a28 	.word	0x20000a28
 800e4f8:	20000b60 	.word	0x20000b60
 800e4fc:	20000a2a 	.word	0x20000a2a
 800e500:	20008000 	.word	0x20008000
 800e504:	20000b40 	.word	0x20000b40
 800e508:	20000ec4 	.word	0x20000ec4
 800e50c:	20000a2b 	.word	0x20000a2b

0800e510 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08a      	sub	sp, #40	@ 0x28
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e51a:	2303      	movs	r3, #3
 800e51c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800e524:	79fb      	ldrb	r3, [r7, #7]
 800e526:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e528:	4b4b      	ldr	r3, [pc, #300]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e52a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e52e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e530:	4b49      	ldr	r3, [pc, #292]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e532:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800e536:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800e538:	4b47      	ldr	r3, [pc, #284]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e53e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e540:	4b45      	ldr	r3, [pc, #276]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e546:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800e548:	4b44      	ldr	r3, [pc, #272]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e54a:	881b      	ldrh	r3, [r3, #0]
 800e54c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e54e:	4b42      	ldr	r3, [pc, #264]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e550:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800e554:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800e556:	4b40      	ldr	r3, [pc, #256]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e558:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800e55c:	f107 020f 	add.w	r2, r7, #15
 800e560:	f107 0110 	add.w	r1, r7, #16
 800e564:	4b3e      	ldr	r3, [pc, #248]	@ (800e660 <SendFrameOnChannel+0x150>)
 800e566:	f003 ffd6 	bl	8012516 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e56a:	4b3c      	ldr	r3, [pc, #240]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e572:	4b39      	ldr	r3, [pc, #228]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e574:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	4b38      	ldr	r3, [pc, #224]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e57c:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800e580:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e584:	4b35      	ldr	r3, [pc, #212]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e586:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	4a33      	ldr	r2, [pc, #204]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e58e:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e592:	4b32      	ldr	r3, [pc, #200]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e594:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e598:	4a30      	ldr	r2, [pc, #192]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e59a:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e59e:	4b2f      	ldr	r3, [pc, #188]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e5a0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e5a4:	4a2d      	ldr	r2, [pc, #180]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e5a6:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800e5aa:	f001 ff70 	bl	801048e <LoRaMacClassBIsBeaconModeActive>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00b      	beq.n	800e5cc <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800e5b4:	4b29      	ldr	r3, [pc, #164]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e5b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f001 ffd2 	bl	8010564 <LoRaMacClassBIsUplinkCollision>
 800e5c0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800e5c2:	6a3b      	ldr	r3, [r7, #32]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800e5c8:	2310      	movs	r3, #16
 800e5ca:	e040      	b.n	800e64e <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e5cc:	4b22      	ldr	r3, [pc, #136]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e5ce:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d101      	bne.n	800e5da <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800e5d6:	f001 ffcf 	bl	8010578 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800e5da:	f001 ff69 	bl	80104b0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800e5de:	4b1e      	ldr	r3, [pc, #120]	@ (800e658 <SendFrameOnChannel+0x148>)
 800e5e0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	4a1d      	ldr	r2, [pc, #116]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e5e8:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 800e5ec:	4611      	mov	r1, r2
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7ff fc2c 	bl	800de4c <SecureFrame>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800e5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <SendFrameOnChannel+0xf8>
    {
        return status;
 800e602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e606:	e022      	b.n	800e64e <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e608:	4b14      	ldr	r3, [pc, #80]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e60a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e60e:	f043 0302 	orr.w	r3, r3, #2
 800e612:	4a12      	ldr	r2, [pc, #72]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e614:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 800e618:	4b10      	ldr	r3, [pc, #64]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e61a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e61e:	3301      	adds	r3, #1
 800e620:	b2da      	uxtb	r2, r3
 800e622:	4b0e      	ldr	r3, [pc, #56]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e624:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800e628:	4b0c      	ldr	r3, [pc, #48]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e62a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800e62e:	4b0b      	ldr	r3, [pc, #44]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e630:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800e634:	4b09      	ldr	r3, [pc, #36]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e636:	2200      	movs	r2, #0
 800e638:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800e63c:	4b09      	ldr	r3, [pc, #36]	@ (800e664 <SendFrameOnChannel+0x154>)
 800e63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e640:	4a06      	ldr	r2, [pc, #24]	@ (800e65c <SendFrameOnChannel+0x14c>)
 800e642:	8812      	ldrh	r2, [r2, #0]
 800e644:	b2d2      	uxtb	r2, r2
 800e646:	4611      	mov	r1, r2
 800e648:	4807      	ldr	r0, [pc, #28]	@ (800e668 <SendFrameOnChannel+0x158>)
 800e64a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3728      	adds	r7, #40	@ 0x28
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20008000 	.word	0x20008000
 800e65c:	20000a28 	.word	0x20000a28
 800e660:	20000e44 	.word	0x20000e44
 800e664:	08021f8c 	.word	0x08021f8c
 800e668:	20000a2a 	.word	0x20000a2a

0800e66c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	6039      	str	r1, [r7, #0]
 800e676:	80fb      	strh	r3, [r7, #6]
 800e678:	4613      	mov	r3, r2
 800e67a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800e67c:	4b09      	ldr	r3, [pc, #36]	@ (800e6a4 <SetTxContinuousWave+0x38>)
 800e67e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e680:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800e684:	88fa      	ldrh	r2, [r7, #6]
 800e686:	6838      	ldr	r0, [r7, #0]
 800e688:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e68a:	4b07      	ldr	r3, [pc, #28]	@ (800e6a8 <SetTxContinuousWave+0x3c>)
 800e68c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e690:	f043 0302 	orr.w	r3, r3, #2
 800e694:	4a04      	ldr	r2, [pc, #16]	@ (800e6a8 <SetTxContinuousWave+0x3c>)
 800e696:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	08021f8c 	.word	0x08021f8c
 800e6a8:	20000a28 	.word	0x20000a28

0800e6ac <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800e6b6:	4b49      	ldr	r3, [pc, #292]	@ (800e7dc <RestoreNvmData+0x130>)
 800e6b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d001      	beq.n	800e6c4 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e087      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800e6c4:	2124      	movs	r1, #36	@ 0x24
 800e6c6:	4846      	ldr	r0, [pc, #280]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e6c8:	f009 f936 	bl	8017938 <Crc32>
 800e6cc:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800e6ce:	4b44      	ldr	r3, [pc, #272]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d001      	beq.n	800e6dc <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e6d8:	2317      	movs	r3, #23
 800e6da:	e07b      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800e6dc:	211c      	movs	r1, #28
 800e6de:	4841      	ldr	r0, [pc, #260]	@ (800e7e4 <RestoreNvmData+0x138>)
 800e6e0:	f009 f92a 	bl	8017938 <Crc32>
 800e6e4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800e6e6:	4b3e      	ldr	r3, [pc, #248]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e6e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d001      	beq.n	800e6f4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e6f0:	2317      	movs	r3, #23
 800e6f2:	e06f      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800e6f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e6f8:	483b      	ldr	r0, [pc, #236]	@ (800e7e8 <RestoreNvmData+0x13c>)
 800e6fa:	f009 f91d 	bl	8017938 <Crc32>
 800e6fe:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800e700:	4b37      	ldr	r3, [pc, #220]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e702:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d001      	beq.n	800e710 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e70c:	2317      	movs	r3, #23
 800e70e:	e061      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800e710:	21d4      	movs	r1, #212	@ 0xd4
 800e712:	4836      	ldr	r0, [pc, #216]	@ (800e7ec <RestoreNvmData+0x140>)
 800e714:	f009 f910 	bl	8017938 <Crc32>
 800e718:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800e71a:	4b31      	ldr	r3, [pc, #196]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e71c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	429a      	cmp	r2, r3
 800e724:	d001      	beq.n	800e72a <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e726:	2317      	movs	r3, #23
 800e728:	e054      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800e72a:	2110      	movs	r1, #16
 800e72c:	4830      	ldr	r0, [pc, #192]	@ (800e7f0 <RestoreNvmData+0x144>)
 800e72e:	f009 f903 	bl	8017938 <Crc32>
 800e732:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800e734:	4b2a      	ldr	r3, [pc, #168]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e736:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d001      	beq.n	800e744 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e740:	2317      	movs	r3, #23
 800e742:	e047      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800e744:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800e748:	482a      	ldr	r0, [pc, #168]	@ (800e7f4 <RestoreNvmData+0x148>)
 800e74a:	f009 f8f5 	bl	8017938 <Crc32>
 800e74e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800e750:	4b23      	ldr	r3, [pc, #140]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e752:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d001      	beq.n	800e760 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e75c:	2317      	movs	r3, #23
 800e75e:	e039      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800e760:	2114      	movs	r1, #20
 800e762:	4825      	ldr	r0, [pc, #148]	@ (800e7f8 <RestoreNvmData+0x14c>)
 800e764:	f009 f8e8 	bl	8017938 <Crc32>
 800e768:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800e76a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e76c:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	429a      	cmp	r2, r3
 800e774:	d001      	beq.n	800e77a <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e776:	2317      	movs	r3, #23
 800e778:	e02c      	b.n	800e7d4 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800e77a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800e77e:	4918      	ldr	r1, [pc, #96]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e780:	481e      	ldr	r0, [pc, #120]	@ (800e7fc <RestoreNvmData+0x150>)
 800e782:	f009 f884 	bl	801788e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800e786:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800e78a:	2100      	movs	r1, #0
 800e78c:	4814      	ldr	r0, [pc, #80]	@ (800e7e0 <RestoreNvmData+0x134>)
 800e78e:	f009 f8b9 	bl	8017904 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e792:	4b12      	ldr	r3, [pc, #72]	@ (800e7dc <RestoreNvmData+0x130>)
 800e794:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800e798:	4b10      	ldr	r3, [pc, #64]	@ (800e7dc <RestoreNvmData+0x130>)
 800e79a:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e79e:	4b17      	ldr	r3, [pc, #92]	@ (800e7fc <RestoreNvmData+0x150>)
 800e7a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7a2:	4a0e      	ldr	r2, [pc, #56]	@ (800e7dc <RestoreNvmData+0x130>)
 800e7a4:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e7a8:	4b14      	ldr	r3, [pc, #80]	@ (800e7fc <RestoreNvmData+0x150>)
 800e7aa:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e7ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e7dc <RestoreNvmData+0x130>)
 800e7b0:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e7b4:	4b09      	ldr	r3, [pc, #36]	@ (800e7dc <RestoreNvmData+0x130>)
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e7bc:	4b07      	ldr	r3, [pc, #28]	@ (800e7dc <RestoreNvmData+0x130>)
 800e7be:	2202      	movs	r2, #2
 800e7c0:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e7c4:	4b0e      	ldr	r3, [pc, #56]	@ (800e800 <RestoreNvmData+0x154>)
 800e7c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7c8:	4a0c      	ldr	r2, [pc, #48]	@ (800e7fc <RestoreNvmData+0x150>)
 800e7ca:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800e7ce:	4610      	mov	r0, r2
 800e7d0:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20000a28 	.word	0x20000a28
 800e7e0:	200085cc 	.word	0x200085cc
 800e7e4:	200085f4 	.word	0x200085f4
 800e7e8:	20008614 	.word	0x20008614
 800e7ec:	20008718 	.word	0x20008718
 800e7f0:	200087f0 	.word	0x200087f0
 800e7f4:	20008804 	.word	0x20008804
 800e7f8:	20008b80 	.word	0x20008b80
 800e7fc:	20008000 	.word	0x20008000
 800e800:	08021f8c 	.word	0x08021f8c

0800e804 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <DetermineFrameType+0x16>
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e81a:	2303      	movs	r3, #3
 800e81c:	e03b      	b.n	800e896 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	7b1b      	ldrb	r3, [r3, #12]
 800e822:	f003 030f 	and.w	r3, r3, #15
 800e826:	b2db      	uxtb	r3, r3
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d008      	beq.n	800e83e <DetermineFrameType+0x3a>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d003      	beq.n	800e83e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	2200      	movs	r2, #0
 800e83a:	701a      	strb	r2, [r3, #0]
 800e83c:	e02a      	b.n	800e894 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e844:	2b00      	cmp	r3, #0
 800e846:	d103      	bne.n	800e850 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2201      	movs	r2, #1
 800e84c:	701a      	strb	r2, [r3, #0]
 800e84e:	e021      	b.n	800e894 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7b1b      	ldrb	r3, [r3, #12]
 800e854:	f003 030f 	and.w	r3, r3, #15
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d108      	bne.n	800e870 <DetermineFrameType+0x6c>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d103      	bne.n	800e870 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2202      	movs	r2, #2
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	e011      	b.n	800e894 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	7b1b      	ldrb	r3, [r3, #12]
 800e874:	f003 030f 	and.w	r3, r3, #15
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d108      	bne.n	800e890 <DetermineFrameType+0x8c>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d003      	beq.n	800e890 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2203      	movs	r2, #3
 800e88c:	701a      	strb	r2, [r3, #0]
 800e88e:	e001      	b.n	800e894 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800e890:	2318      	movs	r3, #24
 800e892:	e000      	b.n	800e896 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	370c      	adds	r7, #12
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bc80      	pop	{r7}
 800e89e:	4770      	bx	lr

0800e8a0 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	460a      	mov	r2, r1
 800e8aa:	71fb      	strb	r3, [r7, #7]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 800e8b0:	79fa      	ldrb	r2, [r7, #7]
 800e8b2:	79bb      	ldrb	r3, [r7, #6]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d301      	bcc.n	800e8bc <CheckRetrans+0x1c>
    {
        return true;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e000      	b.n	800e8be <CheckRetrans+0x1e>
    }
    return false;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	370c      	adds	r7, #12
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bc80      	pop	{r7}
 800e8c6:	4770      	bx	lr

0800e8c8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800e8cc:	4b12      	ldr	r3, [pc, #72]	@ (800e918 <CheckRetransUnconfirmedUplink+0x50>)
 800e8ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e8d2:	4a12      	ldr	r2, [pc, #72]	@ (800e91c <CheckRetransUnconfirmedUplink+0x54>)
 800e8d4:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800e8d8:	4611      	mov	r1, r2
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7ff ffe0 	bl	800e8a0 <CheckRetrans>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	e014      	b.n	800e914 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e918 <CheckRetransUnconfirmedUplink+0x50>)
 800e8ec:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e8f0:	f003 0302 	and.w	r3, r3, #2
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00b      	beq.n	800e912 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8fa:	4b07      	ldr	r3, [pc, #28]	@ (800e918 <CheckRetransUnconfirmedUplink+0x50>)
 800e8fc:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e904:	4b04      	ldr	r3, [pc, #16]	@ (800e918 <CheckRetransUnconfirmedUplink+0x50>)
 800e906:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d101      	bne.n	800e912 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	bd80      	pop	{r7, pc}
 800e918:	20000a28 	.word	0x20000a28
 800e91c:	20008000 	.word	0x20008000

0800e920 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800e924:	4b10      	ldr	r3, [pc, #64]	@ (800e968 <CheckRetransConfirmedUplink+0x48>)
 800e926:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e92a:	4a10      	ldr	r2, [pc, #64]	@ (800e96c <CheckRetransConfirmedUplink+0x4c>)
 800e92c:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800e930:	4611      	mov	r1, r2
 800e932:	4618      	mov	r0, r3
 800e934:	f7ff ffb4 	bl	800e8a0 <CheckRetrans>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d001      	beq.n	800e942 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800e93e:	2301      	movs	r3, #1
 800e940:	e00f      	b.n	800e962 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e942:	4b09      	ldr	r3, [pc, #36]	@ (800e968 <CheckRetransConfirmedUplink+0x48>)
 800e944:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e948:	f003 0302 	and.w	r3, r3, #2
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d006      	beq.n	800e960 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e952:	4b05      	ldr	r3, [pc, #20]	@ (800e968 <CheckRetransConfirmedUplink+0x48>)
 800e954:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 800e95c:	2301      	movs	r3, #1
 800e95e:	e000      	b.n	800e962 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20000a28 	.word	0x20000a28
 800e96c:	20008000 	.word	0x20008000

0800e970 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97e:	d002      	beq.n	800e986 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	3301      	adds	r3, #1
 800e984:	607b      	str	r3, [r7, #4]
    }
    return counter;
 800e986:	687b      	ldr	r3, [r7, #4]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bc80      	pop	{r7}
 800e990:	4770      	bx	lr
	...

0800e994 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e998:	4b1a      	ldr	r3, [pc, #104]	@ (800ea04 <StopRetransmission+0x70>)
 800e99a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e99e:	f003 0302 	and.w	r3, r3, #2
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d009      	beq.n	800e9bc <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e9a8:	4b16      	ldr	r3, [pc, #88]	@ (800ea04 <StopRetransmission+0x70>)
 800e9aa:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d011      	beq.n	800e9d6 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800e9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ea04 <StopRetransmission+0x70>)
 800e9b4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d00c      	beq.n	800e9d6 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800e9bc:	4b12      	ldr	r3, [pc, #72]	@ (800ea08 <StopRetransmission+0x74>)
 800e9be:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d007      	beq.n	800e9d6 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800e9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ea08 <StopRetransmission+0x74>)
 800e9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7ff ffd0 	bl	800e970 <IncreaseAdrAckCounter>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	4a0d      	ldr	r2, [pc, #52]	@ (800ea08 <StopRetransmission+0x74>)
 800e9d4:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800e9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ea04 <StopRetransmission+0x70>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 800e9de:	4b09      	ldr	r3, [pc, #36]	@ (800ea04 <StopRetransmission+0x70>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800e9e6:	4b07      	ldr	r3, [pc, #28]	@ (800ea04 <StopRetransmission+0x70>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e9ee:	4b05      	ldr	r3, [pc, #20]	@ (800ea04 <StopRetransmission+0x70>)
 800e9f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9f4:	f023 0302 	bic.w	r3, r3, #2
 800e9f8:	4a02      	ldr	r2, [pc, #8]	@ (800ea04 <StopRetransmission+0x70>)
 800e9fa:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800e9fe:	2301      	movs	r3, #1
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	20000a28 	.word	0x20000a28
 800ea08:	20008000 	.word	0x20008000

0800ea0c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea10:	4b08      	ldr	r3, [pc, #32]	@ (800ea34 <OnMacProcessNotify+0x28>)
 800ea12:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <OnMacProcessNotify+0x24>
 800ea1a:	4b06      	ldr	r3, [pc, #24]	@ (800ea34 <OnMacProcessNotify+0x28>)
 800ea1c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d004      	beq.n	800ea30 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea26:	4b03      	ldr	r3, [pc, #12]	@ (800ea34 <OnMacProcessNotify+0x28>)
 800ea28:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea2c:	695b      	ldr	r3, [r3, #20]
 800ea2e:	4798      	blx	r3
    }
}
 800ea30:	bf00      	nop
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	20000a28 	.word	0x20000a28

0800ea38 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	4603      	mov	r3, r0
 800ea40:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800ea42:	4b0b      	ldr	r3, [pc, #44]	@ (800ea70 <CallNvmDataChangeCallback+0x38>)
 800ea44:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00c      	beq.n	800ea66 <CallNvmDataChangeCallback+0x2e>
 800ea4c:	4b08      	ldr	r3, [pc, #32]	@ (800ea70 <CallNvmDataChangeCallback+0x38>)
 800ea4e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea52:	691b      	ldr	r3, [r3, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d006      	beq.n	800ea66 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800ea58:	4b05      	ldr	r3, [pc, #20]	@ (800ea70 <CallNvmDataChangeCallback+0x38>)
 800ea5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	88fa      	ldrh	r2, [r7, #6]
 800ea62:	4610      	mov	r0, r2
 800ea64:	4798      	blx	r3
    }
}
 800ea66:	bf00      	nop
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20000a28 	.word	0x20000a28

0800ea74 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ea78:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa8 <IsRequestPending+0x34>)
 800ea7a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ea7e:	f003 0304 	and.w	r3, r3, #4
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d107      	bne.n	800ea98 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800ea88:	4b07      	ldr	r3, [pc, #28]	@ (800eaa8 <IsRequestPending+0x34>)
 800ea8a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d001      	beq.n	800ea9c <IsRequestPending+0x28>
    {
        return 1;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e000      	b.n	800ea9e <IsRequestPending+0x2a>
    }
    return 0;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bc80      	pop	{r7}
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	20000a28 	.word	0x20000a28

0800eaac <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800eaac:	b590      	push	{r4, r7, lr}
 800eaae:	b091      	sub	sp, #68	@ 0x44
 800eab0:	af02      	add	r7, sp, #8
 800eab2:	6178      	str	r0, [r7, #20]
 800eab4:	6139      	str	r1, [r7, #16]
 800eab6:	4613      	mov	r3, r2
 800eab8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <LoRaMacInitialization+0x1a>
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d101      	bne.n	800eaca <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eac6:	2303      	movs	r3, #3
 800eac8:	e27a      	b.n	800efc0 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00b      	beq.n	800eaea <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d007      	beq.n	800eaea <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d003      	beq.n	800eaea <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eaea:	2303      	movs	r3, #3
 800eaec:	e268      	b.n	800efc0 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800eaee:	7bfb      	ldrb	r3, [r7, #15]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f003 fc19 	bl	8012328 <RegionIsActive>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	f083 0301 	eor.w	r3, r3, #1
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d001      	beq.n	800eb06 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800eb02:	2309      	movs	r3, #9
 800eb04:	e25c      	b.n	800efc0 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800eb06:	6978      	ldr	r0, [r7, #20]
 800eb08:	f002 f8ac 	bl	8010c64 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800eb0c:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800eb10:	2100      	movs	r1, #0
 800eb12:	48c7      	ldr	r0, [pc, #796]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb14:	f008 fef6 	bl	8017904 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800eb18:	f240 521c 	movw	r2, #1308	@ 0x51c
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	48c5      	ldr	r0, [pc, #788]	@ (800ee34 <LoRaMacInitialization+0x388>)
 800eb20:	f008 fef0 	bl	8017904 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800eb24:	4ac2      	ldr	r2, [pc, #776]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800eb2c:	4bc0      	ldr	r3, [pc, #768]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800eb34:	4bbe      	ldr	r3, [pc, #760]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800eb3c:	4bbc      	ldr	r3, [pc, #752]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb3e:	4abe      	ldr	r2, [pc, #760]	@ (800ee38 <LoRaMacInitialization+0x38c>)
 800eb40:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800eb44:	2300      	movs	r3, #0
 800eb46:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800eb4a:	4bbc      	ldr	r3, [pc, #752]	@ (800ee3c <LoRaMacInitialization+0x390>)
 800eb4c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800eb4e:	4bbc      	ldr	r3, [pc, #752]	@ (800ee40 <LoRaMacInitialization+0x394>)
 800eb50:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 800eb52:	4bbc      	ldr	r3, [pc, #752]	@ (800ee44 <LoRaMacInitialization+0x398>)
 800eb54:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800eb56:	4bb6      	ldr	r3, [pc, #728]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb58:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb5c:	f107 021c 	add.w	r2, r7, #28
 800eb60:	4611      	mov	r1, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f003 fc2c 	bl	80123c0 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800eb68:	230f      	movs	r3, #15
 800eb6a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb6e:	4bb0      	ldr	r3, [pc, #704]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb70:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb74:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eb78:	4611      	mov	r1, r2
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f003 fbe9 	bl	8012352 <RegionGetPhyParam>
 800eb80:	4603      	mov	r3, r0
 800eb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800eb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	bf14      	ite	ne
 800eb8a:	2301      	movne	r3, #1
 800eb8c:	2300      	moveq	r3, #0
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	4ba7      	ldr	r3, [pc, #668]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb92:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800eb96:	230a      	movs	r3, #10
 800eb98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb9c:	4ba4      	ldr	r3, [pc, #656]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eb9e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eba2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eba6:	4611      	mov	r1, r2
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f003 fbd2 	bl	8012352 <RegionGetPhyParam>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800ebb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb4:	b25a      	sxtb	r2, r3
 800ebb6:	4b9e      	ldr	r3, [pc, #632]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ebb8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800ebbc:	2306      	movs	r3, #6
 800ebbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebc2:	4b9b      	ldr	r3, [pc, #620]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ebc4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ebc8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f003 fbbf 	bl	8012352 <RegionGetPhyParam>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800ebd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebda:	b25a      	sxtb	r2, r3
 800ebdc:	4b94      	ldr	r3, [pc, #592]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ebde:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800ebe2:	2310      	movs	r3, #16
 800ebe4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebe8:	4b91      	ldr	r3, [pc, #580]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ebea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ebee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f003 fbac 	bl	8012352 <RegionGetPhyParam>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ebfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec00:	4a8b      	ldr	r2, [pc, #556]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ec06:	2311      	movs	r3, #17
 800ec08:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec0c:	4b88      	ldr	r3, [pc, #544]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec12:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec16:	4611      	mov	r1, r2
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f003 fb9a 	bl	8012352 <RegionGetPhyParam>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ec22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec24:	4a82      	ldr	r2, [pc, #520]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec26:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ec2a:	2312      	movs	r3, #18
 800ec2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec30:	4b7f      	ldr	r3, [pc, #508]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec32:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec36:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f003 fb88 	bl	8012352 <RegionGetPhyParam>
 800ec42:	4603      	mov	r3, r0
 800ec44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800ec46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec48:	4a79      	ldr	r2, [pc, #484]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec4a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800ec4e:	2313      	movs	r3, #19
 800ec50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec54:	4b76      	ldr	r3, [pc, #472]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec56:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec5a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec5e:	4611      	mov	r1, r2
 800ec60:	4618      	mov	r0, r3
 800ec62:	f003 fb76 	bl	8012352 <RegionGetPhyParam>
 800ec66:	4603      	mov	r3, r0
 800ec68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800ec6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec6c:	4a70      	ldr	r2, [pc, #448]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec6e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ec72:	2314      	movs	r3, #20
 800ec74:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec78:	4b6d      	ldr	r3, [pc, #436]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec7a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec7e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec82:	4611      	mov	r1, r2
 800ec84:	4618      	mov	r0, r3
 800ec86:	f003 fb64 	bl	8012352 <RegionGetPhyParam>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ec8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec90:	4a67      	ldr	r2, [pc, #412]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec92:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ec96:	2316      	movs	r3, #22
 800ec98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec9c:	4b64      	ldr	r3, [pc, #400]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ec9e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eca2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f003 fb52 	bl	8012352 <RegionGetPhyParam>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ecb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	4b5e      	ldr	r3, [pc, #376]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ecb8:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ecbc:	2317      	movs	r3, #23
 800ecbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ecc2:	4b5b      	ldr	r3, [pc, #364]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ecc4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ecc8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eccc:	4611      	mov	r1, r2
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f003 fb3f 	bl	8012352 <RegionGetPhyParam>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ecd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecda:	4a55      	ldr	r2, [pc, #340]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ecdc:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ece0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece2:	4a53      	ldr	r2, [pc, #332]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ece4:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ece8:	2318      	movs	r3, #24
 800ecea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ecee:	4b50      	ldr	r3, [pc, #320]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ecf0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ecf4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ecf8:	4611      	mov	r1, r2
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f003 fb29 	bl	8012352 <RegionGetPhyParam>
 800ed00:	4603      	mov	r3, r0
 800ed02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ed04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	4b49      	ldr	r3, [pc, #292]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed0a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ed0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	4b47      	ldr	r3, [pc, #284]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed14:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800ed18:	231d      	movs	r3, #29
 800ed1a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed1e:	4b44      	ldr	r3, [pc, #272]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed24:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed28:	4611      	mov	r1, r2
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f003 fb11 	bl	8012352 <RegionGetPhyParam>
 800ed30:	4603      	mov	r3, r0
 800ed32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800ed34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	4b3d      	ldr	r3, [pc, #244]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed3a:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800ed3e:	231e      	movs	r3, #30
 800ed40:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed44:	4b3a      	ldr	r3, [pc, #232]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed46:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed4a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed4e:	4611      	mov	r1, r2
 800ed50:	4618      	mov	r0, r3
 800ed52:	f003 fafe 	bl	8012352 <RegionGetPhyParam>
 800ed56:	4603      	mov	r3, r0
 800ed58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800ed5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5c:	b2da      	uxtb	r2, r3
 800ed5e:	4b34      	ldr	r3, [pc, #208]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed60:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800ed64:	231f      	movs	r3, #31
 800ed66:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed6a:	4b31      	ldr	r3, [pc, #196]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed6c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed70:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed74:	4611      	mov	r1, r2
 800ed76:	4618      	mov	r0, r3
 800ed78:	f003 faeb 	bl	8012352 <RegionGetPhyParam>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800ed80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed82:	4a2b      	ldr	r2, [pc, #172]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed84:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800ed88:	2320      	movs	r3, #32
 800ed8a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed8e:	4b28      	ldr	r3, [pc, #160]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ed90:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed94:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f003 fad9 	bl	8012352 <RegionGetPhyParam>
 800eda0:	4603      	mov	r3, r0
 800eda2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800eda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda6:	4a22      	ldr	r2, [pc, #136]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800eda8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800edac:	230b      	movs	r3, #11
 800edae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800edb2:	4b1f      	ldr	r3, [pc, #124]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800edb4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800edb8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800edbc:	4611      	mov	r1, r2
 800edbe:	4618      	mov	r0, r3
 800edc0:	f003 fac7 	bl	8012352 <RegionGetPhyParam>
 800edc4:	4603      	mov	r3, r0
 800edc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800edc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edca:	b29a      	uxth	r2, r3
 800edcc:	4b18      	ldr	r3, [pc, #96]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800edce:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800edd2:	230c      	movs	r3, #12
 800edd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800edd8:	4b15      	ldr	r3, [pc, #84]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800edda:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800edde:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ede2:	4611      	mov	r1, r2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f003 fab4 	bl	8012352 <RegionGetPhyParam>
 800edea:	4603      	mov	r3, r0
 800edec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800edee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800edf4:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800edf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800edfa:	2201      	movs	r2, #1
 800edfc:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800ee00:	4b0b      	ldr	r3, [pc, #44]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ee02:	220a      	movs	r2, #10
 800ee04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800ee08:	4b09      	ldr	r3, [pc, #36]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ee0a:	2206      	movs	r2, #6
 800ee0c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800ee10:	4b07      	ldr	r3, [pc, #28]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ee12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee16:	4a06      	ldr	r2, [pc, #24]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ee18:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800ee1a:	4b05      	ldr	r3, [pc, #20]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ee1c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800ee20:	4b03      	ldr	r3, [pc, #12]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ee22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800ee26:	4b02      	ldr	r3, [pc, #8]	@ (800ee30 <LoRaMacInitialization+0x384>)
 800ee28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee2c:	e00c      	b.n	800ee48 <LoRaMacInitialization+0x39c>
 800ee2e:	bf00      	nop
 800ee30:	20008000 	.word	0x20008000
 800ee34:	20000a28 	.word	0x20000a28
 800ee38:	01000400 	.word	0x01000400
 800ee3c:	20008224 	.word	0x20008224
 800ee40:	20008238 	.word	0x20008238
 800ee44:	20000f44 	.word	0x20000f44
 800ee48:	4a5f      	ldr	r2, [pc, #380]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee4a:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800ee4c:	4b5e      	ldr	r3, [pc, #376]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee52:	4a5d      	ldr	r2, [pc, #372]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee54:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800ee56:	4b5c      	ldr	r3, [pc, #368]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee5c:	4a5a      	ldr	r2, [pc, #360]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee5e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800ee60:	4b59      	ldr	r3, [pc, #356]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ee66:	4a58      	ldr	r2, [pc, #352]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee68:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800ee6a:	4b57      	ldr	r3, [pc, #348]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ee70:	4a55      	ldr	r2, [pc, #340]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee72:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800ee74:	4b54      	ldr	r3, [pc, #336]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee76:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 800ee7a:	4b53      	ldr	r3, [pc, #332]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee7c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800ee80:	4b51      	ldr	r3, [pc, #324]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800ee88:	4a50      	ldr	r2, [pc, #320]	@ (800efcc <LoRaMacInitialization+0x520>)
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 800ee90:	2000      	movs	r0, #0
 800ee92:	f7ff f86b 	bl	800df6c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800ee96:	4b4c      	ldr	r3, [pc, #304]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800ee9e:	4a4b      	ldr	r2, [pc, #300]	@ (800efcc <LoRaMacInitialization+0x520>)
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800eea6:	4b49      	ldr	r3, [pc, #292]	@ (800efcc <LoRaMacInitialization+0x520>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800eeae:	4b47      	ldr	r3, [pc, #284]	@ (800efcc <LoRaMacInitialization+0x520>)
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800eeb6:	4b44      	ldr	r3, [pc, #272]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800eebc:	4b42      	ldr	r3, [pc, #264]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800eec2:	2300      	movs	r3, #0
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	4b42      	ldr	r3, [pc, #264]	@ (800efd0 <LoRaMacInitialization+0x524>)
 800eec8:	2200      	movs	r2, #0
 800eeca:	f04f 31ff 	mov.w	r1, #4294967295
 800eece:	4841      	ldr	r0, [pc, #260]	@ (800efd4 <LoRaMacInitialization+0x528>)
 800eed0:	f00c f878 	bl	801afc4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800eed4:	2300      	movs	r3, #0
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	4b3f      	ldr	r3, [pc, #252]	@ (800efd8 <LoRaMacInitialization+0x52c>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	f04f 31ff 	mov.w	r1, #4294967295
 800eee0:	483e      	ldr	r0, [pc, #248]	@ (800efdc <LoRaMacInitialization+0x530>)
 800eee2:	f00c f86f 	bl	801afc4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800eee6:	2300      	movs	r3, #0
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	4b3d      	ldr	r3, [pc, #244]	@ (800efe0 <LoRaMacInitialization+0x534>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	f04f 31ff 	mov.w	r1, #4294967295
 800eef2:	483c      	ldr	r0, [pc, #240]	@ (800efe4 <LoRaMacInitialization+0x538>)
 800eef4:	f00c f866 	bl	801afc4 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800eef8:	2300      	movs	r3, #0
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4b3a      	ldr	r3, [pc, #232]	@ (800efe8 <LoRaMacInitialization+0x53c>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	f04f 31ff 	mov.w	r1, #4294967295
 800ef04:	4839      	ldr	r0, [pc, #228]	@ (800efec <LoRaMacInitialization+0x540>)
 800ef06:	f00c f85d 	bl	801afc4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800ef0a:	4c2f      	ldr	r4, [pc, #188]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ef0c:	463b      	mov	r3, r7
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f00b ffc2 	bl	801ae98 <SysTimeGetMcuTime>
 800ef14:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800ef18:	463a      	mov	r2, r7
 800ef1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef1e:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800ef22:	4b33      	ldr	r3, [pc, #204]	@ (800eff0 <LoRaMacInitialization+0x544>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800ef28:	4b28      	ldr	r3, [pc, #160]	@ (800efcc <LoRaMacInitialization+0x520>)
 800ef2a:	4a32      	ldr	r2, [pc, #200]	@ (800eff4 <LoRaMacInitialization+0x548>)
 800ef2c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800ef30:	4b26      	ldr	r3, [pc, #152]	@ (800efcc <LoRaMacInitialization+0x520>)
 800ef32:	4a31      	ldr	r2, [pc, #196]	@ (800eff8 <LoRaMacInitialization+0x54c>)
 800ef34:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800ef38:	4b24      	ldr	r3, [pc, #144]	@ (800efcc <LoRaMacInitialization+0x520>)
 800ef3a:	4a30      	ldr	r2, [pc, #192]	@ (800effc <LoRaMacInitialization+0x550>)
 800ef3c:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800ef40:	4b22      	ldr	r3, [pc, #136]	@ (800efcc <LoRaMacInitialization+0x520>)
 800ef42:	4a2f      	ldr	r2, [pc, #188]	@ (800f000 <LoRaMacInitialization+0x554>)
 800ef44:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800ef48:	4b20      	ldr	r3, [pc, #128]	@ (800efcc <LoRaMacInitialization+0x520>)
 800ef4a:	4a2e      	ldr	r2, [pc, #184]	@ (800f004 <LoRaMacInitialization+0x558>)
 800ef4c:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800ef50:	4b2d      	ldr	r3, [pc, #180]	@ (800f008 <LoRaMacInitialization+0x55c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	482d      	ldr	r0, [pc, #180]	@ (800f00c <LoRaMacInitialization+0x560>)
 800ef56:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800ef58:	482d      	ldr	r0, [pc, #180]	@ (800f010 <LoRaMacInitialization+0x564>)
 800ef5a:	f008 f90f 	bl	801717c <SecureElementInit>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d001      	beq.n	800ef68 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef64:	2311      	movs	r3, #17
 800ef66:	e02b      	b.n	800efc0 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800ef68:	4817      	ldr	r0, [pc, #92]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800ef6a:	f002 fb37 	bl	80115dc <LoRaMacCryptoInit>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef74:	2311      	movs	r3, #17
 800ef76:	e023      	b.n	800efc0 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800ef78:	f001 fc36 	bl	80107e8 <LoRaMacCommandsInit>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ef82:	2313      	movs	r3, #19
 800ef84:	e01c      	b.n	800efc0 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800ef86:	4823      	ldr	r0, [pc, #140]	@ (800f014 <LoRaMacInitialization+0x568>)
 800ef88:	f002 fbc8 	bl	801171c <LoRaMacCryptoSetMulticastReference>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d001      	beq.n	800ef96 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef92:	2311      	movs	r3, #17
 800ef94:	e014      	b.n	800efc0 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800ef96:	4b1c      	ldr	r3, [pc, #112]	@ (800f008 <LoRaMacInitialization+0x55c>)
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	4798      	blx	r3
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f008 fc50 	bl	8017844 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800efa4:	4b18      	ldr	r3, [pc, #96]	@ (800f008 <LoRaMacInitialization+0x55c>)
 800efa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efa8:	4a07      	ldr	r2, [pc, #28]	@ (800efc8 <LoRaMacInitialization+0x51c>)
 800efaa:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800efae:	4610      	mov	r0, r2
 800efb0:	4798      	blx	r3
    Radio.Sleep( );
 800efb2:	4b15      	ldr	r3, [pc, #84]	@ (800f008 <LoRaMacInitialization+0x55c>)
 800efb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800efb8:	2001      	movs	r0, #1
 800efba:	f7fd fa71 	bl	800c4a0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800efbe:	2300      	movs	r3, #0
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	373c      	adds	r7, #60	@ 0x3c
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd90      	pop	{r4, r7, pc}
 800efc8:	20008000 	.word	0x20008000
 800efcc:	20000a28 	.word	0x20000a28
 800efd0:	0800ca2d 	.word	0x0800ca2d
 800efd4:	20000d90 	.word	0x20000d90
 800efd8:	0800cabd 	.word	0x0800cabd
 800efdc:	20000da8 	.word	0x20000da8
 800efe0:	0800cb35 	.word	0x0800cb35
 800efe4:	20000dc0 	.word	0x20000dc0
 800efe8:	0800cbb5 	.word	0x0800cbb5
 800efec:	20000e28 	.word	0x20000e28
 800eff0:	20000fd4 	.word	0x20000fd4
 800eff4:	0800b4c5 	.word	0x0800b4c5
 800eff8:	0800b511 	.word	0x0800b511
 800effc:	0800b5b1 	.word	0x0800b5b1
 800f000:	0800b585 	.word	0x0800b585
 800f004:	0800b5cd 	.word	0x0800b5cd
 800f008:	08021f8c 	.word	0x08021f8c
 800f00c:	20000d74 	.word	0x20000d74
 800f010:	2000814c 	.word	0x2000814c
 800f014:	200080e8 	.word	0x200080e8

0800f018 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800f01c:	4b04      	ldr	r3, [pc, #16]	@ (800f030 <LoRaMacStart+0x18>)
 800f01e:	2200      	movs	r2, #0
 800f020:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800f024:	f7fc fae8 	bl	800b5f8 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	20000a28 	.word	0x20000a28

0800f034 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800f034:	b590      	push	{r4, r7, lr}
 800f036:	b08d      	sub	sp, #52	@ 0x34
 800f038:	af02      	add	r7, sp, #8
 800f03a:	4603      	mov	r3, r0
 800f03c:	6039      	str	r1, [r7, #0]
 800f03e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f040:	4b42      	ldr	r3, [pc, #264]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f044:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f046:	4b41      	ldr	r3, [pc, #260]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f048:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800f04c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f04e:	4b3f      	ldr	r3, [pc, #252]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f050:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800f054:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800f056:	4b3e      	ldr	r3, [pc, #248]	@ (800f150 <LoRaMacQueryTxPossible+0x11c>)
 800f058:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f05c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800f05e:	2300      	movs	r3, #0
 800f060:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d101      	bne.n	800f06c <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f068:	2303      	movs	r3, #3
 800f06a:	e06b      	b.n	800f144 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800f06c:	2300      	movs	r3, #0
 800f06e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f070:	4b36      	ldr	r3, [pc, #216]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f072:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f076:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f078:	4b34      	ldr	r3, [pc, #208]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f07c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f07e:	4b33      	ldr	r3, [pc, #204]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f080:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f084:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f086:	4b31      	ldr	r3, [pc, #196]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f088:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800f08c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f08e:	4b2f      	ldr	r3, [pc, #188]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f090:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f094:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f098:	4b2c      	ldr	r3, [pc, #176]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f09a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f09e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f0a2:	4b2b      	ldr	r3, [pc, #172]	@ (800f150 <LoRaMacQueryTxPossible+0x11c>)
 800f0a4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f0a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f0ac:	4b27      	ldr	r3, [pc, #156]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f0ae:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f0b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800f0b6:	4b25      	ldr	r3, [pc, #148]	@ (800f14c <LoRaMacQueryTxPossible+0x118>)
 800f0b8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f0bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800f0c0:	f107 040d 	add.w	r4, r7, #13
 800f0c4:	f107 020e 	add.w	r2, r7, #14
 800f0c8:	f107 010f 	add.w	r1, r7, #15
 800f0cc:	f107 0014 	add.w	r0, r7, #20
 800f0d0:	f107 0310 	add.w	r3, r7, #16
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	f001 f8b4 	bl	8010244 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f0dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fd fead 	bl	800ce40 <GetMaxAppPayloadWithoutFOptsLength>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f0ee:	f107 0308 	add.w	r3, r7, #8
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f001 fc7e 	bl	80109f4 <LoRaMacCommandsGetSizeSerializedCmds>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d001      	beq.n	800f102 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f0fe:	2313      	movs	r3, #19
 800f100:	e020      	b.n	800f144 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2b0f      	cmp	r3, #15
 800f106:	d819      	bhi.n	800f13c <LoRaMacQueryTxPossible+0x108>
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	785b      	ldrb	r3, [r3, #1]
 800f10c:	461a      	mov	r2, r3
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	429a      	cmp	r2, r3
 800f112:	d313      	bcc.n	800f13c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	785a      	ldrb	r2, [r3, #1]
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	b2da      	uxtb	r2, r3
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	785b      	ldrb	r3, [r3, #1]
 800f128:	4619      	mov	r1, r3
 800f12a:	79fa      	ldrb	r2, [r7, #7]
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	4413      	add	r3, r2
 800f130:	4299      	cmp	r1, r3
 800f132:	d301      	bcc.n	800f138 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	e005      	b.n	800f144 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800f138:	2308      	movs	r3, #8
 800f13a:	e003      	b.n	800f144 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	2200      	movs	r2, #0
 800f140:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800f142:	2308      	movs	r3, #8
    }
}
 800f144:	4618      	mov	r0, r3
 800f146:	372c      	adds	r7, #44	@ 0x2c
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd90      	pop	{r4, r7, pc}
 800f14c:	20008000 	.word	0x20008000
 800f150:	20000a28 	.word	0x20000a28

0800f154 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b087      	sub	sp, #28
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f15c:	2300      	movs	r3, #0
 800f15e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f166:	2303      	movs	r3, #3
 800f168:	e1c4      	b.n	800f4f4 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b41      	cmp	r3, #65	@ 0x41
 800f170:	f200 81b9 	bhi.w	800f4e6 <LoRaMacMibGetRequestConfirm+0x392>
 800f174:	a201      	add	r2, pc, #4	@ (adr r2, 800f17c <LoRaMacMibGetRequestConfirm+0x28>)
 800f176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f17a:	bf00      	nop
 800f17c:	0800f285 	.word	0x0800f285
 800f180:	0800f291 	.word	0x0800f291
 800f184:	0800f29d 	.word	0x0800f29d
 800f188:	0800f2a9 	.word	0x0800f2a9
 800f18c:	0800f2b5 	.word	0x0800f2b5
 800f190:	0800f2c1 	.word	0x0800f2c1
 800f194:	0800f2cd 	.word	0x0800f2cd
 800f198:	0800f4e7 	.word	0x0800f4e7
 800f19c:	0800f4e7 	.word	0x0800f4e7
 800f1a0:	0800f4e7 	.word	0x0800f4e7
 800f1a4:	0800f4e7 	.word	0x0800f4e7
 800f1a8:	0800f4e7 	.word	0x0800f4e7
 800f1ac:	0800f4e7 	.word	0x0800f4e7
 800f1b0:	0800f4e7 	.word	0x0800f4e7
 800f1b4:	0800f4e7 	.word	0x0800f4e7
 800f1b8:	0800f2e1 	.word	0x0800f2e1
 800f1bc:	0800f2ed 	.word	0x0800f2ed
 800f1c0:	0800f2f9 	.word	0x0800f2f9
 800f1c4:	0800f31b 	.word	0x0800f31b
 800f1c8:	0800f32d 	.word	0x0800f32d
 800f1cc:	0800f33f 	.word	0x0800f33f
 800f1d0:	0800f351 	.word	0x0800f351
 800f1d4:	0800f385 	.word	0x0800f385
 800f1d8:	0800f363 	.word	0x0800f363
 800f1dc:	0800f3a7 	.word	0x0800f3a7
 800f1e0:	0800f3b3 	.word	0x0800f3b3
 800f1e4:	0800f3bd 	.word	0x0800f3bd
 800f1e8:	0800f3c7 	.word	0x0800f3c7
 800f1ec:	0800f3d1 	.word	0x0800f3d1
 800f1f0:	0800f3db 	.word	0x0800f3db
 800f1f4:	0800f3e5 	.word	0x0800f3e5
 800f1f8:	0800f411 	.word	0x0800f411
 800f1fc:	0800f41d 	.word	0x0800f41d
 800f200:	0800f435 	.word	0x0800f435
 800f204:	0800f429 	.word	0x0800f429
 800f208:	0800f441 	.word	0x0800f441
 800f20c:	0800f44b 	.word	0x0800f44b
 800f210:	0800f457 	.word	0x0800f457
 800f214:	0800f473 	.word	0x0800f473
 800f218:	0800f463 	.word	0x0800f463
 800f21c:	0800f46b 	.word	0x0800f46b
 800f220:	0800f4e7 	.word	0x0800f4e7
 800f224:	0800f47f 	.word	0x0800f47f
 800f228:	0800f4e7 	.word	0x0800f4e7
 800f22c:	0800f4e7 	.word	0x0800f4e7
 800f230:	0800f4e7 	.word	0x0800f4e7
 800f234:	0800f4e7 	.word	0x0800f4e7
 800f238:	0800f4e7 	.word	0x0800f4e7
 800f23c:	0800f4e7 	.word	0x0800f4e7
 800f240:	0800f4e7 	.word	0x0800f4e7
 800f244:	0800f4e7 	.word	0x0800f4e7
 800f248:	0800f4e7 	.word	0x0800f4e7
 800f24c:	0800f4e7 	.word	0x0800f4e7
 800f250:	0800f4e7 	.word	0x0800f4e7
 800f254:	0800f4e7 	.word	0x0800f4e7
 800f258:	0800f4e7 	.word	0x0800f4e7
 800f25c:	0800f4e7 	.word	0x0800f4e7
 800f260:	0800f4e7 	.word	0x0800f4e7
 800f264:	0800f493 	.word	0x0800f493
 800f268:	0800f49f 	.word	0x0800f49f
 800f26c:	0800f4ab 	.word	0x0800f4ab
 800f270:	0800f4b7 	.word	0x0800f4b7
 800f274:	0800f4c3 	.word	0x0800f4c3
 800f278:	0800f4cf 	.word	0x0800f4cf
 800f27c:	0800f4db 	.word	0x0800f4db
 800f280:	0800f4e1 	.word	0x0800f4e1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800f284:	4b9d      	ldr	r3, [pc, #628]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f286:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	711a      	strb	r2, [r3, #4]
            break;
 800f28e:	e130      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f290:	4b9a      	ldr	r3, [pc, #616]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f292:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	711a      	strb	r2, [r3, #4]
            break;
 800f29a:	e12a      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f008 fa29 	bl	80176f8 <SecureElementGetDevEui>
            break;
 800f2a6:	e124      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f008 fa6d 	bl	801778c <SecureElementGetJoinEui>
            break;
 800f2b2:	e11e      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800f2b4:	4b91      	ldr	r3, [pc, #580]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2b6:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	711a      	strb	r2, [r3, #4]
            break;
 800f2be:	e118      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800f2c0:	4b8e      	ldr	r3, [pc, #568]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	605a      	str	r2, [r3, #4]
            break;
 800f2ca:	e112      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800f2cc:	4b8b      	ldr	r3, [pc, #556]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2ce:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	4610      	mov	r0, r2
 800f2da:	f008 fa6f 	bl	80177bc <SecureElementGetDevAddr>
            break;
 800f2de:	e108      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800f2e0:	4b86      	ldr	r3, [pc, #536]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2e2:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	711a      	strb	r2, [r3, #4]
            break;
 800f2ea:	e102      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f2ec:	4b83      	ldr	r3, [pc, #524]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2ee:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	711a      	strb	r2, [r3, #4]
            break;
 800f2f6:	e0fc      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800f2f8:	231c      	movs	r3, #28
 800f2fa:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f2fc:	4b7f      	ldr	r3, [pc, #508]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2fe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f302:	f107 0210 	add.w	r2, r7, #16
 800f306:	4611      	mov	r1, r2
 800f308:	4618      	mov	r0, r3
 800f30a:	f003 f822 	bl	8012352 <RegionGetPhyParam>
 800f30e:	4603      	mov	r3, r0
 800f310:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	605a      	str	r2, [r3, #4]
            break;
 800f318:	e0eb      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a77      	ldr	r2, [pc, #476]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f31e:	3304      	adds	r3, #4
 800f320:	326c      	adds	r2, #108	@ 0x6c
 800f322:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f326:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f32a:	e0e2      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a73      	ldr	r2, [pc, #460]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f330:	3304      	adds	r3, #4
 800f332:	32b4      	adds	r2, #180	@ 0xb4
 800f334:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f338:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f33c:	e0d9      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a6e      	ldr	r2, [pc, #440]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f342:	3304      	adds	r3, #4
 800f344:	3274      	adds	r2, #116	@ 0x74
 800f346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f34a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f34e:	e0d0      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4a6a      	ldr	r2, [pc, #424]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f354:	3304      	adds	r3, #4
 800f356:	32bc      	adds	r2, #188	@ 0xbc
 800f358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f35c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f360:	e0c7      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800f362:	231a      	movs	r3, #26
 800f364:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f366:	4b65      	ldr	r3, [pc, #404]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f368:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f36c:	f107 0210 	add.w	r2, r7, #16
 800f370:	4611      	mov	r1, r2
 800f372:	4618      	mov	r0, r3
 800f374:	f002 ffed 	bl	8012352 <RegionGetPhyParam>
 800f378:	4603      	mov	r3, r0
 800f37a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	605a      	str	r2, [r3, #4]
            break;
 800f382:	e0b6      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800f384:	2319      	movs	r3, #25
 800f386:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f388:	4b5c      	ldr	r3, [pc, #368]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f38a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f38e:	f107 0210 	add.w	r2, r7, #16
 800f392:	4611      	mov	r1, r2
 800f394:	4618      	mov	r0, r3
 800f396:	f002 ffdc 	bl	8012352 <RegionGetPhyParam>
 800f39a:	4603      	mov	r3, r0
 800f39c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	605a      	str	r2, [r3, #4]
            break;
 800f3a4:	e0a5      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f3a6:	4b55      	ldr	r3, [pc, #340]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3a8:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	711a      	strb	r2, [r3, #4]
            break;
 800f3b0:	e09f      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800f3b2:	4b52      	ldr	r3, [pc, #328]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	605a      	str	r2, [r3, #4]
            break;
 800f3ba:	e09a      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800f3bc:	4b4f      	ldr	r3, [pc, #316]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	605a      	str	r2, [r3, #4]
            break;
 800f3c4:	e095      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800f3c6:	4b4d      	ldr	r3, [pc, #308]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	605a      	str	r2, [r3, #4]
            break;
 800f3ce:	e090      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800f3d0:	4b4a      	ldr	r3, [pc, #296]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	605a      	str	r2, [r3, #4]
            break;
 800f3d8:	e08b      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800f3da:	4b48      	ldr	r3, [pc, #288]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	605a      	str	r2, [r3, #4]
            break;
 800f3e2:	e086      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800f3e4:	2302      	movs	r3, #2
 800f3e6:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f3e8:	4b44      	ldr	r3, [pc, #272]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3ea:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f3ee:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f3f0:	4b42      	ldr	r3, [pc, #264]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f3f6:	f107 0210 	add.w	r2, r7, #16
 800f3fa:	4611      	mov	r1, r2
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f002 ffa8 	bl	8012352 <RegionGetPhyParam>
 800f402:	4603      	mov	r3, r0
 800f404:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	b25a      	sxtb	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	711a      	strb	r2, [r3, #4]
            break;
 800f40e:	e070      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f410:	4b3a      	ldr	r3, [pc, #232]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f412:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	711a      	strb	r2, [r3, #4]
            break;
 800f41a:	e06a      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f41c:	4b37      	ldr	r3, [pc, #220]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f41e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	711a      	strb	r2, [r3, #4]
            break;
 800f426:	e064      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f428:	4b34      	ldr	r3, [pc, #208]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f42a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	711a      	strb	r2, [r3, #4]
            break;
 800f432:	e05e      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f434:	4b31      	ldr	r3, [pc, #196]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f436:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	711a      	strb	r2, [r3, #4]
            break;
 800f43e:	e058      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800f440:	4b2e      	ldr	r3, [pc, #184]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	605a      	str	r2, [r3, #4]
            break;
 800f448:	e053      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800f44a:	4b2c      	ldr	r3, [pc, #176]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f44c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	711a      	strb	r2, [r3, #4]
            break;
 800f454:	e04d      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f456:	4b29      	ldr	r3, [pc, #164]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f458:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	605a      	str	r2, [r3, #4]
            break;
 800f460:	e047      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4a25      	ldr	r2, [pc, #148]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f466:	605a      	str	r2, [r3, #4]
            break;
 800f468:	e043      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4a24      	ldr	r2, [pc, #144]	@ (800f500 <LoRaMacMibGetRequestConfirm+0x3ac>)
 800f46e:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800f470:	e03f      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f472:	4b22      	ldr	r3, [pc, #136]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f474:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	605a      	str	r2, [r3, #4]
            break;
 800f47c:	e039      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a1e      	ldr	r2, [pc, #120]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f482:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 800f486:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800f488:	687c      	ldr	r4, [r7, #4]
 800f48a:	f003 f96f 	bl	801276c <RegionGetVersion>
 800f48e:	60a0      	str	r0, [r4, #8]
            break;
 800f490:	e02f      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f492:	4b1a      	ldr	r3, [pc, #104]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f494:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	605a      	str	r2, [r3, #4]
            break;
 800f49c:	e029      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800f49e:	4b17      	ldr	r3, [pc, #92]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f4a0:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	711a      	strb	r2, [r3, #4]
            break;
 800f4a8:	e023      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f4aa:	4b14      	ldr	r3, [pc, #80]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f4ac:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	809a      	strh	r2, [r3, #4]
            break;
 800f4b4:	e01d      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f4b6:	4b11      	ldr	r3, [pc, #68]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f4b8:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	809a      	strh	r2, [r3, #4]
            break;
 800f4c0:	e017      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800f4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f4c4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	809a      	strh	r2, [r3, #4]
            break;
 800f4cc:	e011      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800f4ce:	4b0b      	ldr	r3, [pc, #44]	@ (800f4fc <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f4d0:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	809a      	strh	r2, [r3, #4]
            break;
 800f4d8:	e00b      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800f4da:	2318      	movs	r3, #24
 800f4dc:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800f4de:	e008      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800f4e0:	2318      	movs	r3, #24
 800f4e2:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800f4e4:	e005      	b.n	800f4f2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fff9 	bl	80104de <LoRaMacClassBMibGetRequestConfirm>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	75fb      	strb	r3, [r7, #23]
            break;
 800f4f0:	bf00      	nop
        }
    }
    return status;
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	371c      	adds	r7, #28
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd90      	pop	{r4, r7, pc}
 800f4fc:	20008000 	.word	0x20008000
 800f500:	200085cc 	.word	0x200085cc

0800f504 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f50c:	2300      	movs	r3, #0
 800f50e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d101      	bne.n	800f51a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f516:	2303      	movs	r3, #3
 800f518:	e396      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f51a:	4bbd      	ldr	r3, [pc, #756]	@ (800f810 <LoRaMacMibSetRequestConfirm+0x30c>)
 800f51c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f520:	f003 0302 	and.w	r3, r3, #2
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800f528:	2301      	movs	r3, #1
 800f52a:	e38d      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b41      	cmp	r3, #65	@ 0x41
 800f532:	f200 835d 	bhi.w	800fbf0 <LoRaMacMibSetRequestConfirm+0x6ec>
 800f536:	a201      	add	r2, pc, #4	@ (adr r2, 800f53c <LoRaMacMibSetRequestConfirm+0x38>)
 800f538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53c:	0800f645 	.word	0x0800f645
 800f540:	0800f655 	.word	0x0800f655
 800f544:	0800f66f 	.word	0x0800f66f
 800f548:	0800f687 	.word	0x0800f687
 800f54c:	0800f69f 	.word	0x0800f69f
 800f550:	0800f6ab 	.word	0x0800f6ab
 800f554:	0800f6b7 	.word	0x0800f6b7
 800f558:	0800f6e1 	.word	0x0800f6e1
 800f55c:	0800f707 	.word	0x0800f707
 800f560:	0800f72d 	.word	0x0800f72d
 800f564:	0800f753 	.word	0x0800f753
 800f568:	0800f779 	.word	0x0800f779
 800f56c:	0800f79f 	.word	0x0800f79f
 800f570:	0800f7c5 	.word	0x0800f7c5
 800f574:	0800f7eb 	.word	0x0800f7eb
 800f578:	0800f819 	.word	0x0800f819
 800f57c:	0800f839 	.word	0x0800f839
 800f580:	0800fbf1 	.word	0x0800fbf1
 800f584:	0800f845 	.word	0x0800f845
 800f588:	0800f8b5 	.word	0x0800f8b5
 800f58c:	0800f8f5 	.word	0x0800f8f5
 800f590:	0800f957 	.word	0x0800f957
 800f594:	0800f9c7 	.word	0x0800f9c7
 800f598:	0800f997 	.word	0x0800f997
 800f59c:	0800f9f7 	.word	0x0800f9f7
 800f5a0:	0800fa19 	.word	0x0800fa19
 800f5a4:	0800fa23 	.word	0x0800fa23
 800f5a8:	0800fa2d 	.word	0x0800fa2d
 800f5ac:	0800fa37 	.word	0x0800fa37
 800f5b0:	0800fa41 	.word	0x0800fa41
 800f5b4:	0800fbf1 	.word	0x0800fbf1
 800f5b8:	0800fa4b 	.word	0x0800fa4b
 800f5bc:	0800fa7d 	.word	0x0800fa7d
 800f5c0:	0800faf1 	.word	0x0800faf1
 800f5c4:	0800fab7 	.word	0x0800fab7
 800f5c8:	0800fb23 	.word	0x0800fb23
 800f5cc:	0800fb39 	.word	0x0800fb39
 800f5d0:	0800fb51 	.word	0x0800fb51
 800f5d4:	0800fb5d 	.word	0x0800fb5d
 800f5d8:	0800fb69 	.word	0x0800fb69
 800f5dc:	0800fbf1 	.word	0x0800fbf1
 800f5e0:	0800fb73 	.word	0x0800fb73
 800f5e4:	0800fbf1 	.word	0x0800fbf1
 800f5e8:	0800fbf1 	.word	0x0800fbf1
 800f5ec:	0800fbf1 	.word	0x0800fbf1
 800f5f0:	0800fbf1 	.word	0x0800fbf1
 800f5f4:	0800fbf1 	.word	0x0800fbf1
 800f5f8:	0800fbf1 	.word	0x0800fbf1
 800f5fc:	0800fbf1 	.word	0x0800fbf1
 800f600:	0800fbf1 	.word	0x0800fbf1
 800f604:	0800fbf1 	.word	0x0800fbf1
 800f608:	0800fbf1 	.word	0x0800fbf1
 800f60c:	0800fbf1 	.word	0x0800fbf1
 800f610:	0800fbf1 	.word	0x0800fbf1
 800f614:	0800fbf1 	.word	0x0800fbf1
 800f618:	0800fbf1 	.word	0x0800fbf1
 800f61c:	0800fbf1 	.word	0x0800fbf1
 800f620:	0800fbf1 	.word	0x0800fbf1
 800f624:	0800fb9d 	.word	0x0800fb9d
 800f628:	0800fba9 	.word	0x0800fba9
 800f62c:	0800fbb5 	.word	0x0800fbb5
 800f630:	0800fbc1 	.word	0x0800fbc1
 800f634:	0800fbcd 	.word	0x0800fbcd
 800f638:	0800fbd9 	.word	0x0800fbd9
 800f63c:	0800fbe5 	.word	0x0800fbe5
 800f640:	0800fbeb 	.word	0x0800fbeb
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	791b      	ldrb	r3, [r3, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fd fb0f 	bl	800cc6c <SwitchClass>
 800f64e:	4603      	mov	r3, r0
 800f650:	75fb      	strb	r3, [r7, #23]
            break;
 800f652:	e2ee      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	791b      	ldrb	r3, [r3, #4]
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d005      	beq.n	800f668 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	791a      	ldrb	r2, [r3, #4]
 800f660:	4b6c      	ldr	r3, [pc, #432]	@ (800f814 <LoRaMacMibSetRequestConfirm+0x310>)
 800f662:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f666:	e2e4      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f668:	2303      	movs	r3, #3
 800f66a:	75fb      	strb	r3, [r7, #23]
            break;
 800f66c:	e2e1      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	4618      	mov	r0, r3
 800f674:	f008 f828 	bl	80176c8 <SecureElementSetDevEui>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f000 82be 	beq.w	800fbfc <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f680:	2303      	movs	r3, #3
 800f682:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f684:	e2ba      	b.n	800fbfc <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f008 f84c 	bl	8017728 <SecureElementSetJoinEui>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	f000 82b4 	beq.w	800fc00 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f698:	2303      	movs	r3, #3
 800f69a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f69c:	e2b0      	b.n	800fc00 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	791a      	ldrb	r2, [r3, #4]
 800f6a2:	4b5c      	ldr	r3, [pc, #368]	@ (800f814 <LoRaMacMibSetRequestConfirm+0x310>)
 800f6a4:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 800f6a8:	e2c3      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	4a59      	ldr	r2, [pc, #356]	@ (800f814 <LoRaMacMibSetRequestConfirm+0x310>)
 800f6b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 800f6b4:	e2bd      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800f6b6:	4b57      	ldr	r3, [pc, #348]	@ (800f814 <LoRaMacMibSetRequestConfirm+0x310>)
 800f6b8:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	f008 f848 	bl	8017758 <SecureElementSetDevAddr>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d002      	beq.n	800f6d4 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6ce:	2303      	movs	r3, #3
 800f6d0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 800f6d2:	e2ae      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	4a4e      	ldr	r2, [pc, #312]	@ (800f814 <LoRaMacMibSetRequestConfirm+0x310>)
 800f6da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 800f6de:	e2a8      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	f002 f83e 	bl	8011770 <LoRaMacCryptoSetKey>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	f000 8284 	beq.w	800fc04 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f6fc:	2311      	movs	r3, #17
 800f6fe:	e2a3      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f700:	2303      	movs	r3, #3
 800f702:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f704:	e27e      	b.n	800fc04 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00b      	beq.n	800f726 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4619      	mov	r1, r3
 800f714:	2001      	movs	r0, #1
 800f716:	f002 f82b 	bl	8011770 <LoRaMacCryptoSetKey>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 8273 	beq.w	800fc08 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f722:	2311      	movs	r3, #17
 800f724:	e290      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f726:	2303      	movs	r3, #3
 800f728:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f72a:	e26d      	b.n	800fc08 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	4619      	mov	r1, r3
 800f73a:	2008      	movs	r0, #8
 800f73c:	f002 f818 	bl	8011770 <LoRaMacCryptoSetKey>
 800f740:	4603      	mov	r3, r0
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 8262 	beq.w	800fc0c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f748:	2311      	movs	r3, #17
 800f74a:	e27d      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f74c:	2303      	movs	r3, #3
 800f74e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f750:	e25c      	b.n	800fc0c <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00b      	beq.n	800f772 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	4619      	mov	r1, r3
 800f760:	2009      	movs	r0, #9
 800f762:	f002 f805 	bl	8011770 <LoRaMacCryptoSetKey>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 8251 	beq.w	800fc10 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f76e:	2311      	movs	r3, #17
 800f770:	e26a      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f772:	2303      	movs	r3, #3
 800f774:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f776:	e24b      	b.n	800fc10 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00b      	beq.n	800f798 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	4619      	mov	r1, r3
 800f786:	200c      	movs	r0, #12
 800f788:	f001 fff2 	bl	8011770 <LoRaMacCryptoSetKey>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f000 8240 	beq.w	800fc14 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f794:	2311      	movs	r3, #17
 800f796:	e257      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f798:	2303      	movs	r3, #3
 800f79a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f79c:	e23a      	b.n	800fc14 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00b      	beq.n	800f7be <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	200d      	movs	r0, #13
 800f7ae:	f001 ffdf 	bl	8011770 <LoRaMacCryptoSetKey>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f000 822f 	beq.w	800fc18 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f7ba:	2311      	movs	r3, #17
 800f7bc:	e244      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f7be:	2303      	movs	r3, #3
 800f7c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f7c2:	e229      	b.n	800fc18 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00b      	beq.n	800f7e4 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	200e      	movs	r0, #14
 800f7d4:	f001 ffcc 	bl	8011770 <LoRaMacCryptoSetKey>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f000 821e 	beq.w	800fc1c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f7e0:	2311      	movs	r3, #17
 800f7e2:	e231      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f7e8:	e218      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00b      	beq.n	800f80a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	200f      	movs	r0, #15
 800f7fa:	f001 ffb9 	bl	8011770 <LoRaMacCryptoSetKey>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	f000 820d 	beq.w	800fc20 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f806:	2311      	movs	r3, #17
 800f808:	e21e      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f80a:	2303      	movs	r3, #3
 800f80c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f80e:	e207      	b.n	800fc20 <LoRaMacMibSetRequestConfirm+0x71c>
 800f810:	20000a28 	.word	0x20000a28
 800f814:	20008000 	.word	0x20008000
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	791a      	ldrb	r2, [r3, #4]
 800f81c:	4bb2      	ldr	r3, [pc, #712]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f81e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800f822:	4bb2      	ldr	r3, [pc, #712]	@ (800faec <LoRaMacMibSetRequestConfirm+0x5e8>)
 800f824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f826:	4ab0      	ldr	r2, [pc, #704]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f828:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800f82c:	4610      	mov	r0, r2
 800f82e:	4798      	blx	r3
            Radio.Sleep( );
 800f830:	4bae      	ldr	r3, [pc, #696]	@ (800faec <LoRaMacMibSetRequestConfirm+0x5e8>)
 800f832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f834:	4798      	blx	r3
            break;
 800f836:	e1fc      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	791a      	ldrb	r2, [r3, #4]
 800f83c:	4baa      	ldr	r3, [pc, #680]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f83e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 800f842:	e1f6      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	7a1b      	ldrb	r3, [r3, #8]
 800f848:	b25b      	sxtb	r3, r3
 800f84a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f84c:	4ba6      	ldr	r3, [pc, #664]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f84e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f852:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800f854:	4ba4      	ldr	r3, [pc, #656]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f856:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f85a:	f107 0108 	add.w	r1, r7, #8
 800f85e:	2207      	movs	r2, #7
 800f860:	4618      	mov	r0, r3
 800f862:	f002 fdc4 	bl	80123ee <RegionVerify>
 800f866:	4603      	mov	r3, r0
 800f868:	f083 0301 	eor.w	r3, r3, #1
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d002      	beq.n	800f878 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f872:	2303      	movs	r3, #3
 800f874:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 800f876:	e1dc      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800f87e:	4b9a      	ldr	r3, [pc, #616]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f880:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f884:	f107 0108 	add.w	r1, r7, #8
 800f888:	2200      	movs	r2, #0
 800f88a:	4618      	mov	r0, r3
 800f88c:	f002 fdaf 	bl	80123ee <RegionVerify>
 800f890:	4603      	mov	r3, r0
 800f892:	f083 0301 	eor.w	r3, r3, #1
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f89c:	2303      	movs	r3, #3
 800f89e:	75fb      	strb	r3, [r7, #23]
            break;
 800f8a0:	e1c7      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800f8a2:	4b91      	ldr	r3, [pc, #580]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	336c      	adds	r3, #108	@ 0x6c
 800f8a8:	3204      	adds	r2, #4
 800f8aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8ae:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f8b2:	e1be      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	7a1b      	ldrb	r3, [r3, #8]
 800f8b8:	b25b      	sxtb	r3, r3
 800f8ba:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f8bc:	4b8a      	ldr	r3, [pc, #552]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8be:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f8c2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f8c4:	4b88      	ldr	r3, [pc, #544]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8c6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f8ca:	f107 0108 	add.w	r1, r7, #8
 800f8ce:	2207      	movs	r2, #7
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f002 fd8c 	bl	80123ee <RegionVerify>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d008      	beq.n	800f8ee <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800f8dc:	4b82      	ldr	r3, [pc, #520]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	33b4      	adds	r3, #180	@ 0xb4
 800f8e2:	3204      	adds	r2, #4
 800f8e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8e8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f8ec:	e1a1      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8ee:	2303      	movs	r3, #3
 800f8f0:	75fb      	strb	r3, [r7, #23]
            break;
 800f8f2:	e19e      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7a1b      	ldrb	r3, [r3, #8]
 800f8f8:	b25b      	sxtb	r3, r3
 800f8fa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f8fc:	4b7a      	ldr	r3, [pc, #488]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8fe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f902:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f904:	4b78      	ldr	r3, [pc, #480]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f906:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f90a:	f107 0108 	add.w	r1, r7, #8
 800f90e:	2207      	movs	r2, #7
 800f910:	4618      	mov	r0, r3
 800f912:	f002 fd6c 	bl	80123ee <RegionVerify>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d019      	beq.n	800f950 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800f91c:	4b72      	ldr	r3, [pc, #456]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	3374      	adds	r3, #116	@ 0x74
 800f922:	3204      	adds	r2, #4
 800f924:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f928:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800f92c:	4b6e      	ldr	r3, [pc, #440]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f92e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f932:	2b02      	cmp	r3, #2
 800f934:	f040 8176 	bne.w	800fc24 <LoRaMacMibSetRequestConfirm+0x720>
 800f938:	4b6b      	ldr	r3, [pc, #428]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f93a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f000 8170 	beq.w	800fc24 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800f944:	4b69      	ldr	r3, [pc, #420]	@ (800faec <LoRaMacMibSetRequestConfirm+0x5e8>)
 800f946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f948:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800f94a:	f7fe fc7d 	bl	800e248 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f94e:	e169      	b.n	800fc24 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f950:	2303      	movs	r3, #3
 800f952:	75fb      	strb	r3, [r7, #23]
            break;
 800f954:	e166      	b.n	800fc24 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	7a1b      	ldrb	r3, [r3, #8]
 800f95a:	b25b      	sxtb	r3, r3
 800f95c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f95e:	4b62      	ldr	r3, [pc, #392]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f960:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f964:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f966:	4b60      	ldr	r3, [pc, #384]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f968:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f96c:	f107 0108 	add.w	r1, r7, #8
 800f970:	2207      	movs	r2, #7
 800f972:	4618      	mov	r0, r3
 800f974:	f002 fd3b 	bl	80123ee <RegionVerify>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d008      	beq.n	800f990 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800f97e:	4b5a      	ldr	r3, [pc, #360]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	33bc      	adds	r3, #188	@ 0xbc
 800f984:	3204      	adds	r2, #4
 800f986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f98a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f98e:	e150      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f990:	2303      	movs	r3, #3
 800f992:	75fb      	strb	r3, [r7, #23]
            break;
 800f994:	e14d      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800f99c:	2301      	movs	r3, #1
 800f99e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800f9a0:	4b51      	ldr	r3, [pc, #324]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f9a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f9a6:	f107 020c 	add.w	r2, r7, #12
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f002 fd56 	bl	801245e <RegionChanMaskSet>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	f083 0301 	eor.w	r3, r3, #1
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f000 8134 	beq.w	800fc28 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f9c4:	e130      	b.n	800fc28 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800f9d0:	4b45      	ldr	r3, [pc, #276]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f9d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f9d6:	f107 020c 	add.w	r2, r7, #12
 800f9da:	4611      	mov	r1, r2
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f002 fd3e 	bl	801245e <RegionChanMaskSet>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	f083 0301 	eor.w	r3, r3, #1
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 811e 	beq.w	800fc2c <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9f0:	2303      	movs	r3, #3
 800f9f2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f9f4:	e11a      	b.n	800fc2c <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	791b      	ldrb	r3, [r3, #4]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d009      	beq.n	800fa12 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800fa02:	2b0f      	cmp	r3, #15
 800fa04:	d805      	bhi.n	800fa12 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	791a      	ldrb	r2, [r3, #4]
 800fa0a:	4b37      	ldr	r3, [pc, #220]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fa10:	e10f      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa12:	2303      	movs	r3, #3
 800fa14:	75fb      	strb	r3, [r7, #23]
            break;
 800fa16:	e10c      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	4a32      	ldr	r2, [pc, #200]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa1e:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 800fa20:	e107      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	4a30      	ldr	r2, [pc, #192]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa28:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 800fa2a:	e102      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	4a2d      	ldr	r2, [pc, #180]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa32:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 800fa34:	e0fd      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	4a2b      	ldr	r2, [pc, #172]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa3c:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 800fa3e:	e0f8      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	4a28      	ldr	r2, [pc, #160]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa46:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 800fa48:	e0f3      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa50:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800fa52:	4b25      	ldr	r3, [pc, #148]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa54:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fa58:	f107 0108 	add.w	r1, r7, #8
 800fa5c:	2206      	movs	r2, #6
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f002 fcc5 	bl	80123ee <RegionVerify>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d005      	beq.n	800fa76 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800fa6a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fa6e:	4b1e      	ldr	r3, [pc, #120]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa70:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fa74:	e0dd      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa76:	2303      	movs	r3, #3
 800fa78:	75fb      	strb	r3, [r7, #23]
            break;
 800fa7a:	e0da      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa82:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa84:	4b18      	ldr	r3, [pc, #96]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa86:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fa8a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800fa8c:	4b16      	ldr	r3, [pc, #88]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa8e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fa92:	f107 0108 	add.w	r1, r7, #8
 800fa96:	2205      	movs	r2, #5
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f002 fca8 	bl	80123ee <RegionVerify>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d005      	beq.n	800fab0 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800faa4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800faa8:	4b0f      	ldr	r3, [pc, #60]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800faaa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800faae:	e0c0      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fab0:	2303      	movs	r3, #3
 800fab2:	75fb      	strb	r3, [r7, #23]
            break;
 800fab4:	e0bd      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fabc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800fabe:	4b0a      	ldr	r3, [pc, #40]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fac0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fac4:	f107 0108 	add.w	r1, r7, #8
 800fac8:	220a      	movs	r2, #10
 800faca:	4618      	mov	r0, r3
 800facc:	f002 fc8f 	bl	80123ee <RegionVerify>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d005      	beq.n	800fae2 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800fad6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fada:	4b03      	ldr	r3, [pc, #12]	@ (800fae8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fadc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fae0:	e0a7      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fae2:	2303      	movs	r3, #3
 800fae4:	75fb      	strb	r3, [r7, #23]
            break;
 800fae6:	e0a4      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
 800fae8:	20008000 	.word	0x20008000
 800faec:	08021f8c 	.word	0x08021f8c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800faf6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800faf8:	4b55      	ldr	r3, [pc, #340]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fafa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fafe:	f107 0108 	add.w	r1, r7, #8
 800fb02:	2209      	movs	r2, #9
 800fb04:	4618      	mov	r0, r3
 800fb06:	f002 fc72 	bl	80123ee <RegionVerify>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d005      	beq.n	800fb1c <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800fb10:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fb14:	4b4e      	ldr	r3, [pc, #312]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fb1a:	e08a      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	75fb      	strb	r3, [r7, #23]
            break;
 800fb20:	e087      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	4a4a      	ldr	r2, [pc, #296]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800fb2c:	4b48      	ldr	r3, [pc, #288]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fb32:	4a47      	ldr	r2, [pc, #284]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb34:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 800fb36:	e07c      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	791a      	ldrb	r2, [r3, #4]
 800fb3c:	4b44      	ldr	r3, [pc, #272]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb3e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800fb42:	4b43      	ldr	r3, [pc, #268]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb44:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800fb48:	4b41      	ldr	r3, [pc, #260]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 800fb4e:	e070      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	4a3e      	ldr	r2, [pc, #248]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb56:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 800fb5a:	e06a      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	4a3b      	ldr	r2, [pc, #236]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb62:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 800fb66:	e064      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800fb68:	f7fe fda0 	bl	800e6ac <RestoreNvmData>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	75fb      	strb	r3, [r7, #23]
            break;
 800fb70:	e05f      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	799b      	ldrb	r3, [r3, #6]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d80d      	bhi.n	800fb96 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800fb7a:	4a35      	ldr	r2, [pc, #212]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6858      	ldr	r0, [r3, #4]
 800fb88:	f001 fd54 	bl	8011634 <LoRaMacCryptoSetLrWanVersion>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d04e      	beq.n	800fc30 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb92:	2311      	movs	r3, #17
 800fb94:	e058      	b.n	800fc48 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb96:	2303      	movs	r3, #3
 800fb98:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fb9a:	e049      	b.n	800fc30 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	4a2b      	ldr	r2, [pc, #172]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 800fba6:	e044      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	791a      	ldrb	r2, [r3, #4]
 800fbac:	4b28      	ldr	r3, [pc, #160]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fbae:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 800fbb2:	e03e      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	889a      	ldrh	r2, [r3, #4]
 800fbb8:	4b25      	ldr	r3, [pc, #148]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fbba:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 800fbbe:	e038      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	889a      	ldrh	r2, [r3, #4]
 800fbc4:	4b22      	ldr	r3, [pc, #136]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fbc6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 800fbca:	e032      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	889a      	ldrh	r2, [r3, #4]
 800fbd0:	4b1f      	ldr	r3, [pc, #124]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fbd2:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 800fbd6:	e02c      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	889a      	ldrh	r2, [r3, #4]
 800fbdc:	4b1c      	ldr	r3, [pc, #112]	@ (800fc50 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fbde:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 800fbe2:	e026      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800fbe4:	2318      	movs	r3, #24
 800fbe6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800fbe8:	e023      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800fbea:	2318      	movs	r3, #24
 800fbec:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800fbee:	e020      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 fc7e 	bl	80104f2 <LoRaMacMibClassBSetRequestConfirm>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	75fb      	strb	r3, [r7, #23]
            break;
 800fbfa:	e01a      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbfc:	bf00      	nop
 800fbfe:	e018      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc00:	bf00      	nop
 800fc02:	e016      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc04:	bf00      	nop
 800fc06:	e014      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc08:	bf00      	nop
 800fc0a:	e012      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc0c:	bf00      	nop
 800fc0e:	e010      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc10:	bf00      	nop
 800fc12:	e00e      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc14:	bf00      	nop
 800fc16:	e00c      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc18:	bf00      	nop
 800fc1a:	e00a      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc1c:	bf00      	nop
 800fc1e:	e008      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc20:	bf00      	nop
 800fc22:	e006      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc24:	bf00      	nop
 800fc26:	e004      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc28:	bf00      	nop
 800fc2a:	e002      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc2c:	bf00      	nop
 800fc2e:	e000      	b.n	800fc32 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc30:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800fc32:	7dfb      	ldrb	r3, [r7, #23]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d106      	bne.n	800fc46 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fc38:	4a06      	ldr	r2, [pc, #24]	@ (800fc54 <LoRaMacMibSetRequestConfirm+0x750>)
 800fc3a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fc3e:	f043 0320 	orr.w	r3, r3, #32
 800fc42:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3718      	adds	r7, #24
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	20008000 	.word	0x20008000
 800fc54:	20000a28 	.word	0x20000a28

0800fc58 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b08a      	sub	sp, #40	@ 0x28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fc60:	2302      	movs	r3, #2
 800fc62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fc66:	2300      	movs	r3, #0
 800fc68:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fc70:	2303      	movs	r3, #3
 800fc72:	e17e      	b.n	800ff72 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800fc7a:	f7fc fbd9 	bl	800c430 <LoRaMacIsBusy>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d001      	beq.n	800fc88 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800fc84:	2301      	movs	r3, #1
 800fc86:	e174      	b.n	800ff72 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800fc88:	f001 f96e 	bl	8010f68 <LoRaMacConfirmQueueIsFull>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 800fc92:	2301      	movs	r3, #1
 800fc94:	e16d      	b.n	800ff72 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800fc96:	f001 f95b 	bl	8010f50 <LoRaMacConfirmQueueGetCnt>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d104      	bne.n	800fcaa <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800fca0:	2214      	movs	r2, #20
 800fca2:	2100      	movs	r1, #0
 800fca4:	48b5      	ldr	r0, [pc, #724]	@ (800ff7c <LoRaMacMlmeRequest+0x324>)
 800fca6:	f007 fe2d 	bl	8017904 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fcaa:	4bb5      	ldr	r3, [pc, #724]	@ (800ff80 <LoRaMacMlmeRequest+0x328>)
 800fcac:	2201      	movs	r2, #1
 800fcae:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800fcb2:	4ab3      	ldr	r2, [pc, #716]	@ (800ff80 <LoRaMacMlmeRequest+0x328>)
 800fcb4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fcb8:	f043 0304 	orr.w	r3, r3, #4
 800fcbc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	3b01      	subs	r3, #1
 800fce0:	2b0c      	cmp	r3, #12
 800fce2:	f200 811a 	bhi.w	800ff1a <LoRaMacMlmeRequest+0x2c2>
 800fce6:	a201      	add	r2, pc, #4	@ (adr r2, 800fcec <LoRaMacMlmeRequest+0x94>)
 800fce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcec:	0800fd21 	.word	0x0800fd21
 800fcf0:	0800ff1b 	.word	0x0800ff1b
 800fcf4:	0800ff1b 	.word	0x0800ff1b
 800fcf8:	0800ff1b 	.word	0x0800ff1b
 800fcfc:	0800fdff 	.word	0x0800fdff
 800fd00:	0800fe23 	.word	0x0800fe23
 800fd04:	0800ff1b 	.word	0x0800ff1b
 800fd08:	0800ff1b 	.word	0x0800ff1b
 800fd0c:	0800fe41 	.word	0x0800fe41
 800fd10:	0800ff1b 	.word	0x0800ff1b
 800fd14:	0800fee9 	.word	0x0800fee9
 800fd18:	0800fe7d 	.word	0x0800fe7d
 800fd1c:	0800fec7 	.word	0x0800fec7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800fd20:	4b97      	ldr	r3, [pc, #604]	@ (800ff80 <LoRaMacMlmeRequest+0x328>)
 800fd22:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd26:	f003 0320 	and.w	r3, r3, #32
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d001      	beq.n	800fd32 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e11f      	b.n	800ff72 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	791b      	ldrb	r3, [r3, #4]
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d135      	bne.n	800fda6 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	f7fe f916 	bl	800df6c <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800fd40:	4b90      	ldr	r3, [pc, #576]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fd42:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	795b      	ldrb	r3, [r3, #5]
 800fd4a:	b25b      	sxtb	r3, r3
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	4619      	mov	r1, r3
 800fd50:	f002 fc95 	bl	801267e <RegionAlternateDr>
 800fd54:	4603      	mov	r3, r0
 800fd56:	461a      	mov	r2, r3
 800fd58:	4b8a      	ldr	r3, [pc, #552]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fd5a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800fd64:	4b87      	ldr	r3, [pc, #540]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fd66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800fd6a:	2307      	movs	r3, #7
 800fd6c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 800fd70:	20ff      	movs	r0, #255	@ 0xff
 800fd72:	f7fd fe7f 	bl	800da74 <SendReJoinReq>
 800fd76:	4603      	mov	r3, r0
 800fd78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 800fd7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f000 80cc 	beq.w	800ff1e <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800fd86:	4b7f      	ldr	r3, [pc, #508]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fd88:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	795b      	ldrb	r3, [r3, #5]
 800fd90:	b25b      	sxtb	r3, r3
 800fd92:	2201      	movs	r2, #1
 800fd94:	4619      	mov	r1, r3
 800fd96:	f002 fc72 	bl	801267e <RegionAlternateDr>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	4b79      	ldr	r3, [pc, #484]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fda0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 800fda4:	e0bb      	b.n	800ff1e <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	791b      	ldrb	r3, [r3, #4]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	f040 80b7 	bne.w	800ff1e <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800fdb0:	4b74      	ldr	r3, [pc, #464]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800fdb8:	2302      	movs	r3, #2
 800fdba:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fdbc:	4b71      	ldr	r3, [pc, #452]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fdbe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fdc2:	f107 020c 	add.w	r2, r7, #12
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f002 faf9 	bl	80123c0 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	791a      	ldrb	r2, [r3, #4]
 800fdd2:	4b6c      	ldr	r3, [pc, #432]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fdd4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 800fdde:	2301      	movs	r3, #1
 800fde0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 800fde4:	f7fe fe12 	bl	800ea0c <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fde8:	4a65      	ldr	r2, [pc, #404]	@ (800ff80 <LoRaMacMlmeRequest+0x328>)
 800fdea:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fdee:	f043 0310 	orr.w	r3, r3, #16
 800fdf2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800fdfc:	e08f      	b.n	800ff1e <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fe04:	f107 031c 	add.w	r3, r7, #28
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	2002      	movs	r0, #2
 800fe0e:	f000 fcfb 	bl	8010808 <LoRaMacCommandsAddCmd>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f000 8084 	beq.w	800ff22 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe1a:	2313      	movs	r3, #19
 800fe1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800fe20:	e07f      	b.n	800ff22 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	8898      	ldrh	r0, [r3, #4]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6899      	ldr	r1, [r3, #8]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	461a      	mov	r2, r3
 800fe34:	f7fe fc1a 	bl	800e66c <SetTxContinuousWave>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800fe3e:	e077      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800fe46:	f107 0308 	add.w	r3, r7, #8
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	200d      	movs	r0, #13
 800fe4e:	f000 fd5b 	bl	8010908 <LoRaMacCommandsGetCmd>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d103      	bne.n	800fe60 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 800fe5e:	e062      	b.n	800ff26 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fe60:	f107 031c 	add.w	r3, r7, #28
 800fe64:	2200      	movs	r2, #0
 800fe66:	4619      	mov	r1, r3
 800fe68:	200d      	movs	r0, #13
 800fe6a:	f000 fccd 	bl	8010808 <LoRaMacCommandsAddCmd>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d058      	beq.n	800ff26 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe74:	2313      	movs	r3, #19
 800fe76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800fe7a:	e054      	b.n	800ff26 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800fe7c:	4b41      	ldr	r3, [pc, #260]	@ (800ff84 <LoRaMacMlmeRequest+0x32c>)
 800fe7e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d151      	bne.n	800ff2a <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	791b      	ldrb	r3, [r3, #4]
 800fe8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	791b      	ldrb	r3, [r3, #4]
 800fe92:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f000 faff 	bl	801049c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800fe9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fea2:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 800fea4:	2300      	movs	r3, #0
 800fea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800feaa:	f107 031c 	add.w	r3, r7, #28
 800feae:	2201      	movs	r2, #1
 800feb0:	4619      	mov	r1, r3
 800feb2:	2010      	movs	r0, #16
 800feb4:	f000 fca8 	bl	8010808 <LoRaMacCommandsAddCmd>
 800feb8:	4603      	mov	r3, r0
 800feba:	2b00      	cmp	r3, #0
 800febc:	d035      	beq.n	800ff2a <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800febe:	2313      	movs	r3, #19
 800fec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 800fec4:	e031      	b.n	800ff2a <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fec6:	2300      	movs	r3, #0
 800fec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fecc:	f107 031c 	add.w	r3, r7, #28
 800fed0:	2200      	movs	r2, #0
 800fed2:	4619      	mov	r1, r3
 800fed4:	2012      	movs	r0, #18
 800fed6:	f000 fc97 	bl	8010808 <LoRaMacCommandsAddCmd>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d026      	beq.n	800ff2e <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fee0:	2313      	movs	r3, #19
 800fee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800fee6:	e022      	b.n	800ff2e <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800fee8:	2301      	movs	r3, #1
 800feea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800feee:	f000 fa8b 	bl	8010408 <LoRaMacClassBIsAcquisitionInProgress>
 800fef2:	4603      	mov	r3, r0
 800fef4:	f083 0301 	eor.w	r3, r3, #1
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d009      	beq.n	800ff12 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800fefe:	2000      	movs	r0, #0
 800ff00:	f000 fa64 	bl	80103cc <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800ff04:	2000      	movs	r0, #0
 800ff06:	f000 fa86 	bl	8010416 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800ff10:	e00e      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 800ff12:	2301      	movs	r3, #1
 800ff14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ff18:	e00a      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 800ff1a:	bf00      	nop
 800ff1c:	e008      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ff1e:	bf00      	nop
 800ff20:	e006      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ff22:	bf00      	nop
 800ff24:	e004      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ff26:	bf00      	nop
 800ff28:	e002      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ff2a:	bf00      	nop
 800ff2c:	e000      	b.n	800ff30 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ff2e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ff30:	4b13      	ldr	r3, [pc, #76]	@ (800ff80 <LoRaMacMlmeRequest+0x328>)
 800ff32:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800ff3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d010      	beq.n	800ff64 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ff42:	f001 f805 	bl	8010f50 <LoRaMacConfirmQueueGetCnt>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d110      	bne.n	800ff6e <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 800ff4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ff80 <LoRaMacMlmeRequest+0x328>)
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ff54:	4a0a      	ldr	r2, [pc, #40]	@ (800ff80 <LoRaMacMlmeRequest+0x328>)
 800ff56:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ff5a:	f023 0304 	bic.w	r3, r3, #4
 800ff5e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800ff62:	e004      	b.n	800ff6e <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800ff64:	f107 0320 	add.w	r3, r7, #32
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f000 fe9d 	bl	8010ca8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 800ff6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3728      	adds	r7, #40	@ 0x28
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	20000e7c 	.word	0x20000e7c
 800ff80:	20000a28 	.word	0x20000a28
 800ff84:	20008000 	.word	0x20008000

0800ff88 <LoRaMacMcpsRequest>:
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800ff88:	b5b0      	push	{r4, r5, r7, lr}
 800ff8a:	b092      	sub	sp, #72	@ 0x48
 800ff8c:	af02      	add	r7, sp, #8
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	460b      	mov	r3, r1
 800ff92:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ff94:	2302      	movs	r3, #2
 800ff96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	e113      	b.n	80101e2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 800ffc0:	f7fc fa36 	bl	800c430 <LoRaMacIsBusy>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d001      	beq.n	800ffce <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e109      	b.n	80101e2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f107 040c 	add.w	r4, r7, #12
 800ffd4:	461d      	mov	r5, r3
 800ffd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffda:	682b      	ldr	r3, [r5, #0]
 800ffdc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ffe4:	2214      	movs	r2, #20
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	4880      	ldr	r0, [pc, #512]	@ (80101ec <LoRaMacMcpsRequest+0x264>)
 800ffea:	f007 fc8b 	bl	8017904 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ffee:	4b80      	ldr	r3, [pc, #512]	@ (80101f0 <LoRaMacMcpsRequest+0x268>)
 800fff0:	2201      	movs	r2, #1
 800fff2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800fff6:	4b7f      	ldr	r3, [pc, #508]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 800fff8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d111      	bne.n	8010024 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8010000:	4b7c      	ldr	r3, [pc, #496]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 8010002:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8010006:	2b02      	cmp	r3, #2
 8010008:	d10c      	bne.n	8010024 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801000a:	4b7a      	ldr	r3, [pc, #488]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 801000c:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8010010:	f083 0301 	eor.w	r3, r3, #1
 8010014:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8010016:	2b00      	cmp	r3, #0
 8010018:	d004      	beq.n	8010024 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801001a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801001c:	2b00      	cmp	r3, #0
 801001e:	d101      	bne.n	8010024 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8010020:	2301      	movs	r3, #1
 8010022:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8010024:	7b3b      	ldrb	r3, [r7, #12]
 8010026:	2b03      	cmp	r3, #3
 8010028:	d030      	beq.n	801008c <LoRaMacMcpsRequest+0x104>
 801002a:	2b03      	cmp	r3, #3
 801002c:	dc3f      	bgt.n	80100ae <LoRaMacMcpsRequest+0x126>
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <LoRaMacMcpsRequest+0xb0>
 8010032:	2b01      	cmp	r3, #1
 8010034:	d015      	beq.n	8010062 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8010036:	e03a      	b.n	80100ae <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8010038:	2301      	movs	r3, #1
 801003a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801003e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010042:	2202      	movs	r2, #2
 8010044:	f362 1347 	bfi	r3, r2, #5, #3
 8010048:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801004c:	7c3b      	ldrb	r3, [r7, #16]
 801004e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8010056:	8b3b      	ldrh	r3, [r7, #24]
 8010058:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801005a:	7ebb      	ldrb	r3, [r7, #26]
 801005c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8010060:	e026      	b.n	80100b0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8010062:	2301      	movs	r3, #1
 8010064:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8010068:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801006c:	2204      	movs	r2, #4
 801006e:	f362 1347 	bfi	r3, r2, #5, #3
 8010072:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8010076:	7c3b      	ldrb	r3, [r7, #16]
 8010078:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8010080:	8b3b      	ldrh	r3, [r7, #24]
 8010082:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8010084:	7ebb      	ldrb	r3, [r7, #26]
 8010086:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801008a:	e011      	b.n	80100b0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801008c:	2301      	movs	r3, #1
 801008e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8010092:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010096:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 801009a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80100a2:	8abb      	ldrh	r3, [r7, #20]
 80100a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80100a6:	7dbb      	ldrb	r3, [r7, #22]
 80100a8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80100ac:	e000      	b.n	80100b0 <LoRaMacMcpsRequest+0x128>
            break;
 80100ae:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80100b0:	2302      	movs	r3, #2
 80100b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80100b6:	4b4f      	ldr	r3, [pc, #316]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 80100b8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80100bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80100c0:	4b4c      	ldr	r3, [pc, #304]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 80100c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80100c6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80100ca:	4611      	mov	r1, r2
 80100cc:	4618      	mov	r0, r3
 80100ce:	f002 f940 	bl	8012352 <RegionGetPhyParam>
 80100d2:	4603      	mov	r3, r0
 80100d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80100d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d8:	b25b      	sxtb	r3, r3
 80100da:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80100de:	4293      	cmp	r3, r2
 80100e0:	bfb8      	it	lt
 80100e2:	4613      	movlt	r3, r2
 80100e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80100e8:	4b42      	ldr	r3, [pc, #264]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 80100ea:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80100ee:	4a41      	ldr	r2, [pc, #260]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 80100f0:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 80100f4:	4a3f      	ldr	r2, [pc, #252]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 80100f6:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fc fb34 	bl	800c768 <CheckForMinimumAbpDatarate>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d002      	beq.n	801010c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8010106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010108:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 801010c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8010110:	2b00      	cmp	r3, #0
 8010112:	d05f      	beq.n	80101d4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8010114:	4b37      	ldr	r3, [pc, #220]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 8010116:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801011a:	f083 0301 	eor.w	r3, r3, #1
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10e      	bne.n	8010142 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8010124:	4b33      	ldr	r3, [pc, #204]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 8010126:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801012a:	4a32      	ldr	r2, [pc, #200]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 801012c:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8010130:	4a30      	ldr	r2, [pc, #192]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 8010132:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8010136:	4618      	mov	r0, r3
 8010138:	f7fc fb16 	bl	800c768 <CheckForMinimumAbpDatarate>
 801013c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801013e:	2b00      	cmp	r3, #0
 8010140:	d01c      	beq.n	801017c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8010142:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010146:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801014a:	4b2a      	ldr	r3, [pc, #168]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 801014c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010154:	4b27      	ldr	r3, [pc, #156]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 8010156:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801015a:	f107 0120 	add.w	r1, r7, #32
 801015e:	2205      	movs	r2, #5
 8010160:	4618      	mov	r0, r3
 8010162:	f002 f944 	bl	80123ee <RegionVerify>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d005      	beq.n	8010178 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801016c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8010170:	4b20      	ldr	r3, [pc, #128]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 8010172:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010176:	e001      	b.n	801017c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8010178:	2303      	movs	r3, #3
 801017a:	e032      	b.n	80101e2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801017c:	4b1d      	ldr	r3, [pc, #116]	@ (80101f4 <LoRaMacMcpsRequest+0x26c>)
 801017e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010182:	4a1b      	ldr	r2, [pc, #108]	@ (80101f0 <LoRaMacMcpsRequest+0x268>)
 8010184:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8010188:	4611      	mov	r1, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f7fc fbd8 	bl	800c940 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8010190:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010192:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8010196:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801019a:	78fb      	ldrb	r3, [r7, #3]
 801019c:	9300      	str	r3, [sp, #0]
 801019e:	4613      	mov	r3, r2
 80101a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101a2:	f7fd fb85 	bl	800d8b0 <Send>
 80101a6:	4603      	mov	r3, r0
 80101a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( status == LORAMAC_STATUS_OK )
 80101ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d10b      	bne.n	80101cc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80101b4:	7b3a      	ldrb	r2, [r7, #12]
 80101b6:	4b0e      	ldr	r3, [pc, #56]	@ (80101f0 <LoRaMacMcpsRequest+0x268>)
 80101b8:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80101bc:	4a0c      	ldr	r2, [pc, #48]	@ (80101f0 <LoRaMacMcpsRequest+0x268>)
 80101be:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80101c2:	f043 0301 	orr.w	r3, r3, #1
 80101c6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80101ca:	e003      	b.n	80101d4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80101cc:	4b08      	ldr	r3, [pc, #32]	@ (80101f0 <LoRaMacMcpsRequest+0x268>)
 80101ce:	2200      	movs	r2, #0
 80101d0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

     // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80101d4:	4b06      	ldr	r3, [pc, #24]	@ (80101f0 <LoRaMacMcpsRequest+0x268>)
 80101d6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	611a      	str	r2, [r3, #16]

    return status;
 80101de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3740      	adds	r7, #64	@ 0x40
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bdb0      	pop	{r4, r5, r7, pc}
 80101ea:	bf00      	nop
 80101ec:	20000e68 	.word	0x20000e68
 80101f0:	20000a28 	.word	0x20000a28
 80101f4:	20008000 	.word	0x20008000

080101f8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	4603      	mov	r3, r0
 8010200:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8010206:	4b0d      	ldr	r3, [pc, #52]	@ (801023c <LoRaMacTestSetDutyCycleOn+0x44>)
 8010208:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801020c:	f107 010c 	add.w	r1, r7, #12
 8010210:	220f      	movs	r2, #15
 8010212:	4618      	mov	r0, r3
 8010214:	f002 f8eb 	bl	80123ee <RegionVerify>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00a      	beq.n	8010234 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801021e:	4a07      	ldr	r2, [pc, #28]	@ (801023c <LoRaMacTestSetDutyCycleOn+0x44>)
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010226:	4a06      	ldr	r2, [pc, #24]	@ (8010240 <LoRaMacTestSetDutyCycleOn+0x48>)
 8010228:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801022c:	f043 0320 	orr.w	r3, r3, #32
 8010230:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8010234:	bf00      	nop
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	20008000 	.word	0x20008000
 8010240:	20000a28 	.word	0x20000a28

08010244 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b08c      	sub	sp, #48	@ 0x30
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
 8010250:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8010252:	2300      	movs	r3, #0
 8010254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	7b1b      	ldrb	r3, [r3, #12]
 801025c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	7b5b      	ldrb	r3, [r3, #13]
 8010264:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	7b9b      	ldrb	r3, [r3, #14]
 801026c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	685a      	ldr	r2, [r3, #4]
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	785b      	ldrb	r3, [r3, #1]
 801027c:	2b00      	cmp	r3, #0
 801027e:	f000 8088 	beq.w	8010392 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8010282:	2302      	movs	r3, #2
 8010284:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	7bdb      	ldrb	r3, [r3, #15]
 801028c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	7c1b      	ldrb	r3, [r3, #16]
 8010294:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f002 f859 	bl	8012352 <RegionGetPhyParam>
 80102a0:	4603      	mov	r3, r0
 80102a2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80102a4:	6a3b      	ldr	r3, [r7, #32]
 80102a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80102aa:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 80102ae:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80102b2:	4293      	cmp	r3, r2
 80102b4:	bfb8      	it	lt
 80102b6:	4613      	movlt	r3, r2
 80102b8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	8912      	ldrh	r2, [r2, #8]
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d302      	bcc.n	80102ce <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80102c8:	2301      	movs	r3, #1
 80102ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	8912      	ldrh	r2, [r2, #8]
 80102d6:	4611      	mov	r1, r2
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	8952      	ldrh	r2, [r2, #10]
 80102dc:	440a      	add	r2, r1
 80102de:	4293      	cmp	r3, r2
 80102e0:	d30f      	bcc.n	8010302 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80102e2:	230a      	movs	r3, #10
 80102e4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	7c1b      	ldrb	r3, [r3, #16]
 80102ec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80102f0:	4611      	mov	r1, r2
 80102f2:	4618      	mov	r0, r3
 80102f4:	f002 f82d 	bl	8012352 <RegionGetPhyParam>
 80102f8:	4603      	mov	r3, r0
 80102fa:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	68fa      	ldr	r2, [r7, #12]
 8010308:	8912      	ldrh	r2, [r2, #8]
 801030a:	4611      	mov	r1, r2
 801030c:	68fa      	ldr	r2, [r7, #12]
 801030e:	8952      	ldrh	r2, [r2, #10]
 8010310:	0052      	lsls	r2, r2, #1
 8010312:	440a      	add	r2, r1
 8010314:	4293      	cmp	r3, r2
 8010316:	d33c      	bcc.n	8010392 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	8912      	ldrh	r2, [r2, #8]
 8010320:	1a9b      	subs	r3, r3, r2
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	8952      	ldrh	r2, [r2, #10]
 8010326:	fbb3 f1f2 	udiv	r1, r3, r2
 801032a:	fb01 f202 	mul.w	r2, r1, r2
 801032e:	1a9b      	subs	r3, r3, r2
 8010330:	2b00      	cmp	r3, #0
 8010332:	d12e      	bne.n	8010392 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8010334:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8010338:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801033c:	429a      	cmp	r2, r3
 801033e:	d110      	bne.n	8010362 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d009      	beq.n	801035c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010348:	2302      	movs	r3, #2
 801034a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	7c1b      	ldrb	r3, [r3, #16]
 8010350:	f107 0210 	add.w	r2, r7, #16
 8010354:	4611      	mov	r1, r2
 8010356:	4618      	mov	r0, r3
 8010358:	f002 f832 	bl	80123c0 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 801035c:	2301      	movs	r3, #1
 801035e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010362:	2321      	movs	r3, #33	@ 0x21
 8010364:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8010368:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801036c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	7bdb      	ldrb	r3, [r3, #15]
 8010374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	7c1b      	ldrb	r3, [r3, #16]
 801037c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010380:	4611      	mov	r1, r2
 8010382:	4618      	mov	r0, r3
 8010384:	f001 ffe5 	bl	8012352 <RegionGetPhyParam>
 8010388:	4603      	mov	r3, r0
 801038a:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 801038c:	6a3b      	ldr	r3, [r7, #32]
 801038e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8010398:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80103a0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80103a8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80103aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3730      	adds	r7, #48	@ 0x30
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80103b6:	b480      	push	{r7}
 80103b8:	b085      	sub	sp, #20
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	60f8      	str	r0, [r7, #12]
 80103be:	60b9      	str	r1, [r7, #8]
 80103c0:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bc80      	pop	{r7}
 80103ca:	4770      	bx	lr

080103cc <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	4603      	mov	r3, r0
 80103d4:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103d6:	bf00      	nop
 80103d8:	370c      	adds	r7, #12
 80103da:	46bd      	mov	sp, r7
 80103dc:	bc80      	pop	{r7}
 80103de:	4770      	bx	lr

080103e0 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	4603      	mov	r3, r0
 80103e8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103ea:	bf00      	nop
 80103ec:	370c      	adds	r7, #12
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bc80      	pop	{r7}
 80103f2:	4770      	bx	lr

080103f4 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103fe:	bf00      	nop
 8010400:	370c      	adds	r7, #12
 8010402:	46bd      	mov	sp, r7
 8010404:	bc80      	pop	{r7}
 8010406:	4770      	bx	lr

08010408 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8010408:	b480      	push	{r7}
 801040a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801040c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801040e:	4618      	mov	r0, r3
 8010410:	46bd      	mov	sp, r7
 8010412:	bc80      	pop	{r7}
 8010414:	4770      	bx	lr

08010416 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8010416:	b480      	push	{r7}
 8010418:	b083      	sub	sp, #12
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801041e:	bf00      	nop
 8010420:	370c      	adds	r7, #12
 8010422:	46bd      	mov	sp, r7
 8010424:	bc80      	pop	{r7}
 8010426:	4770      	bx	lr

08010428 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010430:	bf00      	nop
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	bc80      	pop	{r7}
 8010438:	4770      	bx	lr

0801043a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801043a:	b480      	push	{r7}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010442:	bf00      	nop
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	bc80      	pop	{r7}
 801044a:	4770      	bx	lr

0801044c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8010458:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801045a:	4618      	mov	r0, r3
 801045c:	370c      	adds	r7, #12
 801045e:	46bd      	mov	sp, r7
 8010460:	bc80      	pop	{r7}
 8010462:	4770      	bx	lr

08010464 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8010464:	b480      	push	{r7}
 8010466:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010468:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801046a:	4618      	mov	r0, r3
 801046c:	46bd      	mov	sp, r7
 801046e:	bc80      	pop	{r7}
 8010470:	4770      	bx	lr

08010472 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8010472:	b480      	push	{r7}
 8010474:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010476:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010478:	4618      	mov	r0, r3
 801047a:	46bd      	mov	sp, r7
 801047c:	bc80      	pop	{r7}
 801047e:	4770      	bx	lr

08010480 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8010480:	b480      	push	{r7}
 8010482:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010484:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010486:	4618      	mov	r0, r3
 8010488:	46bd      	mov	sp, r7
 801048a:	bc80      	pop	{r7}
 801048c:	4770      	bx	lr

0801048e <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801048e:	b480      	push	{r7}
 8010490:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010492:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010494:	4618      	mov	r0, r3
 8010496:	46bd      	mov	sp, r7
 8010498:	bc80      	pop	{r7}
 801049a:	4770      	bx	lr

0801049c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	4603      	mov	r3, r0
 80104a4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104a6:	bf00      	nop
 80104a8:	370c      	adds	r7, #12
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bc80      	pop	{r7}
 80104ae:	4770      	bx	lr

080104b0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104b4:	bf00      	nop
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bc80      	pop	{r7}
 80104ba:	4770      	bx	lr

080104bc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80104bc:	b480      	push	{r7}
 80104be:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104c0:	bf00      	nop
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bc80      	pop	{r7}
 80104c6:	4770      	bx	lr

080104c8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	4603      	mov	r3, r0
 80104d0:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104d2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	bc80      	pop	{r7}
 80104dc:	4770      	bx	lr

080104de <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80104de:	b480      	push	{r7}
 80104e0:	b083      	sub	sp, #12
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104e6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	370c      	adds	r7, #12
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bc80      	pop	{r7}
 80104f0:	4770      	bx	lr

080104f2 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80104f2:	b480      	push	{r7}
 80104f4:	b083      	sub	sp, #12
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104fa:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	370c      	adds	r7, #12
 8010500:	46bd      	mov	sp, r7
 8010502:	bc80      	pop	{r7}
 8010504:	4770      	bx	lr

08010506 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8010506:	b480      	push	{r7}
 8010508:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801050a:	bf00      	nop
 801050c:	46bd      	mov	sp, r7
 801050e:	bc80      	pop	{r7}
 8010510:	4770      	bx	lr

08010512 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8010512:	b480      	push	{r7}
 8010514:	b083      	sub	sp, #12
 8010516:	af00      	add	r7, sp, #0
 8010518:	4603      	mov	r3, r0
 801051a:	6039      	str	r1, [r7, #0]
 801051c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801051e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010520:	4618      	mov	r0, r3
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	bc80      	pop	{r7}
 8010528:	4770      	bx	lr

0801052a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801052a:	b480      	push	{r7}
 801052c:	b083      	sub	sp, #12
 801052e:	af00      	add	r7, sp, #0
 8010530:	4603      	mov	r3, r0
 8010532:	603a      	str	r2, [r7, #0]
 8010534:	80fb      	strh	r3, [r7, #6]
 8010536:	460b      	mov	r3, r1
 8010538:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801053a:	bf00      	nop
 801053c:	370c      	adds	r7, #12
 801053e:	46bd      	mov	sp, r7
 8010540:	bc80      	pop	{r7}
 8010542:	4770      	bx	lr

08010544 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8010544:	b480      	push	{r7}
 8010546:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010548:	bf00      	nop
 801054a:	46bd      	mov	sp, r7
 801054c:	bc80      	pop	{r7}
 801054e:	4770      	bx	lr

08010550 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8010558:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801055a:	4618      	mov	r0, r3
 801055c:	370c      	adds	r7, #12
 801055e:	46bd      	mov	sp, r7
 8010560:	bc80      	pop	{r7}
 8010562:	4770      	bx	lr

08010564 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801056c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801056e:	4618      	mov	r0, r3
 8010570:	370c      	adds	r7, #12
 8010572:	46bd      	mov	sp, r7
 8010574:	bc80      	pop	{r7}
 8010576:	4770      	bx	lr

08010578 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8010578:	b480      	push	{r7}
 801057a:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801057c:	bf00      	nop
 801057e:	46bd      	mov	sp, r7
 8010580:	bc80      	pop	{r7}
 8010582:	4770      	bx	lr

08010584 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8010584:	b480      	push	{r7}
 8010586:	b083      	sub	sp, #12
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	bc80      	pop	{r7}
 8010598:	4770      	bx	lr

0801059a <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801059a:	b480      	push	{r7}
 801059c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801059e:	bf00      	nop
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bc80      	pop	{r7}
 80105a4:	4770      	bx	lr

080105a6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80105a6:	b480      	push	{r7}
 80105a8:	b085      	sub	sp, #20
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80105b2:	2300      	movs	r3, #0
 80105b4:	81fb      	strh	r3, [r7, #14]
 80105b6:	e00a      	b.n	80105ce <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80105b8:	89fb      	ldrh	r3, [r7, #14]
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	4413      	add	r3, r2
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d001      	beq.n	80105c8 <IsSlotFree+0x22>
        {
            return false;
 80105c4:	2300      	movs	r3, #0
 80105c6:	e006      	b.n	80105d6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80105c8:	89fb      	ldrh	r3, [r7, #14]
 80105ca:	3301      	adds	r3, #1
 80105cc:	81fb      	strh	r3, [r7, #14]
 80105ce:	89fb      	ldrh	r3, [r7, #14]
 80105d0:	2b0f      	cmp	r3, #15
 80105d2:	d9f1      	bls.n	80105b8 <IsSlotFree+0x12>
        }
    }
    return true;
 80105d4:	2301      	movs	r3, #1
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	bc80      	pop	{r7}
 80105de:	4770      	bx	lr

080105e0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80105e6:	2300      	movs	r3, #0
 80105e8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80105ea:	e007      	b.n	80105fc <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80105ec:	79fb      	ldrb	r3, [r7, #7]
 80105ee:	3301      	adds	r3, #1
 80105f0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80105f2:	79fb      	ldrb	r3, [r7, #7]
 80105f4:	2b20      	cmp	r3, #32
 80105f6:	d101      	bne.n	80105fc <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80105f8:	2300      	movs	r3, #0
 80105fa:	e012      	b.n	8010622 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80105fc:	79fb      	ldrb	r3, [r7, #7]
 80105fe:	011b      	lsls	r3, r3, #4
 8010600:	3308      	adds	r3, #8
 8010602:	4a0a      	ldr	r2, [pc, #40]	@ (801062c <MallocNewMacCommandSlot+0x4c>)
 8010604:	4413      	add	r3, r2
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff ffcd 	bl	80105a6 <IsSlotFree>
 801060c:	4603      	mov	r3, r0
 801060e:	f083 0301 	eor.w	r3, r3, #1
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b00      	cmp	r3, #0
 8010616:	d1e9      	bne.n	80105ec <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8010618:	79fb      	ldrb	r3, [r7, #7]
 801061a:	011b      	lsls	r3, r3, #4
 801061c:	3308      	adds	r3, #8
 801061e:	4a03      	ldr	r2, [pc, #12]	@ (801062c <MallocNewMacCommandSlot+0x4c>)
 8010620:	4413      	add	r3, r2
}
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	20000fec 	.word	0x20000fec

08010630 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <FreeMacCommandSlot+0x12>
    {
        return false;
 801063e:	2300      	movs	r3, #0
 8010640:	e005      	b.n	801064e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8010642:	2210      	movs	r2, #16
 8010644:	2100      	movs	r1, #0
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f007 f95c 	bl	8017904 <memset1>

    return true;
 801064c:	2301      	movs	r3, #1
}
 801064e:	4618      	mov	r0, r3
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8010656:	b480      	push	{r7}
 8010658:	b083      	sub	sp, #12
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <LinkedListInit+0x12>
    {
        return false;
 8010664:	2300      	movs	r3, #0
 8010666:	e006      	b.n	8010676 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	605a      	str	r2, [r3, #4]

    return true;
 8010674:	2301      	movs	r3, #1
}
 8010676:	4618      	mov	r0, r3
 8010678:	370c      	adds	r7, #12
 801067a:	46bd      	mov	sp, r7
 801067c:	bc80      	pop	{r7}
 801067e:	4770      	bx	lr

08010680 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d002      	beq.n	8010696 <LinkedListAdd+0x16>
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <LinkedListAdd+0x1a>
    {
        return false;
 8010696:	2300      	movs	r3, #0
 8010698:	e015      	b.n	80106c6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d102      	bne.n	80106a8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d003      	beq.n	80106b8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	683a      	ldr	r2, [r7, #0]
 80106b6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	2200      	movs	r2, #0
 80106bc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	605a      	str	r2, [r3, #4]

    return true;
 80106c4:	2301      	movs	r3, #1
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bc80      	pop	{r7}
 80106ce:	4770      	bx	lr

080106d0 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d002      	beq.n	80106e6 <LinkedListGetPrevious+0x16>
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d101      	bne.n	80106ea <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80106e6:	2300      	movs	r3, #0
 80106e8:	e016      	b.n	8010718 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80106f0:	683a      	ldr	r2, [r7, #0]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d00c      	beq.n	8010712 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80106f8:	e002      	b.n	8010700 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d007      	beq.n	8010716 <LinkedListGetPrevious+0x46>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	683a      	ldr	r2, [r7, #0]
 801070c:	429a      	cmp	r2, r3
 801070e:	d1f4      	bne.n	80106fa <LinkedListGetPrevious+0x2a>
 8010710:	e001      	b.n	8010716 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8010712:	2300      	movs	r3, #0
 8010714:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8010716:	68fb      	ldr	r3, [r7, #12]
}
 8010718:	4618      	mov	r0, r3
 801071a:	3714      	adds	r7, #20
 801071c:	46bd      	mov	sp, r7
 801071e:	bc80      	pop	{r7}
 8010720:	4770      	bx	lr

08010722 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b084      	sub	sp, #16
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d002      	beq.n	8010738 <LinkedListRemove+0x16>
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d101      	bne.n	801073c <LinkedListRemove+0x1a>
    {
        return false;
 8010738:	2300      	movs	r3, #0
 801073a:	e020      	b.n	801077e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801073c:	6839      	ldr	r1, [r7, #0]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f7ff ffc6 	bl	80106d0 <LinkedListGetPrevious>
 8010744:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	683a      	ldr	r2, [r7, #0]
 801074c:	429a      	cmp	r2, r3
 801074e:	d103      	bne.n	8010758 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	683a      	ldr	r2, [r7, #0]
 801075e:	429a      	cmp	r2, r3
 8010760:	d102      	bne.n	8010768 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d003      	beq.n	8010776 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	2200      	movs	r2, #0
 801077a:	601a      	str	r2, [r3, #0]

    return true;
 801077c:	2301      	movs	r3, #1
}
 801077e:	4618      	mov	r0, r3
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
	...

08010788 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8010788:	b480      	push	{r7}
 801078a:	b083      	sub	sp, #12
 801078c:	af00      	add	r7, sp, #0
 801078e:	4603      	mov	r3, r0
 8010790:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8010792:	79fb      	ldrb	r3, [r7, #7]
 8010794:	2b11      	cmp	r3, #17
 8010796:	bf8c      	ite	hi
 8010798:	2201      	movhi	r2, #1
 801079a:	2200      	movls	r2, #0
 801079c:	b2d2      	uxtb	r2, r2
 801079e:	2a00      	cmp	r2, #0
 80107a0:	d10d      	bne.n	80107be <IsSticky+0x36>
 80107a2:	4a0a      	ldr	r2, [pc, #40]	@ (80107cc <IsSticky+0x44>)
 80107a4:	fa22 f303 	lsr.w	r3, r2, r3
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	bf14      	ite	ne
 80107b0:	2301      	movne	r3, #1
 80107b2:	2300      	moveq	r3, #0
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d001      	beq.n	80107be <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e000      	b.n	80107c0 <IsSticky+0x38>
        default:
            return false;
 80107be:	2300      	movs	r3, #0
    }
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bc80      	pop	{r7}
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop
 80107cc:	00020720 	.word	0x00020720

080107d0 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80107d0:	b480      	push	{r7}
 80107d2:	b083      	sub	sp, #12
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	4603      	mov	r3, r0
 80107d8:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80107da:	2300      	movs	r3, #0
    }
}
 80107dc:	4618      	mov	r0, r3
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bc80      	pop	{r7}
 80107e4:	4770      	bx	lr
	...

080107e8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80107ec:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80107f0:	2100      	movs	r1, #0
 80107f2:	4804      	ldr	r0, [pc, #16]	@ (8010804 <LoRaMacCommandsInit+0x1c>)
 80107f4:	f007 f886 	bl	8017904 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80107f8:	4802      	ldr	r0, [pc, #8]	@ (8010804 <LoRaMacCommandsInit+0x1c>)
 80107fa:	f7ff ff2c 	bl	8010656 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80107fe:	2300      	movs	r3, #0
}
 8010800:	4618      	mov	r0, r3
 8010802:	bd80      	pop	{r7, pc}
 8010804:	20000fec 	.word	0x20000fec

08010808 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	4603      	mov	r3, r0
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d101      	bne.n	8010820 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801081c:	2301      	movs	r3, #1
 801081e:	e03b      	b.n	8010898 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8010820:	f7ff fede 	bl	80105e0 <MallocNewMacCommandSlot>
 8010824:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d101      	bne.n	8010830 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801082c:	2302      	movs	r3, #2
 801082e:	e033      	b.n	8010898 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8010830:	6979      	ldr	r1, [r7, #20]
 8010832:	481b      	ldr	r0, [pc, #108]	@ (80108a0 <LoRaMacCommandsAddCmd+0x98>)
 8010834:	f7ff ff24 	bl	8010680 <LinkedListAdd>
 8010838:	4603      	mov	r3, r0
 801083a:	f083 0301 	eor.w	r3, r3, #1
 801083e:	b2db      	uxtb	r3, r3
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8010844:	2305      	movs	r3, #5
 8010846:	e027      	b.n	8010898 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	7bfa      	ldrb	r2, [r7, #15]
 801084c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	3305      	adds	r3, #5
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	b292      	uxth	r2, r2
 801085c:	68b9      	ldr	r1, [r7, #8]
 801085e:	4618      	mov	r0, r3
 8010860:	f007 f815 	bl	801788e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8010864:	7bfb      	ldrb	r3, [r7, #15]
 8010866:	4618      	mov	r0, r3
 8010868:	f7ff ff8e 	bl	8010788 <IsSticky>
 801086c:	4603      	mov	r3, r0
 801086e:	461a      	mov	r2, r3
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8010874:	7bfb      	ldrb	r3, [r7, #15]
 8010876:	4618      	mov	r0, r3
 8010878:	f7ff ffaa 	bl	80107d0 <IsConfirmationRequired>
 801087c:	4603      	mov	r3, r0
 801087e:	461a      	mov	r2, r3
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8010884:	4b06      	ldr	r3, [pc, #24]	@ (80108a0 <LoRaMacCommandsAddCmd+0x98>)
 8010886:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4413      	add	r3, r2
 801088e:	3301      	adds	r3, #1
 8010890:	4a03      	ldr	r2, [pc, #12]	@ (80108a0 <LoRaMacCommandsAddCmd+0x98>)
 8010892:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8010896:	2300      	movs	r3, #0
}
 8010898:	4618      	mov	r0, r3
 801089a:	3718      	adds	r7, #24
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20000fec 	.word	0x20000fec

080108a4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d101      	bne.n	80108b6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80108b2:	2301      	movs	r3, #1
 80108b4:	e021      	b.n	80108fa <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80108b6:	6879      	ldr	r1, [r7, #4]
 80108b8:	4812      	ldr	r0, [pc, #72]	@ (8010904 <LoRaMacCommandsRemoveCmd+0x60>)
 80108ba:	f7ff ff32 	bl	8010722 <LinkedListRemove>
 80108be:	4603      	mov	r3, r0
 80108c0:	f083 0301 	eor.w	r3, r3, #1
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80108ca:	2303      	movs	r3, #3
 80108cc:	e015      	b.n	80108fa <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80108ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010904 <LoRaMacCommandsRemoveCmd+0x60>)
 80108d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	3b01      	subs	r3, #1
 80108dc:	4a09      	ldr	r2, [pc, #36]	@ (8010904 <LoRaMacCommandsRemoveCmd+0x60>)
 80108de:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7ff fea4 	bl	8010630 <FreeMacCommandSlot>
 80108e8:	4603      	mov	r3, r0
 80108ea:	f083 0301 	eor.w	r3, r3, #1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d001      	beq.n	80108f8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80108f4:	2305      	movs	r3, #5
 80108f6:	e000      	b.n	80108fa <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3708      	adds	r7, #8
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	20000fec 	.word	0x20000fec

08010908 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	4603      	mov	r3, r0
 8010910:	6039      	str	r1, [r7, #0]
 8010912:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8010914:	4b0e      	ldr	r3, [pc, #56]	@ (8010950 <LoRaMacCommandsGetCmd+0x48>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801091a:	e002      	b.n	8010922 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d004      	beq.n	8010932 <LoRaMacCommandsGetCmd+0x2a>
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	791b      	ldrb	r3, [r3, #4]
 801092c:	79fa      	ldrb	r2, [r7, #7]
 801092e:	429a      	cmp	r2, r3
 8010930:	d1f4      	bne.n	801091c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	68fa      	ldr	r2, [r7, #12]
 8010936:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d101      	bne.n	8010942 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801093e:	2303      	movs	r3, #3
 8010940:	e000      	b.n	8010944 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8010942:	2300      	movs	r3, #0
}
 8010944:	4618      	mov	r0, r3
 8010946:	3714      	adds	r7, #20
 8010948:	46bd      	mov	sp, r7
 801094a:	bc80      	pop	{r7}
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	20000fec 	.word	0x20000fec

08010954 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801095a:	4b0f      	ldr	r3, [pc, #60]	@ (8010998 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8010960:	e012      	b.n	8010988 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	7b1b      	ldrb	r3, [r3, #12]
 8010966:	f083 0301 	eor.w	r3, r3, #1
 801096a:	b2db      	uxtb	r3, r3
 801096c:	2b00      	cmp	r3, #0
 801096e:	d008      	beq.n	8010982 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7ff ff94 	bl	80108a4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	607b      	str	r3, [r7, #4]
 8010980:	e002      	b.n	8010988 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d1e9      	bne.n	8010962 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	20000fec 	.word	0x20000fec

0801099c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80109a2:	4b13      	ldr	r3, [pc, #76]	@ (80109f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80109a8:	e01a      	b.n	80109e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	791b      	ldrb	r3, [r3, #4]
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7ff fee7 	bl	8010788 <IsSticky>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00d      	beq.n	80109dc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	791b      	ldrb	r3, [r3, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7ff ff03 	bl	80107d0 <IsConfirmationRequired>
 80109ca:	4603      	mov	r3, r0
 80109cc:	f083 0301 	eor.w	r3, r3, #1
 80109d0:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d002      	beq.n	80109dc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7ff ff64 	bl	80108a4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1e1      	bne.n	80109aa <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	20000fec 	.word	0x20000fec

080109f4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d101      	bne.n	8010a06 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010a02:	2301      	movs	r3, #1
 8010a04:	e005      	b.n	8010a12 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8010a06:	4b05      	ldr	r3, [pc, #20]	@ (8010a1c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8010a08:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	370c      	adds	r7, #12
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bc80      	pop	{r7}
 8010a1a:	4770      	bx	lr
 8010a1c:	20000fec 	.word	0x20000fec

08010a20 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b088      	sub	sp, #32
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8010a2c:	4b25      	ldr	r3, [pc, #148]	@ (8010ac4 <LoRaMacCommandsSerializeCmds+0xa4>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d002      	beq.n	8010a42 <LoRaMacCommandsSerializeCmds+0x22>
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d126      	bne.n	8010a90 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010a42:	2301      	movs	r3, #1
 8010a44:	e039      	b.n	8010aba <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8010a46:	7efb      	ldrb	r3, [r7, #27]
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	1ad2      	subs	r2, r2, r3
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	3301      	adds	r3, #1
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d320      	bcc.n	8010a98 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8010a56:	7efb      	ldrb	r3, [r7, #27]
 8010a58:	1c5a      	adds	r2, r3, #1
 8010a5a:	76fa      	strb	r2, [r7, #27]
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4413      	add	r3, r2
 8010a62:	69fa      	ldr	r2, [r7, #28]
 8010a64:	7912      	ldrb	r2, [r2, #4]
 8010a66:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8010a68:	7efb      	ldrb	r3, [r7, #27]
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	18d0      	adds	r0, r2, r3
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	1d59      	adds	r1, r3, #5
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	689b      	ldr	r3, [r3, #8]
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	461a      	mov	r2, r3
 8010a7a:	f006 ff08 	bl	801788e <memcpy1>
            itr += curElement->PayloadSize;
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	689b      	ldr	r3, [r3, #8]
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	7efb      	ldrb	r3, [r7, #27]
 8010a86:	4413      	add	r3, r2
 8010a88:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1d7      	bne.n	8010a46 <LoRaMacCommandsSerializeCmds+0x26>
 8010a96:	e009      	b.n	8010aac <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8010a98:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8010a9a:	e007      	b.n	8010aac <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8010aa2:	69f8      	ldr	r0, [r7, #28]
 8010aa4:	f7ff fefe 	bl	80108a4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1f4      	bne.n	8010a9c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8010ab2:	68b8      	ldr	r0, [r7, #8]
 8010ab4:	f7ff ff9e 	bl	80109f4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3720      	adds	r7, #32
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20000fec 	.word	0x20000fec

08010ac8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b085      	sub	sp, #20
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	4603      	mov	r3, r0
 8010ad0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8010ad6:	79fb      	ldrb	r3, [r7, #7]
 8010ad8:	3b02      	subs	r3, #2
 8010ada:	2b11      	cmp	r3, #17
 8010adc:	d850      	bhi.n	8010b80 <LoRaMacCommandsGetCmdSize+0xb8>
 8010ade:	a201      	add	r2, pc, #4	@ (adr r2, 8010ae4 <LoRaMacCommandsGetCmdSize+0x1c>)
 8010ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae4:	08010b2d 	.word	0x08010b2d
 8010ae8:	08010b33 	.word	0x08010b33
 8010aec:	08010b39 	.word	0x08010b39
 8010af0:	08010b3f 	.word	0x08010b3f
 8010af4:	08010b45 	.word	0x08010b45
 8010af8:	08010b4b 	.word	0x08010b4b
 8010afc:	08010b51 	.word	0x08010b51
 8010b00:	08010b57 	.word	0x08010b57
 8010b04:	08010b5d 	.word	0x08010b5d
 8010b08:	08010b81 	.word	0x08010b81
 8010b0c:	08010b81 	.word	0x08010b81
 8010b10:	08010b63 	.word	0x08010b63
 8010b14:	08010b81 	.word	0x08010b81
 8010b18:	08010b81 	.word	0x08010b81
 8010b1c:	08010b69 	.word	0x08010b69
 8010b20:	08010b6f 	.word	0x08010b6f
 8010b24:	08010b75 	.word	0x08010b75
 8010b28:	08010b7b 	.word	0x08010b7b
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8010b2c:	2303      	movs	r3, #3
 8010b2e:	73fb      	strb	r3, [r7, #15]
            break;
 8010b30:	e027      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8010b32:	2305      	movs	r3, #5
 8010b34:	73fb      	strb	r3, [r7, #15]
            break;
 8010b36:	e024      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8010b38:	2302      	movs	r3, #2
 8010b3a:	73fb      	strb	r3, [r7, #15]
            break;
 8010b3c:	e021      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8010b3e:	2305      	movs	r3, #5
 8010b40:	73fb      	strb	r3, [r7, #15]
            break;
 8010b42:	e01e      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8010b44:	2301      	movs	r3, #1
 8010b46:	73fb      	strb	r3, [r7, #15]
            break;
 8010b48:	e01b      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8010b4a:	2306      	movs	r3, #6
 8010b4c:	73fb      	strb	r3, [r7, #15]
            break;
 8010b4e:	e018      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8010b50:	2302      	movs	r3, #2
 8010b52:	73fb      	strb	r3, [r7, #15]
            break;
 8010b54:	e015      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8010b56:	2302      	movs	r3, #2
 8010b58:	73fb      	strb	r3, [r7, #15]
            break;
 8010b5a:	e012      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8010b5c:	2305      	movs	r3, #5
 8010b5e:	73fb      	strb	r3, [r7, #15]
            break;
 8010b60:	e00f      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8010b62:	2306      	movs	r3, #6
 8010b64:	73fb      	strb	r3, [r7, #15]
            break;
 8010b66:	e00c      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	73fb      	strb	r3, [r7, #15]
            break;
 8010b6c:	e009      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8010b6e:	2305      	movs	r3, #5
 8010b70:	73fb      	strb	r3, [r7, #15]
            break;
 8010b72:	e006      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8010b74:	2304      	movs	r3, #4
 8010b76:	73fb      	strb	r3, [r7, #15]
            break;
 8010b78:	e003      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8010b7a:	2304      	movs	r3, #4
 8010b7c:	73fb      	strb	r3, [r7, #15]
            break;
 8010b7e:	e000      	b.n	8010b82 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8010b80:	bf00      	nop
        }
    }
    return cidSize;
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bc80      	pop	{r7}
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop

08010b90 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8010b90:	b480      	push	{r7}
 8010b92:	b083      	sub	sp, #12
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a07      	ldr	r2, [pc, #28]	@ (8010bb8 <IncreaseBufferPointer+0x28>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d102      	bne.n	8010ba6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010ba0:	4b06      	ldr	r3, [pc, #24]	@ (8010bbc <IncreaseBufferPointer+0x2c>)
 8010ba2:	607b      	str	r3, [r7, #4]
 8010ba4:	e002      	b.n	8010bac <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	3304      	adds	r3, #4
 8010baa:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8010bac:	687b      	ldr	r3, [r7, #4]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	370c      	adds	r7, #12
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bc80      	pop	{r7}
 8010bb6:	4770      	bx	lr
 8010bb8:	20001214 	.word	0x20001214
 8010bbc:	20001204 	.word	0x20001204

08010bc0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b083      	sub	sp, #12
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8010bca:	79fb      	ldrb	r3, [r7, #7]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d101      	bne.n	8010bd4 <IsListEmpty+0x14>
    {
        return true;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	e000      	b.n	8010bd6 <IsListEmpty+0x16>
    }
    return false;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	370c      	adds	r7, #12
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bc80      	pop	{r7}
 8010bde:	4770      	bx	lr

08010be0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8010bea:	79fb      	ldrb	r3, [r7, #7]
 8010bec:	2b04      	cmp	r3, #4
 8010bee:	d901      	bls.n	8010bf4 <IsListFull+0x14>
    {
        return true;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	e000      	b.n	8010bf6 <IsListFull+0x16>
    }
    return false;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bc80      	pop	{r7}
 8010bfe:	4770      	bx	lr

08010c00 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b086      	sub	sp, #24
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
 8010c0c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010c12:	4b13      	ldr	r3, [pc, #76]	@ (8010c60 <GetElement+0x60>)
 8010c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff ffd1 	bl	8010bc0 <IsListEmpty>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d001      	beq.n	8010c28 <GetElement+0x28>
    {
        return NULL;
 8010c24:	2300      	movs	r3, #0
 8010c26:	e017      	b.n	8010c58 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010c28:	2300      	movs	r3, #0
 8010c2a:	74fb      	strb	r3, [r7, #19]
 8010c2c:	e00d      	b.n	8010c4a <GetElement+0x4a>
    {
        if( element->Request == request )
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	7bfa      	ldrb	r2, [r7, #15]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d101      	bne.n	8010c3c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	e00d      	b.n	8010c58 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8010c3c:	6978      	ldr	r0, [r7, #20]
 8010c3e:	f7ff ffa7 	bl	8010b90 <IncreaseBufferPointer>
 8010c42:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010c44:	7cfb      	ldrb	r3, [r7, #19]
 8010c46:	3301      	adds	r3, #1
 8010c48:	74fb      	strb	r3, [r7, #19]
 8010c4a:	4b05      	ldr	r3, [pc, #20]	@ (8010c60 <GetElement+0x60>)
 8010c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c50:	7cfa      	ldrb	r2, [r7, #19]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d3eb      	bcc.n	8010c2e <GetElement+0x2e>
    }

    return NULL;
 8010c56:	2300      	movs	r3, #0
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3718      	adds	r7, #24
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	200011f8 	.word	0x200011f8

08010c64 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8010c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8010ca0 <LoRaMacConfirmQueueInit+0x3c>)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8010c72:	4b0b      	ldr	r3, [pc, #44]	@ (8010ca0 <LoRaMacConfirmQueueInit+0x3c>)
 8010c74:	2200      	movs	r2, #0
 8010c76:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010c7a:	4b09      	ldr	r3, [pc, #36]	@ (8010ca0 <LoRaMacConfirmQueueInit+0x3c>)
 8010c7c:	4a09      	ldr	r2, [pc, #36]	@ (8010ca4 <LoRaMacConfirmQueueInit+0x40>)
 8010c7e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010c80:	4b07      	ldr	r3, [pc, #28]	@ (8010ca0 <LoRaMacConfirmQueueInit+0x3c>)
 8010c82:	4a08      	ldr	r2, [pc, #32]	@ (8010ca4 <LoRaMacConfirmQueueInit+0x40>)
 8010c84:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8010c86:	2214      	movs	r2, #20
 8010c88:	21ff      	movs	r1, #255	@ 0xff
 8010c8a:	4806      	ldr	r0, [pc, #24]	@ (8010ca4 <LoRaMacConfirmQueueInit+0x40>)
 8010c8c:	f006 fe3a 	bl	8017904 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c90:	4b03      	ldr	r3, [pc, #12]	@ (8010ca0 <LoRaMacConfirmQueueInit+0x3c>)
 8010c92:	2201      	movs	r2, #1
 8010c94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8010c98:	bf00      	nop
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	200011f8 	.word	0x200011f8
 8010ca4:	20001204 	.word	0x20001204

08010ca8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010cb0:	4b19      	ldr	r3, [pc, #100]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7ff ff92 	bl	8010be0 <IsListFull>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	e024      	b.n	8010d10 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8010cc6:	4b14      	ldr	r3, [pc, #80]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	7812      	ldrb	r2, [r2, #0]
 8010cce:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8010cd0:	4b11      	ldr	r3, [pc, #68]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	7852      	ldrb	r2, [r2, #1]
 8010cd8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8010cda:	4b0f      	ldr	r3, [pc, #60]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010cdc:	689b      	ldr	r3, [r3, #8]
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	78d2      	ldrb	r2, [r2, #3]
 8010ce2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8010ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	7892      	ldrb	r2, [r2, #2]
 8010cec:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8010cee:	4b0a      	ldr	r3, [pc, #40]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	4b07      	ldr	r3, [pc, #28]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010cfa:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8010cfe:	4b06      	ldr	r3, [pc, #24]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010d00:	689b      	ldr	r3, [r3, #8]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7ff ff44 	bl	8010b90 <IncreaseBufferPointer>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	4a03      	ldr	r2, [pc, #12]	@ (8010d18 <LoRaMacConfirmQueueAdd+0x70>)
 8010d0c:	6093      	str	r3, [r2, #8]

    return true;
 8010d0e:	2301      	movs	r3, #1
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	200011f8 	.word	0x200011f8

08010d1c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010d20:	4b0e      	ldr	r3, [pc, #56]	@ (8010d5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7ff ff4a 	bl	8010bc0 <IsListEmpty>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d001      	beq.n	8010d36 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e010      	b.n	8010d58 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8010d36:	4b09      	ldr	r3, [pc, #36]	@ (8010d5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d3c:	3b01      	subs	r3, #1
 8010d3e:	b2da      	uxtb	r2, r3
 8010d40:	4b06      	ldr	r3, [pc, #24]	@ (8010d5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d42:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8010d46:	4b05      	ldr	r3, [pc, #20]	@ (8010d5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7ff ff20 	bl	8010b90 <IncreaseBufferPointer>
 8010d50:	4603      	mov	r3, r0
 8010d52:	4a02      	ldr	r2, [pc, #8]	@ (8010d5c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d54:	6053      	str	r3, [r2, #4]

    return true;
 8010d56:	2301      	movs	r3, #1
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	200011f8 	.word	0x200011f8

08010d60 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4603      	mov	r3, r0
 8010d68:	460a      	mov	r2, r1
 8010d6a:	71fb      	strb	r3, [r7, #7]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8010d70:	2300      	movs	r3, #0
 8010d72:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010d74:	4b10      	ldr	r3, [pc, #64]	@ (8010db8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8010d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7ff ff20 	bl	8010bc0 <IsListEmpty>
 8010d80:	4603      	mov	r3, r0
 8010d82:	f083 0301 	eor.w	r3, r3, #1
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d011      	beq.n	8010db0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010db8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8010d8e:	6859      	ldr	r1, [r3, #4]
 8010d90:	4b09      	ldr	r3, [pc, #36]	@ (8010db8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8010d92:	689a      	ldr	r2, [r3, #8]
 8010d94:	79bb      	ldrb	r3, [r7, #6]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff ff32 	bl	8010c00 <GetElement>
 8010d9c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d005      	beq.n	8010db0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	79fa      	ldrb	r2, [r7, #7]
 8010da8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2201      	movs	r2, #1
 8010dae:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8010db0:	bf00      	nop
 8010db2:	3710      	adds	r7, #16
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	200011f8 	.word	0x200011f8

08010dbc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010dca:	4b10      	ldr	r3, [pc, #64]	@ (8010e0c <LoRaMacConfirmQueueGetStatus+0x50>)
 8010dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7ff fef5 	bl	8010bc0 <IsListEmpty>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	f083 0301 	eor.w	r3, r3, #1
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d00e      	beq.n	8010e00 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010de2:	4b0a      	ldr	r3, [pc, #40]	@ (8010e0c <LoRaMacConfirmQueueGetStatus+0x50>)
 8010de4:	6859      	ldr	r1, [r3, #4]
 8010de6:	4b09      	ldr	r3, [pc, #36]	@ (8010e0c <LoRaMacConfirmQueueGetStatus+0x50>)
 8010de8:	689a      	ldr	r2, [r3, #8]
 8010dea:	79fb      	ldrb	r3, [r7, #7]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7ff ff07 	bl	8010c00 <GetElement>
 8010df2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d002      	beq.n	8010e00 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	785b      	ldrb	r3, [r3, #1]
 8010dfe:	e000      	b.n	8010e02 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e00:	2301      	movs	r3, #1
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	200011f8 	.word	0x200011f8

08010e10 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	4603      	mov	r3, r0
 8010e18:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010e1a:	4b16      	ldr	r3, [pc, #88]	@ (8010e74 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8010e20:	4a14      	ldr	r2, [pc, #80]	@ (8010e74 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010e22:	79fb      	ldrb	r3, [r7, #7]
 8010e24:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010e28:	4b12      	ldr	r3, [pc, #72]	@ (8010e74 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7ff fec6 	bl	8010bc0 <IsListEmpty>
 8010e34:	4603      	mov	r3, r0
 8010e36:	f083 0301 	eor.w	r3, r3, #1
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d015      	beq.n	8010e6c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	79fa      	ldrb	r2, [r7, #7]
 8010e44:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	78db      	ldrb	r3, [r3, #3]
 8010e4a:	f083 0301 	eor.w	r3, r3, #1
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2201      	movs	r2, #1
 8010e58:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8010e5a:	68f8      	ldr	r0, [r7, #12]
 8010e5c:	f7ff fe98 	bl	8010b90 <IncreaseBufferPointer>
 8010e60:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8010e62:	4b04      	ldr	r3, [pc, #16]	@ (8010e74 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010e64:	689b      	ldr	r3, [r3, #8]
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d1e9      	bne.n	8010e40 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8010e6c:	bf00      	nop
 8010e6e:	3710      	adds	r7, #16
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	200011f8 	.word	0x200011f8

08010e78 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	4603      	mov	r3, r0
 8010e80:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8010e82:	4b09      	ldr	r3, [pc, #36]	@ (8010ea8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010e84:	6859      	ldr	r1, [r3, #4]
 8010e86:	4b08      	ldr	r3, [pc, #32]	@ (8010ea8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010e88:	689a      	ldr	r2, [r3, #8]
 8010e8a:	79fb      	ldrb	r3, [r7, #7]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7ff feb7 	bl	8010c00 <GetElement>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e000      	b.n	8010e9e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3708      	adds	r7, #8
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	200011f8 	.word	0x200011f8

08010eac <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010eb4:	4b25      	ldr	r3, [pc, #148]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010eba:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8010ec0:	f107 0308 	add.w	r3, r7, #8
 8010ec4:	2204      	movs	r2, #4
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f006 fd1b 	bl	8017904 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8010ece:	2300      	movs	r3, #0
 8010ed0:	73fb      	strb	r3, [r7, #15]
 8010ed2:	e032      	b.n	8010f3a <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8010ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	781a      	ldrb	r2, [r3, #0]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8010ede:	4b1b      	ldr	r3, [pc, #108]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	785a      	ldrb	r2, [r3, #1]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8010ee8:	4b18      	ldr	r3, [pc, #96]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	789b      	ldrb	r3, [r3, #2]
 8010eee:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8010ef0:	7b7b      	ldrb	r3, [r7, #13]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d005      	beq.n	8010f02 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8010ef6:	4b15      	ldr	r3, [pc, #84]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	4798      	blx	r3
 8010f00:	e00b      	b.n	8010f1a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8010f02:	4b12      	ldr	r3, [pc, #72]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8010f0a:	4b10      	ldr	r3, [pc, #64]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	785b      	ldrb	r3, [r3, #1]
 8010f10:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8010f12:	4b0e      	ldr	r3, [pc, #56]	@ (8010f4c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	78db      	ldrb	r3, [r3, #3]
 8010f18:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8010f1a:	f7ff feff 	bl	8010d1c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8010f1e:	7b7b      	ldrb	r3, [r7, #13]
 8010f20:	f083 0301 	eor.w	r3, r3, #1
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d004      	beq.n	8010f34 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8010f2a:	f107 0308 	add.w	r3, r7, #8
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff feba 	bl	8010ca8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
 8010f36:	3301      	adds	r3, #1
 8010f38:	73fb      	strb	r3, [r7, #15]
 8010f3a:	7bfa      	ldrb	r2, [r7, #15]
 8010f3c:	7bbb      	ldrb	r3, [r7, #14]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d3c8      	bcc.n	8010ed4 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8010f42:	bf00      	nop
 8010f44:	bf00      	nop
 8010f46:	3710      	adds	r7, #16
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	200011f8 	.word	0x200011f8

08010f50 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8010f50:	b480      	push	{r7}
 8010f52:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010f54:	4b03      	ldr	r3, [pc, #12]	@ (8010f64 <LoRaMacConfirmQueueGetCnt+0x14>)
 8010f56:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bc80      	pop	{r7}
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	200011f8 	.word	0x200011f8

08010f68 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010f6c:	4b06      	ldr	r3, [pc, #24]	@ (8010f88 <LoRaMacConfirmQueueIsFull+0x20>)
 8010f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7ff fe34 	bl	8010be0 <IsListFull>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d001      	beq.n	8010f82 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	e000      	b.n	8010f84 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8010f82:	2300      	movs	r3, #0
    }
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	200011f8 	.word	0x200011f8

08010f8c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b08e      	sub	sp, #56	@ 0x38
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	607b      	str	r3, [r7, #4]
 8010f96:	460b      	mov	r3, r1
 8010f98:	817b      	strh	r3, [r7, #10]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d101      	bne.n	8010fa8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010fa4:	2309      	movs	r3, #9
 8010fa6:	e084      	b.n	80110b2 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8010fae:	2301      	movs	r3, #1
 8010fb0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8010fb2:	f107 0320 	add.w	r3, r7, #32
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	601a      	str	r2, [r3, #0]
 8010fba:	605a      	str	r2, [r3, #4]
 8010fbc:	609a      	str	r2, [r3, #8]
 8010fbe:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8010fc0:	f107 0310 	add.w	r3, r7, #16
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	601a      	str	r2, [r3, #0]
 8010fc8:	605a      	str	r2, [r3, #4]
 8010fca:	609a      	str	r2, [r3, #8]
 8010fcc:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8010fd2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8010fd6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	0a1b      	lsrs	r3, r3, #8
 8010fe2:	b2db      	uxtb	r3, r3
 8010fe4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	0c1b      	lsrs	r3, r3, #16
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	0e1b      	lsrs	r3, r3, #24
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8010ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ffe:	0a1b      	lsrs	r3, r3, #8
 8011000:	b2db      	uxtb	r3, r3
 8011002:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011006:	0c1b      	lsrs	r3, r3, #16
 8011008:	b2db      	uxtb	r3, r3
 801100a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801100c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801100e:	0e1b      	lsrs	r3, r3, #24
 8011010:	b2db      	uxtb	r3, r3
 8011012:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8011014:	e048      	b.n	80110a8 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8011016:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011018:	b2db      	uxtb	r3, r3
 801101a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801101c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801101e:	3301      	adds	r3, #1
 8011020:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011022:	f107 0320 	add.w	r3, r7, #32
 8011026:	7a7a      	ldrb	r2, [r7, #9]
 8011028:	f107 0010 	add.w	r0, r7, #16
 801102c:	2110      	movs	r1, #16
 801102e:	f006 fa17 	bl	8017460 <SecureElementAesEncrypt>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d001      	beq.n	801103c <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011038:	230e      	movs	r3, #14
 801103a:	e03a      	b.n	80110b2 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801103c:	2300      	movs	r3, #0
 801103e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8011042:	e01e      	b.n	8011082 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011044:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801104c:	4413      	add	r3, r2
 801104e:	461a      	mov	r2, r3
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	4413      	add	r3, r2
 8011054:	7819      	ldrb	r1, [r3, #0]
 8011056:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801105a:	3338      	adds	r3, #56	@ 0x38
 801105c:	443b      	add	r3, r7
 801105e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8011062:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8011066:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801106a:	4403      	add	r3, r0
 801106c:	4618      	mov	r0, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	4403      	add	r3, r0
 8011072:	404a      	eors	r2, r1
 8011074:	b2d2      	uxtb	r2, r2
 8011076:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011078:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801107c:	3301      	adds	r3, #1
 801107e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8011082:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011086:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801108a:	2a10      	cmp	r2, #16
 801108c:	bfa8      	it	ge
 801108e:	2210      	movge	r2, #16
 8011090:	b212      	sxth	r2, r2
 8011092:	4293      	cmp	r3, r2
 8011094:	dbd6      	blt.n	8011044 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 8011096:	897b      	ldrh	r3, [r7, #10]
 8011098:	3b10      	subs	r3, #16
 801109a:	b29b      	uxth	r3, r3
 801109c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801109e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80110a2:	3310      	adds	r3, #16
 80110a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80110a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	dcb2      	bgt.n	8011016 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3738      	adds	r7, #56	@ 0x38
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80110ba:	b490      	push	{r4, r7}
 80110bc:	b082      	sub	sp, #8
 80110be:	af00      	add	r7, sp, #0
 80110c0:	4604      	mov	r4, r0
 80110c2:	4608      	mov	r0, r1
 80110c4:	4611      	mov	r1, r2
 80110c6:	461a      	mov	r2, r3
 80110c8:	4623      	mov	r3, r4
 80110ca:	80fb      	strh	r3, [r7, #6]
 80110cc:	4603      	mov	r3, r0
 80110ce:	717b      	strb	r3, [r7, #5]
 80110d0:	460b      	mov	r3, r1
 80110d2:	713b      	strb	r3, [r7, #4]
 80110d4:	4613      	mov	r3, r2
 80110d6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80110d8:	69bb      	ldr	r3, [r7, #24]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d101      	bne.n	80110e2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80110de:	2309      	movs	r3, #9
 80110e0:	e04e      	b.n	8011180 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	2249      	movs	r2, #73	@ 0x49
 80110e6:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80110e8:	69bb      	ldr	r3, [r7, #24]
 80110ea:	3301      	adds	r3, #1
 80110ec:	2200      	movs	r2, #0
 80110ee:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	3302      	adds	r3, #2
 80110f4:	2200      	movs	r2, #0
 80110f6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	3303      	adds	r3, #3
 80110fc:	2200      	movs	r2, #0
 80110fe:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	3304      	adds	r3, #4
 8011104:	2200      	movs	r2, #0
 8011106:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	3305      	adds	r3, #5
 801110c:	78fa      	ldrb	r2, [r7, #3]
 801110e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	3306      	adds	r3, #6
 8011114:	693a      	ldr	r2, [r7, #16]
 8011116:	b2d2      	uxtb	r2, r2
 8011118:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	0a1a      	lsrs	r2, r3, #8
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	3307      	adds	r3, #7
 8011122:	b2d2      	uxtb	r2, r2
 8011124:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	0c1a      	lsrs	r2, r3, #16
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	3308      	adds	r3, #8
 801112e:	b2d2      	uxtb	r2, r2
 8011130:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	0e1a      	lsrs	r2, r3, #24
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	3309      	adds	r3, #9
 801113a:	b2d2      	uxtb	r2, r2
 801113c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	330a      	adds	r3, #10
 8011142:	697a      	ldr	r2, [r7, #20]
 8011144:	b2d2      	uxtb	r2, r2
 8011146:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	0a1a      	lsrs	r2, r3, #8
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	330b      	adds	r3, #11
 8011150:	b2d2      	uxtb	r2, r2
 8011152:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	0c1a      	lsrs	r2, r3, #16
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	330c      	adds	r3, #12
 801115c:	b2d2      	uxtb	r2, r2
 801115e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	0e1a      	lsrs	r2, r3, #24
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	330d      	adds	r3, #13
 8011168:	b2d2      	uxtb	r2, r2
 801116a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	330e      	adds	r3, #14
 8011170:	2200      	movs	r2, #0
 8011172:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	330f      	adds	r3, #15
 8011178:	88fa      	ldrh	r2, [r7, #6]
 801117a:	b2d2      	uxtb	r2, r2
 801117c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bc90      	pop	{r4, r7}
 8011188:	4770      	bx	lr

0801118a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801118a:	b590      	push	{r4, r7, lr}
 801118c:	b08b      	sub	sp, #44	@ 0x2c
 801118e:	af04      	add	r7, sp, #16
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	4608      	mov	r0, r1
 8011194:	4611      	mov	r1, r2
 8011196:	461a      	mov	r2, r3
 8011198:	4603      	mov	r3, r0
 801119a:	807b      	strh	r3, [r7, #2]
 801119c:	460b      	mov	r3, r1
 801119e:	707b      	strb	r3, [r7, #1]
 80111a0:	4613      	mov	r3, r2
 80111a2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d002      	beq.n	80111b0 <ComputeCmacB0+0x26>
 80111aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80111b0:	2309      	movs	r3, #9
 80111b2:	e024      	b.n	80111fe <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80111b4:	887b      	ldrh	r3, [r7, #2]
 80111b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80111ba:	d901      	bls.n	80111c0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80111bc:	230d      	movs	r3, #13
 80111be:	e01e      	b.n	80111fe <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80111c0:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80111c4:	783a      	ldrb	r2, [r7, #0]
 80111c6:	7879      	ldrb	r1, [r7, #1]
 80111c8:	8878      	ldrh	r0, [r7, #2]
 80111ca:	f107 0308 	add.w	r3, r7, #8
 80111ce:	9302      	str	r3, [sp, #8]
 80111d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111d2:	9301      	str	r3, [sp, #4]
 80111d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	4623      	mov	r3, r4
 80111da:	f7ff ff6e 	bl	80110ba <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80111de:	887a      	ldrh	r2, [r7, #2]
 80111e0:	7879      	ldrb	r1, [r7, #1]
 80111e2:	f107 0008 	add.w	r0, r7, #8
 80111e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	460b      	mov	r3, r1
 80111ec:	6879      	ldr	r1, [r7, #4]
 80111ee:	f006 f8f1 	bl	80173d4 <SecureElementComputeAesCmac>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d001      	beq.n	80111fc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80111f8:	230e      	movs	r3, #14
 80111fa:	e000      	b.n	80111fe <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	bd90      	pop	{r4, r7, pc}

08011206 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8011206:	b590      	push	{r4, r7, lr}
 8011208:	b0cd      	sub	sp, #308	@ 0x134
 801120a:	af04      	add	r7, sp, #16
 801120c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8011210:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8011214:	6020      	str	r0, [r4, #0]
 8011216:	460c      	mov	r4, r1
 8011218:	4610      	mov	r0, r2
 801121a:	4619      	mov	r1, r3
 801121c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011220:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8011224:	4622      	mov	r2, r4
 8011226:	801a      	strh	r2, [r3, #0]
 8011228:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801122c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8011230:	4602      	mov	r2, r0
 8011232:	701a      	strb	r2, [r3, #0]
 8011234:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011238:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801123c:	460a      	mov	r2, r1
 801123e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8011240:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011244:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d101      	bne.n	8011252 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801124e:	2309      	movs	r3, #9
 8011250:	e063      	b.n	801131a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011252:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011256:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801125a:	881b      	ldrh	r3, [r3, #0]
 801125c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011260:	d901      	bls.n	8011266 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011262:	230d      	movs	r3, #13
 8011264:	e059      	b.n	801131a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011266:	f107 030c 	add.w	r3, r7, #12
 801126a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801126e:	2100      	movs	r1, #0
 8011270:	4618      	mov	r0, r3
 8011272:	f006 fb47 	bl	8017904 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011276:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801127a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801127e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011282:	781a      	ldrb	r2, [r3, #0]
 8011284:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011288:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801128c:	7819      	ldrb	r1, [r3, #0]
 801128e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011292:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8011296:	8818      	ldrh	r0, [r3, #0]
 8011298:	f107 030c 	add.w	r3, r7, #12
 801129c:	9302      	str	r3, [sp, #8]
 801129e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80112a2:	9301      	str	r3, [sp, #4]
 80112a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	4623      	mov	r3, r4
 80112ac:	f7ff ff05 	bl	80110ba <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80112b0:	f107 030c 	add.w	r3, r7, #12
 80112b4:	3310      	adds	r3, #16
 80112b6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80112ba:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80112be:	8812      	ldrh	r2, [r2, #0]
 80112c0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80112c4:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80112c8:	6809      	ldr	r1, [r1, #0]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f006 fadf 	bl	801788e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80112d0:	2306      	movs	r3, #6
 80112d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80112d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112da:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80112de:	881b      	ldrh	r3, [r3, #0]
 80112e0:	3310      	adds	r3, #16
 80112e2:	4619      	mov	r1, r3
 80112e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112e8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	f107 000c 	add.w	r0, r7, #12
 80112f2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80112f6:	f006 f887 	bl	8017408 <SecureElementVerifyAesCmac>
 80112fa:	4603      	mov	r3, r0
 80112fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8011300:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8011304:	2b00      	cmp	r3, #0
 8011306:	d101      	bne.n	801130c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8011308:	2300      	movs	r3, #0
 801130a:	e006      	b.n	801131a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801130c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8011310:	2b01      	cmp	r3, #1
 8011312:	d101      	bne.n	8011318 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8011314:	2301      	movs	r3, #1
 8011316:	e000      	b.n	801131a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011318:	230e      	movs	r3, #14
}
 801131a:	4618      	mov	r0, r3
 801131c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8011320:	46bd      	mov	sp, r7
 8011322:	bd90      	pop	{r4, r7, pc}

08011324 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	4603      	mov	r3, r0
 801132c:	6039      	str	r1, [r7, #0]
 801132e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011330:	2300      	movs	r3, #0
 8011332:	73fb      	strb	r3, [r7, #15]
 8011334:	e011      	b.n	801135a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8011336:	7bfb      	ldrb	r3, [r7, #15]
 8011338:	4a0c      	ldr	r2, [pc, #48]	@ (801136c <GetKeyAddrItem+0x48>)
 801133a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801133e:	79fa      	ldrb	r2, [r7, #7]
 8011340:	429a      	cmp	r2, r3
 8011342:	d107      	bne.n	8011354 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8011344:	7bfb      	ldrb	r3, [r7, #15]
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4a08      	ldr	r2, [pc, #32]	@ (801136c <GetKeyAddrItem+0x48>)
 801134a:	441a      	add	r2, r3
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011350:	2300      	movs	r3, #0
 8011352:	e006      	b.n	8011362 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011354:	7bfb      	ldrb	r3, [r7, #15]
 8011356:	3301      	adds	r3, #1
 8011358:	73fb      	strb	r3, [r7, #15]
 801135a:	7bfb      	ldrb	r3, [r7, #15]
 801135c:	2b01      	cmp	r3, #1
 801135e:	d9ea      	bls.n	8011336 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8011360:	230b      	movs	r3, #11
}
 8011362:	4618      	mov	r0, r3
 8011364:	3714      	adds	r7, #20
 8011366:	46bd      	mov	sp, r7
 8011368:	bc80      	pop	{r7}
 801136a:	4770      	bx	lr
 801136c:	200000b4 	.word	0x200000b4

08011370 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b088      	sub	sp, #32
 8011374:	af00      	add	r7, sp, #0
 8011376:	60b9      	str	r1, [r7, #8]
 8011378:	607a      	str	r2, [r7, #4]
 801137a:	461a      	mov	r2, r3
 801137c:	4603      	mov	r3, r0
 801137e:	73fb      	strb	r3, [r7, #15]
 8011380:	4613      	mov	r3, r2
 8011382:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8011384:	f107 0310 	add.w	r3, r7, #16
 8011388:	2200      	movs	r2, #0
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	605a      	str	r2, [r3, #4]
 801138e:	609a      	str	r2, [r3, #8]
 8011390:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8011392:	7bfb      	ldrb	r3, [r7, #15]
 8011394:	2b08      	cmp	r3, #8
 8011396:	d002      	beq.n	801139e <DeriveSessionKey10x+0x2e>
 8011398:	2b09      	cmp	r3, #9
 801139a:	d003      	beq.n	80113a4 <DeriveSessionKey10x+0x34>
 801139c:	e005      	b.n	80113aa <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801139e:	2301      	movs	r3, #1
 80113a0:	743b      	strb	r3, [r7, #16]
            break;
 80113a2:	e004      	b.n	80113ae <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80113a4:	2302      	movs	r3, #2
 80113a6:	743b      	strb	r3, [r7, #16]
            break;
 80113a8:	e001      	b.n	80113ae <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80113aa:	230a      	movs	r3, #10
 80113ac:	e02a      	b.n	8011404 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	0a1b      	lsrs	r3, r3, #8
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	0c1b      	lsrs	r3, r3, #16
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	0a1b      	lsrs	r3, r3, #8
 80113ce:	b2db      	uxtb	r3, r3
 80113d0:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	0c1b      	lsrs	r3, r3, #16
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80113da:	89bb      	ldrh	r3, [r7, #12]
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80113e0:	89bb      	ldrh	r3, [r7, #12]
 80113e2:	0a1b      	lsrs	r3, r3, #8
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80113ea:	7bfa      	ldrb	r2, [r7, #15]
 80113ec:	f107 0310 	add.w	r3, r7, #16
 80113f0:	2101      	movs	r1, #1
 80113f2:	4618      	mov	r0, r3
 80113f4:	f006 f8b4 	bl	8017560 <SecureElementDeriveAndStoreKey>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80113fe:	230e      	movs	r3, #14
 8011400:	e000      	b.n	8011404 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3720      	adds	r7, #32
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	4603      	mov	r3, r0
 8011414:	6039      	str	r1, [r7, #0]
 8011416:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d101      	bne.n	8011422 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801141e:	2309      	movs	r3, #9
 8011420:	e029      	b.n	8011476 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	3b01      	subs	r3, #1
 8011426:	2b03      	cmp	r3, #3
 8011428:	d822      	bhi.n	8011470 <GetLastFcntDown+0x64>
 801142a:	a201      	add	r2, pc, #4	@ (adr r2, 8011430 <GetLastFcntDown+0x24>)
 801142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011430:	08011441 	.word	0x08011441
 8011434:	0801144d 	.word	0x0801144d
 8011438:	08011459 	.word	0x08011459
 801143c:	08011465 	.word	0x08011465
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8011440:	4b0f      	ldr	r3, [pc, #60]	@ (8011480 <GetLastFcntDown+0x74>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	691a      	ldr	r2, [r3, #16]
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	601a      	str	r2, [r3, #0]
            break;
 801144a:	e013      	b.n	8011474 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801144c:	4b0c      	ldr	r3, [pc, #48]	@ (8011480 <GetLastFcntDown+0x74>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	695a      	ldr	r2, [r3, #20]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	601a      	str	r2, [r3, #0]
            break;
 8011456:	e00d      	b.n	8011474 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8011458:	4b09      	ldr	r3, [pc, #36]	@ (8011480 <GetLastFcntDown+0x74>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	699a      	ldr	r2, [r3, #24]
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	601a      	str	r2, [r3, #0]
            break;
 8011462:	e007      	b.n	8011474 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8011464:	4b06      	ldr	r3, [pc, #24]	@ (8011480 <GetLastFcntDown+0x74>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	69da      	ldr	r2, [r3, #28]
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	601a      	str	r2, [r3, #0]
            break;
 801146e:	e001      	b.n	8011474 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011470:	2305      	movs	r3, #5
 8011472:	e000      	b.n	8011476 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011474:	2300      	movs	r3, #0
}
 8011476:	4618      	mov	r0, r3
 8011478:	370c      	adds	r7, #12
 801147a:	46bd      	mov	sp, r7
 801147c:	bc80      	pop	{r7}
 801147e:	4770      	bx	lr
 8011480:	2000121c 	.word	0x2000121c

08011484 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	4603      	mov	r3, r0
 801148c:	6039      	str	r1, [r7, #0]
 801148e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8011490:	2300      	movs	r3, #0
 8011492:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8011494:	f107 020c 	add.w	r2, r7, #12
 8011498:	79fb      	ldrb	r3, [r7, #7]
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f7ff ffb5 	bl	801140c <GetLastFcntDown>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d001      	beq.n	80114ac <CheckFCntDown+0x28>
    {
        return false;
 80114a8:	2300      	movs	r3, #0
 80114aa:	e00a      	b.n	80114c2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	683a      	ldr	r2, [r7, #0]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d803      	bhi.n	80114bc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80114b4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80114b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ba:	d101      	bne.n	80114c0 <CheckFCntDown+0x3c>
    {
        return true;
 80114bc:	2301      	movs	r3, #1
 80114be:	e000      	b.n	80114c2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80114c0:	2300      	movs	r3, #0
    }
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
	...

080114cc <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80114cc:	b480      	push	{r7}
 80114ce:	b083      	sub	sp, #12
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	4603      	mov	r3, r0
 80114d4:	6039      	str	r1, [r7, #0]
 80114d6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80114d8:	79fb      	ldrb	r3, [r7, #7]
 80114da:	3b01      	subs	r3, #1
 80114dc:	2b03      	cmp	r3, #3
 80114de:	d82b      	bhi.n	8011538 <UpdateFCntDown+0x6c>
 80114e0:	a201      	add	r2, pc, #4	@ (adr r2, 80114e8 <UpdateFCntDown+0x1c>)
 80114e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e6:	bf00      	nop
 80114e8:	080114f9 	.word	0x080114f9
 80114ec:	0801150b 	.word	0x0801150b
 80114f0:	0801151d 	.word	0x0801151d
 80114f4:	0801152f 	.word	0x0801152f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80114f8:	4b12      	ldr	r3, [pc, #72]	@ (8011544 <UpdateFCntDown+0x78>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8011500:	4b10      	ldr	r3, [pc, #64]	@ (8011544 <UpdateFCntDown+0x78>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	683a      	ldr	r2, [r7, #0]
 8011506:	621a      	str	r2, [r3, #32]
            break;
 8011508:	e017      	b.n	801153a <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801150a:	4b0e      	ldr	r3, [pc, #56]	@ (8011544 <UpdateFCntDown+0x78>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	683a      	ldr	r2, [r7, #0]
 8011510:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8011512:	4b0c      	ldr	r3, [pc, #48]	@ (8011544 <UpdateFCntDown+0x78>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	683a      	ldr	r2, [r7, #0]
 8011518:	621a      	str	r2, [r3, #32]
            break;
 801151a:	e00e      	b.n	801153a <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801151c:	4b09      	ldr	r3, [pc, #36]	@ (8011544 <UpdateFCntDown+0x78>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	683a      	ldr	r2, [r7, #0]
 8011522:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8011524:	4b07      	ldr	r3, [pc, #28]	@ (8011544 <UpdateFCntDown+0x78>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	683a      	ldr	r2, [r7, #0]
 801152a:	621a      	str	r2, [r3, #32]
            break;
 801152c:	e005      	b.n	801153a <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801152e:	4b05      	ldr	r3, [pc, #20]	@ (8011544 <UpdateFCntDown+0x78>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	683a      	ldr	r2, [r7, #0]
 8011534:	61da      	str	r2, [r3, #28]
            break;
 8011536:	e000      	b.n	801153a <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8011538:	bf00      	nop
    }
}
 801153a:	bf00      	nop
 801153c:	370c      	adds	r7, #12
 801153e:	46bd      	mov	sp, r7
 8011540:	bc80      	pop	{r7}
 8011542:	4770      	bx	lr
 8011544:	2000121c 	.word	0x2000121c

08011548 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801154e:	4b18      	ldr	r3, [pc, #96]	@ (80115b0 <ResetFCnts+0x68>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2200      	movs	r2, #0
 8011554:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011556:	4b16      	ldr	r3, [pc, #88]	@ (80115b0 <ResetFCnts+0x68>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f04f 32ff 	mov.w	r2, #4294967295
 801155e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011560:	4b13      	ldr	r3, [pc, #76]	@ (80115b0 <ResetFCnts+0x68>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	f04f 32ff 	mov.w	r2, #4294967295
 8011568:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801156a:	4b11      	ldr	r3, [pc, #68]	@ (80115b0 <ResetFCnts+0x68>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f04f 32ff 	mov.w	r2, #4294967295
 8011572:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8011574:	4b0e      	ldr	r3, [pc, #56]	@ (80115b0 <ResetFCnts+0x68>)
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	4b0d      	ldr	r3, [pc, #52]	@ (80115b0 <ResetFCnts+0x68>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	6992      	ldr	r2, [r2, #24]
 801157e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011580:	2300      	movs	r3, #0
 8011582:	607b      	str	r3, [r7, #4]
 8011584:	e00b      	b.n	801159e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8011586:	4b0a      	ldr	r3, [pc, #40]	@ (80115b0 <ResetFCnts+0x68>)
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	3306      	adds	r3, #6
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	4413      	add	r3, r2
 8011592:	f04f 32ff 	mov.w	r2, #4294967295
 8011596:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	3301      	adds	r3, #1
 801159c:	607b      	str	r3, [r7, #4]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	ddf0      	ble.n	8011586 <ResetFCnts+0x3e>
    }
}
 80115a4:	bf00      	nop
 80115a6:	bf00      	nop
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bc80      	pop	{r7}
 80115ae:	4770      	bx	lr
 80115b0:	2000121c 	.word	0x2000121c

080115b4 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80115bc:	4b06      	ldr	r3, [pc, #24]	@ (80115d8 <IsJoinNonce10xOk+0x24>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	bf8c      	ite	hi
 80115c8:	2301      	movhi	r3, #1
 80115ca:	2300      	movls	r3, #0
 80115cc:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bc80      	pop	{r7}
 80115d6:	4770      	bx	lr
 80115d8:	2000121c 	.word	0x2000121c

080115dc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d101      	bne.n	80115ee <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80115ea:	2308      	movs	r3, #8
 80115ec:	e01c      	b.n	8011628 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80115ee:	4a10      	ldr	r2, [pc, #64]	@ (8011630 <LoRaMacCryptoInit+0x54>)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80115f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011630 <LoRaMacCryptoInit+0x54>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2228      	movs	r2, #40	@ 0x28
 80115fa:	2100      	movs	r1, #0
 80115fc:	4618      	mov	r0, r3
 80115fe:	f006 f981 	bl	8017904 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8011602:	4b0b      	ldr	r3, [pc, #44]	@ (8011630 <LoRaMacCryptoInit+0x54>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	2201      	movs	r2, #1
 8011608:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801160a:	4b09      	ldr	r3, [pc, #36]	@ (8011630 <LoRaMacCryptoInit+0x54>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	2201      	movs	r2, #1
 8011610:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8011612:	4b07      	ldr	r3, [pc, #28]	@ (8011630 <LoRaMacCryptoInit+0x54>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2201      	movs	r2, #1
 8011618:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801161a:	4b05      	ldr	r3, [pc, #20]	@ (8011630 <LoRaMacCryptoInit+0x54>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	2200      	movs	r2, #0
 8011620:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8011622:	f7ff ff91 	bl	8011548 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8011626:	2300      	movs	r3, #0
}
 8011628:	4618      	mov	r0, r3
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	2000121c 	.word	0x2000121c

08011634 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801163c:	4b04      	ldr	r3, [pc, #16]	@ (8011650 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	370c      	adds	r7, #12
 801164a:	46bd      	mov	sp, r7
 801164c:	bc80      	pop	{r7}
 801164e:	4770      	bx	lr
 8011650:	2000121c 	.word	0x2000121c

08011654 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d101      	bne.n	8011666 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011662:	2309      	movs	r3, #9
 8011664:	e006      	b.n	8011674 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8011666:	4b06      	ldr	r3, [pc, #24]	@ (8011680 <LoRaMacCryptoGetFCntUp+0x2c>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	1c5a      	adds	r2, r3, #1
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011672:	2300      	movs	r3, #0
}
 8011674:	4618      	mov	r0, r3
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	bc80      	pop	{r7}
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	2000121c 	.word	0x2000121c

08011684 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b088      	sub	sp, #32
 8011688:	af00      	add	r7, sp, #0
 801168a:	4603      	mov	r3, r0
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8011696:	2300      	movs	r3, #0
 8011698:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801169a:	2312      	movs	r3, #18
 801169c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d101      	bne.n	80116a8 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80116a4:	2309      	movs	r3, #9
 80116a6:	e035      	b.n	8011714 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80116a8:	f107 0214 	add.w	r2, r7, #20
 80116ac:	7bfb      	ldrb	r3, [r7, #15]
 80116ae:	4611      	mov	r1, r2
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ff feab 	bl	801140c <GetLastFcntDown>
 80116b6:	4603      	mov	r3, r0
 80116b8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80116ba:	7efb      	ldrb	r3, [r7, #27]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80116c0:	7efb      	ldrb	r3, [r7, #27]
 80116c2:	e027      	b.n	8011714 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ca:	d103      	bne.n	80116d4 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	68ba      	ldr	r2, [r7, #8]
 80116d0:	601a      	str	r2, [r3, #0]
 80116d2:	e01e      	b.n	8011712 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	68ba      	ldr	r2, [r7, #8]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	dd05      	ble.n	80116f0 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80116e4:	697a      	ldr	r2, [r7, #20]
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	441a      	add	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	e010      	b.n	8011712 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d104      	bne.n	8011700 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80116f6:	697a      	ldr	r2, [r7, #20]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80116fc:	2307      	movs	r3, #7
 80116fe:	e009      	b.n	8011714 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	0c1b      	lsrs	r3, r3, #16
 8011704:	041b      	lsls	r3, r3, #16
 8011706:	68ba      	ldr	r2, [r7, #8]
 8011708:	4413      	add	r3, r2
 801170a:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011712:	2300      	movs	r3, #0
}
 8011714:	4618      	mov	r0, r3
 8011716:	3720      	adds	r7, #32
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d101      	bne.n	801172e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801172a:	2309      	movs	r3, #9
 801172c:	e019      	b.n	8011762 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801172e:	2300      	movs	r3, #0
 8011730:	60fb      	str	r3, [r7, #12]
 8011732:	e012      	b.n	801175a <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8011734:	4b0d      	ldr	r3, [pc, #52]	@ (801176c <LoRaMacCryptoSetMulticastReference+0x50>)
 8011736:	6819      	ldr	r1, [r3, #0]
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	4613      	mov	r3, r2
 801173c:	005b      	lsls	r3, r3, #1
 801173e:	4413      	add	r3, r2
 8011740:	011b      	lsls	r3, r3, #4
 8011742:	461a      	mov	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4413      	add	r3, r2
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	3206      	adds	r2, #6
 801174c:	0092      	lsls	r2, r2, #2
 801174e:	440a      	add	r2, r1
 8011750:	3204      	adds	r2, #4
 8011752:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	3301      	adds	r3, #1
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2b00      	cmp	r3, #0
 801175e:	dde9      	ble.n	8011734 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011760:	2300      	movs	r3, #0
}
 8011762:	4618      	mov	r0, r3
 8011764:	3714      	adds	r7, #20
 8011766:	46bd      	mov	sp, r7
 8011768:	bc80      	pop	{r7}
 801176a:	4770      	bx	lr
 801176c:	2000121c 	.word	0x2000121c

08011770 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	4603      	mov	r3, r0
 8011778:	6039      	str	r1, [r7, #0]
 801177a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801177c:	79fb      	ldrb	r3, [r7, #7]
 801177e:	6839      	ldr	r1, [r7, #0]
 8011780:	4618      	mov	r0, r3
 8011782:	f005 fdc9 	bl	8017318 <SecureElementSetKey>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d001      	beq.n	8011790 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801178c:	230e      	movs	r3, #14
 801178e:	e021      	b.n	80117d4 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8011790:	79fb      	ldrb	r3, [r7, #7]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d11d      	bne.n	80117d2 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8011796:	4b11      	ldr	r3, [pc, #68]	@ (80117dc <LoRaMacCryptoSetKey+0x6c>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	789b      	ldrb	r3, [r3, #2]
 801179c:	210b      	movs	r1, #11
 801179e:	4618      	mov	r0, r3
 80117a0:	f000 fa54 	bl	8011c4c <LoRaMacCryptoDeriveLifeTimeKey>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d001      	beq.n	80117ae <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80117aa:	230e      	movs	r3, #14
 80117ac:	e012      	b.n	80117d4 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80117ae:	210c      	movs	r1, #12
 80117b0:	2000      	movs	r0, #0
 80117b2:	f000 fa4b 	bl	8011c4c <LoRaMacCryptoDeriveLifeTimeKey>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80117bc:	230e      	movs	r3, #14
 80117be:	e009      	b.n	80117d4 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80117c0:	210a      	movs	r1, #10
 80117c2:	2000      	movs	r0, #0
 80117c4:	f000 fa42 	bl	8011c4c <LoRaMacCryptoDeriveLifeTimeKey>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d001      	beq.n	80117d2 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80117ce:	230e      	movs	r3, #14
 80117d0:	e000      	b.n	80117d4 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80117d2:	2300      	movs	r3, #0
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3708      	adds	r7, #8
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}
 80117dc:	2000121c 	.word	0x2000121c

080117e0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b086      	sub	sp, #24
 80117e4:	af02      	add	r7, sp, #8
 80117e6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80117ee:	2309      	movs	r3, #9
 80117f0:	e02d      	b.n	801184e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80117f2:	2301      	movs	r3, #1
 80117f4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80117f6:	4b18      	ldr	r3, [pc, #96]	@ (8011858 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	889a      	ldrh	r2, [r3, #4]
 80117fc:	3201      	adds	r2, #1
 80117fe:	b292      	uxth	r2, r2
 8011800:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8011802:	4b15      	ldr	r3, [pc, #84]	@ (8011858 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	889a      	ldrh	r2, [r3, #4]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 fc14 	bl	801203a <LoRaMacSerializerJoinRequest>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011818:	2310      	movs	r3, #16
 801181a:	e018      	b.n	801184e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6819      	ldr	r1, [r3, #0]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	3318      	adds	r3, #24
 8011824:	7bfa      	ldrb	r2, [r7, #15]
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	4613      	mov	r3, r2
 801182a:	2213      	movs	r2, #19
 801182c:	2000      	movs	r0, #0
 801182e:	f005 fdd1 	bl	80173d4 <SecureElementComputeAesCmac>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d001      	beq.n	801183c <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011838:	230e      	movs	r3, #14
 801183a:	e008      	b.n	801184e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 fbfc 	bl	801203a <LoRaMacSerializerJoinRequest>
 8011842:	4603      	mov	r3, r0
 8011844:	2b00      	cmp	r3, #0
 8011846:	d001      	beq.n	801184c <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011848:	2310      	movs	r3, #16
 801184a:	e000      	b.n	801184e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801184c:	2300      	movs	r3, #0
}
 801184e:	4618      	mov	r0, r3
 8011850:	3710      	adds	r7, #16
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	2000121c 	.word	0x2000121c

0801185c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801185c:	b590      	push	{r4, r7, lr}
 801185e:	b097      	sub	sp, #92	@ 0x5c
 8011860:	af04      	add	r7, sp, #16
 8011862:	4603      	mov	r3, r0
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
 8011868:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d101      	bne.n	801187a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011876:	2309      	movs	r3, #9
 8011878:	e0d1      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801187a:	2312      	movs	r3, #18
 801187c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8011880:	f107 0314 	add.w	r3, r7, #20
 8011884:	2221      	movs	r2, #33	@ 0x21
 8011886:	2100      	movs	r1, #0
 8011888:	4618      	mov	r0, r3
 801188a:	f00e ff81 	bl	8020790 <memset>
    uint8_t versionMinor         = 0;
 801188e:	2300      	movs	r3, #0
 8011890:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8011892:	4b65      	ldr	r3, [pc, #404]	@ (8011a28 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	889b      	ldrh	r3, [r3, #4]
 8011898:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681c      	ldr	r4, [r3, #0]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	791b      	ldrb	r3, [r3, #4]
 80118a4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80118a8:	7bf8      	ldrb	r0, [r7, #15]
 80118aa:	f107 0213 	add.w	r2, r7, #19
 80118ae:	9202      	str	r2, [sp, #8]
 80118b0:	f107 0214 	add.w	r2, r7, #20
 80118b4:	9201      	str	r2, [sp, #4]
 80118b6:	9300      	str	r3, [sp, #0]
 80118b8:	4623      	mov	r3, r4
 80118ba:	460a      	mov	r2, r1
 80118bc:	68b9      	ldr	r1, [r7, #8]
 80118be:	f005 fe8e 	bl	80175de <SecureElementProcessJoinAccept>
 80118c2:	4603      	mov	r3, r0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d001      	beq.n	80118cc <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80118c8:	230e      	movs	r3, #14
 80118ca:	e0a8      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6818      	ldr	r0, [r3, #0]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	791b      	ldrb	r3, [r3, #4]
 80118d4:	461a      	mov	r2, r3
 80118d6:	f107 0314 	add.w	r3, r7, #20
 80118da:	4619      	mov	r1, r3
 80118dc:	f005 ffd7 	bl	801788e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 f9ed 	bl	8011cc0 <LoRaMacParserJoinAccept>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d001      	beq.n	80118f0 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80118ec:	230f      	movs	r3, #15
 80118ee:	e096      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80118f0:	2300      	movs	r3, #0
 80118f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	799b      	ldrb	r3, [r3, #6]
 80118fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	79db      	ldrb	r3, [r3, #7]
 8011900:	021b      	lsls	r3, r3, #8
 8011902:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011904:	4313      	orrs	r3, r2
 8011906:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	7a1b      	ldrb	r3, [r3, #8]
 801190c:	041b      	lsls	r3, r3, #16
 801190e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011910:	4313      	orrs	r3, r2
 8011912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8011914:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011916:	f7ff fe4d 	bl	80115b4 <IsJoinNonce10xOk>
 801191a:	4603      	mov	r3, r0
 801191c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8011920:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011924:	2b00      	cmp	r3, #0
 8011926:	d010      	beq.n	801194a <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8011928:	4b3f      	ldr	r3, [pc, #252]	@ (8011a28 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801192e:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8011930:	7cfb      	ldrb	r3, [r7, #19]
 8011932:	210b      	movs	r1, #11
 8011934:	4618      	mov	r0, r3
 8011936:	f000 f989 	bl	8011c4c <LoRaMacCryptoDeriveLifeTimeKey>
 801193a:	4603      	mov	r3, r0
 801193c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011940:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011944:	2b00      	cmp	r3, #0
 8011946:	d005      	beq.n	8011954 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8011948:	e001      	b.n	801194e <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801194a:	2303      	movs	r3, #3
 801194c:	e067      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 801194e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011952:	e064      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8011954:	210c      	movs	r1, #12
 8011956:	2000      	movs	r0, #0
 8011958:	f000 f978 	bl	8011c4c <LoRaMacCryptoDeriveLifeTimeKey>
 801195c:	4603      	mov	r3, r0
 801195e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011962:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011966:	2b00      	cmp	r3, #0
 8011968:	d002      	beq.n	8011970 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 801196a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801196e:	e056      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8011970:	210a      	movs	r1, #10
 8011972:	2000      	movs	r0, #0
 8011974:	f000 f96a 	bl	8011c4c <LoRaMacCryptoDeriveLifeTimeKey>
 8011978:	4603      	mov	r3, r0
 801197a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801197e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011982:	2b00      	cmp	r3, #0
 8011984:	d002      	beq.n	801198c <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8011986:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801198a:	e048      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	7a5b      	ldrb	r3, [r3, #9]
 8011990:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	7a9b      	ldrb	r3, [r3, #10]
 8011996:	021b      	lsls	r3, r3, #8
 8011998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801199a:	4313      	orrs	r3, r2
 801199c:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	7adb      	ldrb	r3, [r3, #11]
 80119a2:	041b      	lsls	r3, r3, #16
 80119a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119a6:	4313      	orrs	r3, r2
 80119a8:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80119aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80119ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80119b2:	2009      	movs	r0, #9
 80119b4:	f7ff fcdc 	bl	8011370 <DeriveSessionKey10x>
 80119b8:	4603      	mov	r3, r0
 80119ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80119be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d002      	beq.n	80119cc <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 80119c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80119ca:	e028      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80119cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80119d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80119d4:	2008      	movs	r0, #8
 80119d6:	f7ff fccb 	bl	8011370 <DeriveSessionKey10x>
 80119da:	4603      	mov	r3, r0
 80119dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80119e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 80119e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80119ec:	e017      	b.n	8011a1e <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80119ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011a28 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	7cfa      	ldrb	r2, [r7, #19]
 80119f4:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80119f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011a28 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2200      	movs	r2, #0
 80119fc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80119fe:	4b0a      	ldr	r3, [pc, #40]	@ (8011a28 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f04f 32ff 	mov.w	r2, #4294967295
 8011a06:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011a08:	4b07      	ldr	r3, [pc, #28]	@ (8011a28 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a10:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011a12:	4b05      	ldr	r3, [pc, #20]	@ (8011a28 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f04f 32ff 	mov.w	r2, #4294967295
 8011a1a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8011a1c:	2300      	movs	r3, #0
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	374c      	adds	r7, #76	@ 0x4c
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd90      	pop	{r4, r7, pc}
 8011a26:	bf00      	nop
 8011a28:	2000121c 	.word	0x2000121c

08011a2c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8011a2c:	b590      	push	{r4, r7, lr}
 8011a2e:	b08b      	sub	sp, #44	@ 0x2c
 8011a30:	af04      	add	r7, sp, #16
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	607b      	str	r3, [r7, #4]
 8011a36:	460b      	mov	r3, r1
 8011a38:	72fb      	strb	r3, [r7, #11]
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011a3e:	2312      	movs	r3, #18
 8011a40:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8011a42:	2309      	movs	r3, #9
 8011a44:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d101      	bne.n	8011a50 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011a4c:	2309      	movs	r3, #9
 8011a4e:	e05e      	b.n	8011b0e <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8011a50:	4b31      	ldr	r3, [pc, #196]	@ (8011b18 <LoRaMacCryptoSecureMessage+0xec>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	68fa      	ldr	r2, [r7, #12]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d201      	bcs.n	8011a60 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8011a5c:	2306      	movs	r3, #6
 8011a5e:	e056      	b.n	8011b0e <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d101      	bne.n	8011a6e <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011a6a:	2308      	movs	r3, #8
 8011a6c:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8011a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8011b18 <LoRaMacCryptoSecureMessage+0xec>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	68fa      	ldr	r2, [r7, #12]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d916      	bls.n	8011aa8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a84:	b219      	sxth	r1, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	689c      	ldr	r4, [r3, #8]
 8011a8a:	7dfa      	ldrb	r2, [r7, #23]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	9301      	str	r3, [sp, #4]
 8011a90:	2300      	movs	r3, #0
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	4623      	mov	r3, r4
 8011a96:	f7ff fa79 	bl	8010f8c <PayloadEncrypt>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a9e:	7dbb      	ldrb	r3, [r7, #22]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d001      	beq.n	8011aa8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8011aa4:	7dbb      	ldrb	r3, [r7, #22]
 8011aa6:	e032      	b.n	8011b0e <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f000 fb48 	bl	801213e <LoRaMacSerializerData>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d001      	beq.n	8011ab8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011ab4:	2310      	movs	r3, #16
 8011ab6:	e02a      	b.n	8011b0e <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011ab8:	2308      	movs	r3, #8
 8011aba:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6818      	ldr	r0, [r3, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	791b      	ldrb	r3, [r3, #4]
 8011ac4:	3b04      	subs	r3, #4
 8011ac6:	b299      	uxth	r1, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	322c      	adds	r2, #44	@ 0x2c
 8011ad0:	7dfc      	ldrb	r4, [r7, #23]
 8011ad2:	9203      	str	r2, [sp, #12]
 8011ad4:	68fa      	ldr	r2, [r7, #12]
 8011ad6:	9202      	str	r2, [sp, #8]
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	2300      	movs	r3, #0
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	2300      	movs	r3, #0
 8011ae0:	4622      	mov	r2, r4
 8011ae2:	f7ff fb52 	bl	801118a <ComputeCmacB0>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011aea:	7dbb      	ldrb	r3, [r7, #22]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8011af0:	7dbb      	ldrb	r3, [r7, #22]
 8011af2:	e00c      	b.n	8011b0e <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f000 fb22 	bl	801213e <LoRaMacSerializerData>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d001      	beq.n	8011b04 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011b00:	2310      	movs	r3, #16
 8011b02:	e004      	b.n	8011b0e <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8011b04:	4b04      	ldr	r3, [pc, #16]	@ (8011b18 <LoRaMacCryptoSecureMessage+0xec>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	68fa      	ldr	r2, [r7, #12]
 8011b0a:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	371c      	adds	r7, #28
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd90      	pop	{r4, r7, pc}
 8011b16:	bf00      	nop
 8011b18:	2000121c 	.word	0x2000121c

08011b1c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8011b1c:	b590      	push	{r4, r7, lr}
 8011b1e:	b08b      	sub	sp, #44	@ 0x2c
 8011b20:	af04      	add	r7, sp, #16
 8011b22:	60b9      	str	r1, [r7, #8]
 8011b24:	607b      	str	r3, [r7, #4]
 8011b26:	4603      	mov	r3, r0
 8011b28:	73fb      	strb	r3, [r7, #15]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8011b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d101      	bne.n	8011b38 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011b34:	2309      	movs	r3, #9
 8011b36:	e083      	b.n	8011c40 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8011b38:	7bbb      	ldrb	r3, [r7, #14]
 8011b3a:	6879      	ldr	r1, [r7, #4]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7ff fca1 	bl	8011484 <CheckFCntDown>
 8011b42:	4603      	mov	r3, r0
 8011b44:	f083 0301 	eor.w	r3, r3, #1
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8011b4e:	2306      	movs	r3, #6
 8011b50:	e076      	b.n	8011c40 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011b52:	2312      	movs	r3, #18
 8011b54:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8011b56:	2309      	movs	r3, #9
 8011b58:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8011b5a:	2308      	movs	r3, #8
 8011b5c:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b60:	f000 f979 	bl	8011e56 <LoRaMacParserData>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d001      	beq.n	8011b6e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011b6a:	230f      	movs	r3, #15
 8011b6c:	e068      	b.n	8011c40 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8011b6e:	f107 0210 	add.w	r2, r7, #16
 8011b72:	7bfb      	ldrb	r3, [r7, #15]
 8011b74:	4611      	mov	r1, r2
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7ff fbd4 	bl	8011324 <GetKeyAddrItem>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011b80:	7d7b      	ldrb	r3, [r7, #21]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d001      	beq.n	8011b8a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8011b86:	7d7b      	ldrb	r3, [r7, #21]
 8011b88:	e05a      	b.n	8011c40 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	785b      	ldrb	r3, [r3, #1]
 8011b8e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	789b      	ldrb	r3, [r3, #2]
 8011b94:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8011b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b98:	689b      	ldr	r3, [r3, #8]
 8011b9a:	68ba      	ldr	r2, [r7, #8]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d001      	beq.n	8011ba4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8011ba0:	2302      	movs	r3, #2
 8011ba2:	e04d      	b.n	8011c40 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8011ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba6:	7b1b      	ldrb	r3, [r3, #12]
 8011ba8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	bf14      	ite	ne
 8011bb2:	2301      	movne	r3, #1
 8011bb4:	2300      	moveq	r3, #0
 8011bb6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8011bb8:	4b23      	ldr	r3, [pc, #140]	@ (8011c48 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	789b      	ldrb	r3, [r3, #2]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8011bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc8:	6818      	ldr	r0, [r3, #0]
 8011bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bcc:	791b      	ldrb	r3, [r3, #4]
 8011bce:	3b04      	subs	r3, #4
 8011bd0:	b299      	uxth	r1, r3
 8011bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bd6:	7dbc      	ldrb	r4, [r7, #22]
 8011bd8:	7d3a      	ldrb	r2, [r7, #20]
 8011bda:	9303      	str	r3, [sp, #12]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	9302      	str	r3, [sp, #8]
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	2301      	movs	r3, #1
 8011be6:	9300      	str	r3, [sp, #0]
 8011be8:	4623      	mov	r3, r4
 8011bea:	f7ff fb0c 	bl	8011206 <VerifyCmacB0>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011bf2:	7d7b      	ldrb	r3, [r7, #21]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8011bf8:	7d7b      	ldrb	r3, [r7, #21]
 8011bfa:	e021      	b.n	8011c40 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8011bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d101      	bne.n	8011c0a <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011c06:	2308      	movs	r3, #8
 8011c08:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8011c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c0c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c14:	b219      	sxth	r1, r3
 8011c16:	7dfa      	ldrb	r2, [r7, #23]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	9301      	str	r3, [sp, #4]
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	f7ff f9b3 	bl	8010f8c <PayloadEncrypt>
 8011c26:	4603      	mov	r3, r0
 8011c28:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011c2a:	7d7b      	ldrb	r3, [r7, #21]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d001      	beq.n	8011c34 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8011c30:	7d7b      	ldrb	r3, [r7, #21]
 8011c32:	e005      	b.n	8011c40 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8011c34:	7bbb      	ldrb	r3, [r7, #14]
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7ff fc47 	bl	80114cc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8011c3e:	2300      	movs	r3, #0
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	371c      	adds	r7, #28
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd90      	pop	{r4, r7, pc}
 8011c48:	2000121c 	.word	0x2000121c

08011c4c <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b088      	sub	sp, #32
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	4603      	mov	r3, r0
 8011c54:	460a      	mov	r2, r1
 8011c56:	71fb      	strb	r3, [r7, #7]
 8011c58:	4613      	mov	r3, r2
 8011c5a:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8011c5c:	f107 030c 	add.w	r3, r7, #12
 8011c60:	2200      	movs	r2, #0
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	605a      	str	r2, [r3, #4]
 8011c66:	609a      	str	r2, [r3, #8]
 8011c68:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8011c6e:	79bb      	ldrb	r3, [r7, #6]
 8011c70:	2b0c      	cmp	r3, #12
 8011c72:	d00b      	beq.n	8011c8c <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8011c74:	2b0c      	cmp	r3, #12
 8011c76:	dc0f      	bgt.n	8011c98 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8011c78:	2b0a      	cmp	r3, #10
 8011c7a:	d00a      	beq.n	8011c92 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8011c7c:	2b0b      	cmp	r3, #11
 8011c7e:	d10b      	bne.n	8011c98 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8011c80:	79fb      	ldrb	r3, [r7, #7]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d10a      	bne.n	8011c9c <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8011c86:	2320      	movs	r3, #32
 8011c88:	733b      	strb	r3, [r7, #12]
            }
            break;
 8011c8a:	e007      	b.n	8011c9c <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8011c8c:	230b      	movs	r3, #11
 8011c8e:	77fb      	strb	r3, [r7, #31]
            break;
 8011c90:	e005      	b.n	8011c9e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8011c92:	2330      	movs	r3, #48	@ 0x30
 8011c94:	733b      	strb	r3, [r7, #12]
            break;
 8011c96:	e002      	b.n	8011c9e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011c98:	230a      	movs	r3, #10
 8011c9a:	e00d      	b.n	8011cb8 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8011c9c:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011c9e:	79ba      	ldrb	r2, [r7, #6]
 8011ca0:	7ff9      	ldrb	r1, [r7, #31]
 8011ca2:	f107 030c 	add.w	r3, r7, #12
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f005 fc5a 	bl	8017560 <SecureElementDeriveAndStoreKey>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d001      	beq.n	8011cb6 <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011cb2:	230e      	movs	r3, #14
 8011cb4:	e000      	b.n	8011cb8 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3720      	adds	r7, #32
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d003      	beq.n	8011cd6 <LoRaMacParserJoinAccept+0x16>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d101      	bne.n	8011cda <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	e0b9      	b.n	8011e4e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	89fb      	ldrh	r3, [r7, #14]
 8011ce4:	1c59      	adds	r1, r3, #1
 8011ce6:	81f9      	strh	r1, [r7, #14]
 8011ce8:	4413      	add	r3, r2
 8011cea:	781a      	ldrb	r2, [r3, #0]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	1d98      	adds	r0, r3, #6
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681a      	ldr	r2, [r3, #0]
 8011cf8:	89fb      	ldrh	r3, [r7, #14]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	2203      	movs	r2, #3
 8011cfe:	4619      	mov	r1, r3
 8011d00:	f005 fdc5 	bl	801788e <memcpy1>
    bufItr = bufItr + 3;
 8011d04:	89fb      	ldrh	r3, [r7, #14]
 8011d06:	3303      	adds	r3, #3
 8011d08:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f103 0009 	add.w	r0, r3, #9
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	89fb      	ldrh	r3, [r7, #14]
 8011d16:	4413      	add	r3, r2
 8011d18:	2203      	movs	r2, #3
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	f005 fdb7 	bl	801788e <memcpy1>
    bufItr = bufItr + 3;
 8011d20:	89fb      	ldrh	r3, [r7, #14]
 8011d22:	3303      	adds	r3, #3
 8011d24:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681a      	ldr	r2, [r3, #0]
 8011d2a:	89fb      	ldrh	r3, [r7, #14]
 8011d2c:	1c59      	adds	r1, r3, #1
 8011d2e:	81f9      	strh	r1, [r7, #14]
 8011d30:	4413      	add	r3, r2
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	461a      	mov	r2, r3
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	89fb      	ldrh	r3, [r7, #14]
 8011d40:	1c59      	adds	r1, r3, #1
 8011d42:	81f9      	strh	r1, [r7, #14]
 8011d44:	4413      	add	r3, r2
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	021a      	lsls	r2, r3, #8
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	431a      	orrs	r2, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	89fb      	ldrh	r3, [r7, #14]
 8011d5a:	1c59      	adds	r1, r3, #1
 8011d5c:	81f9      	strh	r1, [r7, #14]
 8011d5e:	4413      	add	r3, r2
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	041a      	lsls	r2, r3, #16
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	431a      	orrs	r2, r3
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	89fb      	ldrh	r3, [r7, #14]
 8011d74:	1c59      	adds	r1, r3, #1
 8011d76:	81f9      	strh	r1, [r7, #14]
 8011d78:	4413      	add	r3, r2
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	061a      	lsls	r2, r3, #24
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	431a      	orrs	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	89fb      	ldrh	r3, [r7, #14]
 8011d8e:	1c59      	adds	r1, r3, #1
 8011d90:	81f9      	strh	r1, [r7, #14]
 8011d92:	4413      	add	r3, r2
 8011d94:	781a      	ldrb	r2, [r3, #0]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	89fb      	ldrh	r3, [r7, #14]
 8011da0:	1c59      	adds	r1, r3, #1
 8011da2:	81f9      	strh	r1, [r7, #14]
 8011da4:	4413      	add	r3, r2
 8011da6:	781a      	ldrb	r2, [r3, #0]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	791b      	ldrb	r3, [r3, #4]
 8011db0:	1f1a      	subs	r2, r3, #4
 8011db2:	89fb      	ldrh	r3, [r7, #14]
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	2b10      	cmp	r3, #16
 8011db8:	d10e      	bne.n	8011dd8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f103 0012 	add.w	r0, r3, #18
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	89fb      	ldrh	r3, [r7, #14]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	2210      	movs	r2, #16
 8011dca:	4619      	mov	r1, r3
 8011dcc:	f005 fd5f 	bl	801788e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8011dd0:	89fb      	ldrh	r3, [r7, #14]
 8011dd2:	3310      	adds	r3, #16
 8011dd4:	81fb      	strh	r3, [r7, #14]
 8011dd6:	e008      	b.n	8011dea <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	791b      	ldrb	r3, [r3, #4]
 8011ddc:	1f1a      	subs	r2, r3, #4
 8011dde:	89fb      	ldrh	r3, [r7, #14]
 8011de0:	1ad3      	subs	r3, r2, r3
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	dd01      	ble.n	8011dea <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8011de6:	2301      	movs	r3, #1
 8011de8:	e031      	b.n	8011e4e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	89fb      	ldrh	r3, [r7, #14]
 8011df0:	1c59      	adds	r1, r3, #1
 8011df2:	81f9      	strh	r1, [r7, #14]
 8011df4:	4413      	add	r3, r2
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	461a      	mov	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	89fb      	ldrh	r3, [r7, #14]
 8011e04:	1c59      	adds	r1, r3, #1
 8011e06:	81f9      	strh	r1, [r7, #14]
 8011e08:	4413      	add	r3, r2
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	021a      	lsls	r2, r3, #8
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e12:	431a      	orrs	r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	89fb      	ldrh	r3, [r7, #14]
 8011e1e:	1c59      	adds	r1, r3, #1
 8011e20:	81f9      	strh	r1, [r7, #14]
 8011e22:	4413      	add	r3, r2
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	041a      	lsls	r2, r3, #16
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e2c:	431a      	orrs	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	89fb      	ldrh	r3, [r7, #14]
 8011e38:	1c59      	adds	r1, r3, #1
 8011e3a:	81f9      	strh	r1, [r7, #14]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	061a      	lsls	r2, r3, #24
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e46:	431a      	orrs	r2, r3
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8011e4c:	2300      	movs	r3, #0
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b084      	sub	sp, #16
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d003      	beq.n	8011e6c <LoRaMacParserData+0x16>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d101      	bne.n	8011e70 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011e6c:	2302      	movs	r3, #2
 8011e6e:	e0e0      	b.n	8012032 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	89fb      	ldrh	r3, [r7, #14]
 8011e7a:	1c59      	adds	r1, r3, #1
 8011e7c:	81f9      	strh	r1, [r7, #14]
 8011e7e:	4413      	add	r3, r2
 8011e80:	781a      	ldrb	r2, [r3, #0]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	89fb      	ldrh	r3, [r7, #14]
 8011e8c:	1c59      	adds	r1, r3, #1
 8011e8e:	81f9      	strh	r1, [r7, #14]
 8011e90:	4413      	add	r3, r2
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	461a      	mov	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	89fb      	ldrh	r3, [r7, #14]
 8011ea0:	1c59      	adds	r1, r3, #1
 8011ea2:	81f9      	strh	r1, [r7, #14]
 8011ea4:	4413      	add	r3, r2
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	021a      	lsls	r2, r3, #8
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	431a      	orrs	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681a      	ldr	r2, [r3, #0]
 8011eb8:	89fb      	ldrh	r3, [r7, #14]
 8011eba:	1c59      	adds	r1, r3, #1
 8011ebc:	81f9      	strh	r1, [r7, #14]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	041a      	lsls	r2, r3, #16
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	431a      	orrs	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	89fb      	ldrh	r3, [r7, #14]
 8011ed4:	1c59      	adds	r1, r3, #1
 8011ed6:	81f9      	strh	r1, [r7, #14]
 8011ed8:	4413      	add	r3, r2
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	061a      	lsls	r2, r3, #24
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	431a      	orrs	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	89fb      	ldrh	r3, [r7, #14]
 8011eee:	1c59      	adds	r1, r3, #1
 8011ef0:	81f9      	strh	r1, [r7, #14]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	781a      	ldrb	r2, [r3, #0]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681a      	ldr	r2, [r3, #0]
 8011efe:	89fb      	ldrh	r3, [r7, #14]
 8011f00:	1c59      	adds	r1, r3, #1
 8011f02:	81f9      	strh	r1, [r7, #14]
 8011f04:	4413      	add	r3, r2
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	461a      	mov	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	89fb      	ldrh	r3, [r7, #14]
 8011f14:	1c59      	adds	r1, r3, #1
 8011f16:	81f9      	strh	r1, [r7, #14]
 8011f18:	4413      	add	r3, r2
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	0219      	lsls	r1, r3, #8
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	89db      	ldrh	r3, [r3, #14]
 8011f22:	b21a      	sxth	r2, r3
 8011f24:	b20b      	sxth	r3, r1
 8011f26:	4313      	orrs	r3, r2
 8011f28:	b21b      	sxth	r3, r3
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f103 0010 	add.w	r0, r3, #16
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681a      	ldr	r2, [r3, #0]
 8011f3a:	89fb      	ldrh	r3, [r7, #14]
 8011f3c:	18d1      	adds	r1, r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	7b1b      	ldrb	r3, [r3, #12]
 8011f42:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	461a      	mov	r2, r3
 8011f4a:	f005 fca0 	bl	801788e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	7b1b      	ldrb	r3, [r3, #12]
 8011f52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	461a      	mov	r2, r3
 8011f5a:	89fb      	ldrh	r3, [r7, #14]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	791b      	ldrb	r3, [r3, #4]
 8011f74:	461a      	mov	r2, r3
 8011f76:	89fb      	ldrh	r3, [r7, #14]
 8011f78:	1ad3      	subs	r3, r2, r3
 8011f7a:	2b04      	cmp	r3, #4
 8011f7c:	dd27      	ble.n	8011fce <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	89fb      	ldrh	r3, [r7, #14]
 8011f84:	1c59      	adds	r1, r3, #1
 8011f86:	81f9      	strh	r1, [r7, #14]
 8011f88:	4413      	add	r3, r2
 8011f8a:	781a      	ldrb	r2, [r3, #0]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	791a      	ldrb	r2, [r3, #4]
 8011f96:	89fb      	ldrh	r3, [r7, #14]
 8011f98:	b2db      	uxtb	r3, r3
 8011f9a:	1ad3      	subs	r3, r2, r3
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	3b04      	subs	r3, #4
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	89fb      	ldrh	r3, [r7, #14]
 8011fb2:	18d1      	adds	r1, r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fba:	461a      	mov	r2, r3
 8011fbc:	f005 fc67 	bl	801788e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	89fb      	ldrh	r3, [r7, #14]
 8011fca:	4413      	add	r3, r2
 8011fcc:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	791b      	ldrb	r3, [r3, #4]
 8011fd6:	3b04      	subs	r3, #4
 8011fd8:	4413      	add	r3, r2
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	461a      	mov	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6819      	ldr	r1, [r3, #0]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	791b      	ldrb	r3, [r3, #4]
 8011fee:	3b03      	subs	r3, #3
 8011ff0:	440b      	add	r3, r1
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	021b      	lsls	r3, r3, #8
 8011ff6:	431a      	orrs	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6819      	ldr	r1, [r3, #0]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	791b      	ldrb	r3, [r3, #4]
 8012008:	3b02      	subs	r3, #2
 801200a:	440b      	add	r3, r1
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	041b      	lsls	r3, r3, #16
 8012010:	431a      	orrs	r2, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6819      	ldr	r1, [r3, #0]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	791b      	ldrb	r3, [r3, #4]
 8012022:	3b01      	subs	r3, #1
 8012024:	440b      	add	r3, r1
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	061b      	lsls	r3, r3, #24
 801202a:	431a      	orrs	r2, r3
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012030:	2300      	movs	r3, #0
}
 8012032:	4618      	mov	r0, r3
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}

0801203a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801203a:	b580      	push	{r7, lr}
 801203c:	b084      	sub	sp, #16
 801203e:	af00      	add	r7, sp, #0
 8012040:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d003      	beq.n	8012050 <LoRaMacSerializerJoinRequest+0x16>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d101      	bne.n	8012054 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012050:	2301      	movs	r3, #1
 8012052:	e070      	b.n	8012136 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8012054:	2300      	movs	r3, #0
 8012056:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	791b      	ldrb	r3, [r3, #4]
 801205c:	2b16      	cmp	r3, #22
 801205e:	d801      	bhi.n	8012064 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012060:	2302      	movs	r3, #2
 8012062:	e068      	b.n	8012136 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	89fb      	ldrh	r3, [r7, #14]
 801206a:	1c59      	adds	r1, r3, #1
 801206c:	81f9      	strh	r1, [r7, #14]
 801206e:	4413      	add	r3, r2
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	7952      	ldrb	r2, [r2, #5]
 8012074:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	89fb      	ldrh	r3, [r7, #14]
 801207c:	18d0      	adds	r0, r2, r3
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3306      	adds	r3, #6
 8012082:	2208      	movs	r2, #8
 8012084:	4619      	mov	r1, r3
 8012086:	f005 fc1d 	bl	80178c4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801208a:	89fb      	ldrh	r3, [r7, #14]
 801208c:	3308      	adds	r3, #8
 801208e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	89fb      	ldrh	r3, [r7, #14]
 8012096:	18d0      	adds	r0, r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	330e      	adds	r3, #14
 801209c:	2208      	movs	r2, #8
 801209e:	4619      	mov	r1, r3
 80120a0:	f005 fc10 	bl	80178c4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80120a4:	89fb      	ldrh	r3, [r7, #14]
 80120a6:	3308      	adds	r3, #8
 80120a8:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	8ad9      	ldrh	r1, [r3, #22]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	89fb      	ldrh	r3, [r7, #14]
 80120b4:	1c58      	adds	r0, r3, #1
 80120b6:	81f8      	strh	r0, [r7, #14]
 80120b8:	4413      	add	r3, r2
 80120ba:	b2ca      	uxtb	r2, r1
 80120bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	8adb      	ldrh	r3, [r3, #22]
 80120c2:	0a1b      	lsrs	r3, r3, #8
 80120c4:	b299      	uxth	r1, r3
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	89fb      	ldrh	r3, [r7, #14]
 80120cc:	1c58      	adds	r0, r3, #1
 80120ce:	81f8      	strh	r0, [r7, #14]
 80120d0:	4413      	add	r3, r2
 80120d2:	b2ca      	uxtb	r2, r1
 80120d4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6999      	ldr	r1, [r3, #24]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	89fb      	ldrh	r3, [r7, #14]
 80120e0:	1c58      	adds	r0, r3, #1
 80120e2:	81f8      	strh	r0, [r7, #14]
 80120e4:	4413      	add	r3, r2
 80120e6:	b2ca      	uxtb	r2, r1
 80120e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	699b      	ldr	r3, [r3, #24]
 80120ee:	0a19      	lsrs	r1, r3, #8
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	89fb      	ldrh	r3, [r7, #14]
 80120f6:	1c58      	adds	r0, r3, #1
 80120f8:	81f8      	strh	r0, [r7, #14]
 80120fa:	4413      	add	r3, r2
 80120fc:	b2ca      	uxtb	r2, r1
 80120fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	699b      	ldr	r3, [r3, #24]
 8012104:	0c19      	lsrs	r1, r3, #16
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	89fb      	ldrh	r3, [r7, #14]
 801210c:	1c58      	adds	r0, r3, #1
 801210e:	81f8      	strh	r0, [r7, #14]
 8012110:	4413      	add	r3, r2
 8012112:	b2ca      	uxtb	r2, r1
 8012114:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	699b      	ldr	r3, [r3, #24]
 801211a:	0e19      	lsrs	r1, r3, #24
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	89fb      	ldrh	r3, [r7, #14]
 8012122:	1c58      	adds	r0, r3, #1
 8012124:	81f8      	strh	r0, [r7, #14]
 8012126:	4413      	add	r3, r2
 8012128:	b2ca      	uxtb	r2, r1
 801212a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801212c:	89fb      	ldrh	r3, [r7, #14]
 801212e:	b2da      	uxtb	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012134:	2300      	movs	r3, #0
}
 8012136:	4618      	mov	r0, r3
 8012138:	3710      	adds	r7, #16
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801213e:	b580      	push	{r7, lr}
 8012140:	b084      	sub	sp, #16
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d003      	beq.n	8012154 <LoRaMacSerializerData+0x16>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d101      	bne.n	8012158 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012154:	2301      	movs	r3, #1
 8012156:	e0e3      	b.n	8012320 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8012158:	2300      	movs	r3, #0
 801215a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801215c:	2308      	movs	r3, #8
 801215e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	7b1b      	ldrb	r3, [r3, #12]
 8012164:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012168:	b2db      	uxtb	r3, r3
 801216a:	461a      	mov	r2, r3
 801216c:	89bb      	ldrh	r3, [r7, #12]
 801216e:	4413      	add	r3, r2
 8012170:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012178:	2b00      	cmp	r3, #0
 801217a:	d002      	beq.n	8012182 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801217c:	89bb      	ldrh	r3, [r7, #12]
 801217e:	3301      	adds	r3, #1
 8012180:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012188:	461a      	mov	r2, r3
 801218a:	89bb      	ldrh	r3, [r7, #12]
 801218c:	4413      	add	r3, r2
 801218e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8012190:	89bb      	ldrh	r3, [r7, #12]
 8012192:	3304      	adds	r3, #4
 8012194:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	791b      	ldrb	r3, [r3, #4]
 801219a:	461a      	mov	r2, r3
 801219c:	89bb      	ldrh	r3, [r7, #12]
 801219e:	4293      	cmp	r3, r2
 80121a0:	d901      	bls.n	80121a6 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80121a2:	2302      	movs	r3, #2
 80121a4:	e0bc      	b.n	8012320 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681a      	ldr	r2, [r3, #0]
 80121aa:	89fb      	ldrh	r3, [r7, #14]
 80121ac:	1c59      	adds	r1, r3, #1
 80121ae:	81f9      	strh	r1, [r7, #14]
 80121b0:	4413      	add	r3, r2
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	7952      	ldrb	r2, [r2, #5]
 80121b6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6899      	ldr	r1, [r3, #8]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	89fb      	ldrh	r3, [r7, #14]
 80121c2:	1c58      	adds	r0, r3, #1
 80121c4:	81f8      	strh	r0, [r7, #14]
 80121c6:	4413      	add	r3, r2
 80121c8:	b2ca      	uxtb	r2, r1
 80121ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	0a19      	lsrs	r1, r3, #8
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	89fb      	ldrh	r3, [r7, #14]
 80121d8:	1c58      	adds	r0, r3, #1
 80121da:	81f8      	strh	r0, [r7, #14]
 80121dc:	4413      	add	r3, r2
 80121de:	b2ca      	uxtb	r2, r1
 80121e0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	0c19      	lsrs	r1, r3, #16
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	89fb      	ldrh	r3, [r7, #14]
 80121ee:	1c58      	adds	r0, r3, #1
 80121f0:	81f8      	strh	r0, [r7, #14]
 80121f2:	4413      	add	r3, r2
 80121f4:	b2ca      	uxtb	r2, r1
 80121f6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	689b      	ldr	r3, [r3, #8]
 80121fc:	0e19      	lsrs	r1, r3, #24
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	89fb      	ldrh	r3, [r7, #14]
 8012204:	1c58      	adds	r0, r3, #1
 8012206:	81f8      	strh	r0, [r7, #14]
 8012208:	4413      	add	r3, r2
 801220a:	b2ca      	uxtb	r2, r1
 801220c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	89fb      	ldrh	r3, [r7, #14]
 8012214:	1c59      	adds	r1, r3, #1
 8012216:	81f9      	strh	r1, [r7, #14]
 8012218:	4413      	add	r3, r2
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	7b12      	ldrb	r2, [r2, #12]
 801221e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	89d9      	ldrh	r1, [r3, #14]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	89fb      	ldrh	r3, [r7, #14]
 801222a:	1c58      	adds	r0, r3, #1
 801222c:	81f8      	strh	r0, [r7, #14]
 801222e:	4413      	add	r3, r2
 8012230:	b2ca      	uxtb	r2, r1
 8012232:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	89db      	ldrh	r3, [r3, #14]
 8012238:	0a1b      	lsrs	r3, r3, #8
 801223a:	b299      	uxth	r1, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	89fb      	ldrh	r3, [r7, #14]
 8012242:	1c58      	adds	r0, r3, #1
 8012244:	81f8      	strh	r0, [r7, #14]
 8012246:	4413      	add	r3, r2
 8012248:	b2ca      	uxtb	r2, r1
 801224a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	89fb      	ldrh	r3, [r7, #14]
 8012252:	18d0      	adds	r0, r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f103 0110 	add.w	r1, r3, #16
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	7b1b      	ldrb	r3, [r3, #12]
 801225e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012262:	b2db      	uxtb	r3, r3
 8012264:	461a      	mov	r2, r3
 8012266:	f005 fb12 	bl	801788e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	7b1b      	ldrb	r3, [r3, #12]
 801226e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012272:	b2db      	uxtb	r3, r3
 8012274:	461a      	mov	r2, r3
 8012276:	89fb      	ldrh	r3, [r7, #14]
 8012278:	4413      	add	r3, r2
 801227a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012282:	2b00      	cmp	r3, #0
 8012284:	d009      	beq.n	801229a <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	89fb      	ldrh	r3, [r7, #14]
 801228c:	1c59      	adds	r1, r3, #1
 801228e:	81f9      	strh	r1, [r7, #14]
 8012290:	4413      	add	r3, r2
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	f892 2020 	ldrb.w	r2, [r2, #32]
 8012298:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	89fb      	ldrh	r3, [r7, #14]
 80122a0:	18d0      	adds	r0, r2, r3
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122ac:	461a      	mov	r2, r3
 80122ae:	f005 faee 	bl	801788e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122b8:	461a      	mov	r2, r3
 80122ba:	89fb      	ldrh	r3, [r7, #14]
 80122bc:	4413      	add	r3, r2
 80122be:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	89fb      	ldrh	r3, [r7, #14]
 80122ca:	1c58      	adds	r0, r3, #1
 80122cc:	81f8      	strh	r0, [r7, #14]
 80122ce:	4413      	add	r3, r2
 80122d0:	b2ca      	uxtb	r2, r1
 80122d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122d8:	0a19      	lsrs	r1, r3, #8
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	89fb      	ldrh	r3, [r7, #14]
 80122e0:	1c58      	adds	r0, r3, #1
 80122e2:	81f8      	strh	r0, [r7, #14]
 80122e4:	4413      	add	r3, r2
 80122e6:	b2ca      	uxtb	r2, r1
 80122e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122ee:	0c19      	lsrs	r1, r3, #16
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	89fb      	ldrh	r3, [r7, #14]
 80122f6:	1c58      	adds	r0, r3, #1
 80122f8:	81f8      	strh	r0, [r7, #14]
 80122fa:	4413      	add	r3, r2
 80122fc:	b2ca      	uxtb	r2, r1
 80122fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012304:	0e19      	lsrs	r1, r3, #24
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	89fb      	ldrh	r3, [r7, #14]
 801230c:	1c58      	adds	r0, r3, #1
 801230e:	81f8      	strh	r0, [r7, #14]
 8012310:	4413      	add	r3, r2
 8012312:	b2ca      	uxtb	r2, r1
 8012314:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012316:	89fb      	ldrh	r3, [r7, #14]
 8012318:	b2da      	uxtb	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801231e:	2300      	movs	r3, #0
}
 8012320:	4618      	mov	r0, r3
 8012322:	3710      	adds	r7, #16
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	4603      	mov	r3, r0
 8012330:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012332:	79fb      	ldrb	r3, [r7, #7]
 8012334:	2b05      	cmp	r3, #5
 8012336:	d002      	beq.n	801233e <RegionIsActive+0x16>
 8012338:	2b08      	cmp	r3, #8
 801233a:	d002      	beq.n	8012342 <RegionIsActive+0x1a>
 801233c:	e003      	b.n	8012346 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 801233e:	2301      	movs	r3, #1
 8012340:	e002      	b.n	8012348 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8012342:	2301      	movs	r3, #1
 8012344:	e000      	b.n	8012348 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012346:	2300      	movs	r3, #0
        }
    }
}
 8012348:	4618      	mov	r0, r3
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	bc80      	pop	{r7}
 8012350:	4770      	bx	lr

08012352 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012352:	b580      	push	{r7, lr}
 8012354:	b084      	sub	sp, #16
 8012356:	af00      	add	r7, sp, #0
 8012358:	4603      	mov	r3, r0
 801235a:	6039      	str	r1, [r7, #0]
 801235c:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801235e:	2300      	movs	r3, #0
 8012360:	60bb      	str	r3, [r7, #8]
    switch( region )
 8012362:	79fb      	ldrb	r3, [r7, #7]
 8012364:	2b05      	cmp	r3, #5
 8012366:	d002      	beq.n	801236e <RegionGetPhyParam+0x1c>
 8012368:	2b08      	cmp	r3, #8
 801236a:	d006      	beq.n	801237a <RegionGetPhyParam+0x28>
 801236c:	e00b      	b.n	8012386 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801236e:	6838      	ldr	r0, [r7, #0]
 8012370:	f001 fad0 	bl	8013914 <RegionEU868GetPhyParam>
 8012374:	4603      	mov	r3, r0
 8012376:	60fb      	str	r3, [r7, #12]
 8012378:	e007      	b.n	801238a <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801237a:	6838      	ldr	r0, [r7, #0]
 801237c:	f002 fc50 	bl	8014c20 <RegionUS915GetPhyParam>
 8012380:	4603      	mov	r3, r0
 8012382:	60fb      	str	r3, [r7, #12]
 8012384:	e001      	b.n	801238a <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	4618      	mov	r0, r3
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	4603      	mov	r3, r0
 801239c:	6039      	str	r1, [r7, #0]
 801239e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80123a0:	79fb      	ldrb	r3, [r7, #7]
 80123a2:	2b05      	cmp	r3, #5
 80123a4:	d002      	beq.n	80123ac <RegionSetBandTxDone+0x18>
 80123a6:	2b08      	cmp	r3, #8
 80123a8:	d004      	beq.n	80123b4 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80123aa:	e006      	b.n	80123ba <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 80123ac:	6838      	ldr	r0, [r7, #0]
 80123ae:	f001 fbf7 	bl	8013ba0 <RegionEU868SetBandTxDone>
 80123b2:	e002      	b.n	80123ba <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 80123b4:	6838      	ldr	r0, [r7, #0]
 80123b6:	f002 fd8f 	bl	8014ed8 <RegionUS915SetBandTxDone>
        }
    }
}
 80123ba:	3708      	adds	r7, #8
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	4603      	mov	r3, r0
 80123c8:	6039      	str	r1, [r7, #0]
 80123ca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80123cc:	79fb      	ldrb	r3, [r7, #7]
 80123ce:	2b05      	cmp	r3, #5
 80123d0:	d002      	beq.n	80123d8 <RegionInitDefaults+0x18>
 80123d2:	2b08      	cmp	r3, #8
 80123d4:	d004      	beq.n	80123e0 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80123d6:	e006      	b.n	80123e6 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 80123d8:	6838      	ldr	r0, [r7, #0]
 80123da:	f001 fc0d 	bl	8013bf8 <RegionEU868InitDefaults>
 80123de:	e002      	b.n	80123e6 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80123e0:	6838      	ldr	r0, [r7, #0]
 80123e2:	f002 fda5 	bl	8014f30 <RegionUS915InitDefaults>
        }
    }
}
 80123e6:	bf00      	nop
 80123e8:	3708      	adds	r7, #8
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b082      	sub	sp, #8
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	4603      	mov	r3, r0
 80123f6:	6039      	str	r1, [r7, #0]
 80123f8:	71fb      	strb	r3, [r7, #7]
 80123fa:	4613      	mov	r3, r2
 80123fc:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80123fe:	79fb      	ldrb	r3, [r7, #7]
 8012400:	2b05      	cmp	r3, #5
 8012402:	d002      	beq.n	801240a <RegionVerify+0x1c>
 8012404:	2b08      	cmp	r3, #8
 8012406:	d007      	beq.n	8012418 <RegionVerify+0x2a>
 8012408:	e00d      	b.n	8012426 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801240a:	79bb      	ldrb	r3, [r7, #6]
 801240c:	4619      	mov	r1, r3
 801240e:	6838      	ldr	r0, [r7, #0]
 8012410:	f001 fc90 	bl	8013d34 <RegionEU868Verify>
 8012414:	4603      	mov	r3, r0
 8012416:	e007      	b.n	8012428 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8012418:	79bb      	ldrb	r3, [r7, #6]
 801241a:	4619      	mov	r1, r3
 801241c:	6838      	ldr	r0, [r7, #0]
 801241e:	f002 feb9 	bl	8015194 <RegionUS915Verify>
 8012422:	4603      	mov	r3, r0
 8012424:	e000      	b.n	8012428 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8012426:	2300      	movs	r3, #0
        }
    }
}
 8012428:	4618      	mov	r0, r3
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	4603      	mov	r3, r0
 8012438:	6039      	str	r1, [r7, #0]
 801243a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801243c:	79fb      	ldrb	r3, [r7, #7]
 801243e:	2b05      	cmp	r3, #5
 8012440:	d002      	beq.n	8012448 <RegionApplyCFList+0x18>
 8012442:	2b08      	cmp	r3, #8
 8012444:	d004      	beq.n	8012450 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8012446:	e006      	b.n	8012456 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8012448:	6838      	ldr	r0, [r7, #0]
 801244a:	f001 fcef 	bl	8013e2c <RegionEU868ApplyCFList>
 801244e:	e002      	b.n	8012456 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8012450:	6838      	ldr	r0, [r7, #0]
 8012452:	f002 ff15 	bl	8015280 <RegionUS915ApplyCFList>
        }
    }
}
 8012456:	bf00      	nop
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	4603      	mov	r3, r0
 8012466:	6039      	str	r1, [r7, #0]
 8012468:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801246a:	79fb      	ldrb	r3, [r7, #7]
 801246c:	2b05      	cmp	r3, #5
 801246e:	d002      	beq.n	8012476 <RegionChanMaskSet+0x18>
 8012470:	2b08      	cmp	r3, #8
 8012472:	d005      	beq.n	8012480 <RegionChanMaskSet+0x22>
 8012474:	e009      	b.n	801248a <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8012476:	6838      	ldr	r0, [r7, #0]
 8012478:	f001 fd4c 	bl	8013f14 <RegionEU868ChanMaskSet>
 801247c:	4603      	mov	r3, r0
 801247e:	e005      	b.n	801248c <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8012480:	6838      	ldr	r0, [r7, #0]
 8012482:	f002 ff6f 	bl	8015364 <RegionUS915ChanMaskSet>
 8012486:	4603      	mov	r3, r0
 8012488:	e000      	b.n	801248c <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801248a:	2300      	movs	r3, #0
        }
    }
}
 801248c:	4618      	mov	r0, r3
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	603b      	str	r3, [r7, #0]
 801249c:	4603      	mov	r3, r0
 801249e:	71fb      	strb	r3, [r7, #7]
 80124a0:	460b      	mov	r3, r1
 80124a2:	71bb      	strb	r3, [r7, #6]
 80124a4:	4613      	mov	r3, r2
 80124a6:	717b      	strb	r3, [r7, #5]
    switch( region )
 80124a8:	79fb      	ldrb	r3, [r7, #7]
 80124aa:	2b05      	cmp	r3, #5
 80124ac:	d002      	beq.n	80124b4 <RegionComputeRxWindowParameters+0x20>
 80124ae:	2b08      	cmp	r3, #8
 80124b0:	d008      	beq.n	80124c4 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80124b2:	e00e      	b.n	80124d2 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80124b4:	7979      	ldrb	r1, [r7, #5]
 80124b6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	683a      	ldr	r2, [r7, #0]
 80124be:	f001 fd53 	bl	8013f68 <RegionEU868ComputeRxWindowParameters>
 80124c2:	e006      	b.n	80124d2 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80124c4:	7979      	ldrb	r1, [r7, #5]
 80124c6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	f002 ffb1 	bl	8015434 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 80124d2:	bf00      	nop
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80124da:	b580      	push	{r7, lr}
 80124dc:	b084      	sub	sp, #16
 80124de:	af00      	add	r7, sp, #0
 80124e0:	4603      	mov	r3, r0
 80124e2:	60b9      	str	r1, [r7, #8]
 80124e4:	607a      	str	r2, [r7, #4]
 80124e6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80124e8:	7bfb      	ldrb	r3, [r7, #15]
 80124ea:	2b05      	cmp	r3, #5
 80124ec:	d002      	beq.n	80124f4 <RegionRxConfig+0x1a>
 80124ee:	2b08      	cmp	r3, #8
 80124f0:	d006      	beq.n	8012500 <RegionRxConfig+0x26>
 80124f2:	e00b      	b.n	801250c <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80124f4:	6879      	ldr	r1, [r7, #4]
 80124f6:	68b8      	ldr	r0, [r7, #8]
 80124f8:	f001 fd90 	bl	801401c <RegionEU868RxConfig>
 80124fc:	4603      	mov	r3, r0
 80124fe:	e006      	b.n	801250e <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8012500:	6879      	ldr	r1, [r7, #4]
 8012502:	68b8      	ldr	r0, [r7, #8]
 8012504:	f002 ffe0 	bl	80154c8 <RegionUS915RxConfig>
 8012508:	4603      	mov	r3, r0
 801250a:	e000      	b.n	801250e <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801250c:	2300      	movs	r3, #0
        }
    }
}
 801250e:	4618      	mov	r0, r3
 8012510:	3710      	adds	r7, #16
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}

08012516 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012516:	b580      	push	{r7, lr}
 8012518:	b084      	sub	sp, #16
 801251a:	af00      	add	r7, sp, #0
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	603b      	str	r3, [r7, #0]
 8012522:	4603      	mov	r3, r0
 8012524:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8012526:	7bfb      	ldrb	r3, [r7, #15]
 8012528:	2b05      	cmp	r3, #5
 801252a:	d002      	beq.n	8012532 <RegionTxConfig+0x1c>
 801252c:	2b08      	cmp	r3, #8
 801252e:	d007      	beq.n	8012540 <RegionTxConfig+0x2a>
 8012530:	e00d      	b.n	801254e <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8012532:	683a      	ldr	r2, [r7, #0]
 8012534:	6879      	ldr	r1, [r7, #4]
 8012536:	68b8      	ldr	r0, [r7, #8]
 8012538:	f001 fe40 	bl	80141bc <RegionEU868TxConfig>
 801253c:	4603      	mov	r3, r0
 801253e:	e007      	b.n	8012550 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8012540:	683a      	ldr	r2, [r7, #0]
 8012542:	6879      	ldr	r1, [r7, #4]
 8012544:	68b8      	ldr	r0, [r7, #8]
 8012546:	f003 f843 	bl	80155d0 <RegionUS915TxConfig>
 801254a:	4603      	mov	r3, r0
 801254c:	e000      	b.n	8012550 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801254e:	2300      	movs	r3, #0
        }
    }
}
 8012550:	4618      	mov	r0, r3
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	af02      	add	r7, sp, #8
 801255e:	60b9      	str	r1, [r7, #8]
 8012560:	607a      	str	r2, [r7, #4]
 8012562:	603b      	str	r3, [r7, #0]
 8012564:	4603      	mov	r3, r0
 8012566:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8012568:	7bfb      	ldrb	r3, [r7, #15]
 801256a:	2b05      	cmp	r3, #5
 801256c:	d002      	beq.n	8012574 <RegionLinkAdrReq+0x1c>
 801256e:	2b08      	cmp	r3, #8
 8012570:	d00a      	beq.n	8012588 <RegionLinkAdrReq+0x30>
 8012572:	e013      	b.n	801259c <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	6879      	ldr	r1, [r7, #4]
 801257e:	68b8      	ldr	r0, [r7, #8]
 8012580:	f001 feec 	bl	801435c <RegionEU868LinkAdrReq>
 8012584:	4603      	mov	r3, r0
 8012586:	e00a      	b.n	801259e <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	683a      	ldr	r2, [r7, #0]
 8012590:	6879      	ldr	r1, [r7, #4]
 8012592:	68b8      	ldr	r0, [r7, #8]
 8012594:	f003 f8c6 	bl	8015724 <RegionUS915LinkAdrReq>
 8012598:	4603      	mov	r3, r0
 801259a:	e000      	b.n	801259e <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801259c:	2300      	movs	r3, #0
        }
    }
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	4603      	mov	r3, r0
 80125ae:	6039      	str	r1, [r7, #0]
 80125b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80125b2:	79fb      	ldrb	r3, [r7, #7]
 80125b4:	2b05      	cmp	r3, #5
 80125b6:	d002      	beq.n	80125be <RegionRxParamSetupReq+0x18>
 80125b8:	2b08      	cmp	r3, #8
 80125ba:	d005      	beq.n	80125c8 <RegionRxParamSetupReq+0x22>
 80125bc:	e009      	b.n	80125d2 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80125be:	6838      	ldr	r0, [r7, #0]
 80125c0:	f001 ffee 	bl	80145a0 <RegionEU868RxParamSetupReq>
 80125c4:	4603      	mov	r3, r0
 80125c6:	e005      	b.n	80125d4 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80125c8:	6838      	ldr	r0, [r7, #0]
 80125ca:	f003 fac5 	bl	8015b58 <RegionUS915RxParamSetupReq>
 80125ce:	4603      	mov	r3, r0
 80125d0:	e000      	b.n	80125d4 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80125d2:	2300      	movs	r3, #0
        }
    }
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	4603      	mov	r3, r0
 80125e4:	6039      	str	r1, [r7, #0]
 80125e6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80125e8:	79fb      	ldrb	r3, [r7, #7]
 80125ea:	2b05      	cmp	r3, #5
 80125ec:	d002      	beq.n	80125f4 <RegionNewChannelReq+0x18>
 80125ee:	2b08      	cmp	r3, #8
 80125f0:	d005      	beq.n	80125fe <RegionNewChannelReq+0x22>
 80125f2:	e009      	b.n	8012608 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80125f4:	6838      	ldr	r0, [r7, #0]
 80125f6:	f002 f811 	bl	801461c <RegionEU868NewChannelReq>
 80125fa:	4603      	mov	r3, r0
 80125fc:	e005      	b.n	801260a <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80125fe:	6838      	ldr	r0, [r7, #0]
 8012600:	f003 faf6 	bl	8015bf0 <RegionUS915NewChannelReq>
 8012604:	4603      	mov	r3, r0
 8012606:	e000      	b.n	801260a <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012608:	2300      	movs	r3, #0
        }
    }
}
 801260a:	4618      	mov	r0, r3
 801260c:	3708      	adds	r7, #8
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b082      	sub	sp, #8
 8012616:	af00      	add	r7, sp, #0
 8012618:	4603      	mov	r3, r0
 801261a:	6039      	str	r1, [r7, #0]
 801261c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801261e:	79fb      	ldrb	r3, [r7, #7]
 8012620:	2b05      	cmp	r3, #5
 8012622:	d002      	beq.n	801262a <RegionTxParamSetupReq+0x18>
 8012624:	2b08      	cmp	r3, #8
 8012626:	d005      	beq.n	8012634 <RegionTxParamSetupReq+0x22>
 8012628:	e009      	b.n	801263e <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801262a:	6838      	ldr	r0, [r7, #0]
 801262c:	f002 f854 	bl	80146d8 <RegionEU868TxParamSetupReq>
 8012630:	4603      	mov	r3, r0
 8012632:	e005      	b.n	8012640 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8012634:	6838      	ldr	r0, [r7, #0]
 8012636:	f003 fae6 	bl	8015c06 <RegionUS915TxParamSetupReq>
 801263a:	4603      	mov	r3, r0
 801263c:	e000      	b.n	8012640 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801263e:	2300      	movs	r3, #0
        }
    }
}
 8012640:	4618      	mov	r0, r3
 8012642:	3708      	adds	r7, #8
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	4603      	mov	r3, r0
 8012650:	6039      	str	r1, [r7, #0]
 8012652:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012654:	79fb      	ldrb	r3, [r7, #7]
 8012656:	2b05      	cmp	r3, #5
 8012658:	d002      	beq.n	8012660 <RegionDlChannelReq+0x18>
 801265a:	2b08      	cmp	r3, #8
 801265c:	d005      	beq.n	801266a <RegionDlChannelReq+0x22>
 801265e:	e009      	b.n	8012674 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8012660:	6838      	ldr	r0, [r7, #0]
 8012662:	f002 f845 	bl	80146f0 <RegionEU868DlChannelReq>
 8012666:	4603      	mov	r3, r0
 8012668:	e005      	b.n	8012676 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801266a:	6838      	ldr	r0, [r7, #0]
 801266c:	f003 fad6 	bl	8015c1c <RegionUS915DlChannelReq>
 8012670:	4603      	mov	r3, r0
 8012672:	e000      	b.n	8012676 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012674:	2300      	movs	r3, #0
        }
    }
}
 8012676:	4618      	mov	r0, r3
 8012678:	3708      	adds	r7, #8
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801267e:	b580      	push	{r7, lr}
 8012680:	b082      	sub	sp, #8
 8012682:	af00      	add	r7, sp, #0
 8012684:	4603      	mov	r3, r0
 8012686:	71fb      	strb	r3, [r7, #7]
 8012688:	460b      	mov	r3, r1
 801268a:	71bb      	strb	r3, [r7, #6]
 801268c:	4613      	mov	r3, r2
 801268e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8012690:	79fb      	ldrb	r3, [r7, #7]
 8012692:	2b05      	cmp	r3, #5
 8012694:	d002      	beq.n	801269c <RegionAlternateDr+0x1e>
 8012696:	2b08      	cmp	r3, #8
 8012698:	d009      	beq.n	80126ae <RegionAlternateDr+0x30>
 801269a:	e011      	b.n	80126c0 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801269c:	797a      	ldrb	r2, [r7, #5]
 801269e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80126a2:	4611      	mov	r1, r2
 80126a4:	4618      	mov	r0, r3
 80126a6:	f002 f86d 	bl	8014784 <RegionEU868AlternateDr>
 80126aa:	4603      	mov	r3, r0
 80126ac:	e009      	b.n	80126c2 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 80126ae:	797a      	ldrb	r2, [r7, #5]
 80126b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80126b4:	4611      	mov	r1, r2
 80126b6:	4618      	mov	r0, r3
 80126b8:	f003 fabc 	bl	8015c34 <RegionUS915AlternateDr>
 80126bc:	4603      	mov	r3, r0
 80126be:	e000      	b.n	80126c2 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80126c0:	2300      	movs	r3, #0
        }
    }
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3708      	adds	r7, #8
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b084      	sub	sp, #16
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
 80126d4:	603b      	str	r3, [r7, #0]
 80126d6:	4603      	mov	r3, r0
 80126d8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80126da:	7bfb      	ldrb	r3, [r7, #15]
 80126dc:	2b05      	cmp	r3, #5
 80126de:	d002      	beq.n	80126e6 <RegionNextChannel+0x1c>
 80126e0:	2b08      	cmp	r3, #8
 80126e2:	d008      	beq.n	80126f6 <RegionNextChannel+0x2c>
 80126e4:	e00f      	b.n	8012706 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80126e6:	69bb      	ldr	r3, [r7, #24]
 80126e8:	683a      	ldr	r2, [r7, #0]
 80126ea:	6879      	ldr	r1, [r7, #4]
 80126ec:	68b8      	ldr	r0, [r7, #8]
 80126ee:	f002 f859 	bl	80147a4 <RegionEU868NextChannel>
 80126f2:	4603      	mov	r3, r0
 80126f4:	e008      	b.n	8012708 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 80126f6:	69bb      	ldr	r3, [r7, #24]
 80126f8:	683a      	ldr	r2, [r7, #0]
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	68b8      	ldr	r0, [r7, #8]
 80126fe:	f003 facf 	bl	8015ca0 <RegionUS915NextChannel>
 8012702:	4603      	mov	r3, r0
 8012704:	e000      	b.n	8012708 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012706:	2309      	movs	r3, #9
        }
    }
}
 8012708:	4618      	mov	r0, r3
 801270a:	3710      	adds	r7, #16
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8012710:	b590      	push	{r4, r7, lr}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	4604      	mov	r4, r0
 8012718:	4608      	mov	r0, r1
 801271a:	4611      	mov	r1, r2
 801271c:	461a      	mov	r2, r3
 801271e:	4623      	mov	r3, r4
 8012720:	71fb      	strb	r3, [r7, #7]
 8012722:	4603      	mov	r3, r0
 8012724:	71bb      	strb	r3, [r7, #6]
 8012726:	460b      	mov	r3, r1
 8012728:	717b      	strb	r3, [r7, #5]
 801272a:	4613      	mov	r3, r2
 801272c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801272e:	79fb      	ldrb	r3, [r7, #7]
 8012730:	2b05      	cmp	r3, #5
 8012732:	d002      	beq.n	801273a <RegionApplyDrOffset+0x2a>
 8012734:	2b08      	cmp	r3, #8
 8012736:	d00a      	beq.n	801274e <RegionApplyDrOffset+0x3e>
 8012738:	e013      	b.n	8012762 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801273a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801273e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012742:	79bb      	ldrb	r3, [r7, #6]
 8012744:	4618      	mov	r0, r3
 8012746:	f002 f9a7 	bl	8014a98 <RegionEU868ApplyDrOffset>
 801274a:	4603      	mov	r3, r0
 801274c:	e00a      	b.n	8012764 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 801274e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8012752:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012756:	79bb      	ldrb	r3, [r7, #6]
 8012758:	4618      	mov	r0, r3
 801275a:	f003 fb8d 	bl	8015e78 <RegionUS915ApplyDrOffset>
 801275e:	4603      	mov	r3, r0
 8012760:	e000      	b.n	8012764 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8012762:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8012764:	4618      	mov	r0, r3
 8012766:	370c      	adds	r7, #12
 8012768:	46bd      	mov	sp, r7
 801276a:	bd90      	pop	{r4, r7, pc}

0801276c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8012772:	4b04      	ldr	r3, [pc, #16]	@ (8012784 <RegionGetVersion+0x18>)
 8012774:	607b      	str	r3, [r7, #4]

    return version;
 8012776:	687b      	ldr	r3, [r7, #4]
}
 8012778:	4618      	mov	r0, r3
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	bc80      	pop	{r7}
 8012780:	4770      	bx	lr
 8012782:	bf00      	nop
 8012784:	02010001 	.word	0x02010001

08012788 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8012788:	b480      	push	{r7}
 801278a:	b087      	sub	sp, #28
 801278c:	af00      	add	r7, sp, #0
 801278e:	4603      	mov	r3, r0
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	607a      	str	r2, [r7, #4]
 8012794:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d002      	beq.n	80127a2 <FindAvailable125kHzChannels+0x1a>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d101      	bne.n	80127a6 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80127a2:	2303      	movs	r3, #3
 80127a4:	e021      	b.n	80127ea <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2200      	movs	r2, #0
 80127aa:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80127ac:	2300      	movs	r3, #0
 80127ae:	75fb      	strb	r3, [r7, #23]
 80127b0:	e017      	b.n	80127e2 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80127b2:	89fa      	ldrh	r2, [r7, #14]
 80127b4:	7dfb      	ldrb	r3, [r7, #23]
 80127b6:	fa42 f303 	asr.w	r3, r2, r3
 80127ba:	f003 0301 	and.w	r3, r3, #1
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00c      	beq.n	80127dc <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	461a      	mov	r2, r3
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	4413      	add	r3, r2
 80127cc:	7dfa      	ldrb	r2, [r7, #23]
 80127ce:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	3301      	adds	r3, #1
 80127d6:	b2da      	uxtb	r2, r3
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80127dc:	7dfb      	ldrb	r3, [r7, #23]
 80127de:	3301      	adds	r3, #1
 80127e0:	75fb      	strb	r3, [r7, #23]
 80127e2:	7dfb      	ldrb	r3, [r7, #23]
 80127e4:	2b07      	cmp	r3, #7
 80127e6:	d9e4      	bls.n	80127b2 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80127e8:	2300      	movs	r3, #0
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	371c      	adds	r7, #28
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bc80      	pop	{r7}
 80127f2:	4770      	bx	lr

080127f4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80127f4:	b590      	push	{r4, r7, lr}
 80127f6:	b089      	sub	sp, #36	@ 0x24
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8012800:	f107 0314 	add.w	r3, r7, #20
 8012804:	2200      	movs	r2, #0
 8012806:	601a      	str	r2, [r3, #0]
 8012808:	605a      	str	r2, [r3, #4]
    uint8_t availableChannels = 0;
 801280a:	2300      	movs	r3, #0
 801280c:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d005      	beq.n	8012820 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d002      	beq.n	8012820 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d101      	bne.n	8012824 <RegionBaseUSComputeNext125kHzJoinChannel+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012820:	2303      	movs	r3, #3
 8012822:	e055      	b.n	80128d0 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801282a:	7f7b      	ldrb	r3, [r7, #29]
 801282c:	085b      	lsrs	r3, r3, #1
 801282e:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8012830:	7f7b      	ldrb	r3, [r7, #29]
 8012832:	f003 0301 	and.w	r3, r3, #1
 8012836:	b2db      	uxtb	r3, r3
 8012838:	2b00      	cmp	r3, #0
 801283a:	d107      	bne.n	801284c <RegionBaseUSComputeNext125kHzJoinChannel+0x58>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801283c:	7f3b      	ldrb	r3, [r7, #28]
 801283e:	005b      	lsls	r3, r3, #1
 8012840:	68fa      	ldr	r2, [r7, #12]
 8012842:	4413      	add	r3, r2
 8012844:	881b      	ldrh	r3, [r3, #0]
 8012846:	b2db      	uxtb	r3, r3
 8012848:	83fb      	strh	r3, [r7, #30]
 801284a:	e006      	b.n	801285a <RegionBaseUSComputeNext125kHzJoinChannel+0x66>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801284c:	7f3b      	ldrb	r3, [r7, #28]
 801284e:	005b      	lsls	r3, r3, #1
 8012850:	68fa      	ldr	r2, [r7, #12]
 8012852:	4413      	add	r3, r2
 8012854:	881b      	ldrh	r3, [r3, #0]
 8012856:	0a1b      	lsrs	r3, r3, #8
 8012858:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801285a:	f107 0213 	add.w	r2, r7, #19
 801285e:	f107 0114 	add.w	r1, r7, #20
 8012862:	8bfb      	ldrh	r3, [r7, #30]
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff ff8f 	bl	8012788 <FindAvailable125kHzChannels>
 801286a:	4603      	mov	r3, r0
 801286c:	2b03      	cmp	r3, #3
 801286e:	d101      	bne.n	8012874 <RegionBaseUSComputeNext125kHzJoinChannel+0x80>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012870:	2303      	movs	r3, #3
 8012872:	e02d      	b.n	80128d0 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 8012874:	7cfb      	ldrb	r3, [r7, #19]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d011      	beq.n	801289e <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801287a:	7f7b      	ldrb	r3, [r7, #29]
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	b2dc      	uxtb	r4, r3
 8012880:	7cfb      	ldrb	r3, [r7, #19]
 8012882:	3b01      	subs	r3, #1
 8012884:	4619      	mov	r1, r3
 8012886:	2000      	movs	r0, #0
 8012888:	f004 ffea 	bl	8017860 <randr>
 801288c:	4603      	mov	r3, r0
 801288e:	3320      	adds	r3, #32
 8012890:	443b      	add	r3, r7
 8012892:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8012896:	4423      	add	r3, r4
 8012898:	b2da      	uxtb	r2, r3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 801289e:	7f7b      	ldrb	r3, [r7, #29]
 80128a0:	3301      	adds	r3, #1
 80128a2:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80128a4:	7f7b      	ldrb	r3, [r7, #29]
 80128a6:	2b07      	cmp	r3, #7
 80128a8:	d901      	bls.n	80128ae <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 80128aa:	2300      	movs	r3, #0
 80128ac:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80128ae:	7cfb      	ldrb	r3, [r7, #19]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d104      	bne.n	80128be <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	7f7a      	ldrb	r2, [r7, #29]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d1b5      	bne.n	801282a <RegionBaseUSComputeNext125kHzJoinChannel+0x36>

    if ( availableChannels > 0 )
 80128be:	7cfb      	ldrb	r3, [r7, #19]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d004      	beq.n	80128ce <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	7f7a      	ldrb	r2, [r7, #29]
 80128c8:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80128ca:	2300      	movs	r3, #0
 80128cc:	e000      	b.n	80128d0 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80128ce:	2303      	movs	r3, #3
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3724      	adds	r7, #36	@ 0x24
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd90      	pop	{r4, r7, pc}

080128d8 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80128d8:	b480      	push	{r7}
 80128da:	b085      	sub	sp, #20
 80128dc:	af00      	add	r7, sp, #0
 80128de:	4603      	mov	r3, r0
 80128e0:	60b9      	str	r1, [r7, #8]
 80128e2:	607a      	str	r2, [r7, #4]
 80128e4:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 80128e6:	7bfb      	ldrb	r3, [r7, #15]
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	fb03 f202 	mul.w	r2, r3, r2
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	4413      	add	r3, r2
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3714      	adds	r7, #20
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bc80      	pop	{r7}
 80128fa:	4770      	bx	lr

080128fc <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80128fc:	b480      	push	{r7}
 80128fe:	b087      	sub	sp, #28
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	4608      	mov	r0, r1
 8012906:	4639      	mov	r1, r7
 8012908:	e881 000c 	stmia.w	r1, {r2, r3}
 801290c:	4603      	mov	r3, r0
 801290e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	881b      	ldrh	r3, [r3, #0]
 8012914:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8012916:	7afb      	ldrb	r3, [r7, #11]
 8012918:	f083 0301 	eor.w	r3, r3, #1
 801291c:	b2db      	uxtb	r3, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	d01b      	beq.n	801295a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8012922:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012926:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801292e:	d202      	bcs.n	8012936 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8012930:	2364      	movs	r3, #100	@ 0x64
 8012932:	82bb      	strh	r3, [r7, #20]
 8012934:	e00b      	b.n	801294e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801293c:	4293      	cmp	r3, r2
 801293e:	d803      	bhi.n	8012948 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8012940:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012944:	82bb      	strh	r3, [r7, #20]
 8012946:	e002      	b.n	801294e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8012948:	f242 7310 	movw	r3, #10000	@ 0x2710
 801294c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801294e:	8aba      	ldrh	r2, [r7, #20]
 8012950:	8afb      	ldrh	r3, [r7, #22]
 8012952:	4293      	cmp	r3, r2
 8012954:	bf38      	it	cc
 8012956:	4613      	movcc	r3, r2
 8012958:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801295a:	8afb      	ldrh	r3, [r7, #22]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d101      	bne.n	8012964 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8012960:	2301      	movs	r3, #1
 8012962:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8012964:	8afb      	ldrh	r3, [r7, #22]
}
 8012966:	4618      	mov	r0, r3
 8012968:	371c      	adds	r7, #28
 801296a:	46bd      	mov	sp, r7
 801296c:	bc80      	pop	{r7}
 801296e:	4770      	bx	lr

08012970 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b08e      	sub	sp, #56	@ 0x38
 8012974:	af02      	add	r7, sp, #8
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	4608      	mov	r0, r1
 801297a:	4639      	mov	r1, r7
 801297c:	e881 000c 	stmia.w	r1, {r2, r3}
 8012980:	4603      	mov	r3, r0
 8012982:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	881b      	ldrh	r3, [r3, #0]
 8012988:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801298a:	4b4b      	ldr	r3, [pc, #300]	@ (8012ab8 <SetMaxTimeCredits+0x148>)
 801298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801298e:	463b      	mov	r3, r7
 8012990:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012994:	f008 faa0 	bl	801aed8 <SysTimeToMs>
 8012998:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 801299a:	f107 0314 	add.w	r3, r7, #20
 801299e:	2200      	movs	r2, #0
 80129a0:	601a      	str	r2, [r3, #0]
 80129a2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80129a4:	7af9      	ldrb	r1, [r7, #11]
 80129a6:	463b      	mov	r3, r7
 80129a8:	cb0c      	ldmia	r3, {r2, r3}
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f7ff ffa6 	bl	80128fc <GetDutyCycle>
 80129b0:	4603      	mov	r3, r0
 80129b2:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80129b4:	7afb      	ldrb	r3, [r7, #11]
 80129b6:	f083 0301 	eor.w	r3, r3, #1
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d062      	beq.n	8012a86 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80129c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80129c2:	2b64      	cmp	r3, #100	@ 0x64
 80129c4:	d105      	bne.n	80129d2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80129c6:	4b3c      	ldr	r3, [pc, #240]	@ (8012ab8 <SetMaxTimeCredits+0x148>)
 80129c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129ce:	609a      	str	r2, [r3, #8]
 80129d0:	e00b      	b.n	80129ea <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80129d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80129d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80129d8:	d105      	bne.n	80129e6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80129da:	4b38      	ldr	r3, [pc, #224]	@ (8012abc <SetMaxTimeCredits+0x14c>)
 80129dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129e2:	609a      	str	r2, [r3, #8]
 80129e4:	e001      	b.n	80129ea <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80129e6:	4b36      	ldr	r3, [pc, #216]	@ (8012ac0 <SetMaxTimeCredits+0x150>)
 80129e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	689a      	ldr	r2, [r3, #8]
 80129ee:	f107 031c 	add.w	r3, r7, #28
 80129f2:	4611      	mov	r1, r2
 80129f4:	4618      	mov	r0, r3
 80129f6:	f008 fa97 	bl	801af28 <SysTimeFromMs>
 80129fa:	f107 0014 	add.w	r0, r7, #20
 80129fe:	6a3b      	ldr	r3, [r7, #32]
 8012a00:	9300      	str	r3, [sp, #0]
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	463a      	mov	r2, r7
 8012a06:	ca06      	ldmia	r2, {r1, r2}
 8012a08:	f008 f9a7 	bl	801ad5a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8012a0c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8012a10:	f083 0301 	eor.w	r3, r3, #1
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d006      	beq.n	8012a28 <SetMaxTimeCredits+0xb8>
 8012a1a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012a1e:	f083 0301 	eor.w	r3, r3, #1
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d108      	bne.n	8012a3a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8012a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d103      	bne.n	8012a3a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8012a32:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8012a34:	4a23      	ldr	r2, [pc, #140]	@ (8012ac4 <SetMaxTimeCredits+0x154>)
 8012a36:	4293      	cmp	r3, r2
 8012a38:	d92f      	bls.n	8012a9a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a3e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	4a21      	ldr	r2, [pc, #132]	@ (8012ac8 <SetMaxTimeCredits+0x158>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d928      	bls.n	8012a9a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8012a4e:	3b30      	subs	r3, #48	@ 0x30
 8012a50:	4a1e      	ldr	r2, [pc, #120]	@ (8012acc <SetMaxTimeCredits+0x15c>)
 8012a52:	fba2 2303 	umull	r2, r3, r2, r3
 8012a56:	0c1b      	lsrs	r3, r3, #16
 8012a58:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8012ad0 <SetMaxTimeCredits+0x160>)
 8012a5e:	fb02 f303 	mul.w	r3, r2, r3
 8012a62:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8012a6a:	3330      	adds	r3, #48	@ 0x30
 8012a6c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8012a72:	f107 0314 	add.w	r3, r7, #20
 8012a76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a7a:	f008 fa2d 	bl	801aed8 <SysTimeToMs>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	609a      	str	r2, [r3, #8]
 8012a84:	e009      	b.n	8012a9a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8012a86:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8012a8a:	f083 0301 	eor.w	r3, r3, #1
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d002      	beq.n	8012a9a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a98:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d102      	bne.n	8012aa8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012aa6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012aac:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8012aae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3730      	adds	r7, #48	@ 0x30
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	001b7740 	.word	0x001b7740
 8012abc:	0112a880 	.word	0x0112a880
 8012ac0:	02932e00 	.word	0x02932e00
 8012ac4:	0001517f 	.word	0x0001517f
 8012ac8:	0001ec2f 	.word	0x0001ec2f
 8012acc:	c22e4507 	.word	0xc22e4507
 8012ad0:	00015180 	.word	0x00015180

08012ad4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b086      	sub	sp, #24
 8012ad8:	af02      	add	r7, sp, #8
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	4608      	mov	r0, r1
 8012ade:	4611      	mov	r1, r2
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	70fb      	strb	r3, [r7, #3]
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	70bb      	strb	r3, [r7, #2]
 8012aea:	4613      	mov	r3, r2
 8012aec:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8012aee:	78f9      	ldrb	r1, [r7, #3]
 8012af0:	787b      	ldrb	r3, [r7, #1]
 8012af2:	9301      	str	r3, [sp, #4]
 8012af4:	78bb      	ldrb	r3, [r7, #2]
 8012af6:	9300      	str	r3, [sp, #0]
 8012af8:	f107 0318 	add.w	r3, r7, #24
 8012afc:	cb0c      	ldmia	r3, {r2, r3}
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f7ff ff36 	bl	8012970 <SetMaxTimeCredits>
 8012b04:	4603      	mov	r3, r0
 8012b06:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8012b08:	78fb      	ldrb	r3, [r7, #3]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d00a      	beq.n	8012b24 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f008 fba6 	bl	801b264 <UTIL_TIMER_GetElapsedTime>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	68db      	ldr	r3, [r3, #12]
 8012b1e:	441a      	add	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	68da      	ldr	r2, [r3, #12]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	691b      	ldr	r3, [r3, #16]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d903      	bls.n	8012b38 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	691a      	ldr	r2, [r3, #16]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6a3a      	ldr	r2, [r7, #32]
 8012b3c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8012b3e:	89fb      	ldrh	r3, [r7, #14]
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3710      	adds	r7, #16
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	4603      	mov	r3, r0
 8012b50:	460a      	mov	r2, r1
 8012b52:	80fb      	strh	r3, [r7, #6]
 8012b54:	4613      	mov	r3, r2
 8012b56:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	73bb      	strb	r3, [r7, #14]
 8012b60:	e011      	b.n	8012b86 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012b62:	88fa      	ldrh	r2, [r7, #6]
 8012b64:	7bbb      	ldrb	r3, [r7, #14]
 8012b66:	2101      	movs	r1, #1
 8012b68:	fa01 f303 	lsl.w	r3, r1, r3
 8012b6c:	401a      	ands	r2, r3
 8012b6e:	7bbb      	ldrb	r3, [r7, #14]
 8012b70:	2101      	movs	r1, #1
 8012b72:	fa01 f303 	lsl.w	r3, r1, r3
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d102      	bne.n	8012b80 <CountChannels+0x38>
        {
            nbActiveBits++;
 8012b7a:	7bfb      	ldrb	r3, [r7, #15]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8012b80:	7bbb      	ldrb	r3, [r7, #14]
 8012b82:	3301      	adds	r3, #1
 8012b84:	73bb      	strb	r3, [r7, #14]
 8012b86:	7bba      	ldrb	r2, [r7, #14]
 8012b88:	797b      	ldrb	r3, [r7, #5]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d3e9      	bcc.n	8012b62 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8012b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3714      	adds	r7, #20
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bc80      	pop	{r7}
 8012b98:	4770      	bx	lr

08012b9a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b084      	sub	sp, #16
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6039      	str	r1, [r7, #0]
 8012ba2:	4611      	mov	r1, r2
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	71fb      	strb	r3, [r7, #7]
 8012baa:	460b      	mov	r3, r1
 8012bac:	71bb      	strb	r3, [r7, #6]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8012bb2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8012bb6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012bba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f000 f85d 	bl	8012c7e <RegionCommonValueInRange>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d101      	bne.n	8012bce <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	e053      	b.n	8012c76 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012bce:	2300      	movs	r3, #0
 8012bd0:	73fb      	strb	r3, [r7, #15]
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	73bb      	strb	r3, [r7, #14]
 8012bd6:	e049      	b.n	8012c6c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012bd8:	2300      	movs	r3, #0
 8012bda:	737b      	strb	r3, [r7, #13]
 8012bdc:	e03d      	b.n	8012c5a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8012bde:	7bbb      	ldrb	r3, [r7, #14]
 8012be0:	005b      	lsls	r3, r3, #1
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	4413      	add	r3, r2
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	461a      	mov	r2, r3
 8012bea:	7b7b      	ldrb	r3, [r7, #13]
 8012bec:	fa42 f303 	asr.w	r3, r2, r3
 8012bf0:	f003 0301 	and.w	r3, r3, #1
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d02d      	beq.n	8012c54 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012bf8:	7bfa      	ldrb	r2, [r7, #15]
 8012bfa:	7b7b      	ldrb	r3, [r7, #13]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	461a      	mov	r2, r3
 8012c00:	4613      	mov	r3, r2
 8012c02:	005b      	lsls	r3, r3, #1
 8012c04:	4413      	add	r3, r2
 8012c06:	009b      	lsls	r3, r3, #2
 8012c08:	461a      	mov	r2, r3
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	7a1b      	ldrb	r3, [r3, #8]
 8012c10:	f343 0303 	sbfx	r3, r3, #0, #4
 8012c14:	b25b      	sxtb	r3, r3
 8012c16:	f003 030f 	and.w	r3, r3, #15
 8012c1a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012c1c:	7bfa      	ldrb	r2, [r7, #15]
 8012c1e:	7b7b      	ldrb	r3, [r7, #13]
 8012c20:	4413      	add	r3, r2
 8012c22:	461a      	mov	r2, r3
 8012c24:	4613      	mov	r3, r2
 8012c26:	005b      	lsls	r3, r3, #1
 8012c28:	4413      	add	r3, r2
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	4413      	add	r3, r2
 8012c32:	7a1b      	ldrb	r3, [r3, #8]
 8012c34:	f343 1303 	sbfx	r3, r3, #4, #4
 8012c38:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012c3a:	f003 030f 	and.w	r3, r3, #15
 8012c3e:	b25a      	sxtb	r2, r3
 8012c40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012c44:	4618      	mov	r0, r3
 8012c46:	f000 f81a 	bl	8012c7e <RegionCommonValueInRange>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	d101      	bne.n	8012c54 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8012c50:	2301      	movs	r3, #1
 8012c52:	e010      	b.n	8012c76 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8012c54:	7b7b      	ldrb	r3, [r7, #13]
 8012c56:	3301      	adds	r3, #1
 8012c58:	737b      	strb	r3, [r7, #13]
 8012c5a:	7b7b      	ldrb	r3, [r7, #13]
 8012c5c:	2b0f      	cmp	r3, #15
 8012c5e:	d9be      	bls.n	8012bde <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012c60:	7bfb      	ldrb	r3, [r7, #15]
 8012c62:	3310      	adds	r3, #16
 8012c64:	73fb      	strb	r3, [r7, #15]
 8012c66:	7bbb      	ldrb	r3, [r7, #14]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	73bb      	strb	r3, [r7, #14]
 8012c6c:	7bfa      	ldrb	r2, [r7, #15]
 8012c6e:	79fb      	ldrb	r3, [r7, #7]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d3b1      	bcc.n	8012bd8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8012c74:	2300      	movs	r3, #0
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3710      	adds	r7, #16
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}

08012c7e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8012c7e:	b480      	push	{r7}
 8012c80:	b083      	sub	sp, #12
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	4603      	mov	r3, r0
 8012c86:	71fb      	strb	r3, [r7, #7]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	71bb      	strb	r3, [r7, #6]
 8012c8c:	4613      	mov	r3, r2
 8012c8e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8012c90:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012c94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	db07      	blt.n	8012cac <RegionCommonValueInRange+0x2e>
 8012c9c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012ca0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	dc01      	bgt.n	8012cac <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	e000      	b.n	8012cae <RegionCommonValueInRange+0x30>
    }
    return 0;
 8012cac:	2300      	movs	r3, #0
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	370c      	adds	r7, #12
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bc80      	pop	{r7}
 8012cb6:	4770      	bx	lr

08012cb8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b085      	sub	sp, #20
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	70fb      	strb	r3, [r7, #3]
 8012cc4:	4613      	mov	r3, r2
 8012cc6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8012cc8:	78fb      	ldrb	r3, [r7, #3]
 8012cca:	091b      	lsrs	r3, r3, #4
 8012ccc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8012cce:	78bb      	ldrb	r3, [r7, #2]
 8012cd0:	091b      	lsrs	r3, r3, #4
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	7bfa      	ldrb	r2, [r7, #15]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d803      	bhi.n	8012ce2 <RegionCommonChanDisable+0x2a>
 8012cda:	78fa      	ldrb	r2, [r7, #3]
 8012cdc:	78bb      	ldrb	r3, [r7, #2]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d301      	bcc.n	8012ce6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	e017      	b.n	8012d16 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012ce6:	7bfb      	ldrb	r3, [r7, #15]
 8012ce8:	005b      	lsls	r3, r3, #1
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	4413      	add	r3, r2
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	b21a      	sxth	r2, r3
 8012cf2:	78fb      	ldrb	r3, [r7, #3]
 8012cf4:	f003 030f 	and.w	r3, r3, #15
 8012cf8:	2101      	movs	r1, #1
 8012cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8012cfe:	b21b      	sxth	r3, r3
 8012d00:	43db      	mvns	r3, r3
 8012d02:	b21b      	sxth	r3, r3
 8012d04:	4013      	ands	r3, r2
 8012d06:	b219      	sxth	r1, r3
 8012d08:	7bfb      	ldrb	r3, [r7, #15]
 8012d0a:	005b      	lsls	r3, r3, #1
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	4413      	add	r3, r2
 8012d10:	b28a      	uxth	r2, r1
 8012d12:	801a      	strh	r2, [r3, #0]

    return true;
 8012d14:	2301      	movs	r3, #1
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3714      	adds	r7, #20
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bc80      	pop	{r7}
 8012d1e:	4770      	bx	lr

08012d20 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b084      	sub	sp, #16
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	460b      	mov	r3, r1
 8012d2a:	70fb      	strb	r3, [r7, #3]
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8012d30:	2300      	movs	r3, #0
 8012d32:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d101      	bne.n	8012d3e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	e018      	b.n	8012d70 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012d3e:	78fb      	ldrb	r3, [r7, #3]
 8012d40:	73bb      	strb	r3, [r7, #14]
 8012d42:	e010      	b.n	8012d66 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8012d44:	7bbb      	ldrb	r3, [r7, #14]
 8012d46:	005b      	lsls	r3, r3, #1
 8012d48:	687a      	ldr	r2, [r7, #4]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	881b      	ldrh	r3, [r3, #0]
 8012d4e:	2110      	movs	r1, #16
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7ff fef9 	bl	8012b48 <CountChannels>
 8012d56:	4603      	mov	r3, r0
 8012d58:	461a      	mov	r2, r3
 8012d5a:	7bfb      	ldrb	r3, [r7, #15]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012d60:	7bbb      	ldrb	r3, [r7, #14]
 8012d62:	3301      	adds	r3, #1
 8012d64:	73bb      	strb	r3, [r7, #14]
 8012d66:	7bba      	ldrb	r2, [r7, #14]
 8012d68:	78bb      	ldrb	r3, [r7, #2]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d3ea      	bcc.n	8012d44 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8012d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b087      	sub	sp, #28
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	4613      	mov	r3, r2
 8012d84:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d016      	beq.n	8012dba <RegionCommonChanMaskCopy+0x42>
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d013      	beq.n	8012dba <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8012d92:	2300      	movs	r3, #0
 8012d94:	75fb      	strb	r3, [r7, #23]
 8012d96:	e00c      	b.n	8012db2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8012d98:	7dfb      	ldrb	r3, [r7, #23]
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	68ba      	ldr	r2, [r7, #8]
 8012d9e:	441a      	add	r2, r3
 8012da0:	7dfb      	ldrb	r3, [r7, #23]
 8012da2:	005b      	lsls	r3, r3, #1
 8012da4:	68f9      	ldr	r1, [r7, #12]
 8012da6:	440b      	add	r3, r1
 8012da8:	8812      	ldrh	r2, [r2, #0]
 8012daa:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8012dac:	7dfb      	ldrb	r3, [r7, #23]
 8012dae:	3301      	adds	r3, #1
 8012db0:	75fb      	strb	r3, [r7, #23]
 8012db2:	7dfa      	ldrb	r2, [r7, #23]
 8012db4:	79fb      	ldrb	r3, [r7, #7]
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d3ee      	bcc.n	8012d98 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8012dba:	bf00      	nop
 8012dbc:	371c      	adds	r7, #28
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bc80      	pop	{r7}
 8012dc2:	4770      	bx	lr

08012dc4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8012dc4:	b082      	sub	sp, #8
 8012dc6:	b580      	push	{r7, lr}
 8012dc8:	b086      	sub	sp, #24
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	60f8      	str	r0, [r7, #12]
 8012dce:	60b9      	str	r1, [r7, #8]
 8012dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8012dd6:	79f9      	ldrb	r1, [r7, #7]
 8012dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012ddc:	cb0c      	ldmia	r3, {r2, r3}
 8012dde:	68f8      	ldr	r0, [r7, #12]
 8012de0:	f7ff fd8c 	bl	80128fc <GetDutyCycle>
 8012de4:	4603      	mov	r3, r0
 8012de6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	68da      	ldr	r2, [r3, #12]
 8012dec:	8afb      	ldrh	r3, [r7, #22]
 8012dee:	68b9      	ldr	r1, [r7, #8]
 8012df0:	fb01 f303 	mul.w	r3, r1, r3
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d909      	bls.n	8012e0c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	68da      	ldr	r2, [r3, #12]
 8012dfc:	8afb      	ldrh	r3, [r7, #22]
 8012dfe:	68b9      	ldr	r1, [r7, #8]
 8012e00:	fb01 f303 	mul.w	r3, r1, r3
 8012e04:	1ad2      	subs	r2, r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8012e0a:	e002      	b.n	8012e12 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	60da      	str	r2, [r3, #12]
}
 8012e12:	bf00      	nop
 8012e14:	3718      	adds	r7, #24
 8012e16:	46bd      	mov	sp, r7
 8012e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e1c:	b002      	add	sp, #8
 8012e1e:	4770      	bx	lr

08012e20 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8012e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e22:	b08f      	sub	sp, #60	@ 0x3c
 8012e24:	af04      	add	r7, sp, #16
 8012e26:	6039      	str	r1, [r7, #0]
 8012e28:	4611      	mov	r1, r2
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	71fb      	strb	r3, [r7, #7]
 8012e30:	460b      	mov	r3, r1
 8012e32:	71bb      	strb	r3, [r7, #6]
 8012e34:	4613      	mov	r3, r2
 8012e36:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8012e38:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8012e3e:	f008 f9ff 	bl	801b240 <UTIL_TIMER_GetCurrentTime>
 8012e42:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8012e44:	2300      	movs	r3, #0
 8012e46:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8012e52:	2300      	movs	r3, #0
 8012e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012e58:	e0ba      	b.n	8012fd0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8012e5a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012e5e:	4613      	mov	r3, r2
 8012e60:	005b      	lsls	r3, r3, #1
 8012e62:	4413      	add	r3, r2
 8012e64:	00db      	lsls	r3, r3, #3
 8012e66:	461a      	mov	r2, r3
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	189c      	adds	r4, r3, r2
 8012e6c:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8012e70:	797a      	ldrb	r2, [r7, #5]
 8012e72:	79fd      	ldrb	r5, [r7, #7]
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	9302      	str	r3, [sp, #8]
 8012e78:	46ec      	mov	ip, sp
 8012e7a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012e7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e82:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012e86:	4633      	mov	r3, r6
 8012e88:	4629      	mov	r1, r5
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	f7ff fe22 	bl	8012ad4 <UpdateTimeCredits>
 8012e90:	4603      	mov	r3, r0
 8012e92:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8012e94:	8afa      	ldrh	r2, [r7, #22]
 8012e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e98:	fb02 f303 	mul.w	r3, r2, r3
 8012e9c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8012e9e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	005b      	lsls	r3, r3, #1
 8012ea6:	4413      	add	r3, r2
 8012ea8:	00db      	lsls	r3, r3, #3
 8012eaa:	461a      	mov	r2, r3
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	4413      	add	r3, r2
 8012eb0:	68db      	ldr	r3, [r3, #12]
 8012eb2:	69ba      	ldr	r2, [r7, #24]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d908      	bls.n	8012eca <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012eb8:	797b      	ldrb	r3, [r7, #5]
 8012eba:	f083 0301 	eor.w	r3, r3, #1
 8012ebe:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d013      	beq.n	8012eec <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012ec4:	79fb      	ldrb	r3, [r7, #7]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d010      	beq.n	8012eec <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8012eca:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012ece:	4613      	mov	r3, r2
 8012ed0:	005b      	lsls	r3, r3, #1
 8012ed2:	4413      	add	r3, r2
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	4413      	add	r3, r2
 8012edc:	2201      	movs	r2, #1
 8012ede:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8012ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012eea:	e06c      	b.n	8012fc6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8012eec:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	005b      	lsls	r3, r3, #1
 8012ef4:	4413      	add	r3, r2
 8012ef6:	00db      	lsls	r3, r3, #3
 8012ef8:	461a      	mov	r2, r3
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	4413      	add	r3, r2
 8012efe:	2200      	movs	r2, #0
 8012f00:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8012f02:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012f06:	4613      	mov	r3, r2
 8012f08:	005b      	lsls	r3, r3, #1
 8012f0a:	4413      	add	r3, r2
 8012f0c:	00db      	lsls	r3, r3, #3
 8012f0e:	461a      	mov	r2, r3
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	4413      	add	r3, r2
 8012f14:	691b      	ldr	r3, [r3, #16]
 8012f16:	69ba      	ldr	r2, [r7, #24]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d815      	bhi.n	8012f48 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8012f1c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012f20:	4613      	mov	r3, r2
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	4413      	add	r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	461a      	mov	r2, r3
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	68db      	ldr	r3, [r3, #12]
 8012f30:	69ba      	ldr	r2, [r7, #24]
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f36:	4293      	cmp	r3, r2
 8012f38:	bf28      	it	cs
 8012f3a:	4613      	movcs	r3, r2
 8012f3c:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8012f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012f42:	3301      	adds	r3, #1
 8012f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8012f48:	79fb      	ldrb	r3, [r7, #7]
 8012f4a:	f083 0301 	eor.w	r3, r3, #1
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d038      	beq.n	8012fc6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8012f54:	2300      	movs	r3, #0
 8012f56:	60fb      	str	r3, [r7, #12]
 8012f58:	2300      	movs	r3, #0
 8012f5a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8012f5c:	8afb      	ldrh	r3, [r7, #22]
 8012f5e:	2b64      	cmp	r3, #100	@ 0x64
 8012f60:	d103      	bne.n	8012f6a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8012f62:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8012f66:	60fb      	str	r3, [r7, #12]
 8012f68:	e009      	b.n	8012f7e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8012f6a:	8afb      	ldrh	r3, [r7, #22]
 8012f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012f70:	d103      	bne.n	8012f7a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8012f72:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8012f76:	60fb      	str	r3, [r7, #12]
 8012f78:	e001      	b.n	8012f7e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8012f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8012ff4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012f7c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f80:	4a1c      	ldr	r2, [pc, #112]	@ (8012ff4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d90e      	bls.n	8012fa4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8012f86:	68fa      	ldr	r2, [r7, #12]
 8012f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f8a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8012f8e:	3b30      	subs	r3, #48	@ 0x30
 8012f90:	4919      	ldr	r1, [pc, #100]	@ (8012ff8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8012f92:	fba1 1303 	umull	r1, r3, r1, r3
 8012f96:	0c1b      	lsrs	r3, r3, #16
 8012f98:	3301      	adds	r3, #1
 8012f9a:	4918      	ldr	r1, [pc, #96]	@ (8012ffc <RegionCommonUpdateBandTimeOff+0x1dc>)
 8012f9c:	fb01 f303 	mul.w	r3, r1, r3
 8012fa0:	4413      	add	r3, r2
 8012fa2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8012fa4:	f107 000c 	add.w	r0, r7, #12
 8012fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012fae:	f107 020c 	add.w	r2, r7, #12
 8012fb2:	ca06      	ldmia	r2, {r1, r2}
 8012fb4:	f007 fed1 	bl	801ad5a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8012fb8:	f107 030c 	add.w	r3, r7, #12
 8012fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012fc0:	f007 ff8a 	bl	801aed8 <SysTimeToMs>
 8012fc4:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8012fc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012fca:	3301      	adds	r3, #1
 8012fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012fd0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012fd4:	79bb      	ldrb	r3, [r7, #6]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	f4ff af3f 	bcc.w	8012e5a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8012fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d102      	bne.n	8012fea <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8012fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8012fe8:	e000      	b.n	8012fec <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8012fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	372c      	adds	r7, #44	@ 0x2c
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ff4:	0001ec30 	.word	0x0001ec30
 8012ff8:	c22e4507 	.word	0xc22e4507
 8012ffc:	00015180 	.word	0x00015180

08013000 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801300a:	2300      	movs	r3, #0
 801300c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	2b03      	cmp	r3, #3
 8013014:	d140      	bne.n	8013098 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	3301      	adds	r3, #1
 801301a:	781b      	ldrb	r3, [r3, #0]
 801301c:	b25a      	sxtb	r2, r3
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013028:	f003 030f 	and.w	r3, r3, #15
 801302c:	b25a      	sxtb	r2, r3
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013038:	b2db      	uxtb	r3, r3
 801303a:	091b      	lsrs	r3, r3, #4
 801303c:	b2db      	uxtb	r3, r3
 801303e:	b25a      	sxtb	r2, r3
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	3302      	adds	r3, #2
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	461a      	mov	r2, r3
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	889b      	ldrh	r3, [r3, #4]
 8013054:	b21a      	sxth	r2, r3
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	3303      	adds	r3, #3
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	b21b      	sxth	r3, r3
 801305e:	021b      	lsls	r3, r3, #8
 8013060:	b21b      	sxth	r3, r3
 8013062:	4313      	orrs	r3, r2
 8013064:	b21b      	sxth	r3, r3
 8013066:	b29a      	uxth	r2, r3
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	791a      	ldrb	r2, [r3, #4]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	091b      	lsrs	r3, r3, #4
 801307a:	b2db      	uxtb	r3, r3
 801307c:	f003 0307 	and.w	r3, r3, #7
 8013080:	b2da      	uxtb	r2, r3
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	f003 030f 	and.w	r3, r3, #15
 801308e:	b2da      	uxtb	r2, r3
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8013094:	2305      	movs	r3, #5
 8013096:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8013098:	7bfb      	ldrb	r3, [r7, #15]
}
 801309a:	4618      	mov	r0, r3
 801309c:	3714      	adds	r7, #20
 801309e:	46bd      	mov	sp, r7
 80130a0:	bc80      	pop	{r7}
 80130a2:	4770      	bx	lr

080130a4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80130a4:	b5b0      	push	{r4, r5, r7, lr}
 80130a6:	b088      	sub	sp, #32
 80130a8:	af02      	add	r7, sp, #8
 80130aa:	60f8      	str	r0, [r7, #12]
 80130ac:	60b9      	str	r1, [r7, #8]
 80130ae:	607a      	str	r2, [r7, #4]
 80130b0:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	791b      	ldrb	r3, [r3, #4]
 80130b6:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	799b      	ldrb	r3, [r3, #6]
 80130bc:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	79db      	ldrb	r3, [r3, #7]
 80130c2:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	7a1b      	ldrb	r3, [r3, #8]
 80130c8:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	795b      	ldrb	r3, [r3, #5]
 80130ce:	f083 0301 	eor.w	r3, r3, #1
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d008      	beq.n	80130ea <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	7adb      	ldrb	r3, [r3, #11]
 80130dc:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	7a5b      	ldrb	r3, [r3, #9]
 80130e2:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	7a9b      	ldrb	r3, [r3, #10]
 80130e8:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80130ea:	7dfb      	ldrb	r3, [r7, #23]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d04a      	beq.n	8013186 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80130f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80130f4:	2b0f      	cmp	r3, #15
 80130f6:	d103      	bne.n	8013100 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	7a5b      	ldrb	r3, [r3, #9]
 80130fc:	75bb      	strb	r3, [r7, #22]
 80130fe:	e01d      	b.n	801313c <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	7b18      	ldrb	r0, [r3, #12]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	6919      	ldr	r1, [r3, #16]
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8013114:	68fa      	ldr	r2, [r7, #12]
 8013116:	6992      	ldr	r2, [r2, #24]
 8013118:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801311c:	9201      	str	r2, [sp, #4]
 801311e:	9300      	str	r3, [sp, #0]
 8013120:	462b      	mov	r3, r5
 8013122:	4622      	mov	r2, r4
 8013124:	f7ff fd39 	bl	8012b9a <RegionCommonChanVerifyDr>
 8013128:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801312a:	f083 0301 	eor.w	r3, r3, #1
 801312e:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013130:	2b00      	cmp	r3, #0
 8013132:	d003      	beq.n	801313c <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8013134:	7dfb      	ldrb	r3, [r7, #23]
 8013136:	f023 0302 	bic.w	r3, r3, #2
 801313a:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801313c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013140:	2b0f      	cmp	r3, #15
 8013142:	d103      	bne.n	801314c <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	7a9b      	ldrb	r3, [r3, #10]
 8013148:	757b      	strb	r3, [r7, #21]
 801314a:	e01c      	b.n	8013186 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8013158:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801315c:	4618      	mov	r0, r3
 801315e:	f7ff fd8e 	bl	8012c7e <RegionCommonValueInRange>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d10e      	bne.n	8013186 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801316e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8013172:	429a      	cmp	r2, r3
 8013174:	da03      	bge.n	801317e <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	7f5b      	ldrb	r3, [r3, #29]
 801317a:	757b      	strb	r3, [r7, #21]
 801317c:	e003      	b.n	8013186 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801317e:	7dfb      	ldrb	r3, [r7, #23]
 8013180:	f023 0304 	bic.w	r3, r3, #4
 8013184:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8013186:	7dfb      	ldrb	r3, [r7, #23]
 8013188:	2b07      	cmp	r3, #7
 801318a:	d105      	bne.n	8013198 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801318c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d101      	bne.n	8013198 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8013194:	2301      	movs	r3, #1
 8013196:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	7dba      	ldrb	r2, [r7, #22]
 801319c:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	7d7a      	ldrb	r2, [r7, #21]
 80131a2:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80131a4:	7d3a      	ldrb	r2, [r7, #20]
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	701a      	strb	r2, [r3, #0]

    return status;
 80131aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3718      	adds	r7, #24
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bdb0      	pop	{r4, r5, r7, pc}

080131b4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80131b4:	b480      	push	{r7}
 80131b6:	b083      	sub	sp, #12
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	6039      	str	r1, [r7, #0]
 80131be:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	4a06      	ldr	r2, [pc, #24]	@ (80131dc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80131c4:	fa02 f303 	lsl.w	r3, r2, r3
 80131c8:	461a      	mov	r2, r3
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	370c      	adds	r7, #12
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bc80      	pop	{r7}
 80131d8:	4770      	bx	lr
 80131da:	bf00      	nop
 80131dc:	000f4240 	.word	0x000f4240

080131e0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80131e0:	b480      	push	{r7}
 80131e2:	b083      	sub	sp, #12
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	4603      	mov	r3, r0
 80131e8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80131ea:	79fb      	ldrb	r3, [r7, #7]
 80131ec:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80131f0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bc80      	pop	{r7}
 80131fc:	4770      	bx	lr
	...

08013200 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8013200:	b480      	push	{r7}
 8013202:	b085      	sub	sp, #20
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	607a      	str	r2, [r7, #4]
 801320a:	603b      	str	r3, [r7, #0]
 801320c:	460b      	mov	r3, r1
 801320e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013210:	7afa      	ldrb	r2, [r7, #11]
 8013212:	7afb      	ldrb	r3, [r7, #11]
 8013214:	3b04      	subs	r3, #4
 8013216:	4619      	mov	r1, r3
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	fb03 f101 	mul.w	r1, r3, r1
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013224:	fb00 f303 	mul.w	r3, r0, r3
 8013228:	440b      	add	r3, r1
 801322a:	005b      	lsls	r3, r3, #1
 801322c:	2b00      	cmp	r3, #0
 801322e:	d013      	beq.n	8013258 <RegionCommonComputeRxWindowParameters+0x58>
 8013230:	7afb      	ldrb	r3, [r7, #11]
 8013232:	3b04      	subs	r3, #4
 8013234:	4619      	mov	r1, r3
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	fb03 f101 	mul.w	r1, r3, r1
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013242:	fb00 f303 	mul.w	r3, r0, r3
 8013246:	440b      	add	r3, r1
 8013248:	0059      	lsls	r1, r3, #1
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	440b      	add	r3, r1
 801324e:	1e59      	subs	r1, r3, #1
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	fbb1 f3f3 	udiv	r3, r1, r3
 8013256:	e00f      	b.n	8013278 <RegionCommonComputeRxWindowParameters+0x78>
 8013258:	7afb      	ldrb	r3, [r7, #11]
 801325a:	3b04      	subs	r3, #4
 801325c:	4619      	mov	r1, r3
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	fb03 f101 	mul.w	r1, r3, r1
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801326a:	fb00 f303 	mul.w	r3, r0, r3
 801326e:	440b      	add	r3, r1
 8013270:	0059      	lsls	r1, r3, #1
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	fbb1 f3f3 	udiv	r3, r1, r3
 8013278:	429a      	cmp	r2, r3
 801327a:	bf38      	it	cc
 801327c:	461a      	movcc	r2, r3
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	4619      	mov	r1, r3
 8013288:	69bb      	ldr	r3, [r7, #24]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	fb02 f303 	mul.w	r3, r2, r3
 8013292:	2b00      	cmp	r3, #0
 8013294:	d007      	beq.n	80132a6 <RegionCommonComputeRxWindowParameters+0xa6>
 8013296:	69bb      	ldr	r3, [r7, #24]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	fb02 f303 	mul.w	r3, r2, r3
 80132a0:	3301      	adds	r3, #1
 80132a2:	085b      	lsrs	r3, r3, #1
 80132a4:	e005      	b.n	80132b2 <RegionCommonComputeRxWindowParameters+0xb2>
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	68fa      	ldr	r2, [r7, #12]
 80132ac:	fb02 f303 	mul.w	r3, r2, r3
 80132b0:	085b      	lsrs	r3, r3, #1
 80132b2:	1acb      	subs	r3, r1, r3
 80132b4:	683a      	ldr	r2, [r7, #0]
 80132b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80132ba:	fb01 f202 	mul.w	r2, r1, r2
 80132be:	1a9b      	subs	r3, r3, r2
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	dd27      	ble.n	8013314 <RegionCommonComputeRxWindowParameters+0x114>
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	009b      	lsls	r3, r3, #2
 80132c8:	4619      	mov	r1, r3
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	68fa      	ldr	r2, [r7, #12]
 80132d0:	fb02 f303 	mul.w	r3, r2, r3
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d007      	beq.n	80132e8 <RegionCommonComputeRxWindowParameters+0xe8>
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	fb02 f303 	mul.w	r3, r2, r3
 80132e2:	3301      	adds	r3, #1
 80132e4:	085b      	lsrs	r3, r3, #1
 80132e6:	e005      	b.n	80132f4 <RegionCommonComputeRxWindowParameters+0xf4>
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	68fa      	ldr	r2, [r7, #12]
 80132ee:	fb02 f303 	mul.w	r3, r2, r3
 80132f2:	085b      	lsrs	r3, r3, #1
 80132f4:	1acb      	subs	r3, r1, r3
 80132f6:	683a      	ldr	r2, [r7, #0]
 80132f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80132fc:	fb01 f202 	mul.w	r2, r1, r2
 8013300:	1a9b      	subs	r3, r3, r2
 8013302:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8013306:	4a19      	ldr	r2, [pc, #100]	@ (801336c <RegionCommonComputeRxWindowParameters+0x16c>)
 8013308:	fb82 1203 	smull	r1, r2, r2, r3
 801330c:	1192      	asrs	r2, r2, #6
 801330e:	17db      	asrs	r3, r3, #31
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	e024      	b.n	801335e <RegionCommonComputeRxWindowParameters+0x15e>
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	4619      	mov	r1, r3
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	68fa      	ldr	r2, [r7, #12]
 8013320:	fb02 f303 	mul.w	r3, r2, r3
 8013324:	2b00      	cmp	r3, #0
 8013326:	d007      	beq.n	8013338 <RegionCommonComputeRxWindowParameters+0x138>
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	fb02 f303 	mul.w	r3, r2, r3
 8013332:	3301      	adds	r3, #1
 8013334:	085b      	lsrs	r3, r3, #1
 8013336:	e005      	b.n	8013344 <RegionCommonComputeRxWindowParameters+0x144>
 8013338:	69bb      	ldr	r3, [r7, #24]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	68fa      	ldr	r2, [r7, #12]
 801333e:	fb02 f303 	mul.w	r3, r2, r3
 8013342:	085b      	lsrs	r3, r3, #1
 8013344:	1acb      	subs	r3, r1, r3
 8013346:	683a      	ldr	r2, [r7, #0]
 8013348:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801334c:	fb01 f202 	mul.w	r2, r1, r2
 8013350:	1a9b      	subs	r3, r3, r2
 8013352:	4a06      	ldr	r2, [pc, #24]	@ (801336c <RegionCommonComputeRxWindowParameters+0x16c>)
 8013354:	fb82 1203 	smull	r1, r2, r2, r3
 8013358:	1192      	asrs	r2, r2, #6
 801335a:	17db      	asrs	r3, r3, #31
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	69fa      	ldr	r2, [r7, #28]
 8013360:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8013362:	bf00      	nop
 8013364:	3714      	adds	r7, #20
 8013366:	46bd      	mov	sp, r7
 8013368:	bc80      	pop	{r7}
 801336a:	4770      	bx	lr
 801336c:	10624dd3 	.word	0x10624dd3

08013370 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	4603      	mov	r3, r0
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801337e:	2300      	movs	r3, #0
 8013380:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013386:	005b      	lsls	r3, r3, #1
 8013388:	4618      	mov	r0, r3
 801338a:	f7ed fa73 	bl	8000874 <__aeabi_ui2f>
 801338e:	4603      	mov	r3, r0
 8013390:	4619      	mov	r1, r3
 8013392:	68b8      	ldr	r0, [r7, #8]
 8013394:	f7ed f9bc 	bl	8000710 <__aeabi_fsub>
 8013398:	4603      	mov	r3, r0
 801339a:	6879      	ldr	r1, [r7, #4]
 801339c:	4618      	mov	r0, r3
 801339e:	f7ed f9b7 	bl	8000710 <__aeabi_fsub>
 80133a2:	4603      	mov	r3, r0
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ed f8a7 	bl	80004f8 <__aeabi_f2d>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	4610      	mov	r0, r2
 80133b0:	4619      	mov	r1, r3
 80133b2:	f00d ff09 	bl	80211c8 <floor>
 80133b6:	4602      	mov	r2, r0
 80133b8:	460b      	mov	r3, r1
 80133ba:	4610      	mov	r0, r2
 80133bc:	4619      	mov	r1, r3
 80133be:	f7ed f97b 	bl	80006b8 <__aeabi_d2iz>
 80133c2:	4603      	mov	r3, r0
 80133c4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80133c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3718      	adds	r7, #24
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}

080133d2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80133d2:	b590      	push	{r4, r7, lr}
 80133d4:	b087      	sub	sp, #28
 80133d6:	af00      	add	r7, sp, #0
 80133d8:	60f8      	str	r0, [r7, #12]
 80133da:	60b9      	str	r1, [r7, #8]
 80133dc:	607a      	str	r2, [r7, #4]
 80133de:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80133e0:	2300      	movs	r3, #0
 80133e2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80133e4:	2300      	movs	r3, #0
 80133e6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80133e8:	2300      	movs	r3, #0
 80133ea:	757b      	strb	r3, [r7, #21]
 80133ec:	2300      	movs	r3, #0
 80133ee:	753b      	strb	r3, [r7, #20]
 80133f0:	e09c      	b.n	801352c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80133f2:	2300      	movs	r3, #0
 80133f4:	74fb      	strb	r3, [r7, #19]
 80133f6:	e08f      	b.n	8013518 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	685a      	ldr	r2, [r3, #4]
 80133fc:	7d3b      	ldrb	r3, [r7, #20]
 80133fe:	005b      	lsls	r3, r3, #1
 8013400:	4413      	add	r3, r2
 8013402:	881b      	ldrh	r3, [r3, #0]
 8013404:	461a      	mov	r2, r3
 8013406:	7cfb      	ldrb	r3, [r7, #19]
 8013408:	fa42 f303 	asr.w	r3, r2, r3
 801340c:	f003 0301 	and.w	r3, r3, #1
 8013410:	2b00      	cmp	r3, #0
 8013412:	d07e      	beq.n	8013512 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	689a      	ldr	r2, [r3, #8]
 8013418:	7d79      	ldrb	r1, [r7, #21]
 801341a:	7cfb      	ldrb	r3, [r7, #19]
 801341c:	440b      	add	r3, r1
 801341e:	4619      	mov	r1, r3
 8013420:	460b      	mov	r3, r1
 8013422:	005b      	lsls	r3, r3, #1
 8013424:	440b      	add	r3, r1
 8013426:	009b      	lsls	r3, r3, #2
 8013428:	4413      	add	r3, r2
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d06b      	beq.n	8013508 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	f083 0301 	eor.w	r3, r3, #1
 8013438:	b2db      	uxtb	r3, r3
 801343a:	2b00      	cmp	r3, #0
 801343c:	d011      	beq.n	8013462 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013442:	2b00      	cmp	r3, #0
 8013444:	d00d      	beq.n	8013462 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	695a      	ldr	r2, [r3, #20]
 801344a:	7d3b      	ldrb	r3, [r7, #20]
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	4413      	add	r3, r2
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	461a      	mov	r2, r3
 8013454:	7cfb      	ldrb	r3, [r7, #19]
 8013456:	fa42 f303 	asr.w	r3, r2, r3
 801345a:	f003 0301 	and.w	r3, r3, #1
 801345e:	2b00      	cmp	r3, #0
 8013460:	d054      	beq.n	801350c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	785b      	ldrb	r3, [r3, #1]
 8013466:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	689a      	ldr	r2, [r3, #8]
 801346c:	7d79      	ldrb	r1, [r7, #21]
 801346e:	7cfb      	ldrb	r3, [r7, #19]
 8013470:	440b      	add	r3, r1
 8013472:	4619      	mov	r1, r3
 8013474:	460b      	mov	r3, r1
 8013476:	005b      	lsls	r3, r3, #1
 8013478:	440b      	add	r3, r1
 801347a:	009b      	lsls	r3, r3, #2
 801347c:	4413      	add	r3, r2
 801347e:	7a1b      	ldrb	r3, [r3, #8]
 8013480:	f343 0303 	sbfx	r3, r3, #0, #4
 8013484:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013486:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	689a      	ldr	r2, [r3, #8]
 801348c:	7d79      	ldrb	r1, [r7, #21]
 801348e:	7cfb      	ldrb	r3, [r7, #19]
 8013490:	440b      	add	r3, r1
 8013492:	4619      	mov	r1, r3
 8013494:	460b      	mov	r3, r1
 8013496:	005b      	lsls	r3, r3, #1
 8013498:	440b      	add	r3, r1
 801349a:	009b      	lsls	r3, r3, #2
 801349c:	4413      	add	r3, r2
 801349e:	7a1b      	ldrb	r3, [r3, #8]
 80134a0:	f343 1303 	sbfx	r3, r3, #4, #4
 80134a4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80134a6:	461a      	mov	r2, r3
 80134a8:	4621      	mov	r1, r4
 80134aa:	f7ff fbe8 	bl	8012c7e <RegionCommonValueInRange>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d02d      	beq.n	8013510 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	68da      	ldr	r2, [r3, #12]
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	6899      	ldr	r1, [r3, #8]
 80134bc:	7d78      	ldrb	r0, [r7, #21]
 80134be:	7cfb      	ldrb	r3, [r7, #19]
 80134c0:	4403      	add	r3, r0
 80134c2:	4618      	mov	r0, r3
 80134c4:	4603      	mov	r3, r0
 80134c6:	005b      	lsls	r3, r3, #1
 80134c8:	4403      	add	r3, r0
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	440b      	add	r3, r1
 80134ce:	7a5b      	ldrb	r3, [r3, #9]
 80134d0:	4619      	mov	r1, r3
 80134d2:	460b      	mov	r3, r1
 80134d4:	005b      	lsls	r3, r3, #1
 80134d6:	440b      	add	r3, r1
 80134d8:	00db      	lsls	r3, r3, #3
 80134da:	4413      	add	r3, r2
 80134dc:	7d1b      	ldrb	r3, [r3, #20]
 80134de:	f083 0301 	eor.w	r3, r3, #1
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d003      	beq.n	80134f0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80134e8:	7dbb      	ldrb	r3, [r7, #22]
 80134ea:	3301      	adds	r3, #1
 80134ec:	75bb      	strb	r3, [r7, #22]
                    continue;
 80134ee:	e010      	b.n	8013512 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80134f0:	7dfb      	ldrb	r3, [r7, #23]
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	75fa      	strb	r2, [r7, #23]
 80134f6:	461a      	mov	r2, r3
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	4413      	add	r3, r2
 80134fc:	7d79      	ldrb	r1, [r7, #21]
 80134fe:	7cfa      	ldrb	r2, [r7, #19]
 8013500:	440a      	add	r2, r1
 8013502:	b2d2      	uxtb	r2, r2
 8013504:	701a      	strb	r2, [r3, #0]
 8013506:	e004      	b.n	8013512 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8013508:	bf00      	nop
 801350a:	e002      	b.n	8013512 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801350c:	bf00      	nop
 801350e:	e000      	b.n	8013512 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8013510:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8013512:	7cfb      	ldrb	r3, [r7, #19]
 8013514:	3301      	adds	r3, #1
 8013516:	74fb      	strb	r3, [r7, #19]
 8013518:	7cfb      	ldrb	r3, [r7, #19]
 801351a:	2b0f      	cmp	r3, #15
 801351c:	f67f af6c 	bls.w	80133f8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8013520:	7d7b      	ldrb	r3, [r7, #21]
 8013522:	3310      	adds	r3, #16
 8013524:	757b      	strb	r3, [r7, #21]
 8013526:	7d3b      	ldrb	r3, [r7, #20]
 8013528:	3301      	adds	r3, #1
 801352a:	753b      	strb	r3, [r7, #20]
 801352c:	7d7b      	ldrb	r3, [r7, #21]
 801352e:	b29a      	uxth	r2, r3
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	8a1b      	ldrh	r3, [r3, #16]
 8013534:	429a      	cmp	r2, r3
 8013536:	f4ff af5c 	bcc.w	80133f2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	7dfa      	ldrb	r2, [r7, #23]
 801353e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	7dba      	ldrb	r2, [r7, #22]
 8013544:	701a      	strb	r2, [r3, #0]
}
 8013546:	bf00      	nop
 8013548:	371c      	adds	r7, #28
 801354a:	46bd      	mov	sp, r7
 801354c:	bd90      	pop	{r4, r7, pc}

0801354e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801354e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013550:	b08b      	sub	sp, #44	@ 0x2c
 8013552:	af04      	add	r7, sp, #16
 8013554:	60f8      	str	r0, [r7, #12]
 8013556:	60b9      	str	r1, [r7, #8]
 8013558:	607a      	str	r2, [r7, #4]
 801355a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	4618      	mov	r0, r3
 8013562:	f007 fe7f 	bl	801b264 <UTIL_TIMER_GetElapsedTime>
 8013566:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	1ad2      	subs	r2, r2, r3
 8013570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013572:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8013574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013576:	2201      	movs	r2, #1
 8013578:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	2200      	movs	r2, #0
 801357e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	685b      	ldr	r3, [r3, #4]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d004      	beq.n	8013592 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801358c:	697a      	ldr	r2, [r7, #20]
 801358e:	429a      	cmp	r2, r3
 8013590:	d32b      	bcc.n	80135ea <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	2200      	movs	r2, #0
 8013596:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	69db      	ldr	r3, [r3, #28]
 801359c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80135a2:	68dd      	ldr	r5, [r3, #12]
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	7a5e      	ldrb	r6, [r3, #9]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	f893 c008 	ldrb.w	ip, [r3, #8]
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	7d1b      	ldrb	r3, [r3, #20]
 80135b2:	68fa      	ldr	r2, [r7, #12]
 80135b4:	6992      	ldr	r2, [r2, #24]
 80135b6:	9203      	str	r2, [sp, #12]
 80135b8:	68fa      	ldr	r2, [r7, #12]
 80135ba:	f10d 0e04 	add.w	lr, sp, #4
 80135be:	320c      	adds	r2, #12
 80135c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135c4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	4663      	mov	r3, ip
 80135cc:	4632      	mov	r2, r6
 80135ce:	4629      	mov	r1, r5
 80135d0:	4620      	mov	r0, r4
 80135d2:	f7ff fc25 	bl	8012e20 <RegionCommonUpdateBandTimeOff>
 80135d6:	4602      	mov	r2, r0
 80135d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135da:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	69d8      	ldr	r0, [r3, #28]
 80135e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e2:	683a      	ldr	r2, [r7, #0]
 80135e4:	6879      	ldr	r1, [r7, #4]
 80135e6:	f7ff fef4 	bl	80133d2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	781b      	ldrb	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d004      	beq.n	80135fc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80135f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135f4:	2200      	movs	r2, #0
 80135f6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80135f8:	2300      	movs	r3, #0
 80135fa:	e006      	b.n	801360a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80135fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d001      	beq.n	8013608 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013604:	230b      	movs	r3, #11
 8013606:	e000      	b.n	801360a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013608:	230c      	movs	r3, #12
    }
}
 801360a:	4618      	mov	r0, r3
 801360c:	371c      	adds	r7, #28
 801360e:	46bd      	mov	sp, r7
 8013610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013612 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8013612:	b5b0      	push	{r4, r5, r7, lr}
 8013614:	b086      	sub	sp, #24
 8013616:	af02      	add	r7, sp, #8
 8013618:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f993 2000 	ldrsb.w	r2, [r3]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801362c:	429a      	cmp	r2, r3
 801362e:	d103      	bne.n	8013638 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013636:	e026      	b.n	8013686 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8013638:	7bfb      	ldrb	r3, [r7, #15]
 801363a:	3b01      	subs	r3, #1
 801363c:	b2db      	uxtb	r3, r3
 801363e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013646:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801364a:	429a      	cmp	r2, r3
 801364c:	d019      	beq.n	8013682 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	78d8      	ldrb	r0, [r3, #3]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6859      	ldr	r1, [r3, #4]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	6892      	ldr	r2, [r2, #8]
 8013666:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801366a:	9201      	str	r2, [sp, #4]
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	462b      	mov	r3, r5
 8013670:	4622      	mov	r2, r4
 8013672:	f7ff fa92 	bl	8012b9a <RegionCommonChanVerifyDr>
 8013676:	4603      	mov	r3, r0
 8013678:	f083 0301 	eor.w	r3, r3, #1
 801367c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801367e:	2b00      	cmp	r3, #0
 8013680:	d1da      	bne.n	8013638 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8013682:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8013686:	4618      	mov	r0, r3
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bdb0      	pop	{r4, r5, r7, pc}

0801368e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801368e:	b480      	push	{r7}
 8013690:	b083      	sub	sp, #12
 8013692:	af00      	add	r7, sp, #0
 8013694:	4603      	mov	r3, r0
 8013696:	460a      	mov	r2, r1
 8013698:	71fb      	strb	r3, [r7, #7]
 801369a:	4613      	mov	r3, r2
 801369c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801369e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80136a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80136a6:	4293      	cmp	r3, r2
 80136a8:	bfb8      	it	lt
 80136aa:	4613      	movlt	r3, r2
 80136ac:	b25b      	sxtb	r3, r3
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	370c      	adds	r7, #12
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bc80      	pop	{r7}
 80136b6:	4770      	bx	lr

080136b8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80136b8:	b480      	push	{r7}
 80136ba:	b083      	sub	sp, #12
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	009b      	lsls	r3, r3, #2
 80136c6:	683a      	ldr	r2, [r7, #0]
 80136c8:	4413      	add	r3, r2
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	4a07      	ldr	r2, [pc, #28]	@ (80136ec <RegionCommonGetBandwidth+0x34>)
 80136ce:	4293      	cmp	r3, r2
 80136d0:	d004      	beq.n	80136dc <RegionCommonGetBandwidth+0x24>
 80136d2:	4a07      	ldr	r2, [pc, #28]	@ (80136f0 <RegionCommonGetBandwidth+0x38>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d003      	beq.n	80136e0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	e002      	b.n	80136e2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80136dc:	2301      	movs	r3, #1
 80136de:	e000      	b.n	80136e2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80136e0:	2302      	movs	r3, #2
    }
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	370c      	adds	r7, #12
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bc80      	pop	{r7}
 80136ea:	4770      	bx	lr
 80136ec:	0003d090 	.word	0x0003d090
 80136f0:	0007a120 	.word	0x0007a120

080136f4 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b086      	sub	sp, #24
 80136f8:	af04      	add	r7, sp, #16
 80136fa:	4603      	mov	r3, r0
 80136fc:	6039      	str	r1, [r7, #0]
 80136fe:	71fb      	strb	r3, [r7, #7]
 8013700:	4613      	mov	r3, r2
 8013702:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8013704:	79fb      	ldrb	r3, [r7, #7]
 8013706:	2b05      	cmp	r3, #5
 8013708:	d810      	bhi.n	801372c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801370a:	79fb      	ldrb	r3, [r7, #7]
 801370c:	4a0f      	ldr	r2, [pc, #60]	@ (801374c <RegionCommonRxConfigPrint+0x58>)
 801370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013712:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8013716:	9202      	str	r2, [sp, #8]
 8013718:	683a      	ldr	r2, [r7, #0]
 801371a:	9201      	str	r2, [sp, #4]
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	4b0c      	ldr	r3, [pc, #48]	@ (8013750 <RegionCommonRxConfigPrint+0x5c>)
 8013720:	2201      	movs	r2, #1
 8013722:	2100      	movs	r1, #0
 8013724:	2002      	movs	r0, #2
 8013726:	f006 fe17 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801372a:	e00a      	b.n	8013742 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801372c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013730:	9301      	str	r3, [sp, #4]
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	9300      	str	r3, [sp, #0]
 8013736:	4b07      	ldr	r3, [pc, #28]	@ (8013754 <RegionCommonRxConfigPrint+0x60>)
 8013738:	2201      	movs	r2, #1
 801373a:	2100      	movs	r1, #0
 801373c:	2002      	movs	r0, #2
 801373e:	f006 fe0b 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
}
 8013742:	bf00      	nop
 8013744:	3708      	adds	r7, #8
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	200000bc 	.word	0x200000bc
 8013750:	08021614 	.word	0x08021614
 8013754:	08021634 	.word	0x08021634

08013758 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af02      	add	r7, sp, #8
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	460b      	mov	r3, r1
 8013762:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8013764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	9300      	str	r3, [sp, #0]
 801376e:	4b05      	ldr	r3, [pc, #20]	@ (8013784 <RegionCommonTxConfigPrint+0x2c>)
 8013770:	2201      	movs	r2, #1
 8013772:	2100      	movs	r1, #0
 8013774:	2002      	movs	r0, #2
 8013776:	f006 fdef 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
}
 801377a:	bf00      	nop
 801377c:	3708      	adds	r7, #8
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	08021650 	.word	0x08021650

08013788 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013792:	4b2d      	ldr	r3, [pc, #180]	@ (8013848 <VerifyRfFreq+0xc0>)
 8013794:	6a1b      	ldr	r3, [r3, #32]
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	4798      	blx	r3
 801379a:	4603      	mov	r3, r0
 801379c:	f083 0301 	eor.w	r3, r3, #1
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d001      	beq.n	80137aa <VerifyRfFreq+0x22>
    {
        return false;
 80137a6:	2300      	movs	r3, #0
 80137a8:	e04a      	b.n	8013840 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4a27      	ldr	r2, [pc, #156]	@ (801384c <VerifyRfFreq+0xc4>)
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d307      	bcc.n	80137c2 <VerifyRfFreq+0x3a>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4a26      	ldr	r2, [pc, #152]	@ (8013850 <VerifyRfFreq+0xc8>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d803      	bhi.n	80137c2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	2202      	movs	r2, #2
 80137be:	701a      	strb	r2, [r3, #0]
 80137c0:	e03d      	b.n	801383e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	4a22      	ldr	r2, [pc, #136]	@ (8013850 <VerifyRfFreq+0xc8>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	d907      	bls.n	80137da <VerifyRfFreq+0x52>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4a21      	ldr	r2, [pc, #132]	@ (8013854 <VerifyRfFreq+0xcc>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d803      	bhi.n	80137da <VerifyRfFreq+0x52>
    {
        *band = 0;
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	2200      	movs	r2, #0
 80137d6:	701a      	strb	r2, [r3, #0]
 80137d8:	e031      	b.n	801383e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4a1d      	ldr	r2, [pc, #116]	@ (8013854 <VerifyRfFreq+0xcc>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d907      	bls.n	80137f2 <VerifyRfFreq+0x6a>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4a1c      	ldr	r2, [pc, #112]	@ (8013858 <VerifyRfFreq+0xd0>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d803      	bhi.n	80137f2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	2201      	movs	r2, #1
 80137ee:	701a      	strb	r2, [r3, #0]
 80137f0:	e025      	b.n	801383e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4a19      	ldr	r2, [pc, #100]	@ (801385c <VerifyRfFreq+0xd4>)
 80137f6:	4293      	cmp	r3, r2
 80137f8:	d907      	bls.n	801380a <VerifyRfFreq+0x82>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4a18      	ldr	r2, [pc, #96]	@ (8013860 <VerifyRfFreq+0xd8>)
 80137fe:	4293      	cmp	r3, r2
 8013800:	d803      	bhi.n	801380a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	2205      	movs	r2, #5
 8013806:	701a      	strb	r2, [r3, #0]
 8013808:	e019      	b.n	801383e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	4a15      	ldr	r2, [pc, #84]	@ (8013864 <VerifyRfFreq+0xdc>)
 801380e:	4293      	cmp	r3, r2
 8013810:	d907      	bls.n	8013822 <VerifyRfFreq+0x9a>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4a14      	ldr	r2, [pc, #80]	@ (8013868 <VerifyRfFreq+0xe0>)
 8013816:	4293      	cmp	r3, r2
 8013818:	d803      	bhi.n	8013822 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	2203      	movs	r2, #3
 801381e:	701a      	strb	r2, [r3, #0]
 8013820:	e00d      	b.n	801383e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	4a11      	ldr	r2, [pc, #68]	@ (801386c <VerifyRfFreq+0xe4>)
 8013826:	4293      	cmp	r3, r2
 8013828:	d307      	bcc.n	801383a <VerifyRfFreq+0xb2>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	4a10      	ldr	r2, [pc, #64]	@ (8013870 <VerifyRfFreq+0xe8>)
 801382e:	4293      	cmp	r3, r2
 8013830:	d803      	bhi.n	801383a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	2204      	movs	r2, #4
 8013836:	701a      	strb	r2, [r3, #0]
 8013838:	e001      	b.n	801383e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801383a:	2300      	movs	r3, #0
 801383c:	e000      	b.n	8013840 <VerifyRfFreq+0xb8>
    }
    return true;
 801383e:	2301      	movs	r3, #1
}
 8013840:	4618      	mov	r0, r3
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	08021f8c 	.word	0x08021f8c
 801384c:	337055c0 	.word	0x337055c0
 8013850:	338eda3f 	.word	0x338eda3f
 8013854:	33bca100 	.word	0x33bca100
 8013858:	33c5c8c0 	.word	0x33c5c8c0
 801385c:	33c74f5f 	.word	0x33c74f5f
 8013860:	33cef080 	.word	0x33cef080
 8013864:	33d1fdbf 	.word	0x33d1fdbf
 8013868:	33d5ce50 	.word	0x33d5ce50
 801386c:	33d691a0 	.word	0x33d691a0
 8013870:	33db2580 	.word	0x33db2580

08013874 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8013874:	b590      	push	{r4, r7, lr}
 8013876:	b08b      	sub	sp, #44	@ 0x2c
 8013878:	af04      	add	r7, sp, #16
 801387a:	4603      	mov	r3, r0
 801387c:	460a      	mov	r2, r1
 801387e:	71fb      	strb	r3, [r7, #7]
 8013880:	4613      	mov	r3, r2
 8013882:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8013884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013888:	4a1f      	ldr	r2, [pc, #124]	@ (8013908 <GetTimeOnAir+0x94>)
 801388a:	5cd3      	ldrb	r3, [r2, r3]
 801388c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013892:	491e      	ldr	r1, [pc, #120]	@ (801390c <GetTimeOnAir+0x98>)
 8013894:	4618      	mov	r0, r3
 8013896:	f7ff ff0f 	bl	80136b8 <RegionCommonGetBandwidth>
 801389a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801389c:	2300      	movs	r3, #0
 801389e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80138a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138a4:	2b07      	cmp	r3, #7
 80138a6:	d118      	bne.n	80138da <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80138a8:	4b19      	ldr	r3, [pc, #100]	@ (8013910 <GetTimeOnAir+0x9c>)
 80138aa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80138ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80138b4:	fb02 f303 	mul.w	r3, r2, r3
 80138b8:	4619      	mov	r1, r3
 80138ba:	88bb      	ldrh	r3, [r7, #4]
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	2201      	movs	r2, #1
 80138c0:	9203      	str	r2, [sp, #12]
 80138c2:	9302      	str	r3, [sp, #8]
 80138c4:	2300      	movs	r3, #0
 80138c6:	9301      	str	r3, [sp, #4]
 80138c8:	2305      	movs	r3, #5
 80138ca:	9300      	str	r3, [sp, #0]
 80138cc:	2300      	movs	r3, #0
 80138ce:	460a      	mov	r2, r1
 80138d0:	68f9      	ldr	r1, [r7, #12]
 80138d2:	2000      	movs	r0, #0
 80138d4:	47a0      	blx	r4
 80138d6:	6178      	str	r0, [r7, #20]
 80138d8:	e011      	b.n	80138fe <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80138da:	4b0d      	ldr	r3, [pc, #52]	@ (8013910 <GetTimeOnAir+0x9c>)
 80138dc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80138de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80138e2:	88bb      	ldrh	r3, [r7, #4]
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	2101      	movs	r1, #1
 80138e8:	9103      	str	r1, [sp, #12]
 80138ea:	9302      	str	r3, [sp, #8]
 80138ec:	2300      	movs	r3, #0
 80138ee:	9301      	str	r3, [sp, #4]
 80138f0:	2308      	movs	r3, #8
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	2301      	movs	r3, #1
 80138f6:	68f9      	ldr	r1, [r7, #12]
 80138f8:	2001      	movs	r0, #1
 80138fa:	47a0      	blx	r4
 80138fc:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80138fe:	697b      	ldr	r3, [r7, #20]
}
 8013900:	4618      	mov	r0, r3
 8013902:	371c      	adds	r7, #28
 8013904:	46bd      	mov	sp, r7
 8013906:	bd90      	pop	{r4, r7, pc}
 8013908:	08021b4c 	.word	0x08021b4c
 801390c:	08021b54 	.word	0x08021b54
 8013910:	08021f8c 	.word	0x08021f8c

08013914 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b088      	sub	sp, #32
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801391c:	2300      	movs	r3, #0
 801391e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	3b01      	subs	r3, #1
 8013926:	2b37      	cmp	r3, #55	@ 0x37
 8013928:	f200 8122 	bhi.w	8013b70 <RegionEU868GetPhyParam+0x25c>
 801392c:	a201      	add	r2, pc, #4	@ (adr r2, 8013934 <RegionEU868GetPhyParam+0x20>)
 801392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013932:	bf00      	nop
 8013934:	08013a15 	.word	0x08013a15
 8013938:	08013a1b 	.word	0x08013a1b
 801393c:	08013b71 	.word	0x08013b71
 8013940:	08013b71 	.word	0x08013b71
 8013944:	08013b71 	.word	0x08013b71
 8013948:	08013a21 	.word	0x08013a21
 801394c:	08013b71 	.word	0x08013b71
 8013950:	08013a5b 	.word	0x08013a5b
 8013954:	08013b71 	.word	0x08013b71
 8013958:	08013a61 	.word	0x08013a61
 801395c:	08013a67 	.word	0x08013a67
 8013960:	08013a6d 	.word	0x08013a6d
 8013964:	08013a73 	.word	0x08013a73
 8013968:	08013a83 	.word	0x08013a83
 801396c:	08013a93 	.word	0x08013a93
 8013970:	08013a99 	.word	0x08013a99
 8013974:	08013aa1 	.word	0x08013aa1
 8013978:	08013aa9 	.word	0x08013aa9
 801397c:	08013ab1 	.word	0x08013ab1
 8013980:	08013ab9 	.word	0x08013ab9
 8013984:	08013ac1 	.word	0x08013ac1
 8013988:	08013ad5 	.word	0x08013ad5
 801398c:	08013adb 	.word	0x08013adb
 8013990:	08013ae1 	.word	0x08013ae1
 8013994:	08013ae7 	.word	0x08013ae7
 8013998:	08013af3 	.word	0x08013af3
 801399c:	08013aff 	.word	0x08013aff
 80139a0:	08013b05 	.word	0x08013b05
 80139a4:	08013b0d 	.word	0x08013b0d
 80139a8:	08013b13 	.word	0x08013b13
 80139ac:	08013b19 	.word	0x08013b19
 80139b0:	08013b21 	.word	0x08013b21
 80139b4:	08013a27 	.word	0x08013a27
 80139b8:	08013b71 	.word	0x08013b71
 80139bc:	08013b71 	.word	0x08013b71
 80139c0:	08013b71 	.word	0x08013b71
 80139c4:	08013b71 	.word	0x08013b71
 80139c8:	08013b71 	.word	0x08013b71
 80139cc:	08013b71 	.word	0x08013b71
 80139d0:	08013b71 	.word	0x08013b71
 80139d4:	08013b71 	.word	0x08013b71
 80139d8:	08013b71 	.word	0x08013b71
 80139dc:	08013b71 	.word	0x08013b71
 80139e0:	08013b71 	.word	0x08013b71
 80139e4:	08013b71 	.word	0x08013b71
 80139e8:	08013b71 	.word	0x08013b71
 80139ec:	08013b27 	.word	0x08013b27
 80139f0:	08013b2d 	.word	0x08013b2d
 80139f4:	08013b3b 	.word	0x08013b3b
 80139f8:	08013b71 	.word	0x08013b71
 80139fc:	08013b71 	.word	0x08013b71
 8013a00:	08013b41 	.word	0x08013b41
 8013a04:	08013b47 	.word	0x08013b47
 8013a08:	08013b71 	.word	0x08013b71
 8013a0c:	08013b4d 	.word	0x08013b4d
 8013a10:	08013b5d 	.word	0x08013b5d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8013a14:	2300      	movs	r3, #0
 8013a16:	61bb      	str	r3, [r7, #24]
            break;
 8013a18:	e0ab      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	61bb      	str	r3, [r7, #24]
            break;
 8013a1e:	e0a8      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8013a20:	2300      	movs	r3, #0
 8013a22:	61bb      	str	r3, [r7, #24]
            break;
 8013a24:	e0a5      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013a2c:	733b      	strb	r3, [r7, #12]
 8013a2e:	2307      	movs	r3, #7
 8013a30:	737b      	strb	r3, [r7, #13]
 8013a32:	2300      	movs	r3, #0
 8013a34:	73bb      	strb	r3, [r7, #14]
 8013a36:	2310      	movs	r3, #16
 8013a38:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8013a3a:	4b51      	ldr	r3, [pc, #324]	@ (8013b80 <RegionEU868GetPhyParam+0x26c>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013a42:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8013a44:	4b4e      	ldr	r3, [pc, #312]	@ (8013b80 <RegionEU868GetPhyParam+0x26c>)
 8013a46:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013a48:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8013a4a:	f107 030c 	add.w	r3, r7, #12
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7ff fddf 	bl	8013612 <RegionCommonGetNextLowerTxDr>
 8013a54:	4603      	mov	r3, r0
 8013a56:	61bb      	str	r3, [r7, #24]
            break;
 8013a58:	e08b      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	61bb      	str	r3, [r7, #24]
            break;
 8013a5e:	e088      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8013a60:	2300      	movs	r3, #0
 8013a62:	61bb      	str	r3, [r7, #24]
            break;
 8013a64:	e085      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8013a66:	2340      	movs	r3, #64	@ 0x40
 8013a68:	61bb      	str	r3, [r7, #24]
            break;
 8013a6a:	e082      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8013a6c:	2320      	movs	r3, #32
 8013a6e:	61bb      	str	r3, [r7, #24]
            break;
 8013a70:	e07f      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013a78:	461a      	mov	r2, r3
 8013a7a:	4b42      	ldr	r3, [pc, #264]	@ (8013b84 <RegionEU868GetPhyParam+0x270>)
 8013a7c:	5c9b      	ldrb	r3, [r3, r2]
 8013a7e:	61bb      	str	r3, [r7, #24]
            break;
 8013a80:	e077      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013a88:	461a      	mov	r2, r3
 8013a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8013b88 <RegionEU868GetPhyParam+0x274>)
 8013a8c:	5c9b      	ldrb	r3, [r3, r2]
 8013a8e:	61bb      	str	r3, [r7, #24]
            break;
 8013a90:	e06f      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8013a92:	2301      	movs	r3, #1
 8013a94:	61bb      	str	r3, [r7, #24]
            break;
 8013a96:	e06c      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8013a98:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013a9c:	61bb      	str	r3, [r7, #24]
            break;
 8013a9e:	e068      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8013aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013aa4:	61bb      	str	r3, [r7, #24]
            break;
 8013aa6:	e064      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8013aa8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8013aac:	61bb      	str	r3, [r7, #24]
            break;
 8013aae:	e060      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8013ab0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013ab4:	61bb      	str	r3, [r7, #24]
            break;
 8013ab6:	e05c      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8013ab8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8013abc:	61bb      	str	r3, [r7, #24]
            break;
 8013abe:	e058      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8013ac0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013ac4:	4831      	ldr	r0, [pc, #196]	@ (8013b8c <RegionEU868GetPhyParam+0x278>)
 8013ac6:	f003 fecb 	bl	8017860 <randr>
 8013aca:	4603      	mov	r3, r0
 8013acc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8013ad0:	61bb      	str	r3, [r7, #24]
            break;
 8013ad2:	e04e      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	61bb      	str	r3, [r7, #24]
            break;
 8013ad8:	e04b      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8013ada:	4b2d      	ldr	r3, [pc, #180]	@ (8013b90 <RegionEU868GetPhyParam+0x27c>)
 8013adc:	61bb      	str	r3, [r7, #24]
            break;
 8013ade:	e048      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	61bb      	str	r3, [r7, #24]
            break;
 8013ae4:	e045      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013ae6:	4b26      	ldr	r3, [pc, #152]	@ (8013b80 <RegionEU868GetPhyParam+0x26c>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013aee:	61bb      	str	r3, [r7, #24]
            break;
 8013af0:	e03f      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8013af2:	4b23      	ldr	r3, [pc, #140]	@ (8013b80 <RegionEU868GetPhyParam+0x26c>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013afa:	61bb      	str	r3, [r7, #24]
            break;
 8013afc:	e039      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8013afe:	2310      	movs	r3, #16
 8013b00:	61bb      	str	r3, [r7, #24]
            break;
 8013b02:	e036      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8013b04:	4b1e      	ldr	r3, [pc, #120]	@ (8013b80 <RegionEU868GetPhyParam+0x26c>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	61bb      	str	r3, [r7, #24]
            break;
 8013b0a:	e032      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	61bb      	str	r3, [r7, #24]
            break;
 8013b10:	e02f      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8013b12:	2300      	movs	r3, #0
 8013b14:	61bb      	str	r3, [r7, #24]
            break;
 8013b16:	e02c      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8013b18:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8013b1c:	61bb      	str	r3, [r7, #24]
            break;
 8013b1e:	e028      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8013b20:	4b1c      	ldr	r3, [pc, #112]	@ (8013b94 <RegionEU868GetPhyParam+0x280>)
 8013b22:	61bb      	str	r3, [r7, #24]
            break;
 8013b24:	e025      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8013b26:	4b1a      	ldr	r3, [pc, #104]	@ (8013b90 <RegionEU868GetPhyParam+0x27c>)
 8013b28:	61bb      	str	r3, [r7, #24]
            break;
 8013b2a:	e022      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8013b2c:	2311      	movs	r3, #17
 8013b2e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8013b30:	2301      	movs	r3, #1
 8013b32:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8013b34:	2300      	movs	r3, #0
 8013b36:	76bb      	strb	r3, [r7, #26]
            break;
 8013b38:	e01b      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8013b3a:	2303      	movs	r3, #3
 8013b3c:	61bb      	str	r3, [r7, #24]
            break;
 8013b3e:	e018      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8013b40:	4b13      	ldr	r3, [pc, #76]	@ (8013b90 <RegionEU868GetPhyParam+0x27c>)
 8013b42:	61bb      	str	r3, [r7, #24]
            break;
 8013b44:	e015      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8013b46:	2303      	movs	r3, #3
 8013b48:	61bb      	str	r3, [r7, #24]
            break;
 8013b4a:	e012      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b52:	461a      	mov	r2, r3
 8013b54:	4b10      	ldr	r3, [pc, #64]	@ (8013b98 <RegionEU868GetPhyParam+0x284>)
 8013b56:	5c9b      	ldrb	r3, [r3, r2]
 8013b58:	61bb      	str	r3, [r7, #24]
            break;
 8013b5a:	e00a      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b62:	490e      	ldr	r1, [pc, #56]	@ (8013b9c <RegionEU868GetPhyParam+0x288>)
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7ff fda7 	bl	80136b8 <RegionCommonGetBandwidth>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	61bb      	str	r3, [r7, #24]
            break;
 8013b6e:	e000      	b.n	8013b72 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8013b70:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	61fb      	str	r3, [r7, #28]
 8013b76:	69fb      	ldr	r3, [r7, #28]
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3720      	adds	r7, #32
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	20001220 	.word	0x20001220
 8013b84:	08021b74 	.word	0x08021b74
 8013b88:	08021b7c 	.word	0x08021b7c
 8013b8c:	fffffc18 	.word	0xfffffc18
 8013b90:	33d3e608 	.word	0x33d3e608
 8013b94:	4009999a 	.word	0x4009999a
 8013b98:	08021b4c 	.word	0x08021b4c
 8013b9c:	08021b54 	.word	0x08021b54

08013ba0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013ba0:	b590      	push	{r4, r7, lr}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af02      	add	r7, sp, #8
 8013ba6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8013ba8:	4b11      	ldr	r3, [pc, #68]	@ (8013bf0 <RegionEU868SetBandTxDone+0x50>)
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	4b11      	ldr	r3, [pc, #68]	@ (8013bf4 <RegionEU868SetBandTxDone+0x54>)
 8013bae:	6819      	ldr	r1, [r3, #0]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	005b      	lsls	r3, r3, #1
 8013bba:	4403      	add	r3, r0
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	440b      	add	r3, r1
 8013bc0:	3309      	adds	r3, #9
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	460b      	mov	r3, r1
 8013bc8:	005b      	lsls	r3, r3, #1
 8013bca:	440b      	add	r3, r1
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	18d0      	adds	r0, r2, r3
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6899      	ldr	r1, [r3, #8]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	785c      	ldrb	r4, [r3, #1]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	691a      	ldr	r2, [r3, #16]
 8013bdc:	9200      	str	r2, [sp, #0]
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	4622      	mov	r2, r4
 8013be2:	f7ff f8ef 	bl	8012dc4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8013be6:	bf00      	nop
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd90      	pop	{r4, r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	20001224 	.word	0x20001224
 8013bf4:	20001220 	.word	0x20001220

08013bf8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b0b0      	sub	sp, #192	@ 0xc0
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8013c00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013c04:	2290      	movs	r2, #144	@ 0x90
 8013c06:	2100      	movs	r1, #0
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f00c fdc1 	bl	8020790 <memset>
 8013c0e:	2364      	movs	r3, #100	@ 0x64
 8013c10:	863b      	strh	r3, [r7, #48]	@ 0x30
 8013c12:	2364      	movs	r3, #100	@ 0x64
 8013c14:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8013c18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013c1c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8013c20:	230a      	movs	r3, #10
 8013c22:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8013c26:	2364      	movs	r3, #100	@ 0x64
 8013c28:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8013c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013c30:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	7b1b      	ldrb	r3, [r3, #12]
 8013c38:	2b02      	cmp	r3, #2
 8013c3a:	d05d      	beq.n	8013cf8 <RegionEU868InitDefaults+0x100>
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	dc6a      	bgt.n	8013d16 <RegionEU868InitDefaults+0x11e>
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d002      	beq.n	8013c4a <RegionEU868InitDefaults+0x52>
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d03e      	beq.n	8013cc6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8013c48:	e065      	b.n	8013d16 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d062      	beq.n	8013d18 <RegionEU868InitDefaults+0x120>
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d05e      	beq.n	8013d18 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	4a30      	ldr	r2, [pc, #192]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013c60:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	689b      	ldr	r3, [r3, #8]
 8013c66:	4a2f      	ldr	r2, [pc, #188]	@ (8013d24 <RegionEU868InitDefaults+0x12c>)
 8013c68:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8013c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8013d24 <RegionEU868InitDefaults+0x12c>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8013c72:	2290      	movs	r2, #144	@ 0x90
 8013c74:	4618      	mov	r0, r3
 8013c76:	f003 fe0a 	bl	801788e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8013c7a:	4b29      	ldr	r3, [pc, #164]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8013d28 <RegionEU868InitDefaults+0x130>)
 8013c80:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8013c86:	4b26      	ldr	r3, [pc, #152]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	4a28      	ldr	r2, [pc, #160]	@ (8013d2c <RegionEU868InitDefaults+0x134>)
 8013c8c:	330c      	adds	r3, #12
 8013c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8013c94:	4b22      	ldr	r3, [pc, #136]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	4a25      	ldr	r2, [pc, #148]	@ (8013d30 <RegionEU868InitDefaults+0x138>)
 8013c9a:	3318      	adds	r3, #24
 8013c9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8013ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	2207      	movs	r2, #7
 8013ca8:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013cac:	4b1c      	ldr	r3, [pc, #112]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	f7ff f85a 	bl	8012d78 <RegionCommonChanMaskCopy>
 8013cc4:	e028      	b.n	8013d18 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8013cc6:	4b16      	ldr	r3, [pc, #88]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8013cce:	4b14      	ldr	r3, [pc, #80]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8013cd6:	4b12      	ldr	r3, [pc, #72]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013cde:	4b10      	ldr	r3, [pc, #64]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013cee:	2201      	movs	r2, #1
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	f7ff f841 	bl	8012d78 <RegionCommonChanMaskCopy>
            break;
 8013cf6:	e00f      	b.n	8013d18 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8013cf8:	4b09      	ldr	r3, [pc, #36]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8013d00:	4b07      	ldr	r3, [pc, #28]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8013d08:	4b05      	ldr	r3, [pc, #20]	@ (8013d20 <RegionEU868InitDefaults+0x128>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	430a      	orrs	r2, r1
 8013d0e:	b292      	uxth	r2, r2
 8013d10:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8013d14:	e000      	b.n	8013d18 <RegionEU868InitDefaults+0x120>
            break;
 8013d16:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8013d18:	37c0      	adds	r7, #192	@ 0xc0
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20001220 	.word	0x20001220
 8013d24:	20001224 	.word	0x20001224
 8013d28:	0802166c 	.word	0x0802166c
 8013d2c:	08021678 	.word	0x08021678
 8013d30:	08021684 	.word	0x08021684

08013d34 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8013d40:	78fb      	ldrb	r3, [r7, #3]
 8013d42:	2b0f      	cmp	r3, #15
 8013d44:	d86c      	bhi.n	8013e20 <RegionEU868Verify+0xec>
 8013d46:	a201      	add	r2, pc, #4	@ (adr r2, 8013d4c <RegionEU868Verify+0x18>)
 8013d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d4c:	08013d8d 	.word	0x08013d8d
 8013d50:	08013e21 	.word	0x08013e21
 8013d54:	08013e21 	.word	0x08013e21
 8013d58:	08013e21 	.word	0x08013e21
 8013d5c:	08013e21 	.word	0x08013e21
 8013d60:	08013da5 	.word	0x08013da5
 8013d64:	08013dc3 	.word	0x08013dc3
 8013d68:	08013de1 	.word	0x08013de1
 8013d6c:	08013e21 	.word	0x08013e21
 8013d70:	08013dff 	.word	0x08013dff
 8013d74:	08013dff 	.word	0x08013dff
 8013d78:	08013e21 	.word	0x08013e21
 8013d7c:	08013e21 	.word	0x08013e21
 8013d80:	08013e21 	.word	0x08013e21
 8013d84:	08013e21 	.word	0x08013e21
 8013d88:	08013e1d 	.word	0x08013e1d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	f107 020f 	add.w	r2, r7, #15
 8013d98:	4611      	mov	r1, r2
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff fcf4 	bl	8013788 <VerifyRfFreq>
 8013da0:	4603      	mov	r3, r0
 8013da2:	e03e      	b.n	8013e22 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f993 3000 	ldrsb.w	r3, [r3]
 8013daa:	2207      	movs	r2, #7
 8013dac:	2100      	movs	r1, #0
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fe ff65 	bl	8012c7e <RegionCommonValueInRange>
 8013db4:	4603      	mov	r3, r0
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	bf14      	ite	ne
 8013dba:	2301      	movne	r3, #1
 8013dbc:	2300      	moveq	r3, #0
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	e02f      	b.n	8013e22 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8013dc8:	2205      	movs	r2, #5
 8013dca:	2100      	movs	r1, #0
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fe ff56 	bl	8012c7e <RegionCommonValueInRange>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	bf14      	ite	ne
 8013dd8:	2301      	movne	r3, #1
 8013dda:	2300      	moveq	r3, #0
 8013ddc:	b2db      	uxtb	r3, r3
 8013dde:	e020      	b.n	8013e22 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f993 3000 	ldrsb.w	r3, [r3]
 8013de6:	2207      	movs	r2, #7
 8013de8:	2100      	movs	r1, #0
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7fe ff47 	bl	8012c7e <RegionCommonValueInRange>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	bf14      	ite	ne
 8013df6:	2301      	movne	r3, #1
 8013df8:	2300      	moveq	r3, #0
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	e011      	b.n	8013e22 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f993 3000 	ldrsb.w	r3, [r3]
 8013e04:	2207      	movs	r2, #7
 8013e06:	2100      	movs	r1, #0
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fe ff38 	bl	8012c7e <RegionCommonValueInRange>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	bf14      	ite	ne
 8013e14:	2301      	movne	r3, #1
 8013e16:	2300      	moveq	r3, #0
 8013e18:	b2db      	uxtb	r3, r3
 8013e1a:	e002      	b.n	8013e22 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	e000      	b.n	8013e22 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8013e20:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop

08013e2c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b08a      	sub	sp, #40	@ 0x28
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8013e34:	2350      	movs	r3, #80	@ 0x50
 8013e36:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7a1b      	ldrb	r3, [r3, #8]
 8013e3e:	2b10      	cmp	r3, #16
 8013e40:	d162      	bne.n	8013f08 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	330f      	adds	r3, #15
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d15e      	bne.n	8013f0c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013e4e:	2300      	movs	r3, #0
 8013e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e54:	2303      	movs	r3, #3
 8013e56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013e5a:	e050      	b.n	8013efe <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8013e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013e60:	2b07      	cmp	r3, #7
 8013e62:	d824      	bhi.n	8013eae <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	685a      	ldr	r2, [r3, #4]
 8013e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e6c:	4413      	add	r3, r2
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8013e72:	69ba      	ldr	r2, [r7, #24]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6859      	ldr	r1, [r3, #4]
 8013e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	440b      	add	r3, r1
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	021b      	lsls	r3, r3, #8
 8013e84:	4313      	orrs	r3, r2
 8013e86:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8013e88:	69ba      	ldr	r2, [r7, #24]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6859      	ldr	r1, [r3, #4]
 8013e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e92:	3302      	adds	r3, #2
 8013e94:	440b      	add	r3, r1
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	041b      	lsls	r3, r3, #16
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8013e9e:	69bb      	ldr	r3, [r7, #24]
 8013ea0:	2264      	movs	r2, #100	@ 0x64
 8013ea2:	fb02 f303 	mul.w	r3, r2, r3
 8013ea6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	61fb      	str	r3, [r7, #28]
 8013eac:	e006      	b.n	8013ebc <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d00b      	beq.n	8013eda <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8013ec2:	f107 0318 	add.w	r3, r7, #24
 8013ec6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8013ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ecc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8013ece:	f107 0310 	add.w	r3, r7, #16
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f000 fd14 	bl	8014900 <RegionEU868ChannelAdd>
 8013ed8:	e007      	b.n	8013eea <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8013eda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ede:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8013ee0:	f107 030c 	add.w	r3, r7, #12
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f000 fdad 	bl	8014a44 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013eea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013eee:	3303      	adds	r3, #3
 8013ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013ef4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ef8:	3301      	adds	r3, #1
 8013efa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013efe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f02:	2b0f      	cmp	r3, #15
 8013f04:	d9aa      	bls.n	8013e5c <RegionEU868ApplyCFList+0x30>
 8013f06:	e002      	b.n	8013f0e <RegionEU868ApplyCFList+0xe2>
        return;
 8013f08:	bf00      	nop
 8013f0a:	e000      	b.n	8013f0e <RegionEU868ApplyCFList+0xe2>
        return;
 8013f0c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8013f0e:	3728      	adds	r7, #40	@ 0x28
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	791b      	ldrb	r3, [r3, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d002      	beq.n	8013f2a <RegionEU868ChanMaskSet+0x16>
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d00b      	beq.n	8013f40 <RegionEU868ChanMaskSet+0x2c>
 8013f28:	e015      	b.n	8013f56 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8013f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8013f64 <RegionEU868ChanMaskSet+0x50>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2201      	movs	r2, #1
 8013f38:	4619      	mov	r1, r3
 8013f3a:	f7fe ff1d 	bl	8012d78 <RegionCommonChanMaskCopy>
            break;
 8013f3e:	e00c      	b.n	8013f5a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8013f40:	4b08      	ldr	r3, [pc, #32]	@ (8013f64 <RegionEU868ChanMaskSet+0x50>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	4619      	mov	r1, r3
 8013f50:	f7fe ff12 	bl	8012d78 <RegionCommonChanMaskCopy>
            break;
 8013f54:	e001      	b.n	8013f5a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8013f56:	2300      	movs	r3, #0
 8013f58:	e000      	b.n	8013f5c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8013f5a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3708      	adds	r7, #8
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	20001220 	.word	0x20001220

08013f68 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b088      	sub	sp, #32
 8013f6c:	af02      	add	r7, sp, #8
 8013f6e:	60ba      	str	r2, [r7, #8]
 8013f70:	607b      	str	r3, [r7, #4]
 8013f72:	4603      	mov	r3, r0
 8013f74:	73fb      	strb	r3, [r7, #15]
 8013f76:	460b      	mov	r3, r1
 8013f78:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8013f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f82:	2b07      	cmp	r3, #7
 8013f84:	bfa8      	it	ge
 8013f86:	2307      	movge	r3, #7
 8013f88:	b25a      	sxtb	r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f94:	491e      	ldr	r1, [pc, #120]	@ (8014010 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7ff fb8e 	bl	80136b8 <RegionCommonGetBandwidth>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	b2da      	uxtb	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013faa:	2b07      	cmp	r3, #7
 8013fac:	d10a      	bne.n	8013fc4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	4b17      	ldr	r3, [pc, #92]	@ (8014014 <RegionEU868ComputeRxWindowParameters+0xac>)
 8013fb8:	5c9b      	ldrb	r3, [r3, r2]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7ff f910 	bl	80131e0 <RegionCommonComputeSymbolTimeFsk>
 8013fc0:	6178      	str	r0, [r7, #20]
 8013fc2:	e011      	b.n	8013fe8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	4b11      	ldr	r3, [pc, #68]	@ (8014014 <RegionEU868ComputeRxWindowParameters+0xac>)
 8013fce:	5c9a      	ldrb	r2, [r3, r2]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8014010 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8013fda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fde:	4619      	mov	r1, r3
 8013fe0:	4610      	mov	r0, r2
 8013fe2:	f7ff f8e7 	bl	80131b4 <RegionCommonComputeSymbolTimeLoRa>
 8013fe6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8013fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8014018 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8013fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fec:	4798      	blx	r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	3308      	adds	r3, #8
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	320c      	adds	r2, #12
 8013ff6:	7bb9      	ldrb	r1, [r7, #14]
 8013ff8:	9201      	str	r2, [sp, #4]
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	68ba      	ldr	r2, [r7, #8]
 8014000:	6978      	ldr	r0, [r7, #20]
 8014002:	f7ff f8fd 	bl	8013200 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8014006:	bf00      	nop
 8014008:	3718      	adds	r7, #24
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	08021b54 	.word	0x08021b54
 8014014:	08021b4c 	.word	0x08021b4c
 8014018:	08021f8c 	.word	0x08021f8c

0801401c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801401c:	b5b0      	push	{r4, r5, r7, lr}
 801401e:	b090      	sub	sp, #64	@ 0x40
 8014020:	af0a      	add	r7, sp, #40	@ 0x28
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	785b      	ldrb	r3, [r3, #1]
 801402a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801402c:	2300      	movs	r3, #0
 801402e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014030:	2300      	movs	r3, #0
 8014032:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801403a:	4b5a      	ldr	r3, [pc, #360]	@ (80141a4 <RegionEU868RxConfig+0x188>)
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	4798      	blx	r3
 8014040:	4603      	mov	r3, r0
 8014042:	2b00      	cmp	r3, #0
 8014044:	d001      	beq.n	801404a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8014046:	2300      	movs	r3, #0
 8014048:	e0a8      	b.n	801419c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	7cdb      	ldrb	r3, [r3, #19]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d126      	bne.n	80140a0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014052:	4b55      	ldr	r3, [pc, #340]	@ (80141a8 <RegionEU868RxConfig+0x18c>)
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	4619      	mov	r1, r3
 801405c:	460b      	mov	r3, r1
 801405e:	005b      	lsls	r3, r3, #1
 8014060:	440b      	add	r3, r1
 8014062:	009b      	lsls	r3, r3, #2
 8014064:	4413      	add	r3, r2
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801406a:	4b4f      	ldr	r3, [pc, #316]	@ (80141a8 <RegionEU868RxConfig+0x18c>)
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	4619      	mov	r1, r3
 8014074:	460b      	mov	r3, r1
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	440b      	add	r3, r1
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	4413      	add	r3, r2
 801407e:	3304      	adds	r3, #4
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00c      	beq.n	80140a0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8014086:	4b48      	ldr	r3, [pc, #288]	@ (80141a8 <RegionEU868RxConfig+0x18c>)
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	4619      	mov	r1, r3
 8014090:	460b      	mov	r3, r1
 8014092:	005b      	lsls	r3, r3, #1
 8014094:	440b      	add	r3, r1
 8014096:	009b      	lsls	r3, r3, #2
 8014098:	4413      	add	r3, r2
 801409a:	3304      	adds	r3, #4
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80140a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140a4:	4a41      	ldr	r2, [pc, #260]	@ (80141ac <RegionEU868RxConfig+0x190>)
 80140a6:	5cd3      	ldrb	r3, [r2, r3]
 80140a8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80140aa:	4b3e      	ldr	r3, [pc, #248]	@ (80141a4 <RegionEU868RxConfig+0x188>)
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	6938      	ldr	r0, [r7, #16]
 80140b0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80140b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140b6:	2b07      	cmp	r3, #7
 80140b8:	d128      	bne.n	801410c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80140be:	4b39      	ldr	r3, [pc, #228]	@ (80141a4 <RegionEU868RxConfig+0x188>)
 80140c0:	699c      	ldr	r4, [r3, #24]
 80140c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80140ca:	fb02 f303 	mul.w	r3, r2, r3
 80140ce:	4619      	mov	r1, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	7c92      	ldrb	r2, [r2, #18]
 80140da:	7df8      	ldrb	r0, [r7, #23]
 80140dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80140de:	2200      	movs	r2, #0
 80140e0:	9208      	str	r2, [sp, #32]
 80140e2:	2200      	movs	r2, #0
 80140e4:	9207      	str	r2, [sp, #28]
 80140e6:	2200      	movs	r2, #0
 80140e8:	9206      	str	r2, [sp, #24]
 80140ea:	2201      	movs	r2, #1
 80140ec:	9205      	str	r2, [sp, #20]
 80140ee:	2200      	movs	r2, #0
 80140f0:	9204      	str	r2, [sp, #16]
 80140f2:	2200      	movs	r2, #0
 80140f4:	9203      	str	r2, [sp, #12]
 80140f6:	9302      	str	r3, [sp, #8]
 80140f8:	2305      	movs	r3, #5
 80140fa:	9301      	str	r3, [sp, #4]
 80140fc:	4b2c      	ldr	r3, [pc, #176]	@ (80141b0 <RegionEU868RxConfig+0x194>)
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	2300      	movs	r3, #0
 8014102:	460a      	mov	r2, r1
 8014104:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014108:	47a0      	blx	r4
 801410a:	e024      	b.n	8014156 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801410c:	2301      	movs	r3, #1
 801410e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014110:	4b24      	ldr	r3, [pc, #144]	@ (80141a4 <RegionEU868RxConfig+0x188>)
 8014112:	699c      	ldr	r4, [r3, #24]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	789b      	ldrb	r3, [r3, #2]
 8014118:	461d      	mov	r5, r3
 801411a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	689b      	ldr	r3, [r3, #8]
 8014122:	b29b      	uxth	r3, r3
 8014124:	687a      	ldr	r2, [r7, #4]
 8014126:	7c92      	ldrb	r2, [r2, #18]
 8014128:	7df8      	ldrb	r0, [r7, #23]
 801412a:	9209      	str	r2, [sp, #36]	@ 0x24
 801412c:	2201      	movs	r2, #1
 801412e:	9208      	str	r2, [sp, #32]
 8014130:	2200      	movs	r2, #0
 8014132:	9207      	str	r2, [sp, #28]
 8014134:	2200      	movs	r2, #0
 8014136:	9206      	str	r2, [sp, #24]
 8014138:	2200      	movs	r2, #0
 801413a:	9205      	str	r2, [sp, #20]
 801413c:	2200      	movs	r2, #0
 801413e:	9204      	str	r2, [sp, #16]
 8014140:	2200      	movs	r2, #0
 8014142:	9203      	str	r2, [sp, #12]
 8014144:	9302      	str	r3, [sp, #8]
 8014146:	2308      	movs	r3, #8
 8014148:	9301      	str	r3, [sp, #4]
 801414a:	2300      	movs	r3, #0
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	2301      	movs	r3, #1
 8014150:	460a      	mov	r2, r1
 8014152:	4629      	mov	r1, r5
 8014154:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	7c5b      	ldrb	r3, [r3, #17]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d005      	beq.n	801416a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014162:	4a14      	ldr	r2, [pc, #80]	@ (80141b4 <RegionEU868RxConfig+0x198>)
 8014164:	5cd3      	ldrb	r3, [r2, r3]
 8014166:	75bb      	strb	r3, [r7, #22]
 8014168:	e004      	b.n	8014174 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801416e:	4a12      	ldr	r2, [pc, #72]	@ (80141b8 <RegionEU868RxConfig+0x19c>)
 8014170:	5cd3      	ldrb	r3, [r2, r3]
 8014172:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014174:	4b0b      	ldr	r3, [pc, #44]	@ (80141a4 <RegionEU868RxConfig+0x188>)
 8014176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014178:	7dba      	ldrb	r2, [r7, #22]
 801417a:	320d      	adds	r2, #13
 801417c:	b2d1      	uxtb	r1, r2
 801417e:	7dfa      	ldrb	r2, [r7, #23]
 8014180:	4610      	mov	r0, r2
 8014182:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	7cdb      	ldrb	r3, [r3, #19]
 8014188:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801418c:	6939      	ldr	r1, [r7, #16]
 801418e:	4618      	mov	r0, r3
 8014190:	f7ff fab0 	bl	80136f4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	7bfa      	ldrb	r2, [r7, #15]
 8014198:	701a      	strb	r2, [r3, #0]
    return true;
 801419a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801419c:	4618      	mov	r0, r3
 801419e:	3718      	adds	r7, #24
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bdb0      	pop	{r4, r5, r7, pc}
 80141a4:	08021f8c 	.word	0x08021f8c
 80141a8:	20001220 	.word	0x20001220
 80141ac:	08021b4c 	.word	0x08021b4c
 80141b0:	00014585 	.word	0x00014585
 80141b4:	08021b7c 	.word	0x08021b7c
 80141b8:	08021b74 	.word	0x08021b74

080141bc <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80141bc:	b590      	push	{r4, r7, lr}
 80141be:	b093      	sub	sp, #76	@ 0x4c
 80141c0:	af0a      	add	r7, sp, #40	@ 0x28
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80141ce:	461a      	mov	r2, r3
 80141d0:	4b5d      	ldr	r3, [pc, #372]	@ (8014348 <RegionEU868TxConfig+0x18c>)
 80141d2:	5c9b      	ldrb	r3, [r3, r2]
 80141d4:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80141dc:	4b5b      	ldr	r3, [pc, #364]	@ (801434c <RegionEU868TxConfig+0x190>)
 80141de:	681a      	ldr	r2, [r3, #0]
 80141e0:	4b5b      	ldr	r3, [pc, #364]	@ (8014350 <RegionEU868TxConfig+0x194>)
 80141e2:	6819      	ldr	r1, [r3, #0]
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	461c      	mov	r4, r3
 80141ea:	4623      	mov	r3, r4
 80141ec:	005b      	lsls	r3, r3, #1
 80141ee:	4423      	add	r3, r4
 80141f0:	009b      	lsls	r3, r3, #2
 80141f2:	440b      	add	r3, r1
 80141f4:	3309      	adds	r3, #9
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	4619      	mov	r1, r3
 80141fa:	460b      	mov	r3, r1
 80141fc:	005b      	lsls	r3, r3, #1
 80141fe:	440b      	add	r3, r1
 8014200:	00db      	lsls	r3, r3, #3
 8014202:	4413      	add	r3, r2
 8014204:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014208:	4619      	mov	r1, r3
 801420a:	f7ff fa40 	bl	801368e <RegionCommonLimitTxPower>
 801420e:	4603      	mov	r3, r0
 8014210:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014218:	494e      	ldr	r1, [pc, #312]	@ (8014354 <RegionEU868TxConfig+0x198>)
 801421a:	4618      	mov	r0, r3
 801421c:	f7ff fa4c 	bl	80136b8 <RegionCommonGetBandwidth>
 8014220:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	6859      	ldr	r1, [r3, #4]
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	689a      	ldr	r2, [r3, #8]
 801422e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014232:	4618      	mov	r0, r3
 8014234:	f7ff f89c 	bl	8013370 <RegionCommonComputeTxPower>
 8014238:	4603      	mov	r3, r0
 801423a:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801423c:	4b46      	ldr	r3, [pc, #280]	@ (8014358 <RegionEU868TxConfig+0x19c>)
 801423e:	68da      	ldr	r2, [r3, #12]
 8014240:	4b43      	ldr	r3, [pc, #268]	@ (8014350 <RegionEU868TxConfig+0x194>)
 8014242:	6819      	ldr	r1, [r3, #0]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	781b      	ldrb	r3, [r3, #0]
 8014248:	4618      	mov	r0, r3
 801424a:	4603      	mov	r3, r0
 801424c:	005b      	lsls	r3, r3, #1
 801424e:	4403      	add	r3, r0
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	440b      	add	r3, r1
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	4618      	mov	r0, r3
 8014258:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014260:	2b07      	cmp	r3, #7
 8014262:	d124      	bne.n	80142ae <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014264:	2300      	movs	r3, #0
 8014266:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8014268:	4b3b      	ldr	r3, [pc, #236]	@ (8014358 <RegionEU868TxConfig+0x19c>)
 801426a:	69dc      	ldr	r4, [r3, #28]
 801426c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014270:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014274:	fb02 f303 	mul.w	r3, r2, r3
 8014278:	461a      	mov	r2, r3
 801427a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801427e:	7ff8      	ldrb	r0, [r7, #31]
 8014280:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8014284:	9308      	str	r3, [sp, #32]
 8014286:	2300      	movs	r3, #0
 8014288:	9307      	str	r3, [sp, #28]
 801428a:	2300      	movs	r3, #0
 801428c:	9306      	str	r3, [sp, #24]
 801428e:	2300      	movs	r3, #0
 8014290:	9305      	str	r3, [sp, #20]
 8014292:	2301      	movs	r3, #1
 8014294:	9304      	str	r3, [sp, #16]
 8014296:	2300      	movs	r3, #0
 8014298:	9303      	str	r3, [sp, #12]
 801429a:	2305      	movs	r3, #5
 801429c:	9302      	str	r3, [sp, #8]
 801429e:	2300      	movs	r3, #0
 80142a0:	9301      	str	r3, [sp, #4]
 80142a2:	9200      	str	r2, [sp, #0]
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80142aa:	47a0      	blx	r4
 80142ac:	e01d      	b.n	80142ea <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80142ae:	2301      	movs	r3, #1
 80142b0:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80142b2:	4b29      	ldr	r3, [pc, #164]	@ (8014358 <RegionEU868TxConfig+0x19c>)
 80142b4:	69dc      	ldr	r4, [r3, #28]
 80142b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80142ba:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80142be:	7ff8      	ldrb	r0, [r7, #31]
 80142c0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80142c4:	9208      	str	r2, [sp, #32]
 80142c6:	2200      	movs	r2, #0
 80142c8:	9207      	str	r2, [sp, #28]
 80142ca:	2200      	movs	r2, #0
 80142cc:	9206      	str	r2, [sp, #24]
 80142ce:	2200      	movs	r2, #0
 80142d0:	9205      	str	r2, [sp, #20]
 80142d2:	2201      	movs	r2, #1
 80142d4:	9204      	str	r2, [sp, #16]
 80142d6:	2200      	movs	r2, #0
 80142d8:	9203      	str	r2, [sp, #12]
 80142da:	2208      	movs	r2, #8
 80142dc:	9202      	str	r2, [sp, #8]
 80142de:	2201      	movs	r2, #1
 80142e0:	9201      	str	r2, [sp, #4]
 80142e2:	9300      	str	r3, [sp, #0]
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	2200      	movs	r2, #0
 80142e8:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80142ea:	4b19      	ldr	r3, [pc, #100]	@ (8014350 <RegionEU868TxConfig+0x194>)
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	4619      	mov	r1, r3
 80142f4:	460b      	mov	r3, r1
 80142f6:	005b      	lsls	r3, r3, #1
 80142f8:	440b      	add	r3, r1
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	4413      	add	r3, r2
 80142fe:	681a      	ldr	r2, [r3, #0]
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014306:	4619      	mov	r1, r3
 8014308:	4610      	mov	r0, r2
 801430a:	f7ff fa25 	bl	8013758 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	899b      	ldrh	r3, [r3, #12]
 8014318:	4619      	mov	r1, r3
 801431a:	4610      	mov	r0, r2
 801431c:	f7ff faaa 	bl	8013874 <GetTimeOnAir>
 8014320:	4602      	mov	r2, r0
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8014326:	4b0c      	ldr	r3, [pc, #48]	@ (8014358 <RegionEU868TxConfig+0x19c>)
 8014328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801432a:	68fa      	ldr	r2, [r7, #12]
 801432c:	8992      	ldrh	r2, [r2, #12]
 801432e:	b2d1      	uxtb	r1, r2
 8014330:	7ffa      	ldrb	r2, [r7, #31]
 8014332:	4610      	mov	r0, r2
 8014334:	4798      	blx	r3

    *txPower = txPowerLimited;
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	7f7a      	ldrb	r2, [r7, #29]
 801433a:	701a      	strb	r2, [r3, #0]
    return true;
 801433c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801433e:	4618      	mov	r0, r3
 8014340:	3724      	adds	r7, #36	@ 0x24
 8014342:	46bd      	mov	sp, r7
 8014344:	bd90      	pop	{r4, r7, pc}
 8014346:	bf00      	nop
 8014348:	08021b4c 	.word	0x08021b4c
 801434c:	20001224 	.word	0x20001224
 8014350:	20001220 	.word	0x20001220
 8014354:	08021b54 	.word	0x08021b54
 8014358:	08021f8c 	.word	0x08021f8c

0801435c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801435c:	b590      	push	{r4, r7, lr}
 801435e:	b093      	sub	sp, #76	@ 0x4c
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
 8014368:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801436a:	2307      	movs	r3, #7
 801436c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8014370:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8014374:	2200      	movs	r2, #0
 8014376:	601a      	str	r2, [r3, #0]
 8014378:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801437a:	2300      	movs	r3, #0
 801437c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8014380:	2300      	movs	r3, #0
 8014382:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8014386:	2300      	movs	r3, #0
 8014388:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801438a:	e085      	b.n	8014498 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	685a      	ldr	r2, [r3, #4]
 8014390:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8014394:	4413      	add	r3, r2
 8014396:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801439a:	4611      	mov	r1, r2
 801439c:	4618      	mov	r0, r3
 801439e:	f7fe fe2f 	bl	8013000 <RegionCommonParseLinkAdrReq>
 80143a2:	4603      	mov	r3, r0
 80143a4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 80143a8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d07b      	beq.n	80144a8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80143b0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80143b4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80143b8:	4413      	add	r3, r2
 80143ba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80143be:	2307      	movs	r3, #7
 80143c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80143c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80143c8:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80143ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d109      	bne.n	80143e6 <RegionEU868LinkAdrReq+0x8a>
 80143d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d106      	bne.n	80143e6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80143d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80143dc:	f023 0301 	bic.w	r3, r3, #1
 80143e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80143e4:	e058      	b.n	8014498 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80143e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d003      	beq.n	80143f6 <RegionEU868LinkAdrReq+0x9a>
 80143ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143f2:	2b05      	cmp	r3, #5
 80143f4:	d903      	bls.n	80143fe <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80143f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80143fa:	2b06      	cmp	r3, #6
 80143fc:	d906      	bls.n	801440c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80143fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014402:	f023 0301 	bic.w	r3, r3, #1
 8014406:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801440a:	e045      	b.n	8014498 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801440c:	2300      	movs	r3, #0
 801440e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8014412:	e03d      	b.n	8014490 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8014414:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014418:	2b06      	cmp	r3, #6
 801441a:	d118      	bne.n	801444e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801441c:	4b5f      	ldr	r3, [pc, #380]	@ (801459c <RegionEU868LinkAdrReq+0x240>)
 801441e:	6819      	ldr	r1, [r3, #0]
 8014420:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8014424:	4613      	mov	r3, r2
 8014426:	005b      	lsls	r3, r3, #1
 8014428:	4413      	add	r3, r2
 801442a:	009b      	lsls	r3, r3, #2
 801442c:	440b      	add	r3, r1
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d028      	beq.n	8014486 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8014434:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8014438:	2201      	movs	r2, #1
 801443a:	fa02 f303 	lsl.w	r3, r2, r3
 801443e:	b21a      	sxth	r2, r3
 8014440:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014442:	b21b      	sxth	r3, r3
 8014444:	4313      	orrs	r3, r2
 8014446:	b21b      	sxth	r3, r3
 8014448:	b29b      	uxth	r3, r3
 801444a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801444c:	e01b      	b.n	8014486 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801444e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014450:	461a      	mov	r2, r3
 8014452:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8014456:	fa42 f303 	asr.w	r3, r2, r3
 801445a:	f003 0301 	and.w	r3, r3, #1
 801445e:	2b00      	cmp	r3, #0
 8014460:	d011      	beq.n	8014486 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8014462:	4b4e      	ldr	r3, [pc, #312]	@ (801459c <RegionEU868LinkAdrReq+0x240>)
 8014464:	6819      	ldr	r1, [r3, #0]
 8014466:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801446a:	4613      	mov	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	440b      	add	r3, r1
 8014474:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014476:	2b00      	cmp	r3, #0
 8014478:	d105      	bne.n	8014486 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801447a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801447e:	f023 0301 	bic.w	r3, r3, #1
 8014482:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014486:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801448a:	3301      	adds	r3, #1
 801448c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8014490:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8014494:	2b0f      	cmp	r3, #15
 8014496:	d9bd      	bls.n	8014414 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	7a1b      	ldrb	r3, [r3, #8]
 801449c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80144a0:	429a      	cmp	r2, r3
 80144a2:	f4ff af73 	bcc.w	801438c <RegionEU868LinkAdrReq+0x30>
 80144a6:	e000      	b.n	80144aa <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80144a8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80144aa:	2302      	movs	r3, #2
 80144ac:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	7a5b      	ldrb	r3, [r3, #9]
 80144b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80144b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80144bc:	4618      	mov	r0, r3
 80144be:	f7ff fa29 	bl	8013914 <RegionEU868GetPhyParam>
 80144c2:	4603      	mov	r3, r0
 80144c4:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 80144c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80144ca:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	7a9b      	ldrb	r3, [r3, #10]
 80144d0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80144d2:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80144d6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80144d8:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80144dc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80144de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80144e2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80144ea:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80144f2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	7b5b      	ldrb	r3, [r3, #13]
 80144f8:	b25b      	sxtb	r3, r3
 80144fa:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80144fc:	2310      	movs	r3, #16
 80144fe:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8014500:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8014504:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8014506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014508:	b25b      	sxtb	r3, r3
 801450a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801450e:	2307      	movs	r3, #7
 8014510:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8014514:	4b21      	ldr	r3, [pc, #132]	@ (801459c <RegionEU868LinkAdrReq+0x240>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801451a:	2307      	movs	r3, #7
 801451c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8014520:	2300      	movs	r3, #0
 8014522:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801452c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8014530:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8014534:	1c9a      	adds	r2, r3, #2
 8014536:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801453a:	1c59      	adds	r1, r3, #1
 801453c:	f107 0010 	add.w	r0, r7, #16
 8014540:	4623      	mov	r3, r4
 8014542:	f7fe fdaf 	bl	80130a4 <RegionCommonLinkAdrReqVerifyParams>
 8014546:	4603      	mov	r3, r0
 8014548:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801454c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014550:	2b07      	cmp	r3, #7
 8014552:	d10d      	bne.n	8014570 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8014554:	4b11      	ldr	r3, [pc, #68]	@ (801459c <RegionEU868LinkAdrReq+0x240>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801455c:	220c      	movs	r2, #12
 801455e:	2100      	movs	r1, #0
 8014560:	4618      	mov	r0, r3
 8014562:	f003 f9cf 	bl	8017904 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8014566:	4b0d      	ldr	r3, [pc, #52]	@ (801459c <RegionEU868LinkAdrReq+0x240>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801456c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014570:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014578:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014580:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801458a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801458e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8014590:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8014594:	4618      	mov	r0, r3
 8014596:	374c      	adds	r7, #76	@ 0x4c
 8014598:	46bd      	mov	sp, r7
 801459a:	bd90      	pop	{r4, r7, pc}
 801459c:	20001220 	.word	0x20001220

080145a0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b084      	sub	sp, #16
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80145a8:	2307      	movs	r3, #7
 80145aa:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80145ac:	2300      	movs	r3, #0
 80145ae:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	f107 020e 	add.w	r2, r7, #14
 80145b8:	4611      	mov	r1, r2
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7ff f8e4 	bl	8013788 <VerifyRfFreq>
 80145c0:	4603      	mov	r3, r0
 80145c2:	f083 0301 	eor.w	r3, r3, #1
 80145c6:	b2db      	uxtb	r3, r3
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d003      	beq.n	80145d4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80145cc:	7bfb      	ldrb	r3, [r7, #15]
 80145ce:	f023 0301 	bic.w	r3, r3, #1
 80145d2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f993 3000 	ldrsb.w	r3, [r3]
 80145da:	2207      	movs	r2, #7
 80145dc:	2100      	movs	r1, #0
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fe fb4d 	bl	8012c7e <RegionCommonValueInRange>
 80145e4:	4603      	mov	r3, r0
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d103      	bne.n	80145f2 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80145ea:	7bfb      	ldrb	r3, [r7, #15]
 80145ec:	f023 0302 	bic.w	r3, r3, #2
 80145f0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80145f8:	2205      	movs	r2, #5
 80145fa:	2100      	movs	r1, #0
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fe fb3e 	bl	8012c7e <RegionCommonValueInRange>
 8014602:	4603      	mov	r3, r0
 8014604:	2b00      	cmp	r3, #0
 8014606:	d103      	bne.n	8014610 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8014608:	7bfb      	ldrb	r3, [r7, #15]
 801460a:	f023 0304 	bic.w	r3, r3, #4
 801460e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8014610:	7bfb      	ldrb	r3, [r7, #15]
}
 8014612:	4618      	mov	r0, r3
 8014614:	3710      	adds	r7, #16
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
	...

0801461c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b086      	sub	sp, #24
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014624:	2303      	movs	r3, #3
 8014626:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d114      	bne.n	801465c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014638:	b2db      	uxtb	r3, r3
 801463a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801463c:	f107 0308 	add.w	r3, r7, #8
 8014640:	4618      	mov	r0, r3
 8014642:	f000 f9ff 	bl	8014a44 <RegionEU868ChannelsRemove>
 8014646:	4603      	mov	r3, r0
 8014648:	f083 0301 	eor.w	r3, r3, #1
 801464c:	b2db      	uxtb	r3, r3
 801464e:	2b00      	cmp	r3, #0
 8014650:	d03b      	beq.n	80146ca <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8014652:	7dfb      	ldrb	r3, [r7, #23]
 8014654:	f023 0303 	bic.w	r3, r3, #3
 8014658:	75fb      	strb	r3, [r7, #23]
 801465a:	e036      	b.n	80146ca <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014668:	b2db      	uxtb	r3, r3
 801466a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801466c:	f107 030c 	add.w	r3, r7, #12
 8014670:	4618      	mov	r0, r3
 8014672:	f000 f945 	bl	8014900 <RegionEU868ChannelAdd>
 8014676:	4603      	mov	r3, r0
 8014678:	2b06      	cmp	r3, #6
 801467a:	d820      	bhi.n	80146be <RegionEU868NewChannelReq+0xa2>
 801467c:	a201      	add	r2, pc, #4	@ (adr r2, 8014684 <RegionEU868NewChannelReq+0x68>)
 801467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014682:	bf00      	nop
 8014684:	080146c9 	.word	0x080146c9
 8014688:	080146bf 	.word	0x080146bf
 801468c:	080146bf 	.word	0x080146bf
 8014690:	080146bf 	.word	0x080146bf
 8014694:	080146a1 	.word	0x080146a1
 8014698:	080146ab 	.word	0x080146ab
 801469c:	080146b5 	.word	0x080146b5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80146a0:	7dfb      	ldrb	r3, [r7, #23]
 80146a2:	f023 0301 	bic.w	r3, r3, #1
 80146a6:	75fb      	strb	r3, [r7, #23]
                break;
 80146a8:	e00f      	b.n	80146ca <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80146aa:	7dfb      	ldrb	r3, [r7, #23]
 80146ac:	f023 0302 	bic.w	r3, r3, #2
 80146b0:	75fb      	strb	r3, [r7, #23]
                break;
 80146b2:	e00a      	b.n	80146ca <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80146b4:	7dfb      	ldrb	r3, [r7, #23]
 80146b6:	f023 0303 	bic.w	r3, r3, #3
 80146ba:	75fb      	strb	r3, [r7, #23]
                break;
 80146bc:	e005      	b.n	80146ca <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80146be:	7dfb      	ldrb	r3, [r7, #23]
 80146c0:	f023 0303 	bic.w	r3, r3, #3
 80146c4:	75fb      	strb	r3, [r7, #23]
                break;
 80146c6:	e000      	b.n	80146ca <RegionEU868NewChannelReq+0xae>
                break;
 80146c8:	bf00      	nop
            }
        }
    }

    return status;
 80146ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3718      	adds	r7, #24
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop

080146d8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80146d8:	b480      	push	{r7}
 80146da:	b083      	sub	sp, #12
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80146e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	370c      	adds	r7, #12
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bc80      	pop	{r7}
 80146ec:	4770      	bx	lr
	...

080146f0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80146f8:	2303      	movs	r3, #3
 80146fa:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80146fc:	2300      	movs	r3, #0
 80146fe:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2b0f      	cmp	r3, #15
 8014706:	d901      	bls.n	801470c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8014708:	2300      	movs	r3, #0
 801470a:	e035      	b.n	8014778 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	f107 020e 	add.w	r2, r7, #14
 8014714:	4611      	mov	r1, r2
 8014716:	4618      	mov	r0, r3
 8014718:	f7ff f836 	bl	8013788 <VerifyRfFreq>
 801471c:	4603      	mov	r3, r0
 801471e:	f083 0301 	eor.w	r3, r3, #1
 8014722:	b2db      	uxtb	r3, r3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d003      	beq.n	8014730 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8014728:	7bfb      	ldrb	r3, [r7, #15]
 801472a:	f023 0301 	bic.w	r3, r3, #1
 801472e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8014730:	4b13      	ldr	r3, [pc, #76]	@ (8014780 <RegionEU868DlChannelReq+0x90>)
 8014732:	681a      	ldr	r2, [r3, #0]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	4619      	mov	r1, r3
 801473a:	460b      	mov	r3, r1
 801473c:	005b      	lsls	r3, r3, #1
 801473e:	440b      	add	r3, r1
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	4413      	add	r3, r2
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d103      	bne.n	8014752 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801474a:	7bfb      	ldrb	r3, [r7, #15]
 801474c:	f023 0302 	bic.w	r3, r3, #2
 8014750:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8014752:	7bfb      	ldrb	r3, [r7, #15]
 8014754:	2b03      	cmp	r3, #3
 8014756:	d10d      	bne.n	8014774 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8014758:	4b09      	ldr	r3, [pc, #36]	@ (8014780 <RegionEU868DlChannelReq+0x90>)
 801475a:	6819      	ldr	r1, [r3, #0]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	4618      	mov	r0, r3
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	685a      	ldr	r2, [r3, #4]
 8014766:	4603      	mov	r3, r0
 8014768:	005b      	lsls	r3, r3, #1
 801476a:	4403      	add	r3, r0
 801476c:	009b      	lsls	r3, r3, #2
 801476e:	440b      	add	r3, r1
 8014770:	3304      	adds	r3, #4
 8014772:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8014774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014778:	4618      	mov	r0, r3
 801477a:	3710      	adds	r7, #16
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	20001220 	.word	0x20001220

08014784 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014784:	b480      	push	{r7}
 8014786:	b083      	sub	sp, #12
 8014788:	af00      	add	r7, sp, #0
 801478a:	4603      	mov	r3, r0
 801478c:	460a      	mov	r2, r1
 801478e:	71fb      	strb	r3, [r7, #7]
 8014790:	4613      	mov	r3, r2
 8014792:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8014794:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8014798:	4618      	mov	r0, r3
 801479a:	370c      	adds	r7, #12
 801479c:	46bd      	mov	sp, r7
 801479e:	bc80      	pop	{r7}
 80147a0:	4770      	bx	lr
	...

080147a4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b09a      	sub	sp, #104	@ 0x68
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	607a      	str	r2, [r7, #4]
 80147b0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80147b2:	2300      	movs	r3, #0
 80147b4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 80147b8:	2300      	movs	r3, #0
 80147ba:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80147be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80147c2:	2200      	movs	r2, #0
 80147c4:	601a      	str	r2, [r3, #0]
 80147c6:	605a      	str	r2, [r3, #4]
 80147c8:	609a      	str	r2, [r3, #8]
 80147ca:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80147cc:	230c      	movs	r3, #12
 80147ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80147d2:	2307      	movs	r3, #7
 80147d4:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80147d6:	4b48      	ldr	r3, [pc, #288]	@ (80148f8 <RegionEU868NextChannel+0x154>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80147de:	2201      	movs	r2, #1
 80147e0:	2100      	movs	r1, #0
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fe fa9c 	bl	8012d20 <RegionCommonCountChannels>
 80147e8:	4603      	mov	r3, r0
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d10a      	bne.n	8014804 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80147ee:	4b42      	ldr	r3, [pc, #264]	@ (80148f8 <RegionEU868NextChannel+0x154>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80147f6:	4b40      	ldr	r3, [pc, #256]	@ (80148f8 <RegionEU868NextChannel+0x154>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	f042 0207 	orr.w	r2, r2, #7
 80147fe:	b292      	uxth	r2, r2
 8014800:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	7a5b      	ldrb	r3, [r3, #9]
 8014808:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014810:	b2db      	uxtb	r3, r3
 8014812:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014814:	4b38      	ldr	r3, [pc, #224]	@ (80148f8 <RegionEU868NextChannel+0x154>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801481c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801481e:	4b36      	ldr	r3, [pc, #216]	@ (80148f8 <RegionEU868NextChannel+0x154>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8014824:	4b35      	ldr	r3, [pc, #212]	@ (80148fc <RegionEU868NextChannel+0x158>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801482a:	2310      	movs	r3, #16
 801482c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801482e:	f107 0312 	add.w	r3, r7, #18
 8014832:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	7a9b      	ldrb	r3, [r3, #10]
 8014844:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8014848:	2306      	movs	r3, #6
 801484a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014854:	320c      	adds	r2, #12
 8014856:	e892 0003 	ldmia.w	r2, {r0, r1}
 801485a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	7d1b      	ldrb	r3, [r3, #20]
 8014862:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	8adb      	ldrh	r3, [r3, #22]
 8014870:	4619      	mov	r1, r3
 8014872:	4610      	mov	r0, r2
 8014874:	f7fe fffe 	bl	8013874 <GetTimeOnAir>
 8014878:	4603      	mov	r3, r0
 801487a:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801487c:	f107 0314 	add.w	r3, r7, #20
 8014880:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8014882:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8014886:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801488a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	9301      	str	r3, [sp, #4]
 8014892:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	460b      	mov	r3, r1
 801489a:	6839      	ldr	r1, [r7, #0]
 801489c:	f7fe fe57 	bl	801354e <RegionCommonIdentifyChannels>
 80148a0:	4603      	mov	r3, r0
 80148a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80148a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d10e      	bne.n	80148cc <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80148ae:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80148b2:	3b01      	subs	r3, #1
 80148b4:	4619      	mov	r1, r3
 80148b6:	2000      	movs	r0, #0
 80148b8:	f002 ffd2 	bl	8017860 <randr>
 80148bc:	4603      	mov	r3, r0
 80148be:	3360      	adds	r3, #96	@ 0x60
 80148c0:	443b      	add	r3, r7
 80148c2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	701a      	strb	r2, [r3, #0]
 80148ca:	e00e      	b.n	80148ea <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80148cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80148d0:	2b0c      	cmp	r3, #12
 80148d2:	d10a      	bne.n	80148ea <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80148d4:	4b08      	ldr	r3, [pc, #32]	@ (80148f8 <RegionEU868NextChannel+0x154>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80148dc:	4b06      	ldr	r3, [pc, #24]	@ (80148f8 <RegionEU868NextChannel+0x154>)
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	f042 0207 	orr.w	r2, r2, #7
 80148e4:	b292      	uxth	r2, r2
 80148e6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 80148ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3760      	adds	r7, #96	@ 0x60
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
 80148f6:	bf00      	nop
 80148f8:	20001220 	.word	0x20001220
 80148fc:	20001224 	.word	0x20001224

08014900 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8014908:	2300      	movs	r3, #0
 801490a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801490c:	2300      	movs	r3, #0
 801490e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8014910:	2300      	movs	r3, #0
 8014912:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	791b      	ldrb	r3, [r3, #4]
 8014918:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801491a:	7b7b      	ldrb	r3, [r7, #13]
 801491c:	2b02      	cmp	r3, #2
 801491e:	d801      	bhi.n	8014924 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8014920:	2306      	movs	r3, #6
 8014922:	e089      	b.n	8014a38 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8014924:	7b7b      	ldrb	r3, [r7, #13]
 8014926:	2b0f      	cmp	r3, #15
 8014928:	d901      	bls.n	801492e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801492a:	2303      	movs	r3, #3
 801492c:	e084      	b.n	8014a38 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	7a1b      	ldrb	r3, [r3, #8]
 8014934:	f343 0303 	sbfx	r3, r3, #0, #4
 8014938:	b25b      	sxtb	r3, r3
 801493a:	2207      	movs	r2, #7
 801493c:	2100      	movs	r1, #0
 801493e:	4618      	mov	r0, r3
 8014940:	f7fe f99d 	bl	8012c7e <RegionCommonValueInRange>
 8014944:	4603      	mov	r3, r0
 8014946:	2b00      	cmp	r3, #0
 8014948:	d101      	bne.n	801494e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801494a:	2301      	movs	r3, #1
 801494c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	7a1b      	ldrb	r3, [r3, #8]
 8014954:	f343 1303 	sbfx	r3, r3, #4, #4
 8014958:	b25b      	sxtb	r3, r3
 801495a:	2207      	movs	r2, #7
 801495c:	2100      	movs	r1, #0
 801495e:	4618      	mov	r0, r3
 8014960:	f7fe f98d 	bl	8012c7e <RegionCommonValueInRange>
 8014964:	4603      	mov	r3, r0
 8014966:	2b00      	cmp	r3, #0
 8014968:	d101      	bne.n	801496e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801496a:	2301      	movs	r3, #1
 801496c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	7a1b      	ldrb	r3, [r3, #8]
 8014974:	f343 0303 	sbfx	r3, r3, #0, #4
 8014978:	b25a      	sxtb	r2, r3
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	7a1b      	ldrb	r3, [r3, #8]
 8014980:	f343 1303 	sbfx	r3, r3, #4, #4
 8014984:	b25b      	sxtb	r3, r3
 8014986:	429a      	cmp	r2, r3
 8014988:	dd01      	ble.n	801498e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801498a:	2301      	movs	r3, #1
 801498c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801498e:	7bbb      	ldrb	r3, [r7, #14]
 8014990:	f083 0301 	eor.w	r3, r3, #1
 8014994:	b2db      	uxtb	r3, r3
 8014996:	2b00      	cmp	r3, #0
 8014998:	d010      	beq.n	80149bc <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f107 020c 	add.w	r2, r7, #12
 80149a4:	4611      	mov	r1, r2
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7fe feee 	bl	8013788 <VerifyRfFreq>
 80149ac:	4603      	mov	r3, r0
 80149ae:	f083 0301 	eor.w	r3, r3, #1
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d001      	beq.n	80149bc <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80149b8:	2301      	movs	r3, #1
 80149ba:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80149bc:	7bfb      	ldrb	r3, [r7, #15]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d004      	beq.n	80149cc <RegionEU868ChannelAdd+0xcc>
 80149c2:	7bbb      	ldrb	r3, [r7, #14]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d001      	beq.n	80149cc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80149c8:	2306      	movs	r3, #6
 80149ca:	e035      	b.n	8014a38 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80149d2:	2305      	movs	r3, #5
 80149d4:	e030      	b.n	8014a38 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80149d6:	7bbb      	ldrb	r3, [r7, #14]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d001      	beq.n	80149e0 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80149dc:	2304      	movs	r3, #4
 80149de:	e02b      	b.n	8014a38 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80149e0:	4b17      	ldr	r3, [pc, #92]	@ (8014a40 <RegionEU868ChannelAdd+0x140>)
 80149e2:	6819      	ldr	r1, [r3, #0]
 80149e4:	7b7a      	ldrb	r2, [r7, #13]
 80149e6:	4613      	mov	r3, r2
 80149e8:	005b      	lsls	r3, r3, #1
 80149ea:	4413      	add	r3, r2
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	18c8      	adds	r0, r1, r3
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	220c      	movs	r2, #12
 80149f6:	4619      	mov	r1, r3
 80149f8:	f002 ff49 	bl	801788e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80149fc:	4b10      	ldr	r3, [pc, #64]	@ (8014a40 <RegionEU868ChannelAdd+0x140>)
 80149fe:	6819      	ldr	r1, [r3, #0]
 8014a00:	7b7a      	ldrb	r2, [r7, #13]
 8014a02:	7b38      	ldrb	r0, [r7, #12]
 8014a04:	4613      	mov	r3, r2
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	4413      	add	r3, r2
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	440b      	add	r3, r1
 8014a0e:	3309      	adds	r3, #9
 8014a10:	4602      	mov	r2, r0
 8014a12:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8014a14:	4b0a      	ldr	r3, [pc, #40]	@ (8014a40 <RegionEU868ChannelAdd+0x140>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8014a1c:	b21a      	sxth	r2, r3
 8014a1e:	7b7b      	ldrb	r3, [r7, #13]
 8014a20:	2101      	movs	r1, #1
 8014a22:	fa01 f303 	lsl.w	r3, r1, r3
 8014a26:	b21b      	sxth	r3, r3
 8014a28:	4313      	orrs	r3, r2
 8014a2a:	b21a      	sxth	r2, r3
 8014a2c:	4b04      	ldr	r3, [pc, #16]	@ (8014a40 <RegionEU868ChannelAdd+0x140>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	b292      	uxth	r2, r2
 8014a32:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8014a36:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3710      	adds	r7, #16
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	20001220 	.word	0x20001220

08014a44 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b086      	sub	sp, #24
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8014a52:	7dfb      	ldrb	r3, [r7, #23]
 8014a54:	2b02      	cmp	r3, #2
 8014a56:	d801      	bhi.n	8014a5c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	e016      	b.n	8014a8a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8014a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8014a94 <RegionEU868ChannelsRemove+0x50>)
 8014a5e:	6819      	ldr	r1, [r3, #0]
 8014a60:	7dfa      	ldrb	r2, [r7, #23]
 8014a62:	4613      	mov	r3, r2
 8014a64:	005b      	lsls	r3, r3, #1
 8014a66:	4413      	add	r3, r2
 8014a68:	009b      	lsls	r3, r3, #2
 8014a6a:	440b      	add	r3, r1
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	2300      	movs	r3, #0
 8014a70:	6013      	str	r3, [r2, #0]
 8014a72:	6053      	str	r3, [r2, #4]
 8014a74:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8014a76:	4b07      	ldr	r3, [pc, #28]	@ (8014a94 <RegionEU868ChannelsRemove+0x50>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014a7e:	7df9      	ldrb	r1, [r7, #23]
 8014a80:	2210      	movs	r2, #16
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7fe f918 	bl	8012cb8 <RegionCommonChanDisable>
 8014a88:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	3718      	adds	r7, #24
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	20001220 	.word	0x20001220

08014a98 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b085      	sub	sp, #20
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	71fb      	strb	r3, [r7, #7]
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	71bb      	strb	r3, [r7, #6]
 8014aa6:	4613      	mov	r3, r2
 8014aa8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8014aaa:	79ba      	ldrb	r2, [r7, #6]
 8014aac:	797b      	ldrb	r3, [r7, #5]
 8014aae:	1ad3      	subs	r3, r2, r3
 8014ab0:	b2db      	uxtb	r3, r3
 8014ab2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8014ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	da01      	bge.n	8014ac0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8014abc:	2300      	movs	r3, #0
 8014abe:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8014ac0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3714      	adds	r7, #20
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bc80      	pop	{r7}
 8014aca:	4770      	bx	lr

08014acc <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	603b      	str	r3, [r7, #0]
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	71fb      	strb	r3, [r7, #7]
 8014ad8:	460b      	mov	r3, r1
 8014ada:	71bb      	strb	r3, [r7, #6]
 8014adc:	4613      	mov	r3, r2
 8014ade:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8014ae0:	79fb      	ldrb	r3, [r7, #7]
 8014ae2:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8014ae4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014aec:	4611      	mov	r1, r2
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fe fdcd 	bl	801368e <RegionCommonLimitTxPower>
 8014af4:	4603      	mov	r3, r0
 8014af6:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8014af8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014afc:	2b04      	cmp	r3, #4
 8014afe:	d106      	bne.n	8014b0e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8014b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b04:	2b02      	cmp	r3, #2
 8014b06:	bfb8      	it	lt
 8014b08:	2302      	movlt	r3, #2
 8014b0a:	73fb      	strb	r3, [r7, #15]
 8014b0c:	e00d      	b.n	8014b2a <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8014b0e:	2204      	movs	r2, #4
 8014b10:	2100      	movs	r1, #0
 8014b12:	6838      	ldr	r0, [r7, #0]
 8014b14:	f7fe f904 	bl	8012d20 <RegionCommonCountChannels>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	2b31      	cmp	r3, #49	@ 0x31
 8014b1c:	d805      	bhi.n	8014b2a <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8014b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b22:	2b05      	cmp	r3, #5
 8014b24:	bfb8      	it	lt
 8014b26:	2305      	movlt	r3, #5
 8014b28:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8014b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3710      	adds	r7, #16
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
	...

08014b38 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b082      	sub	sp, #8
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014b40:	4b18      	ldr	r3, [pc, #96]	@ (8014ba4 <VerifyRfFreq+0x6c>)
 8014b42:	6a1b      	ldr	r3, [r3, #32]
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	4798      	blx	r3
 8014b48:	4603      	mov	r3, r0
 8014b4a:	f083 0301 	eor.w	r3, r3, #1
 8014b4e:	b2db      	uxtb	r3, r3
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d001      	beq.n	8014b58 <VerifyRfFreq+0x20>
    {
        return false;
 8014b54:	2300      	movs	r3, #0
 8014b56:	e021      	b.n	8014b9c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4a13      	ldr	r2, [pc, #76]	@ (8014ba8 <VerifyRfFreq+0x70>)
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	d910      	bls.n	8014b82 <VerifyRfFreq+0x4a>
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	4a12      	ldr	r2, [pc, #72]	@ (8014bac <VerifyRfFreq+0x74>)
 8014b64:	4293      	cmp	r3, r2
 8014b66:	d80c      	bhi.n	8014b82 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	4b11      	ldr	r3, [pc, #68]	@ (8014bb0 <VerifyRfFreq+0x78>)
 8014b6c:	4413      	add	r3, r2
 8014b6e:	4a11      	ldr	r2, [pc, #68]	@ (8014bb4 <VerifyRfFreq+0x7c>)
 8014b70:	fba2 1203 	umull	r1, r2, r2, r3
 8014b74:	0c92      	lsrs	r2, r2, #18
 8014b76:	4910      	ldr	r1, [pc, #64]	@ (8014bb8 <VerifyRfFreq+0x80>)
 8014b78:	fb01 f202 	mul.w	r2, r1, r2
 8014b7c:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8014b7e:	2a00      	cmp	r2, #0
 8014b80:	d001      	beq.n	8014b86 <VerifyRfFreq+0x4e>
    {
        return false;
 8014b82:	2300      	movs	r3, #0
 8014b84:	e00a      	b.n	8014b9c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	4a0c      	ldr	r2, [pc, #48]	@ (8014bbc <VerifyRfFreq+0x84>)
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	d903      	bls.n	8014b96 <VerifyRfFreq+0x5e>
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	4a06      	ldr	r2, [pc, #24]	@ (8014bac <VerifyRfFreq+0x74>)
 8014b92:	4293      	cmp	r3, r2
 8014b94:	d901      	bls.n	8014b9a <VerifyRfFreq+0x62>
    {
        return false;
 8014b96:	2300      	movs	r3, #0
 8014b98:	e000      	b.n	8014b9c <VerifyRfFreq+0x64>
    }
    return true;
 8014b9a:	2301      	movs	r3, #1
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	08021f8c 	.word	0x08021f8c
 8014ba8:	3708709f 	.word	0x3708709f
 8014bac:	374886e0 	.word	0x374886e0
 8014bb0:	c8f78f60 	.word	0xc8f78f60
 8014bb4:	6fd91d85 	.word	0x6fd91d85
 8014bb8:	000927c0 	.word	0x000927c0
 8014bbc:	35c8015f 	.word	0x35c8015f

08014bc0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014bc0:	b590      	push	{r4, r7, lr}
 8014bc2:	b089      	sub	sp, #36	@ 0x24
 8014bc4:	af04      	add	r7, sp, #16
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	460a      	mov	r2, r1
 8014bca:	71fb      	strb	r3, [r7, #7]
 8014bcc:	4613      	mov	r3, r2
 8014bce:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8014bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8014c14 <GetTimeOnAir+0x54>)
 8014bd6:	5cd3      	ldrb	r3, [r2, r3]
 8014bd8:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8014bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014bde:	490e      	ldr	r1, [pc, #56]	@ (8014c18 <GetTimeOnAir+0x58>)
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7fe fd69 	bl	80136b8 <RegionCommonGetBandwidth>
 8014be6:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014be8:	4b0c      	ldr	r3, [pc, #48]	@ (8014c1c <GetTimeOnAir+0x5c>)
 8014bea:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014bec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014bf0:	88bb      	ldrh	r3, [r7, #4]
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	2101      	movs	r1, #1
 8014bf6:	9103      	str	r1, [sp, #12]
 8014bf8:	9302      	str	r3, [sp, #8]
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	9301      	str	r3, [sp, #4]
 8014bfe:	2308      	movs	r3, #8
 8014c00:	9300      	str	r3, [sp, #0]
 8014c02:	2301      	movs	r3, #1
 8014c04:	68b9      	ldr	r1, [r7, #8]
 8014c06:	2001      	movs	r0, #1
 8014c08:	47a0      	blx	r4
 8014c0a:	4603      	mov	r3, r0
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3714      	adds	r7, #20
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd90      	pop	{r4, r7, pc}
 8014c14:	08021b84 	.word	0x08021b84
 8014c18:	08021b94 	.word	0x08021b94
 8014c1c:	08021f8c 	.word	0x08021f8c

08014c20 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b088      	sub	sp, #32
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014c28:	2300      	movs	r3, #0
 8014c2a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	3b01      	subs	r3, #1
 8014c32:	2b37      	cmp	r3, #55	@ 0x37
 8014c34:	f200 8136 	bhi.w	8014ea4 <RegionUS915GetPhyParam+0x284>
 8014c38:	a201      	add	r2, pc, #4	@ (adr r2, 8014c40 <RegionUS915GetPhyParam+0x20>)
 8014c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c3e:	bf00      	nop
 8014c40:	08014d21 	.word	0x08014d21
 8014c44:	08014d27 	.word	0x08014d27
 8014c48:	08014ea5 	.word	0x08014ea5
 8014c4c:	08014ea5 	.word	0x08014ea5
 8014c50:	08014ea5 	.word	0x08014ea5
 8014c54:	08014d2d 	.word	0x08014d2d
 8014c58:	08014ea5 	.word	0x08014ea5
 8014c5c:	08014d67 	.word	0x08014d67
 8014c60:	08014ea5 	.word	0x08014ea5
 8014c64:	08014d6d 	.word	0x08014d6d
 8014c68:	08014d73 	.word	0x08014d73
 8014c6c:	08014d79 	.word	0x08014d79
 8014c70:	08014d7f 	.word	0x08014d7f
 8014c74:	08014d8f 	.word	0x08014d8f
 8014c78:	08014d9f 	.word	0x08014d9f
 8014c7c:	08014da5 	.word	0x08014da5
 8014c80:	08014dad 	.word	0x08014dad
 8014c84:	08014db5 	.word	0x08014db5
 8014c88:	08014dbd 	.word	0x08014dbd
 8014c8c:	08014dc5 	.word	0x08014dc5
 8014c90:	08014dcd 	.word	0x08014dcd
 8014c94:	08014de1 	.word	0x08014de1
 8014c98:	08014de7 	.word	0x08014de7
 8014c9c:	08014ded 	.word	0x08014ded
 8014ca0:	08014df3 	.word	0x08014df3
 8014ca4:	08014dff 	.word	0x08014dff
 8014ca8:	08014e0b 	.word	0x08014e0b
 8014cac:	08014e11 	.word	0x08014e11
 8014cb0:	08014e19 	.word	0x08014e19
 8014cb4:	08014e1f 	.word	0x08014e1f
 8014cb8:	08014e25 	.word	0x08014e25
 8014cbc:	08014e2b 	.word	0x08014e2b
 8014cc0:	08014d33 	.word	0x08014d33
 8014cc4:	08014ea5 	.word	0x08014ea5
 8014cc8:	08014ea5 	.word	0x08014ea5
 8014ccc:	08014ea5 	.word	0x08014ea5
 8014cd0:	08014ea5 	.word	0x08014ea5
 8014cd4:	08014ea5 	.word	0x08014ea5
 8014cd8:	08014ea5 	.word	0x08014ea5
 8014cdc:	08014ea5 	.word	0x08014ea5
 8014ce0:	08014ea5 	.word	0x08014ea5
 8014ce4:	08014ea5 	.word	0x08014ea5
 8014ce8:	08014ea5 	.word	0x08014ea5
 8014cec:	08014ea5 	.word	0x08014ea5
 8014cf0:	08014ea5 	.word	0x08014ea5
 8014cf4:	08014ea5 	.word	0x08014ea5
 8014cf8:	08014e33 	.word	0x08014e33
 8014cfc:	08014e47 	.word	0x08014e47
 8014d00:	08014e55 	.word	0x08014e55
 8014d04:	08014e5b 	.word	0x08014e5b
 8014d08:	08014ea5 	.word	0x08014ea5
 8014d0c:	08014e61 	.word	0x08014e61
 8014d10:	08014e75 	.word	0x08014e75
 8014d14:	08014e7b 	.word	0x08014e7b
 8014d18:	08014e81 	.word	0x08014e81
 8014d1c:	08014e91 	.word	0x08014e91
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8014d20:	2308      	movs	r3, #8
 8014d22:	61bb      	str	r3, [r7, #24]
            break;
 8014d24:	e0bf      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8014d26:	2300      	movs	r3, #0
 8014d28:	61bb      	str	r3, [r7, #24]
            break;
 8014d2a:	e0bc      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	61bb      	str	r3, [r7, #24]
            break;
 8014d30:	e0b9      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014d38:	733b      	strb	r3, [r7, #12]
 8014d3a:	2304      	movs	r3, #4
 8014d3c:	737b      	strb	r3, [r7, #13]
 8014d3e:	2300      	movs	r3, #0
 8014d40:	73bb      	strb	r3, [r7, #14]
 8014d42:	2348      	movs	r3, #72	@ 0x48
 8014d44:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8014d46:	4b5b      	ldr	r3, [pc, #364]	@ (8014eb4 <RegionUS915GetPhyParam+0x294>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014d4e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014d50:	4b58      	ldr	r3, [pc, #352]	@ (8014eb4 <RegionUS915GetPhyParam+0x294>)
 8014d52:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014d54:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8014d56:	f107 030c 	add.w	r3, r7, #12
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fe fc59 	bl	8013612 <RegionCommonGetNextLowerTxDr>
 8014d60:	4603      	mov	r3, r0
 8014d62:	61bb      	str	r3, [r7, #24]
            break;
 8014d64:	e09f      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8014d66:	2300      	movs	r3, #0
 8014d68:	61bb      	str	r3, [r7, #24]
            break;
 8014d6a:	e09c      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	61bb      	str	r3, [r7, #24]
            break;
 8014d70:	e099      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014d72:	2340      	movs	r3, #64	@ 0x40
 8014d74:	61bb      	str	r3, [r7, #24]
            break;
 8014d76:	e096      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8014d78:	2320      	movs	r3, #32
 8014d7a:	61bb      	str	r3, [r7, #24]
            break;
 8014d7c:	e093      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d84:	461a      	mov	r2, r3
 8014d86:	4b4c      	ldr	r3, [pc, #304]	@ (8014eb8 <RegionUS915GetPhyParam+0x298>)
 8014d88:	5c9b      	ldrb	r3, [r3, r2]
 8014d8a:	61bb      	str	r3, [r7, #24]
            break;
 8014d8c:	e08b      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d94:	461a      	mov	r2, r3
 8014d96:	4b49      	ldr	r3, [pc, #292]	@ (8014ebc <RegionUS915GetPhyParam+0x29c>)
 8014d98:	5c9b      	ldrb	r3, [r3, r2]
 8014d9a:	61bb      	str	r3, [r7, #24]
            break;
 8014d9c:	e083      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8014d9e:	2300      	movs	r3, #0
 8014da0:	61bb      	str	r3, [r7, #24]
            break;
 8014da2:	e080      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8014da4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014da8:	61bb      	str	r3, [r7, #24]
            break;
 8014daa:	e07c      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014db0:	61bb      	str	r3, [r7, #24]
            break;
 8014db2:	e078      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014db4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014db8:	61bb      	str	r3, [r7, #24]
            break;
 8014dba:	e074      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014dbc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014dc0:	61bb      	str	r3, [r7, #24]
            break;
 8014dc2:	e070      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014dc4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8014dc8:	61bb      	str	r3, [r7, #24]
            break;
 8014dca:	e06c      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8014dcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014dd0:	483b      	ldr	r0, [pc, #236]	@ (8014ec0 <RegionUS915GetPhyParam+0x2a0>)
 8014dd2:	f002 fd45 	bl	8017860 <randr>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014ddc:	61bb      	str	r3, [r7, #24]
            break;
 8014dde:	e062      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014de0:	2300      	movs	r3, #0
 8014de2:	61bb      	str	r3, [r7, #24]
            break;
 8014de4:	e05f      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8014de6:	4b37      	ldr	r3, [pc, #220]	@ (8014ec4 <RegionUS915GetPhyParam+0x2a4>)
 8014de8:	61bb      	str	r3, [r7, #24]
            break;
 8014dea:	e05c      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8014dec:	2308      	movs	r3, #8
 8014dee:	61bb      	str	r3, [r7, #24]
            break;
 8014df0:	e059      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014df2:	4b30      	ldr	r3, [pc, #192]	@ (8014eb4 <RegionUS915GetPhyParam+0x294>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014dfa:	61bb      	str	r3, [r7, #24]
            break;
 8014dfc:	e053      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8014dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8014eb4 <RegionUS915GetPhyParam+0x294>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014e06:	61bb      	str	r3, [r7, #24]
            break;
 8014e08:	e04d      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8014e0a:	2348      	movs	r3, #72	@ 0x48
 8014e0c:	61bb      	str	r3, [r7, #24]
            break;
 8014e0e:	e04a      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8014e10:	4b28      	ldr	r3, [pc, #160]	@ (8014eb4 <RegionUS915GetPhyParam+0x294>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	61bb      	str	r3, [r7, #24]
            break;
 8014e16:	e046      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	61bb      	str	r3, [r7, #24]
            break;
 8014e1c:	e043      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	61bb      	str	r3, [r7, #24]
            break;
 8014e22:	e040      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8014e24:	4b28      	ldr	r3, [pc, #160]	@ (8014ec8 <RegionUS915GetPhyParam+0x2a8>)
 8014e26:	61bb      	str	r3, [r7, #24]
            break;
 8014e28:	e03d      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8014e2a:	f04f 0300 	mov.w	r3, #0
 8014e2e:	61bb      	str	r3, [r7, #24]
            break;
 8014e30:	e039      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	791b      	ldrb	r3, [r3, #4]
 8014e36:	4a25      	ldr	r2, [pc, #148]	@ (8014ecc <RegionUS915GetPhyParam+0x2ac>)
 8014e38:	4922      	ldr	r1, [pc, #136]	@ (8014ec4 <RegionUS915GetPhyParam+0x2a4>)
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7fd fd4c 	bl	80128d8 <RegionBaseUSCalcDownlinkFrequency>
 8014e40:	4603      	mov	r3, r0
 8014e42:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8014e44:	e02f      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8014e46:	2317      	movs	r3, #23
 8014e48:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8014e4a:	2304      	movs	r3, #4
 8014e4c:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8014e4e:	2303      	movs	r3, #3
 8014e50:	76bb      	strb	r3, [r7, #26]
            break;
 8014e52:	e028      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8014e54:	2308      	movs	r3, #8
 8014e56:	61bb      	str	r3, [r7, #24]
            break;
 8014e58:	e025      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8014e5a:	2308      	movs	r3, #8
 8014e5c:	61bb      	str	r3, [r7, #24]
            break;
 8014e5e:	e022      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	791b      	ldrb	r3, [r3, #4]
 8014e64:	4a19      	ldr	r2, [pc, #100]	@ (8014ecc <RegionUS915GetPhyParam+0x2ac>)
 8014e66:	4917      	ldr	r1, [pc, #92]	@ (8014ec4 <RegionUS915GetPhyParam+0x2a4>)
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7fd fd35 	bl	80128d8 <RegionBaseUSCalcDownlinkFrequency>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8014e72:	e018      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8014e74:	2308      	movs	r3, #8
 8014e76:	61bb      	str	r3, [r7, #24]
            break;
 8014e78:	e015      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8014e7a:	2308      	movs	r3, #8
 8014e7c:	61bb      	str	r3, [r7, #24]
            break;
 8014e7e:	e012      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e86:	461a      	mov	r2, r3
 8014e88:	4b11      	ldr	r3, [pc, #68]	@ (8014ed0 <RegionUS915GetPhyParam+0x2b0>)
 8014e8a:	5c9b      	ldrb	r3, [r3, r2]
 8014e8c:	61bb      	str	r3, [r7, #24]
            break;
 8014e8e:	e00a      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e96:	490f      	ldr	r1, [pc, #60]	@ (8014ed4 <RegionUS915GetPhyParam+0x2b4>)
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7fe fc0d 	bl	80136b8 <RegionCommonGetBandwidth>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	61bb      	str	r3, [r7, #24]
            break;
 8014ea2:	e000      	b.n	8014ea6 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8014ea4:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	61fb      	str	r3, [r7, #28]
 8014eaa:	69fb      	ldr	r3, [r7, #28]
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3720      	adds	r7, #32
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	2000122c 	.word	0x2000122c
 8014eb8:	08021be8 	.word	0x08021be8
 8014ebc:	08021bf8 	.word	0x08021bf8
 8014ec0:	fffffc18 	.word	0xfffffc18
 8014ec4:	370870a0 	.word	0x370870a0
 8014ec8:	4200999a 	.word	0x4200999a
 8014ecc:	000927c0 	.word	0x000927c0
 8014ed0:	08021b84 	.word	0x08021b84
 8014ed4:	08021b94 	.word	0x08021b94

08014ed8 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014ed8:	b590      	push	{r4, r7, lr}
 8014eda:	b085      	sub	sp, #20
 8014edc:	af02      	add	r7, sp, #8
 8014ede:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014ee0:	4b11      	ldr	r3, [pc, #68]	@ (8014f28 <RegionUS915SetBandTxDone+0x50>)
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	4b11      	ldr	r3, [pc, #68]	@ (8014f2c <RegionUS915SetBandTxDone+0x54>)
 8014ee6:	6819      	ldr	r1, [r3, #0]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	4618      	mov	r0, r3
 8014eee:	4603      	mov	r3, r0
 8014ef0:	005b      	lsls	r3, r3, #1
 8014ef2:	4403      	add	r3, r0
 8014ef4:	009b      	lsls	r3, r3, #2
 8014ef6:	440b      	add	r3, r1
 8014ef8:	3309      	adds	r3, #9
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	4619      	mov	r1, r3
 8014efe:	460b      	mov	r3, r1
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	440b      	add	r3, r1
 8014f04:	00db      	lsls	r3, r3, #3
 8014f06:	18d0      	adds	r0, r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	6899      	ldr	r1, [r3, #8]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	785c      	ldrb	r4, [r3, #1]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	691a      	ldr	r2, [r3, #16]
 8014f14:	9200      	str	r2, [sp, #0]
 8014f16:	68db      	ldr	r3, [r3, #12]
 8014f18:	4622      	mov	r2, r4
 8014f1a:	f7fd ff53 	bl	8012dc4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8014f1e:	bf00      	nop
 8014f20:	370c      	adds	r7, #12
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd90      	pop	{r4, r7, pc}
 8014f26:	bf00      	nop
 8014f28:	20001230 	.word	0x20001230
 8014f2c:	2000122c 	.word	0x2000122c

08014f30 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b08a      	sub	sp, #40	@ 0x28
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8014f38:	2301      	movs	r3, #1
 8014f3a:	81bb      	strh	r3, [r7, #12]
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	73bb      	strb	r3, [r7, #14]
 8014f40:	2300      	movs	r3, #0
 8014f42:	613b      	str	r3, [r7, #16]
 8014f44:	2300      	movs	r3, #0
 8014f46:	617b      	str	r3, [r7, #20]
 8014f48:	2300      	movs	r3, #0
 8014f4a:	61bb      	str	r3, [r7, #24]
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	61fb      	str	r3, [r7, #28]
 8014f50:	2300      	movs	r3, #0
 8014f52:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	7b1b      	ldrb	r3, [r3, #12]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d007      	beq.n	8014f6e <RegionUS915InitDefaults+0x3e>
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	f2c0 8104 	blt.w	801516c <RegionUS915InitDefaults+0x23c>
 8014f64:	3b01      	subs	r3, #1
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	f200 8100 	bhi.w	801516c <RegionUS915InitDefaults+0x23c>
 8014f6c:	e0ce      	b.n	801510c <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	f000 80fc 	beq.w	8015170 <RegionUS915InitDefaults+0x240>
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f000 80f7 	beq.w	8015170 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	4a7c      	ldr	r2, [pc, #496]	@ (8015178 <RegionUS915InitDefaults+0x248>)
 8014f88:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	4a7b      	ldr	r2, [pc, #492]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8014f90:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	689b      	ldr	r3, [r3, #8]
 8014f96:	4a7a      	ldr	r2, [pc, #488]	@ (8015180 <RegionUS915InitDefaults+0x250>)
 8014f98:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8014f9a:	4b77      	ldr	r3, [pc, #476]	@ (8015178 <RegionUS915InitDefaults+0x248>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8014fa2:	4b75      	ldr	r3, [pc, #468]	@ (8015178 <RegionUS915InitDefaults+0x248>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8014faa:	4b75      	ldr	r3, [pc, #468]	@ (8015180 <RegionUS915InitDefaults+0x250>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f107 010c 	add.w	r1, r7, #12
 8014fb2:	2218      	movs	r2, #24
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f002 fc6a 	bl	801788e <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8014fba:	2300      	movs	r3, #0
 8014fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014fc0:	e02e      	b.n	8015020 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8014fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8015184 <RegionUS915InitDefaults+0x254>)
 8014fc8:	fb03 f202 	mul.w	r2, r3, r2
 8014fcc:	4b6e      	ldr	r3, [pc, #440]	@ (8015188 <RegionUS915InitDefaults+0x258>)
 8014fce:	4413      	add	r3, r2
 8014fd0:	4a6a      	ldr	r2, [pc, #424]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8014fd2:	6811      	ldr	r1, [r2, #0]
 8014fd4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014fd8:	4618      	mov	r0, r3
 8014fda:	4613      	mov	r3, r2
 8014fdc:	005b      	lsls	r3, r3, #1
 8014fde:	4413      	add	r3, r2
 8014fe0:	009b      	lsls	r3, r3, #2
 8014fe2:	440b      	add	r3, r1
 8014fe4:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8014fe6:	4b65      	ldr	r3, [pc, #404]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8014fe8:	6819      	ldr	r1, [r3, #0]
 8014fea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014fee:	4613      	mov	r3, r2
 8014ff0:	005b      	lsls	r3, r3, #1
 8014ff2:	4413      	add	r3, r2
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	440b      	add	r3, r1
 8014ff8:	3308      	adds	r3, #8
 8014ffa:	2230      	movs	r2, #48	@ 0x30
 8014ffc:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8014ffe:	4b5f      	ldr	r3, [pc, #380]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8015000:	6819      	ldr	r1, [r3, #0]
 8015002:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015006:	4613      	mov	r3, r2
 8015008:	005b      	lsls	r3, r3, #1
 801500a:	4413      	add	r3, r2
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	440b      	add	r3, r1
 8015010:	3309      	adds	r3, #9
 8015012:	2200      	movs	r2, #0
 8015014:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8015016:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801501a:	3301      	adds	r3, #1
 801501c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015024:	2b3f      	cmp	r3, #63	@ 0x3f
 8015026:	d9cc      	bls.n	8014fc2 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8015028:	2340      	movs	r3, #64	@ 0x40
 801502a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801502e:	e02f      	b.n	8015090 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8015030:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015034:	3b40      	subs	r3, #64	@ 0x40
 8015036:	4a55      	ldr	r2, [pc, #340]	@ (801518c <RegionUS915InitDefaults+0x25c>)
 8015038:	fb03 f202 	mul.w	r2, r3, r2
 801503c:	4b54      	ldr	r3, [pc, #336]	@ (8015190 <RegionUS915InitDefaults+0x260>)
 801503e:	4413      	add	r3, r2
 8015040:	4a4e      	ldr	r2, [pc, #312]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8015042:	6811      	ldr	r1, [r2, #0]
 8015044:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8015048:	4618      	mov	r0, r3
 801504a:	4613      	mov	r3, r2
 801504c:	005b      	lsls	r3, r3, #1
 801504e:	4413      	add	r3, r2
 8015050:	009b      	lsls	r3, r3, #2
 8015052:	440b      	add	r3, r1
 8015054:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8015056:	4b49      	ldr	r3, [pc, #292]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8015058:	6819      	ldr	r1, [r3, #0]
 801505a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801505e:	4613      	mov	r3, r2
 8015060:	005b      	lsls	r3, r3, #1
 8015062:	4413      	add	r3, r2
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	440b      	add	r3, r1
 8015068:	3308      	adds	r3, #8
 801506a:	2244      	movs	r2, #68	@ 0x44
 801506c:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801506e:	4b43      	ldr	r3, [pc, #268]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8015070:	6819      	ldr	r1, [r3, #0]
 8015072:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8015076:	4613      	mov	r3, r2
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	4413      	add	r3, r2
 801507c:	009b      	lsls	r3, r3, #2
 801507e:	440b      	add	r3, r1
 8015080:	3309      	adds	r3, #9
 8015082:	2200      	movs	r2, #0
 8015084:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8015086:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801508a:	3301      	adds	r3, #1
 801508c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015090:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015094:	2b47      	cmp	r3, #71	@ 0x47
 8015096:	d9cb      	bls.n	8015030 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8015098:	4b38      	ldr	r3, [pc, #224]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150a0:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80150a4:	4b35      	ldr	r3, [pc, #212]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150ac:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80150b0:	4b32      	ldr	r3, [pc, #200]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150b8:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80150bc:	4b2f      	ldr	r3, [pc, #188]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150c4:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80150c8:	4b2c      	ldr	r3, [pc, #176]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	22ff      	movs	r2, #255	@ 0xff
 80150ce:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80150d2:	4b2a      	ldr	r3, [pc, #168]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2200      	movs	r2, #0
 80150d8:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80150dc:	4b27      	ldr	r3, [pc, #156]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80150e4:	4b25      	ldr	r3, [pc, #148]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80150ec:	2206      	movs	r2, #6
 80150ee:	4619      	mov	r1, r3
 80150f0:	f7fd fe42 	bl	8012d78 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80150f4:	4b20      	ldr	r3, [pc, #128]	@ (8015178 <RegionUS915InitDefaults+0x248>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4618      	mov	r0, r3
 80150fa:	4b20      	ldr	r3, [pc, #128]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015102:	2206      	movs	r2, #6
 8015104:	4619      	mov	r1, r3
 8015106:	f7fd fe37 	bl	8012d78 <RegionCommonChanMaskCopy>
            break;
 801510a:	e032      	b.n	8015172 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801510c:	4b1b      	ldr	r3, [pc, #108]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015114:	4b19      	ldr	r3, [pc, #100]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801511c:	2206      	movs	r2, #6
 801511e:	4619      	mov	r1, r3
 8015120:	f7fd fe2a 	bl	8012d78 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8015124:	2300      	movs	r3, #0
 8015126:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801512a:	e01a      	b.n	8015162 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801512c:	4b12      	ldr	r3, [pc, #72]	@ (8015178 <RegionUS915InitDefaults+0x248>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8015134:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8015138:	4b10      	ldr	r3, [pc, #64]	@ (801517c <RegionUS915InitDefaults+0x24c>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8015140:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8015144:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8015148:	4b0b      	ldr	r3, [pc, #44]	@ (8015178 <RegionUS915InitDefaults+0x248>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8015150:	4001      	ands	r1, r0
 8015152:	b289      	uxth	r1, r1
 8015154:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8015158:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801515c:	3301      	adds	r3, #1
 801515e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015162:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8015166:	2b05      	cmp	r3, #5
 8015168:	d9e0      	bls.n	801512c <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801516a:	e002      	b.n	8015172 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801516c:	bf00      	nop
 801516e:	e000      	b.n	8015172 <RegionUS915InitDefaults+0x242>
                return;
 8015170:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8015172:	3728      	adds	r7, #40	@ 0x28
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	20001228 	.word	0x20001228
 801517c:	2000122c 	.word	0x2000122c
 8015180:	20001230 	.word	0x20001230
 8015184:	00030d40 	.word	0x00030d40
 8015188:	35c80160 	.word	0x35c80160
 801518c:	00186a00 	.word	0x00186a00
 8015190:	35d2afc0 	.word	0x35d2afc0

08015194 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	460b      	mov	r3, r1
 801519e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80151a0:	78fb      	ldrb	r3, [r7, #3]
 80151a2:	2b0f      	cmp	r3, #15
 80151a4:	d867      	bhi.n	8015276 <RegionUS915Verify+0xe2>
 80151a6:	a201      	add	r2, pc, #4	@ (adr r2, 80151ac <RegionUS915Verify+0x18>)
 80151a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151ac:	080151ed 	.word	0x080151ed
 80151b0:	08015277 	.word	0x08015277
 80151b4:	08015277 	.word	0x08015277
 80151b8:	08015277 	.word	0x08015277
 80151bc:	08015277 	.word	0x08015277
 80151c0:	080151fb 	.word	0x080151fb
 80151c4:	08015219 	.word	0x08015219
 80151c8:	08015237 	.word	0x08015237
 80151cc:	08015277 	.word	0x08015277
 80151d0:	08015255 	.word	0x08015255
 80151d4:	08015255 	.word	0x08015255
 80151d8:	08015277 	.word	0x08015277
 80151dc:	08015277 	.word	0x08015277
 80151e0:	08015277 	.word	0x08015277
 80151e4:	08015277 	.word	0x08015277
 80151e8:	08015273 	.word	0x08015273
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7ff fca1 	bl	8014b38 <VerifyRfFreq>
 80151f6:	4603      	mov	r3, r0
 80151f8:	e03e      	b.n	8015278 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f993 3000 	ldrsb.w	r3, [r3]
 8015200:	2204      	movs	r2, #4
 8015202:	2100      	movs	r1, #0
 8015204:	4618      	mov	r0, r3
 8015206:	f7fd fd3a 	bl	8012c7e <RegionCommonValueInRange>
 801520a:	4603      	mov	r3, r0
 801520c:	2b00      	cmp	r3, #0
 801520e:	bf14      	ite	ne
 8015210:	2301      	movne	r3, #1
 8015212:	2300      	moveq	r3, #0
 8015214:	b2db      	uxtb	r3, r3
 8015216:	e02f      	b.n	8015278 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f993 3000 	ldrsb.w	r3, [r3]
 801521e:	2205      	movs	r2, #5
 8015220:	2100      	movs	r1, #0
 8015222:	4618      	mov	r0, r3
 8015224:	f7fd fd2b 	bl	8012c7e <RegionCommonValueInRange>
 8015228:	4603      	mov	r3, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	bf14      	ite	ne
 801522e:	2301      	movne	r3, #1
 8015230:	2300      	moveq	r3, #0
 8015232:	b2db      	uxtb	r3, r3
 8015234:	e020      	b.n	8015278 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f993 3000 	ldrsb.w	r3, [r3]
 801523c:	220d      	movs	r2, #13
 801523e:	2108      	movs	r1, #8
 8015240:	4618      	mov	r0, r3
 8015242:	f7fd fd1c 	bl	8012c7e <RegionCommonValueInRange>
 8015246:	4603      	mov	r3, r0
 8015248:	2b00      	cmp	r3, #0
 801524a:	bf14      	ite	ne
 801524c:	2301      	movne	r3, #1
 801524e:	2300      	moveq	r3, #0
 8015250:	b2db      	uxtb	r3, r3
 8015252:	e011      	b.n	8015278 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f993 3000 	ldrsb.w	r3, [r3]
 801525a:	220e      	movs	r2, #14
 801525c:	2100      	movs	r1, #0
 801525e:	4618      	mov	r0, r3
 8015260:	f7fd fd0d 	bl	8012c7e <RegionCommonValueInRange>
 8015264:	4603      	mov	r3, r0
 8015266:	2b00      	cmp	r3, #0
 8015268:	bf14      	ite	ne
 801526a:	2301      	movne	r3, #1
 801526c:	2300      	moveq	r3, #0
 801526e:	b2db      	uxtb	r3, r3
 8015270:	e002      	b.n	8015278 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8015272:	2300      	movs	r3, #0
 8015274:	e000      	b.n	8015278 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 8015276:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8015278:	4618      	mov	r0, r3
 801527a:	3708      	adds	r7, #8
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}

08015280 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015280:	b480      	push	{r7}
 8015282:	b085      	sub	sp, #20
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	7a1b      	ldrb	r3, [r3, #8]
 801528c:	2b10      	cmp	r3, #16
 801528e:	d15e      	bne.n	801534e <RegionUS915ApplyCFList+0xce>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	330f      	adds	r3, #15
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	2b01      	cmp	r3, #1
 801529a:	d15a      	bne.n	8015352 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801529c:	2300      	movs	r3, #0
 801529e:	73fb      	strb	r3, [r7, #15]
 80152a0:	2300      	movs	r3, #0
 80152a2:	73bb      	strb	r3, [r7, #14]
 80152a4:	e04f      	b.n	8015346 <RegionUS915ApplyCFList+0xc6>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	685a      	ldr	r2, [r3, #4]
 80152aa:	7bbb      	ldrb	r3, [r7, #14]
 80152ac:	4413      	add	r3, r2
 80152ae:	7819      	ldrb	r1, [r3, #0]
 80152b0:	4b2a      	ldr	r3, [pc, #168]	@ (801535c <RegionUS915ApplyCFList+0xdc>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	7bfa      	ldrb	r2, [r7, #15]
 80152b6:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80152be:	4b27      	ldr	r3, [pc, #156]	@ (801535c <RegionUS915ApplyCFList+0xdc>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	7bfa      	ldrb	r2, [r7, #15]
 80152c4:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152c8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	685a      	ldr	r2, [r3, #4]
 80152d0:	7bbb      	ldrb	r3, [r7, #14]
 80152d2:	3301      	adds	r3, #1
 80152d4:	4413      	add	r3, r2
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	021b      	lsls	r3, r3, #8
 80152da:	b299      	uxth	r1, r3
 80152dc:	4b1f      	ldr	r3, [pc, #124]	@ (801535c <RegionUS915ApplyCFList+0xdc>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	7bfa      	ldrb	r2, [r7, #15]
 80152e2:	4301      	orrs	r1, r0
 80152e4:	b289      	uxth	r1, r1
 80152e6:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80152ee:	7bfb      	ldrb	r3, [r7, #15]
 80152f0:	2b04      	cmp	r3, #4
 80152f2:	d10f      	bne.n	8015314 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80152f4:	4b19      	ldr	r3, [pc, #100]	@ (801535c <RegionUS915ApplyCFList+0xdc>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	7bfa      	ldrb	r2, [r7, #15]
 80152fa:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152fe:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8015302:	4b16      	ldr	r3, [pc, #88]	@ (801535c <RegionUS915ApplyCFList+0xdc>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	7bfa      	ldrb	r2, [r7, #15]
 8015308:	b2c9      	uxtb	r1, r1
 801530a:	b289      	uxth	r1, r1
 801530c:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8015310:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8015314:	4b12      	ldr	r3, [pc, #72]	@ (8015360 <RegionUS915ApplyCFList+0xe0>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	7bfa      	ldrb	r2, [r7, #15]
 801531a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801531e:	4b0f      	ldr	r3, [pc, #60]	@ (801535c <RegionUS915ApplyCFList+0xdc>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	7bfa      	ldrb	r2, [r7, #15]
 8015324:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8015328:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801532c:	4b0c      	ldr	r3, [pc, #48]	@ (8015360 <RegionUS915ApplyCFList+0xe0>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	7bfa      	ldrb	r2, [r7, #15]
 8015332:	4001      	ands	r1, r0
 8015334:	b289      	uxth	r1, r1
 8015336:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801533a:	7bfb      	ldrb	r3, [r7, #15]
 801533c:	3301      	adds	r3, #1
 801533e:	73fb      	strb	r3, [r7, #15]
 8015340:	7bbb      	ldrb	r3, [r7, #14]
 8015342:	3302      	adds	r3, #2
 8015344:	73bb      	strb	r3, [r7, #14]
 8015346:	7bfb      	ldrb	r3, [r7, #15]
 8015348:	2b04      	cmp	r3, #4
 801534a:	d9ac      	bls.n	80152a6 <RegionUS915ApplyCFList+0x26>
 801534c:	e002      	b.n	8015354 <RegionUS915ApplyCFList+0xd4>
        return;
 801534e:	bf00      	nop
 8015350:	e000      	b.n	8015354 <RegionUS915ApplyCFList+0xd4>
        return;
 8015352:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8015354:	3714      	adds	r7, #20
 8015356:	46bd      	mov	sp, r7
 8015358:	bc80      	pop	{r7}
 801535a:	4770      	bx	lr
 801535c:	2000122c 	.word	0x2000122c
 8015360:	20001228 	.word	0x20001228

08015364 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	2204      	movs	r2, #4
 8015372:	2100      	movs	r1, #0
 8015374:	4618      	mov	r0, r3
 8015376:	f7fd fcd3 	bl	8012d20 <RegionCommonCountChannels>
 801537a:	4603      	mov	r3, r0
 801537c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801537e:	7bbb      	ldrb	r3, [r7, #14]
 8015380:	2b01      	cmp	r3, #1
 8015382:	d804      	bhi.n	801538e <RegionUS915ChanMaskSet+0x2a>
 8015384:	7bbb      	ldrb	r3, [r7, #14]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d001      	beq.n	801538e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801538a:	2300      	movs	r3, #0
 801538c:	e04a      	b.n	8015424 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	791b      	ldrb	r3, [r3, #4]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d002      	beq.n	801539c <RegionUS915ChanMaskSet+0x38>
 8015396:	2b01      	cmp	r3, #1
 8015398:	d036      	beq.n	8015408 <RegionUS915ChanMaskSet+0xa4>
 801539a:	e040      	b.n	801541e <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801539c:	4b23      	ldr	r3, [pc, #140]	@ (801542c <RegionUS915ChanMaskSet+0xc8>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	2206      	movs	r2, #6
 80153aa:	4619      	mov	r1, r3
 80153ac:	f7fd fce4 	bl	8012d78 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80153b0:	4b1e      	ldr	r3, [pc, #120]	@ (801542c <RegionUS915ChanMaskSet+0xc8>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 80153b8:	4b1c      	ldr	r3, [pc, #112]	@ (801542c <RegionUS915ChanMaskSet+0xc8>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	b2d2      	uxtb	r2, r2
 80153be:	b292      	uxth	r2, r2
 80153c0:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80153c4:	4b19      	ldr	r3, [pc, #100]	@ (801542c <RegionUS915ChanMaskSet+0xc8>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	2200      	movs	r2, #0
 80153ca:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80153ce:	2300      	movs	r3, #0
 80153d0:	73fb      	strb	r3, [r7, #15]
 80153d2:	e015      	b.n	8015400 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80153d4:	4b16      	ldr	r3, [pc, #88]	@ (8015430 <RegionUS915ChanMaskSet+0xcc>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	7bfa      	ldrb	r2, [r7, #15]
 80153da:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80153de:	4b13      	ldr	r3, [pc, #76]	@ (801542c <RegionUS915ChanMaskSet+0xc8>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	7bfa      	ldrb	r2, [r7, #15]
 80153e4:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80153e8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80153ec:	4b10      	ldr	r3, [pc, #64]	@ (8015430 <RegionUS915ChanMaskSet+0xcc>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	7bfa      	ldrb	r2, [r7, #15]
 80153f2:	4001      	ands	r1, r0
 80153f4:	b289      	uxth	r1, r1
 80153f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80153fa:	7bfb      	ldrb	r3, [r7, #15]
 80153fc:	3301      	adds	r3, #1
 80153fe:	73fb      	strb	r3, [r7, #15]
 8015400:	7bfb      	ldrb	r3, [r7, #15]
 8015402:	2b05      	cmp	r3, #5
 8015404:	d9e6      	bls.n	80153d4 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8015406:	e00c      	b.n	8015422 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015408:	4b08      	ldr	r3, [pc, #32]	@ (801542c <RegionUS915ChanMaskSet+0xc8>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	2206      	movs	r2, #6
 8015416:	4619      	mov	r1, r3
 8015418:	f7fd fcae 	bl	8012d78 <RegionCommonChanMaskCopy>
            break;
 801541c:	e001      	b.n	8015422 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801541e:	2300      	movs	r3, #0
 8015420:	e000      	b.n	8015424 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8015422:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8015424:	4618      	mov	r0, r3
 8015426:	3710      	adds	r7, #16
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	2000122c 	.word	0x2000122c
 8015430:	20001228 	.word	0x20001228

08015434 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b088      	sub	sp, #32
 8015438:	af02      	add	r7, sp, #8
 801543a:	60ba      	str	r2, [r7, #8]
 801543c:	607b      	str	r3, [r7, #4]
 801543e:	4603      	mov	r3, r0
 8015440:	73fb      	strb	r3, [r7, #15]
 8015442:	460b      	mov	r3, r1
 8015444:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8015446:	2300      	movs	r3, #0
 8015448:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801544a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801544e:	2b0d      	cmp	r3, #13
 8015450:	bfa8      	it	ge
 8015452:	230d      	movge	r3, #13
 8015454:	b25a      	sxtb	r2, r3
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015460:	4916      	ldr	r1, [pc, #88]	@ (80154bc <RegionUS915ComputeRxWindowParameters+0x88>)
 8015462:	4618      	mov	r0, r3
 8015464:	f7fe f928 	bl	80136b8 <RegionCommonGetBandwidth>
 8015468:	4603      	mov	r3, r0
 801546a:	b2da      	uxtb	r2, r3
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015476:	461a      	mov	r2, r3
 8015478:	4b11      	ldr	r3, [pc, #68]	@ (80154c0 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801547a:	5c9a      	ldrb	r2, [r3, r2]
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015482:	4619      	mov	r1, r3
 8015484:	4b0d      	ldr	r3, [pc, #52]	@ (80154bc <RegionUS915ComputeRxWindowParameters+0x88>)
 8015486:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801548a:	4619      	mov	r1, r3
 801548c:	4610      	mov	r0, r2
 801548e:	f7fd fe91 	bl	80131b4 <RegionCommonComputeSymbolTimeLoRa>
 8015492:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015494:	4b0b      	ldr	r3, [pc, #44]	@ (80154c4 <RegionUS915ComputeRxWindowParameters+0x90>)
 8015496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015498:	4798      	blx	r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	3308      	adds	r3, #8
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	320c      	adds	r2, #12
 80154a2:	7bb9      	ldrb	r1, [r7, #14]
 80154a4:	9201      	str	r2, [sp, #4]
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	4603      	mov	r3, r0
 80154aa:	68ba      	ldr	r2, [r7, #8]
 80154ac:	6978      	ldr	r0, [r7, #20]
 80154ae:	f7fd fea7 	bl	8013200 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 80154b2:	bf00      	nop
 80154b4:	3718      	adds	r7, #24
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	08021b94 	.word	0x08021b94
 80154c0:	08021b84 	.word	0x08021b84
 80154c4:	08021f8c 	.word	0x08021f8c

080154c8 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80154c8:	b590      	push	{r4, r7, lr}
 80154ca:	b091      	sub	sp, #68	@ 0x44
 80154cc:	af0a      	add	r7, sp, #40	@ 0x28
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	785b      	ldrb	r3, [r3, #1]
 80154d6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80154d8:	2300      	movs	r3, #0
 80154da:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80154dc:	2300      	movs	r3, #0
 80154de:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80154e6:	4b34      	ldr	r3, [pc, #208]	@ (80155b8 <RegionUS915RxConfig+0xf0>)
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	4798      	blx	r3
 80154ec:	4603      	mov	r3, r0
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d001      	beq.n	80154f6 <RegionUS915RxConfig+0x2e>
    {
        return false;
 80154f2:	2300      	movs	r3, #0
 80154f4:	e05c      	b.n	80155b0 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	7cdb      	ldrb	r3, [r3, #19]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d109      	bne.n	8015512 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	f003 0307 	and.w	r3, r3, #7
 8015506:	4a2d      	ldr	r2, [pc, #180]	@ (80155bc <RegionUS915RxConfig+0xf4>)
 8015508:	fb03 f202 	mul.w	r2, r3, r2
 801550c:	4b2c      	ldr	r3, [pc, #176]	@ (80155c0 <RegionUS915RxConfig+0xf8>)
 801550e:	4413      	add	r3, r2
 8015510:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8015512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015516:	4a2b      	ldr	r2, [pc, #172]	@ (80155c4 <RegionUS915RxConfig+0xfc>)
 8015518:	5cd3      	ldrb	r3, [r2, r3]
 801551a:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801551c:	4b26      	ldr	r3, [pc, #152]	@ (80155b8 <RegionUS915RxConfig+0xf0>)
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	6938      	ldr	r0, [r7, #16]
 8015522:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015524:	4b24      	ldr	r3, [pc, #144]	@ (80155b8 <RegionUS915RxConfig+0xf0>)
 8015526:	699c      	ldr	r4, [r3, #24]
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	789b      	ldrb	r3, [r3, #2]
 801552c:	4618      	mov	r0, r3
 801552e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	689b      	ldr	r3, [r3, #8]
 8015536:	b29b      	uxth	r3, r3
 8015538:	687a      	ldr	r2, [r7, #4]
 801553a:	7c92      	ldrb	r2, [r2, #18]
 801553c:	9209      	str	r2, [sp, #36]	@ 0x24
 801553e:	2201      	movs	r2, #1
 8015540:	9208      	str	r2, [sp, #32]
 8015542:	2200      	movs	r2, #0
 8015544:	9207      	str	r2, [sp, #28]
 8015546:	2200      	movs	r2, #0
 8015548:	9206      	str	r2, [sp, #24]
 801554a:	2200      	movs	r2, #0
 801554c:	9205      	str	r2, [sp, #20]
 801554e:	2200      	movs	r2, #0
 8015550:	9204      	str	r2, [sp, #16]
 8015552:	2200      	movs	r2, #0
 8015554:	9203      	str	r2, [sp, #12]
 8015556:	9302      	str	r3, [sp, #8]
 8015558:	2308      	movs	r3, #8
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	2300      	movs	r3, #0
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	2301      	movs	r3, #1
 8015562:	460a      	mov	r2, r1
 8015564:	4601      	mov	r1, r0
 8015566:	2001      	movs	r0, #1
 8015568:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	7c5b      	ldrb	r3, [r3, #17]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d005      	beq.n	801557e <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8015572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015576:	4a14      	ldr	r2, [pc, #80]	@ (80155c8 <RegionUS915RxConfig+0x100>)
 8015578:	5cd3      	ldrb	r3, [r2, r3]
 801557a:	75fb      	strb	r3, [r7, #23]
 801557c:	e004      	b.n	8015588 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801557e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015582:	4a12      	ldr	r2, [pc, #72]	@ (80155cc <RegionUS915RxConfig+0x104>)
 8015584:	5cd3      	ldrb	r3, [r2, r3]
 8015586:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015588:	4b0b      	ldr	r3, [pc, #44]	@ (80155b8 <RegionUS915RxConfig+0xf0>)
 801558a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801558c:	7dfa      	ldrb	r2, [r7, #23]
 801558e:	320d      	adds	r2, #13
 8015590:	b2d2      	uxtb	r2, r2
 8015592:	4611      	mov	r1, r2
 8015594:	2001      	movs	r0, #1
 8015596:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	7cdb      	ldrb	r3, [r3, #19]
 801559c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80155a0:	6939      	ldr	r1, [r7, #16]
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fe f8a6 	bl	80136f4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	7bfa      	ldrb	r2, [r7, #15]
 80155ac:	701a      	strb	r2, [r3, #0]
    return true;
 80155ae:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	371c      	adds	r7, #28
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd90      	pop	{r4, r7, pc}
 80155b8:	08021f8c 	.word	0x08021f8c
 80155bc:	000927c0 	.word	0x000927c0
 80155c0:	370870a0 	.word	0x370870a0
 80155c4:	08021b84 	.word	0x08021b84
 80155c8:	08021bf8 	.word	0x08021bf8
 80155cc:	08021be8 	.word	0x08021be8

080155d0 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80155d0:	b590      	push	{r4, r7, lr}
 80155d2:	b093      	sub	sp, #76	@ 0x4c
 80155d4:	af0a      	add	r7, sp, #40	@ 0x28
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	60b9      	str	r1, [r7, #8]
 80155da:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80155e2:	461a      	mov	r2, r3
 80155e4:	4b49      	ldr	r3, [pc, #292]	@ (801570c <RegionUS915TxConfig+0x13c>)
 80155e6:	5c9b      	ldrb	r3, [r3, r2]
 80155e8:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80155f0:	4b47      	ldr	r3, [pc, #284]	@ (8015710 <RegionUS915TxConfig+0x140>)
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	4b47      	ldr	r3, [pc, #284]	@ (8015714 <RegionUS915TxConfig+0x144>)
 80155f6:	6819      	ldr	r1, [r3, #0]
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	461c      	mov	r4, r3
 80155fe:	4623      	mov	r3, r4
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4423      	add	r3, r4
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	440b      	add	r3, r1
 8015608:	3309      	adds	r3, #9
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	4619      	mov	r1, r3
 801560e:	460b      	mov	r3, r1
 8015610:	005b      	lsls	r3, r3, #1
 8015612:	440b      	add	r3, r1
 8015614:	00db      	lsls	r3, r3, #3
 8015616:	4413      	add	r3, r2
 8015618:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015622:	4b3c      	ldr	r3, [pc, #240]	@ (8015714 <RegionUS915TxConfig+0x144>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801562a:	f7ff fa4f 	bl	8014acc <LimitTxPower>
 801562e:	4603      	mov	r3, r0
 8015630:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015638:	4937      	ldr	r1, [pc, #220]	@ (8015718 <RegionUS915TxConfig+0x148>)
 801563a:	4618      	mov	r0, r3
 801563c:	f7fe f83c 	bl	80136b8 <RegionCommonGetBandwidth>
 8015640:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015642:	2300      	movs	r3, #0
 8015644:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8015646:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801564a:	f04f 0200 	mov.w	r2, #0
 801564e:	4933      	ldr	r1, [pc, #204]	@ (801571c <RegionUS915TxConfig+0x14c>)
 8015650:	4618      	mov	r0, r3
 8015652:	f7fd fe8d 	bl	8013370 <RegionCommonComputeTxPower>
 8015656:	4603      	mov	r3, r0
 8015658:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801565a:	4b31      	ldr	r3, [pc, #196]	@ (8015720 <RegionUS915TxConfig+0x150>)
 801565c:	68da      	ldr	r2, [r3, #12]
 801565e:	4b2d      	ldr	r3, [pc, #180]	@ (8015714 <RegionUS915TxConfig+0x144>)
 8015660:	6819      	ldr	r1, [r3, #0]
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	4618      	mov	r0, r3
 8015668:	4603      	mov	r3, r0
 801566a:	005b      	lsls	r3, r3, #1
 801566c:	4403      	add	r3, r0
 801566e:	009b      	lsls	r3, r3, #2
 8015670:	440b      	add	r3, r1
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	4618      	mov	r0, r3
 8015676:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015678:	4b29      	ldr	r3, [pc, #164]	@ (8015720 <RegionUS915TxConfig+0x150>)
 801567a:	69dc      	ldr	r4, [r3, #28]
 801567c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015680:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015684:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015688:	9208      	str	r2, [sp, #32]
 801568a:	2200      	movs	r2, #0
 801568c:	9207      	str	r2, [sp, #28]
 801568e:	2200      	movs	r2, #0
 8015690:	9206      	str	r2, [sp, #24]
 8015692:	2200      	movs	r2, #0
 8015694:	9205      	str	r2, [sp, #20]
 8015696:	2201      	movs	r2, #1
 8015698:	9204      	str	r2, [sp, #16]
 801569a:	2200      	movs	r2, #0
 801569c:	9203      	str	r2, [sp, #12]
 801569e:	2208      	movs	r2, #8
 80156a0:	9202      	str	r2, [sp, #8]
 80156a2:	2201      	movs	r2, #1
 80156a4:	9201      	str	r2, [sp, #4]
 80156a6:	9300      	str	r3, [sp, #0]
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	2200      	movs	r2, #0
 80156ac:	2001      	movs	r0, #1
 80156ae:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80156b0:	4b18      	ldr	r3, [pc, #96]	@ (8015714 <RegionUS915TxConfig+0x144>)
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	4619      	mov	r1, r3
 80156ba:	460b      	mov	r3, r1
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	440b      	add	r3, r1
 80156c0:	009b      	lsls	r3, r3, #2
 80156c2:	4413      	add	r3, r2
 80156c4:	681a      	ldr	r2, [r3, #0]
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156cc:	4619      	mov	r1, r3
 80156ce:	4610      	mov	r0, r2
 80156d0:	f7fe f842 	bl	8013758 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80156d4:	4b12      	ldr	r3, [pc, #72]	@ (8015720 <RegionUS915TxConfig+0x150>)
 80156d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80156d8:	68fa      	ldr	r2, [r7, #12]
 80156da:	8992      	ldrh	r2, [r2, #12]
 80156dc:	b2d2      	uxtb	r2, r2
 80156de:	4611      	mov	r1, r2
 80156e0:	2001      	movs	r0, #1
 80156e2:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	899b      	ldrh	r3, [r3, #12]
 80156ee:	4619      	mov	r1, r3
 80156f0:	4610      	mov	r0, r2
 80156f2:	f7ff fa65 	bl	8014bc0 <GetTimeOnAir>
 80156f6:	4602      	mov	r2, r0
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	7fba      	ldrb	r2, [r7, #30]
 8015700:	701a      	strb	r2, [r3, #0]
    return true;
 8015702:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8015704:	4618      	mov	r0, r3
 8015706:	3724      	adds	r7, #36	@ 0x24
 8015708:	46bd      	mov	sp, r7
 801570a:	bd90      	pop	{r4, r7, pc}
 801570c:	08021b84 	.word	0x08021b84
 8015710:	20001230 	.word	0x20001230
 8015714:	2000122c 	.word	0x2000122c
 8015718:	08021b94 	.word	0x08021b94
 801571c:	41f00000 	.word	0x41f00000
 8015720:	08021f8c 	.word	0x08021f8c

08015724 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015724:	b590      	push	{r4, r7, lr}
 8015726:	b097      	sub	sp, #92	@ 0x5c
 8015728:	af00      	add	r7, sp, #0
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
 8015730:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015732:	2307      	movs	r3, #7
 8015734:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015738:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801573c:	2200      	movs	r2, #0
 801573e:	601a      	str	r2, [r3, #0]
 8015740:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015742:	2300      	movs	r3, #0
 8015744:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801574e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8015752:	2200      	movs	r2, #0
 8015754:	601a      	str	r2, [r3, #0]
 8015756:	605a      	str	r2, [r3, #4]
 8015758:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801575a:	4b97      	ldr	r3, [pc, #604]	@ (80159b8 <RegionUS915LinkAdrReq+0x294>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8015762:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8015766:	2206      	movs	r2, #6
 8015768:	4618      	mov	r0, r3
 801576a:	f7fd fb05 	bl	8012d78 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801576e:	e11b      	b.n	80159a8 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	685a      	ldr	r2, [r3, #4]
 8015774:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015778:	4413      	add	r3, r2
 801577a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801577e:	4611      	mov	r1, r2
 8015780:	4618      	mov	r0, r3
 8015782:	f7fd fc3d 	bl	8013000 <RegionCommonParseLinkAdrReq>
 8015786:	4603      	mov	r3, r0
 8015788:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 801578c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8015790:	2b00      	cmp	r3, #0
 8015792:	f000 8113 	beq.w	80159bc <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015796:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801579a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801579e:	4413      	add	r3, r2
 80157a0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80157a4:	2307      	movs	r3, #7
 80157a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80157aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80157ae:	2b06      	cmp	r3, #6
 80157b0:	d116      	bne.n	80157e0 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80157b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 80157ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 80157c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 80157ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80157d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	b29b      	uxth	r3, r3
 80157da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80157de:	e0e3      	b.n	80159a8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80157e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80157e4:	2b07      	cmp	r3, #7
 80157e6:	d112      	bne.n	801580e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80157e8:	2300      	movs	r3, #0
 80157ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 80157ee:	2300      	movs	r3, #0
 80157f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 80157f4:	2300      	movs	r3, #0
 80157f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 80157fa:	2300      	movs	r3, #0
 80157fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8015800:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8015804:	b2db      	uxtb	r3, r3
 8015806:	b29b      	uxth	r3, r3
 8015808:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801580c:	e0cc      	b.n	80159a8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801580e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8015812:	2b05      	cmp	r3, #5
 8015814:	f040 80bf 	bne.w	8015996 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8015818:	2301      	movs	r3, #1
 801581a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801581e:	2300      	movs	r3, #0
 8015820:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8015824:	2300      	movs	r3, #0
 8015826:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 801582a:	e0ae      	b.n	801598a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801582c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8015830:	b2da      	uxtb	r2, r3
 8015832:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8015836:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801583a:	fa01 f303 	lsl.w	r3, r1, r3
 801583e:	4013      	ands	r3, r2
 8015840:	2b00      	cmp	r3, #0
 8015842:	d04d      	beq.n	80158e0 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8015844:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015848:	f003 0301 	and.w	r3, r3, #1
 801584c:	b2db      	uxtb	r3, r3
 801584e:	2b00      	cmp	r3, #0
 8015850:	d120      	bne.n	8015894 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8015852:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	3358      	adds	r3, #88	@ 0x58
 801585a:	443b      	add	r3, r7
 801585c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8015860:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015864:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8015868:	b292      	uxth	r2, r2
 801586a:	005b      	lsls	r3, r3, #1
 801586c:	3358      	adds	r3, #88	@ 0x58
 801586e:	443b      	add	r3, r7
 8015870:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8015874:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8015878:	b21a      	sxth	r2, r3
 801587a:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801587e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015882:	fa01 f303 	lsl.w	r3, r1, r3
 8015886:	b21b      	sxth	r3, r3
 8015888:	4313      	orrs	r3, r2
 801588a:	b21b      	sxth	r3, r3
 801588c:	b29b      	uxth	r3, r3
 801588e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015892:	e075      	b.n	8015980 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8015894:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	3358      	adds	r3, #88	@ 0x58
 801589c:	443b      	add	r3, r7
 801589e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80158a2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80158a6:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 80158aa:	b292      	uxth	r2, r2
 80158ac:	005b      	lsls	r3, r3, #1
 80158ae:	3358      	adds	r3, #88	@ 0x58
 80158b0:	443b      	add	r3, r7
 80158b2:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80158b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80158ba:	b21a      	sxth	r2, r3
 80158bc:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80158c0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80158c4:	fa01 f303 	lsl.w	r3, r1, r3
 80158c8:	b21b      	sxth	r3, r3
 80158ca:	4313      	orrs	r3, r2
 80158cc:	b21b      	sxth	r3, r3
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80158d4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80158d8:	3301      	adds	r3, #1
 80158da:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80158de:	e04f      	b.n	8015980 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80158e0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80158e4:	f003 0301 	and.w	r3, r3, #1
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d122      	bne.n	8015934 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80158ee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80158f2:	005b      	lsls	r3, r3, #1
 80158f4:	3358      	adds	r3, #88	@ 0x58
 80158f6:	443b      	add	r3, r7
 80158f8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80158fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015900:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8015904:	b292      	uxth	r2, r2
 8015906:	005b      	lsls	r3, r3, #1
 8015908:	3358      	adds	r3, #88	@ 0x58
 801590a:	443b      	add	r3, r7
 801590c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8015910:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8015914:	b21a      	sxth	r2, r3
 8015916:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801591a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801591e:	fa01 f303 	lsl.w	r3, r1, r3
 8015922:	b21b      	sxth	r3, r3
 8015924:	43db      	mvns	r3, r3
 8015926:	b21b      	sxth	r3, r3
 8015928:	4013      	ands	r3, r2
 801592a:	b21b      	sxth	r3, r3
 801592c:	b29b      	uxth	r3, r3
 801592e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015932:	e025      	b.n	8015980 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8015934:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015938:	005b      	lsls	r3, r3, #1
 801593a:	3358      	adds	r3, #88	@ 0x58
 801593c:	443b      	add	r3, r7
 801593e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8015942:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015946:	b2d2      	uxtb	r2, r2
 8015948:	b292      	uxth	r2, r2
 801594a:	005b      	lsls	r3, r3, #1
 801594c:	3358      	adds	r3, #88	@ 0x58
 801594e:	443b      	add	r3, r7
 8015950:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8015954:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8015958:	b21a      	sxth	r2, r3
 801595a:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801595e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015962:	fa01 f303 	lsl.w	r3, r1, r3
 8015966:	b21b      	sxth	r3, r3
 8015968:	43db      	mvns	r3, r3
 801596a:	b21b      	sxth	r3, r3
 801596c:	4013      	ands	r3, r2
 801596e:	b21b      	sxth	r3, r3
 8015970:	b29b      	uxth	r3, r3
 8015972:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8015976:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801597a:	3301      	adds	r3, #1
 801597c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8015980:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015984:	3301      	adds	r3, #1
 8015986:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 801598a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801598e:	2b07      	cmp	r3, #7
 8015990:	f67f af4c 	bls.w	801582c <RegionUS915LinkAdrReq+0x108>
 8015994:	e008      	b.n	80159a8 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8015996:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801599a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 801599e:	005b      	lsls	r3, r3, #1
 80159a0:	3358      	adds	r3, #88	@ 0x58
 80159a2:	443b      	add	r3, r7
 80159a4:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	7a1b      	ldrb	r3, [r3, #8]
 80159ac:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80159b0:	429a      	cmp	r2, r3
 80159b2:	f4ff aedd 	bcc.w	8015770 <RegionUS915LinkAdrReq+0x4c>
 80159b6:	e002      	b.n	80159be <RegionUS915LinkAdrReq+0x29a>
 80159b8:	2000122c 	.word	0x2000122c
            break; // break loop, since no more request has been found
 80159bc:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80159be:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80159c2:	2b03      	cmp	r3, #3
 80159c4:	dc0f      	bgt.n	80159e6 <RegionUS915LinkAdrReq+0x2c2>
 80159c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80159ca:	2204      	movs	r2, #4
 80159cc:	2100      	movs	r1, #0
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7fd f9a6 	bl	8012d20 <RegionCommonCountChannels>
 80159d4:	4603      	mov	r3, r0
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d805      	bhi.n	80159e6 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 80159da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80159de:	f023 0301 	bic.w	r3, r3, #1
 80159e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80159e6:	2302      	movs	r3, #2
 80159e8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	7a5b      	ldrb	r3, [r3, #9]
 80159f0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80159f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7ff f911 	bl	8014c20 <RegionUS915GetPhyParam>
 80159fe:	4603      	mov	r3, r0
 8015a00:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 8015a02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015a06:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	7a9b      	ldrb	r3, [r3, #10]
 8015a0c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015a0e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8015a12:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015a14:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8015a18:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015a1a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8015a1e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015a26:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015a2e:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	7b5b      	ldrb	r3, [r3, #13]
 8015a34:	b25b      	sxtb	r3, r3
 8015a36:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8015a38:	2348      	movs	r3, #72	@ 0x48
 8015a3a:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8015a3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8015a42:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a46:	b25b      	sxtb	r3, r3
 8015a48:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8015a4c:	2304      	movs	r3, #4
 8015a4e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015a52:	4b3f      	ldr	r3, [pc, #252]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8015a58:	230e      	movs	r3, #14
 8015a5a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015a6a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8015a6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015a72:	1c9a      	adds	r2, r3, #2
 8015a74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015a78:	1c59      	adds	r1, r3, #1
 8015a7a:	f107 0014 	add.w	r0, r7, #20
 8015a7e:	4623      	mov	r3, r4
 8015a80:	f7fd fb10 	bl	80130a4 <RegionCommonLinkAdrReqVerifyParams>
 8015a84:	4603      	mov	r3, r0
 8015a86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015a8e:	2b07      	cmp	r3, #7
 8015a90:	d147      	bne.n	8015b22 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8015a92:	4b2f      	ldr	r3, [pc, #188]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015a9a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8015a9e:	2206      	movs	r2, #6
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7fd f969 	bl	8012d78 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8015aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	8819      	ldrh	r1, [r3, #0]
 8015aac:	4b28      	ldr	r3, [pc, #160]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015ab4:	4b27      	ldr	r3, [pc, #156]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	400a      	ands	r2, r1
 8015aba:	b292      	uxth	r2, r2
 8015abc:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8015abe:	4b25      	ldr	r3, [pc, #148]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	8859      	ldrh	r1, [r3, #2]
 8015ac4:	4b22      	ldr	r3, [pc, #136]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 8015acc:	4b21      	ldr	r3, [pc, #132]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	400a      	ands	r2, r1
 8015ad2:	b292      	uxth	r2, r2
 8015ad4:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8015ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	8899      	ldrh	r1, [r3, #4]
 8015adc:	4b1c      	ldr	r3, [pc, #112]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 8015ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	400a      	ands	r2, r1
 8015aea:	b292      	uxth	r2, r2
 8015aec:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8015aee:	4b19      	ldr	r3, [pc, #100]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	88d9      	ldrh	r1, [r3, #6]
 8015af4:	4b16      	ldr	r3, [pc, #88]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 8015afc:	4b15      	ldr	r3, [pc, #84]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	400a      	ands	r2, r1
 8015b02:	b292      	uxth	r2, r2
 8015b04:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8015b06:	4b12      	ldr	r3, [pc, #72]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	4b12      	ldr	r3, [pc, #72]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8015b12:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8015b14:	4b0e      	ldr	r3, [pc, #56]	@ (8015b50 <RegionUS915LinkAdrReq+0x42c>)
 8015b16:	681a      	ldr	r2, [r3, #0]
 8015b18:	4b0e      	ldr	r3, [pc, #56]	@ (8015b54 <RegionUS915LinkAdrReq+0x430>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 8015b20:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015b22:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015b2a:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015b32:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015b3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015b3c:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8015b40:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8015b42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	375c      	adds	r7, #92	@ 0x5c
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd90      	pop	{r4, r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	2000122c 	.word	0x2000122c
 8015b54:	20001228 	.word	0x20001228

08015b58 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b084      	sub	sp, #16
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015b60:	2307      	movs	r3, #7
 8015b62:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7fe ffe5 	bl	8014b38 <VerifyRfFreq>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	f083 0301 	eor.w	r3, r3, #1
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d003      	beq.n	8015b82 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015b7a:	7bfb      	ldrb	r3, [r7, #15]
 8015b7c:	f023 0301 	bic.w	r3, r3, #1
 8015b80:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f993 3000 	ldrsb.w	r3, [r3]
 8015b88:	220d      	movs	r2, #13
 8015b8a:	2108      	movs	r1, #8
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7fd f876 	bl	8012c7e <RegionCommonValueInRange>
 8015b92:	4603      	mov	r3, r0
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d103      	bne.n	8015ba0 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015b98:	7bfb      	ldrb	r3, [r7, #15]
 8015b9a:	f023 0302 	bic.w	r3, r3, #2
 8015b9e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8015ba6:	2207      	movs	r2, #7
 8015ba8:	2105      	movs	r1, #5
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7fd f867 	bl	8012c7e <RegionCommonValueInRange>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	2b01      	cmp	r3, #1
 8015bb4:	d004      	beq.n	8015bc0 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8015bbc:	2b0d      	cmp	r3, #13
 8015bbe:	dd03      	ble.n	8015bc8 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8015bc0:	7bfb      	ldrb	r3, [r7, #15]
 8015bc2:	f023 0302 	bic.w	r3, r3, #2
 8015bc6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015bce:	2203      	movs	r2, #3
 8015bd0:	2100      	movs	r1, #0
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7fd f853 	bl	8012c7e <RegionCommonValueInRange>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d103      	bne.n	8015be6 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015bde:	7bfb      	ldrb	r3, [r7, #15]
 8015be0:	f023 0304 	bic.w	r3, r3, #4
 8015be4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8015be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3710      	adds	r7, #16
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bc80      	pop	{r7}
 8015c04:	4770      	bx	lr

08015c06 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015c06:	b480      	push	{r7}
 8015c08:	b083      	sub	sp, #12
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	370c      	adds	r7, #12
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bc80      	pop	{r7}
 8015c1a:	4770      	bx	lr

08015c1c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	370c      	adds	r7, #12
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bc80      	pop	{r7}
 8015c30:	4770      	bx	lr
	...

08015c34 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	460a      	mov	r2, r1
 8015c3e:	71fb      	strb	r3, [r7, #7]
 8015c40:	4613      	mov	r3, r2
 8015c42:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8015c44:	79bb      	ldrb	r3, [r7, #6]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d106      	bne.n	8015c58 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8015c4a:	4b13      	ldr	r3, [pc, #76]	@ (8015c98 <RegionUS915AlternateDr+0x64>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	7b5a      	ldrb	r2, [r3, #13]
 8015c50:	3201      	adds	r2, #1
 8015c52:	b2d2      	uxtb	r2, r2
 8015c54:	735a      	strb	r2, [r3, #13]
 8015c56:	e005      	b.n	8015c64 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8015c58:	4b0f      	ldr	r3, [pc, #60]	@ (8015c98 <RegionUS915AlternateDr+0x64>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	7b5a      	ldrb	r2, [r3, #13]
 8015c5e:	3a01      	subs	r2, #1
 8015c60:	b2d2      	uxtb	r2, r2
 8015c62:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8015c64:	4b0c      	ldr	r3, [pc, #48]	@ (8015c98 <RegionUS915AlternateDr+0x64>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	7b5a      	ldrb	r2, [r3, #13]
 8015c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8015c9c <RegionUS915AlternateDr+0x68>)
 8015c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8015c70:	0859      	lsrs	r1, r3, #1
 8015c72:	460b      	mov	r3, r1
 8015c74:	00db      	lsls	r3, r3, #3
 8015c76:	440b      	add	r3, r1
 8015c78:	1ad3      	subs	r3, r2, r3
 8015c7a:	b2db      	uxtb	r3, r3
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d102      	bne.n	8015c86 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8015c80:	2304      	movs	r3, #4
 8015c82:	71fb      	strb	r3, [r7, #7]
 8015c84:	e001      	b.n	8015c8a <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8015c86:	2300      	movs	r3, #0
 8015c88:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8015c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	370c      	adds	r7, #12
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bc80      	pop	{r7}
 8015c96:	4770      	bx	lr
 8015c98:	20001228 	.word	0x20001228
 8015c9c:	38e38e39 	.word	0x38e38e39

08015ca0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b0a8      	sub	sp, #160	@ 0xa0
 8015ca4:	af02      	add	r7, sp, #8
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	607a      	str	r2, [r7, #4]
 8015cac:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8015cba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015cbe:	2248      	movs	r2, #72	@ 0x48
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f00a fd64 	bl	8020790 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015cc8:	230c      	movs	r3, #12
 8015cca:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8015cce:	4b67      	ldr	r3, [pc, #412]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	2204      	movs	r2, #4
 8015cd4:	2100      	movs	r1, #0
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7fd f822 	bl	8012d20 <RegionCommonCountChannels>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d10e      	bne.n	8015d00 <RegionUS915NextChannel+0x60>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8015ce2:	4b62      	ldr	r3, [pc, #392]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	4b61      	ldr	r3, [pc, #388]	@ (8015e70 <RegionUS915NextChannel+0x1d0>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015cf0:	2204      	movs	r2, #4
 8015cf2:	4619      	mov	r1, r3
 8015cf4:	f7fd f840 	bl	8012d78 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8015cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015d06:	2b03      	cmp	r3, #3
 8015d08:	dd0c      	ble.n	8015d24 <RegionUS915NextChannel+0x84>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8015d0a:	4b58      	ldr	r3, [pc, #352]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	891b      	ldrh	r3, [r3, #8]
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d106      	bne.n	8015d24 <RegionUS915NextChannel+0x84>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8015d16:	4b56      	ldr	r3, [pc, #344]	@ (8015e70 <RegionUS915NextChannel+0x1d0>)
 8015d18:	681a      	ldr	r2, [r3, #0]
 8015d1a:	4b54      	ldr	r3, [pc, #336]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8015d22:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	7a5b      	ldrb	r3, [r3, #9]
 8015d28:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8015d34:	4b4d      	ldr	r3, [pc, #308]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8015e70 <RegionUS915NextChannel+0x1d0>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8015d40:	4b4c      	ldr	r3, [pc, #304]	@ (8015e74 <RegionUS915NextChannel+0x1d4>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8015d46:	2348      	movs	r3, #72	@ 0x48
 8015d48:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	685b      	ldr	r3, [r3, #4]
 8015d58:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	7a9b      	ldrb	r3, [r3, #10]
 8015d5e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8015d62:	2301      	movs	r3, #1
 8015d64:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015d68:	f107 0314 	add.w	r3, r7, #20
 8015d6c:	64bb      	str	r3, [r7, #72]	@ 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015d6e:	68fa      	ldr	r2, [r7, #12]
 8015d70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015d74:	320c      	adds	r2, #12
 8015d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d7a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	7d1b      	ldrb	r3, [r3, #20]
 8015d82:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	8adb      	ldrh	r3, [r3, #22]
 8015d90:	4619      	mov	r1, r3
 8015d92:	4610      	mov	r0, r2
 8015d94:	f7fe ff14 	bl	8014bc0 <GetTimeOnAir>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015d9c:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 8015da0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015da4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	9301      	str	r3, [sp, #4]
 8015dac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8015db0:	9300      	str	r3, [sp, #0]
 8015db2:	460b      	mov	r3, r1
 8015db4:	6839      	ldr	r1, [r7, #0]
 8015db6:	f7fd fbca 	bl	801354e <RegionCommonIdentifyChannels>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015dc0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d14a      	bne.n	8015e5e <RegionUS915NextChannel+0x1be>
    {
        if( nextChanParams->Joined == true )
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	7a5b      	ldrb	r3, [r3, #9]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d00e      	beq.n	8015dee <RegionUS915NextChannel+0x14e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015dd0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8015dd4:	3b01      	subs	r3, #1
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	2000      	movs	r0, #0
 8015dda:	f001 fd41 	bl	8017860 <randr>
 8015dde:	4603      	mov	r3, r0
 8015de0:	3398      	adds	r3, #152	@ 0x98
 8015de2:	443b      	add	r3, r7
 8015de4:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	701a      	strb	r2, [r3, #0]
 8015dec:	e02e      	b.n	8015e4c <RegionUS915NextChannel+0x1ac>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d10e      	bne.n	8015e16 <RegionUS915NextChannel+0x176>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8015df8:	4b1c      	ldr	r3, [pc, #112]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015e00:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8015e02:	330c      	adds	r3, #12
 8015e04:	68ba      	ldr	r2, [r7, #8]
 8015e06:	4619      	mov	r1, r3
 8015e08:	f7fc fcf4 	bl	80127f4 <RegionBaseUSComputeNext125kHzJoinChannel>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	2b03      	cmp	r3, #3
 8015e10:	d11c      	bne.n	8015e4c <RegionUS915NextChannel+0x1ac>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e12:	2303      	movs	r3, #3
 8015e14:	e025      	b.n	8015e62 <RegionUS915NextChannel+0x1c2>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8015e16:	2300      	movs	r3, #0
 8015e18:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8015e1c:	e004      	b.n	8015e28 <RegionUS915NextChannel+0x188>
                {
                    i++;
 8015e1e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e22:	3301      	adds	r3, #1
 8015e24:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8015e28:	4b10      	ldr	r3, [pc, #64]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	891b      	ldrh	r3, [r3, #8]
 8015e2e:	b2da      	uxtb	r2, r3
 8015e30:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e34:	fa42 f303 	asr.w	r3, r2, r3
 8015e38:	f003 0301 	and.w	r3, r3, #1
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d0ee      	beq.n	8015e1e <RegionUS915NextChannel+0x17e>
                }
                *channel = 64 + i;
 8015e40:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e44:	3340      	adds	r3, #64	@ 0x40
 8015e46:	b2da      	uxtb	r2, r3
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8015e4c:	4b07      	ldr	r3, [pc, #28]	@ (8015e6c <RegionUS915NextChannel+0x1cc>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	4618      	mov	r0, r3
 8015e52:	68bb      	ldr	r3, [r7, #8]
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	2248      	movs	r2, #72	@ 0x48
 8015e58:	4619      	mov	r1, r3
 8015e5a:	f7fc ff2d 	bl	8012cb8 <RegionCommonChanDisable>
    }
    return status;
 8015e5e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3798      	adds	r7, #152	@ 0x98
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	20001228 	.word	0x20001228
 8015e70:	2000122c 	.word	0x2000122c
 8015e74:	20001230 	.word	0x20001230

08015e78 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015e78:	b480      	push	{r7}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	4603      	mov	r3, r0
 8015e80:	71fb      	strb	r3, [r7, #7]
 8015e82:	460b      	mov	r3, r1
 8015e84:	71bb      	strb	r3, [r7, #6]
 8015e86:	4613      	mov	r3, r2
 8015e88:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8015e8a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015e8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015e92:	4909      	ldr	r1, [pc, #36]	@ (8015eb8 <RegionUS915ApplyDrOffset+0x40>)
 8015e94:	0092      	lsls	r2, r2, #2
 8015e96:	440a      	add	r2, r1
 8015e98:	4413      	add	r3, r2
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8015e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	da01      	bge.n	8015eaa <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8015eaa:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8015eac:	4618      	mov	r0, r3
 8015eae:	3714      	adds	r7, #20
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bc80      	pop	{r7}
 8015eb4:	4770      	bx	lr
 8015eb6:	bf00      	nop
 8015eb8:	08021bd4 	.word	0x08021bd4

08015ebc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	33f1      	adds	r3, #241	@ 0xf1
 8015ec8:	2210      	movs	r2, #16
 8015eca:	2100      	movs	r1, #0
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f001 fd19 	bl	8017904 <memset1>
    ctx->M_n = 0;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	22f0      	movs	r2, #240	@ 0xf0
 8015ede:	2100      	movs	r1, #0
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f001 fd0f 	bl	8017904 <memset1>
}
 8015ee6:	bf00      	nop
 8015ee8:	3708      	adds	r7, #8
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}

08015eee <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8015eee:	b580      	push	{r7, lr}
 8015ef0:	b082      	sub	sp, #8
 8015ef2:	af00      	add	r7, sp, #0
 8015ef4:	6078      	str	r0, [r7, #4]
 8015ef6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	461a      	mov	r2, r3
 8015efc:	2110      	movs	r1, #16
 8015efe:	6838      	ldr	r0, [r7, #0]
 8015f00:	f000 fe60 	bl	8016bc4 <lorawan_aes_set_key>
}
 8015f04:	bf00      	nop
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b08c      	sub	sp, #48	@ 0x30
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	f000 80a1 	beq.w	8016066 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015f2a:	f1c3 0310 	rsb	r3, r3, #16
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	4293      	cmp	r3, r2
 8015f32:	bf28      	it	cs
 8015f34:	4613      	movcs	r3, r2
 8015f36:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015f44:	4413      	add	r3, r2
 8015f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f48:	b292      	uxth	r2, r2
 8015f4a:	68b9      	ldr	r1, [r7, #8]
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f001 fc9e 	bl	801788e <memcpy1>
        ctx->M_n += mlen;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8015f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f5a:	441a      	add	r2, r3
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015f68:	2b0f      	cmp	r3, #15
 8015f6a:	f240 808d 	bls.w	8016088 <AES_CMAC_Update+0x17c>
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f72:	429a      	cmp	r2, r3
 8015f74:	f000 8088 	beq.w	8016088 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8015f78:	2300      	movs	r3, #0
 8015f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015f7c:	e015      	b.n	8015faa <AES_CMAC_Update+0x9e>
 8015f7e:	68fa      	ldr	r2, [r7, #12]
 8015f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f82:	4413      	add	r3, r2
 8015f84:	33f1      	adds	r3, #241	@ 0xf1
 8015f86:	781a      	ldrb	r2, [r3, #0]
 8015f88:	68f9      	ldr	r1, [r7, #12]
 8015f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f8c:	440b      	add	r3, r1
 8015f8e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	4053      	eors	r3, r2
 8015f96:	b2d9      	uxtb	r1, r3
 8015f98:	68fa      	ldr	r2, [r7, #12]
 8015f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f9c:	4413      	add	r3, r2
 8015f9e:	33f1      	adds	r3, #241	@ 0xf1
 8015fa0:	460a      	mov	r2, r1
 8015fa2:	701a      	strb	r2, [r3, #0]
 8015fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fac:	2b0f      	cmp	r3, #15
 8015fae:	dde6      	ble.n	8015f7e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8015fb6:	f107 0314 	add.w	r3, r7, #20
 8015fba:	2210      	movs	r2, #16
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f001 fc66 	bl	801788e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8015fc2:	68fa      	ldr	r2, [r7, #12]
 8015fc4:	f107 0114 	add.w	r1, r7, #20
 8015fc8:	f107 0314 	add.w	r3, r7, #20
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f000 fed7 	bl	8016d80 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	33f1      	adds	r3, #241	@ 0xf1
 8015fd6:	f107 0114 	add.w	r1, r7, #20
 8015fda:	2210      	movs	r2, #16
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f001 fc56 	bl	801788e <memcpy1>

        data += mlen;
 8015fe2:	68ba      	ldr	r2, [r7, #8]
 8015fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fe6:	4413      	add	r3, r2
 8015fe8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fee:	1ad3      	subs	r3, r2, r3
 8015ff0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8015ff2:	e038      	b.n	8016066 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015ff8:	e013      	b.n	8016022 <AES_CMAC_Update+0x116>
 8015ffa:	68fa      	ldr	r2, [r7, #12]
 8015ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ffe:	4413      	add	r3, r2
 8016000:	33f1      	adds	r3, #241	@ 0xf1
 8016002:	781a      	ldrb	r2, [r3, #0]
 8016004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016006:	68b9      	ldr	r1, [r7, #8]
 8016008:	440b      	add	r3, r1
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	4053      	eors	r3, r2
 801600e:	b2d9      	uxtb	r1, r3
 8016010:	68fa      	ldr	r2, [r7, #12]
 8016012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016014:	4413      	add	r3, r2
 8016016:	33f1      	adds	r3, #241	@ 0xf1
 8016018:	460a      	mov	r2, r1
 801601a:	701a      	strb	r2, [r3, #0]
 801601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801601e:	3301      	adds	r3, #1
 8016020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016024:	2b0f      	cmp	r3, #15
 8016026:	dde8      	ble.n	8015ffa <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 801602e:	f107 0314 	add.w	r3, r7, #20
 8016032:	2210      	movs	r2, #16
 8016034:	4618      	mov	r0, r3
 8016036:	f001 fc2a 	bl	801788e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	f107 0114 	add.w	r1, r7, #20
 8016040:	f107 0314 	add.w	r3, r7, #20
 8016044:	4618      	mov	r0, r3
 8016046:	f000 fe9b 	bl	8016d80 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	33f1      	adds	r3, #241	@ 0xf1
 801604e:	f107 0114 	add.w	r1, r7, #20
 8016052:	2210      	movs	r2, #16
 8016054:	4618      	mov	r0, r3
 8016056:	f001 fc1a 	bl	801788e <memcpy1>

        data += 16;
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	3310      	adds	r3, #16
 801605e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	3b10      	subs	r3, #16
 8016064:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2b10      	cmp	r3, #16
 801606a:	d8c3      	bhi.n	8015ff4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8016072:	687a      	ldr	r2, [r7, #4]
 8016074:	b292      	uxth	r2, r2
 8016076:	68b9      	ldr	r1, [r7, #8]
 8016078:	4618      	mov	r0, r3
 801607a:	f001 fc08 	bl	801788e <memcpy1>
    ctx->M_n = len;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8016086:	e000      	b.n	801608a <AES_CMAC_Update+0x17e>
            return;
 8016088:	bf00      	nop
}
 801608a:	3730      	adds	r7, #48	@ 0x30
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b092      	sub	sp, #72	@ 0x48
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801609a:	f107 031c 	add.w	r3, r7, #28
 801609e:	2210      	movs	r2, #16
 80160a0:	2100      	movs	r1, #0
 80160a2:	4618      	mov	r0, r3
 80160a4:	f001 fc2e 	bl	8017904 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80160a8:	683a      	ldr	r2, [r7, #0]
 80160aa:	f107 011c 	add.w	r1, r7, #28
 80160ae:	f107 031c 	add.w	r3, r7, #28
 80160b2:	4618      	mov	r0, r3
 80160b4:	f000 fe64 	bl	8016d80 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80160b8:	7f3b      	ldrb	r3, [r7, #28]
 80160ba:	b25b      	sxtb	r3, r3
 80160bc:	2b00      	cmp	r3, #0
 80160be:	da31      	bge.n	8016124 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 80160c0:	2300      	movs	r3, #0
 80160c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80160c4:	e01c      	b.n	8016100 <AES_CMAC_Final+0x70>
 80160c6:	f107 021c 	add.w	r2, r7, #28
 80160ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160cc:	4413      	add	r3, r2
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	b25b      	sxtb	r3, r3
 80160d2:	005b      	lsls	r3, r3, #1
 80160d4:	b25a      	sxtb	r2, r3
 80160d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160d8:	3301      	adds	r3, #1
 80160da:	3348      	adds	r3, #72	@ 0x48
 80160dc:	443b      	add	r3, r7
 80160de:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80160e2:	09db      	lsrs	r3, r3, #7
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	b25b      	sxtb	r3, r3
 80160e8:	4313      	orrs	r3, r2
 80160ea:	b25b      	sxtb	r3, r3
 80160ec:	b2d9      	uxtb	r1, r3
 80160ee:	f107 021c 	add.w	r2, r7, #28
 80160f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160f4:	4413      	add	r3, r2
 80160f6:	460a      	mov	r2, r1
 80160f8:	701a      	strb	r2, [r3, #0]
 80160fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160fc:	3301      	adds	r3, #1
 80160fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8016100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016102:	2b0e      	cmp	r3, #14
 8016104:	dddf      	ble.n	80160c6 <AES_CMAC_Final+0x36>
 8016106:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801610a:	005b      	lsls	r3, r3, #1
 801610c:	b2db      	uxtb	r3, r3
 801610e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 8016112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016116:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 801611a:	43db      	mvns	r3, r3
 801611c:	b2db      	uxtb	r3, r3
 801611e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016122:	e028      	b.n	8016176 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 8016124:	2300      	movs	r3, #0
 8016126:	643b      	str	r3, [r7, #64]	@ 0x40
 8016128:	e01c      	b.n	8016164 <AES_CMAC_Final+0xd4>
 801612a:	f107 021c 	add.w	r2, r7, #28
 801612e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016130:	4413      	add	r3, r2
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	b25b      	sxtb	r3, r3
 8016136:	005b      	lsls	r3, r3, #1
 8016138:	b25a      	sxtb	r2, r3
 801613a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801613c:	3301      	adds	r3, #1
 801613e:	3348      	adds	r3, #72	@ 0x48
 8016140:	443b      	add	r3, r7
 8016142:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8016146:	09db      	lsrs	r3, r3, #7
 8016148:	b2db      	uxtb	r3, r3
 801614a:	b25b      	sxtb	r3, r3
 801614c:	4313      	orrs	r3, r2
 801614e:	b25b      	sxtb	r3, r3
 8016150:	b2d9      	uxtb	r1, r3
 8016152:	f107 021c 	add.w	r2, r7, #28
 8016156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016158:	4413      	add	r3, r2
 801615a:	460a      	mov	r2, r1
 801615c:	701a      	strb	r2, [r3, #0]
 801615e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016160:	3301      	adds	r3, #1
 8016162:	643b      	str	r3, [r7, #64]	@ 0x40
 8016164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016166:	2b0e      	cmp	r3, #14
 8016168:	dddf      	ble.n	801612a <AES_CMAC_Final+0x9a>
 801616a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	b2db      	uxtb	r3, r3
 8016172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801617c:	2b10      	cmp	r3, #16
 801617e:	d11d      	bne.n	80161bc <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8016180:	2300      	movs	r3, #0
 8016182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016184:	e016      	b.n	80161b4 <AES_CMAC_Final+0x124>
 8016186:	683a      	ldr	r2, [r7, #0]
 8016188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801618a:	4413      	add	r3, r2
 801618c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8016190:	781a      	ldrb	r2, [r3, #0]
 8016192:	f107 011c 	add.w	r1, r7, #28
 8016196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016198:	440b      	add	r3, r1
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	4053      	eors	r3, r2
 801619e:	b2d9      	uxtb	r1, r3
 80161a0:	683a      	ldr	r2, [r7, #0]
 80161a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80161a4:	4413      	add	r3, r2
 80161a6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80161aa:	460a      	mov	r2, r1
 80161ac:	701a      	strb	r2, [r3, #0]
 80161ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80161b0:	3301      	adds	r3, #1
 80161b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80161b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80161b6:	2b0f      	cmp	r3, #15
 80161b8:	dde5      	ble.n	8016186 <AES_CMAC_Final+0xf6>
 80161ba:	e098      	b.n	80162ee <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80161bc:	7f3b      	ldrb	r3, [r7, #28]
 80161be:	b25b      	sxtb	r3, r3
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	da31      	bge.n	8016228 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 80161c4:	2300      	movs	r3, #0
 80161c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80161c8:	e01c      	b.n	8016204 <AES_CMAC_Final+0x174>
 80161ca:	f107 021c 	add.w	r2, r7, #28
 80161ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161d0:	4413      	add	r3, r2
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	b25b      	sxtb	r3, r3
 80161d6:	005b      	lsls	r3, r3, #1
 80161d8:	b25a      	sxtb	r2, r3
 80161da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161dc:	3301      	adds	r3, #1
 80161de:	3348      	adds	r3, #72	@ 0x48
 80161e0:	443b      	add	r3, r7
 80161e2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80161e6:	09db      	lsrs	r3, r3, #7
 80161e8:	b2db      	uxtb	r3, r3
 80161ea:	b25b      	sxtb	r3, r3
 80161ec:	4313      	orrs	r3, r2
 80161ee:	b25b      	sxtb	r3, r3
 80161f0:	b2d9      	uxtb	r1, r3
 80161f2:	f107 021c 	add.w	r2, r7, #28
 80161f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161f8:	4413      	add	r3, r2
 80161fa:	460a      	mov	r2, r1
 80161fc:	701a      	strb	r2, [r3, #0]
 80161fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016200:	3301      	adds	r3, #1
 8016202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016206:	2b0e      	cmp	r3, #14
 8016208:	dddf      	ble.n	80161ca <AES_CMAC_Final+0x13a>
 801620a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	b2db      	uxtb	r3, r3
 8016212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 8016216:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801621a:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 801621e:	43db      	mvns	r3, r3
 8016220:	b2db      	uxtb	r3, r3
 8016222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016226:	e028      	b.n	801627a <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 8016228:	2300      	movs	r3, #0
 801622a:	637b      	str	r3, [r7, #52]	@ 0x34
 801622c:	e01c      	b.n	8016268 <AES_CMAC_Final+0x1d8>
 801622e:	f107 021c 	add.w	r2, r7, #28
 8016232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016234:	4413      	add	r3, r2
 8016236:	781b      	ldrb	r3, [r3, #0]
 8016238:	b25b      	sxtb	r3, r3
 801623a:	005b      	lsls	r3, r3, #1
 801623c:	b25a      	sxtb	r2, r3
 801623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016240:	3301      	adds	r3, #1
 8016242:	3348      	adds	r3, #72	@ 0x48
 8016244:	443b      	add	r3, r7
 8016246:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801624a:	09db      	lsrs	r3, r3, #7
 801624c:	b2db      	uxtb	r3, r3
 801624e:	b25b      	sxtb	r3, r3
 8016250:	4313      	orrs	r3, r2
 8016252:	b25b      	sxtb	r3, r3
 8016254:	b2d9      	uxtb	r1, r3
 8016256:	f107 021c 	add.w	r2, r7, #28
 801625a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801625c:	4413      	add	r3, r2
 801625e:	460a      	mov	r2, r1
 8016260:	701a      	strb	r2, [r3, #0]
 8016262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016264:	3301      	adds	r3, #1
 8016266:	637b      	str	r3, [r7, #52]	@ 0x34
 8016268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801626a:	2b0e      	cmp	r3, #14
 801626c:	dddf      	ble.n	801622e <AES_CMAC_Final+0x19e>
 801626e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016272:	005b      	lsls	r3, r3, #1
 8016274:	b2db      	uxtb	r3, r3
 8016276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016280:	683a      	ldr	r2, [r7, #0]
 8016282:	4413      	add	r3, r2
 8016284:	2280      	movs	r2, #128	@ 0x80
 8016286:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 801628a:	e007      	b.n	801629c <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016292:	683a      	ldr	r2, [r7, #0]
 8016294:	4413      	add	r3, r2
 8016296:	2200      	movs	r2, #0
 8016298:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 801629c:	683b      	ldr	r3, [r7, #0]
 801629e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80162a2:	1c5a      	adds	r2, r3, #1
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80162b0:	2b0f      	cmp	r3, #15
 80162b2:	d9eb      	bls.n	801628c <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 80162b4:	2300      	movs	r3, #0
 80162b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80162b8:	e016      	b.n	80162e8 <AES_CMAC_Final+0x258>
 80162ba:	683a      	ldr	r2, [r7, #0]
 80162bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162be:	4413      	add	r3, r2
 80162c0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80162c4:	781a      	ldrb	r2, [r3, #0]
 80162c6:	f107 011c 	add.w	r1, r7, #28
 80162ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162cc:	440b      	add	r3, r1
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	4053      	eors	r3, r2
 80162d2:	b2d9      	uxtb	r1, r3
 80162d4:	683a      	ldr	r2, [r7, #0]
 80162d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162d8:	4413      	add	r3, r2
 80162da:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80162de:	460a      	mov	r2, r1
 80162e0:	701a      	strb	r2, [r3, #0]
 80162e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162e4:	3301      	adds	r3, #1
 80162e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80162e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ea:	2b0f      	cmp	r3, #15
 80162ec:	dde5      	ble.n	80162ba <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 80162ee:	2300      	movs	r3, #0
 80162f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162f2:	e015      	b.n	8016320 <AES_CMAC_Final+0x290>
 80162f4:	683a      	ldr	r2, [r7, #0]
 80162f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162f8:	4413      	add	r3, r2
 80162fa:	33f1      	adds	r3, #241	@ 0xf1
 80162fc:	781a      	ldrb	r2, [r3, #0]
 80162fe:	6839      	ldr	r1, [r7, #0]
 8016300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016302:	440b      	add	r3, r1
 8016304:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	4053      	eors	r3, r2
 801630c:	b2d9      	uxtb	r1, r3
 801630e:	683a      	ldr	r2, [r7, #0]
 8016310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016312:	4413      	add	r3, r2
 8016314:	33f1      	adds	r3, #241	@ 0xf1
 8016316:	460a      	mov	r2, r1
 8016318:	701a      	strb	r2, [r3, #0]
 801631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801631c:	3301      	adds	r3, #1
 801631e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016322:	2b0f      	cmp	r3, #15
 8016324:	dde6      	ble.n	80162f4 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 801632c:	f107 030c 	add.w	r3, r7, #12
 8016330:	2210      	movs	r2, #16
 8016332:	4618      	mov	r0, r3
 8016334:	f001 faab 	bl	801788e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8016338:	683a      	ldr	r2, [r7, #0]
 801633a:	f107 030c 	add.w	r3, r7, #12
 801633e:	6879      	ldr	r1, [r7, #4]
 8016340:	4618      	mov	r0, r3
 8016342:	f000 fd1d 	bl	8016d80 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8016346:	f107 031c 	add.w	r3, r7, #28
 801634a:	2210      	movs	r2, #16
 801634c:	2100      	movs	r1, #0
 801634e:	4618      	mov	r0, r3
 8016350:	f001 fad8 	bl	8017904 <memset1>
}
 8016354:	bf00      	nop
 8016356:	3748      	adds	r7, #72	@ 0x48
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 801635c:	b480      	push	{r7}
 801635e:	b083      	sub	sp, #12
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	781a      	ldrb	r2, [r3, #0]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	3301      	adds	r3, #1
 8016372:	683a      	ldr	r2, [r7, #0]
 8016374:	7852      	ldrb	r2, [r2, #1]
 8016376:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	3302      	adds	r3, #2
 801637c:	683a      	ldr	r2, [r7, #0]
 801637e:	7892      	ldrb	r2, [r2, #2]
 8016380:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	3303      	adds	r3, #3
 8016386:	683a      	ldr	r2, [r7, #0]
 8016388:	78d2      	ldrb	r2, [r2, #3]
 801638a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	3304      	adds	r3, #4
 8016390:	683a      	ldr	r2, [r7, #0]
 8016392:	7912      	ldrb	r2, [r2, #4]
 8016394:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	3305      	adds	r3, #5
 801639a:	683a      	ldr	r2, [r7, #0]
 801639c:	7952      	ldrb	r2, [r2, #5]
 801639e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	3306      	adds	r3, #6
 80163a4:	683a      	ldr	r2, [r7, #0]
 80163a6:	7992      	ldrb	r2, [r2, #6]
 80163a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	3307      	adds	r3, #7
 80163ae:	683a      	ldr	r2, [r7, #0]
 80163b0:	79d2      	ldrb	r2, [r2, #7]
 80163b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	3308      	adds	r3, #8
 80163b8:	683a      	ldr	r2, [r7, #0]
 80163ba:	7a12      	ldrb	r2, [r2, #8]
 80163bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	3309      	adds	r3, #9
 80163c2:	683a      	ldr	r2, [r7, #0]
 80163c4:	7a52      	ldrb	r2, [r2, #9]
 80163c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	330a      	adds	r3, #10
 80163cc:	683a      	ldr	r2, [r7, #0]
 80163ce:	7a92      	ldrb	r2, [r2, #10]
 80163d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	330b      	adds	r3, #11
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	7ad2      	ldrb	r2, [r2, #11]
 80163da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	330c      	adds	r3, #12
 80163e0:	683a      	ldr	r2, [r7, #0]
 80163e2:	7b12      	ldrb	r2, [r2, #12]
 80163e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	330d      	adds	r3, #13
 80163ea:	683a      	ldr	r2, [r7, #0]
 80163ec:	7b52      	ldrb	r2, [r2, #13]
 80163ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	330e      	adds	r3, #14
 80163f4:	683a      	ldr	r2, [r7, #0]
 80163f6:	7b92      	ldrb	r2, [r2, #14]
 80163f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	330f      	adds	r3, #15
 80163fe:	683a      	ldr	r2, [r7, #0]
 8016400:	7bd2      	ldrb	r2, [r2, #15]
 8016402:	701a      	strb	r2, [r3, #0]
#endif
}
 8016404:	bf00      	nop
 8016406:	370c      	adds	r7, #12
 8016408:	46bd      	mov	sp, r7
 801640a:	bc80      	pop	{r7}
 801640c:	4770      	bx	lr

0801640e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 801640e:	b480      	push	{r7}
 8016410:	b085      	sub	sp, #20
 8016412:	af00      	add	r7, sp, #0
 8016414:	60f8      	str	r0, [r7, #12]
 8016416:	60b9      	str	r1, [r7, #8]
 8016418:	4613      	mov	r3, r2
 801641a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 801641c:	e007      	b.n	801642e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801641e:	68ba      	ldr	r2, [r7, #8]
 8016420:	1c53      	adds	r3, r2, #1
 8016422:	60bb      	str	r3, [r7, #8]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	1c59      	adds	r1, r3, #1
 8016428:	60f9      	str	r1, [r7, #12]
 801642a:	7812      	ldrb	r2, [r2, #0]
 801642c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 801642e:	79fb      	ldrb	r3, [r7, #7]
 8016430:	1e5a      	subs	r2, r3, #1
 8016432:	71fa      	strb	r2, [r7, #7]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d1f2      	bne.n	801641e <copy_block_nn+0x10>
}
 8016438:	bf00      	nop
 801643a:	bf00      	nop
 801643c:	3714      	adds	r7, #20
 801643e:	46bd      	mov	sp, r7
 8016440:	bc80      	pop	{r7}
 8016442:	4770      	bx	lr

08016444 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8016444:	b480      	push	{r7}
 8016446:	b083      	sub	sp, #12
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
 801644c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	781a      	ldrb	r2, [r3, #0]
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	4053      	eors	r3, r2
 8016458:	b2da      	uxtb	r2, r3
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	3301      	adds	r3, #1
 8016462:	7819      	ldrb	r1, [r3, #0]
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	3301      	adds	r3, #1
 8016468:	781a      	ldrb	r2, [r3, #0]
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	3301      	adds	r3, #1
 801646e:	404a      	eors	r2, r1
 8016470:	b2d2      	uxtb	r2, r2
 8016472:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	3302      	adds	r3, #2
 8016478:	7819      	ldrb	r1, [r3, #0]
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	3302      	adds	r3, #2
 801647e:	781a      	ldrb	r2, [r3, #0]
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	3302      	adds	r3, #2
 8016484:	404a      	eors	r2, r1
 8016486:	b2d2      	uxtb	r2, r2
 8016488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	3303      	adds	r3, #3
 801648e:	7819      	ldrb	r1, [r3, #0]
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	3303      	adds	r3, #3
 8016494:	781a      	ldrb	r2, [r3, #0]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	3303      	adds	r3, #3
 801649a:	404a      	eors	r2, r1
 801649c:	b2d2      	uxtb	r2, r2
 801649e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	3304      	adds	r3, #4
 80164a4:	7819      	ldrb	r1, [r3, #0]
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	3304      	adds	r3, #4
 80164aa:	781a      	ldrb	r2, [r3, #0]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	3304      	adds	r3, #4
 80164b0:	404a      	eors	r2, r1
 80164b2:	b2d2      	uxtb	r2, r2
 80164b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	3305      	adds	r3, #5
 80164ba:	7819      	ldrb	r1, [r3, #0]
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	3305      	adds	r3, #5
 80164c0:	781a      	ldrb	r2, [r3, #0]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	3305      	adds	r3, #5
 80164c6:	404a      	eors	r2, r1
 80164c8:	b2d2      	uxtb	r2, r2
 80164ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	3306      	adds	r3, #6
 80164d0:	7819      	ldrb	r1, [r3, #0]
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	3306      	adds	r3, #6
 80164d6:	781a      	ldrb	r2, [r3, #0]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	3306      	adds	r3, #6
 80164dc:	404a      	eors	r2, r1
 80164de:	b2d2      	uxtb	r2, r2
 80164e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	3307      	adds	r3, #7
 80164e6:	7819      	ldrb	r1, [r3, #0]
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	3307      	adds	r3, #7
 80164ec:	781a      	ldrb	r2, [r3, #0]
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	3307      	adds	r3, #7
 80164f2:	404a      	eors	r2, r1
 80164f4:	b2d2      	uxtb	r2, r2
 80164f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	3308      	adds	r3, #8
 80164fc:	7819      	ldrb	r1, [r3, #0]
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	3308      	adds	r3, #8
 8016502:	781a      	ldrb	r2, [r3, #0]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	3308      	adds	r3, #8
 8016508:	404a      	eors	r2, r1
 801650a:	b2d2      	uxtb	r2, r2
 801650c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	3309      	adds	r3, #9
 8016512:	7819      	ldrb	r1, [r3, #0]
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	3309      	adds	r3, #9
 8016518:	781a      	ldrb	r2, [r3, #0]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	3309      	adds	r3, #9
 801651e:	404a      	eors	r2, r1
 8016520:	b2d2      	uxtb	r2, r2
 8016522:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	330a      	adds	r3, #10
 8016528:	7819      	ldrb	r1, [r3, #0]
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	330a      	adds	r3, #10
 801652e:	781a      	ldrb	r2, [r3, #0]
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	330a      	adds	r3, #10
 8016534:	404a      	eors	r2, r1
 8016536:	b2d2      	uxtb	r2, r2
 8016538:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	330b      	adds	r3, #11
 801653e:	7819      	ldrb	r1, [r3, #0]
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	330b      	adds	r3, #11
 8016544:	781a      	ldrb	r2, [r3, #0]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	330b      	adds	r3, #11
 801654a:	404a      	eors	r2, r1
 801654c:	b2d2      	uxtb	r2, r2
 801654e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	330c      	adds	r3, #12
 8016554:	7819      	ldrb	r1, [r3, #0]
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	330c      	adds	r3, #12
 801655a:	781a      	ldrb	r2, [r3, #0]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	330c      	adds	r3, #12
 8016560:	404a      	eors	r2, r1
 8016562:	b2d2      	uxtb	r2, r2
 8016564:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	330d      	adds	r3, #13
 801656a:	7819      	ldrb	r1, [r3, #0]
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	330d      	adds	r3, #13
 8016570:	781a      	ldrb	r2, [r3, #0]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	330d      	adds	r3, #13
 8016576:	404a      	eors	r2, r1
 8016578:	b2d2      	uxtb	r2, r2
 801657a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	330e      	adds	r3, #14
 8016580:	7819      	ldrb	r1, [r3, #0]
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	330e      	adds	r3, #14
 8016586:	781a      	ldrb	r2, [r3, #0]
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	330e      	adds	r3, #14
 801658c:	404a      	eors	r2, r1
 801658e:	b2d2      	uxtb	r2, r2
 8016590:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	330f      	adds	r3, #15
 8016596:	7819      	ldrb	r1, [r3, #0]
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	330f      	adds	r3, #15
 801659c:	781a      	ldrb	r2, [r3, #0]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	330f      	adds	r3, #15
 80165a2:	404a      	eors	r2, r1
 80165a4:	b2d2      	uxtb	r2, r2
 80165a6:	701a      	strb	r2, [r3, #0]
#endif
}
 80165a8:	bf00      	nop
 80165aa:	370c      	adds	r7, #12
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bc80      	pop	{r7}
 80165b0:	4770      	bx	lr

080165b2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80165b2:	b480      	push	{r7}
 80165b4:	b085      	sub	sp, #20
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	60f8      	str	r0, [r7, #12]
 80165ba:	60b9      	str	r1, [r7, #8]
 80165bc:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	781a      	ldrb	r2, [r3, #0]
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	4053      	eors	r3, r2
 80165c8:	b2da      	uxtb	r2, r3
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	3301      	adds	r3, #1
 80165d2:	7819      	ldrb	r1, [r3, #0]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	3301      	adds	r3, #1
 80165d8:	781a      	ldrb	r2, [r3, #0]
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	3301      	adds	r3, #1
 80165de:	404a      	eors	r2, r1
 80165e0:	b2d2      	uxtb	r2, r2
 80165e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	3302      	adds	r3, #2
 80165e8:	7819      	ldrb	r1, [r3, #0]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	3302      	adds	r3, #2
 80165ee:	781a      	ldrb	r2, [r3, #0]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	3302      	adds	r3, #2
 80165f4:	404a      	eors	r2, r1
 80165f6:	b2d2      	uxtb	r2, r2
 80165f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	3303      	adds	r3, #3
 80165fe:	7819      	ldrb	r1, [r3, #0]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	3303      	adds	r3, #3
 8016604:	781a      	ldrb	r2, [r3, #0]
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	3303      	adds	r3, #3
 801660a:	404a      	eors	r2, r1
 801660c:	b2d2      	uxtb	r2, r2
 801660e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	3304      	adds	r3, #4
 8016614:	7819      	ldrb	r1, [r3, #0]
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	3304      	adds	r3, #4
 801661a:	781a      	ldrb	r2, [r3, #0]
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	3304      	adds	r3, #4
 8016620:	404a      	eors	r2, r1
 8016622:	b2d2      	uxtb	r2, r2
 8016624:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	3305      	adds	r3, #5
 801662a:	7819      	ldrb	r1, [r3, #0]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	3305      	adds	r3, #5
 8016630:	781a      	ldrb	r2, [r3, #0]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	3305      	adds	r3, #5
 8016636:	404a      	eors	r2, r1
 8016638:	b2d2      	uxtb	r2, r2
 801663a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	3306      	adds	r3, #6
 8016640:	7819      	ldrb	r1, [r3, #0]
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	3306      	adds	r3, #6
 8016646:	781a      	ldrb	r2, [r3, #0]
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	3306      	adds	r3, #6
 801664c:	404a      	eors	r2, r1
 801664e:	b2d2      	uxtb	r2, r2
 8016650:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	3307      	adds	r3, #7
 8016656:	7819      	ldrb	r1, [r3, #0]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	3307      	adds	r3, #7
 801665c:	781a      	ldrb	r2, [r3, #0]
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	3307      	adds	r3, #7
 8016662:	404a      	eors	r2, r1
 8016664:	b2d2      	uxtb	r2, r2
 8016666:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	3308      	adds	r3, #8
 801666c:	7819      	ldrb	r1, [r3, #0]
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	3308      	adds	r3, #8
 8016672:	781a      	ldrb	r2, [r3, #0]
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	3308      	adds	r3, #8
 8016678:	404a      	eors	r2, r1
 801667a:	b2d2      	uxtb	r2, r2
 801667c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	3309      	adds	r3, #9
 8016682:	7819      	ldrb	r1, [r3, #0]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	3309      	adds	r3, #9
 8016688:	781a      	ldrb	r2, [r3, #0]
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	3309      	adds	r3, #9
 801668e:	404a      	eors	r2, r1
 8016690:	b2d2      	uxtb	r2, r2
 8016692:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	330a      	adds	r3, #10
 8016698:	7819      	ldrb	r1, [r3, #0]
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	330a      	adds	r3, #10
 801669e:	781a      	ldrb	r2, [r3, #0]
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	330a      	adds	r3, #10
 80166a4:	404a      	eors	r2, r1
 80166a6:	b2d2      	uxtb	r2, r2
 80166a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	330b      	adds	r3, #11
 80166ae:	7819      	ldrb	r1, [r3, #0]
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	330b      	adds	r3, #11
 80166b4:	781a      	ldrb	r2, [r3, #0]
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	330b      	adds	r3, #11
 80166ba:	404a      	eors	r2, r1
 80166bc:	b2d2      	uxtb	r2, r2
 80166be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	330c      	adds	r3, #12
 80166c4:	7819      	ldrb	r1, [r3, #0]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	330c      	adds	r3, #12
 80166ca:	781a      	ldrb	r2, [r3, #0]
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	330c      	adds	r3, #12
 80166d0:	404a      	eors	r2, r1
 80166d2:	b2d2      	uxtb	r2, r2
 80166d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	330d      	adds	r3, #13
 80166da:	7819      	ldrb	r1, [r3, #0]
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	330d      	adds	r3, #13
 80166e0:	781a      	ldrb	r2, [r3, #0]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	330d      	adds	r3, #13
 80166e6:	404a      	eors	r2, r1
 80166e8:	b2d2      	uxtb	r2, r2
 80166ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	330e      	adds	r3, #14
 80166f0:	7819      	ldrb	r1, [r3, #0]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	330e      	adds	r3, #14
 80166f6:	781a      	ldrb	r2, [r3, #0]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	330e      	adds	r3, #14
 80166fc:	404a      	eors	r2, r1
 80166fe:	b2d2      	uxtb	r2, r2
 8016700:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	330f      	adds	r3, #15
 8016706:	7819      	ldrb	r1, [r3, #0]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	330f      	adds	r3, #15
 801670c:	781a      	ldrb	r2, [r3, #0]
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	330f      	adds	r3, #15
 8016712:	404a      	eors	r2, r1
 8016714:	b2d2      	uxtb	r2, r2
 8016716:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8016718:	bf00      	nop
 801671a:	3714      	adds	r7, #20
 801671c:	46bd      	mov	sp, r7
 801671e:	bc80      	pop	{r7}
 8016720:	4770      	bx	lr

08016722 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8016722:	b580      	push	{r7, lr}
 8016724:	b082      	sub	sp, #8
 8016726:	af00      	add	r7, sp, #0
 8016728:	6078      	str	r0, [r7, #4]
 801672a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 801672c:	6839      	ldr	r1, [r7, #0]
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f7ff fe88 	bl	8016444 <xor_block>
}
 8016734:	bf00      	nop
 8016736:	3708      	adds	r7, #8
 8016738:	46bd      	mov	sp, r7
 801673a:	bd80      	pop	{r7, pc}

0801673c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 801673c:	b480      	push	{r7}
 801673e:	b085      	sub	sp, #20
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	461a      	mov	r2, r3
 801674a:	4b48      	ldr	r3, [pc, #288]	@ (801686c <shift_sub_rows+0x130>)
 801674c:	5c9a      	ldrb	r2, [r3, r2]
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	701a      	strb	r2, [r3, #0]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	3304      	adds	r3, #4
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	4619      	mov	r1, r3
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	3304      	adds	r3, #4
 801675e:	4a43      	ldr	r2, [pc, #268]	@ (801686c <shift_sub_rows+0x130>)
 8016760:	5c52      	ldrb	r2, [r2, r1]
 8016762:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	3308      	adds	r3, #8
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	4619      	mov	r1, r3
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	3308      	adds	r3, #8
 8016770:	4a3e      	ldr	r2, [pc, #248]	@ (801686c <shift_sub_rows+0x130>)
 8016772:	5c52      	ldrb	r2, [r2, r1]
 8016774:	701a      	strb	r2, [r3, #0]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	330c      	adds	r3, #12
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	4619      	mov	r1, r3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	330c      	adds	r3, #12
 8016782:	4a3a      	ldr	r2, [pc, #232]	@ (801686c <shift_sub_rows+0x130>)
 8016784:	5c52      	ldrb	r2, [r2, r1]
 8016786:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	785b      	ldrb	r3, [r3, #1]
 801678c:	73fb      	strb	r3, [r7, #15]
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	3305      	adds	r3, #5
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	4619      	mov	r1, r3
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	3301      	adds	r3, #1
 801679a:	4a34      	ldr	r2, [pc, #208]	@ (801686c <shift_sub_rows+0x130>)
 801679c:	5c52      	ldrb	r2, [r2, r1]
 801679e:	701a      	strb	r2, [r3, #0]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	3309      	adds	r3, #9
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	4619      	mov	r1, r3
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	3305      	adds	r3, #5
 80167ac:	4a2f      	ldr	r2, [pc, #188]	@ (801686c <shift_sub_rows+0x130>)
 80167ae:	5c52      	ldrb	r2, [r2, r1]
 80167b0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	330d      	adds	r3, #13
 80167b6:	781b      	ldrb	r3, [r3, #0]
 80167b8:	4619      	mov	r1, r3
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	3309      	adds	r3, #9
 80167be:	4a2b      	ldr	r2, [pc, #172]	@ (801686c <shift_sub_rows+0x130>)
 80167c0:	5c52      	ldrb	r2, [r2, r1]
 80167c2:	701a      	strb	r2, [r3, #0]
 80167c4:	7bfa      	ldrb	r2, [r7, #15]
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	330d      	adds	r3, #13
 80167ca:	4928      	ldr	r1, [pc, #160]	@ (801686c <shift_sub_rows+0x130>)
 80167cc:	5c8a      	ldrb	r2, [r1, r2]
 80167ce:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	789b      	ldrb	r3, [r3, #2]
 80167d4:	73fb      	strb	r3, [r7, #15]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	330a      	adds	r3, #10
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	4619      	mov	r1, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	3302      	adds	r3, #2
 80167e2:	4a22      	ldr	r2, [pc, #136]	@ (801686c <shift_sub_rows+0x130>)
 80167e4:	5c52      	ldrb	r2, [r2, r1]
 80167e6:	701a      	strb	r2, [r3, #0]
 80167e8:	7bfa      	ldrb	r2, [r7, #15]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	330a      	adds	r3, #10
 80167ee:	491f      	ldr	r1, [pc, #124]	@ (801686c <shift_sub_rows+0x130>)
 80167f0:	5c8a      	ldrb	r2, [r1, r2]
 80167f2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	799b      	ldrb	r3, [r3, #6]
 80167f8:	73fb      	strb	r3, [r7, #15]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	330e      	adds	r3, #14
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	4619      	mov	r1, r3
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	3306      	adds	r3, #6
 8016806:	4a19      	ldr	r2, [pc, #100]	@ (801686c <shift_sub_rows+0x130>)
 8016808:	5c52      	ldrb	r2, [r2, r1]
 801680a:	701a      	strb	r2, [r3, #0]
 801680c:	7bfa      	ldrb	r2, [r7, #15]
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	330e      	adds	r3, #14
 8016812:	4916      	ldr	r1, [pc, #88]	@ (801686c <shift_sub_rows+0x130>)
 8016814:	5c8a      	ldrb	r2, [r1, r2]
 8016816:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	7bdb      	ldrb	r3, [r3, #15]
 801681c:	73fb      	strb	r3, [r7, #15]
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	330b      	adds	r3, #11
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	4619      	mov	r1, r3
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	330f      	adds	r3, #15
 801682a:	4a10      	ldr	r2, [pc, #64]	@ (801686c <shift_sub_rows+0x130>)
 801682c:	5c52      	ldrb	r2, [r2, r1]
 801682e:	701a      	strb	r2, [r3, #0]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	3307      	adds	r3, #7
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	4619      	mov	r1, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	330b      	adds	r3, #11
 801683c:	4a0b      	ldr	r2, [pc, #44]	@ (801686c <shift_sub_rows+0x130>)
 801683e:	5c52      	ldrb	r2, [r2, r1]
 8016840:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	3303      	adds	r3, #3
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	4619      	mov	r1, r3
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	3307      	adds	r3, #7
 801684e:	4a07      	ldr	r2, [pc, #28]	@ (801686c <shift_sub_rows+0x130>)
 8016850:	5c52      	ldrb	r2, [r2, r1]
 8016852:	701a      	strb	r2, [r3, #0]
 8016854:	7bfa      	ldrb	r2, [r7, #15]
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	3303      	adds	r3, #3
 801685a:	4904      	ldr	r1, [pc, #16]	@ (801686c <shift_sub_rows+0x130>)
 801685c:	5c8a      	ldrb	r2, [r1, r2]
 801685e:	701a      	strb	r2, [r3, #0]
}
 8016860:	bf00      	nop
 8016862:	3714      	adds	r7, #20
 8016864:	46bd      	mov	sp, r7
 8016866:	bc80      	pop	{r7}
 8016868:	4770      	bx	lr
 801686a:	bf00      	nop
 801686c:	08021c08 	.word	0x08021c08

08016870 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8016870:	b580      	push	{r7, lr}
 8016872:	b086      	sub	sp, #24
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8016878:	f107 0308 	add.w	r3, r7, #8
 801687c:	6879      	ldr	r1, [r7, #4]
 801687e:	4618      	mov	r0, r3
 8016880:	f7ff fd6c 	bl	801635c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8016884:	7a3b      	ldrb	r3, [r7, #8]
 8016886:	461a      	mov	r2, r3
 8016888:	4b9a      	ldr	r3, [pc, #616]	@ (8016af4 <mix_sub_columns+0x284>)
 801688a:	5c9a      	ldrb	r2, [r3, r2]
 801688c:	7b7b      	ldrb	r3, [r7, #13]
 801688e:	4619      	mov	r1, r3
 8016890:	4b99      	ldr	r3, [pc, #612]	@ (8016af8 <mix_sub_columns+0x288>)
 8016892:	5c5b      	ldrb	r3, [r3, r1]
 8016894:	4053      	eors	r3, r2
 8016896:	b2da      	uxtb	r2, r3
 8016898:	7cbb      	ldrb	r3, [r7, #18]
 801689a:	4619      	mov	r1, r3
 801689c:	4b97      	ldr	r3, [pc, #604]	@ (8016afc <mix_sub_columns+0x28c>)
 801689e:	5c5b      	ldrb	r3, [r3, r1]
 80168a0:	4053      	eors	r3, r2
 80168a2:	b2da      	uxtb	r2, r3
 80168a4:	7dfb      	ldrb	r3, [r7, #23]
 80168a6:	4619      	mov	r1, r3
 80168a8:	4b94      	ldr	r3, [pc, #592]	@ (8016afc <mix_sub_columns+0x28c>)
 80168aa:	5c5b      	ldrb	r3, [r3, r1]
 80168ac:	4053      	eors	r3, r2
 80168ae:	b2da      	uxtb	r2, r3
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80168b4:	7a3b      	ldrb	r3, [r7, #8]
 80168b6:	461a      	mov	r2, r3
 80168b8:	4b90      	ldr	r3, [pc, #576]	@ (8016afc <mix_sub_columns+0x28c>)
 80168ba:	5c9a      	ldrb	r2, [r3, r2]
 80168bc:	7b7b      	ldrb	r3, [r7, #13]
 80168be:	4619      	mov	r1, r3
 80168c0:	4b8c      	ldr	r3, [pc, #560]	@ (8016af4 <mix_sub_columns+0x284>)
 80168c2:	5c5b      	ldrb	r3, [r3, r1]
 80168c4:	4053      	eors	r3, r2
 80168c6:	b2da      	uxtb	r2, r3
 80168c8:	7cbb      	ldrb	r3, [r7, #18]
 80168ca:	4619      	mov	r1, r3
 80168cc:	4b8a      	ldr	r3, [pc, #552]	@ (8016af8 <mix_sub_columns+0x288>)
 80168ce:	5c5b      	ldrb	r3, [r3, r1]
 80168d0:	4053      	eors	r3, r2
 80168d2:	b2d9      	uxtb	r1, r3
 80168d4:	7dfb      	ldrb	r3, [r7, #23]
 80168d6:	461a      	mov	r2, r3
 80168d8:	4b88      	ldr	r3, [pc, #544]	@ (8016afc <mix_sub_columns+0x28c>)
 80168da:	5c9a      	ldrb	r2, [r3, r2]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	3301      	adds	r3, #1
 80168e0:	404a      	eors	r2, r1
 80168e2:	b2d2      	uxtb	r2, r2
 80168e4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80168e6:	7a3b      	ldrb	r3, [r7, #8]
 80168e8:	461a      	mov	r2, r3
 80168ea:	4b84      	ldr	r3, [pc, #528]	@ (8016afc <mix_sub_columns+0x28c>)
 80168ec:	5c9a      	ldrb	r2, [r3, r2]
 80168ee:	7b7b      	ldrb	r3, [r7, #13]
 80168f0:	4619      	mov	r1, r3
 80168f2:	4b82      	ldr	r3, [pc, #520]	@ (8016afc <mix_sub_columns+0x28c>)
 80168f4:	5c5b      	ldrb	r3, [r3, r1]
 80168f6:	4053      	eors	r3, r2
 80168f8:	b2da      	uxtb	r2, r3
 80168fa:	7cbb      	ldrb	r3, [r7, #18]
 80168fc:	4619      	mov	r1, r3
 80168fe:	4b7d      	ldr	r3, [pc, #500]	@ (8016af4 <mix_sub_columns+0x284>)
 8016900:	5c5b      	ldrb	r3, [r3, r1]
 8016902:	4053      	eors	r3, r2
 8016904:	b2d9      	uxtb	r1, r3
 8016906:	7dfb      	ldrb	r3, [r7, #23]
 8016908:	461a      	mov	r2, r3
 801690a:	4b7b      	ldr	r3, [pc, #492]	@ (8016af8 <mix_sub_columns+0x288>)
 801690c:	5c9a      	ldrb	r2, [r3, r2]
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	3302      	adds	r3, #2
 8016912:	404a      	eors	r2, r1
 8016914:	b2d2      	uxtb	r2, r2
 8016916:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8016918:	7a3b      	ldrb	r3, [r7, #8]
 801691a:	461a      	mov	r2, r3
 801691c:	4b76      	ldr	r3, [pc, #472]	@ (8016af8 <mix_sub_columns+0x288>)
 801691e:	5c9a      	ldrb	r2, [r3, r2]
 8016920:	7b7b      	ldrb	r3, [r7, #13]
 8016922:	4619      	mov	r1, r3
 8016924:	4b75      	ldr	r3, [pc, #468]	@ (8016afc <mix_sub_columns+0x28c>)
 8016926:	5c5b      	ldrb	r3, [r3, r1]
 8016928:	4053      	eors	r3, r2
 801692a:	b2da      	uxtb	r2, r3
 801692c:	7cbb      	ldrb	r3, [r7, #18]
 801692e:	4619      	mov	r1, r3
 8016930:	4b72      	ldr	r3, [pc, #456]	@ (8016afc <mix_sub_columns+0x28c>)
 8016932:	5c5b      	ldrb	r3, [r3, r1]
 8016934:	4053      	eors	r3, r2
 8016936:	b2d9      	uxtb	r1, r3
 8016938:	7dfb      	ldrb	r3, [r7, #23]
 801693a:	461a      	mov	r2, r3
 801693c:	4b6d      	ldr	r3, [pc, #436]	@ (8016af4 <mix_sub_columns+0x284>)
 801693e:	5c9a      	ldrb	r2, [r3, r2]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	3303      	adds	r3, #3
 8016944:	404a      	eors	r2, r1
 8016946:	b2d2      	uxtb	r2, r2
 8016948:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801694a:	7b3b      	ldrb	r3, [r7, #12]
 801694c:	461a      	mov	r2, r3
 801694e:	4b69      	ldr	r3, [pc, #420]	@ (8016af4 <mix_sub_columns+0x284>)
 8016950:	5c9a      	ldrb	r2, [r3, r2]
 8016952:	7c7b      	ldrb	r3, [r7, #17]
 8016954:	4619      	mov	r1, r3
 8016956:	4b68      	ldr	r3, [pc, #416]	@ (8016af8 <mix_sub_columns+0x288>)
 8016958:	5c5b      	ldrb	r3, [r3, r1]
 801695a:	4053      	eors	r3, r2
 801695c:	b2da      	uxtb	r2, r3
 801695e:	7dbb      	ldrb	r3, [r7, #22]
 8016960:	4619      	mov	r1, r3
 8016962:	4b66      	ldr	r3, [pc, #408]	@ (8016afc <mix_sub_columns+0x28c>)
 8016964:	5c5b      	ldrb	r3, [r3, r1]
 8016966:	4053      	eors	r3, r2
 8016968:	b2d9      	uxtb	r1, r3
 801696a:	7afb      	ldrb	r3, [r7, #11]
 801696c:	461a      	mov	r2, r3
 801696e:	4b63      	ldr	r3, [pc, #396]	@ (8016afc <mix_sub_columns+0x28c>)
 8016970:	5c9a      	ldrb	r2, [r3, r2]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	3304      	adds	r3, #4
 8016976:	404a      	eors	r2, r1
 8016978:	b2d2      	uxtb	r2, r2
 801697a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801697c:	7b3b      	ldrb	r3, [r7, #12]
 801697e:	461a      	mov	r2, r3
 8016980:	4b5e      	ldr	r3, [pc, #376]	@ (8016afc <mix_sub_columns+0x28c>)
 8016982:	5c9a      	ldrb	r2, [r3, r2]
 8016984:	7c7b      	ldrb	r3, [r7, #17]
 8016986:	4619      	mov	r1, r3
 8016988:	4b5a      	ldr	r3, [pc, #360]	@ (8016af4 <mix_sub_columns+0x284>)
 801698a:	5c5b      	ldrb	r3, [r3, r1]
 801698c:	4053      	eors	r3, r2
 801698e:	b2da      	uxtb	r2, r3
 8016990:	7dbb      	ldrb	r3, [r7, #22]
 8016992:	4619      	mov	r1, r3
 8016994:	4b58      	ldr	r3, [pc, #352]	@ (8016af8 <mix_sub_columns+0x288>)
 8016996:	5c5b      	ldrb	r3, [r3, r1]
 8016998:	4053      	eors	r3, r2
 801699a:	b2d9      	uxtb	r1, r3
 801699c:	7afb      	ldrb	r3, [r7, #11]
 801699e:	461a      	mov	r2, r3
 80169a0:	4b56      	ldr	r3, [pc, #344]	@ (8016afc <mix_sub_columns+0x28c>)
 80169a2:	5c9a      	ldrb	r2, [r3, r2]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	3305      	adds	r3, #5
 80169a8:	404a      	eors	r2, r1
 80169aa:	b2d2      	uxtb	r2, r2
 80169ac:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80169ae:	7b3b      	ldrb	r3, [r7, #12]
 80169b0:	461a      	mov	r2, r3
 80169b2:	4b52      	ldr	r3, [pc, #328]	@ (8016afc <mix_sub_columns+0x28c>)
 80169b4:	5c9a      	ldrb	r2, [r3, r2]
 80169b6:	7c7b      	ldrb	r3, [r7, #17]
 80169b8:	4619      	mov	r1, r3
 80169ba:	4b50      	ldr	r3, [pc, #320]	@ (8016afc <mix_sub_columns+0x28c>)
 80169bc:	5c5b      	ldrb	r3, [r3, r1]
 80169be:	4053      	eors	r3, r2
 80169c0:	b2da      	uxtb	r2, r3
 80169c2:	7dbb      	ldrb	r3, [r7, #22]
 80169c4:	4619      	mov	r1, r3
 80169c6:	4b4b      	ldr	r3, [pc, #300]	@ (8016af4 <mix_sub_columns+0x284>)
 80169c8:	5c5b      	ldrb	r3, [r3, r1]
 80169ca:	4053      	eors	r3, r2
 80169cc:	b2d9      	uxtb	r1, r3
 80169ce:	7afb      	ldrb	r3, [r7, #11]
 80169d0:	461a      	mov	r2, r3
 80169d2:	4b49      	ldr	r3, [pc, #292]	@ (8016af8 <mix_sub_columns+0x288>)
 80169d4:	5c9a      	ldrb	r2, [r3, r2]
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	3306      	adds	r3, #6
 80169da:	404a      	eors	r2, r1
 80169dc:	b2d2      	uxtb	r2, r2
 80169de:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80169e0:	7b3b      	ldrb	r3, [r7, #12]
 80169e2:	461a      	mov	r2, r3
 80169e4:	4b44      	ldr	r3, [pc, #272]	@ (8016af8 <mix_sub_columns+0x288>)
 80169e6:	5c9a      	ldrb	r2, [r3, r2]
 80169e8:	7c7b      	ldrb	r3, [r7, #17]
 80169ea:	4619      	mov	r1, r3
 80169ec:	4b43      	ldr	r3, [pc, #268]	@ (8016afc <mix_sub_columns+0x28c>)
 80169ee:	5c5b      	ldrb	r3, [r3, r1]
 80169f0:	4053      	eors	r3, r2
 80169f2:	b2da      	uxtb	r2, r3
 80169f4:	7dbb      	ldrb	r3, [r7, #22]
 80169f6:	4619      	mov	r1, r3
 80169f8:	4b40      	ldr	r3, [pc, #256]	@ (8016afc <mix_sub_columns+0x28c>)
 80169fa:	5c5b      	ldrb	r3, [r3, r1]
 80169fc:	4053      	eors	r3, r2
 80169fe:	b2d9      	uxtb	r1, r3
 8016a00:	7afb      	ldrb	r3, [r7, #11]
 8016a02:	461a      	mov	r2, r3
 8016a04:	4b3b      	ldr	r3, [pc, #236]	@ (8016af4 <mix_sub_columns+0x284>)
 8016a06:	5c9a      	ldrb	r2, [r3, r2]
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	3307      	adds	r3, #7
 8016a0c:	404a      	eors	r2, r1
 8016a0e:	b2d2      	uxtb	r2, r2
 8016a10:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8016a12:	7c3b      	ldrb	r3, [r7, #16]
 8016a14:	461a      	mov	r2, r3
 8016a16:	4b37      	ldr	r3, [pc, #220]	@ (8016af4 <mix_sub_columns+0x284>)
 8016a18:	5c9a      	ldrb	r2, [r3, r2]
 8016a1a:	7d7b      	ldrb	r3, [r7, #21]
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	4b36      	ldr	r3, [pc, #216]	@ (8016af8 <mix_sub_columns+0x288>)
 8016a20:	5c5b      	ldrb	r3, [r3, r1]
 8016a22:	4053      	eors	r3, r2
 8016a24:	b2da      	uxtb	r2, r3
 8016a26:	7abb      	ldrb	r3, [r7, #10]
 8016a28:	4619      	mov	r1, r3
 8016a2a:	4b34      	ldr	r3, [pc, #208]	@ (8016afc <mix_sub_columns+0x28c>)
 8016a2c:	5c5b      	ldrb	r3, [r3, r1]
 8016a2e:	4053      	eors	r3, r2
 8016a30:	b2d9      	uxtb	r1, r3
 8016a32:	7bfb      	ldrb	r3, [r7, #15]
 8016a34:	461a      	mov	r2, r3
 8016a36:	4b31      	ldr	r3, [pc, #196]	@ (8016afc <mix_sub_columns+0x28c>)
 8016a38:	5c9a      	ldrb	r2, [r3, r2]
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	3308      	adds	r3, #8
 8016a3e:	404a      	eors	r2, r1
 8016a40:	b2d2      	uxtb	r2, r2
 8016a42:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8016a44:	7c3b      	ldrb	r3, [r7, #16]
 8016a46:	461a      	mov	r2, r3
 8016a48:	4b2c      	ldr	r3, [pc, #176]	@ (8016afc <mix_sub_columns+0x28c>)
 8016a4a:	5c9a      	ldrb	r2, [r3, r2]
 8016a4c:	7d7b      	ldrb	r3, [r7, #21]
 8016a4e:	4619      	mov	r1, r3
 8016a50:	4b28      	ldr	r3, [pc, #160]	@ (8016af4 <mix_sub_columns+0x284>)
 8016a52:	5c5b      	ldrb	r3, [r3, r1]
 8016a54:	4053      	eors	r3, r2
 8016a56:	b2da      	uxtb	r2, r3
 8016a58:	7abb      	ldrb	r3, [r7, #10]
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	4b26      	ldr	r3, [pc, #152]	@ (8016af8 <mix_sub_columns+0x288>)
 8016a5e:	5c5b      	ldrb	r3, [r3, r1]
 8016a60:	4053      	eors	r3, r2
 8016a62:	b2d9      	uxtb	r1, r3
 8016a64:	7bfb      	ldrb	r3, [r7, #15]
 8016a66:	461a      	mov	r2, r3
 8016a68:	4b24      	ldr	r3, [pc, #144]	@ (8016afc <mix_sub_columns+0x28c>)
 8016a6a:	5c9a      	ldrb	r2, [r3, r2]
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	3309      	adds	r3, #9
 8016a70:	404a      	eors	r2, r1
 8016a72:	b2d2      	uxtb	r2, r2
 8016a74:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8016a76:	7c3b      	ldrb	r3, [r7, #16]
 8016a78:	461a      	mov	r2, r3
 8016a7a:	4b20      	ldr	r3, [pc, #128]	@ (8016afc <mix_sub_columns+0x28c>)
 8016a7c:	5c9a      	ldrb	r2, [r3, r2]
 8016a7e:	7d7b      	ldrb	r3, [r7, #21]
 8016a80:	4619      	mov	r1, r3
 8016a82:	4b1e      	ldr	r3, [pc, #120]	@ (8016afc <mix_sub_columns+0x28c>)
 8016a84:	5c5b      	ldrb	r3, [r3, r1]
 8016a86:	4053      	eors	r3, r2
 8016a88:	b2da      	uxtb	r2, r3
 8016a8a:	7abb      	ldrb	r3, [r7, #10]
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	4b19      	ldr	r3, [pc, #100]	@ (8016af4 <mix_sub_columns+0x284>)
 8016a90:	5c5b      	ldrb	r3, [r3, r1]
 8016a92:	4053      	eors	r3, r2
 8016a94:	b2d9      	uxtb	r1, r3
 8016a96:	7bfb      	ldrb	r3, [r7, #15]
 8016a98:	461a      	mov	r2, r3
 8016a9a:	4b17      	ldr	r3, [pc, #92]	@ (8016af8 <mix_sub_columns+0x288>)
 8016a9c:	5c9a      	ldrb	r2, [r3, r2]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	330a      	adds	r3, #10
 8016aa2:	404a      	eors	r2, r1
 8016aa4:	b2d2      	uxtb	r2, r2
 8016aa6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8016aa8:	7c3b      	ldrb	r3, [r7, #16]
 8016aaa:	461a      	mov	r2, r3
 8016aac:	4b12      	ldr	r3, [pc, #72]	@ (8016af8 <mix_sub_columns+0x288>)
 8016aae:	5c9a      	ldrb	r2, [r3, r2]
 8016ab0:	7d7b      	ldrb	r3, [r7, #21]
 8016ab2:	4619      	mov	r1, r3
 8016ab4:	4b11      	ldr	r3, [pc, #68]	@ (8016afc <mix_sub_columns+0x28c>)
 8016ab6:	5c5b      	ldrb	r3, [r3, r1]
 8016ab8:	4053      	eors	r3, r2
 8016aba:	b2da      	uxtb	r2, r3
 8016abc:	7abb      	ldrb	r3, [r7, #10]
 8016abe:	4619      	mov	r1, r3
 8016ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8016afc <mix_sub_columns+0x28c>)
 8016ac2:	5c5b      	ldrb	r3, [r3, r1]
 8016ac4:	4053      	eors	r3, r2
 8016ac6:	b2d9      	uxtb	r1, r3
 8016ac8:	7bfb      	ldrb	r3, [r7, #15]
 8016aca:	461a      	mov	r2, r3
 8016acc:	4b09      	ldr	r3, [pc, #36]	@ (8016af4 <mix_sub_columns+0x284>)
 8016ace:	5c9a      	ldrb	r2, [r3, r2]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	330b      	adds	r3, #11
 8016ad4:	404a      	eors	r2, r1
 8016ad6:	b2d2      	uxtb	r2, r2
 8016ad8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8016ada:	7d3b      	ldrb	r3, [r7, #20]
 8016adc:	461a      	mov	r2, r3
 8016ade:	4b05      	ldr	r3, [pc, #20]	@ (8016af4 <mix_sub_columns+0x284>)
 8016ae0:	5c9a      	ldrb	r2, [r3, r2]
 8016ae2:	7a7b      	ldrb	r3, [r7, #9]
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	4b04      	ldr	r3, [pc, #16]	@ (8016af8 <mix_sub_columns+0x288>)
 8016ae8:	5c5b      	ldrb	r3, [r3, r1]
 8016aea:	4053      	eors	r3, r2
 8016aec:	b2da      	uxtb	r2, r3
 8016aee:	7bbb      	ldrb	r3, [r7, #14]
 8016af0:	4619      	mov	r1, r3
 8016af2:	e005      	b.n	8016b00 <mix_sub_columns+0x290>
 8016af4:	08021d08 	.word	0x08021d08
 8016af8:	08021e08 	.word	0x08021e08
 8016afc:	08021c08 	.word	0x08021c08
 8016b00:	4b2d      	ldr	r3, [pc, #180]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b02:	5c5b      	ldrb	r3, [r3, r1]
 8016b04:	4053      	eors	r3, r2
 8016b06:	b2d9      	uxtb	r1, r3
 8016b08:	7cfb      	ldrb	r3, [r7, #19]
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b0e:	5c9a      	ldrb	r2, [r3, r2]
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	330c      	adds	r3, #12
 8016b14:	404a      	eors	r2, r1
 8016b16:	b2d2      	uxtb	r2, r2
 8016b18:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8016b1a:	7d3b      	ldrb	r3, [r7, #20]
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	4b26      	ldr	r3, [pc, #152]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b20:	5c9a      	ldrb	r2, [r3, r2]
 8016b22:	7a7b      	ldrb	r3, [r7, #9]
 8016b24:	4619      	mov	r1, r3
 8016b26:	4b25      	ldr	r3, [pc, #148]	@ (8016bbc <mix_sub_columns+0x34c>)
 8016b28:	5c5b      	ldrb	r3, [r3, r1]
 8016b2a:	4053      	eors	r3, r2
 8016b2c:	b2da      	uxtb	r2, r3
 8016b2e:	7bbb      	ldrb	r3, [r7, #14]
 8016b30:	4619      	mov	r1, r3
 8016b32:	4b23      	ldr	r3, [pc, #140]	@ (8016bc0 <mix_sub_columns+0x350>)
 8016b34:	5c5b      	ldrb	r3, [r3, r1]
 8016b36:	4053      	eors	r3, r2
 8016b38:	b2d9      	uxtb	r1, r3
 8016b3a:	7cfb      	ldrb	r3, [r7, #19]
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b40:	5c9a      	ldrb	r2, [r3, r2]
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	330d      	adds	r3, #13
 8016b46:	404a      	eors	r2, r1
 8016b48:	b2d2      	uxtb	r2, r2
 8016b4a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8016b4c:	7d3b      	ldrb	r3, [r7, #20]
 8016b4e:	461a      	mov	r2, r3
 8016b50:	4b19      	ldr	r3, [pc, #100]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b52:	5c9a      	ldrb	r2, [r3, r2]
 8016b54:	7a7b      	ldrb	r3, [r7, #9]
 8016b56:	4619      	mov	r1, r3
 8016b58:	4b17      	ldr	r3, [pc, #92]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b5a:	5c5b      	ldrb	r3, [r3, r1]
 8016b5c:	4053      	eors	r3, r2
 8016b5e:	b2da      	uxtb	r2, r3
 8016b60:	7bbb      	ldrb	r3, [r7, #14]
 8016b62:	4619      	mov	r1, r3
 8016b64:	4b15      	ldr	r3, [pc, #84]	@ (8016bbc <mix_sub_columns+0x34c>)
 8016b66:	5c5b      	ldrb	r3, [r3, r1]
 8016b68:	4053      	eors	r3, r2
 8016b6a:	b2d9      	uxtb	r1, r3
 8016b6c:	7cfb      	ldrb	r3, [r7, #19]
 8016b6e:	461a      	mov	r2, r3
 8016b70:	4b13      	ldr	r3, [pc, #76]	@ (8016bc0 <mix_sub_columns+0x350>)
 8016b72:	5c9a      	ldrb	r2, [r3, r2]
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	330e      	adds	r3, #14
 8016b78:	404a      	eors	r2, r1
 8016b7a:	b2d2      	uxtb	r2, r2
 8016b7c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8016b7e:	7d3b      	ldrb	r3, [r7, #20]
 8016b80:	461a      	mov	r2, r3
 8016b82:	4b0f      	ldr	r3, [pc, #60]	@ (8016bc0 <mix_sub_columns+0x350>)
 8016b84:	5c9a      	ldrb	r2, [r3, r2]
 8016b86:	7a7b      	ldrb	r3, [r7, #9]
 8016b88:	4619      	mov	r1, r3
 8016b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b8c:	5c5b      	ldrb	r3, [r3, r1]
 8016b8e:	4053      	eors	r3, r2
 8016b90:	b2da      	uxtb	r2, r3
 8016b92:	7bbb      	ldrb	r3, [r7, #14]
 8016b94:	4619      	mov	r1, r3
 8016b96:	4b08      	ldr	r3, [pc, #32]	@ (8016bb8 <mix_sub_columns+0x348>)
 8016b98:	5c5b      	ldrb	r3, [r3, r1]
 8016b9a:	4053      	eors	r3, r2
 8016b9c:	b2d9      	uxtb	r1, r3
 8016b9e:	7cfb      	ldrb	r3, [r7, #19]
 8016ba0:	461a      	mov	r2, r3
 8016ba2:	4b06      	ldr	r3, [pc, #24]	@ (8016bbc <mix_sub_columns+0x34c>)
 8016ba4:	5c9a      	ldrb	r2, [r3, r2]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	330f      	adds	r3, #15
 8016baa:	404a      	eors	r2, r1
 8016bac:	b2d2      	uxtb	r2, r2
 8016bae:	701a      	strb	r2, [r3, #0]
  }
 8016bb0:	bf00      	nop
 8016bb2:	3718      	adds	r7, #24
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}
 8016bb8:	08021c08 	.word	0x08021c08
 8016bbc:	08021d08 	.word	0x08021d08
 8016bc0:	08021e08 	.word	0x08021e08

08016bc4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b086      	sub	sp, #24
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	460b      	mov	r3, r1
 8016bce:	607a      	str	r2, [r7, #4]
 8016bd0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 8016bd2:	7afb      	ldrb	r3, [r7, #11]
 8016bd4:	3b10      	subs	r3, #16
 8016bd6:	2b10      	cmp	r3, #16
 8016bd8:	bf8c      	ite	hi
 8016bda:	2201      	movhi	r2, #1
 8016bdc:	2200      	movls	r2, #0
 8016bde:	b2d2      	uxtb	r2, r2
 8016be0:	2a00      	cmp	r2, #0
 8016be2:	d10b      	bne.n	8016bfc <lorawan_aes_set_key+0x38>
 8016be4:	4a64      	ldr	r2, [pc, #400]	@ (8016d78 <lorawan_aes_set_key+0x1b4>)
 8016be6:	fa22 f303 	lsr.w	r3, r2, r3
 8016bea:	f003 0301 	and.w	r3, r3, #1
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	bf14      	ite	ne
 8016bf2:	2301      	movne	r3, #1
 8016bf4:	2300      	moveq	r3, #0
 8016bf6:	b2db      	uxtb	r3, r3
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d105      	bne.n	8016c08 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	2200      	movs	r2, #0
 8016c00:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 8016c04:	23ff      	movs	r3, #255	@ 0xff
 8016c06:	e0b3      	b.n	8016d70 <lorawan_aes_set_key+0x1ac>
        break;
 8016c08:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	7afa      	ldrb	r2, [r7, #11]
 8016c0e:	68f9      	ldr	r1, [r7, #12]
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7ff fbfc 	bl	801640e <copy_block_nn>
    hi = (keylen + 28) << 2;
 8016c16:	7afb      	ldrb	r3, [r7, #11]
 8016c18:	331c      	adds	r3, #28
 8016c1a:	b2db      	uxtb	r3, r3
 8016c1c:	009b      	lsls	r3, r3, #2
 8016c1e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 8016c20:	7c7b      	ldrb	r3, [r7, #17]
 8016c22:	091b      	lsrs	r3, r3, #4
 8016c24:	b2db      	uxtb	r3, r3
 8016c26:	3b01      	subs	r3, #1
 8016c28:	b2da      	uxtb	r2, r3
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8016c30:	7afb      	ldrb	r3, [r7, #11]
 8016c32:	75fb      	strb	r3, [r7, #23]
 8016c34:	2301      	movs	r3, #1
 8016c36:	75bb      	strb	r3, [r7, #22]
 8016c38:	e094      	b.n	8016d64 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8016c3a:	7dfb      	ldrb	r3, [r7, #23]
 8016c3c:	3b04      	subs	r3, #4
 8016c3e:	687a      	ldr	r2, [r7, #4]
 8016c40:	5cd3      	ldrb	r3, [r2, r3]
 8016c42:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8016c44:	7dfb      	ldrb	r3, [r7, #23]
 8016c46:	3b03      	subs	r3, #3
 8016c48:	687a      	ldr	r2, [r7, #4]
 8016c4a:	5cd3      	ldrb	r3, [r2, r3]
 8016c4c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 8016c4e:	7dfb      	ldrb	r3, [r7, #23]
 8016c50:	3b02      	subs	r3, #2
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	5cd3      	ldrb	r3, [r2, r3]
 8016c56:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8016c58:	7dfb      	ldrb	r3, [r7, #23]
 8016c5a:	3b01      	subs	r3, #1
 8016c5c:	687a      	ldr	r2, [r7, #4]
 8016c5e:	5cd3      	ldrb	r3, [r2, r3]
 8016c60:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 8016c62:	7dfb      	ldrb	r3, [r7, #23]
 8016c64:	7afa      	ldrb	r2, [r7, #11]
 8016c66:	fbb3 f1f2 	udiv	r1, r3, r2
 8016c6a:	fb01 f202 	mul.w	r2, r1, r2
 8016c6e:	1a9b      	subs	r3, r3, r2
 8016c70:	b2db      	uxtb	r3, r3
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d128      	bne.n	8016cc8 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 8016c76:	7d7b      	ldrb	r3, [r7, #21]
 8016c78:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 8016c7a:	7d3b      	ldrb	r3, [r7, #20]
 8016c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016c7e:	5cd2      	ldrb	r2, [r2, r3]
 8016c80:	7dbb      	ldrb	r3, [r7, #22]
 8016c82:	4053      	eors	r3, r2
 8016c84:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 8016c86:	7cfb      	ldrb	r3, [r7, #19]
 8016c88:	4a3c      	ldr	r2, [pc, #240]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016c8a:	5cd3      	ldrb	r3, [r2, r3]
 8016c8c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 8016c8e:	7cbb      	ldrb	r3, [r7, #18]
 8016c90:	4a3a      	ldr	r2, [pc, #232]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016c92:	5cd3      	ldrb	r3, [r2, r3]
 8016c94:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8016c96:	7c3b      	ldrb	r3, [r7, #16]
 8016c98:	4a38      	ldr	r2, [pc, #224]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016c9a:	5cd3      	ldrb	r3, [r2, r3]
 8016c9c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 8016c9e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016ca2:	005b      	lsls	r3, r3, #1
 8016ca4:	b25a      	sxtb	r2, r3
 8016ca6:	7dbb      	ldrb	r3, [r7, #22]
 8016ca8:	09db      	lsrs	r3, r3, #7
 8016caa:	b2db      	uxtb	r3, r3
 8016cac:	b25b      	sxtb	r3, r3
 8016cae:	4619      	mov	r1, r3
 8016cb0:	0049      	lsls	r1, r1, #1
 8016cb2:	440b      	add	r3, r1
 8016cb4:	4619      	mov	r1, r3
 8016cb6:	00c8      	lsls	r0, r1, #3
 8016cb8:	4619      	mov	r1, r3
 8016cba:	4603      	mov	r3, r0
 8016cbc:	440b      	add	r3, r1
 8016cbe:	b25b      	sxtb	r3, r3
 8016cc0:	4053      	eors	r3, r2
 8016cc2:	b25b      	sxtb	r3, r3
 8016cc4:	75bb      	strb	r3, [r7, #22]
 8016cc6:	e01c      	b.n	8016d02 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8016cc8:	7afb      	ldrb	r3, [r7, #11]
 8016cca:	2b18      	cmp	r3, #24
 8016ccc:	d919      	bls.n	8016d02 <lorawan_aes_set_key+0x13e>
 8016cce:	7dfb      	ldrb	r3, [r7, #23]
 8016cd0:	7afa      	ldrb	r2, [r7, #11]
 8016cd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8016cd6:	fb01 f202 	mul.w	r2, r1, r2
 8016cda:	1a9b      	subs	r3, r3, r2
 8016cdc:	b2db      	uxtb	r3, r3
 8016cde:	2b10      	cmp	r3, #16
 8016ce0:	d10f      	bne.n	8016d02 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 8016ce2:	7d7b      	ldrb	r3, [r7, #21]
 8016ce4:	4a25      	ldr	r2, [pc, #148]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016ce6:	5cd3      	ldrb	r3, [r2, r3]
 8016ce8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 8016cea:	7d3b      	ldrb	r3, [r7, #20]
 8016cec:	4a23      	ldr	r2, [pc, #140]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016cee:	5cd3      	ldrb	r3, [r2, r3]
 8016cf0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 8016cf2:	7cfb      	ldrb	r3, [r7, #19]
 8016cf4:	4a21      	ldr	r2, [pc, #132]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016cf6:	5cd3      	ldrb	r3, [r2, r3]
 8016cf8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 8016cfa:	7cbb      	ldrb	r3, [r7, #18]
 8016cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8016d7c <lorawan_aes_set_key+0x1b8>)
 8016cfe:	5cd3      	ldrb	r3, [r2, r3]
 8016d00:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 8016d02:	7dfa      	ldrb	r2, [r7, #23]
 8016d04:	7afb      	ldrb	r3, [r7, #11]
 8016d06:	1ad3      	subs	r3, r2, r3
 8016d08:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8016d0a:	7c3b      	ldrb	r3, [r7, #16]
 8016d0c:	687a      	ldr	r2, [r7, #4]
 8016d0e:	5cd1      	ldrb	r1, [r2, r3]
 8016d10:	7dfb      	ldrb	r3, [r7, #23]
 8016d12:	7d7a      	ldrb	r2, [r7, #21]
 8016d14:	404a      	eors	r2, r1
 8016d16:	b2d1      	uxtb	r1, r2
 8016d18:	687a      	ldr	r2, [r7, #4]
 8016d1a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8016d1c:	7c3b      	ldrb	r3, [r7, #16]
 8016d1e:	3301      	adds	r3, #1
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	5cd1      	ldrb	r1, [r2, r3]
 8016d24:	7dfb      	ldrb	r3, [r7, #23]
 8016d26:	3301      	adds	r3, #1
 8016d28:	7d3a      	ldrb	r2, [r7, #20]
 8016d2a:	404a      	eors	r2, r1
 8016d2c:	b2d1      	uxtb	r1, r2
 8016d2e:	687a      	ldr	r2, [r7, #4]
 8016d30:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8016d32:	7c3b      	ldrb	r3, [r7, #16]
 8016d34:	3302      	adds	r3, #2
 8016d36:	687a      	ldr	r2, [r7, #4]
 8016d38:	5cd1      	ldrb	r1, [r2, r3]
 8016d3a:	7dfb      	ldrb	r3, [r7, #23]
 8016d3c:	3302      	adds	r3, #2
 8016d3e:	7cfa      	ldrb	r2, [r7, #19]
 8016d40:	404a      	eors	r2, r1
 8016d42:	b2d1      	uxtb	r1, r2
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8016d48:	7c3b      	ldrb	r3, [r7, #16]
 8016d4a:	3303      	adds	r3, #3
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	5cd1      	ldrb	r1, [r2, r3]
 8016d50:	7dfb      	ldrb	r3, [r7, #23]
 8016d52:	3303      	adds	r3, #3
 8016d54:	7cba      	ldrb	r2, [r7, #18]
 8016d56:	404a      	eors	r2, r1
 8016d58:	b2d1      	uxtb	r1, r2
 8016d5a:	687a      	ldr	r2, [r7, #4]
 8016d5c:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8016d5e:	7dfb      	ldrb	r3, [r7, #23]
 8016d60:	3304      	adds	r3, #4
 8016d62:	75fb      	strb	r3, [r7, #23]
 8016d64:	7dfa      	ldrb	r2, [r7, #23]
 8016d66:	7c7b      	ldrb	r3, [r7, #17]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	f4ff af66 	bcc.w	8016c3a <lorawan_aes_set_key+0x76>
    }
    return 0;
 8016d6e:	2300      	movs	r3, #0
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3718      	adds	r7, #24
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	00010101 	.word	0x00010101
 8016d7c:	08021c08 	.word	0x08021c08

08016d80 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b08a      	sub	sp, #40	@ 0x28
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d038      	beq.n	8016e08 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	f107 0314 	add.w	r3, r7, #20
 8016d9c:	68f9      	ldr	r1, [r7, #12]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7ff fc07 	bl	80165b2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8016da4:	2301      	movs	r3, #1
 8016da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016daa:	e014      	b.n	8016dd6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8016dac:	f107 0314 	add.w	r3, r7, #20
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7ff fd5d 	bl	8016870 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016dbc:	0112      	lsls	r2, r2, #4
 8016dbe:	441a      	add	r2, r3
 8016dc0:	f107 0314 	add.w	r3, r7, #20
 8016dc4:	4611      	mov	r1, r2
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f7ff fcab 	bl	8016722 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8016dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016dd0:	3301      	adds	r3, #1
 8016dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016ddc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d3e3      	bcc.n	8016dac <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8016de4:	f107 0314 	add.w	r3, r7, #20
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ff fca7 	bl	801673c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016df4:	0112      	lsls	r2, r2, #4
 8016df6:	441a      	add	r2, r3
 8016df8:	f107 0314 	add.w	r3, r7, #20
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	68b8      	ldr	r0, [r7, #8]
 8016e00:	f7ff fbd7 	bl	80165b2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8016e04:	2300      	movs	r3, #0
 8016e06:	e000      	b.n	8016e0a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8016e08:	23ff      	movs	r3, #255	@ 0xff
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3728      	adds	r7, #40	@ 0x28
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
	...

08016e14 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 8016e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e16:	b0a1      	sub	sp, #132	@ 0x84
 8016e18:	af12      	add	r7, sp, #72	@ 0x48
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8016e20:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016e28:	4611      	mov	r1, r2
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f000 fa12 	bl	8017254 <SecureElementGetKeyByID>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d174      	bne.n	8016f20 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016e36:	2300      	movs	r3, #0
 8016e38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016e3c:	e06c      	b.n	8016f18 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 8016e3e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016e42:	4939      	ldr	r1, [pc, #228]	@ (8016f28 <PrintKey+0x114>)
 8016e44:	4613      	mov	r3, r2
 8016e46:	005b      	lsls	r3, r3, #1
 8016e48:	4413      	add	r3, r2
 8016e4a:	009b      	lsls	r3, r3, #2
 8016e4c:	440b      	add	r3, r1
 8016e4e:	781b      	ldrb	r3, [r3, #0]
 8016e50:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d15a      	bne.n	8016f0e <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 8016e58:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016e5c:	4932      	ldr	r1, [pc, #200]	@ (8016f28 <PrintKey+0x114>)
 8016e5e:	4613      	mov	r3, r2
 8016e60:	005b      	lsls	r3, r3, #1
 8016e62:	4413      	add	r3, r2
 8016e64:	009b      	lsls	r3, r3, #2
 8016e66:	440b      	add	r3, r1
 8016e68:	3308      	adds	r3, #8
 8016e6a:	6819      	ldr	r1, [r3, #0]
 8016e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e6e:	785b      	ldrb	r3, [r3, #1]
 8016e70:	461d      	mov	r5, r3
 8016e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e74:	789b      	ldrb	r3, [r3, #2]
 8016e76:	461e      	mov	r6, r3
 8016e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e7a:	78db      	ldrb	r3, [r3, #3]
 8016e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e80:	791b      	ldrb	r3, [r3, #4]
 8016e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e86:	795b      	ldrb	r3, [r3, #5]
 8016e88:	623b      	str	r3, [r7, #32]
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e8c:	799b      	ldrb	r3, [r3, #6]
 8016e8e:	61fb      	str	r3, [r7, #28]
 8016e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e92:	79db      	ldrb	r3, [r3, #7]
 8016e94:	61bb      	str	r3, [r7, #24]
 8016e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e98:	7a1b      	ldrb	r3, [r3, #8]
 8016e9a:	617b      	str	r3, [r7, #20]
 8016e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e9e:	7a5b      	ldrb	r3, [r3, #9]
 8016ea0:	613b      	str	r3, [r7, #16]
 8016ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ea4:	7a9b      	ldrb	r3, [r3, #10]
 8016ea6:	60fb      	str	r3, [r7, #12]
 8016ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eaa:	7adb      	ldrb	r3, [r3, #11]
 8016eac:	60bb      	str	r3, [r7, #8]
 8016eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eb0:	7b1b      	ldrb	r3, [r3, #12]
 8016eb2:	607b      	str	r3, [r7, #4]
 8016eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eb6:	7b5b      	ldrb	r3, [r3, #13]
 8016eb8:	461c      	mov	r4, r3
 8016eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ebc:	7b9b      	ldrb	r3, [r3, #14]
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ec2:	7bdb      	ldrb	r3, [r3, #15]
 8016ec4:	461a      	mov	r2, r3
 8016ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ec8:	7c1b      	ldrb	r3, [r3, #16]
 8016eca:	9310      	str	r3, [sp, #64]	@ 0x40
 8016ecc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016ece:	900e      	str	r0, [sp, #56]	@ 0x38
 8016ed0:	940d      	str	r4, [sp, #52]	@ 0x34
 8016ed2:	687a      	ldr	r2, [r7, #4]
 8016ed4:	920c      	str	r2, [sp, #48]	@ 0x30
 8016ed6:	68ba      	ldr	r2, [r7, #8]
 8016ed8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016eda:	68fa      	ldr	r2, [r7, #12]
 8016edc:	920a      	str	r2, [sp, #40]	@ 0x28
 8016ede:	693a      	ldr	r2, [r7, #16]
 8016ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ee2:	697a      	ldr	r2, [r7, #20]
 8016ee4:	9208      	str	r2, [sp, #32]
 8016ee6:	69ba      	ldr	r2, [r7, #24]
 8016ee8:	9207      	str	r2, [sp, #28]
 8016eea:	69fa      	ldr	r2, [r7, #28]
 8016eec:	9206      	str	r2, [sp, #24]
 8016eee:	6a3a      	ldr	r2, [r7, #32]
 8016ef0:	9205      	str	r2, [sp, #20]
 8016ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ef4:	9204      	str	r2, [sp, #16]
 8016ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ef8:	9303      	str	r3, [sp, #12]
 8016efa:	9602      	str	r6, [sp, #8]
 8016efc:	9501      	str	r5, [sp, #4]
 8016efe:	9100      	str	r1, [sp, #0]
 8016f00:	4b0a      	ldr	r3, [pc, #40]	@ (8016f2c <PrintKey+0x118>)
 8016f02:	2200      	movs	r2, #0
 8016f04:	2100      	movs	r1, #0
 8016f06:	2002      	movs	r0, #2
 8016f08:	f003 fa26 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
 8016f0c:	e008      	b.n	8016f20 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f12:	3301      	adds	r3, #1
 8016f14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016f18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f1c:	2b0a      	cmp	r3, #10
 8016f1e:	d98e      	bls.n	8016e3e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 8016f20:	373c      	adds	r7, #60	@ 0x3c
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f26:	bf00      	nop
 8016f28:	08021f08 	.word	0x08021f08
 8016f2c:	08021724 	.word	0x08021724

08016f30 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 8016f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f32:	b091      	sub	sp, #68	@ 0x44
 8016f34:	af08      	add	r7, sp, #32
 8016f36:	4603      	mov	r3, r0
 8016f38:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 8016f3e:	f107 0310 	add.w	r3, r7, #16
 8016f42:	4618      	mov	r0, r3
 8016f44:	f000 fbd8 	bl	80176f8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8016f48:	7c3b      	ldrb	r3, [r7, #16]
 8016f4a:	7c7a      	ldrb	r2, [r7, #17]
 8016f4c:	7cb9      	ldrb	r1, [r7, #18]
 8016f4e:	7cf8      	ldrb	r0, [r7, #19]
 8016f50:	7d3c      	ldrb	r4, [r7, #20]
 8016f52:	7d7d      	ldrb	r5, [r7, #21]
 8016f54:	7dbe      	ldrb	r6, [r7, #22]
 8016f56:	f897 c017 	ldrb.w	ip, [r7, #23]
 8016f5a:	f8cd c01c 	str.w	ip, [sp, #28]
 8016f5e:	9606      	str	r6, [sp, #24]
 8016f60:	9505      	str	r5, [sp, #20]
 8016f62:	9404      	str	r4, [sp, #16]
 8016f64:	9003      	str	r0, [sp, #12]
 8016f66:	9102      	str	r1, [sp, #8]
 8016f68:	9201      	str	r2, [sp, #4]
 8016f6a:	9300      	str	r3, [sp, #0]
 8016f6c:	4b24      	ldr	r3, [pc, #144]	@ (8017000 <PrintIds+0xd0>)
 8016f6e:	2200      	movs	r2, #0
 8016f70:	2100      	movs	r1, #0
 8016f72:	2002      	movs	r0, #2
 8016f74:	f003 f9f0 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 8016f78:	f107 0318 	add.w	r3, r7, #24
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f000 fc05 	bl	801778c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8016f82:	7e3b      	ldrb	r3, [r7, #24]
 8016f84:	7e7a      	ldrb	r2, [r7, #25]
 8016f86:	7eb9      	ldrb	r1, [r7, #26]
 8016f88:	7ef8      	ldrb	r0, [r7, #27]
 8016f8a:	7f3c      	ldrb	r4, [r7, #28]
 8016f8c:	7f7d      	ldrb	r5, [r7, #29]
 8016f8e:	7fbe      	ldrb	r6, [r7, #30]
 8016f90:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8016f94:	f8cd c01c 	str.w	ip, [sp, #28]
 8016f98:	9606      	str	r6, [sp, #24]
 8016f9a:	9505      	str	r5, [sp, #20]
 8016f9c:	9404      	str	r4, [sp, #16]
 8016f9e:	9003      	str	r0, [sp, #12]
 8016fa0:	9102      	str	r1, [sp, #8]
 8016fa2:	9201      	str	r2, [sp, #4]
 8016fa4:	9300      	str	r3, [sp, #0]
 8016fa6:	4b17      	ldr	r3, [pc, #92]	@ (8017004 <PrintIds+0xd4>)
 8016fa8:	2200      	movs	r2, #0
 8016faa:	2100      	movs	r1, #0
 8016fac:	2002      	movs	r0, #2
 8016fae:	f003 f9d3 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 8016fb2:	f107 020c 	add.w	r2, r7, #12
 8016fb6:	79fb      	ldrb	r3, [r7, #7]
 8016fb8:	4611      	mov	r1, r2
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f000 fbfe 	bl	80177bc <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8016fc0:	f107 030c 	add.w	r3, r7, #12
 8016fc4:	3303      	adds	r3, #3
 8016fc6:	781b      	ldrb	r3, [r3, #0]
 8016fc8:	461a      	mov	r2, r3
 8016fca:	f107 030c 	add.w	r3, r7, #12
 8016fce:	3302      	adds	r3, #2
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	f107 030c 	add.w	r3, r7, #12
 8016fd8:	3301      	adds	r3, #1
 8016fda:	781b      	ldrb	r3, [r3, #0]
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f107 030c 	add.w	r3, r7, #12
 8016fe2:	781b      	ldrb	r3, [r3, #0]
 8016fe4:	9303      	str	r3, [sp, #12]
 8016fe6:	9002      	str	r0, [sp, #8]
 8016fe8:	9101      	str	r1, [sp, #4]
 8016fea:	9200      	str	r2, [sp, #0]
 8016fec:	4b06      	ldr	r3, [pc, #24]	@ (8017008 <PrintIds+0xd8>)
 8016fee:	2200      	movs	r2, #0
 8016ff0:	2100      	movs	r1, #0
 8016ff2:	2002      	movs	r0, #2
 8016ff4:	f003 f9b0 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 8016ff8:	bf00      	nop
 8016ffa:	3724      	adds	r7, #36	@ 0x24
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017000:	08021780 	.word	0x08021780
 8017004:	080217c0 	.word	0x080217c0
 8017008:	08021800 	.word	0x08021800

0801700c <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 801700c:	b480      	push	{r7}
 801700e:	b085      	sub	sp, #20
 8017010:	af00      	add	r7, sp, #0
 8017012:	4603      	mov	r3, r0
 8017014:	6039      	str	r1, [r7, #0]
 8017016:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8017018:	2300      	movs	r3, #0
 801701a:	73fb      	strb	r3, [r7, #15]
 801701c:	e01a      	b.n	8017054 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801701e:	4b12      	ldr	r3, [pc, #72]	@ (8017068 <GetKeyByID+0x5c>)
 8017020:	6819      	ldr	r1, [r3, #0]
 8017022:	7bfa      	ldrb	r2, [r7, #15]
 8017024:	4613      	mov	r3, r2
 8017026:	011b      	lsls	r3, r3, #4
 8017028:	4413      	add	r3, r2
 801702a:	440b      	add	r3, r1
 801702c:	3318      	adds	r3, #24
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	79fa      	ldrb	r2, [r7, #7]
 8017032:	429a      	cmp	r2, r3
 8017034:	d10b      	bne.n	801704e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8017036:	4b0c      	ldr	r3, [pc, #48]	@ (8017068 <GetKeyByID+0x5c>)
 8017038:	6819      	ldr	r1, [r3, #0]
 801703a:	7bfa      	ldrb	r2, [r7, #15]
 801703c:	4613      	mov	r3, r2
 801703e:	011b      	lsls	r3, r3, #4
 8017040:	4413      	add	r3, r2
 8017042:	3318      	adds	r3, #24
 8017044:	18ca      	adds	r2, r1, r3
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 801704a:	2300      	movs	r3, #0
 801704c:	e006      	b.n	801705c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801704e:	7bfb      	ldrb	r3, [r7, #15]
 8017050:	3301      	adds	r3, #1
 8017052:	73fb      	strb	r3, [r7, #15]
 8017054:	7bfb      	ldrb	r3, [r7, #15]
 8017056:	2b0a      	cmp	r3, #10
 8017058:	d9e1      	bls.n	801701e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801705a:	2303      	movs	r3, #3
}
 801705c:	4618      	mov	r0, r3
 801705e:	3714      	adds	r7, #20
 8017060:	46bd      	mov	sp, r7
 8017062:	bc80      	pop	{r7}
 8017064:	4770      	bx	lr
 8017066:	bf00      	nop
 8017068:	20001234 	.word	0x20001234

0801706c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 801706c:	b590      	push	{r4, r7, lr}
 801706e:	b0d1      	sub	sp, #324	@ 0x144
 8017070:	af00      	add	r7, sp, #0
 8017072:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 8017076:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 801707a:	6020      	str	r0, [r4, #0]
 801707c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8017080:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8017084:	6001      	str	r1, [r0, #0]
 8017086:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801708a:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 801708e:	600a      	str	r2, [r1, #0]
 8017090:	461a      	mov	r2, r3
 8017092:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017096:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 801709a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 801709c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170a0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d003      	beq.n	80170b2 <ComputeCmac+0x46>
 80170aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d101      	bne.n	80170b6 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80170b2:	2302      	movs	r3, #2
 80170b4:	e05d      	b.n	8017172 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80170b6:	f107 0314 	add.w	r3, r7, #20
 80170ba:	4618      	mov	r0, r3
 80170bc:	f7fe fefe 	bl	8015ebc <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80170c0:	f107 0210 	add.w	r2, r7, #16
 80170c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170c8:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	4611      	mov	r1, r2
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7ff ff9b 	bl	801700c <GetKeyByID>
 80170d6:	4603      	mov	r3, r0
 80170d8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80170dc:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d144      	bne.n	801716e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80170e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	1c5a      	adds	r2, r3, #1
 80170f0:	f107 0314 	add.w	r3, r7, #20
 80170f4:	4611      	mov	r1, r2
 80170f6:	4618      	mov	r0, r3
 80170f8:	f7fe fef9 	bl	8015eee <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 80170fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017100:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d009      	beq.n	801711e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 801710a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801710e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8017112:	f107 0014 	add.w	r0, r7, #20
 8017116:	2210      	movs	r2, #16
 8017118:	6819      	ldr	r1, [r3, #0]
 801711a:	f7fe fef7 	bl	8015f0c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 801711e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017122:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8017126:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801712a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801712e:	f107 0014 	add.w	r0, r7, #20
 8017132:	6812      	ldr	r2, [r2, #0]
 8017134:	6819      	ldr	r1, [r3, #0]
 8017136:	f7fe fee9 	bl	8015f0c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 801713a:	f107 0214 	add.w	r2, r7, #20
 801713e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8017142:	4611      	mov	r1, r2
 8017144:	4618      	mov	r0, r3
 8017146:	f7fe ffa3 	bl	8016090 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 801714a:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 801714e:	461a      	mov	r2, r3
 8017150:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8017154:	021b      	lsls	r3, r3, #8
 8017156:	431a      	orrs	r2, r3
 8017158:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 801715c:	041b      	lsls	r3, r3, #16
 801715e:	431a      	orrs	r2, r3
 8017160:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8017164:	061b      	lsls	r3, r3, #24
 8017166:	431a      	orrs	r2, r3
 8017168:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801716c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 801716e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 8017172:	4618      	mov	r0, r3
 8017174:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8017178:	46bd      	mov	sp, r7
 801717a:	bd90      	pop	{r4, r7, pc}

0801717c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b082      	sub	sp, #8
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d101      	bne.n	801718e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801718a:	2302      	movs	r3, #2
 801718c:	e00a      	b.n	80171a4 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 801718e:	4a07      	ldr	r2, [pc, #28]	@ (80171ac <SecureElementInit+0x30>)
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8017194:	4b05      	ldr	r3, [pc, #20]	@ (80171ac <SecureElementInit+0x30>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	22d8      	movs	r2, #216	@ 0xd8
 801719a:	4905      	ldr	r1, [pc, #20]	@ (80171b0 <SecureElementInit+0x34>)
 801719c:	4618      	mov	r0, r3
 801719e:	f000 fb76 	bl	801788e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 80171a2:	2300      	movs	r3, #0
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3708      	adds	r7, #8
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bd80      	pop	{r7, pc}
 80171ac:	20001234 	.word	0x20001234
 80171b0:	0803e500 	.word	0x0803e500

080171b4 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b086      	sub	sp, #24
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 80171be:	2300      	movs	r3, #0
 80171c0:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 80171c2:	f107 030c 	add.w	r3, r7, #12
 80171c6:	4618      	mov	r0, r3
 80171c8:	f000 fa96 	bl	80176f8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 80171cc:	f107 0308 	add.w	r3, r7, #8
 80171d0:	4619      	mov	r1, r3
 80171d2:	2001      	movs	r0, #1
 80171d4:	f000 faf2 	bl	80177bc <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d024      	beq.n	8017228 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 80171de:	2300      	movs	r3, #0
 80171e0:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80171e2:	2300      	movs	r3, #0
 80171e4:	75bb      	strb	r3, [r7, #22]
 80171e6:	e00c      	b.n	8017202 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 80171e8:	7dbb      	ldrb	r3, [r7, #22]
 80171ea:	3318      	adds	r3, #24
 80171ec:	443b      	add	r3, r7
 80171ee:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d002      	beq.n	80171fc <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 80171f6:	2301      	movs	r3, #1
 80171f8:	75fb      	strb	r3, [r7, #23]
                break;
 80171fa:	e005      	b.n	8017208 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80171fc:	7dbb      	ldrb	r3, [r7, #22]
 80171fe:	3301      	adds	r3, #1
 8017200:	75bb      	strb	r3, [r7, #22]
 8017202:	7dbb      	ldrb	r3, [r7, #22]
 8017204:	2b07      	cmp	r3, #7
 8017206:	d9ef      	bls.n	80171e8 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 8017208:	7dfb      	ldrb	r3, [r7, #23]
 801720a:	f083 0301 	eor.w	r3, r3, #1
 801720e:	b2db      	uxtb	r3, r3
 8017210:	2b00      	cmp	r3, #0
 8017212:	d009      	beq.n	8017228 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 8017214:	f107 020c 	add.w	r2, r7, #12
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	4610      	mov	r0, r2
 801721c:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 801721e:	f107 030c 	add.w	r3, r7, #12
 8017222:	4618      	mov	r0, r3
 8017224:	f000 fa50 	bl	80176c8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d00c      	beq.n	8017248 <SecureElementInitMcuID+0x94>
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d109      	bne.n	8017248 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 8017234:	f107 0208 	add.w	r2, r7, #8
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	4610      	mov	r0, r2
 801723c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	4619      	mov	r1, r3
 8017242:	2001      	movs	r0, #1
 8017244:	f000 fa88 	bl	8017758 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 8017248:	2300      	movs	r3, #0
}
 801724a:	4618      	mov	r0, r3
 801724c:	3718      	adds	r7, #24
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
	...

08017254 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8017254:	b480      	push	{r7}
 8017256:	b085      	sub	sp, #20
 8017258:	af00      	add	r7, sp, #0
 801725a:	4603      	mov	r3, r0
 801725c:	6039      	str	r1, [r7, #0]
 801725e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8017260:	2300      	movs	r3, #0
 8017262:	73fb      	strb	r3, [r7, #15]
 8017264:	e01a      	b.n	801729c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8017266:	4b12      	ldr	r3, [pc, #72]	@ (80172b0 <SecureElementGetKeyByID+0x5c>)
 8017268:	6819      	ldr	r1, [r3, #0]
 801726a:	7bfa      	ldrb	r2, [r7, #15]
 801726c:	4613      	mov	r3, r2
 801726e:	011b      	lsls	r3, r3, #4
 8017270:	4413      	add	r3, r2
 8017272:	440b      	add	r3, r1
 8017274:	3318      	adds	r3, #24
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	79fa      	ldrb	r2, [r7, #7]
 801727a:	429a      	cmp	r2, r3
 801727c:	d10b      	bne.n	8017296 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 801727e:	4b0c      	ldr	r3, [pc, #48]	@ (80172b0 <SecureElementGetKeyByID+0x5c>)
 8017280:	6819      	ldr	r1, [r3, #0]
 8017282:	7bfa      	ldrb	r2, [r7, #15]
 8017284:	4613      	mov	r3, r2
 8017286:	011b      	lsls	r3, r3, #4
 8017288:	4413      	add	r3, r2
 801728a:	3318      	adds	r3, #24
 801728c:	18ca      	adds	r2, r1, r3
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8017292:	2300      	movs	r3, #0
 8017294:	e006      	b.n	80172a4 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8017296:	7bfb      	ldrb	r3, [r7, #15]
 8017298:	3301      	adds	r3, #1
 801729a:	73fb      	strb	r3, [r7, #15]
 801729c:	7bfb      	ldrb	r3, [r7, #15]
 801729e:	2b0a      	cmp	r3, #10
 80172a0:	d9e1      	bls.n	8017266 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80172a2:	2303      	movs	r3, #3
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3714      	adds	r7, #20
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bc80      	pop	{r7}
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	20001234 	.word	0x20001234

080172b4 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 80172b8:	2000      	movs	r0, #0
 80172ba:	f7ff fdab 	bl	8016e14 <PrintKey>
    PrintKey( NWK_KEY );
 80172be:	2001      	movs	r0, #1
 80172c0:	f7ff fda8 	bl	8016e14 <PrintKey>
    PrintKey( APP_S_KEY );
 80172c4:	2009      	movs	r0, #9
 80172c6:	f7ff fda5 	bl	8016e14 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80172ca:	2008      	movs	r0, #8
 80172cc:	f7ff fda2 	bl	8016e14 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 80172d0:	2000      	movs	r0, #0
 80172d2:	f7ff fe2d 	bl	8016f30 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80172d6:	2300      	movs	r3, #0
}
 80172d8:	4618      	mov	r0, r3
 80172da:	bd80      	pop	{r7, pc}

080172dc <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	4603      	mov	r3, r0
 80172e4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 80172e6:	200b      	movs	r0, #11
 80172e8:	f7ff fd94 	bl	8016e14 <PrintKey>
    PrintKey( MC_KE_KEY );
 80172ec:	200c      	movs	r0, #12
 80172ee:	f7ff fd91 	bl	8016e14 <PrintKey>
    PrintKey( APP_S_KEY );
 80172f2:	2009      	movs	r0, #9
 80172f4:	f7ff fd8e 	bl	8016e14 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80172f8:	2008      	movs	r0, #8
 80172fa:	f7ff fd8b 	bl	8016e14 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 80172fe:	200a      	movs	r0, #10
 8017300:	f7ff fd88 	bl	8016e14 <PrintKey>
    PrintIds( mode );
 8017304:	79fb      	ldrb	r3, [r7, #7]
 8017306:	4618      	mov	r0, r3
 8017308:	f7ff fe12 	bl	8016f30 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 801730c:	2300      	movs	r3, #0
}
 801730e:	4618      	mov	r0, r3
 8017310:	3708      	adds	r7, #8
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}
	...

08017318 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b088      	sub	sp, #32
 801731c:	af00      	add	r7, sp, #0
 801731e:	4603      	mov	r3, r0
 8017320:	6039      	str	r1, [r7, #0]
 8017322:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d101      	bne.n	801732e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801732a:	2302      	movs	r3, #2
 801732c:	e04b      	b.n	80173c6 <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801732e:	2300      	movs	r3, #0
 8017330:	77fb      	strb	r3, [r7, #31]
 8017332:	e044      	b.n	80173be <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8017334:	4b26      	ldr	r3, [pc, #152]	@ (80173d0 <SecureElementSetKey+0xb8>)
 8017336:	6819      	ldr	r1, [r3, #0]
 8017338:	7ffa      	ldrb	r2, [r7, #31]
 801733a:	4613      	mov	r3, r2
 801733c:	011b      	lsls	r3, r3, #4
 801733e:	4413      	add	r3, r2
 8017340:	440b      	add	r3, r1
 8017342:	3318      	adds	r3, #24
 8017344:	781b      	ldrb	r3, [r3, #0]
 8017346:	79fa      	ldrb	r2, [r7, #7]
 8017348:	429a      	cmp	r2, r3
 801734a:	d135      	bne.n	80173b8 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 801734c:	79fb      	ldrb	r3, [r7, #7]
 801734e:	2b0d      	cmp	r3, #13
 8017350:	d122      	bne.n	8017398 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8017352:	2306      	movs	r3, #6
 8017354:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8017356:	f107 030c 	add.w	r3, r7, #12
 801735a:	2200      	movs	r2, #0
 801735c:	601a      	str	r2, [r3, #0]
 801735e:	605a      	str	r2, [r3, #4]
 8017360:	609a      	str	r2, [r3, #8]
 8017362:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8017364:	f107 030c 	add.w	r3, r7, #12
 8017368:	220c      	movs	r2, #12
 801736a:	2110      	movs	r1, #16
 801736c:	6838      	ldr	r0, [r7, #0]
 801736e:	f000 f877 	bl	8017460 <SecureElementAesEncrypt>
 8017372:	4603      	mov	r3, r0
 8017374:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8017376:	4b16      	ldr	r3, [pc, #88]	@ (80173d0 <SecureElementSetKey+0xb8>)
 8017378:	6819      	ldr	r1, [r3, #0]
 801737a:	7ffa      	ldrb	r2, [r7, #31]
 801737c:	4613      	mov	r3, r2
 801737e:	011b      	lsls	r3, r3, #4
 8017380:	4413      	add	r3, r2
 8017382:	3318      	adds	r3, #24
 8017384:	440b      	add	r3, r1
 8017386:	3301      	adds	r3, #1
 8017388:	f107 010c 	add.w	r1, r7, #12
 801738c:	2210      	movs	r2, #16
 801738e:	4618      	mov	r0, r3
 8017390:	f000 fa7d 	bl	801788e <memcpy1>
                return retval;
 8017394:	7fbb      	ldrb	r3, [r7, #30]
 8017396:	e016      	b.n	80173c6 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8017398:	4b0d      	ldr	r3, [pc, #52]	@ (80173d0 <SecureElementSetKey+0xb8>)
 801739a:	6819      	ldr	r1, [r3, #0]
 801739c:	7ffa      	ldrb	r2, [r7, #31]
 801739e:	4613      	mov	r3, r2
 80173a0:	011b      	lsls	r3, r3, #4
 80173a2:	4413      	add	r3, r2
 80173a4:	3318      	adds	r3, #24
 80173a6:	440b      	add	r3, r1
 80173a8:	3301      	adds	r3, #1
 80173aa:	2210      	movs	r2, #16
 80173ac:	6839      	ldr	r1, [r7, #0]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f000 fa6d 	bl	801788e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80173b4:	2300      	movs	r3, #0
 80173b6:	e006      	b.n	80173c6 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80173b8:	7ffb      	ldrb	r3, [r7, #31]
 80173ba:	3301      	adds	r3, #1
 80173bc:	77fb      	strb	r3, [r7, #31]
 80173be:	7ffb      	ldrb	r3, [r7, #31]
 80173c0:	2b0a      	cmp	r3, #10
 80173c2:	d9b7      	bls.n	8017334 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80173c4:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	3720      	adds	r7, #32
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	20001234 	.word	0x20001234

080173d4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b086      	sub	sp, #24
 80173d8:	af02      	add	r7, sp, #8
 80173da:	60f8      	str	r0, [r7, #12]
 80173dc:	60b9      	str	r1, [r7, #8]
 80173de:	607a      	str	r2, [r7, #4]
 80173e0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 80173e2:	78fb      	ldrb	r3, [r7, #3]
 80173e4:	2b0b      	cmp	r3, #11
 80173e6:	d901      	bls.n	80173ec <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80173e8:	2303      	movs	r3, #3
 80173ea:	e009      	b.n	8017400 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80173ec:	78fa      	ldrb	r2, [r7, #3]
 80173ee:	69bb      	ldr	r3, [r7, #24]
 80173f0:	9300      	str	r3, [sp, #0]
 80173f2:	4613      	mov	r3, r2
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	68b9      	ldr	r1, [r7, #8]
 80173f8:	68f8      	ldr	r0, [r7, #12]
 80173fa:	f7ff fe37 	bl	801706c <ComputeCmac>
 80173fe:	4603      	mov	r3, r0
}
 8017400:	4618      	mov	r0, r3
 8017402:	3710      	adds	r7, #16
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}

08017408 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b088      	sub	sp, #32
 801740c:	af02      	add	r7, sp, #8
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	607a      	str	r2, [r7, #4]
 8017414:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d101      	bne.n	8017420 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801741c:	2302      	movs	r3, #2
 801741e:	e01b      	b.n	8017458 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 8017420:	2306      	movs	r3, #6
 8017422:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8017424:	2300      	movs	r3, #0
 8017426:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8017428:	78fa      	ldrb	r2, [r7, #3]
 801742a:	f107 0310 	add.w	r3, r7, #16
 801742e:	9300      	str	r3, [sp, #0]
 8017430:	4613      	mov	r3, r2
 8017432:	68ba      	ldr	r2, [r7, #8]
 8017434:	68f9      	ldr	r1, [r7, #12]
 8017436:	2000      	movs	r0, #0
 8017438:	f7ff fe18 	bl	801706c <ComputeCmac>
 801743c:	4603      	mov	r3, r0
 801743e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8017440:	7dfb      	ldrb	r3, [r7, #23]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d001      	beq.n	801744a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 8017446:	7dfb      	ldrb	r3, [r7, #23]
 8017448:	e006      	b.n	8017458 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	687a      	ldr	r2, [r7, #4]
 801744e:	429a      	cmp	r2, r3
 8017450:	d001      	beq.n	8017456 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8017452:	2301      	movs	r3, #1
 8017454:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 8017456:	7dfb      	ldrb	r3, [r7, #23]
}
 8017458:	4618      	mov	r0, r3
 801745a:	3718      	adds	r7, #24
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}

08017460 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b0c2      	sub	sp, #264	@ 0x108
 8017464:	af00      	add	r7, sp, #0
 8017466:	60f8      	str	r0, [r7, #12]
 8017468:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 801746c:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8017470:	6001      	str	r1, [r0, #0]
 8017472:	4611      	mov	r1, r2
 8017474:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8017478:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 801747c:	6013      	str	r3, [r2, #0]
 801747e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017482:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8017486:	460a      	mov	r2, r1
 8017488:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d006      	beq.n	801749e <SecureElementAesEncrypt+0x3e>
 8017490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d101      	bne.n	80174a2 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801749e:	2302      	movs	r3, #2
 80174a0:	e059      	b.n	8017556 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 80174a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80174a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	f003 030f 	and.w	r3, r3, #15
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d001      	beq.n	80174b8 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80174b4:	2305      	movs	r3, #5
 80174b6:	e04e      	b.n	8017556 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80174b8:	f107 0314 	add.w	r3, r7, #20
 80174bc:	22f0      	movs	r2, #240	@ 0xf0
 80174be:	2100      	movs	r1, #0
 80174c0:	4618      	mov	r0, r3
 80174c2:	f000 fa1f 	bl	8017904 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80174c6:	f107 0210 	add.w	r2, r7, #16
 80174ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80174ce:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	4611      	mov	r1, r2
 80174d6:	4618      	mov	r0, r3
 80174d8:	f7ff fd98 	bl	801700c <GetKeyByID>
 80174dc:	4603      	mov	r3, r0
 80174de:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80174e2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d133      	bne.n	8017552 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	3301      	adds	r3, #1
 80174ee:	f107 0214 	add.w	r2, r7, #20
 80174f2:	2110      	movs	r1, #16
 80174f4:	4618      	mov	r0, r3
 80174f6:	f7ff fb65 	bl	8016bc4 <lorawan_aes_set_key>

        uint8_t block = 0;
 80174fa:	2300      	movs	r3, #0
 80174fc:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 8017500:	e020      	b.n	8017544 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8017502:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8017506:	68fa      	ldr	r2, [r7, #12]
 8017508:	18d0      	adds	r0, r2, r3
 801750a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 801750e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8017512:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8017516:	6812      	ldr	r2, [r2, #0]
 8017518:	4413      	add	r3, r2
 801751a:	f107 0214 	add.w	r2, r7, #20
 801751e:	4619      	mov	r1, r3
 8017520:	f7ff fc2e 	bl	8016d80 <lorawan_aes_encrypt>
            block = block + 16;
 8017524:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8017528:	3310      	adds	r3, #16
 801752a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 801752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017532:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017536:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801753a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 801753e:	6812      	ldr	r2, [r2, #0]
 8017540:	3a10      	subs	r2, #16
 8017542:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8017544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017548:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d1d7      	bne.n	8017502 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8017552:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 8017556:	4618      	mov	r0, r3
 8017558:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 801755c:	46bd      	mov	sp, r7
 801755e:	bd80      	pop	{r7, pc}

08017560 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b088      	sub	sp, #32
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
 8017568:	460b      	mov	r3, r1
 801756a:	70fb      	strb	r3, [r7, #3]
 801756c:	4613      	mov	r3, r2
 801756e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d101      	bne.n	801757a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8017576:	2302      	movs	r3, #2
 8017578:	e02d      	b.n	80175d6 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 801757a:	2306      	movs	r3, #6
 801757c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 801757e:	78bb      	ldrb	r3, [r7, #2]
 8017580:	2b0c      	cmp	r3, #12
 8017582:	d104      	bne.n	801758e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8017584:	78fb      	ldrb	r3, [r7, #3]
 8017586:	2b0b      	cmp	r3, #11
 8017588:	d001      	beq.n	801758e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801758a:	2303      	movs	r3, #3
 801758c:	e023      	b.n	80175d6 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 801758e:	f107 030c 	add.w	r3, r7, #12
 8017592:	2200      	movs	r2, #0
 8017594:	601a      	str	r2, [r3, #0]
 8017596:	605a      	str	r2, [r3, #4]
 8017598:	609a      	str	r2, [r3, #8]
 801759a:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 801759c:	f107 030c 	add.w	r3, r7, #12
 80175a0:	78fa      	ldrb	r2, [r7, #3]
 80175a2:	2110      	movs	r1, #16
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7ff ff5b 	bl	8017460 <SecureElementAesEncrypt>
 80175aa:	4603      	mov	r3, r0
 80175ac:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80175ae:	7ffb      	ldrb	r3, [r7, #31]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d001      	beq.n	80175b8 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 80175b4:	7ffb      	ldrb	r3, [r7, #31]
 80175b6:	e00e      	b.n	80175d6 <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 80175b8:	f107 020c 	add.w	r2, r7, #12
 80175bc:	78bb      	ldrb	r3, [r7, #2]
 80175be:	4611      	mov	r1, r2
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7ff fea9 	bl	8017318 <SecureElementSetKey>
 80175c6:	4603      	mov	r3, r0
 80175c8:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80175ca:	7ffb      	ldrb	r3, [r7, #31]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d001      	beq.n	80175d4 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 80175d0:	7ffb      	ldrb	r3, [r7, #31]
 80175d2:	e000      	b.n	80175d6 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 80175d4:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80175d6:	4618      	mov	r0, r3
 80175d8:	3720      	adds	r7, #32
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}

080175de <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80175de:	b580      	push	{r7, lr}
 80175e0:	b086      	sub	sp, #24
 80175e2:	af00      	add	r7, sp, #0
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	607b      	str	r3, [r7, #4]
 80175e8:	4603      	mov	r3, r0
 80175ea:	73fb      	strb	r3, [r7, #15]
 80175ec:	4613      	mov	r3, r2
 80175ee:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d005      	beq.n	8017602 <SecureElementProcessJoinAccept+0x24>
 80175f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d002      	beq.n	8017602 <SecureElementProcessJoinAccept+0x24>
 80175fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d101      	bne.n	8017606 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8017602:	2302      	movs	r3, #2
 8017604:	e05c      	b.n	80176c0 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8017606:	f897 3020 	ldrb.w	r3, [r7, #32]
 801760a:	2b21      	cmp	r3, #33	@ 0x21
 801760c:	d901      	bls.n	8017612 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801760e:	2305      	movs	r3, #5
 8017610:	e056      	b.n	80176c0 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 8017612:	2301      	movs	r3, #1
 8017614:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8017616:	f897 3020 	ldrb.w	r3, [r7, #32]
 801761a:	b29b      	uxth	r3, r3
 801761c:	461a      	mov	r2, r3
 801761e:	6879      	ldr	r1, [r7, #4]
 8017620:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017622:	f000 f934 	bl	801788e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	1c58      	adds	r0, r3, #1
 801762a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801762e:	3b01      	subs	r3, #1
 8017630:	4619      	mov	r1, r3
 8017632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017634:	3301      	adds	r3, #1
 8017636:	7dfa      	ldrb	r2, [r7, #23]
 8017638:	f7ff ff12 	bl	8017460 <SecureElementAesEncrypt>
 801763c:	4603      	mov	r3, r0
 801763e:	2b00      	cmp	r3, #0
 8017640:	d001      	beq.n	8017646 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8017642:	2307      	movs	r3, #7
 8017644:	e03c      	b.n	80176c0 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8017646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017648:	330b      	adds	r3, #11
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	09db      	lsrs	r3, r3, #7
 801764e:	b2da      	uxtb	r2, r3
 8017650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017652:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8017654:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017658:	3b04      	subs	r3, #4
 801765a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801765c:	4413      	add	r3, r2
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	4619      	mov	r1, r3
 8017662:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017666:	3b03      	subs	r3, #3
 8017668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801766a:	4413      	add	r3, r2
 801766c:	781b      	ldrb	r3, [r3, #0]
 801766e:	021b      	lsls	r3, r3, #8
 8017670:	ea41 0203 	orr.w	r2, r1, r3
 8017674:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017678:	3b02      	subs	r3, #2
 801767a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801767c:	440b      	add	r3, r1
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	041b      	lsls	r3, r3, #16
 8017682:	431a      	orrs	r2, r3
 8017684:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017688:	3b01      	subs	r3, #1
 801768a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801768c:	440b      	add	r3, r1
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	061b      	lsls	r3, r3, #24
 8017692:	4313      	orrs	r3, r2
 8017694:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8017696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017698:	781b      	ldrb	r3, [r3, #0]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d10d      	bne.n	80176ba <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 801769e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80176a2:	3b04      	subs	r3, #4
 80176a4:	4619      	mov	r1, r3
 80176a6:	2301      	movs	r3, #1
 80176a8:	693a      	ldr	r2, [r7, #16]
 80176aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80176ac:	f7ff feac 	bl	8017408 <SecureElementVerifyAesCmac>
 80176b0:	4603      	mov	r3, r0
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d003      	beq.n	80176be <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80176b6:	2301      	movs	r3, #1
 80176b8:	e002      	b.n	80176c0 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80176ba:	2304      	movs	r3, #4
 80176bc:	e000      	b.n	80176c0 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 80176be:	2300      	movs	r3, #0
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	3718      	adds	r7, #24
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d101      	bne.n	80176da <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80176d6:	2302      	movs	r3, #2
 80176d8:	e007      	b.n	80176ea <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 80176da:	4b06      	ldr	r3, [pc, #24]	@ (80176f4 <SecureElementSetDevEui+0x2c>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	2208      	movs	r2, #8
 80176e0:	6879      	ldr	r1, [r7, #4]
 80176e2:	4618      	mov	r0, r3
 80176e4:	f000 f8d3 	bl	801788e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80176e8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80176ea:	4618      	mov	r0, r3
 80176ec:	3708      	adds	r7, #8
 80176ee:	46bd      	mov	sp, r7
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	bf00      	nop
 80176f4:	20001234 	.word	0x20001234

080176f8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b082      	sub	sp, #8
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d101      	bne.n	801770a <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8017706:	2302      	movs	r3, #2
 8017708:	e007      	b.n	801771a <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 801770a:	4b06      	ldr	r3, [pc, #24]	@ (8017724 <SecureElementGetDevEui+0x2c>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	2208      	movs	r2, #8
 8017710:	4619      	mov	r1, r3
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f000 f8bb 	bl	801788e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8017718:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801771a:	4618      	mov	r0, r3
 801771c:	3708      	adds	r7, #8
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	20001234 	.word	0x20001234

08017728 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d101      	bne.n	801773a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8017736:	2302      	movs	r3, #2
 8017738:	e008      	b.n	801774c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 801773a:	4b06      	ldr	r3, [pc, #24]	@ (8017754 <SecureElementSetJoinEui+0x2c>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	3308      	adds	r3, #8
 8017740:	2208      	movs	r2, #8
 8017742:	6879      	ldr	r1, [r7, #4]
 8017744:	4618      	mov	r0, r3
 8017746:	f000 f8a2 	bl	801788e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801774a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801774c:	4618      	mov	r0, r3
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	20001234 	.word	0x20001234

08017758 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 8017758:	b480      	push	{r7}
 801775a:	b083      	sub	sp, #12
 801775c:	af00      	add	r7, sp, #0
 801775e:	4603      	mov	r3, r0
 8017760:	6039      	str	r1, [r7, #0]
 8017762:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8017764:	79fb      	ldrb	r3, [r7, #7]
 8017766:	2b02      	cmp	r3, #2
 8017768:	d104      	bne.n	8017774 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 801776a:	4b07      	ldr	r3, [pc, #28]	@ (8017788 <SecureElementSetDevAddr+0x30>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	683a      	ldr	r2, [r7, #0]
 8017770:	611a      	str	r2, [r3, #16]
 8017772:	e003      	b.n	801777c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8017774:	4b04      	ldr	r3, [pc, #16]	@ (8017788 <SecureElementSetDevAddr+0x30>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	683a      	ldr	r2, [r7, #0]
 801777a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 801777c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 801777e:	4618      	mov	r0, r3
 8017780:	370c      	adds	r7, #12
 8017782:	46bd      	mov	sp, r7
 8017784:	bc80      	pop	{r7}
 8017786:	4770      	bx	lr
 8017788:	20001234 	.word	0x20001234

0801778c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b082      	sub	sp, #8
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d101      	bne.n	801779e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801779a:	2302      	movs	r3, #2
 801779c:	e008      	b.n	80177b0 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 801779e:	4b06      	ldr	r3, [pc, #24]	@ (80177b8 <SecureElementGetJoinEui+0x2c>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	3308      	adds	r3, #8
 80177a4:	2208      	movs	r2, #8
 80177a6:	4619      	mov	r1, r3
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f000 f870 	bl	801788e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80177ae:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80177b0:	4618      	mov	r0, r3
 80177b2:	3708      	adds	r7, #8
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}
 80177b8:	20001234 	.word	0x20001234

080177bc <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 80177bc:	b480      	push	{r7}
 80177be:	b083      	sub	sp, #12
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	4603      	mov	r3, r0
 80177c4:	6039      	str	r1, [r7, #0]
 80177c6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 80177c8:	683b      	ldr	r3, [r7, #0]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d101      	bne.n	80177d2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80177ce:	2302      	movs	r3, #2
 80177d0:	e00e      	b.n	80177f0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80177d2:	79fb      	ldrb	r3, [r7, #7]
 80177d4:	2b02      	cmp	r3, #2
 80177d6:	d105      	bne.n	80177e4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80177d8:	4b08      	ldr	r3, [pc, #32]	@ (80177fc <SecureElementGetDevAddr+0x40>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	691a      	ldr	r2, [r3, #16]
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	601a      	str	r2, [r3, #0]
 80177e2:	e004      	b.n	80177ee <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80177e4:	4b05      	ldr	r3, [pc, #20]	@ (80177fc <SecureElementGetDevAddr+0x40>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	695a      	ldr	r2, [r3, #20]
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80177ee:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	370c      	adds	r7, #12
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bc80      	pop	{r7}
 80177f8:	4770      	bx	lr
 80177fa:	bf00      	nop
 80177fc:	20001234 	.word	0x20001234

08017800 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017800:	b480      	push	{r7}
 8017802:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017804:	4b0d      	ldr	r3, [pc, #52]	@ (801783c <rand1+0x3c>)
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	4a0d      	ldr	r2, [pc, #52]	@ (8017840 <rand1+0x40>)
 801780a:	fb02 f303 	mul.w	r3, r2, r3
 801780e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017812:	3339      	adds	r3, #57	@ 0x39
 8017814:	4a09      	ldr	r2, [pc, #36]	@ (801783c <rand1+0x3c>)
 8017816:	6013      	str	r3, [r2, #0]
 8017818:	4b08      	ldr	r3, [pc, #32]	@ (801783c <rand1+0x3c>)
 801781a:	681a      	ldr	r2, [r3, #0]
 801781c:	2303      	movs	r3, #3
 801781e:	fba3 1302 	umull	r1, r3, r3, r2
 8017822:	1ad1      	subs	r1, r2, r3
 8017824:	0849      	lsrs	r1, r1, #1
 8017826:	440b      	add	r3, r1
 8017828:	0f99      	lsrs	r1, r3, #30
 801782a:	460b      	mov	r3, r1
 801782c:	07db      	lsls	r3, r3, #31
 801782e:	1a5b      	subs	r3, r3, r1
 8017830:	1ad1      	subs	r1, r2, r3
 8017832:	460b      	mov	r3, r1
}
 8017834:	4618      	mov	r0, r3
 8017836:	46bd      	mov	sp, r7
 8017838:	bc80      	pop	{r7}
 801783a:	4770      	bx	lr
 801783c:	200000d4 	.word	0x200000d4
 8017840:	41c64e6d 	.word	0x41c64e6d

08017844 <srand1>:

void srand1( uint32_t seed )
{
 8017844:	b480      	push	{r7}
 8017846:	b083      	sub	sp, #12
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
    next = seed;
 801784c:	4a03      	ldr	r2, [pc, #12]	@ (801785c <srand1+0x18>)
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	6013      	str	r3, [r2, #0]
}
 8017852:	bf00      	nop
 8017854:	370c      	adds	r7, #12
 8017856:	46bd      	mov	sp, r7
 8017858:	bc80      	pop	{r7}
 801785a:	4770      	bx	lr
 801785c:	200000d4 	.word	0x200000d4

08017860 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
 8017868:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801786a:	f7ff ffc9 	bl	8017800 <rand1>
 801786e:	4602      	mov	r2, r0
 8017870:	6839      	ldr	r1, [r7, #0]
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	1acb      	subs	r3, r1, r3
 8017876:	3301      	adds	r3, #1
 8017878:	fb92 f1f3 	sdiv	r1, r2, r3
 801787c:	fb01 f303 	mul.w	r3, r1, r3
 8017880:	1ad2      	subs	r2, r2, r3
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	4413      	add	r3, r2
}
 8017886:	4618      	mov	r0, r3
 8017888:	3708      	adds	r7, #8
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}

0801788e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801788e:	b480      	push	{r7}
 8017890:	b085      	sub	sp, #20
 8017892:	af00      	add	r7, sp, #0
 8017894:	60f8      	str	r0, [r7, #12]
 8017896:	60b9      	str	r1, [r7, #8]
 8017898:	4613      	mov	r3, r2
 801789a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801789c:	e007      	b.n	80178ae <memcpy1+0x20>
    {
        *dst++ = *src++;
 801789e:	68ba      	ldr	r2, [r7, #8]
 80178a0:	1c53      	adds	r3, r2, #1
 80178a2:	60bb      	str	r3, [r7, #8]
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	1c59      	adds	r1, r3, #1
 80178a8:	60f9      	str	r1, [r7, #12]
 80178aa:	7812      	ldrb	r2, [r2, #0]
 80178ac:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80178ae:	88fb      	ldrh	r3, [r7, #6]
 80178b0:	1e5a      	subs	r2, r3, #1
 80178b2:	80fa      	strh	r2, [r7, #6]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d1f2      	bne.n	801789e <memcpy1+0x10>
    }
}
 80178b8:	bf00      	nop
 80178ba:	bf00      	nop
 80178bc:	3714      	adds	r7, #20
 80178be:	46bd      	mov	sp, r7
 80178c0:	bc80      	pop	{r7}
 80178c2:	4770      	bx	lr

080178c4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80178c4:	b480      	push	{r7}
 80178c6:	b085      	sub	sp, #20
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	4613      	mov	r3, r2
 80178d0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80178d2:	88fb      	ldrh	r3, [r7, #6]
 80178d4:	3b01      	subs	r3, #1
 80178d6:	68fa      	ldr	r2, [r7, #12]
 80178d8:	4413      	add	r3, r2
 80178da:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80178dc:	e007      	b.n	80178ee <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80178de:	68ba      	ldr	r2, [r7, #8]
 80178e0:	1c53      	adds	r3, r2, #1
 80178e2:	60bb      	str	r3, [r7, #8]
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	1e59      	subs	r1, r3, #1
 80178e8:	60f9      	str	r1, [r7, #12]
 80178ea:	7812      	ldrb	r2, [r2, #0]
 80178ec:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80178ee:	88fb      	ldrh	r3, [r7, #6]
 80178f0:	1e5a      	subs	r2, r3, #1
 80178f2:	80fa      	strh	r2, [r7, #6]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d1f2      	bne.n	80178de <memcpyr+0x1a>
    }
}
 80178f8:	bf00      	nop
 80178fa:	bf00      	nop
 80178fc:	3714      	adds	r7, #20
 80178fe:	46bd      	mov	sp, r7
 8017900:	bc80      	pop	{r7}
 8017902:	4770      	bx	lr

08017904 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017904:	b480      	push	{r7}
 8017906:	b083      	sub	sp, #12
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
 801790c:	460b      	mov	r3, r1
 801790e:	70fb      	strb	r3, [r7, #3]
 8017910:	4613      	mov	r3, r2
 8017912:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017914:	e004      	b.n	8017920 <memset1+0x1c>
    {
        *dst++ = value;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	1c5a      	adds	r2, r3, #1
 801791a:	607a      	str	r2, [r7, #4]
 801791c:	78fa      	ldrb	r2, [r7, #3]
 801791e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017920:	883b      	ldrh	r3, [r7, #0]
 8017922:	1e5a      	subs	r2, r3, #1
 8017924:	803a      	strh	r2, [r7, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1f5      	bne.n	8017916 <memset1+0x12>
    }
}
 801792a:	bf00      	nop
 801792c:	bf00      	nop
 801792e:	370c      	adds	r7, #12
 8017930:	46bd      	mov	sp, r7
 8017932:	bc80      	pop	{r7}
 8017934:	4770      	bx	lr
	...

08017938 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017938:	b480      	push	{r7}
 801793a:	b085      	sub	sp, #20
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	460b      	mov	r3, r1
 8017942:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017944:	f04f 33ff 	mov.w	r3, #4294967295
 8017948:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d101      	bne.n	8017954 <Crc32+0x1c>
    {
        return 0;
 8017950:	2300      	movs	r3, #0
 8017952:	e026      	b.n	80179a2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017954:	2300      	movs	r3, #0
 8017956:	817b      	strh	r3, [r7, #10]
 8017958:	e01d      	b.n	8017996 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801795a:	897b      	ldrh	r3, [r7, #10]
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	4413      	add	r3, r2
 8017960:	781b      	ldrb	r3, [r3, #0]
 8017962:	461a      	mov	r2, r3
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	4053      	eors	r3, r2
 8017968:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801796a:	2300      	movs	r3, #0
 801796c:	813b      	strh	r3, [r7, #8]
 801796e:	e00c      	b.n	801798a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	085a      	lsrs	r2, r3, #1
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	f003 0301 	and.w	r3, r3, #1
 801797a:	425b      	negs	r3, r3
 801797c:	490b      	ldr	r1, [pc, #44]	@ (80179ac <Crc32+0x74>)
 801797e:	400b      	ands	r3, r1
 8017980:	4053      	eors	r3, r2
 8017982:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017984:	893b      	ldrh	r3, [r7, #8]
 8017986:	3301      	adds	r3, #1
 8017988:	813b      	strh	r3, [r7, #8]
 801798a:	893b      	ldrh	r3, [r7, #8]
 801798c:	2b07      	cmp	r3, #7
 801798e:	d9ef      	bls.n	8017970 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017990:	897b      	ldrh	r3, [r7, #10]
 8017992:	3301      	adds	r3, #1
 8017994:	817b      	strh	r3, [r7, #10]
 8017996:	897a      	ldrh	r2, [r7, #10]
 8017998:	887b      	ldrh	r3, [r7, #2]
 801799a:	429a      	cmp	r2, r3
 801799c:	d3dd      	bcc.n	801795a <Crc32+0x22>
        }
    }

    return ~crc;
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	43db      	mvns	r3, r3
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3714      	adds	r7, #20
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bc80      	pop	{r7}
 80179aa:	4770      	bx	lr
 80179ac:	edb88320 	.word	0xedb88320

080179b0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80179b0:	b480      	push	{r7}
 80179b2:	b083      	sub	sp, #12
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	683a      	ldr	r2, [r7, #0]
 80179be:	619a      	str	r2, [r3, #24]
}
 80179c0:	bf00      	nop
 80179c2:	370c      	adds	r7, #12
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bc80      	pop	{r7}
 80179c8:	4770      	bx	lr

080179ca <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80179ca:	b480      	push	{r7}
 80179cc:	b083      	sub	sp, #12
 80179ce:	af00      	add	r7, sp, #0
 80179d0:	6078      	str	r0, [r7, #4]
 80179d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	683a      	ldr	r2, [r7, #0]
 80179d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80179da:	bf00      	nop
 80179dc:	370c      	adds	r7, #12
 80179de:	46bd      	mov	sp, r7
 80179e0:	bc80      	pop	{r7}
 80179e2:	4770      	bx	lr

080179e4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af02      	add	r7, sp, #8
 80179ea:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80179ec:	4a24      	ldr	r2, [pc, #144]	@ (8017a80 <RadioInit+0x9c>)
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80179f2:	4b24      	ldr	r3, [pc, #144]	@ (8017a84 <RadioInit+0xa0>)
 80179f4:	2200      	movs	r2, #0
 80179f6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80179f8:	4b22      	ldr	r3, [pc, #136]	@ (8017a84 <RadioInit+0xa0>)
 80179fa:	2200      	movs	r2, #0
 80179fc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80179fe:	4b21      	ldr	r3, [pc, #132]	@ (8017a84 <RadioInit+0xa0>)
 8017a00:	2200      	movs	r2, #0
 8017a02:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017a04:	4b1f      	ldr	r3, [pc, #124]	@ (8017a84 <RadioInit+0xa0>)
 8017a06:	2200      	movs	r2, #0
 8017a08:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8017a0a:	481f      	ldr	r0, [pc, #124]	@ (8017a88 <RadioInit+0xa4>)
 8017a0c:	f001 fa38 	bl	8018e80 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017a10:	4b1c      	ldr	r3, [pc, #112]	@ (8017a84 <RadioInit+0xa0>)
 8017a12:	2200      	movs	r2, #0
 8017a14:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017a16:	4b1b      	ldr	r3, [pc, #108]	@ (8017a84 <RadioInit+0xa0>)
 8017a18:	2200      	movs	r2, #0
 8017a1a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017a1c:	f001 fcce 	bl	80193bc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017a20:	2100      	movs	r1, #0
 8017a22:	2000      	movs	r0, #0
 8017a24:	f002 f89a 	bl	8019b5c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017a28:	2204      	movs	r2, #4
 8017a2a:	2100      	movs	r1, #0
 8017a2c:	2001      	movs	r0, #1
 8017a2e:	f001 fe5d 	bl	80196ec <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017a32:	2300      	movs	r3, #0
 8017a34:	2200      	movs	r2, #0
 8017a36:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017a3a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017a3e:	f001 fd8d 	bl	801955c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8017a42:	f000 fd4f 	bl	80184e4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017a46:	2300      	movs	r3, #0
 8017a48:	9300      	str	r3, [sp, #0]
 8017a4a:	4b10      	ldr	r3, [pc, #64]	@ (8017a8c <RadioInit+0xa8>)
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8017a52:	480f      	ldr	r0, [pc, #60]	@ (8017a90 <RadioInit+0xac>)
 8017a54:	f003 fab6 	bl	801afc4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017a58:	2300      	movs	r3, #0
 8017a5a:	9300      	str	r3, [sp, #0]
 8017a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8017a94 <RadioInit+0xb0>)
 8017a5e:	2200      	movs	r2, #0
 8017a60:	f04f 31ff 	mov.w	r1, #4294967295
 8017a64:	480c      	ldr	r0, [pc, #48]	@ (8017a98 <RadioInit+0xb4>)
 8017a66:	f003 faad 	bl	801afc4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017a6a:	4809      	ldr	r0, [pc, #36]	@ (8017a90 <RadioInit+0xac>)
 8017a6c:	f003 fb4e 	bl	801b10c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017a70:	4809      	ldr	r0, [pc, #36]	@ (8017a98 <RadioInit+0xb4>)
 8017a72:	f003 fb4b 	bl	801b10c <UTIL_TIMER_Stop>
}
 8017a76:	bf00      	nop
 8017a78:	3708      	adds	r7, #8
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}
 8017a7e:	bf00      	nop
 8017a80:	20001338 	.word	0x20001338
 8017a84:	2000133c 	.word	0x2000133c
 8017a88:	08018909 	.word	0x08018909
 8017a8c:	08018879 	.word	0x08018879
 8017a90:	20001398 	.word	0x20001398
 8017a94:	0801888d 	.word	0x0801888d
 8017a98:	200013b0 	.word	0x200013b0

08017a9c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017aa0:	f001 fa36 	bl	8018f10 <SUBGRF_GetOperatingMode>
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	2b07      	cmp	r3, #7
 8017aa8:	d00a      	beq.n	8017ac0 <RadioGetStatus+0x24>
 8017aaa:	2b07      	cmp	r3, #7
 8017aac:	dc0a      	bgt.n	8017ac4 <RadioGetStatus+0x28>
 8017aae:	2b04      	cmp	r3, #4
 8017ab0:	d002      	beq.n	8017ab8 <RadioGetStatus+0x1c>
 8017ab2:	2b05      	cmp	r3, #5
 8017ab4:	d002      	beq.n	8017abc <RadioGetStatus+0x20>
 8017ab6:	e005      	b.n	8017ac4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017ab8:	2302      	movs	r3, #2
 8017aba:	e004      	b.n	8017ac6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017abc:	2301      	movs	r3, #1
 8017abe:	e002      	b.n	8017ac6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017ac0:	2303      	movs	r3, #3
 8017ac2:	e000      	b.n	8017ac6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017ac4:	2300      	movs	r3, #0
    }
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	bd80      	pop	{r7, pc}
	...

08017acc <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b082      	sub	sp, #8
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8017b50 <RadioSetModem+0x84>)
 8017ad8:	79fb      	ldrb	r3, [r7, #7]
 8017ada:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017adc:	79fb      	ldrb	r3, [r7, #7]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f002 fc02 	bl	801a2e8 <RFW_SetRadioModem>
    switch( modem )
 8017ae4:	79fb      	ldrb	r3, [r7, #7]
 8017ae6:	2b03      	cmp	r3, #3
 8017ae8:	d026      	beq.n	8017b38 <RadioSetModem+0x6c>
 8017aea:	2b03      	cmp	r3, #3
 8017aec:	dc03      	bgt.n	8017af6 <RadioSetModem+0x2a>
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d008      	beq.n	8017b04 <RadioSetModem+0x38>
 8017af2:	2b01      	cmp	r3, #1
 8017af4:	d00d      	beq.n	8017b12 <RadioSetModem+0x46>
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017af6:	2003      	movs	r0, #3
 8017af8:	f001 fdd2 	bl	80196a0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017afc:	4b14      	ldr	r3, [pc, #80]	@ (8017b50 <RadioSetModem+0x84>)
 8017afe:	2200      	movs	r2, #0
 8017b00:	735a      	strb	r2, [r3, #13]
        break;
 8017b02:	e021      	b.n	8017b48 <RadioSetModem+0x7c>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017b04:	2000      	movs	r0, #0
 8017b06:	f001 fdcb 	bl	80196a0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017b0a:	4b11      	ldr	r3, [pc, #68]	@ (8017b50 <RadioSetModem+0x84>)
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	735a      	strb	r2, [r3, #13]
        break;
 8017b10:	e01a      	b.n	8017b48 <RadioSetModem+0x7c>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017b12:	2001      	movs	r0, #1
 8017b14:	f001 fdc4 	bl	80196a0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017b18:	4b0d      	ldr	r3, [pc, #52]	@ (8017b50 <RadioSetModem+0x84>)
 8017b1a:	7b5a      	ldrb	r2, [r3, #13]
 8017b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8017b50 <RadioSetModem+0x84>)
 8017b1e:	7b1b      	ldrb	r3, [r3, #12]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	d010      	beq.n	8017b46 <RadioSetModem+0x7a>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017b24:	4b0a      	ldr	r3, [pc, #40]	@ (8017b50 <RadioSetModem+0x84>)
 8017b26:	7b1a      	ldrb	r2, [r3, #12]
 8017b28:	4b09      	ldr	r3, [pc, #36]	@ (8017b50 <RadioSetModem+0x84>)
 8017b2a:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017b2c:	4b08      	ldr	r3, [pc, #32]	@ (8017b50 <RadioSetModem+0x84>)
 8017b2e:	7b5b      	ldrb	r3, [r3, #13]
 8017b30:	4618      	mov	r0, r3
 8017b32:	f000 fe6b 	bl	801880c <RadioSetPublicNetwork>
        }
        break;
 8017b36:	e006      	b.n	8017b46 <RadioSetModem+0x7a>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017b38:	2002      	movs	r0, #2
 8017b3a:	f001 fdb1 	bl	80196a0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017b3e:	4b04      	ldr	r3, [pc, #16]	@ (8017b50 <RadioSetModem+0x84>)
 8017b40:	2200      	movs	r2, #0
 8017b42:	735a      	strb	r2, [r3, #13]
        break;
 8017b44:	e000      	b.n	8017b48 <RadioSetModem+0x7c>
        break;
 8017b46:	bf00      	nop
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
        break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017b48:	bf00      	nop
 8017b4a:	3708      	adds	r7, #8
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	2000133c 	.word	0x2000133c

08017b54 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b082      	sub	sp, #8
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017b5c:	6878      	ldr	r0, [r7, #4]
 8017b5e:	f001 fd59 	bl	8019614 <SUBGRF_SetRfFrequency>
}
 8017b62:	bf00      	nop
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b090      	sub	sp, #64	@ 0x40
 8017b6e:	af0a      	add	r7, sp, #40	@ 0x28
 8017b70:	60f8      	str	r0, [r7, #12]
 8017b72:	60b9      	str	r1, [r7, #8]
 8017b74:	603b      	str	r3, [r7, #0]
 8017b76:	4613      	mov	r3, r2
 8017b78:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017b82:	2300      	movs	r3, #0
 8017b84:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8017b86:	f000 fcc0 	bl	801850a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017b8a:	2000      	movs	r0, #0
 8017b8c:	f7ff ff9e 	bl	8017acc <RadioSetModem>

    RadioSetChannel( freq );
 8017b90:	68f8      	ldr	r0, [r7, #12]
 8017b92:	f7ff ffdf 	bl	8017b54 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017b96:	2301      	movs	r3, #1
 8017b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	9308      	str	r3, [sp, #32]
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	9307      	str	r3, [sp, #28]
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	9306      	str	r3, [sp, #24]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	9305      	str	r3, [sp, #20]
 8017baa:	2300      	movs	r3, #0
 8017bac:	9304      	str	r3, [sp, #16]
 8017bae:	2300      	movs	r3, #0
 8017bb0:	9303      	str	r3, [sp, #12]
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	9302      	str	r3, [sp, #8]
 8017bb6:	2303      	movs	r3, #3
 8017bb8:	9301      	str	r3, [sp, #4]
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	9300      	str	r3, [sp, #0]
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017bc4:	68b9      	ldr	r1, [r7, #8]
 8017bc6:	2000      	movs	r0, #0
 8017bc8:	f000 f83c 	bl	8017c44 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017bcc:	2000      	movs	r0, #0
 8017bce:	f000 fca3 	bl	8018518 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017bd2:	f000 fe49 	bl	8018868 <RadioGetWakeupTime>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7e9 fe59 	bl	8001890 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017bde:	f003 fb2f 	bl	801b240 <UTIL_TIMER_GetCurrentTime>
 8017be2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017be4:	e00d      	b.n	8017c02 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017be6:	2000      	movs	r0, #0
 8017be8:	f000 fd90 	bl	801870c <RadioRssi>
 8017bec:	4603      	mov	r3, r0
 8017bee:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017bf0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	dd02      	ble.n	8017c02 <RadioIsChannelFree+0x98>
        {
            status = false;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	75fb      	strb	r3, [r7, #23]
            break;
 8017c00:	e006      	b.n	8017c10 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017c02:	6938      	ldr	r0, [r7, #16]
 8017c04:	f003 fb2e 	bl	801b264 <UTIL_TIMER_GetElapsedTime>
 8017c08:	4602      	mov	r2, r0
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	4293      	cmp	r3, r2
 8017c0e:	d8ea      	bhi.n	8017be6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8017c10:	f000 fc7b 	bl	801850a <RadioStandby>

    return status;
 8017c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c16:	4618      	mov	r0, r3
 8017c18:	3718      	adds	r7, #24
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	bd80      	pop	{r7, pc}

08017c1e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017c1e:	b580      	push	{r7, lr}
 8017c20:	b082      	sub	sp, #8
 8017c22:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017c24:	2300      	movs	r3, #0
 8017c26:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017c28:	2300      	movs	r3, #0
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	2000      	movs	r0, #0
 8017c30:	f001 fc94 	bl	801955c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017c34:	f001 fa3d 	bl	80190b2 <SUBGRF_GetRandom>
 8017c38:	6078      	str	r0, [r7, #4]

    return rnd;
 8017c3a:	687b      	ldr	r3, [r7, #4]
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3708      	adds	r7, #8
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b086      	sub	sp, #24
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	60b9      	str	r1, [r7, #8]
 8017c4c:	607a      	str	r2, [r7, #4]
 8017c4e:	461a      	mov	r2, r3
 8017c50:	4603      	mov	r3, r0
 8017c52:	73fb      	strb	r3, [r7, #15]
 8017c54:	4613      	mov	r3, r2
 8017c56:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017c58:	4a93      	ldr	r2, [pc, #588]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017c5a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017c5e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8017c60:	f002 fb00 	bl	801a264 <RFW_DeInit>
    if( rxContinuous == true )
 8017c64:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d001      	beq.n	8017c70 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
    if( fixLen == true )
 8017c70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d004      	beq.n	8017c82 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017c78:	4a8c      	ldr	r2, [pc, #560]	@ (8017eac <RadioSetRxConfig+0x268>)
 8017c7a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017c7e:	7013      	strb	r3, [r2, #0]
 8017c80:	e002      	b.n	8017c88 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017c82:	4b8a      	ldr	r3, [pc, #552]	@ (8017eac <RadioSetRxConfig+0x268>)
 8017c84:	22ff      	movs	r2, #255	@ 0xff
 8017c86:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017c88:	7bfb      	ldrb	r3, [r7, #15]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d002      	beq.n	8017c94 <RadioSetRxConfig+0x50>
 8017c8e:	2b01      	cmp	r3, #1
 8017c90:	d068      	beq.n	8017d64 <RadioSetRxConfig+0x120>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017c92:	e105      	b.n	8017ea0 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017c94:	2000      	movs	r0, #0
 8017c96:	f001 fb53 	bl	8019340 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017c9a:	4b83      	ldr	r3, [pc, #524]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017ca2:	4a81      	ldr	r2, [pc, #516]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017ca8:	4b7f      	ldr	r3, [pc, #508]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017caa:	220b      	movs	r2, #11
 8017cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017cb0:	68b8      	ldr	r0, [r7, #8]
 8017cb2:	f002 fa17 	bl	801a0e4 <SUBGRF_GetFskBandwidthRegValue>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	461a      	mov	r2, r3
 8017cba:	4b7b      	ldr	r3, [pc, #492]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017cc0:	4b79      	ldr	r3, [pc, #484]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017cc8:	00db      	lsls	r3, r3, #3
 8017cca:	b29a      	uxth	r2, r3
 8017ccc:	4b76      	ldr	r3, [pc, #472]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017cd0:	4b75      	ldr	r3, [pc, #468]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cd2:	2204      	movs	r2, #4
 8017cd4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017cd6:	4b74      	ldr	r3, [pc, #464]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cd8:	2218      	movs	r2, #24
 8017cda:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017cdc:	4b72      	ldr	r3, [pc, #456]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cde:	2200      	movs	r2, #0
 8017ce0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017ce2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017ce6:	f083 0301 	eor.w	r3, r3, #1
 8017cea:	b2db      	uxtb	r3, r3
 8017cec:	461a      	mov	r2, r3
 8017cee:	4b6e      	ldr	r3, [pc, #440]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cf0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8017eac <RadioSetRxConfig+0x268>)
 8017cf4:	781a      	ldrb	r2, [r3, #0]
 8017cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017cf8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017cfa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d003      	beq.n	8017d0a <RadioSetRxConfig+0xc6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017d02:	4b69      	ldr	r3, [pc, #420]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d04:	22f2      	movs	r2, #242	@ 0xf2
 8017d06:	75da      	strb	r2, [r3, #23]
 8017d08:	e002      	b.n	8017d10 <RadioSetRxConfig+0xcc>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017d0a:	4b67      	ldr	r3, [pc, #412]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d0c:	2201      	movs	r2, #1
 8017d0e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017d10:	4b65      	ldr	r3, [pc, #404]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d12:	2201      	movs	r2, #1
 8017d14:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017d16:	f000 fbf8 	bl	801850a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017d1a:	2000      	movs	r0, #0
 8017d1c:	f7ff fed6 	bl	8017acc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017d20:	4863      	ldr	r0, [pc, #396]	@ (8017eb0 <RadioSetRxConfig+0x26c>)
 8017d22:	f001 fdb1 	bl	8019888 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017d26:	4863      	ldr	r0, [pc, #396]	@ (8017eb4 <RadioSetRxConfig+0x270>)
 8017d28:	f001 fe7c 	bl	8019a24 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017d2c:	4a62      	ldr	r2, [pc, #392]	@ (8017eb8 <RadioSetRxConfig+0x274>)
 8017d2e:	f107 0310 	add.w	r3, r7, #16
 8017d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d36:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d3a:	f107 0310 	add.w	r3, r7, #16
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f001 f935 	bl	8018fae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017d44:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017d48:	f001 f980 	bl	801904c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017d4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017d4e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017d52:	fb02 f303 	mul.w	r3, r2, r3
 8017d56:	461a      	mov	r2, r3
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d5e:	4a52      	ldr	r2, [pc, #328]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d60:	6093      	str	r3, [r2, #8]
            break;
 8017d62:	e09d      	b.n	8017ea0 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017d64:	2000      	movs	r0, #0
 8017d66:	f001 faeb 	bl	8019340 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	b2da      	uxtb	r2, r3
 8017d76:	4b4c      	ldr	r3, [pc, #304]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8017ebc <RadioSetRxConfig+0x278>)
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	4413      	add	r3, r2
 8017d82:	781a      	ldrb	r2, [r3, #0]
 8017d84:	4b48      	ldr	r3, [pc, #288]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017d8a:	4a47      	ldr	r2, [pc, #284]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017d8c:	7bbb      	ldrb	r3, [r7, #14]
 8017d8e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d105      	bne.n	8017da4 <RadioSetRxConfig+0x160>
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	2b0b      	cmp	r3, #11
 8017d9c:	d008      	beq.n	8017db0 <RadioSetRxConfig+0x16c>
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2b0c      	cmp	r3, #12
 8017da2:	d005      	beq.n	8017db0 <RadioSetRxConfig+0x16c>
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	2b01      	cmp	r3, #1
 8017da8:	d107      	bne.n	8017dba <RadioSetRxConfig+0x176>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2b0c      	cmp	r3, #12
 8017dae:	d104      	bne.n	8017dba <RadioSetRxConfig+0x176>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017db0:	4b3d      	ldr	r3, [pc, #244]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017db2:	2201      	movs	r2, #1
 8017db4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017db8:	e003      	b.n	8017dc2 <RadioSetRxConfig+0x17e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017dba:	4b3b      	ldr	r3, [pc, #236]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017dc2:	4b39      	ldr	r3, [pc, #228]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017dc4:	2201      	movs	r2, #1
 8017dc6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017dc8:	4b37      	ldr	r3, [pc, #220]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017dca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017dce:	2b05      	cmp	r3, #5
 8017dd0:	d004      	beq.n	8017ddc <RadioSetRxConfig+0x198>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017dd2:	4b35      	ldr	r3, [pc, #212]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017dd8:	2b06      	cmp	r3, #6
 8017dda:	d10a      	bne.n	8017df2 <RadioSetRxConfig+0x1ae>
                if( preambleLen < 12 )
 8017ddc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dde:	2b0b      	cmp	r3, #11
 8017de0:	d803      	bhi.n	8017dea <RadioSetRxConfig+0x1a6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017de2:	4b31      	ldr	r3, [pc, #196]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017de4:	220c      	movs	r2, #12
 8017de6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017de8:	e006      	b.n	8017df8 <RadioSetRxConfig+0x1b4>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017dea:	4a2f      	ldr	r2, [pc, #188]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017dec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dee:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017df0:	e002      	b.n	8017df8 <RadioSetRxConfig+0x1b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017df2:	4a2d      	ldr	r2, [pc, #180]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017df4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017df6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017df8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017dfe:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017e00:	4b2a      	ldr	r3, [pc, #168]	@ (8017eac <RadioSetRxConfig+0x268>)
 8017e02:	781a      	ldrb	r2, [r3, #0]
 8017e04:	4b28      	ldr	r3, [pc, #160]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017e06:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017e08:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8017e0c:	4b26      	ldr	r3, [pc, #152]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017e0e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017e12:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8017e16:	4b24      	ldr	r3, [pc, #144]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017e18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017e1c:	f000 fb75 	bl	801850a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017e20:	2001      	movs	r0, #1
 8017e22:	f7ff fe53 	bl	8017acc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e26:	4822      	ldr	r0, [pc, #136]	@ (8017eb0 <RadioSetRxConfig+0x26c>)
 8017e28:	f001 fd2e 	bl	8019888 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e2c:	4821      	ldr	r0, [pc, #132]	@ (8017eb4 <RadioSetRxConfig+0x270>)
 8017e2e:	f001 fdf9 	bl	8019a24 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017e32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	4618      	mov	r0, r3
 8017e38:	f001 fa91 	bl	801935e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8017e3c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017e40:	f001 ff4a 	bl	8019cd8 <SUBGRF_ReadRegister>
 8017e44:	4603      	mov	r3, r0
 8017e46:	f003 0301 	and.w	r3, r3, #1
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	4619      	mov	r1, r3
 8017e4e:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017e52:	f001 ff2d 	bl	8019cb0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017e56:	4b14      	ldr	r3, [pc, #80]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017e58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017e5c:	2b01      	cmp	r3, #1
 8017e5e:	d10d      	bne.n	8017e7c <RadioSetRxConfig+0x238>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017e60:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e64:	f001 ff38 	bl	8019cd8 <SUBGRF_ReadRegister>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	f023 0304 	bic.w	r3, r3, #4
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	4619      	mov	r1, r3
 8017e72:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e76:	f001 ff1b 	bl	8019cb0 <SUBGRF_WriteRegister>
 8017e7a:	e00c      	b.n	8017e96 <RadioSetRxConfig+0x252>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017e7c:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e80:	f001 ff2a 	bl	8019cd8 <SUBGRF_ReadRegister>
 8017e84:	4603      	mov	r3, r0
 8017e86:	f043 0304 	orr.w	r3, r3, #4
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	4619      	mov	r1, r3
 8017e8e:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e92:	f001 ff0d 	bl	8019cb0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017e96:	4b04      	ldr	r3, [pc, #16]	@ (8017ea8 <RadioSetRxConfig+0x264>)
 8017e98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e9c:	609a      	str	r2, [r3, #8]
            break;
 8017e9e:	bf00      	nop
    }
}
 8017ea0:	bf00      	nop
 8017ea2:	3718      	adds	r7, #24
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	bd80      	pop	{r7, pc}
 8017ea8:	2000133c 	.word	0x2000133c
 8017eac:	200000d8 	.word	0x200000d8
 8017eb0:	20001374 	.word	0x20001374
 8017eb4:	2000134a 	.word	0x2000134a
 8017eb8:	0802182c 	.word	0x0802182c
 8017ebc:	08022018 	.word	0x08022018

08017ec0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b086      	sub	sp, #24
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60ba      	str	r2, [r7, #8]
 8017ec8:	607b      	str	r3, [r7, #4]
 8017eca:	4603      	mov	r3, r0
 8017ecc:	73fb      	strb	r3, [r7, #15]
 8017ece:	460b      	mov	r3, r1
 8017ed0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8017ed2:	f002 f9c7 	bl	801a264 <RFW_DeInit>
    switch( modem )
 8017ed6:	7bfb      	ldrb	r3, [r7, #15]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d002      	beq.n	8017ee2 <RadioSetTxConfig+0x22>
 8017edc:	2b01      	cmp	r3, #1
 8017ede:	d059      	beq.n	8017f94 <RadioSetTxConfig+0xd4>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017ee0:	e0be      	b.n	8018060 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017eea:	4a6b      	ldr	r2, [pc, #428]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017eec:	6a3b      	ldr	r3, [r7, #32]
 8017eee:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017ef0:	4b69      	ldr	r3, [pc, #420]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017ef2:	220b      	movs	r2, #11
 8017ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f002 f8f3 	bl	801a0e4 <SUBGRF_GetFskBandwidthRegValue>
 8017efe:	4603      	mov	r3, r0
 8017f00:	461a      	mov	r2, r3
 8017f02:	4b65      	ldr	r3, [pc, #404]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017f08:	4a63      	ldr	r2, [pc, #396]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f0a:	68bb      	ldr	r3, [r7, #8]
 8017f0c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017f0e:	4b62      	ldr	r3, [pc, #392]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f10:	2200      	movs	r2, #0
 8017f12:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017f14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f1c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f20:	2204      	movs	r2, #4
 8017f22:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017f24:	4b5c      	ldr	r3, [pc, #368]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f26:	2218      	movs	r2, #24
 8017f28:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017f30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017f34:	f083 0301 	eor.w	r3, r3, #1
 8017f38:	b2db      	uxtb	r3, r3
 8017f3a:	461a      	mov	r2, r3
 8017f3c:	4b56      	ldr	r3, [pc, #344]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f3e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017f40:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d003      	beq.n	8017f50 <RadioSetTxConfig+0x90>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017f48:	4b53      	ldr	r3, [pc, #332]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f4a:	22f2      	movs	r2, #242	@ 0xf2
 8017f4c:	75da      	strb	r2, [r3, #23]
 8017f4e:	e002      	b.n	8017f56 <RadioSetTxConfig+0x96>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017f50:	4b51      	ldr	r3, [pc, #324]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f52:	2201      	movs	r2, #1
 8017f54:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017f56:	4b50      	ldr	r3, [pc, #320]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f58:	2201      	movs	r2, #1
 8017f5a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017f5c:	f000 fad5 	bl	801850a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017f60:	2000      	movs	r0, #0
 8017f62:	f7ff fdb3 	bl	8017acc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017f66:	484d      	ldr	r0, [pc, #308]	@ (801809c <RadioSetTxConfig+0x1dc>)
 8017f68:	f001 fc8e 	bl	8019888 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f6c:	484c      	ldr	r0, [pc, #304]	@ (80180a0 <RadioSetTxConfig+0x1e0>)
 8017f6e:	f001 fd59 	bl	8019a24 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017f72:	4a4c      	ldr	r2, [pc, #304]	@ (80180a4 <RadioSetTxConfig+0x1e4>)
 8017f74:	f107 0310 	add.w	r3, r7, #16
 8017f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f80:	f107 0310 	add.w	r3, r7, #16
 8017f84:	4618      	mov	r0, r3
 8017f86:	f001 f812 	bl	8018fae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017f8a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017f8e:	f001 f85d 	bl	801904c <SUBGRF_SetWhiteningSeed>
            break;
 8017f92:	e065      	b.n	8018060 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017f94:	4b40      	ldr	r3, [pc, #256]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017f96:	2201      	movs	r2, #1
 8017f98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017f9c:	6a3b      	ldr	r3, [r7, #32]
 8017f9e:	b2da      	uxtb	r2, r3
 8017fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017fa6:	4a40      	ldr	r2, [pc, #256]	@ (80180a8 <RadioSetTxConfig+0x1e8>)
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	4413      	add	r3, r2
 8017fac:	781a      	ldrb	r2, [r3, #0]
 8017fae:	4b3a      	ldr	r3, [pc, #232]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017fb4:	4a38      	ldr	r2, [pc, #224]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017fb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017fba:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d105      	bne.n	8017fd0 <RadioSetTxConfig+0x110>
 8017fc4:	6a3b      	ldr	r3, [r7, #32]
 8017fc6:	2b0b      	cmp	r3, #11
 8017fc8:	d008      	beq.n	8017fdc <RadioSetTxConfig+0x11c>
 8017fca:	6a3b      	ldr	r3, [r7, #32]
 8017fcc:	2b0c      	cmp	r3, #12
 8017fce:	d005      	beq.n	8017fdc <RadioSetTxConfig+0x11c>
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d107      	bne.n	8017fe6 <RadioSetTxConfig+0x126>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017fd6:	6a3b      	ldr	r3, [r7, #32]
 8017fd8:	2b0c      	cmp	r3, #12
 8017fda:	d104      	bne.n	8017fe6 <RadioSetTxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017fde:	2201      	movs	r2, #1
 8017fe0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017fe4:	e003      	b.n	8017fee <RadioSetTxConfig+0x12e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017fe8:	2200      	movs	r2, #0
 8017fea:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017fee:	4b2a      	ldr	r3, [pc, #168]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017ff0:	2201      	movs	r2, #1
 8017ff2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017ff4:	4b28      	ldr	r3, [pc, #160]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8017ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017ffa:	2b05      	cmp	r3, #5
 8017ffc:	d004      	beq.n	8018008 <RadioSetTxConfig+0x148>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017ffe:	4b26      	ldr	r3, [pc, #152]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018000:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018004:	2b06      	cmp	r3, #6
 8018006:	d10a      	bne.n	801801e <RadioSetTxConfig+0x15e>
                if( preambleLen < 12 )
 8018008:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801800a:	2b0b      	cmp	r3, #11
 801800c:	d803      	bhi.n	8018016 <RadioSetTxConfig+0x156>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801800e:	4b22      	ldr	r3, [pc, #136]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018010:	220c      	movs	r2, #12
 8018012:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018014:	e006      	b.n	8018024 <RadioSetTxConfig+0x164>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018016:	4a20      	ldr	r2, [pc, #128]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018018:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801801a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801801c:	e002      	b.n	8018024 <RadioSetTxConfig+0x164>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801801e:	4a1e      	ldr	r2, [pc, #120]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018020:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018022:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018024:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018028:	4b1b      	ldr	r3, [pc, #108]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 801802a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801802c:	4b1f      	ldr	r3, [pc, #124]	@ (80180ac <RadioSetTxConfig+0x1ec>)
 801802e:	781a      	ldrb	r2, [r3, #0]
 8018030:	4b19      	ldr	r3, [pc, #100]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018032:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018034:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018038:	4b17      	ldr	r3, [pc, #92]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 801803a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801803e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018042:	4b15      	ldr	r3, [pc, #84]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018048:	f000 fa5f 	bl	801850a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801804c:	2001      	movs	r0, #1
 801804e:	f7ff fd3d 	bl	8017acc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018052:	4812      	ldr	r0, [pc, #72]	@ (801809c <RadioSetTxConfig+0x1dc>)
 8018054:	f001 fc18 	bl	8019888 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018058:	4811      	ldr	r0, [pc, #68]	@ (80180a0 <RadioSetTxConfig+0x1e0>)
 801805a:	f001 fce3 	bl	8019a24 <SUBGRF_SetPacketParams>
            break;
 801805e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018064:	4618      	mov	r0, r3
 8018066:	f001 ff3f 	bl	8019ee8 <SUBGRF_SetRfTxPower>
 801806a:	4603      	mov	r3, r0
 801806c:	461a      	mov	r2, r3
 801806e:	4b0a      	ldr	r3, [pc, #40]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018070:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018074:	210e      	movs	r1, #14
 8018076:	f640 101f 	movw	r0, #2335	@ 0x91f
 801807a:	f001 fe19 	bl	8019cb0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801807e:	4b06      	ldr	r3, [pc, #24]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 8018080:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018084:	4618      	mov	r0, r3
 8018086:	f002 f901 	bl	801a28c <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801808a:	4a03      	ldr	r2, [pc, #12]	@ (8018098 <RadioSetTxConfig+0x1d8>)
 801808c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801808e:	6053      	str	r3, [r2, #4]
}
 8018090:	bf00      	nop
 8018092:	3718      	adds	r7, #24
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	2000133c 	.word	0x2000133c
 801809c:	20001374 	.word	0x20001374
 80180a0:	2000134a 	.word	0x2000134a
 80180a4:	0802182c 	.word	0x0802182c
 80180a8:	08022018 	.word	0x08022018
 80180ac:	200000d8 	.word	0x200000d8

080180b0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80180b0:	b480      	push	{r7}
 80180b2:	b083      	sub	sp, #12
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
    return true;
 80180b8:	2301      	movs	r3, #1
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	370c      	adds	r7, #12
 80180be:	46bd      	mov	sp, r7
 80180c0:	bc80      	pop	{r7}
 80180c2:	4770      	bx	lr

080180c4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80180c4:	b480      	push	{r7}
 80180c6:	b085      	sub	sp, #20
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	4603      	mov	r3, r0
 80180cc:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80180ce:	2300      	movs	r3, #0
 80180d0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80180d2:	79fb      	ldrb	r3, [r7, #7]
 80180d4:	2b0a      	cmp	r3, #10
 80180d6:	d83e      	bhi.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
 80180d8:	a201      	add	r2, pc, #4	@ (adr r2, 80180e0 <RadioGetLoRaBandwidthInHz+0x1c>)
 80180da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180de:	bf00      	nop
 80180e0:	0801810d 	.word	0x0801810d
 80180e4:	0801811d 	.word	0x0801811d
 80180e8:	0801812d 	.word	0x0801812d
 80180ec:	0801813d 	.word	0x0801813d
 80180f0:	08018145 	.word	0x08018145
 80180f4:	0801814b 	.word	0x0801814b
 80180f8:	08018151 	.word	0x08018151
 80180fc:	08018157 	.word	0x08018157
 8018100:	08018115 	.word	0x08018115
 8018104:	08018125 	.word	0x08018125
 8018108:	08018135 	.word	0x08018135
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801810c:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018110:	60fb      	str	r3, [r7, #12]
        break;
 8018112:	e020      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018114:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018118:	60fb      	str	r3, [r7, #12]
        break;
 801811a:	e01c      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801811c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018120:	60fb      	str	r3, [r7, #12]
        break;
 8018122:	e018      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018124:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018128:	60fb      	str	r3, [r7, #12]
        break;
 801812a:	e014      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801812c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018130:	60fb      	str	r3, [r7, #12]
        break;
 8018132:	e010      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018134:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018138:	60fb      	str	r3, [r7, #12]
        break;
 801813a:	e00c      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801813c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018140:	60fb      	str	r3, [r7, #12]
        break;
 8018142:	e008      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018144:	4b07      	ldr	r3, [pc, #28]	@ (8018164 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018146:	60fb      	str	r3, [r7, #12]
        break;
 8018148:	e005      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801814a:	4b07      	ldr	r3, [pc, #28]	@ (8018168 <RadioGetLoRaBandwidthInHz+0xa4>)
 801814c:	60fb      	str	r3, [r7, #12]
        break;
 801814e:	e002      	b.n	8018156 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018150:	4b06      	ldr	r3, [pc, #24]	@ (801816c <RadioGetLoRaBandwidthInHz+0xa8>)
 8018152:	60fb      	str	r3, [r7, #12]
        break;
 8018154:	bf00      	nop
    }

    return bandwidthInHz;
 8018156:	68fb      	ldr	r3, [r7, #12]
}
 8018158:	4618      	mov	r0, r3
 801815a:	3714      	adds	r7, #20
 801815c:	46bd      	mov	sp, r7
 801815e:	bc80      	pop	{r7}
 8018160:	4770      	bx	lr
 8018162:	bf00      	nop
 8018164:	0001e848 	.word	0x0001e848
 8018168:	0003d090 	.word	0x0003d090
 801816c:	0007a120 	.word	0x0007a120

08018170 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018170:	b480      	push	{r7}
 8018172:	b083      	sub	sp, #12
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	4608      	mov	r0, r1
 801817a:	4611      	mov	r1, r2
 801817c:	461a      	mov	r2, r3
 801817e:	4603      	mov	r3, r0
 8018180:	70fb      	strb	r3, [r7, #3]
 8018182:	460b      	mov	r3, r1
 8018184:	803b      	strh	r3, [r7, #0]
 8018186:	4613      	mov	r3, r2
 8018188:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801818a:	883b      	ldrh	r3, [r7, #0]
 801818c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801818e:	78ba      	ldrb	r2, [r7, #2]
 8018190:	f082 0201 	eor.w	r2, r2, #1
 8018194:	b2d2      	uxtb	r2, r2
 8018196:	2a00      	cmp	r2, #0
 8018198:	d001      	beq.n	801819e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801819a:	2208      	movs	r2, #8
 801819c:	e000      	b.n	80181a0 <RadioGetGfskTimeOnAirNumerator+0x30>
 801819e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80181a0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80181a2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80181a6:	7c3b      	ldrb	r3, [r7, #16]
 80181a8:	7d39      	ldrb	r1, [r7, #20]
 80181aa:	2900      	cmp	r1, #0
 80181ac:	d001      	beq.n	80181b2 <RadioGetGfskTimeOnAirNumerator+0x42>
 80181ae:	2102      	movs	r1, #2
 80181b0:	e000      	b.n	80181b4 <RadioGetGfskTimeOnAirNumerator+0x44>
 80181b2:	2100      	movs	r1, #0
 80181b4:	440b      	add	r3, r1
 80181b6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80181b8:	4413      	add	r3, r2
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	370c      	adds	r7, #12
 80181be:	46bd      	mov	sp, r7
 80181c0:	bc80      	pop	{r7}
 80181c2:	4770      	bx	lr

080181c4 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80181c4:	b480      	push	{r7}
 80181c6:	b08b      	sub	sp, #44	@ 0x2c
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	60f8      	str	r0, [r7, #12]
 80181cc:	60b9      	str	r1, [r7, #8]
 80181ce:	4611      	mov	r1, r2
 80181d0:	461a      	mov	r2, r3
 80181d2:	460b      	mov	r3, r1
 80181d4:	71fb      	strb	r3, [r7, #7]
 80181d6:	4613      	mov	r3, r2
 80181d8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80181da:	79fb      	ldrb	r3, [r7, #7]
 80181dc:	3304      	adds	r3, #4
 80181de:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80181e0:	2300      	movs	r3, #0
 80181e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	2b05      	cmp	r3, #5
 80181ea:	d002      	beq.n	80181f2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80181ec:	68bb      	ldr	r3, [r7, #8]
 80181ee:	2b06      	cmp	r3, #6
 80181f0:	d104      	bne.n	80181fc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80181f2:	88bb      	ldrh	r3, [r7, #4]
 80181f4:	2b0b      	cmp	r3, #11
 80181f6:	d801      	bhi.n	80181fc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80181f8:	230c      	movs	r3, #12
 80181fa:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d105      	bne.n	801820e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	2b0b      	cmp	r3, #11
 8018206:	d008      	beq.n	801821a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	2b0c      	cmp	r3, #12
 801820c:	d005      	beq.n	801821a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	2b01      	cmp	r3, #1
 8018212:	d105      	bne.n	8018220 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018214:	68bb      	ldr	r3, [r7, #8]
 8018216:	2b0c      	cmp	r3, #12
 8018218:	d102      	bne.n	8018220 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801821a:	2301      	movs	r3, #1
 801821c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018220:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018224:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018226:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801822a:	2a00      	cmp	r2, #0
 801822c:	d001      	beq.n	8018232 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801822e:	2210      	movs	r2, #16
 8018230:	e000      	b.n	8018234 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018232:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018234:	4413      	add	r3, r2
 8018236:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801823c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801823e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018242:	2a00      	cmp	r2, #0
 8018244:	d001      	beq.n	801824a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018246:	2200      	movs	r2, #0
 8018248:	e000      	b.n	801824c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801824a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801824c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801824e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018250:	68bb      	ldr	r3, [r7, #8]
 8018252:	2b06      	cmp	r3, #6
 8018254:	d803      	bhi.n	801825e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	009b      	lsls	r3, r3, #2
 801825a:	623b      	str	r3, [r7, #32]
 801825c:	e00e      	b.n	801827c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801825e:	69fb      	ldr	r3, [r7, #28]
 8018260:	3308      	adds	r3, #8
 8018262:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018268:	2b00      	cmp	r3, #0
 801826a:	d004      	beq.n	8018276 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	3b02      	subs	r3, #2
 8018270:	009b      	lsls	r3, r3, #2
 8018272:	623b      	str	r3, [r7, #32]
 8018274:	e002      	b.n	801827c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	009b      	lsls	r3, r3, #2
 801827a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801827c:	69fb      	ldr	r3, [r7, #28]
 801827e:	2b00      	cmp	r3, #0
 8018280:	da01      	bge.n	8018286 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018282:	2300      	movs	r3, #0
 8018284:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018286:	69fa      	ldr	r2, [r7, #28]
 8018288:	6a3b      	ldr	r3, [r7, #32]
 801828a:	4413      	add	r3, r2
 801828c:	1e5a      	subs	r2, r3, #1
 801828e:	6a3b      	ldr	r3, [r7, #32]
 8018290:	fb92 f3f3 	sdiv	r3, r2, r3
 8018294:	697a      	ldr	r2, [r7, #20]
 8018296:	fb03 f202 	mul.w	r2, r3, r2
 801829a:	88bb      	ldrh	r3, [r7, #4]
 801829c:	4413      	add	r3, r2
    int32_t intermediate =
 801829e:	330c      	adds	r3, #12
 80182a0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	2b06      	cmp	r3, #6
 80182a6:	d802      	bhi.n	80182ae <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80182a8:	69bb      	ldr	r3, [r7, #24]
 80182aa:	3302      	adds	r3, #2
 80182ac:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80182ae:	69bb      	ldr	r3, [r7, #24]
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	1c5a      	adds	r2, r3, #1
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	3b02      	subs	r3, #2
 80182b8:	fa02 f303 	lsl.w	r3, r2, r3
}
 80182bc:	4618      	mov	r0, r3
 80182be:	372c      	adds	r7, #44	@ 0x2c
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bc80      	pop	{r7}
 80182c4:	4770      	bx	lr
	...

080182c8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b08a      	sub	sp, #40	@ 0x28
 80182cc:	af04      	add	r7, sp, #16
 80182ce:	60b9      	str	r1, [r7, #8]
 80182d0:	607a      	str	r2, [r7, #4]
 80182d2:	461a      	mov	r2, r3
 80182d4:	4603      	mov	r3, r0
 80182d6:	73fb      	strb	r3, [r7, #15]
 80182d8:	4613      	mov	r3, r2
 80182da:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80182dc:	2300      	movs	r3, #0
 80182de:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80182e0:	2301      	movs	r3, #1
 80182e2:	613b      	str	r3, [r7, #16]

    switch( modem )
 80182e4:	7bfb      	ldrb	r3, [r7, #15]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d002      	beq.n	80182f0 <RadioTimeOnAir+0x28>
 80182ea:	2b01      	cmp	r3, #1
 80182ec:	d017      	beq.n	801831e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80182ee:	e035      	b.n	801835c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80182f0:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80182f4:	8c3a      	ldrh	r2, [r7, #32]
 80182f6:	7bb9      	ldrb	r1, [r7, #14]
 80182f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80182fc:	9301      	str	r3, [sp, #4]
 80182fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	4603      	mov	r3, r0
 8018306:	6878      	ldr	r0, [r7, #4]
 8018308:	f7ff ff32 	bl	8018170 <RadioGetGfskTimeOnAirNumerator>
 801830c:	4603      	mov	r3, r0
 801830e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018312:	fb02 f303 	mul.w	r3, r2, r3
 8018316:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	613b      	str	r3, [r7, #16]
        break;
 801831c:	e01e      	b.n	801835c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801831e:	8c39      	ldrh	r1, [r7, #32]
 8018320:	7bba      	ldrb	r2, [r7, #14]
 8018322:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018326:	9302      	str	r3, [sp, #8]
 8018328:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801832c:	9301      	str	r3, [sp, #4]
 801832e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018332:	9300      	str	r3, [sp, #0]
 8018334:	460b      	mov	r3, r1
 8018336:	6879      	ldr	r1, [r7, #4]
 8018338:	68b8      	ldr	r0, [r7, #8]
 801833a:	f7ff ff43 	bl	80181c4 <RadioGetLoRaTimeOnAirNumerator>
 801833e:	4603      	mov	r3, r0
 8018340:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018344:	fb02 f303 	mul.w	r3, r2, r3
 8018348:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801834a:	4a0a      	ldr	r2, [pc, #40]	@ (8018374 <RadioTimeOnAir+0xac>)
 801834c:	68bb      	ldr	r3, [r7, #8]
 801834e:	4413      	add	r3, r2
 8018350:	781b      	ldrb	r3, [r3, #0]
 8018352:	4618      	mov	r0, r3
 8018354:	f7ff feb6 	bl	80180c4 <RadioGetLoRaBandwidthInHz>
 8018358:	6138      	str	r0, [r7, #16]
        break;
 801835a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801835c:	697a      	ldr	r2, [r7, #20]
 801835e:	693b      	ldr	r3, [r7, #16]
 8018360:	4413      	add	r3, r2
 8018362:	1e5a      	subs	r2, r3, #1
 8018364:	693b      	ldr	r3, [r7, #16]
 8018366:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801836a:	4618      	mov	r0, r3
 801836c:	3718      	adds	r7, #24
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	08022018 	.word	0x08022018

08018378 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b084      	sub	sp, #16
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	460b      	mov	r3, r1
 8018382:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018384:	2300      	movs	r3, #0
 8018386:	2200      	movs	r2, #0
 8018388:	f240 2101 	movw	r1, #513	@ 0x201
 801838c:	f240 2001 	movw	r0, #513	@ 0x201
 8018390:	f001 f8e4 	bl	801955c <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8018394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8018398:	484d      	ldr	r0, [pc, #308]	@ (80184d0 <RadioSend+0x158>)
 801839a:	f7ff fb09 	bl	80179b0 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801839e:	4b4d      	ldr	r3, [pc, #308]	@ (80184d4 <RadioSend+0x15c>)
 80183a0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80183a4:	2101      	movs	r1, #1
 80183a6:	4618      	mov	r0, r3
 80183a8:	f001 fd76 	bl	8019e98 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80183ac:	4b49      	ldr	r3, [pc, #292]	@ (80184d4 <RadioSend+0x15c>)
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	2b01      	cmp	r3, #1
 80183b2:	d112      	bne.n	80183da <RadioSend+0x62>
 80183b4:	4b47      	ldr	r3, [pc, #284]	@ (80184d4 <RadioSend+0x15c>)
 80183b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80183ba:	2b06      	cmp	r3, #6
 80183bc:	d10d      	bne.n	80183da <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80183be:	f640 0089 	movw	r0, #2185	@ 0x889
 80183c2:	f001 fc89 	bl	8019cd8 <SUBGRF_ReadRegister>
 80183c6:	4603      	mov	r3, r0
 80183c8:	f023 0304 	bic.w	r3, r3, #4
 80183cc:	b2db      	uxtb	r3, r3
 80183ce:	4619      	mov	r1, r3
 80183d0:	f640 0089 	movw	r0, #2185	@ 0x889
 80183d4:	f001 fc6c 	bl	8019cb0 <SUBGRF_WriteRegister>
 80183d8:	e00c      	b.n	80183f4 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80183da:	f640 0089 	movw	r0, #2185	@ 0x889
 80183de:	f001 fc7b 	bl	8019cd8 <SUBGRF_ReadRegister>
 80183e2:	4603      	mov	r3, r0
 80183e4:	f043 0304 	orr.w	r3, r3, #4
 80183e8:	b2db      	uxtb	r3, r3
 80183ea:	4619      	mov	r1, r3
 80183ec:	f640 0089 	movw	r0, #2185	@ 0x889
 80183f0:	f001 fc5e 	bl	8019cb0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80183f4:	4b37      	ldr	r3, [pc, #220]	@ (80184d4 <RadioSend+0x15c>)
 80183f6:	781b      	ldrb	r3, [r3, #0]
 80183f8:	2b03      	cmp	r3, #3
 80183fa:	d859      	bhi.n	80184b0 <RadioSend+0x138>
 80183fc:	a201      	add	r2, pc, #4	@ (adr r2, 8018404 <RadioSend+0x8c>)
 80183fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018402:	bf00      	nop
 8018404:	0801842f 	.word	0x0801842f
 8018408:	08018415 	.word	0x08018415
 801840c:	0801842f 	.word	0x0801842f
 8018410:	08018491 	.word	0x08018491
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018414:	4a2f      	ldr	r2, [pc, #188]	@ (80184d4 <RadioSend+0x15c>)
 8018416:	78fb      	ldrb	r3, [r7, #3]
 8018418:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801841a:	482f      	ldr	r0, [pc, #188]	@ (80184d8 <RadioSend+0x160>)
 801841c:	f001 fb02 	bl	8019a24 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018420:	78fb      	ldrb	r3, [r7, #3]
 8018422:	2200      	movs	r2, #0
 8018424:	4619      	mov	r1, r3
 8018426:	6878      	ldr	r0, [r7, #4]
 8018428:	f000 fdae 	bl	8018f88 <SUBGRF_SendPayload>
            break;
 801842c:	e041      	b.n	80184b2 <RadioSend+0x13a>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801842e:	f001 ff1f 	bl	801a270 <RFW_Is_Init>
 8018432:	4603      	mov	r3, r0
 8018434:	2b01      	cmp	r3, #1
 8018436:	d11e      	bne.n	8018476 <RadioSend+0xfe>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018438:	f107 020f 	add.w	r2, r7, #15
 801843c:	78fb      	ldrb	r3, [r7, #3]
 801843e:	4619      	mov	r1, r3
 8018440:	6878      	ldr	r0, [r7, #4]
 8018442:	f001 ff2d 	bl	801a2a0 <RFW_TransmitInit>
 8018446:	4603      	mov	r3, r0
 8018448:	2b00      	cmp	r3, #0
 801844a:	d10c      	bne.n	8018466 <RadioSend+0xee>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801844c:	7bfa      	ldrb	r2, [r7, #15]
 801844e:	4b21      	ldr	r3, [pc, #132]	@ (80184d4 <RadioSend+0x15c>)
 8018450:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018452:	4821      	ldr	r0, [pc, #132]	@ (80184d8 <RadioSend+0x160>)
 8018454:	f001 fae6 	bl	8019a24 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8018458:	7bfb      	ldrb	r3, [r7, #15]
 801845a:	2200      	movs	r2, #0
 801845c:	4619      	mov	r1, r3
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	f000 fd92 	bl	8018f88 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018464:	e025      	b.n	80184b2 <RadioSend+0x13a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8018466:	4b1d      	ldr	r3, [pc, #116]	@ (80184dc <RadioSend+0x164>)
 8018468:	2201      	movs	r2, #1
 801846a:	2100      	movs	r1, #0
 801846c:	2002      	movs	r0, #2
 801846e:	f001 ff73 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8018472:	2303      	movs	r3, #3
 8018474:	e027      	b.n	80184c6 <RadioSend+0x14e>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018476:	4a17      	ldr	r2, [pc, #92]	@ (80184d4 <RadioSend+0x15c>)
 8018478:	78fb      	ldrb	r3, [r7, #3]
 801847a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801847c:	4816      	ldr	r0, [pc, #88]	@ (80184d8 <RadioSend+0x160>)
 801847e:	f001 fad1 	bl	8019a24 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8018482:	78fb      	ldrb	r3, [r7, #3]
 8018484:	2200      	movs	r2, #0
 8018486:	4619      	mov	r1, r3
 8018488:	6878      	ldr	r0, [r7, #4]
 801848a:	f000 fd7d 	bl	8018f88 <SUBGRF_SendPayload>
            break;
 801848e:	e010      	b.n	80184b2 <RadioSend+0x13a>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018490:	4b10      	ldr	r3, [pc, #64]	@ (80184d4 <RadioSend+0x15c>)
 8018492:	2202      	movs	r2, #2
 8018494:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018496:	4a0f      	ldr	r2, [pc, #60]	@ (80184d4 <RadioSend+0x15c>)
 8018498:	78fb      	ldrb	r3, [r7, #3]
 801849a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801849c:	480e      	ldr	r0, [pc, #56]	@ (80184d8 <RadioSend+0x160>)
 801849e:	f001 fac1 	bl	8019a24 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80184a2:	78fb      	ldrb	r3, [r7, #3]
 80184a4:	2200      	movs	r2, #0
 80184a6:	4619      	mov	r1, r3
 80184a8:	6878      	ldr	r0, [r7, #4]
 80184aa:	f000 fd6d 	bl	8018f88 <SUBGRF_SendPayload>
            break;
 80184ae:	e000      	b.n	80184b2 <RadioSend+0x13a>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
            break;
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80184b0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80184b2:	4b08      	ldr	r3, [pc, #32]	@ (80184d4 <RadioSend+0x15c>)
 80184b4:	685b      	ldr	r3, [r3, #4]
 80184b6:	4619      	mov	r1, r3
 80184b8:	4809      	ldr	r0, [pc, #36]	@ (80184e0 <RadioSend+0x168>)
 80184ba:	f002 fe97 	bl	801b1ec <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80184be:	4808      	ldr	r0, [pc, #32]	@ (80184e0 <RadioSend+0x168>)
 80184c0:	f002 fdb6 	bl	801b030 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80184c4:	2300      	movs	r3, #0
}
 80184c6:	4618      	mov	r0, r3
 80184c8:	3710      	adds	r7, #16
 80184ca:	46bd      	mov	sp, r7
 80184cc:	bd80      	pop	{r7, pc}
 80184ce:	bf00      	nop
 80184d0:	48000400 	.word	0x48000400
 80184d4:	2000133c 	.word	0x2000133c
 80184d8:	2000134a 	.word	0x2000134a
 80184dc:	08021834 	.word	0x08021834
 80184e0:	20001398 	.word	0x20001398

080184e4 <RadioSleep>:

static void RadioSleep( void )
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b082      	sub	sp, #8
 80184e8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80184ea:	2300      	movs	r3, #0
 80184ec:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80184ee:	793b      	ldrb	r3, [r7, #4]
 80184f0:	f043 0304 	orr.w	r3, r3, #4
 80184f4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80184f6:	7938      	ldrb	r0, [r7, #4]
 80184f8:	f000 fe22 	bl	8019140 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80184fc:	2002      	movs	r0, #2
 80184fe:	f7e9 f9c7 	bl	8001890 <HAL_Delay>
}
 8018502:	bf00      	nop
 8018504:	3708      	adds	r7, #8
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}

0801850a <RadioStandby>:

static void RadioStandby( void )
{
 801850a:	b580      	push	{r7, lr}
 801850c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801850e:	2000      	movs	r0, #0
 8018510:	f000 fe4a 	bl	80191a8 <SUBGRF_SetStandby>
}
 8018514:	bf00      	nop
 8018516:	bd80      	pop	{r7, pc}

08018518 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b082      	sub	sp, #8
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8018520:	f001 fea6 	bl	801a270 <RFW_Is_Init>
 8018524:	4603      	mov	r3, r0
 8018526:	2b01      	cmp	r3, #1
 8018528:	d102      	bne.n	8018530 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801852a:	f001 fec9 	bl	801a2c0 <RFW_ReceiveInit>
 801852e:	e007      	b.n	8018540 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018530:	2300      	movs	r3, #0
 8018532:	2200      	movs	r2, #0
 8018534:	f240 2162 	movw	r1, #610	@ 0x262
 8018538:	f240 2062 	movw	r0, #610	@ 0x262
 801853c:	f001 f80e 	bl	801955c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d006      	beq.n	8018554 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018546:	6879      	ldr	r1, [r7, #4]
 8018548:	4813      	ldr	r0, [pc, #76]	@ (8018598 <RadioRx+0x80>)
 801854a:	f002 fe4f 	bl	801b1ec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801854e:	4812      	ldr	r0, [pc, #72]	@ (8018598 <RadioRx+0x80>)
 8018550:	f002 fd6e 	bl	801b030 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018554:	4b11      	ldr	r3, [pc, #68]	@ (801859c <RadioRx+0x84>)
 8018556:	2200      	movs	r2, #0
 8018558:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 801855a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801855e:	4810      	ldr	r0, [pc, #64]	@ (80185a0 <RadioRx+0x88>)
 8018560:	f7ff fa26 	bl	80179b0 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018564:	4b0d      	ldr	r3, [pc, #52]	@ (801859c <RadioRx+0x84>)
 8018566:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801856a:	2100      	movs	r1, #0
 801856c:	4618      	mov	r0, r3
 801856e:	f001 fc93 	bl	8019e98 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018572:	4b0a      	ldr	r3, [pc, #40]	@ (801859c <RadioRx+0x84>)
 8018574:	785b      	ldrb	r3, [r3, #1]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d004      	beq.n	8018584 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801857a:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801857e:	f000 fe4f 	bl	8019220 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018582:	e005      	b.n	8018590 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8018584:	4b05      	ldr	r3, [pc, #20]	@ (801859c <RadioRx+0x84>)
 8018586:	689b      	ldr	r3, [r3, #8]
 8018588:	019b      	lsls	r3, r3, #6
 801858a:	4618      	mov	r0, r3
 801858c:	f000 fe48 	bl	8019220 <SUBGRF_SetRx>
}
 8018590:	bf00      	nop
 8018592:	3708      	adds	r7, #8
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}
 8018598:	200013b0 	.word	0x200013b0
 801859c:	2000133c 	.word	0x2000133c
 80185a0:	48000400 	.word	0x48000400

080185a4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b082      	sub	sp, #8
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80185ac:	f001 fe60 	bl	801a270 <RFW_Is_Init>
 80185b0:	4603      	mov	r3, r0
 80185b2:	2b01      	cmp	r3, #1
 80185b4:	d102      	bne.n	80185bc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80185b6:	f001 fe83 	bl	801a2c0 <RFW_ReceiveInit>
 80185ba:	e007      	b.n	80185cc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80185bc:	2300      	movs	r3, #0
 80185be:	2200      	movs	r2, #0
 80185c0:	f240 2162 	movw	r1, #610	@ 0x262
 80185c4:	f240 2062 	movw	r0, #610	@ 0x262
 80185c8:	f000 ffc8 	bl	801955c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d006      	beq.n	80185e0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80185d2:	6879      	ldr	r1, [r7, #4]
 80185d4:	4813      	ldr	r0, [pc, #76]	@ (8018624 <RadioRxBoosted+0x80>)
 80185d6:	f002 fe09 	bl	801b1ec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80185da:	4812      	ldr	r0, [pc, #72]	@ (8018624 <RadioRxBoosted+0x80>)
 80185dc:	f002 fd28 	bl	801b030 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80185e0:	4b11      	ldr	r3, [pc, #68]	@ (8018628 <RadioRxBoosted+0x84>)
 80185e2:	2200      	movs	r2, #0
 80185e4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 80185e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80185ea:	4810      	ldr	r0, [pc, #64]	@ (801862c <RadioRxBoosted+0x88>)
 80185ec:	f7ff f9e0 	bl	80179b0 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80185f0:	4b0d      	ldr	r3, [pc, #52]	@ (8018628 <RadioRxBoosted+0x84>)
 80185f2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80185f6:	2100      	movs	r1, #0
 80185f8:	4618      	mov	r0, r3
 80185fa:	f001 fc4d 	bl	8019e98 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80185fe:	4b0a      	ldr	r3, [pc, #40]	@ (8018628 <RadioRxBoosted+0x84>)
 8018600:	785b      	ldrb	r3, [r3, #1]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d004      	beq.n	8018610 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018606:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801860a:	f000 fe29 	bl	8019260 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801860e:	e005      	b.n	801861c <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8018610:	4b05      	ldr	r3, [pc, #20]	@ (8018628 <RadioRxBoosted+0x84>)
 8018612:	689b      	ldr	r3, [r3, #8]
 8018614:	019b      	lsls	r3, r3, #6
 8018616:	4618      	mov	r0, r3
 8018618:	f000 fe22 	bl	8019260 <SUBGRF_SetRxBoosted>
}
 801861c:	bf00      	nop
 801861e:	3708      	adds	r7, #8
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	200013b0 	.word	0x200013b0
 8018628:	2000133c 	.word	0x2000133c
 801862c:	48000400 	.word	0x48000400

08018630 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b082      	sub	sp, #8
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
 8018638:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	005a      	lsls	r2, r3, #1
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	4413      	add	r3, r2
 8018642:	4a0c      	ldr	r2, [pc, #48]	@ (8018674 <RadioSetRxDutyCycle+0x44>)
 8018644:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018646:	2300      	movs	r3, #0
 8018648:	2200      	movs	r2, #0
 801864a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801864e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018652:	f000 ff83 	bl	801955c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018656:	4b07      	ldr	r3, [pc, #28]	@ (8018674 <RadioSetRxDutyCycle+0x44>)
 8018658:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801865c:	2100      	movs	r1, #0
 801865e:	4618      	mov	r0, r3
 8018660:	f001 fc1a 	bl	8019e98 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018664:	6839      	ldr	r1, [r7, #0]
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	f000 fe1e 	bl	80192a8 <SUBGRF_SetRxDutyCycle>
}
 801866c:	bf00      	nop
 801866e:	3708      	adds	r7, #8
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}
 8018674:	2000133c 	.word	0x2000133c

08018678 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018678:	b580      	push	{r7, lr}
 801867a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801867c:	4b09      	ldr	r3, [pc, #36]	@ (80186a4 <RadioStartCad+0x2c>)
 801867e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018682:	2100      	movs	r1, #0
 8018684:	4618      	mov	r0, r3
 8018686:	f001 fc07 	bl	8019e98 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801868a:	2300      	movs	r3, #0
 801868c:	2200      	movs	r2, #0
 801868e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018692:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018696:	f000 ff61 	bl	801955c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801869a:	f000 fe31 	bl	8019300 <SUBGRF_SetCad>
}
 801869e:	bf00      	nop
 80186a0:	bd80      	pop	{r7, pc}
 80186a2:	bf00      	nop
 80186a4:	2000133c 	.word	0x2000133c

080186a8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b084      	sub	sp, #16
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
 80186b0:	460b      	mov	r3, r1
 80186b2:	70fb      	strb	r3, [r7, #3]
 80186b4:	4613      	mov	r3, r2
 80186b6:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80186b8:	883b      	ldrh	r3, [r7, #0]
 80186ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80186be:	fb02 f303 	mul.w	r3, r2, r3
 80186c2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80186c4:	6878      	ldr	r0, [r7, #4]
 80186c6:	f000 ffa5 	bl	8019614 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80186ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80186ce:	4618      	mov	r0, r3
 80186d0:	f001 fc0a 	bl	8019ee8 <SUBGRF_SetRfTxPower>
 80186d4:	4603      	mov	r3, r0
 80186d6:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80186d8:	210e      	movs	r1, #14
 80186da:	f640 101f 	movw	r0, #2335	@ 0x91f
 80186de:	f001 fae7 	bl	8019cb0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80186e2:	7afb      	ldrb	r3, [r7, #11]
 80186e4:	2101      	movs	r1, #1
 80186e6:	4618      	mov	r0, r3
 80186e8:	f001 fbd6 	bl	8019e98 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80186ec:	f000 fe16 	bl	801931c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80186f0:	68f9      	ldr	r1, [r7, #12]
 80186f2:	4805      	ldr	r0, [pc, #20]	@ (8018708 <RadioSetTxContinuousWave+0x60>)
 80186f4:	f002 fd7a 	bl	801b1ec <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80186f8:	4803      	ldr	r0, [pc, #12]	@ (8018708 <RadioSetTxContinuousWave+0x60>)
 80186fa:	f002 fc99 	bl	801b030 <UTIL_TIMER_Start>
}
 80186fe:	bf00      	nop
 8018700:	3710      	adds	r7, #16
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	20001398 	.word	0x20001398

0801870c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b082      	sub	sp, #8
 8018710:	af00      	add	r7, sp, #0
 8018712:	4603      	mov	r3, r0
 8018714:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018716:	f001 fa38 	bl	8019b8a <SUBGRF_GetRssiInst>
 801871a:	4603      	mov	r3, r0
}
 801871c:	4618      	mov	r0, r3
 801871e:	3708      	adds	r7, #8
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}

08018724 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b082      	sub	sp, #8
 8018728:	af00      	add	r7, sp, #0
 801872a:	4603      	mov	r3, r0
 801872c:	460a      	mov	r2, r1
 801872e:	80fb      	strh	r3, [r7, #6]
 8018730:	4613      	mov	r3, r2
 8018732:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018734:	797a      	ldrb	r2, [r7, #5]
 8018736:	88fb      	ldrh	r3, [r7, #6]
 8018738:	4611      	mov	r1, r2
 801873a:	4618      	mov	r0, r3
 801873c:	f001 fab8 	bl	8019cb0 <SUBGRF_WriteRegister>
}
 8018740:	bf00      	nop
 8018742:	3708      	adds	r7, #8
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}

08018748 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b082      	sub	sp, #8
 801874c:	af00      	add	r7, sp, #0
 801874e:	4603      	mov	r3, r0
 8018750:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018752:	88fb      	ldrh	r3, [r7, #6]
 8018754:	4618      	mov	r0, r3
 8018756:	f001 fabf 	bl	8019cd8 <SUBGRF_ReadRegister>
 801875a:	4603      	mov	r3, r0
}
 801875c:	4618      	mov	r0, r3
 801875e:	3708      	adds	r7, #8
 8018760:	46bd      	mov	sp, r7
 8018762:	bd80      	pop	{r7, pc}

08018764 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b082      	sub	sp, #8
 8018768:	af00      	add	r7, sp, #0
 801876a:	4603      	mov	r3, r0
 801876c:	6039      	str	r1, [r7, #0]
 801876e:	80fb      	strh	r3, [r7, #6]
 8018770:	4613      	mov	r3, r2
 8018772:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018774:	797b      	ldrb	r3, [r7, #5]
 8018776:	b29a      	uxth	r2, r3
 8018778:	88fb      	ldrh	r3, [r7, #6]
 801877a:	6839      	ldr	r1, [r7, #0]
 801877c:	4618      	mov	r0, r3
 801877e:	f001 fabf 	bl	8019d00 <SUBGRF_WriteRegisters>
}
 8018782:	bf00      	nop
 8018784:	3708      	adds	r7, #8
 8018786:	46bd      	mov	sp, r7
 8018788:	bd80      	pop	{r7, pc}

0801878a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801878a:	b580      	push	{r7, lr}
 801878c:	b082      	sub	sp, #8
 801878e:	af00      	add	r7, sp, #0
 8018790:	4603      	mov	r3, r0
 8018792:	6039      	str	r1, [r7, #0]
 8018794:	80fb      	strh	r3, [r7, #6]
 8018796:	4613      	mov	r3, r2
 8018798:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801879a:	797b      	ldrb	r3, [r7, #5]
 801879c:	b29a      	uxth	r2, r3
 801879e:	88fb      	ldrh	r3, [r7, #6]
 80187a0:	6839      	ldr	r1, [r7, #0]
 80187a2:	4618      	mov	r0, r3
 80187a4:	f001 face 	bl	8019d44 <SUBGRF_ReadRegisters>
}
 80187a8:	bf00      	nop
 80187aa:	3708      	adds	r7, #8
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}

080187b0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	4603      	mov	r3, r0
 80187b8:	460a      	mov	r2, r1
 80187ba:	71fb      	strb	r3, [r7, #7]
 80187bc:	4613      	mov	r3, r2
 80187be:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80187c0:	79fb      	ldrb	r3, [r7, #7]
 80187c2:	2b01      	cmp	r3, #1
 80187c4:	d10a      	bne.n	80187dc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80187c6:	4a0e      	ldr	r2, [pc, #56]	@ (8018800 <RadioSetMaxPayloadLength+0x50>)
 80187c8:	79bb      	ldrb	r3, [r7, #6]
 80187ca:	7013      	strb	r3, [r2, #0]
 80187cc:	4b0c      	ldr	r3, [pc, #48]	@ (8018800 <RadioSetMaxPayloadLength+0x50>)
 80187ce:	781a      	ldrb	r2, [r3, #0]
 80187d0:	4b0c      	ldr	r3, [pc, #48]	@ (8018804 <RadioSetMaxPayloadLength+0x54>)
 80187d2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187d4:	480c      	ldr	r0, [pc, #48]	@ (8018808 <RadioSetMaxPayloadLength+0x58>)
 80187d6:	f001 f925 	bl	8019a24 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80187da:	e00d      	b.n	80187f8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80187dc:	4b09      	ldr	r3, [pc, #36]	@ (8018804 <RadioSetMaxPayloadLength+0x54>)
 80187de:	7d5b      	ldrb	r3, [r3, #21]
 80187e0:	2b01      	cmp	r3, #1
 80187e2:	d109      	bne.n	80187f8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80187e4:	4a06      	ldr	r2, [pc, #24]	@ (8018800 <RadioSetMaxPayloadLength+0x50>)
 80187e6:	79bb      	ldrb	r3, [r7, #6]
 80187e8:	7013      	strb	r3, [r2, #0]
 80187ea:	4b05      	ldr	r3, [pc, #20]	@ (8018800 <RadioSetMaxPayloadLength+0x50>)
 80187ec:	781a      	ldrb	r2, [r3, #0]
 80187ee:	4b05      	ldr	r3, [pc, #20]	@ (8018804 <RadioSetMaxPayloadLength+0x54>)
 80187f0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187f2:	4805      	ldr	r0, [pc, #20]	@ (8018808 <RadioSetMaxPayloadLength+0x58>)
 80187f4:	f001 f916 	bl	8019a24 <SUBGRF_SetPacketParams>
}
 80187f8:	bf00      	nop
 80187fa:	3708      	adds	r7, #8
 80187fc:	46bd      	mov	sp, r7
 80187fe:	bd80      	pop	{r7, pc}
 8018800:	200000d8 	.word	0x200000d8
 8018804:	2000133c 	.word	0x2000133c
 8018808:	2000134a 	.word	0x2000134a

0801880c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b082      	sub	sp, #8
 8018810:	af00      	add	r7, sp, #0
 8018812:	4603      	mov	r3, r0
 8018814:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018816:	4a13      	ldr	r2, [pc, #76]	@ (8018864 <RadioSetPublicNetwork+0x58>)
 8018818:	79fb      	ldrb	r3, [r7, #7]
 801881a:	7313      	strb	r3, [r2, #12]
 801881c:	4b11      	ldr	r3, [pc, #68]	@ (8018864 <RadioSetPublicNetwork+0x58>)
 801881e:	7b1a      	ldrb	r2, [r3, #12]
 8018820:	4b10      	ldr	r3, [pc, #64]	@ (8018864 <RadioSetPublicNetwork+0x58>)
 8018822:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8018824:	2001      	movs	r0, #1
 8018826:	f7ff f951 	bl	8017acc <RadioSetModem>
    if( enable == true )
 801882a:	79fb      	ldrb	r3, [r7, #7]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d00a      	beq.n	8018846 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018830:	2134      	movs	r1, #52	@ 0x34
 8018832:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018836:	f001 fa3b 	bl	8019cb0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801883a:	2144      	movs	r1, #68	@ 0x44
 801883c:	f240 7041 	movw	r0, #1857	@ 0x741
 8018840:	f001 fa36 	bl	8019cb0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018844:	e009      	b.n	801885a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018846:	2114      	movs	r1, #20
 8018848:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801884c:	f001 fa30 	bl	8019cb0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018850:	2124      	movs	r1, #36	@ 0x24
 8018852:	f240 7041 	movw	r0, #1857	@ 0x741
 8018856:	f001 fa2b 	bl	8019cb0 <SUBGRF_WriteRegister>
}
 801885a:	bf00      	nop
 801885c:	3708      	adds	r7, #8
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	2000133c 	.word	0x2000133c

08018868 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018868:	b580      	push	{r7, lr}
 801886a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801886c:	f001 fb70 	bl	8019f50 <SUBGRF_GetRadioWakeUpTime>
 8018870:	4603      	mov	r3, r0
 8018872:	3303      	adds	r3, #3
}
 8018874:	4618      	mov	r0, r3
 8018876:	bd80      	pop	{r7, pc}

08018878 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b082      	sub	sp, #8
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018880:	f000 f80e 	bl	80188a0 <RadioOnTxTimeoutProcess>
}
 8018884:	bf00      	nop
 8018886:	3708      	adds	r7, #8
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}

0801888c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018894:	f000 f81e 	bl	80188d4 <RadioOnRxTimeoutProcess>
}
 8018898:	bf00      	nop
 801889a:	3708      	adds	r7, #8
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}

080188a0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 80188a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80188a8:	4808      	ldr	r0, [pc, #32]	@ (80188cc <RadioOnTxTimeoutProcess+0x2c>)
 80188aa:	f7ff f88e 	bl	80179ca <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80188ae:	4b08      	ldr	r3, [pc, #32]	@ (80188d0 <RadioOnTxTimeoutProcess+0x30>)
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d008      	beq.n	80188c8 <RadioOnTxTimeoutProcess+0x28>
 80188b6:	4b06      	ldr	r3, [pc, #24]	@ (80188d0 <RadioOnTxTimeoutProcess+0x30>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d003      	beq.n	80188c8 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 80188c0:	4b03      	ldr	r3, [pc, #12]	@ (80188d0 <RadioOnTxTimeoutProcess+0x30>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	4798      	blx	r3
    }
}
 80188c8:	bf00      	nop
 80188ca:	bd80      	pop	{r7, pc}
 80188cc:	48000400 	.word	0x48000400
 80188d0:	20001338 	.word	0x20001338

080188d4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 80188d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80188dc:	4808      	ldr	r0, [pc, #32]	@ (8018900 <RadioOnRxTimeoutProcess+0x2c>)
 80188de:	f7ff f874 	bl	80179ca <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80188e2:	4b08      	ldr	r3, [pc, #32]	@ (8018904 <RadioOnRxTimeoutProcess+0x30>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d008      	beq.n	80188fc <RadioOnRxTimeoutProcess+0x28>
 80188ea:	4b06      	ldr	r3, [pc, #24]	@ (8018904 <RadioOnRxTimeoutProcess+0x30>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	68db      	ldr	r3, [r3, #12]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d003      	beq.n	80188fc <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 80188f4:	4b03      	ldr	r3, [pc, #12]	@ (8018904 <RadioOnRxTimeoutProcess+0x30>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	68db      	ldr	r3, [r3, #12]
 80188fa:	4798      	blx	r3
    }
}
 80188fc:	bf00      	nop
 80188fe:	bd80      	pop	{r7, pc}
 8018900:	48000400 	.word	0x48000400
 8018904:	20001338 	.word	0x20001338

08018908 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b082      	sub	sp, #8
 801890c:	af00      	add	r7, sp, #0
 801890e:	4603      	mov	r3, r0
 8018910:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018912:	4a05      	ldr	r2, [pc, #20]	@ (8018928 <RadioOnDioIrq+0x20>)
 8018914:	88fb      	ldrh	r3, [r7, #6]
 8018916:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 801891a:	f000 f807 	bl	801892c <RadioIrqProcess>
}
 801891e:	bf00      	nop
 8018920:	3708      	adds	r7, #8
 8018922:	46bd      	mov	sp, r7
 8018924:	bd80      	pop	{r7, pc}
 8018926:	bf00      	nop
 8018928:	2000133c 	.word	0x2000133c

0801892c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801892c:	b5b0      	push	{r4, r5, r7, lr}
 801892e:	b082      	sub	sp, #8
 8018930:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018932:	2300      	movs	r3, #0
 8018934:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018936:	2300      	movs	r3, #0
 8018938:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801893a:	4bb2      	ldr	r3, [pc, #712]	@ (8018c04 <RadioIrqProcess+0x2d8>)
 801893c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018944:	f000 8117 	beq.w	8018b76 <RadioIrqProcess+0x24a>
 8018948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801894c:	f300 81fe 	bgt.w	8018d4c <RadioIrqProcess+0x420>
 8018950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018954:	f000 80fb 	beq.w	8018b4e <RadioIrqProcess+0x222>
 8018958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801895c:	f300 81f6 	bgt.w	8018d4c <RadioIrqProcess+0x420>
 8018960:	2b80      	cmp	r3, #128	@ 0x80
 8018962:	f000 80e0 	beq.w	8018b26 <RadioIrqProcess+0x1fa>
 8018966:	2b80      	cmp	r3, #128	@ 0x80
 8018968:	f300 81f0 	bgt.w	8018d4c <RadioIrqProcess+0x420>
 801896c:	2b20      	cmp	r3, #32
 801896e:	dc49      	bgt.n	8018a04 <RadioIrqProcess+0xd8>
 8018970:	2b00      	cmp	r3, #0
 8018972:	f340 81eb 	ble.w	8018d4c <RadioIrqProcess+0x420>
 8018976:	3b01      	subs	r3, #1
 8018978:	2b1f      	cmp	r3, #31
 801897a:	f200 81e7 	bhi.w	8018d4c <RadioIrqProcess+0x420>
 801897e:	a201      	add	r2, pc, #4	@ (adr r2, 8018984 <RadioIrqProcess+0x58>)
 8018980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018984:	08018a0d 	.word	0x08018a0d
 8018988:	08018a51 	.word	0x08018a51
 801898c:	08018d4d 	.word	0x08018d4d
 8018990:	08018c29 	.word	0x08018c29
 8018994:	08018d4d 	.word	0x08018d4d
 8018998:	08018d4d 	.word	0x08018d4d
 801899c:	08018d4d 	.word	0x08018d4d
 80189a0:	08018ca5 	.word	0x08018ca5
 80189a4:	08018d4d 	.word	0x08018d4d
 80189a8:	08018d4d 	.word	0x08018d4d
 80189ac:	08018d4d 	.word	0x08018d4d
 80189b0:	08018d4d 	.word	0x08018d4d
 80189b4:	08018d4d 	.word	0x08018d4d
 80189b8:	08018d4d 	.word	0x08018d4d
 80189bc:	08018d4d 	.word	0x08018d4d
 80189c0:	08018cc1 	.word	0x08018cc1
 80189c4:	08018d4d 	.word	0x08018d4d
 80189c8:	08018d4d 	.word	0x08018d4d
 80189cc:	08018d4d 	.word	0x08018d4d
 80189d0:	08018d4d 	.word	0x08018d4d
 80189d4:	08018d4d 	.word	0x08018d4d
 80189d8:	08018d4d 	.word	0x08018d4d
 80189dc:	08018d4d 	.word	0x08018d4d
 80189e0:	08018d4d 	.word	0x08018d4d
 80189e4:	08018d4d 	.word	0x08018d4d
 80189e8:	08018d4d 	.word	0x08018d4d
 80189ec:	08018d4d 	.word	0x08018d4d
 80189f0:	08018d4d 	.word	0x08018d4d
 80189f4:	08018d4d 	.word	0x08018d4d
 80189f8:	08018d4d 	.word	0x08018d4d
 80189fc:	08018d4d 	.word	0x08018d4d
 8018a00:	08018ccf 	.word	0x08018ccf
 8018a04:	2b40      	cmp	r3, #64	@ 0x40
 8018a06:	f000 8183 	beq.w	8018d10 <RadioIrqProcess+0x3e4>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8018a0a:	e19f      	b.n	8018d4c <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_TX( RST );
 8018a0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8018a10:	487d      	ldr	r0, [pc, #500]	@ (8018c08 <RadioIrqProcess+0x2dc>)
 8018a12:	f7fe ffda 	bl	80179ca <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8018a16:	487d      	ldr	r0, [pc, #500]	@ (8018c0c <RadioIrqProcess+0x2e0>)
 8018a18:	f002 fb78 	bl	801b10c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018a1c:	2000      	movs	r0, #0
 8018a1e:	f000 fbc3 	bl	80191a8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018a22:	f001 fc2c 	bl	801a27e <RFW_Is_LongPacketModeEnabled>
 8018a26:	4603      	mov	r3, r0
 8018a28:	2b01      	cmp	r3, #1
 8018a2a:	d101      	bne.n	8018a30 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8018a2c:	f001 fc50 	bl	801a2d0 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018a30:	4b77      	ldr	r3, [pc, #476]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	f000 818b 	beq.w	8018d50 <RadioIrqProcess+0x424>
 8018a3a:	4b75      	ldr	r3, [pc, #468]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	f000 8185 	beq.w	8018d50 <RadioIrqProcess+0x424>
            RadioEvents->TxDone( );
 8018a46:	4b72      	ldr	r3, [pc, #456]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	4798      	blx	r3
        break;
 8018a4e:	e17f      	b.n	8018d50 <RadioIrqProcess+0x424>
        DBG_GPIO_RADIO_RX( RST );
 8018a50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8018a54:	486c      	ldr	r0, [pc, #432]	@ (8018c08 <RadioIrqProcess+0x2dc>)
 8018a56:	f7fe ffb8 	bl	80179ca <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8018a5a:	486e      	ldr	r0, [pc, #440]	@ (8018c14 <RadioIrqProcess+0x2e8>)
 8018a5c:	f002 fb56 	bl	801b10c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018a60:	4b68      	ldr	r3, [pc, #416]	@ (8018c04 <RadioIrqProcess+0x2d8>)
 8018a62:	785b      	ldrb	r3, [r3, #1]
 8018a64:	f083 0301 	eor.w	r3, r3, #1
 8018a68:	b2db      	uxtb	r3, r3
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d014      	beq.n	8018a98 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8018a6e:	2000      	movs	r0, #0
 8018a70:	f000 fb9a 	bl	80191a8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018a74:	2100      	movs	r1, #0
 8018a76:	f640 1002 	movw	r0, #2306	@ 0x902
 8018a7a:	f001 f919 	bl	8019cb0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018a7e:	f640 1044 	movw	r0, #2372	@ 0x944
 8018a82:	f001 f929 	bl	8019cd8 <SUBGRF_ReadRegister>
 8018a86:	4603      	mov	r3, r0
 8018a88:	f043 0302 	orr.w	r3, r3, #2
 8018a8c:	b2db      	uxtb	r3, r3
 8018a8e:	4619      	mov	r1, r3
 8018a90:	f640 1044 	movw	r0, #2372	@ 0x944
 8018a94:	f001 f90c 	bl	8019cb0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018a98:	1dfb      	adds	r3, r7, #7
 8018a9a:	22ff      	movs	r2, #255	@ 0xff
 8018a9c:	4619      	mov	r1, r3
 8018a9e:	485e      	ldr	r0, [pc, #376]	@ (8018c18 <RadioIrqProcess+0x2ec>)
 8018aa0:	f000 fa50 	bl	8018f44 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018aa4:	485d      	ldr	r0, [pc, #372]	@ (8018c1c <RadioIrqProcess+0x2f0>)
 8018aa6:	f001 f8b1 	bl	8019c0c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018aaa:	4b59      	ldr	r3, [pc, #356]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	f000 8150 	beq.w	8018d54 <RadioIrqProcess+0x428>
 8018ab4:	4b56      	ldr	r3, [pc, #344]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	689b      	ldr	r3, [r3, #8]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	f000 814a 	beq.w	8018d54 <RadioIrqProcess+0x428>
            switch( SubgRf.PacketStatus.packetType )
 8018ac0:	4b50      	ldr	r3, [pc, #320]	@ (8018c04 <RadioIrqProcess+0x2d8>)
 8018ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018ac6:	2b01      	cmp	r3, #1
 8018ac8:	d10e      	bne.n	8018ae8 <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8018aca:	4b51      	ldr	r3, [pc, #324]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	689c      	ldr	r4, [r3, #8]
 8018ad0:	79fb      	ldrb	r3, [r7, #7]
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8018c04 <RadioIrqProcess+0x2d8>)
 8018ad6:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018ada:	461a      	mov	r2, r3
 8018adc:	4b49      	ldr	r3, [pc, #292]	@ (8018c04 <RadioIrqProcess+0x2d8>)
 8018ade:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018ae2:	484d      	ldr	r0, [pc, #308]	@ (8018c18 <RadioIrqProcess+0x2ec>)
 8018ae4:	47a0      	blx	r4
                break;
 8018ae6:	e01d      	b.n	8018b24 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018ae8:	4b46      	ldr	r3, [pc, #280]	@ (8018c04 <RadioIrqProcess+0x2d8>)
 8018aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018aec:	463a      	mov	r2, r7
 8018aee:	4611      	mov	r1, r2
 8018af0:	4618      	mov	r0, r3
 8018af2:	f001 fb1f 	bl	801a134 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018af6:	4b46      	ldr	r3, [pc, #280]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	689c      	ldr	r4, [r3, #8]
 8018afc:	79fb      	ldrb	r3, [r7, #7]
 8018afe:	4619      	mov	r1, r3
 8018b00:	4b40      	ldr	r3, [pc, #256]	@ (8018c04 <RadioIrqProcess+0x2d8>)
 8018b02:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018b06:	4618      	mov	r0, r3
 8018b08:	683b      	ldr	r3, [r7, #0]
 8018b0a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018b0e:	4a44      	ldr	r2, [pc, #272]	@ (8018c20 <RadioIrqProcess+0x2f4>)
 8018b10:	fb82 5203 	smull	r5, r2, r2, r3
 8018b14:	1192      	asrs	r2, r2, #6
 8018b16:	17db      	asrs	r3, r3, #31
 8018b18:	1ad3      	subs	r3, r2, r3
 8018b1a:	b25b      	sxtb	r3, r3
 8018b1c:	4602      	mov	r2, r0
 8018b1e:	483e      	ldr	r0, [pc, #248]	@ (8018c18 <RadioIrqProcess+0x2ec>)
 8018b20:	47a0      	blx	r4
                break;
 8018b22:	bf00      	nop
        break;
 8018b24:	e116      	b.n	8018d54 <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 8018b26:	2000      	movs	r0, #0
 8018b28:	f000 fb3e 	bl	80191a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018b2c:	4b38      	ldr	r3, [pc, #224]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	f000 8111 	beq.w	8018d58 <RadioIrqProcess+0x42c>
 8018b36:	4b36      	ldr	r3, [pc, #216]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	699b      	ldr	r3, [r3, #24]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	f000 810b 	beq.w	8018d58 <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( false );
 8018b42:	4b33      	ldr	r3, [pc, #204]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	699b      	ldr	r3, [r3, #24]
 8018b48:	2000      	movs	r0, #0
 8018b4a:	4798      	blx	r3
        break;
 8018b4c:	e104      	b.n	8018d58 <RadioIrqProcess+0x42c>
        SUBGRF_SetStandby( STDBY_RC );
 8018b4e:	2000      	movs	r0, #0
 8018b50:	f000 fb2a 	bl	80191a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018b54:	4b2e      	ldr	r3, [pc, #184]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	f000 80ff 	beq.w	8018d5c <RadioIrqProcess+0x430>
 8018b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	699b      	ldr	r3, [r3, #24]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	f000 80f9 	beq.w	8018d5c <RadioIrqProcess+0x430>
            RadioEvents->CadDone( true );
 8018b6a:	4b29      	ldr	r3, [pc, #164]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	699b      	ldr	r3, [r3, #24]
 8018b70:	2001      	movs	r0, #1
 8018b72:	4798      	blx	r3
        break;
 8018b74:	e0f2      	b.n	8018d5c <RadioIrqProcess+0x430>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018b76:	4b2b      	ldr	r3, [pc, #172]	@ (8018c24 <RadioIrqProcess+0x2f8>)
 8018b78:	2201      	movs	r2, #1
 8018b7a:	2100      	movs	r1, #0
 8018b7c:	2002      	movs	r0, #2
 8018b7e:	f001 fbeb 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018b82:	f000 f9c5 	bl	8018f10 <SUBGRF_GetOperatingMode>
 8018b86:	4603      	mov	r3, r0
 8018b88:	2b04      	cmp	r3, #4
 8018b8a:	d11a      	bne.n	8018bc2 <RadioIrqProcess+0x296>
            DBG_GPIO_RADIO_TX( RST );
 8018b8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8018b90:	481d      	ldr	r0, [pc, #116]	@ (8018c08 <RadioIrqProcess+0x2dc>)
 8018b92:	f7fe ff1a 	bl	80179ca <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8018b96:	481d      	ldr	r0, [pc, #116]	@ (8018c0c <RadioIrqProcess+0x2e0>)
 8018b98:	f002 fab8 	bl	801b10c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018b9c:	2000      	movs	r0, #0
 8018b9e:	f000 fb03 	bl	80191a8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	f000 80da 	beq.w	8018d60 <RadioIrqProcess+0x434>
 8018bac:	4b18      	ldr	r3, [pc, #96]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	f000 80d4 	beq.w	8018d60 <RadioIrqProcess+0x434>
                RadioEvents->TxTimeout( );
 8018bb8:	4b15      	ldr	r3, [pc, #84]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	685b      	ldr	r3, [r3, #4]
 8018bbe:	4798      	blx	r3
        break;
 8018bc0:	e0ce      	b.n	8018d60 <RadioIrqProcess+0x434>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018bc2:	f000 f9a5 	bl	8018f10 <SUBGRF_GetOperatingMode>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	2b05      	cmp	r3, #5
 8018bca:	f040 80c9 	bne.w	8018d60 <RadioIrqProcess+0x434>
            DBG_GPIO_RADIO_RX( RST );
 8018bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8018bd2:	480d      	ldr	r0, [pc, #52]	@ (8018c08 <RadioIrqProcess+0x2dc>)
 8018bd4:	f7fe fef9 	bl	80179ca <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8018bd8:	480e      	ldr	r0, [pc, #56]	@ (8018c14 <RadioIrqProcess+0x2e8>)
 8018bda:	f002 fa97 	bl	801b10c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018bde:	2000      	movs	r0, #0
 8018be0:	f000 fae2 	bl	80191a8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018be4:	4b0a      	ldr	r3, [pc, #40]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	f000 80b9 	beq.w	8018d60 <RadioIrqProcess+0x434>
 8018bee:	4b08      	ldr	r3, [pc, #32]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	68db      	ldr	r3, [r3, #12]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	f000 80b3 	beq.w	8018d60 <RadioIrqProcess+0x434>
                RadioEvents->RxTimeout( );
 8018bfa:	4b05      	ldr	r3, [pc, #20]	@ (8018c10 <RadioIrqProcess+0x2e4>)
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	68db      	ldr	r3, [r3, #12]
 8018c00:	4798      	blx	r3
        break;
 8018c02:	e0ad      	b.n	8018d60 <RadioIrqProcess+0x434>
 8018c04:	2000133c 	.word	0x2000133c
 8018c08:	48000400 	.word	0x48000400
 8018c0c:	20001398 	.word	0x20001398
 8018c10:	20001338 	.word	0x20001338
 8018c14:	200013b0 	.word	0x200013b0
 8018c18:	20001238 	.word	0x20001238
 8018c1c:	20001360 	.word	0x20001360
 8018c20:	10624dd3 	.word	0x10624dd3
 8018c24:	0802184c 	.word	0x0802184c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018c28:	4b54      	ldr	r3, [pc, #336]	@ (8018d7c <RadioIrqProcess+0x450>)
 8018c2a:	2201      	movs	r2, #1
 8018c2c:	2100      	movs	r1, #0
 8018c2e:	2002      	movs	r0, #2
 8018c30:	f001 fb92 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018c34:	4b52      	ldr	r3, [pc, #328]	@ (8018d80 <RadioIrqProcess+0x454>)
 8018c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	f000 8093 	beq.w	8018d64 <RadioIrqProcess+0x438>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018c3e:	4a51      	ldr	r2, [pc, #324]	@ (8018d84 <RadioIrqProcess+0x458>)
 8018c40:	4b4f      	ldr	r3, [pc, #316]	@ (8018d80 <RadioIrqProcess+0x454>)
 8018c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c44:	0c1b      	lsrs	r3, r3, #16
 8018c46:	b2db      	uxtb	r3, r3
 8018c48:	4619      	mov	r1, r3
 8018c4a:	f640 1003 	movw	r0, #2307	@ 0x903
 8018c4e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018c50:	4a4c      	ldr	r2, [pc, #304]	@ (8018d84 <RadioIrqProcess+0x458>)
 8018c52:	4b4b      	ldr	r3, [pc, #300]	@ (8018d80 <RadioIrqProcess+0x454>)
 8018c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c56:	0a1b      	lsrs	r3, r3, #8
 8018c58:	b2db      	uxtb	r3, r3
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	f640 1004 	movw	r0, #2308	@ 0x904
 8018c60:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8018c62:	4a48      	ldr	r2, [pc, #288]	@ (8018d84 <RadioIrqProcess+0x458>)
 8018c64:	4b46      	ldr	r3, [pc, #280]	@ (8018d80 <RadioIrqProcess+0x454>)
 8018c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	4619      	mov	r1, r3
 8018c6c:	f640 1005 	movw	r0, #2309	@ 0x905
 8018c70:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8018c72:	4c44      	ldr	r4, [pc, #272]	@ (8018d84 <RadioIrqProcess+0x458>)
 8018c74:	4b44      	ldr	r3, [pc, #272]	@ (8018d88 <RadioIrqProcess+0x45c>)
 8018c76:	f640 1002 	movw	r0, #2306	@ 0x902
 8018c7a:	4798      	blx	r3
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	f043 0301 	orr.w	r3, r3, #1
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	4619      	mov	r1, r3
 8018c86:	f640 1002 	movw	r0, #2306	@ 0x902
 8018c8a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8018c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8018d80 <RadioIrqProcess+0x454>)
 8018c8e:	2200      	movs	r2, #0
 8018c90:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018c92:	2300      	movs	r3, #0
 8018c94:	2200      	movs	r2, #0
 8018c96:	f240 2162 	movw	r1, #610	@ 0x262
 8018c9a:	f240 2062 	movw	r0, #610	@ 0x262
 8018c9e:	f000 fc5d 	bl	801955c <SUBGRF_SetDioIrqParams>
        break;
 8018ca2:	e05f      	b.n	8018d64 <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018ca4:	4b39      	ldr	r3, [pc, #228]	@ (8018d8c <RadioIrqProcess+0x460>)
 8018ca6:	2201      	movs	r2, #1
 8018ca8:	2100      	movs	r1, #0
 8018caa:	2002      	movs	r0, #2
 8018cac:	f001 fb54 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018cb0:	f001 fade 	bl	801a270 <RFW_Is_Init>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	2b01      	cmp	r3, #1
 8018cb8:	d156      	bne.n	8018d68 <RadioIrqProcess+0x43c>
            RFW_ReceivePayload( );
 8018cba:	f001 fb0f 	bl	801a2dc <RFW_ReceivePayload>
        break;
 8018cbe:	e053      	b.n	8018d68 <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018cc0:	4b33      	ldr	r3, [pc, #204]	@ (8018d90 <RadioIrqProcess+0x464>)
 8018cc2:	2201      	movs	r2, #1
 8018cc4:	2100      	movs	r1, #0
 8018cc6:	2002      	movs	r0, #2
 8018cc8:	f001 fb46 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018ccc:	e051      	b.n	8018d72 <RadioIrqProcess+0x446>
        TimerStop( &RxTimeoutTimer );
 8018cce:	4831      	ldr	r0, [pc, #196]	@ (8018d94 <RadioIrqProcess+0x468>)
 8018cd0:	f002 fa1c 	bl	801b10c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8018d80 <RadioIrqProcess+0x454>)
 8018cd6:	785b      	ldrb	r3, [r3, #1]
 8018cd8:	f083 0301 	eor.w	r3, r3, #1
 8018cdc:	b2db      	uxtb	r3, r3
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d002      	beq.n	8018ce8 <RadioIrqProcess+0x3bc>
            SUBGRF_SetStandby( STDBY_RC );
 8018ce2:	2000      	movs	r0, #0
 8018ce4:	f000 fa60 	bl	80191a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8018d98 <RadioIrqProcess+0x46c>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d03d      	beq.n	8018d6c <RadioIrqProcess+0x440>
 8018cf0:	4b29      	ldr	r3, [pc, #164]	@ (8018d98 <RadioIrqProcess+0x46c>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	68db      	ldr	r3, [r3, #12]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d038      	beq.n	8018d6c <RadioIrqProcess+0x440>
            RadioEvents->RxTimeout( );
 8018cfa:	4b27      	ldr	r3, [pc, #156]	@ (8018d98 <RadioIrqProcess+0x46c>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	68db      	ldr	r3, [r3, #12]
 8018d00:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018d02:	4b26      	ldr	r3, [pc, #152]	@ (8018d9c <RadioIrqProcess+0x470>)
 8018d04:	2201      	movs	r2, #1
 8018d06:	2100      	movs	r1, #0
 8018d08:	2002      	movs	r0, #2
 8018d0a:	f001 fb25 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018d0e:	e02d      	b.n	8018d6c <RadioIrqProcess+0x440>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018d10:	4b23      	ldr	r3, [pc, #140]	@ (8018da0 <RadioIrqProcess+0x474>)
 8018d12:	2201      	movs	r2, #1
 8018d14:	2100      	movs	r1, #0
 8018d16:	2002      	movs	r0, #2
 8018d18:	f001 fb1e 	bl	801a358 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018d1c:	4b18      	ldr	r3, [pc, #96]	@ (8018d80 <RadioIrqProcess+0x454>)
 8018d1e:	785b      	ldrb	r3, [r3, #1]
 8018d20:	f083 0301 	eor.w	r3, r3, #1
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d002      	beq.n	8018d30 <RadioIrqProcess+0x404>
            SUBGRF_SetStandby( STDBY_RC );
 8018d2a:	2000      	movs	r0, #0
 8018d2c:	f000 fa3c 	bl	80191a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018d30:	4b19      	ldr	r3, [pc, #100]	@ (8018d98 <RadioIrqProcess+0x46c>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d01b      	beq.n	8018d70 <RadioIrqProcess+0x444>
 8018d38:	4b17      	ldr	r3, [pc, #92]	@ (8018d98 <RadioIrqProcess+0x46c>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	691b      	ldr	r3, [r3, #16]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d016      	beq.n	8018d70 <RadioIrqProcess+0x444>
            RadioEvents->RxError( );
 8018d42:	4b15      	ldr	r3, [pc, #84]	@ (8018d98 <RadioIrqProcess+0x46c>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	691b      	ldr	r3, [r3, #16]
 8018d48:	4798      	blx	r3
        break;
 8018d4a:	e011      	b.n	8018d70 <RadioIrqProcess+0x444>
        break;
 8018d4c:	bf00      	nop
 8018d4e:	e010      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d50:	bf00      	nop
 8018d52:	e00e      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d54:	bf00      	nop
 8018d56:	e00c      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d58:	bf00      	nop
 8018d5a:	e00a      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d5c:	bf00      	nop
 8018d5e:	e008      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d60:	bf00      	nop
 8018d62:	e006      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d64:	bf00      	nop
 8018d66:	e004      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d68:	bf00      	nop
 8018d6a:	e002      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d6c:	bf00      	nop
 8018d6e:	e000      	b.n	8018d72 <RadioIrqProcess+0x446>
        break;
 8018d70:	bf00      	nop
    }
}
 8018d72:	bf00      	nop
 8018d74:	3708      	adds	r7, #8
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bdb0      	pop	{r4, r5, r7, pc}
 8018d7a:	bf00      	nop
 8018d7c:	08021860 	.word	0x08021860
 8018d80:	2000133c 	.word	0x2000133c
 8018d84:	08018725 	.word	0x08018725
 8018d88:	08018749 	.word	0x08018749
 8018d8c:	0802186c 	.word	0x0802186c
 8018d90:	08021878 	.word	0x08021878
 8018d94:	200013b0 	.word	0x200013b0
 8018d98:	20001338 	.word	0x20001338
 8018d9c:	08021884 	.word	0x08021884
 8018da0:	08021890 	.word	0x08021890

08018da4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018da8:	4b09      	ldr	r3, [pc, #36]	@ (8018dd0 <RadioTxPrbs+0x2c>)
 8018daa:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018dae:	2101      	movs	r1, #1
 8018db0:	4618      	mov	r0, r3
 8018db2:	f001 f871 	bl	8019e98 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018db6:	4b07      	ldr	r3, [pc, #28]	@ (8018dd4 <RadioTxPrbs+0x30>)
 8018db8:	212d      	movs	r1, #45	@ 0x2d
 8018dba:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018dbe:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018dc0:	f000 fab5 	bl	801932e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018dc4:	4804      	ldr	r0, [pc, #16]	@ (8018dd8 <RadioTxPrbs+0x34>)
 8018dc6:	f000 fa0b 	bl	80191e0 <SUBGRF_SetTx>
}
 8018dca:	bf00      	nop
 8018dcc:	bd80      	pop	{r7, pc}
 8018dce:	bf00      	nop
 8018dd0:	2000133c 	.word	0x2000133c
 8018dd4:	08018725 	.word	0x08018725
 8018dd8:	000fffff 	.word	0x000fffff

08018ddc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b084      	sub	sp, #16
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	4603      	mov	r3, r0
 8018de4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018dea:	4618      	mov	r0, r3
 8018dec:	f001 f87c 	bl	8019ee8 <SUBGRF_SetRfTxPower>
 8018df0:	4603      	mov	r3, r0
 8018df2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018df4:	210e      	movs	r1, #14
 8018df6:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018dfa:	f000 ff59 	bl	8019cb0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018dfe:	7bfb      	ldrb	r3, [r7, #15]
 8018e00:	2101      	movs	r1, #1
 8018e02:	4618      	mov	r0, r3
 8018e04:	f001 f848 	bl	8019e98 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018e08:	f000 fa88 	bl	801931c <SUBGRF_SetTxContinuousWave>
}
 8018e0c:	bf00      	nop
 8018e0e:	3710      	adds	r7, #16
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bd80      	pop	{r7, pc}

08018e14 <RadioSetRxGenericConfig>:
}
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8018e14:	b480      	push	{r7}
 8018e16:	b085      	sub	sp, #20
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	60b9      	str	r1, [r7, #8]
 8018e1c:	607a      	str	r2, [r7, #4]
 8018e1e:	603b      	str	r3, [r7, #0]
 8018e20:	4603      	mov	r3, r0
 8018e22:	73fb      	strb	r3, [r7, #15]
    default:
        break;
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8018e24:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018e28:	4618      	mov	r0, r3
 8018e2a:	3714      	adds	r7, #20
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bc80      	pop	{r7}
 8018e30:	4770      	bx	lr

08018e32 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8018e32:	b480      	push	{r7}
 8018e34:	b085      	sub	sp, #20
 8018e36:	af00      	add	r7, sp, #0
 8018e38:	60b9      	str	r1, [r7, #8]
 8018e3a:	607b      	str	r3, [r7, #4]
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	73fb      	strb	r3, [r7, #15]
 8018e40:	4613      	mov	r3, r2
 8018e42:	73bb      	strb	r3, [r7, #14]
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8018e44:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018e48:	4618      	mov	r0, r3
 8018e4a:	3714      	adds	r7, #20
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	bc80      	pop	{r7}
 8018e50:	4770      	bx	lr

08018e52 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8018e52:	b480      	push	{r7}
 8018e54:	b085      	sub	sp, #20
 8018e56:	af00      	add	r7, sp, #0
 8018e58:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018e5a:	2301      	movs	r3, #1
 8018e5c:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8018e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e60:	4618      	mov	r0, r3
 8018e62:	3714      	adds	r7, #20
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bc80      	pop	{r7}
 8018e68:	4770      	bx	lr

08018e6a <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8018e6a:	b480      	push	{r7}
 8018e6c:	b083      	sub	sp, #12
 8018e6e:	af00      	add	r7, sp, #0
 8018e70:	6078      	str	r0, [r7, #4]
 8018e72:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018e74:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8018e76:	4618      	mov	r0, r3
 8018e78:	370c      	adds	r7, #12
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	bc80      	pop	{r7}
 8018e7e:	4770      	bx	lr

08018e80 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b084      	sub	sp, #16
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d002      	beq.n	8018e94 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8018f04 <SUBGRF_Init+0x84>)
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018e94:	f7e8 fc34 	bl	8001700 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018e98:	2002      	movs	r0, #2
 8018e9a:	f001 f901 	bl	801a0a0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8018f08 <SUBGRF_Init+0x88>)
 8018ea0:	2200      	movs	r2, #0
 8018ea2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018ea4:	2000      	movs	r0, #0
 8018ea6:	f000 f97f 	bl	80191a8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018eaa:	f7e9 fcb1 	bl	8002810 <RBI_IsTCXO>
 8018eae:	4603      	mov	r3, r0
 8018eb0:	2b01      	cmp	r3, #1
 8018eb2:	d10e      	bne.n	8018ed2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018eb4:	2140      	movs	r1, #64	@ 0x40
 8018eb6:	2001      	movs	r0, #1
 8018eb8:	f000 fb8a 	bl	80195d0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018ebc:	2100      	movs	r1, #0
 8018ebe:	f640 1011 	movw	r0, #2321	@ 0x911
 8018ec2:	f000 fef5 	bl	8019cb0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018ec6:	237f      	movs	r3, #127	@ 0x7f
 8018ec8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018eca:	7b38      	ldrb	r0, [r7, #12]
 8018ecc:	f000 fa8d 	bl	80193ea <SUBGRF_Calibrate>
 8018ed0:	e009      	b.n	8018ee6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018ed2:	2120      	movs	r1, #32
 8018ed4:	f640 1011 	movw	r0, #2321	@ 0x911
 8018ed8:	f000 feea 	bl	8019cb0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018edc:	2120      	movs	r1, #32
 8018ede:	f640 1012 	movw	r0, #2322	@ 0x912
 8018ee2:	f000 fee5 	bl	8019cb0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018ee6:	210e      	movs	r1, #14
 8018ee8:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018eec:	f000 fee0 	bl	8019cb0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8018ef0:	f7e9 fc72 	bl	80027d8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018ef4:	4b05      	ldr	r3, [pc, #20]	@ (8018f0c <SUBGRF_Init+0x8c>)
 8018ef6:	2201      	movs	r2, #1
 8018ef8:	701a      	strb	r2, [r3, #0]
}
 8018efa:	bf00      	nop
 8018efc:	3710      	adds	r7, #16
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}
 8018f02:	bf00      	nop
 8018f04:	200013d4 	.word	0x200013d4
 8018f08:	200013d0 	.word	0x200013d0
 8018f0c:	200013c8 	.word	0x200013c8

08018f10 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018f10:	b480      	push	{r7}
 8018f12:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018f14:	4b02      	ldr	r3, [pc, #8]	@ (8018f20 <SUBGRF_GetOperatingMode+0x10>)
 8018f16:	781b      	ldrb	r3, [r3, #0]
}
 8018f18:	4618      	mov	r0, r3
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bc80      	pop	{r7}
 8018f1e:	4770      	bx	lr
 8018f20:	200013c8 	.word	0x200013c8

08018f24 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b082      	sub	sp, #8
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	460b      	mov	r3, r1
 8018f2e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018f30:	78fb      	ldrb	r3, [r7, #3]
 8018f32:	461a      	mov	r2, r3
 8018f34:	6879      	ldr	r1, [r7, #4]
 8018f36:	2000      	movs	r0, #0
 8018f38:	f000 ff26 	bl	8019d88 <SUBGRF_WriteBuffer>
}
 8018f3c:	bf00      	nop
 8018f3e:	3708      	adds	r7, #8
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}

08018f44 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b086      	sub	sp, #24
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	60f8      	str	r0, [r7, #12]
 8018f4c:	60b9      	str	r1, [r7, #8]
 8018f4e:	4613      	mov	r3, r2
 8018f50:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018f52:	2300      	movs	r3, #0
 8018f54:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018f56:	f107 0317 	add.w	r3, r7, #23
 8018f5a:	4619      	mov	r1, r3
 8018f5c:	68b8      	ldr	r0, [r7, #8]
 8018f5e:	f000 fe29 	bl	8019bb4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018f62:	68bb      	ldr	r3, [r7, #8]
 8018f64:	781b      	ldrb	r3, [r3, #0]
 8018f66:	79fa      	ldrb	r2, [r7, #7]
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d201      	bcs.n	8018f70 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	e007      	b.n	8018f80 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018f70:	7df8      	ldrb	r0, [r7, #23]
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	781b      	ldrb	r3, [r3, #0]
 8018f76:	461a      	mov	r2, r3
 8018f78:	68f9      	ldr	r1, [r7, #12]
 8018f7a:	f000 ff27 	bl	8019dcc <SUBGRF_ReadBuffer>

    return 0;
 8018f7e:	2300      	movs	r3, #0
}
 8018f80:	4618      	mov	r0, r3
 8018f82:	3718      	adds	r7, #24
 8018f84:	46bd      	mov	sp, r7
 8018f86:	bd80      	pop	{r7, pc}

08018f88 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b084      	sub	sp, #16
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	60f8      	str	r0, [r7, #12]
 8018f90:	460b      	mov	r3, r1
 8018f92:	607a      	str	r2, [r7, #4]
 8018f94:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018f96:	7afb      	ldrb	r3, [r7, #11]
 8018f98:	4619      	mov	r1, r3
 8018f9a:	68f8      	ldr	r0, [r7, #12]
 8018f9c:	f7ff ffc2 	bl	8018f24 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	f000 f91d 	bl	80191e0 <SUBGRF_SetTx>
}
 8018fa6:	bf00      	nop
 8018fa8:	3710      	adds	r7, #16
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}

08018fae <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018fae:	b580      	push	{r7, lr}
 8018fb0:	b082      	sub	sp, #8
 8018fb2:	af00      	add	r7, sp, #0
 8018fb4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018fb6:	2208      	movs	r2, #8
 8018fb8:	6879      	ldr	r1, [r7, #4]
 8018fba:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8018fbe:	f000 fe9f 	bl	8019d00 <SUBGRF_WriteRegisters>
    return 0;
 8018fc2:	2300      	movs	r3, #0
}
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	3708      	adds	r7, #8
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}

08018fcc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018fd6:	88fb      	ldrh	r3, [r7, #6]
 8018fd8:	0a1b      	lsrs	r3, r3, #8
 8018fda:	b29b      	uxth	r3, r3
 8018fdc:	b2db      	uxtb	r3, r3
 8018fde:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018fe0:	88fb      	ldrh	r3, [r7, #6]
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018fe6:	f000 fb77 	bl	80196d8 <SUBGRF_GetPacketType>
 8018fea:	4603      	mov	r3, r0
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d108      	bne.n	8019002 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018ff0:	f107 030c 	add.w	r3, r7, #12
 8018ff4:	2202      	movs	r2, #2
 8018ff6:	4619      	mov	r1, r3
 8018ff8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018ffc:	f000 fe80 	bl	8019d00 <SUBGRF_WriteRegisters>
            break;
 8019000:	e000      	b.n	8019004 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019002:	bf00      	nop
    }
}
 8019004:	bf00      	nop
 8019006:	3710      	adds	r7, #16
 8019008:	46bd      	mov	sp, r7
 801900a:	bd80      	pop	{r7, pc}

0801900c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b084      	sub	sp, #16
 8019010:	af00      	add	r7, sp, #0
 8019012:	4603      	mov	r3, r0
 8019014:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019016:	88fb      	ldrh	r3, [r7, #6]
 8019018:	0a1b      	lsrs	r3, r3, #8
 801901a:	b29b      	uxth	r3, r3
 801901c:	b2db      	uxtb	r3, r3
 801901e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019020:	88fb      	ldrh	r3, [r7, #6]
 8019022:	b2db      	uxtb	r3, r3
 8019024:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019026:	f000 fb57 	bl	80196d8 <SUBGRF_GetPacketType>
 801902a:	4603      	mov	r3, r0
 801902c:	2b00      	cmp	r3, #0
 801902e:	d108      	bne.n	8019042 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019030:	f107 030c 	add.w	r3, r7, #12
 8019034:	2202      	movs	r2, #2
 8019036:	4619      	mov	r1, r3
 8019038:	f240 60be 	movw	r0, #1726	@ 0x6be
 801903c:	f000 fe60 	bl	8019d00 <SUBGRF_WriteRegisters>
            break;
 8019040:	e000      	b.n	8019044 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019042:	bf00      	nop
    }
}
 8019044:	bf00      	nop
 8019046:	3710      	adds	r7, #16
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b084      	sub	sp, #16
 8019050:	af00      	add	r7, sp, #0
 8019052:	4603      	mov	r3, r0
 8019054:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019056:	2300      	movs	r3, #0
 8019058:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801905a:	f000 fb3d 	bl	80196d8 <SUBGRF_GetPacketType>
 801905e:	4603      	mov	r3, r0
 8019060:	2b00      	cmp	r3, #0
 8019062:	d121      	bne.n	80190a8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019064:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019068:	f000 fe36 	bl	8019cd8 <SUBGRF_ReadRegister>
 801906c:	4603      	mov	r3, r0
 801906e:	f023 0301 	bic.w	r3, r3, #1
 8019072:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019074:	88fb      	ldrh	r3, [r7, #6]
 8019076:	0a1b      	lsrs	r3, r3, #8
 8019078:	b29b      	uxth	r3, r3
 801907a:	b25b      	sxtb	r3, r3
 801907c:	f003 0301 	and.w	r3, r3, #1
 8019080:	b25a      	sxtb	r2, r3
 8019082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019086:	4313      	orrs	r3, r2
 8019088:	b25b      	sxtb	r3, r3
 801908a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801908c:	7bfb      	ldrb	r3, [r7, #15]
 801908e:	4619      	mov	r1, r3
 8019090:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019094:	f000 fe0c 	bl	8019cb0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019098:	88fb      	ldrh	r3, [r7, #6]
 801909a:	b2db      	uxtb	r3, r3
 801909c:	4619      	mov	r1, r3
 801909e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80190a2:	f000 fe05 	bl	8019cb0 <SUBGRF_WriteRegister>
            break;
 80190a6:	e000      	b.n	80190aa <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80190a8:	bf00      	nop
    }
}
 80190aa:	bf00      	nop
 80190ac:	3710      	adds	r7, #16
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd80      	pop	{r7, pc}

080190b2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80190b2:	b580      	push	{r7, lr}
 80190b4:	b082      	sub	sp, #8
 80190b6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80190b8:	2300      	movs	r3, #0
 80190ba:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80190bc:	2300      	movs	r3, #0
 80190be:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80190c0:	2300      	movs	r3, #0
 80190c2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80190c4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80190c8:	f000 fe06 	bl	8019cd8 <SUBGRF_ReadRegister>
 80190cc:	4603      	mov	r3, r0
 80190ce:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80190d0:	79fb      	ldrb	r3, [r7, #7]
 80190d2:	f023 0301 	bic.w	r3, r3, #1
 80190d6:	b2db      	uxtb	r3, r3
 80190d8:	4619      	mov	r1, r3
 80190da:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80190de:	f000 fde7 	bl	8019cb0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80190e2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80190e6:	f000 fdf7 	bl	8019cd8 <SUBGRF_ReadRegister>
 80190ea:	4603      	mov	r3, r0
 80190ec:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80190ee:	79bb      	ldrb	r3, [r7, #6]
 80190f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80190f4:	b2db      	uxtb	r3, r3
 80190f6:	4619      	mov	r1, r3
 80190f8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80190fc:	f000 fdd8 	bl	8019cb0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019100:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019104:	f000 f88c 	bl	8019220 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019108:	463b      	mov	r3, r7
 801910a:	2204      	movs	r2, #4
 801910c:	4619      	mov	r1, r3
 801910e:	f640 0019 	movw	r0, #2073	@ 0x819
 8019112:	f000 fe17 	bl	8019d44 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019116:	2000      	movs	r0, #0
 8019118:	f000 f846 	bl	80191a8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801911c:	79fb      	ldrb	r3, [r7, #7]
 801911e:	4619      	mov	r1, r3
 8019120:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019124:	f000 fdc4 	bl	8019cb0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019128:	79bb      	ldrb	r3, [r7, #6]
 801912a:	4619      	mov	r1, r3
 801912c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019130:	f000 fdbe 	bl	8019cb0 <SUBGRF_WriteRegister>

    return number;
 8019134:	683b      	ldr	r3, [r7, #0]
}
 8019136:	4618      	mov	r0, r3
 8019138:	3708      	adds	r7, #8
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
	...

08019140 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b084      	sub	sp, #16
 8019144:	af00      	add	r7, sp, #0
 8019146:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019148:	2000      	movs	r0, #0
 801914a:	f7e9 fb4c 	bl	80027e6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801914e:	2002      	movs	r0, #2
 8019150:	f000 ffa6 	bl	801a0a0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019154:	793b      	ldrb	r3, [r7, #4]
 8019156:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801915a:	b2db      	uxtb	r3, r3
 801915c:	b25b      	sxtb	r3, r3
 801915e:	009b      	lsls	r3, r3, #2
 8019160:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019162:	793b      	ldrb	r3, [r7, #4]
 8019164:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019168:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801916a:	b25b      	sxtb	r3, r3
 801916c:	005b      	lsls	r3, r3, #1
 801916e:	b25b      	sxtb	r3, r3
 8019170:	4313      	orrs	r3, r2
 8019172:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019174:	793b      	ldrb	r3, [r7, #4]
 8019176:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801917a:	b2db      	uxtb	r3, r3
 801917c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801917e:	4313      	orrs	r3, r2
 8019180:	b25b      	sxtb	r3, r3
 8019182:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019184:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019186:	f107 030f 	add.w	r3, r7, #15
 801918a:	2201      	movs	r2, #1
 801918c:	4619      	mov	r1, r3
 801918e:	2084      	movs	r0, #132	@ 0x84
 8019190:	f000 fe3e 	bl	8019e10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019194:	4b03      	ldr	r3, [pc, #12]	@ (80191a4 <SUBGRF_SetSleep+0x64>)
 8019196:	2200      	movs	r2, #0
 8019198:	701a      	strb	r2, [r3, #0]
}
 801919a:	bf00      	nop
 801919c:	3710      	adds	r7, #16
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd80      	pop	{r7, pc}
 80191a2:	bf00      	nop
 80191a4:	200013c8 	.word	0x200013c8

080191a8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b082      	sub	sp, #8
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	4603      	mov	r3, r0
 80191b0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80191b2:	1dfb      	adds	r3, r7, #7
 80191b4:	2201      	movs	r2, #1
 80191b6:	4619      	mov	r1, r3
 80191b8:	2080      	movs	r0, #128	@ 0x80
 80191ba:	f000 fe29 	bl	8019e10 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80191be:	79fb      	ldrb	r3, [r7, #7]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d103      	bne.n	80191cc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80191c4:	4b05      	ldr	r3, [pc, #20]	@ (80191dc <SUBGRF_SetStandby+0x34>)
 80191c6:	2201      	movs	r2, #1
 80191c8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80191ca:	e002      	b.n	80191d2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80191cc:	4b03      	ldr	r3, [pc, #12]	@ (80191dc <SUBGRF_SetStandby+0x34>)
 80191ce:	2202      	movs	r2, #2
 80191d0:	701a      	strb	r2, [r3, #0]
}
 80191d2:	bf00      	nop
 80191d4:	3708      	adds	r7, #8
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd80      	pop	{r7, pc}
 80191da:	bf00      	nop
 80191dc:	200013c8 	.word	0x200013c8

080191e0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b084      	sub	sp, #16
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80191e8:	4b0c      	ldr	r3, [pc, #48]	@ (801921c <SUBGRF_SetTx+0x3c>)
 80191ea:	2204      	movs	r2, #4
 80191ec:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	0c1b      	lsrs	r3, r3, #16
 80191f2:	b2db      	uxtb	r3, r3
 80191f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	0a1b      	lsrs	r3, r3, #8
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	b2db      	uxtb	r3, r3
 8019202:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019204:	f107 030c 	add.w	r3, r7, #12
 8019208:	2203      	movs	r2, #3
 801920a:	4619      	mov	r1, r3
 801920c:	2083      	movs	r0, #131	@ 0x83
 801920e:	f000 fdff 	bl	8019e10 <SUBGRF_WriteCommand>
}
 8019212:	bf00      	nop
 8019214:	3710      	adds	r7, #16
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	200013c8 	.word	0x200013c8

08019220 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b084      	sub	sp, #16
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019228:	4b0c      	ldr	r3, [pc, #48]	@ (801925c <SUBGRF_SetRx+0x3c>)
 801922a:	2205      	movs	r2, #5
 801922c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	0c1b      	lsrs	r3, r3, #16
 8019232:	b2db      	uxtb	r3, r3
 8019234:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	0a1b      	lsrs	r3, r3, #8
 801923a:	b2db      	uxtb	r3, r3
 801923c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	b2db      	uxtb	r3, r3
 8019242:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019244:	f107 030c 	add.w	r3, r7, #12
 8019248:	2203      	movs	r2, #3
 801924a:	4619      	mov	r1, r3
 801924c:	2082      	movs	r0, #130	@ 0x82
 801924e:	f000 fddf 	bl	8019e10 <SUBGRF_WriteCommand>
}
 8019252:	bf00      	nop
 8019254:	3710      	adds	r7, #16
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}
 801925a:	bf00      	nop
 801925c:	200013c8 	.word	0x200013c8

08019260 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b084      	sub	sp, #16
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019268:	4b0e      	ldr	r3, [pc, #56]	@ (80192a4 <SUBGRF_SetRxBoosted+0x44>)
 801926a:	2205      	movs	r2, #5
 801926c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801926e:	2197      	movs	r1, #151	@ 0x97
 8019270:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019274:	f000 fd1c 	bl	8019cb0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	0c1b      	lsrs	r3, r3, #16
 801927c:	b2db      	uxtb	r3, r3
 801927e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	0a1b      	lsrs	r3, r3, #8
 8019284:	b2db      	uxtb	r3, r3
 8019286:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	b2db      	uxtb	r3, r3
 801928c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801928e:	f107 030c 	add.w	r3, r7, #12
 8019292:	2203      	movs	r2, #3
 8019294:	4619      	mov	r1, r3
 8019296:	2082      	movs	r0, #130	@ 0x82
 8019298:	f000 fdba 	bl	8019e10 <SUBGRF_WriteCommand>
}
 801929c:	bf00      	nop
 801929e:	3710      	adds	r7, #16
 80192a0:	46bd      	mov	sp, r7
 80192a2:	bd80      	pop	{r7, pc}
 80192a4:	200013c8 	.word	0x200013c8

080192a8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b084      	sub	sp, #16
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
 80192b0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	0c1b      	lsrs	r3, r3, #16
 80192b6:	b2db      	uxtb	r3, r3
 80192b8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	0a1b      	lsrs	r3, r3, #8
 80192be:	b2db      	uxtb	r3, r3
 80192c0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	b2db      	uxtb	r3, r3
 80192c6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	0c1b      	lsrs	r3, r3, #16
 80192cc:	b2db      	uxtb	r3, r3
 80192ce:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	0a1b      	lsrs	r3, r3, #8
 80192d4:	b2db      	uxtb	r3, r3
 80192d6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80192d8:	683b      	ldr	r3, [r7, #0]
 80192da:	b2db      	uxtb	r3, r3
 80192dc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80192de:	f107 0308 	add.w	r3, r7, #8
 80192e2:	2206      	movs	r2, #6
 80192e4:	4619      	mov	r1, r3
 80192e6:	2094      	movs	r0, #148	@ 0x94
 80192e8:	f000 fd92 	bl	8019e10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80192ec:	4b03      	ldr	r3, [pc, #12]	@ (80192fc <SUBGRF_SetRxDutyCycle+0x54>)
 80192ee:	2206      	movs	r2, #6
 80192f0:	701a      	strb	r2, [r3, #0]
}
 80192f2:	bf00      	nop
 80192f4:	3710      	adds	r7, #16
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bd80      	pop	{r7, pc}
 80192fa:	bf00      	nop
 80192fc:	200013c8 	.word	0x200013c8

08019300 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019300:	b580      	push	{r7, lr}
 8019302:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019304:	2200      	movs	r2, #0
 8019306:	2100      	movs	r1, #0
 8019308:	20c5      	movs	r0, #197	@ 0xc5
 801930a:	f000 fd81 	bl	8019e10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801930e:	4b02      	ldr	r3, [pc, #8]	@ (8019318 <SUBGRF_SetCad+0x18>)
 8019310:	2207      	movs	r2, #7
 8019312:	701a      	strb	r2, [r3, #0]
}
 8019314:	bf00      	nop
 8019316:	bd80      	pop	{r7, pc}
 8019318:	200013c8 	.word	0x200013c8

0801931c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019320:	2200      	movs	r2, #0
 8019322:	2100      	movs	r1, #0
 8019324:	20d1      	movs	r0, #209	@ 0xd1
 8019326:	f000 fd73 	bl	8019e10 <SUBGRF_WriteCommand>
}
 801932a:	bf00      	nop
 801932c:	bd80      	pop	{r7, pc}

0801932e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801932e:	b580      	push	{r7, lr}
 8019330:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019332:	2200      	movs	r2, #0
 8019334:	2100      	movs	r1, #0
 8019336:	20d2      	movs	r0, #210	@ 0xd2
 8019338:	f000 fd6a 	bl	8019e10 <SUBGRF_WriteCommand>
}
 801933c:	bf00      	nop
 801933e:	bd80      	pop	{r7, pc}

08019340 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b082      	sub	sp, #8
 8019344:	af00      	add	r7, sp, #0
 8019346:	4603      	mov	r3, r0
 8019348:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801934a:	1dfb      	adds	r3, r7, #7
 801934c:	2201      	movs	r2, #1
 801934e:	4619      	mov	r1, r3
 8019350:	209f      	movs	r0, #159	@ 0x9f
 8019352:	f000 fd5d 	bl	8019e10 <SUBGRF_WriteCommand>
}
 8019356:	bf00      	nop
 8019358:	3708      	adds	r7, #8
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}

0801935e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801935e:	b580      	push	{r7, lr}
 8019360:	b084      	sub	sp, #16
 8019362:	af00      	add	r7, sp, #0
 8019364:	4603      	mov	r3, r0
 8019366:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019368:	1dfb      	adds	r3, r7, #7
 801936a:	2201      	movs	r2, #1
 801936c:	4619      	mov	r1, r3
 801936e:	20a0      	movs	r0, #160	@ 0xa0
 8019370:	f000 fd4e 	bl	8019e10 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019374:	79fb      	ldrb	r3, [r7, #7]
 8019376:	2b3f      	cmp	r3, #63	@ 0x3f
 8019378:	d91c      	bls.n	80193b4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801937a:	79fb      	ldrb	r3, [r7, #7]
 801937c:	085b      	lsrs	r3, r3, #1
 801937e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019380:	2300      	movs	r3, #0
 8019382:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019384:	2300      	movs	r3, #0
 8019386:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019388:	e005      	b.n	8019396 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801938a:	7bfb      	ldrb	r3, [r7, #15]
 801938c:	089b      	lsrs	r3, r3, #2
 801938e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019390:	7bbb      	ldrb	r3, [r7, #14]
 8019392:	3301      	adds	r3, #1
 8019394:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019396:	7bfb      	ldrb	r3, [r7, #15]
 8019398:	2b1f      	cmp	r3, #31
 801939a:	d8f6      	bhi.n	801938a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801939c:	7bfb      	ldrb	r3, [r7, #15]
 801939e:	00db      	lsls	r3, r3, #3
 80193a0:	b2da      	uxtb	r2, r3
 80193a2:	7bbb      	ldrb	r3, [r7, #14]
 80193a4:	4413      	add	r3, r2
 80193a6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80193a8:	7b7b      	ldrb	r3, [r7, #13]
 80193aa:	4619      	mov	r1, r3
 80193ac:	f240 7006 	movw	r0, #1798	@ 0x706
 80193b0:	f000 fc7e 	bl	8019cb0 <SUBGRF_WriteRegister>
    }
}
 80193b4:	bf00      	nop
 80193b6:	3710      	adds	r7, #16
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}

080193bc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80193c2:	f7e9 fa2c 	bl	800281e <RBI_IsDCDC>
 80193c6:	4603      	mov	r3, r0
 80193c8:	2b01      	cmp	r3, #1
 80193ca:	d102      	bne.n	80193d2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80193cc:	2301      	movs	r3, #1
 80193ce:	71fb      	strb	r3, [r7, #7]
 80193d0:	e001      	b.n	80193d6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80193d2:	2300      	movs	r3, #0
 80193d4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80193d6:	1dfb      	adds	r3, r7, #7
 80193d8:	2201      	movs	r2, #1
 80193da:	4619      	mov	r1, r3
 80193dc:	2096      	movs	r0, #150	@ 0x96
 80193de:	f000 fd17 	bl	8019e10 <SUBGRF_WriteCommand>
}
 80193e2:	bf00      	nop
 80193e4:	3708      	adds	r7, #8
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}

080193ea <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80193ea:	b580      	push	{r7, lr}
 80193ec:	b084      	sub	sp, #16
 80193ee:	af00      	add	r7, sp, #0
 80193f0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80193f2:	793b      	ldrb	r3, [r7, #4]
 80193f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80193f8:	b2db      	uxtb	r3, r3
 80193fa:	b25b      	sxtb	r3, r3
 80193fc:	019b      	lsls	r3, r3, #6
 80193fe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019400:	793b      	ldrb	r3, [r7, #4]
 8019402:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019406:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019408:	b25b      	sxtb	r3, r3
 801940a:	015b      	lsls	r3, r3, #5
 801940c:	b25b      	sxtb	r3, r3
 801940e:	4313      	orrs	r3, r2
 8019410:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019412:	793b      	ldrb	r3, [r7, #4]
 8019414:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019418:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801941a:	b25b      	sxtb	r3, r3
 801941c:	011b      	lsls	r3, r3, #4
 801941e:	b25b      	sxtb	r3, r3
 8019420:	4313      	orrs	r3, r2
 8019422:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019424:	793b      	ldrb	r3, [r7, #4]
 8019426:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801942a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801942c:	b25b      	sxtb	r3, r3
 801942e:	00db      	lsls	r3, r3, #3
 8019430:	b25b      	sxtb	r3, r3
 8019432:	4313      	orrs	r3, r2
 8019434:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019436:	793b      	ldrb	r3, [r7, #4]
 8019438:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801943c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801943e:	b25b      	sxtb	r3, r3
 8019440:	009b      	lsls	r3, r3, #2
 8019442:	b25b      	sxtb	r3, r3
 8019444:	4313      	orrs	r3, r2
 8019446:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019448:	793b      	ldrb	r3, [r7, #4]
 801944a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801944e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019450:	b25b      	sxtb	r3, r3
 8019452:	005b      	lsls	r3, r3, #1
 8019454:	b25b      	sxtb	r3, r3
 8019456:	4313      	orrs	r3, r2
 8019458:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801945a:	793b      	ldrb	r3, [r7, #4]
 801945c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019460:	b2db      	uxtb	r3, r3
 8019462:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019464:	4313      	orrs	r3, r2
 8019466:	b25b      	sxtb	r3, r3
 8019468:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801946a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801946c:	f107 030f 	add.w	r3, r7, #15
 8019470:	2201      	movs	r2, #1
 8019472:	4619      	mov	r1, r3
 8019474:	2089      	movs	r0, #137	@ 0x89
 8019476:	f000 fccb 	bl	8019e10 <SUBGRF_WriteCommand>
}
 801947a:	bf00      	nop
 801947c:	3710      	adds	r7, #16
 801947e:	46bd      	mov	sp, r7
 8019480:	bd80      	pop	{r7, pc}
	...

08019484 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b084      	sub	sp, #16
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	4a1d      	ldr	r2, [pc, #116]	@ (8019504 <SUBGRF_CalibrateImage+0x80>)
 8019490:	4293      	cmp	r3, r2
 8019492:	d904      	bls.n	801949e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019494:	23e1      	movs	r3, #225	@ 0xe1
 8019496:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019498:	23e9      	movs	r3, #233	@ 0xe9
 801949a:	737b      	strb	r3, [r7, #13]
 801949c:	e027      	b.n	80194ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	4a19      	ldr	r2, [pc, #100]	@ (8019508 <SUBGRF_CalibrateImage+0x84>)
 80194a2:	4293      	cmp	r3, r2
 80194a4:	d904      	bls.n	80194b0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80194a6:	23d7      	movs	r3, #215	@ 0xd7
 80194a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80194aa:	23db      	movs	r3, #219	@ 0xdb
 80194ac:	737b      	strb	r3, [r7, #13]
 80194ae:	e01e      	b.n	80194ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	4a16      	ldr	r2, [pc, #88]	@ (801950c <SUBGRF_CalibrateImage+0x88>)
 80194b4:	4293      	cmp	r3, r2
 80194b6:	d904      	bls.n	80194c2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80194b8:	23c1      	movs	r3, #193	@ 0xc1
 80194ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80194bc:	23c5      	movs	r3, #197	@ 0xc5
 80194be:	737b      	strb	r3, [r7, #13]
 80194c0:	e015      	b.n	80194ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	4a12      	ldr	r2, [pc, #72]	@ (8019510 <SUBGRF_CalibrateImage+0x8c>)
 80194c6:	4293      	cmp	r3, r2
 80194c8:	d904      	bls.n	80194d4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80194ca:	2375      	movs	r3, #117	@ 0x75
 80194cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80194ce:	2381      	movs	r3, #129	@ 0x81
 80194d0:	737b      	strb	r3, [r7, #13]
 80194d2:	e00c      	b.n	80194ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	4a0f      	ldr	r2, [pc, #60]	@ (8019514 <SUBGRF_CalibrateImage+0x90>)
 80194d8:	4293      	cmp	r3, r2
 80194da:	d904      	bls.n	80194e6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80194dc:	236b      	movs	r3, #107	@ 0x6b
 80194de:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80194e0:	236f      	movs	r3, #111	@ 0x6f
 80194e2:	737b      	strb	r3, [r7, #13]
 80194e4:	e003      	b.n	80194ee <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80194e6:	2329      	movs	r3, #41	@ 0x29
 80194e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80194ea:	232b      	movs	r3, #43	@ 0x2b
 80194ec:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80194ee:	f107 030c 	add.w	r3, r7, #12
 80194f2:	2202      	movs	r2, #2
 80194f4:	4619      	mov	r1, r3
 80194f6:	2098      	movs	r0, #152	@ 0x98
 80194f8:	f000 fc8a 	bl	8019e10 <SUBGRF_WriteCommand>
}
 80194fc:	bf00      	nop
 80194fe:	3710      	adds	r7, #16
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}
 8019504:	35a4e900 	.word	0x35a4e900
 8019508:	32a9f880 	.word	0x32a9f880
 801950c:	2de54480 	.word	0x2de54480
 8019510:	1b6b0b00 	.word	0x1b6b0b00
 8019514:	1954fc40 	.word	0x1954fc40

08019518 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019518:	b590      	push	{r4, r7, lr}
 801951a:	b085      	sub	sp, #20
 801951c:	af00      	add	r7, sp, #0
 801951e:	4604      	mov	r4, r0
 8019520:	4608      	mov	r0, r1
 8019522:	4611      	mov	r1, r2
 8019524:	461a      	mov	r2, r3
 8019526:	4623      	mov	r3, r4
 8019528:	71fb      	strb	r3, [r7, #7]
 801952a:	4603      	mov	r3, r0
 801952c:	71bb      	strb	r3, [r7, #6]
 801952e:	460b      	mov	r3, r1
 8019530:	717b      	strb	r3, [r7, #5]
 8019532:	4613      	mov	r3, r2
 8019534:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019536:	79fb      	ldrb	r3, [r7, #7]
 8019538:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801953a:	79bb      	ldrb	r3, [r7, #6]
 801953c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801953e:	797b      	ldrb	r3, [r7, #5]
 8019540:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019542:	793b      	ldrb	r3, [r7, #4]
 8019544:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019546:	f107 030c 	add.w	r3, r7, #12
 801954a:	2204      	movs	r2, #4
 801954c:	4619      	mov	r1, r3
 801954e:	2095      	movs	r0, #149	@ 0x95
 8019550:	f000 fc5e 	bl	8019e10 <SUBGRF_WriteCommand>
}
 8019554:	bf00      	nop
 8019556:	3714      	adds	r7, #20
 8019558:	46bd      	mov	sp, r7
 801955a:	bd90      	pop	{r4, r7, pc}

0801955c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801955c:	b590      	push	{r4, r7, lr}
 801955e:	b085      	sub	sp, #20
 8019560:	af00      	add	r7, sp, #0
 8019562:	4604      	mov	r4, r0
 8019564:	4608      	mov	r0, r1
 8019566:	4611      	mov	r1, r2
 8019568:	461a      	mov	r2, r3
 801956a:	4623      	mov	r3, r4
 801956c:	80fb      	strh	r3, [r7, #6]
 801956e:	4603      	mov	r3, r0
 8019570:	80bb      	strh	r3, [r7, #4]
 8019572:	460b      	mov	r3, r1
 8019574:	807b      	strh	r3, [r7, #2]
 8019576:	4613      	mov	r3, r2
 8019578:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801957a:	88fb      	ldrh	r3, [r7, #6]
 801957c:	0a1b      	lsrs	r3, r3, #8
 801957e:	b29b      	uxth	r3, r3
 8019580:	b2db      	uxtb	r3, r3
 8019582:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019584:	88fb      	ldrh	r3, [r7, #6]
 8019586:	b2db      	uxtb	r3, r3
 8019588:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801958a:	88bb      	ldrh	r3, [r7, #4]
 801958c:	0a1b      	lsrs	r3, r3, #8
 801958e:	b29b      	uxth	r3, r3
 8019590:	b2db      	uxtb	r3, r3
 8019592:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019594:	88bb      	ldrh	r3, [r7, #4]
 8019596:	b2db      	uxtb	r3, r3
 8019598:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801959a:	887b      	ldrh	r3, [r7, #2]
 801959c:	0a1b      	lsrs	r3, r3, #8
 801959e:	b29b      	uxth	r3, r3
 80195a0:	b2db      	uxtb	r3, r3
 80195a2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80195a4:	887b      	ldrh	r3, [r7, #2]
 80195a6:	b2db      	uxtb	r3, r3
 80195a8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80195aa:	883b      	ldrh	r3, [r7, #0]
 80195ac:	0a1b      	lsrs	r3, r3, #8
 80195ae:	b29b      	uxth	r3, r3
 80195b0:	b2db      	uxtb	r3, r3
 80195b2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80195b4:	883b      	ldrh	r3, [r7, #0]
 80195b6:	b2db      	uxtb	r3, r3
 80195b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80195ba:	f107 0308 	add.w	r3, r7, #8
 80195be:	2208      	movs	r2, #8
 80195c0:	4619      	mov	r1, r3
 80195c2:	2008      	movs	r0, #8
 80195c4:	f000 fc24 	bl	8019e10 <SUBGRF_WriteCommand>
}
 80195c8:	bf00      	nop
 80195ca:	3714      	adds	r7, #20
 80195cc:	46bd      	mov	sp, r7
 80195ce:	bd90      	pop	{r4, r7, pc}

080195d0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b084      	sub	sp, #16
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	4603      	mov	r3, r0
 80195d8:	6039      	str	r1, [r7, #0]
 80195da:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80195dc:	79fb      	ldrb	r3, [r7, #7]
 80195de:	f003 0307 	and.w	r3, r3, #7
 80195e2:	b2db      	uxtb	r3, r3
 80195e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	0c1b      	lsrs	r3, r3, #16
 80195ea:	b2db      	uxtb	r3, r3
 80195ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	0a1b      	lsrs	r3, r3, #8
 80195f2:	b2db      	uxtb	r3, r3
 80195f4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80195f6:	683b      	ldr	r3, [r7, #0]
 80195f8:	b2db      	uxtb	r3, r3
 80195fa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80195fc:	f107 030c 	add.w	r3, r7, #12
 8019600:	2204      	movs	r2, #4
 8019602:	4619      	mov	r1, r3
 8019604:	2097      	movs	r0, #151	@ 0x97
 8019606:	f000 fc03 	bl	8019e10 <SUBGRF_WriteCommand>
}
 801960a:	bf00      	nop
 801960c:	3710      	adds	r7, #16
 801960e:	46bd      	mov	sp, r7
 8019610:	bd80      	pop	{r7, pc}
	...

08019614 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019614:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019618:	b084      	sub	sp, #16
 801961a:	af00      	add	r7, sp, #0
 801961c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801961e:	2300      	movs	r3, #0
 8019620:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019622:	4b1d      	ldr	r3, [pc, #116]	@ (8019698 <SUBGRF_SetRfFrequency+0x84>)
 8019624:	781b      	ldrb	r3, [r3, #0]
 8019626:	f083 0301 	eor.w	r3, r3, #1
 801962a:	b2db      	uxtb	r3, r3
 801962c:	2b00      	cmp	r3, #0
 801962e:	d005      	beq.n	801963c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019630:	6878      	ldr	r0, [r7, #4]
 8019632:	f7ff ff27 	bl	8019484 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8019636:	4b18      	ldr	r3, [pc, #96]	@ (8019698 <SUBGRF_SetRfFrequency+0x84>)
 8019638:	2201      	movs	r2, #1
 801963a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2200      	movs	r2, #0
 8019640:	461c      	mov	r4, r3
 8019642:	4615      	mov	r5, r2
 8019644:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019648:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801964c:	4a13      	ldr	r2, [pc, #76]	@ (801969c <SUBGRF_SetRfFrequency+0x88>)
 801964e:	f04f 0300 	mov.w	r3, #0
 8019652:	4640      	mov	r0, r8
 8019654:	4649      	mov	r1, r9
 8019656:	f7e7 fb71 	bl	8000d3c <__aeabi_uldivmod>
 801965a:	4602      	mov	r2, r0
 801965c:	460b      	mov	r3, r1
 801965e:	4613      	mov	r3, r2
 8019660:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	0e1b      	lsrs	r3, r3, #24
 8019666:	b2db      	uxtb	r3, r3
 8019668:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	0c1b      	lsrs	r3, r3, #16
 801966e:	b2db      	uxtb	r3, r3
 8019670:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	0a1b      	lsrs	r3, r3, #8
 8019676:	b2db      	uxtb	r3, r3
 8019678:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	b2db      	uxtb	r3, r3
 801967e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019680:	f107 0308 	add.w	r3, r7, #8
 8019684:	2204      	movs	r2, #4
 8019686:	4619      	mov	r1, r3
 8019688:	2086      	movs	r0, #134	@ 0x86
 801968a:	f000 fbc1 	bl	8019e10 <SUBGRF_WriteCommand>
}
 801968e:	bf00      	nop
 8019690:	3710      	adds	r7, #16
 8019692:	46bd      	mov	sp, r7
 8019694:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019698:	200013d0 	.word	0x200013d0
 801969c:	01e84800 	.word	0x01e84800

080196a0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b082      	sub	sp, #8
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	4603      	mov	r3, r0
 80196a8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80196aa:	79fa      	ldrb	r2, [r7, #7]
 80196ac:	4b09      	ldr	r3, [pc, #36]	@ (80196d4 <SUBGRF_SetPacketType+0x34>)
 80196ae:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80196b0:	79fb      	ldrb	r3, [r7, #7]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d104      	bne.n	80196c0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80196b6:	2100      	movs	r1, #0
 80196b8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80196bc:	f000 faf8 	bl	8019cb0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80196c0:	1dfb      	adds	r3, r7, #7
 80196c2:	2201      	movs	r2, #1
 80196c4:	4619      	mov	r1, r3
 80196c6:	208a      	movs	r0, #138	@ 0x8a
 80196c8:	f000 fba2 	bl	8019e10 <SUBGRF_WriteCommand>
}
 80196cc:	bf00      	nop
 80196ce:	3708      	adds	r7, #8
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd80      	pop	{r7, pc}
 80196d4:	200013c9 	.word	0x200013c9

080196d8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80196d8:	b480      	push	{r7}
 80196da:	af00      	add	r7, sp, #0
    return PacketType;
 80196dc:	4b02      	ldr	r3, [pc, #8]	@ (80196e8 <SUBGRF_GetPacketType+0x10>)
 80196de:	781b      	ldrb	r3, [r3, #0]
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bc80      	pop	{r7}
 80196e6:	4770      	bx	lr
 80196e8:	200013c9 	.word	0x200013c9

080196ec <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b084      	sub	sp, #16
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	4603      	mov	r3, r0
 80196f4:	71fb      	strb	r3, [r7, #7]
 80196f6:	460b      	mov	r3, r1
 80196f8:	71bb      	strb	r3, [r7, #6]
 80196fa:	4613      	mov	r3, r2
 80196fc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80196fe:	79fb      	ldrb	r3, [r7, #7]
 8019700:	2b01      	cmp	r3, #1
 8019702:	d149      	bne.n	8019798 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019704:	2000      	movs	r0, #0
 8019706:	f7e9 f891 	bl	800282c <RBI_GetRFOMaxPowerConfig>
 801970a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801970c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019710:	68fa      	ldr	r2, [r7, #12]
 8019712:	429a      	cmp	r2, r3
 8019714:	da01      	bge.n	801971a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	2b0e      	cmp	r3, #14
 801971e:	d10e      	bne.n	801973e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019720:	2301      	movs	r3, #1
 8019722:	2201      	movs	r2, #1
 8019724:	2100      	movs	r1, #0
 8019726:	2004      	movs	r0, #4
 8019728:	f7ff fef6 	bl	8019518 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801972c:	79ba      	ldrb	r2, [r7, #6]
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	b2db      	uxtb	r3, r3
 8019732:	1ad3      	subs	r3, r2, r3
 8019734:	b2db      	uxtb	r3, r3
 8019736:	330e      	adds	r3, #14
 8019738:	b2db      	uxtb	r3, r3
 801973a:	71bb      	strb	r3, [r7, #6]
 801973c:	e01f      	b.n	801977e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	2b0a      	cmp	r3, #10
 8019742:	d10e      	bne.n	8019762 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019744:	2301      	movs	r3, #1
 8019746:	2201      	movs	r2, #1
 8019748:	2100      	movs	r1, #0
 801974a:	2001      	movs	r0, #1
 801974c:	f7ff fee4 	bl	8019518 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019750:	79ba      	ldrb	r2, [r7, #6]
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	b2db      	uxtb	r3, r3
 8019756:	1ad3      	subs	r3, r2, r3
 8019758:	b2db      	uxtb	r3, r3
 801975a:	330d      	adds	r3, #13
 801975c:	b2db      	uxtb	r3, r3
 801975e:	71bb      	strb	r3, [r7, #6]
 8019760:	e00d      	b.n	801977e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8019762:	2301      	movs	r3, #1
 8019764:	2201      	movs	r2, #1
 8019766:	2100      	movs	r1, #0
 8019768:	2007      	movs	r0, #7
 801976a:	f7ff fed5 	bl	8019518 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801976e:	79ba      	ldrb	r2, [r7, #6]
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	b2db      	uxtb	r3, r3
 8019774:	1ad3      	subs	r3, r2, r3
 8019776:	b2db      	uxtb	r3, r3
 8019778:	330e      	adds	r3, #14
 801977a:	b2db      	uxtb	r3, r3
 801977c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801977e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019782:	f113 0f11 	cmn.w	r3, #17
 8019786:	da01      	bge.n	801978c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019788:	23ef      	movs	r3, #239	@ 0xef
 801978a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801978c:	2118      	movs	r1, #24
 801978e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019792:	f000 fa8d 	bl	8019cb0 <SUBGRF_WriteRegister>
 8019796:	e067      	b.n	8019868 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019798:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801979c:	f000 fa9c 	bl	8019cd8 <SUBGRF_ReadRegister>
 80197a0:	4603      	mov	r3, r0
 80197a2:	f043 031e 	orr.w	r3, r3, #30
 80197a6:	b2db      	uxtb	r3, r3
 80197a8:	4619      	mov	r1, r3
 80197aa:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80197ae:	f000 fa7f 	bl	8019cb0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80197b2:	2001      	movs	r0, #1
 80197b4:	f7e9 f83a 	bl	800282c <RBI_GetRFOMaxPowerConfig>
 80197b8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80197ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80197be:	68fa      	ldr	r2, [r7, #12]
 80197c0:	429a      	cmp	r2, r3
 80197c2:	da01      	bge.n	80197c8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	2b14      	cmp	r3, #20
 80197cc:	d10e      	bne.n	80197ec <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80197ce:	2301      	movs	r3, #1
 80197d0:	2200      	movs	r2, #0
 80197d2:	2105      	movs	r1, #5
 80197d4:	2003      	movs	r0, #3
 80197d6:	f7ff fe9f 	bl	8019518 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80197da:	79ba      	ldrb	r2, [r7, #6]
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	1ad3      	subs	r3, r2, r3
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	3316      	adds	r3, #22
 80197e6:	b2db      	uxtb	r3, r3
 80197e8:	71bb      	strb	r3, [r7, #6]
 80197ea:	e031      	b.n	8019850 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	2b11      	cmp	r3, #17
 80197f0:	d10e      	bne.n	8019810 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80197f2:	2301      	movs	r3, #1
 80197f4:	2200      	movs	r2, #0
 80197f6:	2103      	movs	r1, #3
 80197f8:	2002      	movs	r0, #2
 80197fa:	f7ff fe8d 	bl	8019518 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80197fe:	79ba      	ldrb	r2, [r7, #6]
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	b2db      	uxtb	r3, r3
 8019804:	1ad3      	subs	r3, r2, r3
 8019806:	b2db      	uxtb	r3, r3
 8019808:	3316      	adds	r3, #22
 801980a:	b2db      	uxtb	r3, r3
 801980c:	71bb      	strb	r3, [r7, #6]
 801980e:	e01f      	b.n	8019850 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	2b0e      	cmp	r3, #14
 8019814:	d10e      	bne.n	8019834 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019816:	2301      	movs	r3, #1
 8019818:	2200      	movs	r2, #0
 801981a:	2102      	movs	r1, #2
 801981c:	2002      	movs	r0, #2
 801981e:	f7ff fe7b 	bl	8019518 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019822:	79ba      	ldrb	r2, [r7, #6]
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	b2db      	uxtb	r3, r3
 8019828:	1ad3      	subs	r3, r2, r3
 801982a:	b2db      	uxtb	r3, r3
 801982c:	330e      	adds	r3, #14
 801982e:	b2db      	uxtb	r3, r3
 8019830:	71bb      	strb	r3, [r7, #6]
 8019832:	e00d      	b.n	8019850 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019834:	2301      	movs	r3, #1
 8019836:	2200      	movs	r2, #0
 8019838:	2107      	movs	r1, #7
 801983a:	2004      	movs	r0, #4
 801983c:	f7ff fe6c 	bl	8019518 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019840:	79ba      	ldrb	r2, [r7, #6]
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	b2db      	uxtb	r3, r3
 8019846:	1ad3      	subs	r3, r2, r3
 8019848:	b2db      	uxtb	r3, r3
 801984a:	3316      	adds	r3, #22
 801984c:	b2db      	uxtb	r3, r3
 801984e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019850:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019854:	f113 0f09 	cmn.w	r3, #9
 8019858:	da01      	bge.n	801985e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801985a:	23f7      	movs	r3, #247	@ 0xf7
 801985c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801985e:	2138      	movs	r1, #56	@ 0x38
 8019860:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019864:	f000 fa24 	bl	8019cb0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019868:	79bb      	ldrb	r3, [r7, #6]
 801986a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801986c:	797b      	ldrb	r3, [r7, #5]
 801986e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019870:	f107 0308 	add.w	r3, r7, #8
 8019874:	2202      	movs	r2, #2
 8019876:	4619      	mov	r1, r3
 8019878:	208e      	movs	r0, #142	@ 0x8e
 801987a:	f000 fac9 	bl	8019e10 <SUBGRF_WriteCommand>
}
 801987e:	bf00      	nop
 8019880:	3710      	adds	r7, #16
 8019882:	46bd      	mov	sp, r7
 8019884:	bd80      	pop	{r7, pc}
	...

08019888 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801988c:	b086      	sub	sp, #24
 801988e:	af00      	add	r7, sp, #0
 8019890:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019892:	2300      	movs	r3, #0
 8019894:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019896:	f107 0308 	add.w	r3, r7, #8
 801989a:	2200      	movs	r2, #0
 801989c:	601a      	str	r2, [r3, #0]
 801989e:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	781a      	ldrb	r2, [r3, #0]
 80198a4:	4b5c      	ldr	r3, [pc, #368]	@ (8019a18 <SUBGRF_SetModulationParams+0x190>)
 80198a6:	781b      	ldrb	r3, [r3, #0]
 80198a8:	429a      	cmp	r2, r3
 80198aa:	d004      	beq.n	80198b6 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	781b      	ldrb	r3, [r3, #0]
 80198b0:	4618      	mov	r0, r3
 80198b2:	f7ff fef5 	bl	80196a0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	781b      	ldrb	r3, [r3, #0]
 80198ba:	2b03      	cmp	r3, #3
 80198bc:	f200 80a5 	bhi.w	8019a0a <SUBGRF_SetModulationParams+0x182>
 80198c0:	a201      	add	r2, pc, #4	@ (adr r2, 80198c8 <SUBGRF_SetModulationParams+0x40>)
 80198c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198c6:	bf00      	nop
 80198c8:	080198d9 	.word	0x080198d9
 80198cc:	08019999 	.word	0x08019999
 80198d0:	0801995b 	.word	0x0801995b
 80198d4:	080199c7 	.word	0x080199c7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80198d8:	2308      	movs	r3, #8
 80198da:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	685b      	ldr	r3, [r3, #4]
 80198e0:	4a4e      	ldr	r2, [pc, #312]	@ (8019a1c <SUBGRF_SetModulationParams+0x194>)
 80198e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80198e6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80198e8:	697b      	ldr	r3, [r7, #20]
 80198ea:	0c1b      	lsrs	r3, r3, #16
 80198ec:	b2db      	uxtb	r3, r3
 80198ee:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	0a1b      	lsrs	r3, r3, #8
 80198f4:	b2db      	uxtb	r3, r3
 80198f6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80198f8:	697b      	ldr	r3, [r7, #20]
 80198fa:	b2db      	uxtb	r3, r3
 80198fc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	7b1b      	ldrb	r3, [r3, #12]
 8019902:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	7b5b      	ldrb	r3, [r3, #13]
 8019908:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	689b      	ldr	r3, [r3, #8]
 801990e:	2200      	movs	r2, #0
 8019910:	461c      	mov	r4, r3
 8019912:	4615      	mov	r5, r2
 8019914:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019918:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801991c:	4a40      	ldr	r2, [pc, #256]	@ (8019a20 <SUBGRF_SetModulationParams+0x198>)
 801991e:	f04f 0300 	mov.w	r3, #0
 8019922:	4640      	mov	r0, r8
 8019924:	4649      	mov	r1, r9
 8019926:	f7e7 fa09 	bl	8000d3c <__aeabi_uldivmod>
 801992a:	4602      	mov	r2, r0
 801992c:	460b      	mov	r3, r1
 801992e:	4613      	mov	r3, r2
 8019930:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019932:	697b      	ldr	r3, [r7, #20]
 8019934:	0c1b      	lsrs	r3, r3, #16
 8019936:	b2db      	uxtb	r3, r3
 8019938:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	0a1b      	lsrs	r3, r3, #8
 801993e:	b2db      	uxtb	r3, r3
 8019940:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019942:	697b      	ldr	r3, [r7, #20]
 8019944:	b2db      	uxtb	r3, r3
 8019946:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019948:	7cfb      	ldrb	r3, [r7, #19]
 801994a:	b29a      	uxth	r2, r3
 801994c:	f107 0308 	add.w	r3, r7, #8
 8019950:	4619      	mov	r1, r3
 8019952:	208b      	movs	r0, #139	@ 0x8b
 8019954:	f000 fa5c 	bl	8019e10 <SUBGRF_WriteCommand>
        break;
 8019958:	e058      	b.n	8019a0c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801995a:	2304      	movs	r3, #4
 801995c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	691b      	ldr	r3, [r3, #16]
 8019962:	4a2e      	ldr	r2, [pc, #184]	@ (8019a1c <SUBGRF_SetModulationParams+0x194>)
 8019964:	fbb2 f3f3 	udiv	r3, r2, r3
 8019968:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	0c1b      	lsrs	r3, r3, #16
 801996e:	b2db      	uxtb	r3, r3
 8019970:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	0a1b      	lsrs	r3, r3, #8
 8019976:	b2db      	uxtb	r3, r3
 8019978:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	b2db      	uxtb	r3, r3
 801997e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	7d1b      	ldrb	r3, [r3, #20]
 8019984:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019986:	7cfb      	ldrb	r3, [r7, #19]
 8019988:	b29a      	uxth	r2, r3
 801998a:	f107 0308 	add.w	r3, r7, #8
 801998e:	4619      	mov	r1, r3
 8019990:	208b      	movs	r0, #139	@ 0x8b
 8019992:	f000 fa3d 	bl	8019e10 <SUBGRF_WriteCommand>
        break;
 8019996:	e039      	b.n	8019a0c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8019998:	2304      	movs	r3, #4
 801999a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	7e1b      	ldrb	r3, [r3, #24]
 80199a0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	7e5b      	ldrb	r3, [r3, #25]
 80199a6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	7e9b      	ldrb	r3, [r3, #26]
 80199ac:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	7edb      	ldrb	r3, [r3, #27]
 80199b2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80199b4:	7cfb      	ldrb	r3, [r7, #19]
 80199b6:	b29a      	uxth	r2, r3
 80199b8:	f107 0308 	add.w	r3, r7, #8
 80199bc:	4619      	mov	r1, r3
 80199be:	208b      	movs	r0, #139	@ 0x8b
 80199c0:	f000 fa26 	bl	8019e10 <SUBGRF_WriteCommand>

        break;
 80199c4:	e022      	b.n	8019a0c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 80199c6:	2305      	movs	r3, #5
 80199c8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	685b      	ldr	r3, [r3, #4]
 80199ce:	4a13      	ldr	r2, [pc, #76]	@ (8019a1c <SUBGRF_SetModulationParams+0x194>)
 80199d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80199d4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80199d6:	697b      	ldr	r3, [r7, #20]
 80199d8:	0c1b      	lsrs	r3, r3, #16
 80199da:	b2db      	uxtb	r3, r3
 80199dc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80199de:	697b      	ldr	r3, [r7, #20]
 80199e0:	0a1b      	lsrs	r3, r3, #8
 80199e2:	b2db      	uxtb	r3, r3
 80199e4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80199e6:	697b      	ldr	r3, [r7, #20]
 80199e8:	b2db      	uxtb	r3, r3
 80199ea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	7b1b      	ldrb	r3, [r3, #12]
 80199f0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	7b5b      	ldrb	r3, [r3, #13]
 80199f6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80199f8:	7cfb      	ldrb	r3, [r7, #19]
 80199fa:	b29a      	uxth	r2, r3
 80199fc:	f107 0308 	add.w	r3, r7, #8
 8019a00:	4619      	mov	r1, r3
 8019a02:	208b      	movs	r0, #139	@ 0x8b
 8019a04:	f000 fa04 	bl	8019e10 <SUBGRF_WriteCommand>
        break;
 8019a08:	e000      	b.n	8019a0c <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019a0a:	bf00      	nop
    }
}
 8019a0c:	bf00      	nop
 8019a0e:	3718      	adds	r7, #24
 8019a10:	46bd      	mov	sp, r7
 8019a12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019a16:	bf00      	nop
 8019a18:	200013c9 	.word	0x200013c9
 8019a1c:	3d090000 	.word	0x3d090000
 8019a20:	01e84800 	.word	0x01e84800

08019a24 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b086      	sub	sp, #24
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019a30:	f107 030c 	add.w	r3, r7, #12
 8019a34:	2200      	movs	r2, #0
 8019a36:	601a      	str	r2, [r3, #0]
 8019a38:	605a      	str	r2, [r3, #4]
 8019a3a:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	781a      	ldrb	r2, [r3, #0]
 8019a40:	4b44      	ldr	r3, [pc, #272]	@ (8019b54 <SUBGRF_SetPacketParams+0x130>)
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	429a      	cmp	r2, r3
 8019a46:	d004      	beq.n	8019a52 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	781b      	ldrb	r3, [r3, #0]
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f7ff fe27 	bl	80196a0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	781b      	ldrb	r3, [r3, #0]
 8019a56:	2b03      	cmp	r3, #3
 8019a58:	d878      	bhi.n	8019b4c <SUBGRF_SetPacketParams+0x128>
 8019a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8019a60 <SUBGRF_SetPacketParams+0x3c>)
 8019a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a60:	08019a71 	.word	0x08019a71
 8019a64:	08019b01 	.word	0x08019b01
 8019a68:	08019af5 	.word	0x08019af5
 8019a6c:	08019a71 	.word	0x08019a71
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	7a5b      	ldrb	r3, [r3, #9]
 8019a74:	2bf1      	cmp	r3, #241	@ 0xf1
 8019a76:	d10a      	bne.n	8019a8e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019a78:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019a7c:	f7ff faa6 	bl	8018fcc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019a80:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019a84:	f7ff fac2 	bl	801900c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019a88:	2302      	movs	r3, #2
 8019a8a:	75bb      	strb	r3, [r7, #22]
 8019a8c:	e011      	b.n	8019ab2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	7a5b      	ldrb	r3, [r3, #9]
 8019a92:	2bf2      	cmp	r3, #242	@ 0xf2
 8019a94:	d10a      	bne.n	8019aac <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019a96:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019a9a:	f7ff fa97 	bl	8018fcc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019a9e:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019aa2:	f7ff fab3 	bl	801900c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019aa6:	2306      	movs	r3, #6
 8019aa8:	75bb      	strb	r3, [r7, #22]
 8019aaa:	e002      	b.n	8019ab2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	7a5b      	ldrb	r3, [r3, #9]
 8019ab0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019ab2:	2309      	movs	r3, #9
 8019ab4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	885b      	ldrh	r3, [r3, #2]
 8019aba:	0a1b      	lsrs	r3, r3, #8
 8019abc:	b29b      	uxth	r3, r3
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	885b      	ldrh	r3, [r3, #2]
 8019ac6:	b2db      	uxtb	r3, r3
 8019ac8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	791b      	ldrb	r3, [r3, #4]
 8019ace:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	795b      	ldrb	r3, [r3, #5]
 8019ad4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	799b      	ldrb	r3, [r3, #6]
 8019ada:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	79db      	ldrb	r3, [r3, #7]
 8019ae0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	7a1b      	ldrb	r3, [r3, #8]
 8019ae6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019ae8:	7dbb      	ldrb	r3, [r7, #22]
 8019aea:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	7a9b      	ldrb	r3, [r3, #10]
 8019af0:	753b      	strb	r3, [r7, #20]
        break;
 8019af2:	e022      	b.n	8019b3a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019af4:	2301      	movs	r3, #1
 8019af6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	7b1b      	ldrb	r3, [r3, #12]
 8019afc:	733b      	strb	r3, [r7, #12]
        break;
 8019afe:	e01c      	b.n	8019b3a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019b00:	2306      	movs	r3, #6
 8019b02:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	89db      	ldrh	r3, [r3, #14]
 8019b08:	0a1b      	lsrs	r3, r3, #8
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	b2db      	uxtb	r3, r3
 8019b0e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	89db      	ldrh	r3, [r3, #14]
 8019b14:	b2db      	uxtb	r3, r3
 8019b16:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	7c1a      	ldrb	r2, [r3, #16]
 8019b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8019b58 <SUBGRF_SetPacketParams+0x134>)
 8019b1e:	4611      	mov	r1, r2
 8019b20:	7019      	strb	r1, [r3, #0]
 8019b22:	4613      	mov	r3, r2
 8019b24:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	7c5b      	ldrb	r3, [r3, #17]
 8019b2a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	7c9b      	ldrb	r3, [r3, #18]
 8019b30:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	7cdb      	ldrb	r3, [r3, #19]
 8019b36:	747b      	strb	r3, [r7, #17]
        break;
 8019b38:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019b3a:	7dfb      	ldrb	r3, [r7, #23]
 8019b3c:	b29a      	uxth	r2, r3
 8019b3e:	f107 030c 	add.w	r3, r7, #12
 8019b42:	4619      	mov	r1, r3
 8019b44:	208c      	movs	r0, #140	@ 0x8c
 8019b46:	f000 f963 	bl	8019e10 <SUBGRF_WriteCommand>
 8019b4a:	e000      	b.n	8019b4e <SUBGRF_SetPacketParams+0x12a>
        return;
 8019b4c:	bf00      	nop
}
 8019b4e:	3718      	adds	r7, #24
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	200013c9 	.word	0x200013c9
 8019b58:	200013ca 	.word	0x200013ca

08019b5c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b084      	sub	sp, #16
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	4603      	mov	r3, r0
 8019b64:	460a      	mov	r2, r1
 8019b66:	71fb      	strb	r3, [r7, #7]
 8019b68:	4613      	mov	r3, r2
 8019b6a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019b6c:	79fb      	ldrb	r3, [r7, #7]
 8019b6e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019b70:	79bb      	ldrb	r3, [r7, #6]
 8019b72:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019b74:	f107 030c 	add.w	r3, r7, #12
 8019b78:	2202      	movs	r2, #2
 8019b7a:	4619      	mov	r1, r3
 8019b7c:	208f      	movs	r0, #143	@ 0x8f
 8019b7e:	f000 f947 	bl	8019e10 <SUBGRF_WriteCommand>
}
 8019b82:	bf00      	nop
 8019b84:	3710      	adds	r7, #16
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019b8a:	b580      	push	{r7, lr}
 8019b8c:	b082      	sub	sp, #8
 8019b8e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019b90:	2300      	movs	r3, #0
 8019b92:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019b94:	1d3b      	adds	r3, r7, #4
 8019b96:	2201      	movs	r2, #1
 8019b98:	4619      	mov	r1, r3
 8019b9a:	2015      	movs	r0, #21
 8019b9c:	f000 f95a 	bl	8019e54 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019ba0:	793b      	ldrb	r3, [r7, #4]
 8019ba2:	425b      	negs	r3, r3
 8019ba4:	105b      	asrs	r3, r3, #1
 8019ba6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019bac:	4618      	mov	r0, r3
 8019bae:	3708      	adds	r7, #8
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}

08019bb4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019bbe:	f107 030c 	add.w	r3, r7, #12
 8019bc2:	2202      	movs	r2, #2
 8019bc4:	4619      	mov	r1, r3
 8019bc6:	2013      	movs	r0, #19
 8019bc8:	f000 f944 	bl	8019e54 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019bcc:	f7ff fd84 	bl	80196d8 <SUBGRF_GetPacketType>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	2b01      	cmp	r3, #1
 8019bd4:	d10d      	bne.n	8019bf2 <SUBGRF_GetRxBufferStatus+0x3e>
 8019bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8019c08 <SUBGRF_GetRxBufferStatus+0x54>)
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	b2db      	uxtb	r3, r3
 8019bdc:	2b01      	cmp	r3, #1
 8019bde:	d108      	bne.n	8019bf2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019be0:	f240 7002 	movw	r0, #1794	@ 0x702
 8019be4:	f000 f878 	bl	8019cd8 <SUBGRF_ReadRegister>
 8019be8:	4603      	mov	r3, r0
 8019bea:	461a      	mov	r2, r3
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	701a      	strb	r2, [r3, #0]
 8019bf0:	e002      	b.n	8019bf8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019bf2:	7b3a      	ldrb	r2, [r7, #12]
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019bf8:	7b7a      	ldrb	r2, [r7, #13]
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	701a      	strb	r2, [r3, #0]
}
 8019bfe:	bf00      	nop
 8019c00:	3710      	adds	r7, #16
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}
 8019c06:	bf00      	nop
 8019c08:	200013ca 	.word	0x200013ca

08019c0c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b084      	sub	sp, #16
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019c14:	f107 030c 	add.w	r3, r7, #12
 8019c18:	2203      	movs	r2, #3
 8019c1a:	4619      	mov	r1, r3
 8019c1c:	2014      	movs	r0, #20
 8019c1e:	f000 f919 	bl	8019e54 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019c22:	f7ff fd59 	bl	80196d8 <SUBGRF_GetPacketType>
 8019c26:	4603      	mov	r3, r0
 8019c28:	461a      	mov	r2, r3
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	781b      	ldrb	r3, [r3, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d002      	beq.n	8019c3c <SUBGRF_GetPacketStatus+0x30>
 8019c36:	2b01      	cmp	r3, #1
 8019c38:	d013      	beq.n	8019c62 <SUBGRF_GetPacketStatus+0x56>
 8019c3a:	e02a      	b.n	8019c92 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019c3c:	7b3a      	ldrb	r2, [r7, #12]
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019c42:	7b7b      	ldrb	r3, [r7, #13]
 8019c44:	425b      	negs	r3, r3
 8019c46:	105b      	asrs	r3, r3, #1
 8019c48:	b25a      	sxtb	r2, r3
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019c4e:	7bbb      	ldrb	r3, [r7, #14]
 8019c50:	425b      	negs	r3, r3
 8019c52:	105b      	asrs	r3, r3, #1
 8019c54:	b25a      	sxtb	r2, r3
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	2200      	movs	r2, #0
 8019c5e:	609a      	str	r2, [r3, #8]
            break;
 8019c60:	e020      	b.n	8019ca4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019c62:	7b3b      	ldrb	r3, [r7, #12]
 8019c64:	425b      	negs	r3, r3
 8019c66:	105b      	asrs	r3, r3, #1
 8019c68:	b25a      	sxtb	r2, r3
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019c6e:	7b7b      	ldrb	r3, [r7, #13]
 8019c70:	b25b      	sxtb	r3, r3
 8019c72:	3302      	adds	r3, #2
 8019c74:	109b      	asrs	r3, r3, #2
 8019c76:	b25a      	sxtb	r2, r3
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019c7c:	7bbb      	ldrb	r3, [r7, #14]
 8019c7e:	425b      	negs	r3, r3
 8019c80:	105b      	asrs	r3, r3, #1
 8019c82:	b25a      	sxtb	r2, r3
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019c88:	4b08      	ldr	r3, [pc, #32]	@ (8019cac <SUBGRF_GetPacketStatus+0xa0>)
 8019c8a:	681a      	ldr	r2, [r3, #0]
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	611a      	str	r2, [r3, #16]
            break;
 8019c90:	e008      	b.n	8019ca4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019c92:	2214      	movs	r2, #20
 8019c94:	2100      	movs	r1, #0
 8019c96:	6878      	ldr	r0, [r7, #4]
 8019c98:	f000 fe7c 	bl	801a994 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	220f      	movs	r2, #15
 8019ca0:	701a      	strb	r2, [r3, #0]
            break;
 8019ca2:	bf00      	nop
    }
}
 8019ca4:	bf00      	nop
 8019ca6:	3710      	adds	r7, #16
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}
 8019cac:	200013cc 	.word	0x200013cc

08019cb0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b082      	sub	sp, #8
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	460a      	mov	r2, r1
 8019cba:	80fb      	strh	r3, [r7, #6]
 8019cbc:	4613      	mov	r3, r2
 8019cbe:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019cc0:	1d7a      	adds	r2, r7, #5
 8019cc2:	88f9      	ldrh	r1, [r7, #6]
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	4803      	ldr	r0, [pc, #12]	@ (8019cd4 <SUBGRF_WriteRegister+0x24>)
 8019cc8:	f7ee f85c 	bl	8007d84 <HAL_SUBGHZ_WriteRegisters>
}
 8019ccc:	bf00      	nop
 8019cce:	3708      	adds	r7, #8
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}
 8019cd4:	20000788 	.word	0x20000788

08019cd8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b084      	sub	sp, #16
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	4603      	mov	r3, r0
 8019ce0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019ce2:	f107 020f 	add.w	r2, r7, #15
 8019ce6:	88f9      	ldrh	r1, [r7, #6]
 8019ce8:	2301      	movs	r3, #1
 8019cea:	4804      	ldr	r0, [pc, #16]	@ (8019cfc <SUBGRF_ReadRegister+0x24>)
 8019cec:	f7ee f8a9 	bl	8007e42 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3710      	adds	r7, #16
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}
 8019cfa:	bf00      	nop
 8019cfc:	20000788 	.word	0x20000788

08019d00 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b086      	sub	sp, #24
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	4603      	mov	r3, r0
 8019d08:	6039      	str	r1, [r7, #0]
 8019d0a:	80fb      	strh	r3, [r7, #6]
 8019d0c:	4613      	mov	r3, r2
 8019d0e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d10:	f3ef 8310 	mrs	r3, PRIMASK
 8019d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d16:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d1a:	b672      	cpsid	i
}
 8019d1c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019d1e:	88bb      	ldrh	r3, [r7, #4]
 8019d20:	88f9      	ldrh	r1, [r7, #6]
 8019d22:	683a      	ldr	r2, [r7, #0]
 8019d24:	4806      	ldr	r0, [pc, #24]	@ (8019d40 <SUBGRF_WriteRegisters+0x40>)
 8019d26:	f7ee f82d 	bl	8007d84 <HAL_SUBGHZ_WriteRegisters>
 8019d2a:	697b      	ldr	r3, [r7, #20]
 8019d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d2e:	693b      	ldr	r3, [r7, #16]
 8019d30:	f383 8810 	msr	PRIMASK, r3
}
 8019d34:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019d36:	bf00      	nop
 8019d38:	3718      	adds	r7, #24
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd80      	pop	{r7, pc}
 8019d3e:	bf00      	nop
 8019d40:	20000788 	.word	0x20000788

08019d44 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b086      	sub	sp, #24
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	4603      	mov	r3, r0
 8019d4c:	6039      	str	r1, [r7, #0]
 8019d4e:	80fb      	strh	r3, [r7, #6]
 8019d50:	4613      	mov	r3, r2
 8019d52:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d54:	f3ef 8310 	mrs	r3, PRIMASK
 8019d58:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d5a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d5e:	b672      	cpsid	i
}
 8019d60:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019d62:	88bb      	ldrh	r3, [r7, #4]
 8019d64:	88f9      	ldrh	r1, [r7, #6]
 8019d66:	683a      	ldr	r2, [r7, #0]
 8019d68:	4806      	ldr	r0, [pc, #24]	@ (8019d84 <SUBGRF_ReadRegisters+0x40>)
 8019d6a:	f7ee f86a 	bl	8007e42 <HAL_SUBGHZ_ReadRegisters>
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d72:	693b      	ldr	r3, [r7, #16]
 8019d74:	f383 8810 	msr	PRIMASK, r3
}
 8019d78:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019d7a:	bf00      	nop
 8019d7c:	3718      	adds	r7, #24
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	bd80      	pop	{r7, pc}
 8019d82:	bf00      	nop
 8019d84:	20000788 	.word	0x20000788

08019d88 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b086      	sub	sp, #24
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	4603      	mov	r3, r0
 8019d90:	6039      	str	r1, [r7, #0]
 8019d92:	71fb      	strb	r3, [r7, #7]
 8019d94:	4613      	mov	r3, r2
 8019d96:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d98:	f3ef 8310 	mrs	r3, PRIMASK
 8019d9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019da0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019da2:	b672      	cpsid	i
}
 8019da4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019da6:	79bb      	ldrb	r3, [r7, #6]
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	79f9      	ldrb	r1, [r7, #7]
 8019dac:	683a      	ldr	r2, [r7, #0]
 8019dae:	4806      	ldr	r0, [pc, #24]	@ (8019dc8 <SUBGRF_WriteBuffer+0x40>)
 8019db0:	f7ee f95b 	bl	800806a <HAL_SUBGHZ_WriteBuffer>
 8019db4:	697b      	ldr	r3, [r7, #20]
 8019db6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019db8:	693b      	ldr	r3, [r7, #16]
 8019dba:	f383 8810 	msr	PRIMASK, r3
}
 8019dbe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019dc0:	bf00      	nop
 8019dc2:	3718      	adds	r7, #24
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	bd80      	pop	{r7, pc}
 8019dc8:	20000788 	.word	0x20000788

08019dcc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b086      	sub	sp, #24
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	6039      	str	r1, [r7, #0]
 8019dd6:	71fb      	strb	r3, [r7, #7]
 8019dd8:	4613      	mov	r3, r2
 8019dda:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8019de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8019de2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019de4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019de6:	b672      	cpsid	i
}
 8019de8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019dea:	79bb      	ldrb	r3, [r7, #6]
 8019dec:	b29b      	uxth	r3, r3
 8019dee:	79f9      	ldrb	r1, [r7, #7]
 8019df0:	683a      	ldr	r2, [r7, #0]
 8019df2:	4806      	ldr	r0, [pc, #24]	@ (8019e0c <SUBGRF_ReadBuffer+0x40>)
 8019df4:	f7ee f98c 	bl	8008110 <HAL_SUBGHZ_ReadBuffer>
 8019df8:	697b      	ldr	r3, [r7, #20]
 8019dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019dfc:	693b      	ldr	r3, [r7, #16]
 8019dfe:	f383 8810 	msr	PRIMASK, r3
}
 8019e02:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019e04:	bf00      	nop
 8019e06:	3718      	adds	r7, #24
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	bd80      	pop	{r7, pc}
 8019e0c:	20000788 	.word	0x20000788

08019e10 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b086      	sub	sp, #24
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	4603      	mov	r3, r0
 8019e18:	6039      	str	r1, [r7, #0]
 8019e1a:	71fb      	strb	r3, [r7, #7]
 8019e1c:	4613      	mov	r3, r2
 8019e1e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e20:	f3ef 8310 	mrs	r3, PRIMASK
 8019e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8019e26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e2a:	b672      	cpsid	i
}
 8019e2c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019e2e:	88bb      	ldrh	r3, [r7, #4]
 8019e30:	79f9      	ldrb	r1, [r7, #7]
 8019e32:	683a      	ldr	r2, [r7, #0]
 8019e34:	4806      	ldr	r0, [pc, #24]	@ (8019e50 <SUBGRF_WriteCommand+0x40>)
 8019e36:	f7ee f865 	bl	8007f04 <HAL_SUBGHZ_ExecSetCmd>
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e3e:	693b      	ldr	r3, [r7, #16]
 8019e40:	f383 8810 	msr	PRIMASK, r3
}
 8019e44:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019e46:	bf00      	nop
 8019e48:	3718      	adds	r7, #24
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	bd80      	pop	{r7, pc}
 8019e4e:	bf00      	nop
 8019e50:	20000788 	.word	0x20000788

08019e54 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b086      	sub	sp, #24
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	6039      	str	r1, [r7, #0]
 8019e5e:	71fb      	strb	r3, [r7, #7]
 8019e60:	4613      	mov	r3, r2
 8019e62:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e64:	f3ef 8310 	mrs	r3, PRIMASK
 8019e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8019e6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e6e:	b672      	cpsid	i
}
 8019e70:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019e72:	88bb      	ldrh	r3, [r7, #4]
 8019e74:	79f9      	ldrb	r1, [r7, #7]
 8019e76:	683a      	ldr	r2, [r7, #0]
 8019e78:	4806      	ldr	r0, [pc, #24]	@ (8019e94 <SUBGRF_ReadCommand+0x40>)
 8019e7a:	f7ee f8a2 	bl	8007fc2 <HAL_SUBGHZ_ExecGetCmd>
 8019e7e:	697b      	ldr	r3, [r7, #20]
 8019e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e82:	693b      	ldr	r3, [r7, #16]
 8019e84:	f383 8810 	msr	PRIMASK, r3
}
 8019e88:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019e8a:	bf00      	nop
 8019e8c:	3718      	adds	r7, #24
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bd80      	pop	{r7, pc}
 8019e92:	bf00      	nop
 8019e94:	20000788 	.word	0x20000788

08019e98 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b084      	sub	sp, #16
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	460a      	mov	r2, r1
 8019ea2:	71fb      	strb	r3, [r7, #7]
 8019ea4:	4613      	mov	r3, r2
 8019ea6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019ea8:	2301      	movs	r3, #1
 8019eaa:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019eac:	79bb      	ldrb	r3, [r7, #6]
 8019eae:	2b01      	cmp	r3, #1
 8019eb0:	d10d      	bne.n	8019ece <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019eb2:	79fb      	ldrb	r3, [r7, #7]
 8019eb4:	2b01      	cmp	r3, #1
 8019eb6:	d104      	bne.n	8019ec2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019eb8:	2302      	movs	r3, #2
 8019eba:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019ebc:	2004      	movs	r0, #4
 8019ebe:	f000 f8ef 	bl	801a0a0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019ec2:	79fb      	ldrb	r3, [r7, #7]
 8019ec4:	2b02      	cmp	r3, #2
 8019ec6:	d107      	bne.n	8019ed8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019ec8:	2303      	movs	r3, #3
 8019eca:	73fb      	strb	r3, [r7, #15]
 8019ecc:	e004      	b.n	8019ed8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019ece:	79bb      	ldrb	r3, [r7, #6]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d101      	bne.n	8019ed8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019ed4:	2301      	movs	r3, #1
 8019ed6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019ed8:	7bfb      	ldrb	r3, [r7, #15]
 8019eda:	4618      	mov	r0, r3
 8019edc:	f7e8 fc83 	bl	80027e6 <RBI_ConfigRFSwitch>
}
 8019ee0:	bf00      	nop
 8019ee2:	3710      	adds	r7, #16
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bd80      	pop	{r7, pc}

08019ee8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b084      	sub	sp, #16
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	4603      	mov	r3, r0
 8019ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019ef2:	2301      	movs	r3, #1
 8019ef4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019ef6:	f7e8 fc84 	bl	8002802 <RBI_GetTxConfig>
 8019efa:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	2b02      	cmp	r3, #2
 8019f00:	d016      	beq.n	8019f30 <SUBGRF_SetRfTxPower+0x48>
 8019f02:	68bb      	ldr	r3, [r7, #8]
 8019f04:	2b02      	cmp	r3, #2
 8019f06:	dc16      	bgt.n	8019f36 <SUBGRF_SetRfTxPower+0x4e>
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d003      	beq.n	8019f16 <SUBGRF_SetRfTxPower+0x2e>
 8019f0e:	68bb      	ldr	r3, [r7, #8]
 8019f10:	2b01      	cmp	r3, #1
 8019f12:	d00a      	beq.n	8019f2a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019f14:	e00f      	b.n	8019f36 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f1a:	2b0f      	cmp	r3, #15
 8019f1c:	dd02      	ble.n	8019f24 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019f1e:	2302      	movs	r3, #2
 8019f20:	73fb      	strb	r3, [r7, #15]
            break;
 8019f22:	e009      	b.n	8019f38 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019f24:	2301      	movs	r3, #1
 8019f26:	73fb      	strb	r3, [r7, #15]
            break;
 8019f28:	e006      	b.n	8019f38 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	73fb      	strb	r3, [r7, #15]
            break;
 8019f2e:	e003      	b.n	8019f38 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019f30:	2302      	movs	r3, #2
 8019f32:	73fb      	strb	r3, [r7, #15]
            break;
 8019f34:	e000      	b.n	8019f38 <SUBGRF_SetRfTxPower+0x50>
            break;
 8019f36:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019f38:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019f3c:	7bfb      	ldrb	r3, [r7, #15]
 8019f3e:	2202      	movs	r2, #2
 8019f40:	4618      	mov	r0, r3
 8019f42:	f7ff fbd3 	bl	80196ec <SUBGRF_SetTxParams>

    return paSelect;
 8019f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f48:	4618      	mov	r0, r3
 8019f4a:	3710      	adds	r7, #16
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}

08019f50 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019f50:	b480      	push	{r7}
 8019f52:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019f54:	2301      	movs	r3, #1
}
 8019f56:	4618      	mov	r0, r3
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bc80      	pop	{r7}
 8019f5c:	4770      	bx	lr
	...

08019f60 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b082      	sub	sp, #8
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019f68:	4b03      	ldr	r3, [pc, #12]	@ (8019f78 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	2001      	movs	r0, #1
 8019f6e:	4798      	blx	r3
}
 8019f70:	bf00      	nop
 8019f72:	3708      	adds	r7, #8
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bd80      	pop	{r7, pc}
 8019f78:	200013d4 	.word	0x200013d4

08019f7c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b082      	sub	sp, #8
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019f84:	4b03      	ldr	r3, [pc, #12]	@ (8019f94 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	2002      	movs	r0, #2
 8019f8a:	4798      	blx	r3
}
 8019f8c:	bf00      	nop
 8019f8e:	3708      	adds	r7, #8
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}
 8019f94:	200013d4 	.word	0x200013d4

08019f98 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b082      	sub	sp, #8
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019fa0:	4b03      	ldr	r3, [pc, #12]	@ (8019fb0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	2040      	movs	r0, #64	@ 0x40
 8019fa6:	4798      	blx	r3
}
 8019fa8:	bf00      	nop
 8019faa:	3708      	adds	r7, #8
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}
 8019fb0:	200013d4 	.word	0x200013d4

08019fb4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
 8019fbc:	460b      	mov	r3, r1
 8019fbe:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019fc0:	78fb      	ldrb	r3, [r7, #3]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d002      	beq.n	8019fcc <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019fc6:	2b01      	cmp	r3, #1
 8019fc8:	d005      	beq.n	8019fd6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019fca:	e00a      	b.n	8019fe2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019fcc:	4b07      	ldr	r3, [pc, #28]	@ (8019fec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	2080      	movs	r0, #128	@ 0x80
 8019fd2:	4798      	blx	r3
            break;
 8019fd4:	e005      	b.n	8019fe2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019fd6:	4b05      	ldr	r3, [pc, #20]	@ (8019fec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8019fde:	4798      	blx	r3
            break;
 8019fe0:	bf00      	nop
    }
}
 8019fe2:	bf00      	nop
 8019fe4:	3708      	adds	r7, #8
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}
 8019fea:	bf00      	nop
 8019fec:	200013d4 	.word	0x200013d4

08019ff0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b082      	sub	sp, #8
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019ff8:	4b04      	ldr	r3, [pc, #16]	@ (801a00c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a000:	4798      	blx	r3
}
 801a002:	bf00      	nop
 801a004:	3708      	adds	r7, #8
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}
 801a00a:	bf00      	nop
 801a00c:	200013d4 	.word	0x200013d4

0801a010 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a018:	4b03      	ldr	r3, [pc, #12]	@ (801a028 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	2020      	movs	r0, #32
 801a01e:	4798      	blx	r3
}
 801a020:	bf00      	nop
 801a022:	3708      	adds	r7, #8
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}
 801a028:	200013d4 	.word	0x200013d4

0801a02c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b082      	sub	sp, #8
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a034:	4b03      	ldr	r3, [pc, #12]	@ (801a044 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	2004      	movs	r0, #4
 801a03a:	4798      	blx	r3
}
 801a03c:	bf00      	nop
 801a03e:	3708      	adds	r7, #8
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}
 801a044:	200013d4 	.word	0x200013d4

0801a048 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a050:	4b03      	ldr	r3, [pc, #12]	@ (801a060 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	2008      	movs	r0, #8
 801a056:	4798      	blx	r3
}
 801a058:	bf00      	nop
 801a05a:	3708      	adds	r7, #8
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd80      	pop	{r7, pc}
 801a060:	200013d4 	.word	0x200013d4

0801a064 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a064:	b580      	push	{r7, lr}
 801a066:	b082      	sub	sp, #8
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a06c:	4b03      	ldr	r3, [pc, #12]	@ (801a07c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	2010      	movs	r0, #16
 801a072:	4798      	blx	r3
}
 801a074:	bf00      	nop
 801a076:	3708      	adds	r7, #8
 801a078:	46bd      	mov	sp, r7
 801a07a:	bd80      	pop	{r7, pc}
 801a07c:	200013d4 	.word	0x200013d4

0801a080 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a080:	b580      	push	{r7, lr}
 801a082:	b082      	sub	sp, #8
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801a088:	4b04      	ldr	r3, [pc, #16]	@ (801a09c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801a090:	4798      	blx	r3
}
 801a092:	bf00      	nop
 801a094:	3708      	adds	r7, #8
 801a096:	46bd      	mov	sp, r7
 801a098:	bd80      	pop	{r7, pc}
 801a09a:	bf00      	nop
 801a09c:	200013d4 	.word	0x200013d4

0801a0a0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b084      	sub	sp, #16
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a0aa:	f7e8 fbb8 	bl	800281e <RBI_IsDCDC>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	d112      	bne.n	801a0da <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a0b4:	f640 1023 	movw	r0, #2339	@ 0x923
 801a0b8:	f7ff fe0e 	bl	8019cd8 <SUBGRF_ReadRegister>
 801a0bc:	4603      	mov	r3, r0
 801a0be:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a0c0:	7bfb      	ldrb	r3, [r7, #15]
 801a0c2:	f023 0306 	bic.w	r3, r3, #6
 801a0c6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a0c8:	7bfa      	ldrb	r2, [r7, #15]
 801a0ca:	79fb      	ldrb	r3, [r7, #7]
 801a0cc:	4313      	orrs	r3, r2
 801a0ce:	b2db      	uxtb	r3, r3
 801a0d0:	4619      	mov	r1, r3
 801a0d2:	f640 1023 	movw	r0, #2339	@ 0x923
 801a0d6:	f7ff fdeb 	bl	8019cb0 <SUBGRF_WriteRegister>
  }
}
 801a0da:	bf00      	nop
 801a0dc:	3710      	adds	r7, #16
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	bd80      	pop	{r7, pc}
	...

0801a0e4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b085      	sub	sp, #20
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d101      	bne.n	801a0f6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a0f2:	231f      	movs	r3, #31
 801a0f4:	e017      	b.n	801a126 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	73fb      	strb	r3, [r7, #15]
 801a0fa:	e00f      	b.n	801a11c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a0fc:	7bfb      	ldrb	r3, [r7, #15]
 801a0fe:	4a0c      	ldr	r2, [pc, #48]	@ (801a130 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a104:	687a      	ldr	r2, [r7, #4]
 801a106:	429a      	cmp	r2, r3
 801a108:	d205      	bcs.n	801a116 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a10a:	7bfb      	ldrb	r3, [r7, #15]
 801a10c:	4a08      	ldr	r2, [pc, #32]	@ (801a130 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a10e:	00db      	lsls	r3, r3, #3
 801a110:	4413      	add	r3, r2
 801a112:	791b      	ldrb	r3, [r3, #4]
 801a114:	e007      	b.n	801a126 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a116:	7bfb      	ldrb	r3, [r7, #15]
 801a118:	3301      	adds	r3, #1
 801a11a:	73fb      	strb	r3, [r7, #15]
 801a11c:	7bfb      	ldrb	r3, [r7, #15]
 801a11e:	2b15      	cmp	r3, #21
 801a120:	d9ec      	bls.n	801a0fc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801a122:	bf00      	nop
 801a124:	e7fd      	b.n	801a122 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a126:	4618      	mov	r0, r3
 801a128:	3714      	adds	r7, #20
 801a12a:	46bd      	mov	sp, r7
 801a12c:	bc80      	pop	{r7}
 801a12e:	4770      	bx	lr
 801a130:	0802201c 	.word	0x0802201c

0801a134 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a134:	b580      	push	{r7, lr}
 801a136:	b08a      	sub	sp, #40	@ 0x28
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
 801a13c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a13e:	4b35      	ldr	r3, [pc, #212]	@ (801a214 <SUBGRF_GetCFO+0xe0>)
 801a140:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a142:	f640 0007 	movw	r0, #2055	@ 0x807
 801a146:	f7ff fdc7 	bl	8019cd8 <SUBGRF_ReadRegister>
 801a14a:	4603      	mov	r3, r0
 801a14c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a14e:	7ffb      	ldrb	r3, [r7, #31]
 801a150:	08db      	lsrs	r3, r3, #3
 801a152:	b2db      	uxtb	r3, r3
 801a154:	f003 0303 	and.w	r3, r3, #3
 801a158:	3328      	adds	r3, #40	@ 0x28
 801a15a:	443b      	add	r3, r7
 801a15c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a160:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a162:	7ffb      	ldrb	r3, [r7, #31]
 801a164:	f003 0307 	and.w	r3, r3, #7
 801a168:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801a16a:	7fba      	ldrb	r2, [r7, #30]
 801a16c:	7f7b      	ldrb	r3, [r7, #29]
 801a16e:	3301      	adds	r3, #1
 801a170:	fa02 f303 	lsl.w	r3, r2, r3
 801a174:	461a      	mov	r2, r3
 801a176:	4b28      	ldr	r3, [pc, #160]	@ (801a218 <SUBGRF_GetCFO+0xe4>)
 801a178:	fbb3 f3f2 	udiv	r3, r3, r2
 801a17c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a17e:	69ba      	ldr	r2, [r7, #24]
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	fbb2 f3f3 	udiv	r3, r2, r3
 801a186:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a188:	2301      	movs	r3, #1
 801a18a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a18e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a192:	697a      	ldr	r2, [r7, #20]
 801a194:	fb02 f303 	mul.w	r3, r2, r3
 801a198:	2b07      	cmp	r3, #7
 801a19a:	d802      	bhi.n	801a1a2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a19c:	2302      	movs	r3, #2
 801a19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a1a6:	697a      	ldr	r2, [r7, #20]
 801a1a8:	fb02 f303 	mul.w	r3, r2, r3
 801a1ac:	2b03      	cmp	r3, #3
 801a1ae:	d802      	bhi.n	801a1b6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a1b0:	2304      	movs	r3, #4
 801a1b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a1b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a1ba:	69bb      	ldr	r3, [r7, #24]
 801a1bc:	fb02 f303 	mul.w	r3, r2, r3
 801a1c0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a1c2:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a1c6:	f7ff fd87 	bl	8019cd8 <SUBGRF_ReadRegister>
 801a1ca:	4603      	mov	r3, r0
 801a1cc:	021b      	lsls	r3, r3, #8
 801a1ce:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a1d2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a1d4:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a1d8:	f7ff fd7e 	bl	8019cd8 <SUBGRF_ReadRegister>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	461a      	mov	r2, r3
 801a1e0:	6a3b      	ldr	r3, [r7, #32]
 801a1e2:	4313      	orrs	r3, r2
 801a1e4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a1e6:	6a3b      	ldr	r3, [r7, #32]
 801a1e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d005      	beq.n	801a1fc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a1f0:	6a3b      	ldr	r3, [r7, #32]
 801a1f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a1f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a1fa:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a1fc:	693b      	ldr	r3, [r7, #16]
 801a1fe:	095b      	lsrs	r3, r3, #5
 801a200:	6a3a      	ldr	r2, [r7, #32]
 801a202:	fb02 f303 	mul.w	r3, r2, r3
 801a206:	11da      	asrs	r2, r3, #7
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	601a      	str	r2, [r3, #0]
}
 801a20c:	bf00      	nop
 801a20e:	3728      	adds	r7, #40	@ 0x28
 801a210:	46bd      	mov	sp, r7
 801a212:	bd80      	pop	{r7, pc}
 801a214:	0c0a0804 	.word	0x0c0a0804
 801a218:	01e84800 	.word	0x01e84800

0801a21c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801a21c:	b480      	push	{r7}
 801a21e:	b087      	sub	sp, #28
 801a220:	af00      	add	r7, sp, #0
 801a222:	4603      	mov	r3, r0
 801a224:	60b9      	str	r1, [r7, #8]
 801a226:	607a      	str	r2, [r7, #4]
 801a228:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801a22a:	2300      	movs	r3, #0
 801a22c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801a22e:	f04f 33ff 	mov.w	r3, #4294967295
 801a232:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a234:	697b      	ldr	r3, [r7, #20]
}
 801a236:	4618      	mov	r0, r3
 801a238:	371c      	adds	r7, #28
 801a23a:	46bd      	mov	sp, r7
 801a23c:	bc80      	pop	{r7}
 801a23e:	4770      	bx	lr

0801a240 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801a240:	b480      	push	{r7}
 801a242:	b087      	sub	sp, #28
 801a244:	af00      	add	r7, sp, #0
 801a246:	4603      	mov	r3, r0
 801a248:	60b9      	str	r1, [r7, #8]
 801a24a:	607a      	str	r2, [r7, #4]
 801a24c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a24e:	2300      	movs	r3, #0
 801a250:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801a252:	f04f 33ff 	mov.w	r3, #4294967295
 801a256:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a258:	697b      	ldr	r3, [r7, #20]
}
 801a25a:	4618      	mov	r0, r3
 801a25c:	371c      	adds	r7, #28
 801a25e:	46bd      	mov	sp, r7
 801a260:	bc80      	pop	{r7}
 801a262:	4770      	bx	lr

0801a264 <RFW_DeInit>:
    return -1;
#endif /* RFW_ENABLE == 1 */
}

void RFW_DeInit( void )
{
 801a264:	b480      	push	{r7}
 801a266:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801a268:	bf00      	nop
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bc80      	pop	{r7}
 801a26e:	4770      	bx	lr

0801a270 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801a270:	b480      	push	{r7}
 801a272:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801a274:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a276:	4618      	mov	r0, r3
 801a278:	46bd      	mov	sp, r7
 801a27a:	bc80      	pop	{r7}
 801a27c:	4770      	bx	lr

0801a27e <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801a27e:	b480      	push	{r7}
 801a280:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801a282:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a284:	4618      	mov	r0, r3
 801a286:	46bd      	mov	sp, r7
 801a288:	bc80      	pop	{r7}
 801a28a:	4770      	bx	lr

0801a28c <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801a28c:	b480      	push	{r7}
 801a28e:	b083      	sub	sp, #12
 801a290:	af00      	add	r7, sp, #0
 801a292:	4603      	mov	r3, r0
 801a294:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801a296:	bf00      	nop
 801a298:	370c      	adds	r7, #12
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bc80      	pop	{r7}
 801a29e:	4770      	bx	lr

0801a2a0 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801a2a0:	b480      	push	{r7}
 801a2a2:	b087      	sub	sp, #28
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	60f8      	str	r0, [r7, #12]
 801a2a8:	460b      	mov	r3, r1
 801a2aa:	607a      	str	r2, [r7, #4]
 801a2ac:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801a2ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a2b2:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801a2b4:	697b      	ldr	r3, [r7, #20]
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	371c      	adds	r7, #28
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bc80      	pop	{r7}
 801a2be:	4770      	bx	lr

0801a2c0 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a2c0:	b480      	push	{r7}
 801a2c2:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801a2c4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bc80      	pop	{r7}
 801a2ce:	4770      	bx	lr

0801a2d0 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801a2d0:	b480      	push	{r7}
 801a2d2:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801a2d4:	bf00      	nop
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bc80      	pop	{r7}
 801a2da:	4770      	bx	lr

0801a2dc <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a2dc:	b480      	push	{r7}
 801a2de:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801a2e0:	bf00      	nop
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	bc80      	pop	{r7}
 801a2e6:	4770      	bx	lr

0801a2e8 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801a2e8:	b480      	push	{r7}
 801a2ea:	b083      	sub	sp, #12
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801a2f2:	bf00      	nop
 801a2f4:	370c      	adds	r7, #12
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	bc80      	pop	{r7}
 801a2fa:	4770      	bx	lr

0801a2fc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a300:	2218      	movs	r2, #24
 801a302:	2100      	movs	r1, #0
 801a304:	4807      	ldr	r0, [pc, #28]	@ (801a324 <UTIL_ADV_TRACE_Init+0x28>)
 801a306:	f000 fb45 	bl	801a994 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a30a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a30e:	2100      	movs	r1, #0
 801a310:	4805      	ldr	r0, [pc, #20]	@ (801a328 <UTIL_ADV_TRACE_Init+0x2c>)
 801a312:	f000 fb3f 	bl	801a994 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a316:	4b05      	ldr	r3, [pc, #20]	@ (801a32c <UTIL_ADV_TRACE_Init+0x30>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	4805      	ldr	r0, [pc, #20]	@ (801a330 <UTIL_ADV_TRACE_Init+0x34>)
 801a31c:	4798      	blx	r3
 801a31e:	4603      	mov	r3, r0
}
 801a320:	4618      	mov	r0, r3
 801a322:	bd80      	pop	{r7, pc}
 801a324:	200013d8 	.word	0x200013d8
 801a328:	200013f0 	.word	0x200013f0
 801a32c:	08021a64 	.word	0x08021a64
 801a330:	0801a59d 	.word	0x0801a59d

0801a334 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a334:	b480      	push	{r7}
 801a336:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a338:	4b06      	ldr	r3, [pc, #24]	@ (801a354 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a33a:	8a5a      	ldrh	r2, [r3, #18]
 801a33c:	4b05      	ldr	r3, [pc, #20]	@ (801a354 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a33e:	8a1b      	ldrh	r3, [r3, #16]
 801a340:	429a      	cmp	r2, r3
 801a342:	d101      	bne.n	801a348 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a344:	2301      	movs	r3, #1
 801a346:	e000      	b.n	801a34a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a348:	2300      	movs	r3, #0
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bc80      	pop	{r7}
 801a350:	4770      	bx	lr
 801a352:	bf00      	nop
 801a354:	200013d8 	.word	0x200013d8

0801a358 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a358:	b408      	push	{r3}
 801a35a:	b580      	push	{r7, lr}
 801a35c:	b08d      	sub	sp, #52	@ 0x34
 801a35e:	af00      	add	r7, sp, #0
 801a360:	60f8      	str	r0, [r7, #12]
 801a362:	60b9      	str	r1, [r7, #8]
 801a364:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a366:	2300      	movs	r3, #0
 801a368:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a36a:	2300      	movs	r3, #0
 801a36c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a36e:	4b37      	ldr	r3, [pc, #220]	@ (801a44c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a370:	7a1b      	ldrb	r3, [r3, #8]
 801a372:	461a      	mov	r2, r3
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	4293      	cmp	r3, r2
 801a378:	d902      	bls.n	801a380 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a37a:	f06f 0304 	mvn.w	r3, #4
 801a37e:	e05e      	b.n	801a43e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a380:	4b32      	ldr	r3, [pc, #200]	@ (801a44c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a382:	68da      	ldr	r2, [r3, #12]
 801a384:	68bb      	ldr	r3, [r7, #8]
 801a386:	4013      	ands	r3, r2
 801a388:	68ba      	ldr	r2, [r7, #8]
 801a38a:	429a      	cmp	r2, r3
 801a38c:	d002      	beq.n	801a394 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a38e:	f06f 0305 	mvn.w	r3, #5
 801a392:	e054      	b.n	801a43e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a394:	4b2d      	ldr	r3, [pc, #180]	@ (801a44c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a396:	685b      	ldr	r3, [r3, #4]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d00a      	beq.n	801a3b2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d007      	beq.n	801a3b2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a3a2:	4b2a      	ldr	r3, [pc, #168]	@ (801a44c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a3a4:	685b      	ldr	r3, [r3, #4]
 801a3a6:	f107 0116 	add.w	r1, r7, #22
 801a3aa:	f107 0218 	add.w	r2, r7, #24
 801a3ae:	4610      	mov	r0, r2
 801a3b0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a3b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801a3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a3bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a3c0:	4823      	ldr	r0, [pc, #140]	@ (801a450 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a3c2:	f001 f913 	bl	801b5ec <tiny_vsnprintf_like>
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801a3ca:	f000 f9f1 	bl	801a7b0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a3ce:	8afa      	ldrh	r2, [r7, #22]
 801a3d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a3d2:	4413      	add	r3, r2
 801a3d4:	b29b      	uxth	r3, r3
 801a3d6:	f107 0214 	add.w	r2, r7, #20
 801a3da:	4611      	mov	r1, r2
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f000 f969 	bl	801a6b4 <TRACE_AllocateBufer>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3e8:	d025      	beq.n	801a436 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801a3ee:	e00e      	b.n	801a40e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a3f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801a3f2:	8aba      	ldrh	r2, [r7, #20]
 801a3f4:	3330      	adds	r3, #48	@ 0x30
 801a3f6:	443b      	add	r3, r7
 801a3f8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a3fc:	4b15      	ldr	r3, [pc, #84]	@ (801a454 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a3fe:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a400:	8abb      	ldrh	r3, [r7, #20]
 801a402:	3301      	adds	r3, #1
 801a404:	b29b      	uxth	r3, r3
 801a406:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a408:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801a40a:	3301      	adds	r3, #1
 801a40c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801a40e:	8afb      	ldrh	r3, [r7, #22]
 801a410:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801a412:	429a      	cmp	r2, r3
 801a414:	d3ec      	bcc.n	801a3f0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a416:	8abb      	ldrh	r3, [r7, #20]
 801a418:	461a      	mov	r2, r3
 801a41a:	4b0e      	ldr	r3, [pc, #56]	@ (801a454 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a41c:	18d0      	adds	r0, r2, r3
 801a41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a420:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a422:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a426:	f001 f8e1 	bl	801b5ec <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a42a:	f000 f9df 	bl	801a7ec <TRACE_UnLock>

    return TRACE_Send();
 801a42e:	f000 f831 	bl	801a494 <TRACE_Send>
 801a432:	4603      	mov	r3, r0
 801a434:	e003      	b.n	801a43e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a436:	f000 f9d9 	bl	801a7ec <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a43a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a43e:	4618      	mov	r0, r3
 801a440:	3734      	adds	r7, #52	@ 0x34
 801a442:	46bd      	mov	sp, r7
 801a444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a448:	b001      	add	sp, #4
 801a44a:	4770      	bx	lr
 801a44c:	200013d8 	.word	0x200013d8
 801a450:	200017f0 	.word	0x200017f0
 801a454:	200013f0 	.word	0x200013f0

0801a458 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a458:	b480      	push	{r7}
 801a45a:	b083      	sub	sp, #12
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a460:	4a03      	ldr	r2, [pc, #12]	@ (801a470 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	6053      	str	r3, [r2, #4]
}
 801a466:	bf00      	nop
 801a468:	370c      	adds	r7, #12
 801a46a:	46bd      	mov	sp, r7
 801a46c:	bc80      	pop	{r7}
 801a46e:	4770      	bx	lr
 801a470:	200013d8 	.word	0x200013d8

0801a474 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a474:	b480      	push	{r7}
 801a476:	b083      	sub	sp, #12
 801a478:	af00      	add	r7, sp, #0
 801a47a:	4603      	mov	r3, r0
 801a47c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a47e:	4a04      	ldr	r2, [pc, #16]	@ (801a490 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a480:	79fb      	ldrb	r3, [r7, #7]
 801a482:	7213      	strb	r3, [r2, #8]
}
 801a484:	bf00      	nop
 801a486:	370c      	adds	r7, #12
 801a488:	46bd      	mov	sp, r7
 801a48a:	bc80      	pop	{r7}
 801a48c:	4770      	bx	lr
 801a48e:	bf00      	nop
 801a490:	200013d8 	.word	0x200013d8

0801a494 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b088      	sub	sp, #32
 801a498:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a49a:	2300      	movs	r3, #0
 801a49c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4a2:	f3ef 8310 	mrs	r3, PRIMASK
 801a4a6:	613b      	str	r3, [r7, #16]
  return(result);
 801a4a8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a4aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4ac:	b672      	cpsid	i
}
 801a4ae:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a4b0:	f000 f9ba 	bl	801a828 <TRACE_IsLocked>
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d15d      	bne.n	801a576 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a4ba:	f000 f979 	bl	801a7b0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a4be:	4b34      	ldr	r3, [pc, #208]	@ (801a590 <TRACE_Send+0xfc>)
 801a4c0:	8a1a      	ldrh	r2, [r3, #16]
 801a4c2:	4b33      	ldr	r3, [pc, #204]	@ (801a590 <TRACE_Send+0xfc>)
 801a4c4:	8a5b      	ldrh	r3, [r3, #18]
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d04d      	beq.n	801a566 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a4ca:	4b31      	ldr	r3, [pc, #196]	@ (801a590 <TRACE_Send+0xfc>)
 801a4cc:	789b      	ldrb	r3, [r3, #2]
 801a4ce:	2b01      	cmp	r3, #1
 801a4d0:	d117      	bne.n	801a502 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a4d2:	4b2f      	ldr	r3, [pc, #188]	@ (801a590 <TRACE_Send+0xfc>)
 801a4d4:	881a      	ldrh	r2, [r3, #0]
 801a4d6:	4b2e      	ldr	r3, [pc, #184]	@ (801a590 <TRACE_Send+0xfc>)
 801a4d8:	8a1b      	ldrh	r3, [r3, #16]
 801a4da:	1ad3      	subs	r3, r2, r3
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	4b2c      	ldr	r3, [pc, #176]	@ (801a590 <TRACE_Send+0xfc>)
 801a4e0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a4e2:	4b2b      	ldr	r3, [pc, #172]	@ (801a590 <TRACE_Send+0xfc>)
 801a4e4:	2202      	movs	r2, #2
 801a4e6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a4e8:	4b29      	ldr	r3, [pc, #164]	@ (801a590 <TRACE_Send+0xfc>)
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a4ee:	4b28      	ldr	r3, [pc, #160]	@ (801a590 <TRACE_Send+0xfc>)
 801a4f0:	8a9b      	ldrh	r3, [r3, #20]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d105      	bne.n	801a502 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a4f6:	4b26      	ldr	r3, [pc, #152]	@ (801a590 <TRACE_Send+0xfc>)
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a4fc:	4b24      	ldr	r3, [pc, #144]	@ (801a590 <TRACE_Send+0xfc>)
 801a4fe:	2200      	movs	r2, #0
 801a500:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a502:	4b23      	ldr	r3, [pc, #140]	@ (801a590 <TRACE_Send+0xfc>)
 801a504:	789b      	ldrb	r3, [r3, #2]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d115      	bne.n	801a536 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a50a:	4b21      	ldr	r3, [pc, #132]	@ (801a590 <TRACE_Send+0xfc>)
 801a50c:	8a5a      	ldrh	r2, [r3, #18]
 801a50e:	4b20      	ldr	r3, [pc, #128]	@ (801a590 <TRACE_Send+0xfc>)
 801a510:	8a1b      	ldrh	r3, [r3, #16]
 801a512:	429a      	cmp	r2, r3
 801a514:	d908      	bls.n	801a528 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a516:	4b1e      	ldr	r3, [pc, #120]	@ (801a590 <TRACE_Send+0xfc>)
 801a518:	8a5a      	ldrh	r2, [r3, #18]
 801a51a:	4b1d      	ldr	r3, [pc, #116]	@ (801a590 <TRACE_Send+0xfc>)
 801a51c:	8a1b      	ldrh	r3, [r3, #16]
 801a51e:	1ad3      	subs	r3, r2, r3
 801a520:	b29a      	uxth	r2, r3
 801a522:	4b1b      	ldr	r3, [pc, #108]	@ (801a590 <TRACE_Send+0xfc>)
 801a524:	829a      	strh	r2, [r3, #20]
 801a526:	e006      	b.n	801a536 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a528:	4b19      	ldr	r3, [pc, #100]	@ (801a590 <TRACE_Send+0xfc>)
 801a52a:	8a1b      	ldrh	r3, [r3, #16]
 801a52c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a530:	b29a      	uxth	r2, r3
 801a532:	4b17      	ldr	r3, [pc, #92]	@ (801a590 <TRACE_Send+0xfc>)
 801a534:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a536:	4b16      	ldr	r3, [pc, #88]	@ (801a590 <TRACE_Send+0xfc>)
 801a538:	8a1b      	ldrh	r3, [r3, #16]
 801a53a:	461a      	mov	r2, r3
 801a53c:	4b15      	ldr	r3, [pc, #84]	@ (801a594 <TRACE_Send+0x100>)
 801a53e:	4413      	add	r3, r2
 801a540:	61bb      	str	r3, [r7, #24]
 801a542:	697b      	ldr	r3, [r7, #20]
 801a544:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	f383 8810 	msr	PRIMASK, r3
}
 801a54c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a54e:	f7e7 f95b 	bl	8001808 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a552:	4b11      	ldr	r3, [pc, #68]	@ (801a598 <TRACE_Send+0x104>)
 801a554:	68db      	ldr	r3, [r3, #12]
 801a556:	4a0e      	ldr	r2, [pc, #56]	@ (801a590 <TRACE_Send+0xfc>)
 801a558:	8a92      	ldrh	r2, [r2, #20]
 801a55a:	4611      	mov	r1, r2
 801a55c:	69b8      	ldr	r0, [r7, #24]
 801a55e:	4798      	blx	r3
 801a560:	4603      	mov	r3, r0
 801a562:	77fb      	strb	r3, [r7, #31]
 801a564:	e00d      	b.n	801a582 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a566:	f000 f941 	bl	801a7ec <TRACE_UnLock>
 801a56a:	697b      	ldr	r3, [r7, #20]
 801a56c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a56e:	68bb      	ldr	r3, [r7, #8]
 801a570:	f383 8810 	msr	PRIMASK, r3
}
 801a574:	e005      	b.n	801a582 <TRACE_Send+0xee>
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	f383 8810 	msr	PRIMASK, r3
}
 801a580:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a582:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a586:	4618      	mov	r0, r3
 801a588:	3720      	adds	r7, #32
 801a58a:	46bd      	mov	sp, r7
 801a58c:	bd80      	pop	{r7, pc}
 801a58e:	bf00      	nop
 801a590:	200013d8 	.word	0x200013d8
 801a594:	200013f0 	.word	0x200013f0
 801a598:	08021a64 	.word	0x08021a64

0801a59c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b088      	sub	sp, #32
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5a8:	f3ef 8310 	mrs	r3, PRIMASK
 801a5ac:	617b      	str	r3, [r7, #20]
  return(result);
 801a5ae:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a5b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5b2:	b672      	cpsid	i
}
 801a5b4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a5b6:	4b3c      	ldr	r3, [pc, #240]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5b8:	789b      	ldrb	r3, [r3, #2]
 801a5ba:	2b02      	cmp	r3, #2
 801a5bc:	d106      	bne.n	801a5cc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a5be:	4b3a      	ldr	r3, [pc, #232]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a5c4:	4b38      	ldr	r3, [pc, #224]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	821a      	strh	r2, [r3, #16]
 801a5ca:	e00a      	b.n	801a5e2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a5cc:	4b36      	ldr	r3, [pc, #216]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5ce:	8a1a      	ldrh	r2, [r3, #16]
 801a5d0:	4b35      	ldr	r3, [pc, #212]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5d2:	8a9b      	ldrh	r3, [r3, #20]
 801a5d4:	4413      	add	r3, r2
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a5dc:	b29a      	uxth	r2, r3
 801a5de:	4b32      	ldr	r3, [pc, #200]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5e0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a5e2:	4b31      	ldr	r3, [pc, #196]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5e4:	8a1a      	ldrh	r2, [r3, #16]
 801a5e6:	4b30      	ldr	r3, [pc, #192]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5e8:	8a5b      	ldrh	r3, [r3, #18]
 801a5ea:	429a      	cmp	r2, r3
 801a5ec:	d04d      	beq.n	801a68a <TRACE_TxCpltCallback+0xee>
 801a5ee:	4b2e      	ldr	r3, [pc, #184]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5f0:	8adb      	ldrh	r3, [r3, #22]
 801a5f2:	2b01      	cmp	r3, #1
 801a5f4:	d149      	bne.n	801a68a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a5f6:	4b2c      	ldr	r3, [pc, #176]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a5f8:	789b      	ldrb	r3, [r3, #2]
 801a5fa:	2b01      	cmp	r3, #1
 801a5fc:	d117      	bne.n	801a62e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a5fe:	4b2a      	ldr	r3, [pc, #168]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a600:	881a      	ldrh	r2, [r3, #0]
 801a602:	4b29      	ldr	r3, [pc, #164]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a604:	8a1b      	ldrh	r3, [r3, #16]
 801a606:	1ad3      	subs	r3, r2, r3
 801a608:	b29a      	uxth	r2, r3
 801a60a:	4b27      	ldr	r3, [pc, #156]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a60c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a60e:	4b26      	ldr	r3, [pc, #152]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a610:	2202      	movs	r2, #2
 801a612:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a614:	4b24      	ldr	r3, [pc, #144]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a616:	2200      	movs	r2, #0
 801a618:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a61a:	4b23      	ldr	r3, [pc, #140]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a61c:	8a9b      	ldrh	r3, [r3, #20]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d105      	bne.n	801a62e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a622:	4b21      	ldr	r3, [pc, #132]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a624:	2200      	movs	r2, #0
 801a626:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a628:	4b1f      	ldr	r3, [pc, #124]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a62a:	2200      	movs	r2, #0
 801a62c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a62e:	4b1e      	ldr	r3, [pc, #120]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a630:	789b      	ldrb	r3, [r3, #2]
 801a632:	2b00      	cmp	r3, #0
 801a634:	d115      	bne.n	801a662 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a636:	4b1c      	ldr	r3, [pc, #112]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a638:	8a5a      	ldrh	r2, [r3, #18]
 801a63a:	4b1b      	ldr	r3, [pc, #108]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a63c:	8a1b      	ldrh	r3, [r3, #16]
 801a63e:	429a      	cmp	r2, r3
 801a640:	d908      	bls.n	801a654 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a642:	4b19      	ldr	r3, [pc, #100]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a644:	8a5a      	ldrh	r2, [r3, #18]
 801a646:	4b18      	ldr	r3, [pc, #96]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a648:	8a1b      	ldrh	r3, [r3, #16]
 801a64a:	1ad3      	subs	r3, r2, r3
 801a64c:	b29a      	uxth	r2, r3
 801a64e:	4b16      	ldr	r3, [pc, #88]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a650:	829a      	strh	r2, [r3, #20]
 801a652:	e006      	b.n	801a662 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a654:	4b14      	ldr	r3, [pc, #80]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a656:	8a1b      	ldrh	r3, [r3, #16]
 801a658:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a65c:	b29a      	uxth	r2, r3
 801a65e:	4b12      	ldr	r3, [pc, #72]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a660:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a662:	4b11      	ldr	r3, [pc, #68]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a664:	8a1b      	ldrh	r3, [r3, #16]
 801a666:	461a      	mov	r2, r3
 801a668:	4b10      	ldr	r3, [pc, #64]	@ (801a6ac <TRACE_TxCpltCallback+0x110>)
 801a66a:	4413      	add	r3, r2
 801a66c:	61fb      	str	r3, [r7, #28]
 801a66e:	69bb      	ldr	r3, [r7, #24]
 801a670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	f383 8810 	msr	PRIMASK, r3
}
 801a678:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a67a:	4b0d      	ldr	r3, [pc, #52]	@ (801a6b0 <TRACE_TxCpltCallback+0x114>)
 801a67c:	68db      	ldr	r3, [r3, #12]
 801a67e:	4a0a      	ldr	r2, [pc, #40]	@ (801a6a8 <TRACE_TxCpltCallback+0x10c>)
 801a680:	8a92      	ldrh	r2, [r2, #20]
 801a682:	4611      	mov	r1, r2
 801a684:	69f8      	ldr	r0, [r7, #28]
 801a686:	4798      	blx	r3
 801a688:	e00a      	b.n	801a6a0 <TRACE_TxCpltCallback+0x104>
 801a68a:	69bb      	ldr	r3, [r7, #24]
 801a68c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	f383 8810 	msr	PRIMASK, r3
}
 801a694:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a696:	f7e7 f8bf 	bl	8001818 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a69a:	f000 f8a7 	bl	801a7ec <TRACE_UnLock>
  }
}
 801a69e:	bf00      	nop
 801a6a0:	bf00      	nop
 801a6a2:	3720      	adds	r7, #32
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	bd80      	pop	{r7, pc}
 801a6a8:	200013d8 	.word	0x200013d8
 801a6ac:	200013f0 	.word	0x200013f0
 801a6b0:	08021a64 	.word	0x08021a64

0801a6b4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a6b4:	b480      	push	{r7}
 801a6b6:	b087      	sub	sp, #28
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	6039      	str	r1, [r7, #0]
 801a6be:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a6c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a6c4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6c6:	f3ef 8310 	mrs	r3, PRIMASK
 801a6ca:	60fb      	str	r3, [r7, #12]
  return(result);
 801a6cc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a6ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6d0:	b672      	cpsid	i
}
 801a6d2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a6d4:	4b35      	ldr	r3, [pc, #212]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a6d6:	8a5a      	ldrh	r2, [r3, #18]
 801a6d8:	4b34      	ldr	r3, [pc, #208]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a6da:	8a1b      	ldrh	r3, [r3, #16]
 801a6dc:	429a      	cmp	r2, r3
 801a6de:	d11b      	bne.n	801a718 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a6e0:	4b32      	ldr	r3, [pc, #200]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a6e2:	8a5b      	ldrh	r3, [r3, #18]
 801a6e4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a6e8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801a6ea:	88fa      	ldrh	r2, [r7, #6]
 801a6ec:	8afb      	ldrh	r3, [r7, #22]
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	d33a      	bcc.n	801a768 <TRACE_AllocateBufer+0xb4>
 801a6f2:	4b2e      	ldr	r3, [pc, #184]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a6f4:	8a1b      	ldrh	r3, [r3, #16]
 801a6f6:	88fa      	ldrh	r2, [r7, #6]
 801a6f8:	429a      	cmp	r2, r3
 801a6fa:	d235      	bcs.n	801a768 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a6fc:	4b2b      	ldr	r3, [pc, #172]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a6fe:	2201      	movs	r2, #1
 801a700:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a702:	4b2a      	ldr	r3, [pc, #168]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a704:	8a5a      	ldrh	r2, [r3, #18]
 801a706:	4b29      	ldr	r3, [pc, #164]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a708:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a70a:	4b28      	ldr	r3, [pc, #160]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a70c:	8a1b      	ldrh	r3, [r3, #16]
 801a70e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a710:	4b26      	ldr	r3, [pc, #152]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a712:	2200      	movs	r2, #0
 801a714:	825a      	strh	r2, [r3, #18]
 801a716:	e027      	b.n	801a768 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a718:	4b24      	ldr	r3, [pc, #144]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a71a:	8a5a      	ldrh	r2, [r3, #18]
 801a71c:	4b23      	ldr	r3, [pc, #140]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a71e:	8a1b      	ldrh	r3, [r3, #16]
 801a720:	429a      	cmp	r2, r3
 801a722:	d91b      	bls.n	801a75c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a724:	4b21      	ldr	r3, [pc, #132]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a726:	8a5b      	ldrh	r3, [r3, #18]
 801a728:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a72c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801a72e:	88fa      	ldrh	r2, [r7, #6]
 801a730:	8afb      	ldrh	r3, [r7, #22]
 801a732:	429a      	cmp	r2, r3
 801a734:	d318      	bcc.n	801a768 <TRACE_AllocateBufer+0xb4>
 801a736:	4b1d      	ldr	r3, [pc, #116]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a738:	8a1b      	ldrh	r3, [r3, #16]
 801a73a:	88fa      	ldrh	r2, [r7, #6]
 801a73c:	429a      	cmp	r2, r3
 801a73e:	d213      	bcs.n	801a768 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a740:	4b1a      	ldr	r3, [pc, #104]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a742:	2201      	movs	r2, #1
 801a744:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a746:	4b19      	ldr	r3, [pc, #100]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a748:	8a5a      	ldrh	r2, [r3, #18]
 801a74a:	4b18      	ldr	r3, [pc, #96]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a74c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a74e:	4b17      	ldr	r3, [pc, #92]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a750:	8a1b      	ldrh	r3, [r3, #16]
 801a752:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a754:	4b15      	ldr	r3, [pc, #84]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a756:	2200      	movs	r2, #0
 801a758:	825a      	strh	r2, [r3, #18]
 801a75a:	e005      	b.n	801a768 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801a75c:	4b13      	ldr	r3, [pc, #76]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a75e:	8a1a      	ldrh	r2, [r3, #16]
 801a760:	4b12      	ldr	r3, [pc, #72]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a762:	8a5b      	ldrh	r3, [r3, #18]
 801a764:	1ad3      	subs	r3, r2, r3
 801a766:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801a768:	8afa      	ldrh	r2, [r7, #22]
 801a76a:	88fb      	ldrh	r3, [r7, #6]
 801a76c:	429a      	cmp	r2, r3
 801a76e:	d90f      	bls.n	801a790 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801a770:	4b0e      	ldr	r3, [pc, #56]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a772:	8a5a      	ldrh	r2, [r3, #18]
 801a774:	683b      	ldr	r3, [r7, #0]
 801a776:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a778:	4b0c      	ldr	r3, [pc, #48]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a77a:	8a5a      	ldrh	r2, [r3, #18]
 801a77c:	88fb      	ldrh	r3, [r7, #6]
 801a77e:	4413      	add	r3, r2
 801a780:	b29b      	uxth	r3, r3
 801a782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a786:	b29a      	uxth	r2, r3
 801a788:	4b08      	ldr	r3, [pc, #32]	@ (801a7ac <TRACE_AllocateBufer+0xf8>)
 801a78a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801a78c:	2300      	movs	r3, #0
 801a78e:	82bb      	strh	r3, [r7, #20]
 801a790:	693b      	ldr	r3, [r7, #16]
 801a792:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	f383 8810 	msr	PRIMASK, r3
}
 801a79a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801a79c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	371c      	adds	r7, #28
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bc80      	pop	{r7}
 801a7a8:	4770      	bx	lr
 801a7aa:	bf00      	nop
 801a7ac:	200013d8 	.word	0x200013d8

0801a7b0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801a7b0:	b480      	push	{r7}
 801a7b2:	b085      	sub	sp, #20
 801a7b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7b6:	f3ef 8310 	mrs	r3, PRIMASK
 801a7ba:	607b      	str	r3, [r7, #4]
  return(result);
 801a7bc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a7be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7c0:	b672      	cpsid	i
}
 801a7c2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801a7c4:	4b08      	ldr	r3, [pc, #32]	@ (801a7e8 <TRACE_Lock+0x38>)
 801a7c6:	8adb      	ldrh	r3, [r3, #22]
 801a7c8:	3301      	adds	r3, #1
 801a7ca:	b29a      	uxth	r2, r3
 801a7cc:	4b06      	ldr	r3, [pc, #24]	@ (801a7e8 <TRACE_Lock+0x38>)
 801a7ce:	82da      	strh	r2, [r3, #22]
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	f383 8810 	msr	PRIMASK, r3
}
 801a7da:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a7dc:	bf00      	nop
 801a7de:	3714      	adds	r7, #20
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bc80      	pop	{r7}
 801a7e4:	4770      	bx	lr
 801a7e6:	bf00      	nop
 801a7e8:	200013d8 	.word	0x200013d8

0801a7ec <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801a7ec:	b480      	push	{r7}
 801a7ee:	b085      	sub	sp, #20
 801a7f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7f2:	f3ef 8310 	mrs	r3, PRIMASK
 801a7f6:	607b      	str	r3, [r7, #4]
  return(result);
 801a7f8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a7fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7fc:	b672      	cpsid	i
}
 801a7fe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801a800:	4b08      	ldr	r3, [pc, #32]	@ (801a824 <TRACE_UnLock+0x38>)
 801a802:	8adb      	ldrh	r3, [r3, #22]
 801a804:	3b01      	subs	r3, #1
 801a806:	b29a      	uxth	r2, r3
 801a808:	4b06      	ldr	r3, [pc, #24]	@ (801a824 <TRACE_UnLock+0x38>)
 801a80a:	82da      	strh	r2, [r3, #22]
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	f383 8810 	msr	PRIMASK, r3
}
 801a816:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a818:	bf00      	nop
 801a81a:	3714      	adds	r7, #20
 801a81c:	46bd      	mov	sp, r7
 801a81e:	bc80      	pop	{r7}
 801a820:	4770      	bx	lr
 801a822:	bf00      	nop
 801a824:	200013d8 	.word	0x200013d8

0801a828 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801a828:	b480      	push	{r7}
 801a82a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801a82c:	4b05      	ldr	r3, [pc, #20]	@ (801a844 <TRACE_IsLocked+0x1c>)
 801a82e:	8adb      	ldrh	r3, [r3, #22]
 801a830:	2b00      	cmp	r3, #0
 801a832:	bf14      	ite	ne
 801a834:	2301      	movne	r3, #1
 801a836:	2300      	moveq	r3, #0
 801a838:	b2db      	uxtb	r3, r3
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	46bd      	mov	sp, r7
 801a83e:	bc80      	pop	{r7}
 801a840:	4770      	bx	lr
 801a842:	bf00      	nop
 801a844:	200013d8 	.word	0x200013d8

0801a848 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a848:	b480      	push	{r7}
 801a84a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a84c:	4b04      	ldr	r3, [pc, #16]	@ (801a860 <UTIL_LPM_Init+0x18>)
 801a84e:	2200      	movs	r2, #0
 801a850:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a852:	4b04      	ldr	r3, [pc, #16]	@ (801a864 <UTIL_LPM_Init+0x1c>)
 801a854:	2200      	movs	r2, #0
 801a856:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a858:	bf00      	nop
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bc80      	pop	{r7}
 801a85e:	4770      	bx	lr
 801a860:	200019f0 	.word	0x200019f0
 801a864:	200019f4 	.word	0x200019f4

0801a868 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a868:	b480      	push	{r7}
 801a86a:	b087      	sub	sp, #28
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	6078      	str	r0, [r7, #4]
 801a870:	460b      	mov	r3, r1
 801a872:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a874:	f3ef 8310 	mrs	r3, PRIMASK
 801a878:	613b      	str	r3, [r7, #16]
  return(result);
 801a87a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a87c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a87e:	b672      	cpsid	i
}
 801a880:	bf00      	nop
  
  switch( state )
 801a882:	78fb      	ldrb	r3, [r7, #3]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d008      	beq.n	801a89a <UTIL_LPM_SetStopMode+0x32>
 801a888:	2b01      	cmp	r3, #1
 801a88a:	d10e      	bne.n	801a8aa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a88c:	4b0d      	ldr	r3, [pc, #52]	@ (801a8c4 <UTIL_LPM_SetStopMode+0x5c>)
 801a88e:	681a      	ldr	r2, [r3, #0]
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	4313      	orrs	r3, r2
 801a894:	4a0b      	ldr	r2, [pc, #44]	@ (801a8c4 <UTIL_LPM_SetStopMode+0x5c>)
 801a896:	6013      	str	r3, [r2, #0]
      break;
 801a898:	e008      	b.n	801a8ac <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	43da      	mvns	r2, r3
 801a89e:	4b09      	ldr	r3, [pc, #36]	@ (801a8c4 <UTIL_LPM_SetStopMode+0x5c>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	4013      	ands	r3, r2
 801a8a4:	4a07      	ldr	r2, [pc, #28]	@ (801a8c4 <UTIL_LPM_SetStopMode+0x5c>)
 801a8a6:	6013      	str	r3, [r2, #0]
      break;
 801a8a8:	e000      	b.n	801a8ac <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a8aa:	bf00      	nop
 801a8ac:	697b      	ldr	r3, [r7, #20]
 801a8ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	f383 8810 	msr	PRIMASK, r3
}
 801a8b6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a8b8:	bf00      	nop
 801a8ba:	371c      	adds	r7, #28
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bc80      	pop	{r7}
 801a8c0:	4770      	bx	lr
 801a8c2:	bf00      	nop
 801a8c4:	200019f0 	.word	0x200019f0

0801a8c8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b087      	sub	sp, #28
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8d4:	f3ef 8310 	mrs	r3, PRIMASK
 801a8d8:	613b      	str	r3, [r7, #16]
  return(result);
 801a8da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a8dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8de:	b672      	cpsid	i
}
 801a8e0:	bf00      	nop
  
  switch(state)
 801a8e2:	78fb      	ldrb	r3, [r7, #3]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d008      	beq.n	801a8fa <UTIL_LPM_SetOffMode+0x32>
 801a8e8:	2b01      	cmp	r3, #1
 801a8ea:	d10e      	bne.n	801a90a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a8ec:	4b0d      	ldr	r3, [pc, #52]	@ (801a924 <UTIL_LPM_SetOffMode+0x5c>)
 801a8ee:	681a      	ldr	r2, [r3, #0]
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	4313      	orrs	r3, r2
 801a8f4:	4a0b      	ldr	r2, [pc, #44]	@ (801a924 <UTIL_LPM_SetOffMode+0x5c>)
 801a8f6:	6013      	str	r3, [r2, #0]
      break;
 801a8f8:	e008      	b.n	801a90c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	43da      	mvns	r2, r3
 801a8fe:	4b09      	ldr	r3, [pc, #36]	@ (801a924 <UTIL_LPM_SetOffMode+0x5c>)
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	4013      	ands	r3, r2
 801a904:	4a07      	ldr	r2, [pc, #28]	@ (801a924 <UTIL_LPM_SetOffMode+0x5c>)
 801a906:	6013      	str	r3, [r2, #0]
      break;
 801a908:	e000      	b.n	801a90c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a90a:	bf00      	nop
 801a90c:	697b      	ldr	r3, [r7, #20]
 801a90e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	f383 8810 	msr	PRIMASK, r3
}
 801a916:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a918:	bf00      	nop
 801a91a:	371c      	adds	r7, #28
 801a91c:	46bd      	mov	sp, r7
 801a91e:	bc80      	pop	{r7}
 801a920:	4770      	bx	lr
 801a922:	bf00      	nop
 801a924:	200019f4 	.word	0x200019f4

0801a928 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b084      	sub	sp, #16
 801a92c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a92e:	f3ef 8310 	mrs	r3, PRIMASK
 801a932:	60bb      	str	r3, [r7, #8]
  return(result);
 801a934:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a936:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a938:	b672      	cpsid	i
}
 801a93a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a93c:	4b12      	ldr	r3, [pc, #72]	@ (801a988 <UTIL_LPM_EnterLowPower+0x60>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d006      	beq.n	801a952 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a944:	4b11      	ldr	r3, [pc, #68]	@ (801a98c <UTIL_LPM_EnterLowPower+0x64>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a94a:	4b10      	ldr	r3, [pc, #64]	@ (801a98c <UTIL_LPM_EnterLowPower+0x64>)
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	4798      	blx	r3
 801a950:	e010      	b.n	801a974 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a952:	4b0f      	ldr	r3, [pc, #60]	@ (801a990 <UTIL_LPM_EnterLowPower+0x68>)
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d006      	beq.n	801a968 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a95a:	4b0c      	ldr	r3, [pc, #48]	@ (801a98c <UTIL_LPM_EnterLowPower+0x64>)
 801a95c:	689b      	ldr	r3, [r3, #8]
 801a95e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a960:	4b0a      	ldr	r3, [pc, #40]	@ (801a98c <UTIL_LPM_EnterLowPower+0x64>)
 801a962:	68db      	ldr	r3, [r3, #12]
 801a964:	4798      	blx	r3
 801a966:	e005      	b.n	801a974 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a968:	4b08      	ldr	r3, [pc, #32]	@ (801a98c <UTIL_LPM_EnterLowPower+0x64>)
 801a96a:	691b      	ldr	r3, [r3, #16]
 801a96c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a96e:	4b07      	ldr	r3, [pc, #28]	@ (801a98c <UTIL_LPM_EnterLowPower+0x64>)
 801a970:	695b      	ldr	r3, [r3, #20]
 801a972:	4798      	blx	r3
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f383 8810 	msr	PRIMASK, r3
}
 801a97e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a980:	bf00      	nop
 801a982:	3710      	adds	r7, #16
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}
 801a988:	200019f0 	.word	0x200019f0
 801a98c:	08021a0c 	.word	0x08021a0c
 801a990:	200019f4 	.word	0x200019f4

0801a994 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a994:	b480      	push	{r7}
 801a996:	b085      	sub	sp, #20
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
 801a99c:	460b      	mov	r3, r1
 801a99e:	70fb      	strb	r3, [r7, #3]
 801a9a0:	4613      	mov	r3, r2
 801a9a2:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a9a8:	e004      	b.n	801a9b4 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	1c5a      	adds	r2, r3, #1
 801a9ae:	60fa      	str	r2, [r7, #12]
 801a9b0:	78fa      	ldrb	r2, [r7, #3]
 801a9b2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a9b4:	883b      	ldrh	r3, [r7, #0]
 801a9b6:	1e5a      	subs	r2, r3, #1
 801a9b8:	803a      	strh	r2, [r7, #0]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d1f5      	bne.n	801a9aa <UTIL_MEM_set_8+0x16>
  }
}
 801a9be:	bf00      	nop
 801a9c0:	bf00      	nop
 801a9c2:	3714      	adds	r7, #20
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bc80      	pop	{r7}
 801a9c8:	4770      	bx	lr
	...

0801a9cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a9cc:	b580      	push	{r7, lr}
 801a9ce:	b090      	sub	sp, #64	@ 0x40
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a9d4:	4b73      	ldr	r3, [pc, #460]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a9da:	4b72      	ldr	r3, [pc, #456]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801a9dc:	681a      	ldr	r2, [r3, #0]
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	4013      	ands	r3, r2
 801a9e2:	4a70      	ldr	r2, [pc, #448]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801a9e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a9e6:	4b70      	ldr	r3, [pc, #448]	@ (801aba8 <UTIL_SEQ_Run+0x1dc>)
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a9ec:	4b6f      	ldr	r3, [pc, #444]	@ (801abac <UTIL_SEQ_Run+0x1e0>)
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a9f2:	4b6f      	ldr	r3, [pc, #444]	@ (801abb0 <UTIL_SEQ_Run+0x1e4>)
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a9f8:	4b6e      	ldr	r3, [pc, #440]	@ (801abb4 <UTIL_SEQ_Run+0x1e8>)
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a9fe:	e08d      	b.n	801ab1c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801aa00:	2300      	movs	r3, #0
 801aa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801aa04:	e002      	b.n	801aa0c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801aa06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa08:	3301      	adds	r3, #1
 801aa0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801aa0c:	4a6a      	ldr	r2, [pc, #424]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aa0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa16:	401a      	ands	r2, r3
 801aa18:	4b62      	ldr	r3, [pc, #392]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	4013      	ands	r3, r2
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d0f1      	beq.n	801aa06 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801aa22:	4a65      	ldr	r2, [pc, #404]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aa24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa2c:	401a      	ands	r2, r3
 801aa2e:	4b5d      	ldr	r3, [pc, #372]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	4013      	ands	r3, r2
 801aa34:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801aa36:	4a60      	ldr	r2, [pc, #384]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aa38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa3a:	00db      	lsls	r3, r3, #3
 801aa3c:	4413      	add	r3, r2
 801aa3e:	685a      	ldr	r2, [r3, #4]
 801aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa42:	4013      	ands	r3, r2
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d106      	bne.n	801aa56 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801aa48:	4a5b      	ldr	r2, [pc, #364]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aa4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa4c:	00db      	lsls	r3, r3, #3
 801aa4e:	4413      	add	r3, r2
 801aa50:	f04f 32ff 	mov.w	r2, #4294967295
 801aa54:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801aa56:	4a58      	ldr	r2, [pc, #352]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aa58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa5a:	00db      	lsls	r3, r3, #3
 801aa5c:	4413      	add	r3, r2
 801aa5e:	685a      	ldr	r2, [r3, #4]
 801aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa62:	4013      	ands	r3, r2
 801aa64:	4618      	mov	r0, r3
 801aa66:	f000 f907 	bl	801ac78 <SEQ_BitPosition>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	461a      	mov	r2, r3
 801aa6e:	4b53      	ldr	r3, [pc, #332]	@ (801abbc <UTIL_SEQ_Run+0x1f0>)
 801aa70:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801aa72:	4a51      	ldr	r2, [pc, #324]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aa74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa76:	00db      	lsls	r3, r3, #3
 801aa78:	4413      	add	r3, r2
 801aa7a:	685a      	ldr	r2, [r3, #4]
 801aa7c:	4b4f      	ldr	r3, [pc, #316]	@ (801abbc <UTIL_SEQ_Run+0x1f0>)
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2101      	movs	r1, #1
 801aa82:	fa01 f303 	lsl.w	r3, r1, r3
 801aa86:	43db      	mvns	r3, r3
 801aa88:	401a      	ands	r2, r3
 801aa8a:	494b      	ldr	r1, [pc, #300]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aa8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa8e:	00db      	lsls	r3, r3, #3
 801aa90:	440b      	add	r3, r1
 801aa92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa94:	f3ef 8310 	mrs	r3, PRIMASK
 801aa98:	61bb      	str	r3, [r7, #24]
  return(result);
 801aa9a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801aa9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa9e:	b672      	cpsid	i
}
 801aaa0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801aaa2:	4b46      	ldr	r3, [pc, #280]	@ (801abbc <UTIL_SEQ_Run+0x1f0>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	2201      	movs	r2, #1
 801aaa8:	fa02 f303 	lsl.w	r3, r2, r3
 801aaac:	43da      	mvns	r2, r3
 801aaae:	4b3e      	ldr	r3, [pc, #248]	@ (801aba8 <UTIL_SEQ_Run+0x1dc>)
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	4013      	ands	r3, r2
 801aab4:	4a3c      	ldr	r2, [pc, #240]	@ (801aba8 <UTIL_SEQ_Run+0x1dc>)
 801aab6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aab8:	2301      	movs	r3, #1
 801aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aabc:	e013      	b.n	801aae6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801aabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aac0:	3b01      	subs	r3, #1
 801aac2:	4a3d      	ldr	r2, [pc, #244]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aac4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801aac8:	4b3c      	ldr	r3, [pc, #240]	@ (801abbc <UTIL_SEQ_Run+0x1f0>)
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	2201      	movs	r2, #1
 801aace:	fa02 f303 	lsl.w	r3, r2, r3
 801aad2:	43da      	mvns	r2, r3
 801aad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aad6:	3b01      	subs	r3, #1
 801aad8:	400a      	ands	r2, r1
 801aada:	4937      	ldr	r1, [pc, #220]	@ (801abb8 <UTIL_SEQ_Run+0x1ec>)
 801aadc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aae2:	3b01      	subs	r3, #1
 801aae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d1e8      	bne.n	801aabe <UTIL_SEQ_Run+0xf2>
 801aaec:	6a3b      	ldr	r3, [r7, #32]
 801aaee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aaf0:	697b      	ldr	r3, [r7, #20]
 801aaf2:	f383 8810 	msr	PRIMASK, r3
}
 801aaf6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801aaf8:	4b30      	ldr	r3, [pc, #192]	@ (801abbc <UTIL_SEQ_Run+0x1f0>)
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	4a30      	ldr	r2, [pc, #192]	@ (801abc0 <UTIL_SEQ_Run+0x1f4>)
 801aafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ab02:	4798      	blx	r3

    local_taskset = TaskSet;
 801ab04:	4b28      	ldr	r3, [pc, #160]	@ (801aba8 <UTIL_SEQ_Run+0x1dc>)
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801ab0a:	4b28      	ldr	r3, [pc, #160]	@ (801abac <UTIL_SEQ_Run+0x1e0>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801ab10:	4b27      	ldr	r3, [pc, #156]	@ (801abb0 <UTIL_SEQ_Run+0x1e4>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801ab16:	4b27      	ldr	r3, [pc, #156]	@ (801abb4 <UTIL_SEQ_Run+0x1e8>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ab1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab20:	401a      	ands	r2, r3
 801ab22:	4b20      	ldr	r3, [pc, #128]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	4013      	ands	r3, r2
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d005      	beq.n	801ab38 <UTIL_SEQ_Run+0x16c>
 801ab2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ab2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab30:	4013      	ands	r3, r2
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	f43f af64 	beq.w	801aa00 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ab38:	4b20      	ldr	r3, [pc, #128]	@ (801abbc <UTIL_SEQ_Run+0x1f0>)
 801ab3a:	f04f 32ff 	mov.w	r2, #4294967295
 801ab3e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ab40:	f000 f88e 	bl	801ac60 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab44:	f3ef 8310 	mrs	r3, PRIMASK
 801ab48:	613b      	str	r3, [r7, #16]
  return(result);
 801ab4a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ab4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab4e:	b672      	cpsid	i
}
 801ab50:	bf00      	nop
  local_taskset = TaskSet;
 801ab52:	4b15      	ldr	r3, [pc, #84]	@ (801aba8 <UTIL_SEQ_Run+0x1dc>)
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801ab58:	4b14      	ldr	r3, [pc, #80]	@ (801abac <UTIL_SEQ_Run+0x1e0>)
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801ab5e:	4b14      	ldr	r3, [pc, #80]	@ (801abb0 <UTIL_SEQ_Run+0x1e4>)
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801ab64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ab66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab68:	401a      	ands	r2, r3
 801ab6a:	4b0e      	ldr	r3, [pc, #56]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	4013      	ands	r3, r2
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d107      	bne.n	801ab84 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ab74:	4b0f      	ldr	r3, [pc, #60]	@ (801abb4 <UTIL_SEQ_Run+0x1e8>)
 801ab76:	681a      	ldr	r2, [r3, #0]
 801ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab7a:	4013      	ands	r3, r2
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d101      	bne.n	801ab84 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801ab80:	f7e6 fe1c 	bl	80017bc <UTIL_SEQ_Idle>
 801ab84:	69fb      	ldr	r3, [r7, #28]
 801ab86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	f383 8810 	msr	PRIMASK, r3
}
 801ab8e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801ab90:	f000 f86c 	bl	801ac6c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801ab94:	4a03      	ldr	r2, [pc, #12]	@ (801aba4 <UTIL_SEQ_Run+0x1d8>)
 801ab96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab98:	6013      	str	r3, [r2, #0]

  return;
 801ab9a:	bf00      	nop
}
 801ab9c:	3740      	adds	r7, #64	@ 0x40
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}
 801aba2:	bf00      	nop
 801aba4:	200000e0 	.word	0x200000e0
 801aba8:	200019f8 	.word	0x200019f8
 801abac:	200019fc 	.word	0x200019fc
 801abb0:	200000dc 	.word	0x200000dc
 801abb4:	20001a00 	.word	0x20001a00
 801abb8:	20001a30 	.word	0x20001a30
 801abbc:	20001a04 	.word	0x20001a04
 801abc0:	20001a08 	.word	0x20001a08

0801abc4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801abc4:	b580      	push	{r7, lr}
 801abc6:	b088      	sub	sp, #32
 801abc8:	af00      	add	r7, sp, #0
 801abca:	60f8      	str	r0, [r7, #12]
 801abcc:	60b9      	str	r1, [r7, #8]
 801abce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801abd0:	f3ef 8310 	mrs	r3, PRIMASK
 801abd4:	617b      	str	r3, [r7, #20]
  return(result);
 801abd6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801abd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801abda:	b672      	cpsid	i
}
 801abdc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801abde:	68f8      	ldr	r0, [r7, #12]
 801abe0:	f000 f84a 	bl	801ac78 <SEQ_BitPosition>
 801abe4:	4603      	mov	r3, r0
 801abe6:	4619      	mov	r1, r3
 801abe8:	4a06      	ldr	r2, [pc, #24]	@ (801ac04 <UTIL_SEQ_RegTask+0x40>)
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801abf0:	69fb      	ldr	r3, [r7, #28]
 801abf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abf4:	69bb      	ldr	r3, [r7, #24]
 801abf6:	f383 8810 	msr	PRIMASK, r3
}
 801abfa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801abfc:	bf00      	nop
}
 801abfe:	3720      	adds	r7, #32
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}
 801ac04:	20001a08 	.word	0x20001a08

0801ac08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ac08:	b480      	push	{r7}
 801ac0a:	b087      	sub	sp, #28
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
 801ac10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac12:	f3ef 8310 	mrs	r3, PRIMASK
 801ac16:	60fb      	str	r3, [r7, #12]
  return(result);
 801ac18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ac1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac1c:	b672      	cpsid	i
}
 801ac1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ac20:	4b0d      	ldr	r3, [pc, #52]	@ (801ac58 <UTIL_SEQ_SetTask+0x50>)
 801ac22:	681a      	ldr	r2, [r3, #0]
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	4313      	orrs	r3, r2
 801ac28:	4a0b      	ldr	r2, [pc, #44]	@ (801ac58 <UTIL_SEQ_SetTask+0x50>)
 801ac2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ac2c:	4a0b      	ldr	r2, [pc, #44]	@ (801ac5c <UTIL_SEQ_SetTask+0x54>)
 801ac2e:	683b      	ldr	r3, [r7, #0]
 801ac30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	431a      	orrs	r2, r3
 801ac38:	4908      	ldr	r1, [pc, #32]	@ (801ac5c <UTIL_SEQ_SetTask+0x54>)
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ac40:	697b      	ldr	r3, [r7, #20]
 801ac42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac44:	693b      	ldr	r3, [r7, #16]
 801ac46:	f383 8810 	msr	PRIMASK, r3
}
 801ac4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ac4c:	bf00      	nop
}
 801ac4e:	371c      	adds	r7, #28
 801ac50:	46bd      	mov	sp, r7
 801ac52:	bc80      	pop	{r7}
 801ac54:	4770      	bx	lr
 801ac56:	bf00      	nop
 801ac58:	200019f8 	.word	0x200019f8
 801ac5c:	20001a30 	.word	0x20001a30

0801ac60 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ac60:	b480      	push	{r7}
 801ac62:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ac64:	bf00      	nop
}
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bc80      	pop	{r7}
 801ac6a:	4770      	bx	lr

0801ac6c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ac6c:	b480      	push	{r7}
 801ac6e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ac70:	bf00      	nop
}
 801ac72:	46bd      	mov	sp, r7
 801ac74:	bc80      	pop	{r7}
 801ac76:	4770      	bx	lr

0801ac78 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ac78:	b480      	push	{r7}
 801ac7a:	b085      	sub	sp, #20
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ac80:	2300      	movs	r3, #0
 801ac82:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ac8e:	d204      	bcs.n	801ac9a <SEQ_BitPosition+0x22>
 801ac90:	2310      	movs	r3, #16
 801ac92:	73fb      	strb	r3, [r7, #15]
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	041b      	lsls	r3, r3, #16
 801ac98:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ac9a:	68bb      	ldr	r3, [r7, #8]
 801ac9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801aca0:	d205      	bcs.n	801acae <SEQ_BitPosition+0x36>
 801aca2:	7bfb      	ldrb	r3, [r7, #15]
 801aca4:	3308      	adds	r3, #8
 801aca6:	73fb      	strb	r3, [r7, #15]
 801aca8:	68bb      	ldr	r3, [r7, #8]
 801acaa:	021b      	lsls	r3, r3, #8
 801acac:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801acae:	68bb      	ldr	r3, [r7, #8]
 801acb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801acb4:	d205      	bcs.n	801acc2 <SEQ_BitPosition+0x4a>
 801acb6:	7bfb      	ldrb	r3, [r7, #15]
 801acb8:	3304      	adds	r3, #4
 801acba:	73fb      	strb	r3, [r7, #15]
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	011b      	lsls	r3, r3, #4
 801acc0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801acc2:	68bb      	ldr	r3, [r7, #8]
 801acc4:	0f1b      	lsrs	r3, r3, #28
 801acc6:	4a07      	ldr	r2, [pc, #28]	@ (801ace4 <SEQ_BitPosition+0x6c>)
 801acc8:	5cd2      	ldrb	r2, [r2, r3]
 801acca:	7bfb      	ldrb	r3, [r7, #15]
 801accc:	4413      	add	r3, r2
 801acce:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801acd0:	7bfb      	ldrb	r3, [r7, #15]
 801acd2:	f1c3 031f 	rsb	r3, r3, #31
 801acd6:	b2db      	uxtb	r3, r3
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3714      	adds	r7, #20
 801acdc:	46bd      	mov	sp, r7
 801acde:	bc80      	pop	{r7}
 801ace0:	4770      	bx	lr
 801ace2:	bf00      	nop
 801ace4:	080220cc 	.word	0x080220cc

0801ace8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ace8:	b082      	sub	sp, #8
 801acea:	b480      	push	{r7}
 801acec:	b087      	sub	sp, #28
 801acee:	af00      	add	r7, sp, #0
 801acf0:	60f8      	str	r0, [r7, #12]
 801acf2:	1d38      	adds	r0, r7, #4
 801acf4:	e880 0006 	stmia.w	r0, {r1, r2}
 801acf8:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801acfa:	2300      	movs	r3, #0
 801acfc:	613b      	str	r3, [r7, #16]
 801acfe:	2300      	movs	r3, #0
 801ad00:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ad02:	687a      	ldr	r2, [r7, #4]
 801ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad06:	4413      	add	r3, r2
 801ad08:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ad0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ad0e:	b29a      	uxth	r2, r3
 801ad10:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	4413      	add	r3, r2
 801ad18:	b29b      	uxth	r3, r3
 801ad1a:	b21b      	sxth	r3, r3
 801ad1c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801ad1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ad22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ad26:	db0a      	blt.n	801ad3e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801ad28:	693b      	ldr	r3, [r7, #16]
 801ad2a:	3301      	adds	r3, #1
 801ad2c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ad2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ad32:	b29b      	uxth	r3, r3
 801ad34:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801ad38:	b29b      	uxth	r3, r3
 801ad3a:	b21b      	sxth	r3, r3
 801ad3c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	461a      	mov	r2, r3
 801ad42:	f107 0310 	add.w	r3, r7, #16
 801ad46:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ad4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ad4e:	68f8      	ldr	r0, [r7, #12]
 801ad50:	371c      	adds	r7, #28
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bc80      	pop	{r7}
 801ad56:	b002      	add	sp, #8
 801ad58:	4770      	bx	lr

0801ad5a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	b480      	push	{r7}
 801ad5e:	b087      	sub	sp, #28
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	60f8      	str	r0, [r7, #12]
 801ad64:	1d38      	adds	r0, r7, #4
 801ad66:	e880 0006 	stmia.w	r0, {r1, r2}
 801ad6a:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	613b      	str	r3, [r7, #16]
 801ad70:	2300      	movs	r3, #0
 801ad72:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801ad74:	687a      	ldr	r2, [r7, #4]
 801ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad78:	1ad3      	subs	r3, r2, r3
 801ad7a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ad7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ad80:	b29a      	uxth	r2, r3
 801ad82:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ad86:	b29b      	uxth	r3, r3
 801ad88:	1ad3      	subs	r3, r2, r3
 801ad8a:	b29b      	uxth	r3, r3
 801ad8c:	b21b      	sxth	r3, r3
 801ad8e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ad90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	da0a      	bge.n	801adae <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ad98:	693b      	ldr	r3, [r7, #16]
 801ad9a:	3b01      	subs	r3, #1
 801ad9c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ad9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801ada8:	b29b      	uxth	r3, r3
 801adaa:	b21b      	sxth	r3, r3
 801adac:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	461a      	mov	r2, r3
 801adb2:	f107 0310 	add.w	r3, r7, #16
 801adb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801adba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801adbe:	68f8      	ldr	r0, [r7, #12]
 801adc0:	371c      	adds	r7, #28
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bc80      	pop	{r7}
 801adc6:	b002      	add	sp, #8
 801adc8:	4770      	bx	lr
	...

0801adcc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b088      	sub	sp, #32
 801add0:	af02      	add	r7, sp, #8
 801add2:	463b      	mov	r3, r7
 801add4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801add8:	2300      	movs	r3, #0
 801adda:	60bb      	str	r3, [r7, #8]
 801addc:	2300      	movs	r3, #0
 801adde:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ade0:	4b10      	ldr	r3, [pc, #64]	@ (801ae24 <SysTimeSet+0x58>)
 801ade2:	691b      	ldr	r3, [r3, #16]
 801ade4:	f107 0208 	add.w	r2, r7, #8
 801ade8:	3204      	adds	r2, #4
 801adea:	4610      	mov	r0, r2
 801adec:	4798      	blx	r3
 801adee:	4603      	mov	r3, r0
 801adf0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801adf2:	f107 0010 	add.w	r0, r7, #16
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	9300      	str	r3, [sp, #0]
 801adfa:	68bb      	ldr	r3, [r7, #8]
 801adfc:	463a      	mov	r2, r7
 801adfe:	ca06      	ldmia	r2, {r1, r2}
 801ae00:	f7ff ffab 	bl	801ad5a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ae04:	4b07      	ldr	r3, [pc, #28]	@ (801ae24 <SysTimeSet+0x58>)
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	693a      	ldr	r2, [r7, #16]
 801ae0a:	4610      	mov	r0, r2
 801ae0c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ae0e:	4b05      	ldr	r3, [pc, #20]	@ (801ae24 <SysTimeSet+0x58>)
 801ae10:	689b      	ldr	r3, [r3, #8]
 801ae12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ae16:	4610      	mov	r0, r2
 801ae18:	4798      	blx	r3
}
 801ae1a:	bf00      	nop
 801ae1c:	3718      	adds	r7, #24
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bd80      	pop	{r7, pc}
 801ae22:	bf00      	nop
 801ae24:	08021a50 	.word	0x08021a50

0801ae28 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b08a      	sub	sp, #40	@ 0x28
 801ae2c:	af02      	add	r7, sp, #8
 801ae2e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ae30:	2300      	movs	r3, #0
 801ae32:	61bb      	str	r3, [r7, #24]
 801ae34:	2300      	movs	r3, #0
 801ae36:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ae38:	2300      	movs	r3, #0
 801ae3a:	613b      	str	r3, [r7, #16]
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ae40:	4b14      	ldr	r3, [pc, #80]	@ (801ae94 <SysTimeGet+0x6c>)
 801ae42:	691b      	ldr	r3, [r3, #16]
 801ae44:	f107 0218 	add.w	r2, r7, #24
 801ae48:	3204      	adds	r2, #4
 801ae4a:	4610      	mov	r0, r2
 801ae4c:	4798      	blx	r3
 801ae4e:	4603      	mov	r3, r0
 801ae50:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ae52:	4b10      	ldr	r3, [pc, #64]	@ (801ae94 <SysTimeGet+0x6c>)
 801ae54:	68db      	ldr	r3, [r3, #12]
 801ae56:	4798      	blx	r3
 801ae58:	4603      	mov	r3, r0
 801ae5a:	b21b      	sxth	r3, r3
 801ae5c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ae5e:	4b0d      	ldr	r3, [pc, #52]	@ (801ae94 <SysTimeGet+0x6c>)
 801ae60:	685b      	ldr	r3, [r3, #4]
 801ae62:	4798      	blx	r3
 801ae64:	4603      	mov	r3, r0
 801ae66:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ae68:	f107 0010 	add.w	r0, r7, #16
 801ae6c:	69fb      	ldr	r3, [r7, #28]
 801ae6e:	9300      	str	r3, [sp, #0]
 801ae70:	69bb      	ldr	r3, [r7, #24]
 801ae72:	f107 0208 	add.w	r2, r7, #8
 801ae76:	ca06      	ldmia	r2, {r1, r2}
 801ae78:	f7ff ff36 	bl	801ace8 <SysTimeAdd>

  return sysTime;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	461a      	mov	r2, r3
 801ae80:	f107 0310 	add.w	r3, r7, #16
 801ae84:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ae88:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ae8c:	6878      	ldr	r0, [r7, #4]
 801ae8e:	3720      	adds	r7, #32
 801ae90:	46bd      	mov	sp, r7
 801ae92:	bd80      	pop	{r7, pc}
 801ae94:	08021a50 	.word	0x08021a50

0801ae98 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b084      	sub	sp, #16
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801aea0:	2300      	movs	r3, #0
 801aea2:	60bb      	str	r3, [r7, #8]
 801aea4:	2300      	movs	r3, #0
 801aea6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801aea8:	4b0a      	ldr	r3, [pc, #40]	@ (801aed4 <SysTimeGetMcuTime+0x3c>)
 801aeaa:	691b      	ldr	r3, [r3, #16]
 801aeac:	f107 0208 	add.w	r2, r7, #8
 801aeb0:	3204      	adds	r2, #4
 801aeb2:	4610      	mov	r0, r2
 801aeb4:	4798      	blx	r3
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	461a      	mov	r2, r3
 801aebe:	f107 0308 	add.w	r3, r7, #8
 801aec2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aec6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801aeca:	6878      	ldr	r0, [r7, #4]
 801aecc:	3710      	adds	r7, #16
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}
 801aed2:	bf00      	nop
 801aed4:	08021a50 	.word	0x08021a50

0801aed8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b088      	sub	sp, #32
 801aedc:	af02      	add	r7, sp, #8
 801aede:	463b      	mov	r3, r7
 801aee0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801aee4:	4b0f      	ldr	r3, [pc, #60]	@ (801af24 <SysTimeToMs+0x4c>)
 801aee6:	68db      	ldr	r3, [r3, #12]
 801aee8:	4798      	blx	r3
 801aeea:	4603      	mov	r3, r0
 801aeec:	b21b      	sxth	r3, r3
 801aeee:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801aef0:	4b0c      	ldr	r3, [pc, #48]	@ (801af24 <SysTimeToMs+0x4c>)
 801aef2:	685b      	ldr	r3, [r3, #4]
 801aef4:	4798      	blx	r3
 801aef6:	4603      	mov	r3, r0
 801aef8:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801aefa:	f107 0008 	add.w	r0, r7, #8
 801aefe:	697b      	ldr	r3, [r7, #20]
 801af00:	9300      	str	r3, [sp, #0]
 801af02:	693b      	ldr	r3, [r7, #16]
 801af04:	463a      	mov	r2, r7
 801af06:	ca06      	ldmia	r2, {r1, r2}
 801af08:	f7ff ff27 	bl	801ad5a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801af0c:	68bb      	ldr	r3, [r7, #8]
 801af0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801af12:	fb02 f303 	mul.w	r3, r2, r3
 801af16:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801af1a:	4413      	add	r3, r2
}
 801af1c:	4618      	mov	r0, r3
 801af1e:	3718      	adds	r7, #24
 801af20:	46bd      	mov	sp, r7
 801af22:	bd80      	pop	{r7, pc}
 801af24:	08021a50 	.word	0x08021a50

0801af28 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b08a      	sub	sp, #40	@ 0x28
 801af2c:	af02      	add	r7, sp, #8
 801af2e:	6078      	str	r0, [r7, #4]
 801af30:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801af32:	683b      	ldr	r3, [r7, #0]
 801af34:	4a19      	ldr	r2, [pc, #100]	@ (801af9c <SysTimeFromMs+0x74>)
 801af36:	fba2 2303 	umull	r2, r3, r2, r3
 801af3a:	099b      	lsrs	r3, r3, #6
 801af3c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801af3e:	69fb      	ldr	r3, [r7, #28]
 801af40:	617b      	str	r3, [r7, #20]
 801af42:	683b      	ldr	r3, [r7, #0]
 801af44:	b29a      	uxth	r2, r3
 801af46:	69fb      	ldr	r3, [r7, #28]
 801af48:	b29b      	uxth	r3, r3
 801af4a:	4619      	mov	r1, r3
 801af4c:	0149      	lsls	r1, r1, #5
 801af4e:	1ac9      	subs	r1, r1, r3
 801af50:	0089      	lsls	r1, r1, #2
 801af52:	440b      	add	r3, r1
 801af54:	00db      	lsls	r3, r3, #3
 801af56:	b29b      	uxth	r3, r3
 801af58:	1ad3      	subs	r3, r2, r3
 801af5a:	b29b      	uxth	r3, r3
 801af5c:	b21b      	sxth	r3, r3
 801af5e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801af60:	f107 030c 	add.w	r3, r7, #12
 801af64:	2200      	movs	r2, #0
 801af66:	601a      	str	r2, [r3, #0]
 801af68:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801af6a:	4b0d      	ldr	r3, [pc, #52]	@ (801afa0 <SysTimeFromMs+0x78>)
 801af6c:	68db      	ldr	r3, [r3, #12]
 801af6e:	4798      	blx	r3
 801af70:	4603      	mov	r3, r0
 801af72:	b21b      	sxth	r3, r3
 801af74:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801af76:	4b0a      	ldr	r3, [pc, #40]	@ (801afa0 <SysTimeFromMs+0x78>)
 801af78:	685b      	ldr	r3, [r3, #4]
 801af7a:	4798      	blx	r3
 801af7c:	4603      	mov	r3, r0
 801af7e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	693b      	ldr	r3, [r7, #16]
 801af84:	9300      	str	r3, [sp, #0]
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	f107 0214 	add.w	r2, r7, #20
 801af8c:	ca06      	ldmia	r2, {r1, r2}
 801af8e:	f7ff feab 	bl	801ace8 <SysTimeAdd>
}
 801af92:	6878      	ldr	r0, [r7, #4]
 801af94:	3720      	adds	r7, #32
 801af96:	46bd      	mov	sp, r7
 801af98:	bd80      	pop	{r7, pc}
 801af9a:	bf00      	nop
 801af9c:	10624dd3 	.word	0x10624dd3
 801afa0:	08021a50 	.word	0x08021a50

0801afa4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801afa8:	4b04      	ldr	r3, [pc, #16]	@ (801afbc <UTIL_TIMER_Init+0x18>)
 801afaa:	2200      	movs	r2, #0
 801afac:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801afae:	4b04      	ldr	r3, [pc, #16]	@ (801afc0 <UTIL_TIMER_Init+0x1c>)
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	4798      	blx	r3
 801afb4:	4603      	mov	r3, r0
}
 801afb6:	4618      	mov	r0, r3
 801afb8:	bd80      	pop	{r7, pc}
 801afba:	bf00      	nop
 801afbc:	20001a38 	.word	0x20001a38
 801afc0:	08021a24 	.word	0x08021a24

0801afc4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b084      	sub	sp, #16
 801afc8:	af00      	add	r7, sp, #0
 801afca:	60f8      	str	r0, [r7, #12]
 801afcc:	60b9      	str	r1, [r7, #8]
 801afce:	603b      	str	r3, [r7, #0]
 801afd0:	4613      	mov	r3, r2
 801afd2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d023      	beq.n	801b022 <UTIL_TIMER_Create+0x5e>
 801afda:	683b      	ldr	r3, [r7, #0]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d020      	beq.n	801b022 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	2200      	movs	r2, #0
 801afe4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801afe6:	4b11      	ldr	r3, [pc, #68]	@ (801b02c <UTIL_TIMER_Create+0x68>)
 801afe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afea:	68b8      	ldr	r0, [r7, #8]
 801afec:	4798      	blx	r3
 801afee:	4602      	mov	r2, r0
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	2200      	movs	r2, #0
 801aff8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	2200      	movs	r2, #0
 801affe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	2200      	movs	r2, #0
 801b004:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	683a      	ldr	r2, [r7, #0]
 801b00a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	69ba      	ldr	r2, [r7, #24]
 801b010:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	79fa      	ldrb	r2, [r7, #7]
 801b016:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	2200      	movs	r2, #0
 801b01c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b01e:	2300      	movs	r3, #0
 801b020:	e000      	b.n	801b024 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b022:	2301      	movs	r3, #1
  }
}
 801b024:	4618      	mov	r0, r3
 801b026:	3710      	adds	r7, #16
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}
 801b02c:	08021a24 	.word	0x08021a24

0801b030 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b08a      	sub	sp, #40	@ 0x28
 801b034:	af00      	add	r7, sp, #0
 801b036:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b038:	2300      	movs	r3, #0
 801b03a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d056      	beq.n	801b0f2 <UTIL_TIMER_Start+0xc2>
 801b044:	6878      	ldr	r0, [r7, #4]
 801b046:	f000 f929 	bl	801b29c <TimerExists>
 801b04a:	4603      	mov	r3, r0
 801b04c:	f083 0301 	eor.w	r3, r3, #1
 801b050:	b2db      	uxtb	r3, r3
 801b052:	2b00      	cmp	r3, #0
 801b054:	d04d      	beq.n	801b0f2 <UTIL_TIMER_Start+0xc2>
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	7a5b      	ldrb	r3, [r3, #9]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d149      	bne.n	801b0f2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b05e:	f3ef 8310 	mrs	r3, PRIMASK
 801b062:	613b      	str	r3, [r7, #16]
  return(result);
 801b064:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b066:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b068:	b672      	cpsid	i
}
 801b06a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	685b      	ldr	r3, [r3, #4]
 801b070:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b072:	4b24      	ldr	r3, [pc, #144]	@ (801b104 <UTIL_TIMER_Start+0xd4>)
 801b074:	6a1b      	ldr	r3, [r3, #32]
 801b076:	4798      	blx	r3
 801b078:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b07a:	6a3a      	ldr	r2, [r7, #32]
 801b07c:	69bb      	ldr	r3, [r7, #24]
 801b07e:	429a      	cmp	r2, r3
 801b080:	d201      	bcs.n	801b086 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b082:	69bb      	ldr	r3, [r7, #24]
 801b084:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	6a3a      	ldr	r2, [r7, #32]
 801b08a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	2200      	movs	r2, #0
 801b090:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2201      	movs	r2, #1
 801b096:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	2200      	movs	r2, #0
 801b09c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b09e:	4b1a      	ldr	r3, [pc, #104]	@ (801b108 <UTIL_TIMER_Start+0xd8>)
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d106      	bne.n	801b0b4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b0a6:	4b17      	ldr	r3, [pc, #92]	@ (801b104 <UTIL_TIMER_Start+0xd4>)
 801b0a8:	691b      	ldr	r3, [r3, #16]
 801b0aa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b0ac:	6878      	ldr	r0, [r7, #4]
 801b0ae:	f000 f96b 	bl	801b388 <TimerInsertNewHeadTimer>
 801b0b2:	e017      	b.n	801b0e4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b0b4:	4b13      	ldr	r3, [pc, #76]	@ (801b104 <UTIL_TIMER_Start+0xd4>)
 801b0b6:	699b      	ldr	r3, [r3, #24]
 801b0b8:	4798      	blx	r3
 801b0ba:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681a      	ldr	r2, [r3, #0]
 801b0c0:	697b      	ldr	r3, [r7, #20]
 801b0c2:	441a      	add	r2, r3
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681a      	ldr	r2, [r3, #0]
 801b0cc:	4b0e      	ldr	r3, [pc, #56]	@ (801b108 <UTIL_TIMER_Start+0xd8>)
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	429a      	cmp	r2, r3
 801b0d4:	d203      	bcs.n	801b0de <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	f000 f956 	bl	801b388 <TimerInsertNewHeadTimer>
 801b0dc:	e002      	b.n	801b0e4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b0de:	6878      	ldr	r0, [r7, #4]
 801b0e0:	f000 f922 	bl	801b328 <TimerInsertTimer>
 801b0e4:	69fb      	ldr	r3, [r7, #28]
 801b0e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	f383 8810 	msr	PRIMASK, r3
}
 801b0ee:	bf00      	nop
  {
 801b0f0:	e002      	b.n	801b0f8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	3728      	adds	r7, #40	@ 0x28
 801b100:	46bd      	mov	sp, r7
 801b102:	bd80      	pop	{r7, pc}
 801b104:	08021a24 	.word	0x08021a24
 801b108:	20001a38 	.word	0x20001a38

0801b10c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b10c:	b580      	push	{r7, lr}
 801b10e:	b088      	sub	sp, #32
 801b110:	af00      	add	r7, sp, #0
 801b112:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b114:	2300      	movs	r3, #0
 801b116:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d05b      	beq.n	801b1d6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b11e:	f3ef 8310 	mrs	r3, PRIMASK
 801b122:	60fb      	str	r3, [r7, #12]
  return(result);
 801b124:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b128:	b672      	cpsid	i
}
 801b12a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b12c:	4b2d      	ldr	r3, [pc, #180]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b132:	4b2c      	ldr	r3, [pc, #176]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	2201      	movs	r2, #1
 801b13c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b13e:	4b29      	ldr	r3, [pc, #164]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d041      	beq.n	801b1ca <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	2200      	movs	r2, #0
 801b14a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b14c:	4b25      	ldr	r3, [pc, #148]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	687a      	ldr	r2, [r7, #4]
 801b152:	429a      	cmp	r2, r3
 801b154:	d134      	bne.n	801b1c0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b156:	4b23      	ldr	r3, [pc, #140]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	2200      	movs	r2, #0
 801b15c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b15e:	4b21      	ldr	r3, [pc, #132]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	695b      	ldr	r3, [r3, #20]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d00a      	beq.n	801b17e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b168:	4b1e      	ldr	r3, [pc, #120]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	695b      	ldr	r3, [r3, #20]
 801b16e:	4a1d      	ldr	r2, [pc, #116]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b170:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b172:	4b1c      	ldr	r3, [pc, #112]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4618      	mov	r0, r3
 801b178:	f000 f8ac 	bl	801b2d4 <TimerSetTimeout>
 801b17c:	e023      	b.n	801b1c6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b17e:	4b1a      	ldr	r3, [pc, #104]	@ (801b1e8 <UTIL_TIMER_Stop+0xdc>)
 801b180:	68db      	ldr	r3, [r3, #12]
 801b182:	4798      	blx	r3
            TimerListHead = NULL;
 801b184:	4b17      	ldr	r3, [pc, #92]	@ (801b1e4 <UTIL_TIMER_Stop+0xd8>)
 801b186:	2200      	movs	r2, #0
 801b188:	601a      	str	r2, [r3, #0]
 801b18a:	e01c      	b.n	801b1c6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b18c:	697a      	ldr	r2, [r7, #20]
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	429a      	cmp	r2, r3
 801b192:	d110      	bne.n	801b1b6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b194:	697b      	ldr	r3, [r7, #20]
 801b196:	695b      	ldr	r3, [r3, #20]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d006      	beq.n	801b1aa <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b19c:	697b      	ldr	r3, [r7, #20]
 801b19e:	695b      	ldr	r3, [r3, #20]
 801b1a0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b1a2:	69bb      	ldr	r3, [r7, #24]
 801b1a4:	697a      	ldr	r2, [r7, #20]
 801b1a6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b1a8:	e00d      	b.n	801b1c6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b1ae:	69bb      	ldr	r3, [r7, #24]
 801b1b0:	697a      	ldr	r2, [r7, #20]
 801b1b2:	615a      	str	r2, [r3, #20]
            break;
 801b1b4:	e007      	b.n	801b1c6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b1ba:	697b      	ldr	r3, [r7, #20]
 801b1bc:	695b      	ldr	r3, [r3, #20]
 801b1be:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b1c0:	697b      	ldr	r3, [r7, #20]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d1e2      	bne.n	801b18c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	77fb      	strb	r3, [r7, #31]
 801b1ca:	693b      	ldr	r3, [r7, #16]
 801b1cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1ce:	68bb      	ldr	r3, [r7, #8]
 801b1d0:	f383 8810 	msr	PRIMASK, r3
}
 801b1d4:	e001      	b.n	801b1da <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b1d6:	2301      	movs	r3, #1
 801b1d8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b1da:	7ffb      	ldrb	r3, [r7, #31]
}
 801b1dc:	4618      	mov	r0, r3
 801b1de:	3720      	adds	r7, #32
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	bd80      	pop	{r7, pc}
 801b1e4:	20001a38 	.word	0x20001a38
 801b1e8:	08021a24 	.word	0x08021a24

0801b1ec <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b084      	sub	sp, #16
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d102      	bne.n	801b206 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b200:	2301      	movs	r3, #1
 801b202:	73fb      	strb	r3, [r7, #15]
 801b204:	e014      	b.n	801b230 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b206:	4b0d      	ldr	r3, [pc, #52]	@ (801b23c <UTIL_TIMER_SetPeriod+0x50>)
 801b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b20a:	6838      	ldr	r0, [r7, #0]
 801b20c:	4798      	blx	r3
 801b20e:	4602      	mov	r2, r0
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f000 f841 	bl	801b29c <TimerExists>
 801b21a:	4603      	mov	r3, r0
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d007      	beq.n	801b230 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b220:	6878      	ldr	r0, [r7, #4]
 801b222:	f7ff ff73 	bl	801b10c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b226:	6878      	ldr	r0, [r7, #4]
 801b228:	f7ff ff02 	bl	801b030 <UTIL_TIMER_Start>
 801b22c:	4603      	mov	r3, r0
 801b22e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b230:	7bfb      	ldrb	r3, [r7, #15]
}
 801b232:	4618      	mov	r0, r3
 801b234:	3710      	adds	r7, #16
 801b236:	46bd      	mov	sp, r7
 801b238:	bd80      	pop	{r7, pc}
 801b23a:	bf00      	nop
 801b23c:	08021a24 	.word	0x08021a24

0801b240 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b240:	b580      	push	{r7, lr}
 801b242:	b082      	sub	sp, #8
 801b244:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b246:	4b06      	ldr	r3, [pc, #24]	@ (801b260 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b248:	69db      	ldr	r3, [r3, #28]
 801b24a:	4798      	blx	r3
 801b24c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b24e:	4b04      	ldr	r3, [pc, #16]	@ (801b260 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b252:	6878      	ldr	r0, [r7, #4]
 801b254:	4798      	blx	r3
 801b256:	4603      	mov	r3, r0
}
 801b258:	4618      	mov	r0, r3
 801b25a:	3708      	adds	r7, #8
 801b25c:	46bd      	mov	sp, r7
 801b25e:	bd80      	pop	{r7, pc}
 801b260:	08021a24 	.word	0x08021a24

0801b264 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b084      	sub	sp, #16
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b26c:	4b0a      	ldr	r3, [pc, #40]	@ (801b298 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b26e:	69db      	ldr	r3, [r3, #28]
 801b270:	4798      	blx	r3
 801b272:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b274:	4b08      	ldr	r3, [pc, #32]	@ (801b298 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b278:	6878      	ldr	r0, [r7, #4]
 801b27a:	4798      	blx	r3
 801b27c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b27e:	4b06      	ldr	r3, [pc, #24]	@ (801b298 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b282:	68f9      	ldr	r1, [r7, #12]
 801b284:	68ba      	ldr	r2, [r7, #8]
 801b286:	1a8a      	subs	r2, r1, r2
 801b288:	4610      	mov	r0, r2
 801b28a:	4798      	blx	r3
 801b28c:	4603      	mov	r3, r0
}
 801b28e:	4618      	mov	r0, r3
 801b290:	3710      	adds	r7, #16
 801b292:	46bd      	mov	sp, r7
 801b294:	bd80      	pop	{r7, pc}
 801b296:	bf00      	nop
 801b298:	08021a24 	.word	0x08021a24

0801b29c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b29c:	b480      	push	{r7}
 801b29e:	b085      	sub	sp, #20
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b2a4:	4b0a      	ldr	r3, [pc, #40]	@ (801b2d0 <TimerExists+0x34>)
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b2aa:	e008      	b.n	801b2be <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b2ac:	68fa      	ldr	r2, [r7, #12]
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	d101      	bne.n	801b2b8 <TimerExists+0x1c>
    {
      return true;
 801b2b4:	2301      	movs	r3, #1
 801b2b6:	e006      	b.n	801b2c6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	695b      	ldr	r3, [r3, #20]
 801b2bc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d1f3      	bne.n	801b2ac <TimerExists+0x10>
  }
  return false;
 801b2c4:	2300      	movs	r3, #0
}
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	3714      	adds	r7, #20
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bc80      	pop	{r7}
 801b2ce:	4770      	bx	lr
 801b2d0:	20001a38 	.word	0x20001a38

0801b2d4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b2d4:	b590      	push	{r4, r7, lr}
 801b2d6:	b085      	sub	sp, #20
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b2dc:	4b11      	ldr	r3, [pc, #68]	@ (801b324 <TimerSetTimeout+0x50>)
 801b2de:	6a1b      	ldr	r3, [r3, #32]
 801b2e0:	4798      	blx	r3
 801b2e2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2201      	movs	r2, #1
 801b2e8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681c      	ldr	r4, [r3, #0]
 801b2ee:	4b0d      	ldr	r3, [pc, #52]	@ (801b324 <TimerSetTimeout+0x50>)
 801b2f0:	699b      	ldr	r3, [r3, #24]
 801b2f2:	4798      	blx	r3
 801b2f4:	4602      	mov	r2, r0
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	4413      	add	r3, r2
 801b2fa:	429c      	cmp	r4, r3
 801b2fc:	d207      	bcs.n	801b30e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b2fe:	4b09      	ldr	r3, [pc, #36]	@ (801b324 <TimerSetTimeout+0x50>)
 801b300:	699b      	ldr	r3, [r3, #24]
 801b302:	4798      	blx	r3
 801b304:	4602      	mov	r2, r0
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	441a      	add	r2, r3
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b30e:	4b05      	ldr	r3, [pc, #20]	@ (801b324 <TimerSetTimeout+0x50>)
 801b310:	689b      	ldr	r3, [r3, #8]
 801b312:	687a      	ldr	r2, [r7, #4]
 801b314:	6812      	ldr	r2, [r2, #0]
 801b316:	4610      	mov	r0, r2
 801b318:	4798      	blx	r3
}
 801b31a:	bf00      	nop
 801b31c:	3714      	adds	r7, #20
 801b31e:	46bd      	mov	sp, r7
 801b320:	bd90      	pop	{r4, r7, pc}
 801b322:	bf00      	nop
 801b324:	08021a24 	.word	0x08021a24

0801b328 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b328:	b480      	push	{r7}
 801b32a:	b085      	sub	sp, #20
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b330:	4b14      	ldr	r3, [pc, #80]	@ (801b384 <TimerInsertTimer+0x5c>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b336:	4b13      	ldr	r3, [pc, #76]	@ (801b384 <TimerInsertTimer+0x5c>)
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	695b      	ldr	r3, [r3, #20]
 801b33c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b33e:	e012      	b.n	801b366 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681a      	ldr	r2, [r3, #0]
 801b344:	68bb      	ldr	r3, [r7, #8]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	429a      	cmp	r2, r3
 801b34a:	d905      	bls.n	801b358 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b34c:	68bb      	ldr	r3, [r7, #8]
 801b34e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b350:	68bb      	ldr	r3, [r7, #8]
 801b352:	695b      	ldr	r3, [r3, #20]
 801b354:	60bb      	str	r3, [r7, #8]
 801b356:	e006      	b.n	801b366 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	687a      	ldr	r2, [r7, #4]
 801b35c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	68ba      	ldr	r2, [r7, #8]
 801b362:	615a      	str	r2, [r3, #20]
        return;
 801b364:	e009      	b.n	801b37a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	695b      	ldr	r3, [r3, #20]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d1e8      	bne.n	801b340 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	687a      	ldr	r2, [r7, #4]
 801b372:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	2200      	movs	r2, #0
 801b378:	615a      	str	r2, [r3, #20]
}
 801b37a:	3714      	adds	r7, #20
 801b37c:	46bd      	mov	sp, r7
 801b37e:	bc80      	pop	{r7}
 801b380:	4770      	bx	lr
 801b382:	bf00      	nop
 801b384:	20001a38 	.word	0x20001a38

0801b388 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b084      	sub	sp, #16
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b390:	4b0b      	ldr	r3, [pc, #44]	@ (801b3c0 <TimerInsertNewHeadTimer+0x38>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d002      	beq.n	801b3a2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	2200      	movs	r2, #0
 801b3a0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	68fa      	ldr	r2, [r7, #12]
 801b3a6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b3a8:	4a05      	ldr	r2, [pc, #20]	@ (801b3c0 <TimerInsertNewHeadTimer+0x38>)
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b3ae:	4b04      	ldr	r3, [pc, #16]	@ (801b3c0 <TimerInsertNewHeadTimer+0x38>)
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	f7ff ff8e 	bl	801b2d4 <TimerSetTimeout>
}
 801b3b8:	bf00      	nop
 801b3ba:	3710      	adds	r7, #16
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}
 801b3c0:	20001a38 	.word	0x20001a38

0801b3c4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b3c4:	b480      	push	{r7}
 801b3c6:	b085      	sub	sp, #20
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b3d0:	e00e      	b.n	801b3f0 <ee_skip_atoi+0x2c>
 801b3d2:	68fa      	ldr	r2, [r7, #12]
 801b3d4:	4613      	mov	r3, r2
 801b3d6:	009b      	lsls	r3, r3, #2
 801b3d8:	4413      	add	r3, r2
 801b3da:	005b      	lsls	r3, r3, #1
 801b3dc:	4618      	mov	r0, r3
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	1c59      	adds	r1, r3, #1
 801b3e4:	687a      	ldr	r2, [r7, #4]
 801b3e6:	6011      	str	r1, [r2, #0]
 801b3e8:	781b      	ldrb	r3, [r3, #0]
 801b3ea:	4403      	add	r3, r0
 801b3ec:	3b30      	subs	r3, #48	@ 0x30
 801b3ee:	60fb      	str	r3, [r7, #12]
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	781b      	ldrb	r3, [r3, #0]
 801b3f6:	2b2f      	cmp	r3, #47	@ 0x2f
 801b3f8:	d904      	bls.n	801b404 <ee_skip_atoi+0x40>
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	781b      	ldrb	r3, [r3, #0]
 801b400:	2b39      	cmp	r3, #57	@ 0x39
 801b402:	d9e6      	bls.n	801b3d2 <ee_skip_atoi+0xe>
  return i;
 801b404:	68fb      	ldr	r3, [r7, #12]
}
 801b406:	4618      	mov	r0, r3
 801b408:	3714      	adds	r7, #20
 801b40a:	46bd      	mov	sp, r7
 801b40c:	bc80      	pop	{r7}
 801b40e:	4770      	bx	lr

0801b410 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b410:	b480      	push	{r7}
 801b412:	b099      	sub	sp, #100	@ 0x64
 801b414:	af00      	add	r7, sp, #0
 801b416:	60f8      	str	r0, [r7, #12]
 801b418:	60b9      	str	r1, [r7, #8]
 801b41a:	607a      	str	r2, [r7, #4]
 801b41c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b41e:	4b71      	ldr	r3, [pc, #452]	@ (801b5e4 <ee_number+0x1d4>)
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d002      	beq.n	801b434 <ee_number+0x24>
 801b42e:	4b6e      	ldr	r3, [pc, #440]	@ (801b5e8 <ee_number+0x1d8>)
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b434:	683b      	ldr	r3, [r7, #0]
 801b436:	2b01      	cmp	r3, #1
 801b438:	dd02      	ble.n	801b440 <ee_number+0x30>
 801b43a:	683b      	ldr	r3, [r7, #0]
 801b43c:	2b24      	cmp	r3, #36	@ 0x24
 801b43e:	dd01      	ble.n	801b444 <ee_number+0x34>
 801b440:	2300      	movs	r3, #0
 801b442:	e0ca      	b.n	801b5da <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b446:	f003 0301 	and.w	r3, r3, #1
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d001      	beq.n	801b452 <ee_number+0x42>
 801b44e:	2330      	movs	r3, #48	@ 0x30
 801b450:	e000      	b.n	801b454 <ee_number+0x44>
 801b452:	2320      	movs	r3, #32
 801b454:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b458:	2300      	movs	r3, #0
 801b45a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b45e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b460:	f003 0302 	and.w	r3, r3, #2
 801b464:	2b00      	cmp	r3, #0
 801b466:	d00b      	beq.n	801b480 <ee_number+0x70>
  {
    if (num < 0)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	da08      	bge.n	801b480 <ee_number+0x70>
    {
      sign = '-';
 801b46e:	232d      	movs	r3, #45	@ 0x2d
 801b470:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	425b      	negs	r3, r3
 801b478:	607b      	str	r3, [r7, #4]
      size--;
 801b47a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b47c:	3b01      	subs	r3, #1
 801b47e:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b480:	2300      	movs	r3, #0
 801b482:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d11e      	bne.n	801b4c8 <ee_number+0xb8>
    tmp[i++] = '0';
 801b48a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b48c:	1c5a      	adds	r2, r3, #1
 801b48e:	657a      	str	r2, [r7, #84]	@ 0x54
 801b490:	3360      	adds	r3, #96	@ 0x60
 801b492:	443b      	add	r3, r7
 801b494:	2230      	movs	r2, #48	@ 0x30
 801b496:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b49a:	e018      	b.n	801b4ce <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	683a      	ldr	r2, [r7, #0]
 801b4a0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b4a4:	fb01 f202 	mul.w	r2, r1, r2
 801b4a8:	1a9b      	subs	r3, r3, r2
 801b4aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b4ac:	441a      	add	r2, r3
 801b4ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b4b0:	1c59      	adds	r1, r3, #1
 801b4b2:	6579      	str	r1, [r7, #84]	@ 0x54
 801b4b4:	7812      	ldrb	r2, [r2, #0]
 801b4b6:	3360      	adds	r3, #96	@ 0x60
 801b4b8:	443b      	add	r3, r7
 801b4ba:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b4be:	687a      	ldr	r2, [r7, #4]
 801b4c0:	683b      	ldr	r3, [r7, #0]
 801b4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b4c6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d1e6      	bne.n	801b49c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b4ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b4d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b4d2:	429a      	cmp	r2, r3
 801b4d4:	dd01      	ble.n	801b4da <ee_number+0xca>
 801b4d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b4d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b4da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b4dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b4de:	1ad3      	subs	r3, r2, r3
 801b4e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b4e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b4e4:	f003 0301 	and.w	r3, r3, #1
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d112      	bne.n	801b512 <ee_number+0x102>
 801b4ec:	e00c      	b.n	801b508 <ee_number+0xf8>
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	1c5a      	adds	r2, r3, #1
 801b4f2:	60fa      	str	r2, [r7, #12]
 801b4f4:	2220      	movs	r2, #32
 801b4f6:	701a      	strb	r2, [r3, #0]
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	3b01      	subs	r3, #1
 801b4fc:	60bb      	str	r3, [r7, #8]
 801b4fe:	68bb      	ldr	r3, [r7, #8]
 801b500:	2b00      	cmp	r3, #0
 801b502:	d101      	bne.n	801b508 <ee_number+0xf8>
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	e068      	b.n	801b5da <ee_number+0x1ca>
 801b508:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b50a:	1e5a      	subs	r2, r3, #1
 801b50c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b50e:	2b00      	cmp	r3, #0
 801b510:	dced      	bgt.n	801b4ee <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b512:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b516:	2b00      	cmp	r3, #0
 801b518:	d01b      	beq.n	801b552 <ee_number+0x142>
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	1c5a      	adds	r2, r3, #1
 801b51e:	60fa      	str	r2, [r7, #12]
 801b520:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b524:	701a      	strb	r2, [r3, #0]
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	3b01      	subs	r3, #1
 801b52a:	60bb      	str	r3, [r7, #8]
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d10f      	bne.n	801b552 <ee_number+0x142>
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	e051      	b.n	801b5da <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	1c5a      	adds	r2, r3, #1
 801b53a:	60fa      	str	r2, [r7, #12]
 801b53c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b540:	701a      	strb	r2, [r3, #0]
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	3b01      	subs	r3, #1
 801b546:	60bb      	str	r3, [r7, #8]
 801b548:	68bb      	ldr	r3, [r7, #8]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d101      	bne.n	801b552 <ee_number+0x142>
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	e043      	b.n	801b5da <ee_number+0x1ca>
 801b552:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b554:	1e5a      	subs	r2, r3, #1
 801b556:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b558:	2b00      	cmp	r3, #0
 801b55a:	dcec      	bgt.n	801b536 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b55c:	e00c      	b.n	801b578 <ee_number+0x168>
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	1c5a      	adds	r2, r3, #1
 801b562:	60fa      	str	r2, [r7, #12]
 801b564:	2230      	movs	r2, #48	@ 0x30
 801b566:	701a      	strb	r2, [r3, #0]
 801b568:	68bb      	ldr	r3, [r7, #8]
 801b56a:	3b01      	subs	r3, #1
 801b56c:	60bb      	str	r3, [r7, #8]
 801b56e:	68bb      	ldr	r3, [r7, #8]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d101      	bne.n	801b578 <ee_number+0x168>
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	e030      	b.n	801b5da <ee_number+0x1ca>
 801b578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b57a:	1e5a      	subs	r2, r3, #1
 801b57c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b57e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b580:	429a      	cmp	r2, r3
 801b582:	dbec      	blt.n	801b55e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b584:	e010      	b.n	801b5a8 <ee_number+0x198>
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	1c5a      	adds	r2, r3, #1
 801b58a:	60fa      	str	r2, [r7, #12]
 801b58c:	f107 0110 	add.w	r1, r7, #16
 801b590:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b592:	440a      	add	r2, r1
 801b594:	7812      	ldrb	r2, [r2, #0]
 801b596:	701a      	strb	r2, [r3, #0]
 801b598:	68bb      	ldr	r3, [r7, #8]
 801b59a:	3b01      	subs	r3, #1
 801b59c:	60bb      	str	r3, [r7, #8]
 801b59e:	68bb      	ldr	r3, [r7, #8]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d101      	bne.n	801b5a8 <ee_number+0x198>
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	e018      	b.n	801b5da <ee_number+0x1ca>
 801b5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b5aa:	1e5a      	subs	r2, r3, #1
 801b5ac:	657a      	str	r2, [r7, #84]	@ 0x54
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	dce9      	bgt.n	801b586 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b5b2:	e00c      	b.n	801b5ce <ee_number+0x1be>
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	1c5a      	adds	r2, r3, #1
 801b5b8:	60fa      	str	r2, [r7, #12]
 801b5ba:	2220      	movs	r2, #32
 801b5bc:	701a      	strb	r2, [r3, #0]
 801b5be:	68bb      	ldr	r3, [r7, #8]
 801b5c0:	3b01      	subs	r3, #1
 801b5c2:	60bb      	str	r3, [r7, #8]
 801b5c4:	68bb      	ldr	r3, [r7, #8]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d101      	bne.n	801b5ce <ee_number+0x1be>
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	e005      	b.n	801b5da <ee_number+0x1ca>
 801b5ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b5d0:	1e5a      	subs	r2, r3, #1
 801b5d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	dced      	bgt.n	801b5b4 <ee_number+0x1a4>

  return str;
 801b5d8:	68fb      	ldr	r3, [r7, #12]
}
 801b5da:	4618      	mov	r0, r3
 801b5dc:	3764      	adds	r7, #100	@ 0x64
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	bc80      	pop	{r7}
 801b5e2:	4770      	bx	lr
 801b5e4:	200000e4 	.word	0x200000e4
 801b5e8:	200000e8 	.word	0x200000e8

0801b5ec <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b092      	sub	sp, #72	@ 0x48
 801b5f0:	af04      	add	r7, sp, #16
 801b5f2:	60f8      	str	r0, [r7, #12]
 801b5f4:	60b9      	str	r1, [r7, #8]
 801b5f6:	607a      	str	r2, [r7, #4]
 801b5f8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	dc01      	bgt.n	801b604 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b600:	2300      	movs	r3, #0
 801b602:	e13e      	b.n	801b882 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b608:	e128      	b.n	801b85c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b60a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	1ad2      	subs	r2, r2, r3
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	3b01      	subs	r3, #1
 801b614:	429a      	cmp	r2, r3
 801b616:	f280 812e 	bge.w	801b876 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	781b      	ldrb	r3, [r3, #0]
 801b61e:	2b25      	cmp	r3, #37	@ 0x25
 801b620:	d006      	beq.n	801b630 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b622:	687a      	ldr	r2, [r7, #4]
 801b624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b626:	1c59      	adds	r1, r3, #1
 801b628:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b62a:	7812      	ldrb	r2, [r2, #0]
 801b62c:	701a      	strb	r2, [r3, #0]
      continue;
 801b62e:	e112      	b.n	801b856 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801b630:	2300      	movs	r3, #0
 801b632:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	3301      	adds	r3, #1
 801b638:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	781b      	ldrb	r3, [r3, #0]
 801b63e:	2b30      	cmp	r3, #48	@ 0x30
 801b640:	d103      	bne.n	801b64a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b642:	6a3b      	ldr	r3, [r7, #32]
 801b644:	f043 0301 	orr.w	r3, r3, #1
 801b648:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b64a:	f04f 33ff 	mov.w	r3, #4294967295
 801b64e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	781b      	ldrb	r3, [r3, #0]
 801b654:	2b2f      	cmp	r3, #47	@ 0x2f
 801b656:	d908      	bls.n	801b66a <tiny_vsnprintf_like+0x7e>
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	781b      	ldrb	r3, [r3, #0]
 801b65c:	2b39      	cmp	r3, #57	@ 0x39
 801b65e:	d804      	bhi.n	801b66a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b660:	1d3b      	adds	r3, r7, #4
 801b662:	4618      	mov	r0, r3
 801b664:	f7ff feae 	bl	801b3c4 <ee_skip_atoi>
 801b668:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b66a:	f04f 33ff 	mov.w	r3, #4294967295
 801b66e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b670:	f04f 33ff 	mov.w	r3, #4294967295
 801b674:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b676:	230a      	movs	r3, #10
 801b678:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	781b      	ldrb	r3, [r3, #0]
 801b67e:	3b58      	subs	r3, #88	@ 0x58
 801b680:	2b20      	cmp	r3, #32
 801b682:	f200 8094 	bhi.w	801b7ae <tiny_vsnprintf_like+0x1c2>
 801b686:	a201      	add	r2, pc, #4	@ (adr r2, 801b68c <tiny_vsnprintf_like+0xa0>)
 801b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b68c:	0801b797 	.word	0x0801b797
 801b690:	0801b7af 	.word	0x0801b7af
 801b694:	0801b7af 	.word	0x0801b7af
 801b698:	0801b7af 	.word	0x0801b7af
 801b69c:	0801b7af 	.word	0x0801b7af
 801b6a0:	0801b7af 	.word	0x0801b7af
 801b6a4:	0801b7af 	.word	0x0801b7af
 801b6a8:	0801b7af 	.word	0x0801b7af
 801b6ac:	0801b7af 	.word	0x0801b7af
 801b6b0:	0801b7af 	.word	0x0801b7af
 801b6b4:	0801b7af 	.word	0x0801b7af
 801b6b8:	0801b71b 	.word	0x0801b71b
 801b6bc:	0801b7a5 	.word	0x0801b7a5
 801b6c0:	0801b7af 	.word	0x0801b7af
 801b6c4:	0801b7af 	.word	0x0801b7af
 801b6c8:	0801b7af 	.word	0x0801b7af
 801b6cc:	0801b7af 	.word	0x0801b7af
 801b6d0:	0801b7a5 	.word	0x0801b7a5
 801b6d4:	0801b7af 	.word	0x0801b7af
 801b6d8:	0801b7af 	.word	0x0801b7af
 801b6dc:	0801b7af 	.word	0x0801b7af
 801b6e0:	0801b7af 	.word	0x0801b7af
 801b6e4:	0801b7af 	.word	0x0801b7af
 801b6e8:	0801b7af 	.word	0x0801b7af
 801b6ec:	0801b7af 	.word	0x0801b7af
 801b6f0:	0801b7af 	.word	0x0801b7af
 801b6f4:	0801b7af 	.word	0x0801b7af
 801b6f8:	0801b73b 	.word	0x0801b73b
 801b6fc:	0801b7af 	.word	0x0801b7af
 801b700:	0801b7fb 	.word	0x0801b7fb
 801b704:	0801b7af 	.word	0x0801b7af
 801b708:	0801b7af 	.word	0x0801b7af
 801b70c:	0801b79f 	.word	0x0801b79f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b712:	1c5a      	adds	r2, r3, #1
 801b714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b716:	2220      	movs	r2, #32
 801b718:	701a      	strb	r2, [r3, #0]
 801b71a:	69fb      	ldr	r3, [r7, #28]
 801b71c:	3b01      	subs	r3, #1
 801b71e:	61fb      	str	r3, [r7, #28]
 801b720:	69fb      	ldr	r3, [r7, #28]
 801b722:	2b00      	cmp	r3, #0
 801b724:	dcf4      	bgt.n	801b710 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b726:	683b      	ldr	r3, [r7, #0]
 801b728:	1d1a      	adds	r2, r3, #4
 801b72a:	603a      	str	r2, [r7, #0]
 801b72c:	6819      	ldr	r1, [r3, #0]
 801b72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b730:	1c5a      	adds	r2, r3, #1
 801b732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b734:	b2ca      	uxtb	r2, r1
 801b736:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b738:	e08d      	b.n	801b856 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b73a:	683b      	ldr	r3, [r7, #0]
 801b73c:	1d1a      	adds	r2, r3, #4
 801b73e:	603a      	str	r2, [r7, #0]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b746:	2b00      	cmp	r3, #0
 801b748:	d101      	bne.n	801b74e <tiny_vsnprintf_like+0x162>
 801b74a:	4b50      	ldr	r3, [pc, #320]	@ (801b88c <tiny_vsnprintf_like+0x2a0>)
 801b74c:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b74e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b750:	f7e4 fd16 	bl	8000180 <strlen>
 801b754:	4603      	mov	r3, r0
 801b756:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b758:	e004      	b.n	801b764 <tiny_vsnprintf_like+0x178>
 801b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b75c:	1c5a      	adds	r2, r3, #1
 801b75e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b760:	2220      	movs	r2, #32
 801b762:	701a      	strb	r2, [r3, #0]
 801b764:	69fb      	ldr	r3, [r7, #28]
 801b766:	1e5a      	subs	r2, r3, #1
 801b768:	61fa      	str	r2, [r7, #28]
 801b76a:	693a      	ldr	r2, [r7, #16]
 801b76c:	429a      	cmp	r2, r3
 801b76e:	dbf4      	blt.n	801b75a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b770:	2300      	movs	r3, #0
 801b772:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b774:	e00a      	b.n	801b78c <tiny_vsnprintf_like+0x1a0>
 801b776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b778:	1c53      	adds	r3, r2, #1
 801b77a:	627b      	str	r3, [r7, #36]	@ 0x24
 801b77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b77e:	1c59      	adds	r1, r3, #1
 801b780:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b782:	7812      	ldrb	r2, [r2, #0]
 801b784:	701a      	strb	r2, [r3, #0]
 801b786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b788:	3301      	adds	r3, #1
 801b78a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b78c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b78e:	693b      	ldr	r3, [r7, #16]
 801b790:	429a      	cmp	r2, r3
 801b792:	dbf0      	blt.n	801b776 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b794:	e05f      	b.n	801b856 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b796:	6a3b      	ldr	r3, [r7, #32]
 801b798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b79c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b79e:	2310      	movs	r3, #16
 801b7a0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b7a2:	e02b      	b.n	801b7fc <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b7a4:	6a3b      	ldr	r3, [r7, #32]
 801b7a6:	f043 0302 	orr.w	r3, r3, #2
 801b7aa:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b7ac:	e025      	b.n	801b7fa <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	781b      	ldrb	r3, [r3, #0]
 801b7b2:	2b25      	cmp	r3, #37	@ 0x25
 801b7b4:	d004      	beq.n	801b7c0 <tiny_vsnprintf_like+0x1d4>
 801b7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7b8:	1c5a      	adds	r2, r3, #1
 801b7ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b7bc:	2225      	movs	r2, #37	@ 0x25
 801b7be:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b7c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	1ad2      	subs	r2, r2, r3
 801b7c6:	68bb      	ldr	r3, [r7, #8]
 801b7c8:	3b01      	subs	r3, #1
 801b7ca:	429a      	cmp	r2, r3
 801b7cc:	da16      	bge.n	801b7fc <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	781b      	ldrb	r3, [r3, #0]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d006      	beq.n	801b7e4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b7d6:	687a      	ldr	r2, [r7, #4]
 801b7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7da:	1c59      	adds	r1, r3, #1
 801b7dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b7de:	7812      	ldrb	r2, [r2, #0]
 801b7e0:	701a      	strb	r2, [r3, #0]
 801b7e2:	e002      	b.n	801b7ea <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	3b01      	subs	r3, #1
 801b7e8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b7ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	1ad2      	subs	r2, r2, r3
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	3b01      	subs	r3, #1
 801b7f4:	429a      	cmp	r2, r3
 801b7f6:	db2d      	blt.n	801b854 <tiny_vsnprintf_like+0x268>
 801b7f8:	e000      	b.n	801b7fc <tiny_vsnprintf_like+0x210>
        break;
 801b7fa:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	2b6c      	cmp	r3, #108	@ 0x6c
 801b800:	d105      	bne.n	801b80e <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b802:	683b      	ldr	r3, [r7, #0]
 801b804:	1d1a      	adds	r2, r3, #4
 801b806:	603a      	str	r2, [r7, #0]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b80c:	e00f      	b.n	801b82e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b80e:	6a3b      	ldr	r3, [r7, #32]
 801b810:	f003 0302 	and.w	r3, r3, #2
 801b814:	2b00      	cmp	r3, #0
 801b816:	d005      	beq.n	801b824 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b818:	683b      	ldr	r3, [r7, #0]
 801b81a:	1d1a      	adds	r2, r3, #4
 801b81c:	603a      	str	r2, [r7, #0]
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	637b      	str	r3, [r7, #52]	@ 0x34
 801b822:	e004      	b.n	801b82e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b824:	683b      	ldr	r3, [r7, #0]
 801b826:	1d1a      	adds	r2, r3, #4
 801b828:	603a      	str	r2, [r7, #0]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b82e:	68bb      	ldr	r3, [r7, #8]
 801b830:	1e5a      	subs	r2, r3, #1
 801b832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	1acb      	subs	r3, r1, r3
 801b838:	1ad1      	subs	r1, r2, r3
 801b83a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b83c:	6a3b      	ldr	r3, [r7, #32]
 801b83e:	9302      	str	r3, [sp, #8]
 801b840:	69bb      	ldr	r3, [r7, #24]
 801b842:	9301      	str	r3, [sp, #4]
 801b844:	69fb      	ldr	r3, [r7, #28]
 801b846:	9300      	str	r3, [sp, #0]
 801b848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b84a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b84c:	f7ff fde0 	bl	801b410 <ee_number>
 801b850:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b852:	e000      	b.n	801b856 <tiny_vsnprintf_like+0x26a>
        continue;
 801b854:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	3301      	adds	r3, #1
 801b85a:	607b      	str	r3, [r7, #4]
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	781b      	ldrb	r3, [r3, #0]
 801b860:	2b00      	cmp	r3, #0
 801b862:	f47f aed2 	bne.w	801b60a <tiny_vsnprintf_like+0x1e>
 801b866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	1ad2      	subs	r2, r2, r3
 801b86c:	68bb      	ldr	r3, [r7, #8]
 801b86e:	3b01      	subs	r3, #1
 801b870:	429a      	cmp	r2, r3
 801b872:	f6bf aeca 	bge.w	801b60a <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b878:	2200      	movs	r2, #0
 801b87a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b87c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	1ad3      	subs	r3, r2, r3
}
 801b882:	4618      	mov	r0, r3
 801b884:	3738      	adds	r7, #56	@ 0x38
 801b886:	46bd      	mov	sp, r7
 801b888:	bd80      	pop	{r7, pc}
 801b88a:	bf00      	nop
 801b88c:	080218f0 	.word	0x080218f0

0801b890 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 801b890:	b580      	push	{r7, lr}
 801b892:	b082      	sub	sp, #8
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
 801b898:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d009      	beq.n	801b8b4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 801b8a0:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801b8a2:	461a      	mov	r2, r3
        err.type, err.code);
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801b8aa:	6839      	ldr	r1, [r7, #0]
 801b8ac:	4807      	ldr	r0, [pc, #28]	@ (801b8cc <ai_log_err+0x3c>)
 801b8ae:	f004 fe27 	bl	8020500 <iprintf>
 801b8b2:	e009      	b.n	801b8c8 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801b8b4:	793b      	ldrb	r3, [r7, #4]
 801b8b6:	4619      	mov	r1, r3
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801b8be:	461a      	mov	r2, r3
 801b8c0:	4803      	ldr	r0, [pc, #12]	@ (801b8d0 <ai_log_err+0x40>)
 801b8c2:	f004 fe1d 	bl	8020500 <iprintf>

  do {} while (1);
 801b8c6:	bf00      	nop
 801b8c8:	bf00      	nop
 801b8ca:	e7fd      	b.n	801b8c8 <ai_log_err+0x38>
 801b8cc:	080218f8 	.word	0x080218f8
 801b8d0:	0802192c 	.word	0x0802192c

0801b8d4 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b086      	sub	sp, #24
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_appltemp_0506_create_and_init(&network_appltemp_0506, act_addr, NULL);
 801b8dc:	2200      	movs	r2, #0
 801b8de:	6879      	ldr	r1, [r7, #4]
 801b8e0:	4828      	ldr	r0, [pc, #160]	@ (801b984 <ai_boostrap+0xb0>)
 801b8e2:	f000 f9e3 	bl	801bcac <ai_network_appltemp_0506_create_and_init>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 801b8ea:	7b3b      	ldrb	r3, [r7, #12]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d006      	beq.n	801b8fe <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_appltemp_0506_create_and_init");
 801b8f0:	4925      	ldr	r1, [pc, #148]	@ (801b988 <ai_boostrap+0xb4>)
 801b8f2:	68f8      	ldr	r0, [r7, #12]
 801b8f4:	f7ff ffcc 	bl	801b890 <ai_log_err>
    return -1;
 801b8f8:	f04f 33ff 	mov.w	r3, #4294967295
 801b8fc:	e03e      	b.n	801b97c <ai_boostrap+0xa8>
  }

  ai_input = ai_network_appltemp_0506_inputs_get(network_appltemp_0506, NULL);
 801b8fe:	4b21      	ldr	r3, [pc, #132]	@ (801b984 <ai_boostrap+0xb0>)
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	2100      	movs	r1, #0
 801b904:	4618      	mov	r0, r3
 801b906:	f000 fa4f 	bl	801bda8 <ai_network_appltemp_0506_inputs_get>
 801b90a:	4603      	mov	r3, r0
 801b90c:	4a1f      	ldr	r2, [pc, #124]	@ (801b98c <ai_boostrap+0xb8>)
 801b90e:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_appltemp_0506_outputs_get(network_appltemp_0506, NULL);
 801b910:	4b1c      	ldr	r3, [pc, #112]	@ (801b984 <ai_boostrap+0xb0>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	2100      	movs	r1, #0
 801b916:	4618      	mov	r0, r3
 801b918:	f000 fa60 	bl	801bddc <ai_network_appltemp_0506_outputs_get>
 801b91c:	4603      	mov	r3, r0
 801b91e:	4a1c      	ldr	r2, [pc, #112]	@ (801b990 <ai_boostrap+0xbc>)
 801b920:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_APPLTEMP_0506_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801b922:	2300      	movs	r3, #0
 801b924:	617b      	str	r3, [r7, #20]
 801b926:	e00f      	b.n	801b948 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 801b928:	4b18      	ldr	r3, [pc, #96]	@ (801b98c <ai_boostrap+0xb8>)
 801b92a:	6819      	ldr	r1, [r3, #0]
 801b92c:	697a      	ldr	r2, [r7, #20]
 801b92e:	4613      	mov	r3, r2
 801b930:	00db      	lsls	r3, r3, #3
 801b932:	1a9b      	subs	r3, r3, r2
 801b934:	009b      	lsls	r3, r3, #2
 801b936:	440b      	add	r3, r1
 801b938:	685a      	ldr	r2, [r3, #4]
 801b93a:	4916      	ldr	r1, [pc, #88]	@ (801b994 <ai_boostrap+0xc0>)
 801b93c:	697b      	ldr	r3, [r7, #20]
 801b93e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801b942:	697b      	ldr	r3, [r7, #20]
 801b944:	3301      	adds	r3, #1
 801b946:	617b      	str	r3, [r7, #20]
 801b948:	697b      	ldr	r3, [r7, #20]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	ddec      	ble.n	801b928 <ai_boostrap+0x54>

#if defined(AI_NETWORK_APPLTEMP_0506_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801b94e:	2300      	movs	r3, #0
 801b950:	613b      	str	r3, [r7, #16]
 801b952:	e00f      	b.n	801b974 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 801b954:	4b0e      	ldr	r3, [pc, #56]	@ (801b990 <ai_boostrap+0xbc>)
 801b956:	6819      	ldr	r1, [r3, #0]
 801b958:	693a      	ldr	r2, [r7, #16]
 801b95a:	4613      	mov	r3, r2
 801b95c:	00db      	lsls	r3, r3, #3
 801b95e:	1a9b      	subs	r3, r3, r2
 801b960:	009b      	lsls	r3, r3, #2
 801b962:	440b      	add	r3, r1
 801b964:	685a      	ldr	r2, [r3, #4]
 801b966:	490c      	ldr	r1, [pc, #48]	@ (801b998 <ai_boostrap+0xc4>)
 801b968:	693b      	ldr	r3, [r7, #16]
 801b96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	3301      	adds	r3, #1
 801b972:	613b      	str	r3, [r7, #16]
 801b974:	693b      	ldr	r3, [r7, #16]
 801b976:	2b00      	cmp	r3, #0
 801b978:	ddec      	ble.n	801b954 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801b97a:	2300      	movs	r3, #0
}
 801b97c:	4618      	mov	r0, r3
 801b97e:	3718      	adds	r7, #24
 801b980:	46bd      	mov	sp, r7
 801b982:	bd80      	pop	{r7, pc}
 801b984:	20001a54 	.word	0x20001a54
 801b988:	0802195c 	.word	0x0802195c
 801b98c:	20001a58 	.word	0x20001a58
 801b990:	20001a5c 	.word	0x20001a5c
 801b994:	20001a4c 	.word	0x20001a4c
 801b998:	20001a50 	.word	0x20001a50

0801b99c <ai_run>:

static int ai_run(void)
{
 801b99c:	b580      	push	{r7, lr}
 801b99e:	b082      	sub	sp, #8
 801b9a0:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_appltemp_0506_run(network_appltemp_0506, ai_input, ai_output);
 801b9a2:	4b0f      	ldr	r3, [pc, #60]	@ (801b9e0 <ai_run+0x44>)
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	4a0f      	ldr	r2, [pc, #60]	@ (801b9e4 <ai_run+0x48>)
 801b9a8:	6811      	ldr	r1, [r2, #0]
 801b9aa:	4a0f      	ldr	r2, [pc, #60]	@ (801b9e8 <ai_run+0x4c>)
 801b9ac:	6812      	ldr	r2, [r2, #0]
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f000 fa6a 	bl	801be88 <ai_network_appltemp_0506_run>
 801b9b4:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	2b01      	cmp	r3, #1
 801b9ba:	d00c      	beq.n	801b9d6 <ai_run+0x3a>
    ai_log_err(ai_network_appltemp_0506_get_error(network_appltemp_0506),
 801b9bc:	4b08      	ldr	r3, [pc, #32]	@ (801b9e0 <ai_run+0x44>)
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	f000 f951 	bl	801bc68 <ai_network_appltemp_0506_get_error>
 801b9c6:	4603      	mov	r3, r0
 801b9c8:	4908      	ldr	r1, [pc, #32]	@ (801b9ec <ai_run+0x50>)
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	f7ff ff60 	bl	801b890 <ai_log_err>
        "ai_network_appltemp_0506_run");
    return -1;
 801b9d0:	f04f 33ff 	mov.w	r3, #4294967295
 801b9d4:	e000      	b.n	801b9d8 <ai_run+0x3c>
  }

  return 0;
 801b9d6:	2300      	movs	r3, #0
}
 801b9d8:	4618      	mov	r0, r3
 801b9da:	3708      	adds	r7, #8
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	bd80      	pop	{r7, pc}
 801b9e0:	20001a54 	.word	0x20001a54
 801b9e4:	20001a58 	.word	0x20001a58
 801b9e8:	20001a5c 	.word	0x20001a5c
 801b9ec:	08021988 	.word	0x08021988

0801b9f0 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 801b9f0:	b480      	push	{r7}
 801b9f2:	b083      	sub	sp, #12
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	data_sensors[0] = my_SoilSensor;					// Soil Moisture Sensor
 801b9f8:	4b0a      	ldr	r3, [pc, #40]	@ (801ba24 <acquire_and_process_data+0x34>)
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	4a0a      	ldr	r2, [pc, #40]	@ (801ba28 <acquire_and_process_data+0x38>)
 801b9fe:	6013      	str	r3, [r2, #0]
	data_sensors[1] = my_SHT40_Temp_Float;				// Temp Sensor
 801ba00:	4b0a      	ldr	r3, [pc, #40]	@ (801ba2c <acquire_and_process_data+0x3c>)
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4a08      	ldr	r2, [pc, #32]	@ (801ba28 <acquire_and_process_data+0x38>)
 801ba06:	6053      	str	r3, [r2, #4]
	data_sensors[2] = my_SHT40_Humid_Float;				// Hum Sensor
 801ba08:	4b09      	ldr	r3, [pc, #36]	@ (801ba30 <acquire_and_process_data+0x40>)
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	4a06      	ldr	r2, [pc, #24]	@ (801ba28 <acquire_and_process_data+0x38>)
 801ba0e:	6093      	str	r3, [r2, #8]
	ai_input[0].data = AI_HANDLE_PTR(data_sensors);
 801ba10:	4b08      	ldr	r3, [pc, #32]	@ (801ba34 <acquire_and_process_data+0x44>)
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	4a04      	ldr	r2, [pc, #16]	@ (801ba28 <acquire_and_process_data+0x38>)
 801ba16:	605a      	str	r2, [r3, #4]
  return 0;
 801ba18:	2300      	movs	r3, #0
}
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	370c      	adds	r7, #12
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	bc80      	pop	{r7}
 801ba22:	4770      	bx	lr
 801ba24:	20001bec 	.word	0x20001bec
 801ba28:	20001a3c 	.word	0x20001a3c
 801ba2c:	20001bf0 	.word	0x20001bf0
 801ba30:	20001bf4 	.word	0x20001bf4
 801ba34:	20001a58 	.word	0x20001a58

0801ba38 <post_process>:

int post_process(ai_i8* data[])
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b084      	sub	sp, #16
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	float result = *((float*)data[0]);
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	60fb      	str	r3, [r7, #12]
		if (result > 0.5f)
 801ba48:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 801ba4c:	68f8      	ldr	r0, [r7, #12]
 801ba4e:	f7e5 f925 	bl	8000c9c <__aeabi_fcmpgt>
 801ba52:	4603      	mov	r3, r0
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d003      	beq.n	801ba60 <post_process+0x28>
		{
			result_nn = 1;
 801ba58:	4b05      	ldr	r3, [pc, #20]	@ (801ba70 <post_process+0x38>)
 801ba5a:	2201      	movs	r2, #1
 801ba5c:	701a      	strb	r2, [r3, #0]
 801ba5e:	e002      	b.n	801ba66 <post_process+0x2e>
		}
		else
		{
			result_nn = 0;
 801ba60:	4b03      	ldr	r3, [pc, #12]	@ (801ba70 <post_process+0x38>)
 801ba62:	2200      	movs	r2, #0
 801ba64:	701a      	strb	r2, [r3, #0]
		}
	  return 0;
 801ba66:	2300      	movs	r3, #0
}
 801ba68:	4618      	mov	r0, r3
 801ba6a:	3710      	adds	r7, #16
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	bd80      	pop	{r7, pc}
 801ba70:	20001a48 	.word	0x20001a48

0801ba74 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801ba74:	b580      	push	{r7, lr}
 801ba76:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 801ba78:	4803      	ldr	r0, [pc, #12]	@ (801ba88 <MX_X_CUBE_AI_Init+0x14>)
 801ba7a:	f004 fda9 	bl	80205d0 <puts>

  ai_boostrap(data_activations0);
 801ba7e:	4803      	ldr	r0, [pc, #12]	@ (801ba8c <MX_X_CUBE_AI_Init+0x18>)
 801ba80:	f7ff ff28 	bl	801b8d4 <ai_boostrap>
    /* USER CODE END 5 */
}
 801ba84:	bf00      	nop
 801ba86:	bd80      	pop	{r7, pc}
 801ba88:	080219a8 	.word	0x080219a8
 801ba8c:	200000ec 	.word	0x200000ec

0801ba90 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b082      	sub	sp, #8
 801ba94:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 801ba96:	f04f 33ff 	mov.w	r3, #4294967295
 801ba9a:	607b      	str	r3, [r7, #4]

  //printf("TEMPLATE - run - main loop\r\n");

  if (network_appltemp_0506) {
 801ba9c:	4b13      	ldr	r3, [pc, #76]	@ (801baec <MX_X_CUBE_AI_Process+0x5c>)
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d010      	beq.n	801bac6 <MX_X_CUBE_AI_Process+0x36>
    //do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 801baa4:	4812      	ldr	r0, [pc, #72]	@ (801baf0 <MX_X_CUBE_AI_Process+0x60>)
 801baa6:	f7ff ffa3 	bl	801b9f0 <acquire_and_process_data>
 801baaa:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d102      	bne.n	801bab8 <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 801bab2:	f7ff ff73 	bl	801b99c <ai_run>
 801bab6:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d103      	bne.n	801bac6 <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 801babe:	480d      	ldr	r0, [pc, #52]	@ (801baf4 <MX_X_CUBE_AI_Process+0x64>)
 801bac0:	f7ff ffba 	bl	801ba38 <post_process>
 801bac4:	6078      	str	r0, [r7, #4]
    //} while (res==0);
  }

  if (res) {
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d00a      	beq.n	801bae2 <MX_X_CUBE_AI_Process+0x52>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 801bacc:	2311      	movs	r3, #17
 801bace:	703b      	strb	r3, [r7, #0]
 801bad0:	683b      	ldr	r3, [r7, #0]
 801bad2:	2210      	movs	r2, #16
 801bad4:	f362 231f 	bfi	r3, r2, #8, #24
 801bad8:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 801bada:	4907      	ldr	r1, [pc, #28]	@ (801baf8 <MX_X_CUBE_AI_Process+0x68>)
 801badc:	6838      	ldr	r0, [r7, #0]
 801bade:	f7ff fed7 	bl	801b890 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 801bae2:	bf00      	nop
 801bae4:	3708      	adds	r7, #8
 801bae6:	46bd      	mov	sp, r7
 801bae8:	bd80      	pop	{r7, pc}
 801baea:	bf00      	nop
 801baec:	20001a54 	.word	0x20001a54
 801baf0:	20001a4c 	.word	0x20001a4c
 801baf4:	20001a50 	.word	0x20001a50
 801baf8:	080219c8 	.word	0x080219c8

0801bafc <network_appltemp_0506_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 801bafc:	b580      	push	{r7, lr}
 801bafe:	b082      	sub	sp, #8
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	6078      	str	r0, [r7, #4]
 801bb04:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_appltemp_0506_activations_map, 1, params)) {
 801bb06:	683a      	ldr	r2, [r7, #0]
 801bb08:	2101      	movs	r1, #1
 801bb0a:	4820      	ldr	r0, [pc, #128]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb0c:	f002 fe5a 	bl	801e7c4 <ai_platform_get_activations_map>
 801bb10:	4603      	mov	r3, r0
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d02f      	beq.n	801bb76 <network_appltemp_0506_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801bb16:	4b1d      	ldr	r3, [pc, #116]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	4a1d      	ldr	r2, [pc, #116]	@ (801bb90 <network_appltemp_0506_configure_activations+0x94>)
 801bb1c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801bb1e:	4b1b      	ldr	r3, [pc, #108]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	4a1b      	ldr	r2, [pc, #108]	@ (801bb90 <network_appltemp_0506_configure_activations+0x94>)
 801bb24:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bb26:	4b19      	ldr	r3, [pc, #100]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	330c      	adds	r3, #12
 801bb2c:	4a19      	ldr	r2, [pc, #100]	@ (801bb94 <network_appltemp_0506_configure_activations+0x98>)
 801bb2e:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bb30:	4b16      	ldr	r3, [pc, #88]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	330c      	adds	r3, #12
 801bb36:	4a17      	ldr	r2, [pc, #92]	@ (801bb94 <network_appltemp_0506_configure_activations+0x98>)
 801bb38:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bb3a:	4b14      	ldr	r3, [pc, #80]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	330c      	adds	r3, #12
 801bb40:	4a15      	ldr	r2, [pc, #84]	@ (801bb98 <network_appltemp_0506_configure_activations+0x9c>)
 801bb42:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bb44:	4b11      	ldr	r3, [pc, #68]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	330c      	adds	r3, #12
 801bb4a:	4a13      	ldr	r2, [pc, #76]	@ (801bb98 <network_appltemp_0506_configure_activations+0x9c>)
 801bb4c:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801bb4e:	4b0f      	ldr	r3, [pc, #60]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	4a12      	ldr	r2, [pc, #72]	@ (801bb9c <network_appltemp_0506_configure_activations+0xa0>)
 801bb54:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801bb56:	4b0d      	ldr	r3, [pc, #52]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4a10      	ldr	r2, [pc, #64]	@ (801bb9c <network_appltemp_0506_configure_activations+0xa0>)
 801bb5c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801bb5e:	4b0b      	ldr	r3, [pc, #44]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	3304      	adds	r3, #4
 801bb64:	4a0e      	ldr	r2, [pc, #56]	@ (801bba0 <network_appltemp_0506_configure_activations+0xa4>)
 801bb66:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801bb68:	4b08      	ldr	r3, [pc, #32]	@ (801bb8c <network_appltemp_0506_configure_activations+0x90>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	3304      	adds	r3, #4
 801bb6e:	4a0c      	ldr	r2, [pc, #48]	@ (801bba0 <network_appltemp_0506_configure_activations+0xa4>)
 801bb70:	60d3      	str	r3, [r2, #12]
    return true;
 801bb72:	2301      	movs	r3, #1
 801bb74:	e005      	b.n	801bb82 <network_appltemp_0506_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801bb76:	2213      	movs	r2, #19
 801bb78:	2130      	movs	r1, #48	@ 0x30
 801bb7a:	6878      	ldr	r0, [r7, #4]
 801bb7c:	f002 fea2 	bl	801e8c4 <ai_platform_network_set_error>
  return false;
 801bb80:	2300      	movs	r3, #0
}
 801bb82:	4618      	mov	r0, r3
 801bb84:	3708      	adds	r7, #8
 801bb86:	46bd      	mov	sp, r7
 801bb88:	bd80      	pop	{r7, pc}
 801bb8a:	bf00      	nop
 801bb8c:	20001a60 	.word	0x20001a60
 801bb90:	200000f0 	.word	0x200000f0
 801bb94:	20000100 	.word	0x20000100
 801bb98:	20000110 	.word	0x20000110
 801bb9c:	20000120 	.word	0x20000120
 801bba0:	20000130 	.word	0x20000130

0801bba4 <network_appltemp_0506_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801bba4:	b580      	push	{r7, lr}
 801bba6:	b082      	sub	sp, #8
 801bba8:	af00      	add	r7, sp, #0
 801bbaa:	6078      	str	r0, [r7, #4]
 801bbac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_appltemp_0506_weights_map, 1, params)) {
 801bbae:	683a      	ldr	r2, [r7, #0]
 801bbb0:	2101      	movs	r1, #1
 801bbb2:	4828      	ldr	r0, [pc, #160]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bbb4:	f002 fdb4 	bl	801e720 <ai_platform_get_weights_map>
 801bbb8:	4603      	mov	r3, r0
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d03f      	beq.n	801bc3e <network_appltemp_0506_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801bbbe:	4b26      	ldr	r3, [pc, #152]	@ (801bc58 <network_appltemp_0506_configure_weights+0xb4>)
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bbc6:	4a24      	ldr	r2, [pc, #144]	@ (801bc58 <network_appltemp_0506_configure_weights+0xb4>)
 801bbc8:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801bbca:	4b22      	ldr	r3, [pc, #136]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	4a22      	ldr	r2, [pc, #136]	@ (801bc58 <network_appltemp_0506_configure_weights+0xb4>)
 801bbd0:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801bbd2:	4b20      	ldr	r3, [pc, #128]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	4a20      	ldr	r2, [pc, #128]	@ (801bc58 <network_appltemp_0506_configure_weights+0xb4>)
 801bbd8:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801bbda:	4b20      	ldr	r3, [pc, #128]	@ (801bc5c <network_appltemp_0506_configure_weights+0xb8>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bbe2:	4a1e      	ldr	r2, [pc, #120]	@ (801bc5c <network_appltemp_0506_configure_weights+0xb8>)
 801bbe4:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801bbe6:	4b1b      	ldr	r3, [pc, #108]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	3360      	adds	r3, #96	@ 0x60
 801bbec:	4a1b      	ldr	r2, [pc, #108]	@ (801bc5c <network_appltemp_0506_configure_weights+0xb8>)
 801bbee:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801bbf0:	4b18      	ldr	r3, [pc, #96]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	3360      	adds	r3, #96	@ 0x60
 801bbf6:	4a19      	ldr	r2, [pc, #100]	@ (801bc5c <network_appltemp_0506_configure_weights+0xb8>)
 801bbf8:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801bbfa:	4b19      	ldr	r3, [pc, #100]	@ (801bc60 <network_appltemp_0506_configure_weights+0xbc>)
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bc02:	4a17      	ldr	r2, [pc, #92]	@ (801bc60 <network_appltemp_0506_configure_weights+0xbc>)
 801bc04:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801bc06:	4b13      	ldr	r3, [pc, #76]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	3380      	adds	r3, #128	@ 0x80
 801bc0c:	4a14      	ldr	r2, [pc, #80]	@ (801bc60 <network_appltemp_0506_configure_weights+0xbc>)
 801bc0e:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801bc10:	4b10      	ldr	r3, [pc, #64]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	3380      	adds	r3, #128	@ 0x80
 801bc16:	4a12      	ldr	r2, [pc, #72]	@ (801bc60 <network_appltemp_0506_configure_weights+0xbc>)
 801bc18:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801bc1a:	4b12      	ldr	r3, [pc, #72]	@ (801bc64 <network_appltemp_0506_configure_weights+0xc0>)
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bc22:	4a10      	ldr	r2, [pc, #64]	@ (801bc64 <network_appltemp_0506_configure_weights+0xc0>)
 801bc24:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801bc26:	4b0b      	ldr	r3, [pc, #44]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	33a0      	adds	r3, #160	@ 0xa0
 801bc2c:	4a0d      	ldr	r2, [pc, #52]	@ (801bc64 <network_appltemp_0506_configure_weights+0xc0>)
 801bc2e:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801bc30:	4b08      	ldr	r3, [pc, #32]	@ (801bc54 <network_appltemp_0506_configure_weights+0xb0>)
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	33a0      	adds	r3, #160	@ 0xa0
 801bc36:	4a0b      	ldr	r2, [pc, #44]	@ (801bc64 <network_appltemp_0506_configure_weights+0xc0>)
 801bc38:	60d3      	str	r3, [r2, #12]
    return true;
 801bc3a:	2301      	movs	r3, #1
 801bc3c:	e005      	b.n	801bc4a <network_appltemp_0506_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801bc3e:	2212      	movs	r2, #18
 801bc40:	2130      	movs	r1, #48	@ 0x30
 801bc42:	6878      	ldr	r0, [r7, #4]
 801bc44:	f002 fe3e 	bl	801e8c4 <ai_platform_network_set_error>
  return false;
 801bc48:	2300      	movs	r3, #0
}
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	3708      	adds	r7, #8
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd80      	pop	{r7, pc}
 801bc52:	bf00      	nop
 801bc54:	20001a64 	.word	0x20001a64
 801bc58:	20000140 	.word	0x20000140
 801bc5c:	20000150 	.word	0x20000150
 801bc60:	20000160 	.word	0x20000160
 801bc64:	20000170 	.word	0x20000170

0801bc68 <ai_network_appltemp_0506_get_error>:
}


AI_API_ENTRY
ai_error ai_network_appltemp_0506_get_error(ai_handle network)
{
 801bc68:	b580      	push	{r7, lr}
 801bc6a:	b082      	sub	sp, #8
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801bc70:	6878      	ldr	r0, [r7, #4]
 801bc72:	f002 fe1b 	bl	801e8ac <ai_platform_network_get_error>
 801bc76:	4603      	mov	r3, r0
}
 801bc78:	4618      	mov	r0, r3
 801bc7a:	3708      	adds	r7, #8
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	bd80      	pop	{r7, pc}

0801bc80 <ai_network_appltemp_0506_create>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b084      	sub	sp, #16
 801bc84:	af02      	add	r7, sp, #8
 801bc86:	6078      	str	r0, [r7, #4]
 801bc88:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801bc8a:	2300      	movs	r3, #0
 801bc8c:	9301      	str	r3, [sp, #4]
 801bc8e:	2305      	movs	r3, #5
 801bc90:	9300      	str	r3, [sp, #0]
 801bc92:	2301      	movs	r3, #1
 801bc94:	4a04      	ldr	r2, [pc, #16]	@ (801bca8 <ai_network_appltemp_0506_create+0x28>)
 801bc96:	6839      	ldr	r1, [r7, #0]
 801bc98:	6878      	ldr	r0, [r7, #4]
 801bc9a:	f002 ff01 	bl	801eaa0 <ai_platform_network_create>
 801bc9e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801bca0:	4618      	mov	r0, r3
 801bca2:	3708      	adds	r7, #8
 801bca4:	46bd      	mov	sp, r7
 801bca6:	bd80      	pop	{r7, pc}
 801bca8:	20000594 	.word	0x20000594

0801bcac <ai_network_appltemp_0506_create_and_init>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b094      	sub	sp, #80	@ 0x50
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	60f8      	str	r0, [r7, #12]
 801bcb4:	60b9      	str	r1, [r7, #8]
 801bcb6:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_appltemp_0506_create(network, AI_NETWORK_APPLTEMP_0506_DATA_CONFIG);
 801bcb8:	2100      	movs	r1, #0
 801bcba:	68f8      	ldr	r0, [r7, #12]
 801bcbc:	f7ff ffe0 	bl	801bc80 <ai_network_appltemp_0506_create>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 801bcc4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d001      	beq.n	801bcd0 <ai_network_appltemp_0506_create_and_init+0x24>
    return err;
 801bccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bcce:	e067      	b.n	801bda0 <ai_network_appltemp_0506_create_and_init+0xf4>
  }
  
  if (ai_network_appltemp_0506_data_params_get(&params) != true) {
 801bcd0:	f107 0310 	add.w	r3, r7, #16
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f000 f8e7 	bl	801bea8 <ai_network_appltemp_0506_data_params_get>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	f083 0301 	eor.w	r3, r3, #1
 801bce0:	b2db      	uxtb	r3, r3
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d008      	beq.n	801bcf8 <ai_network_appltemp_0506_create_and_init+0x4c>
    err = ai_network_appltemp_0506_get_error(*network);
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	4618      	mov	r0, r3
 801bcec:	f7ff ffbc 	bl	801bc68 <ai_network_appltemp_0506_get_error>
 801bcf0:	4603      	mov	r3, r0
 801bcf2:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 801bcf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bcf6:	e053      	b.n	801bda0 <ai_network_appltemp_0506_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801bcfe:	e012      	b.n	801bd26 <ai_network_appltemp_0506_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801bd00:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 801bd04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801bd08:	009b      	lsls	r3, r3, #2
 801bd0a:	68ba      	ldr	r2, [r7, #8]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	681a      	ldr	r2, [r3, #0]
 801bd10:	f107 0310 	add.w	r3, r7, #16
 801bd14:	330c      	adds	r3, #12
 801bd16:	4618      	mov	r0, r3
 801bd18:	f002 fcf4 	bl	801e704 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801bd1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801bd20:	3301      	adds	r3, #1
 801bd22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801bd26:	68bb      	ldr	r3, [r7, #8]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d004      	beq.n	801bd36 <ai_network_appltemp_0506_create_and_init+0x8a>
 801bd2c:	8bfb      	ldrh	r3, [r7, #30]
 801bd2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801bd32:	429a      	cmp	r2, r3
 801bd34:	d3e4      	bcc.n	801bd00 <ai_network_appltemp_0506_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801bd36:	2300      	movs	r3, #0
 801bd38:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801bd3c:	e012      	b.n	801bd64 <ai_network_appltemp_0506_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 801bd3e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 801bd42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801bd46:	009b      	lsls	r3, r3, #2
 801bd48:	687a      	ldr	r2, [r7, #4]
 801bd4a:	4413      	add	r3, r2
 801bd4c:	681a      	ldr	r2, [r3, #0]
 801bd4e:	f107 0310 	add.w	r3, r7, #16
 801bd52:	3304      	adds	r3, #4
 801bd54:	4618      	mov	r0, r3
 801bd56:	f002 fcd5 	bl	801e704 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801bd5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801bd5e:	3301      	adds	r3, #1
 801bd60:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d004      	beq.n	801bd74 <ai_network_appltemp_0506_create_and_init+0xc8>
 801bd6a:	8afb      	ldrh	r3, [r7, #22]
 801bd6c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 801bd70:	429a      	cmp	r2, r3
 801bd72:	d3e4      	bcc.n	801bd3e <ai_network_appltemp_0506_create_and_init+0x92>
  }
#endif
  if (ai_network_appltemp_0506_init(*network, &params) != true) {
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	f107 0210 	add.w	r2, r7, #16
 801bd7c:	4611      	mov	r1, r2
 801bd7e:	4618      	mov	r0, r3
 801bd80:	f000 f846 	bl	801be10 <ai_network_appltemp_0506_init>
 801bd84:	4603      	mov	r3, r0
 801bd86:	f083 0301 	eor.w	r3, r3, #1
 801bd8a:	b2db      	uxtb	r3, r3
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d006      	beq.n	801bd9e <ai_network_appltemp_0506_create_and_init+0xf2>
    err = ai_network_appltemp_0506_get_error(*network);
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	4618      	mov	r0, r3
 801bd96:	f7ff ff67 	bl	801bc68 <ai_network_appltemp_0506_get_error>
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 801bd9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801bda0:	4618      	mov	r0, r3
 801bda2:	3750      	adds	r7, #80	@ 0x50
 801bda4:	46bd      	mov	sp, r7
 801bda6:	bd80      	pop	{r7, pc}

0801bda8 <ai_network_appltemp_0506_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801bda8:	b580      	push	{r7, lr}
 801bdaa:	b082      	sub	sp, #8
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
 801bdb0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d104      	bne.n	801bdc2 <ai_network_appltemp_0506_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801bdb8:	4b06      	ldr	r3, [pc, #24]	@ (801bdd4 <ai_network_appltemp_0506_inputs_get+0x2c>)
 801bdba:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	4a06      	ldr	r2, [pc, #24]	@ (801bdd8 <ai_network_appltemp_0506_inputs_get+0x30>)
 801bdc0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801bdc2:	6839      	ldr	r1, [r7, #0]
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	f002 fd83 	bl	801e8d0 <ai_platform_inputs_get>
 801bdca:	4603      	mov	r3, r0
}
 801bdcc:	4618      	mov	r0, r3
 801bdce:	3708      	adds	r7, #8
 801bdd0:	46bd      	mov	sp, r7
 801bdd2:	bd80      	pop	{r7, pc}
 801bdd4:	20000594 	.word	0x20000594
 801bdd8:	a1c00100 	.word	0xa1c00100

0801bddc <ai_network_appltemp_0506_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b082      	sub	sp, #8
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
 801bde4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d104      	bne.n	801bdf6 <ai_network_appltemp_0506_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801bdec:	4b06      	ldr	r3, [pc, #24]	@ (801be08 <ai_network_appltemp_0506_outputs_get+0x2c>)
 801bdee:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	4a06      	ldr	r2, [pc, #24]	@ (801be0c <ai_network_appltemp_0506_outputs_get+0x30>)
 801bdf4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801bdf6:	6839      	ldr	r1, [r7, #0]
 801bdf8:	6878      	ldr	r0, [r7, #4]
 801bdfa:	f002 fddf 	bl	801e9bc <ai_platform_outputs_get>
 801bdfe:	4603      	mov	r3, r0
}
 801be00:	4618      	mov	r0, r3
 801be02:	3708      	adds	r7, #8
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}
 801be08:	20000594 	.word	0x20000594
 801be0c:	a1c00100 	.word	0xa1c00100

0801be10 <ai_network_appltemp_0506_init>:


AI_API_ENTRY
ai_bool ai_network_appltemp_0506_init(
  ai_handle network, const ai_network_params* params)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b084      	sub	sp, #16
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
 801be18:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 801be1a:	6839      	ldr	r1, [r7, #0]
 801be1c:	6878      	ldr	r0, [r7, #4]
 801be1e:	f002 fe81 	bl	801eb24 <ai_platform_network_init>
 801be22:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 801be24:	2301      	movs	r3, #1
 801be26:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d101      	bne.n	801be32 <ai_network_appltemp_0506_init+0x22>
 801be2e:	2300      	movs	r3, #0
 801be30:	e026      	b.n	801be80 <ai_network_appltemp_0506_init+0x70>
  ok &= network_appltemp_0506_configure_weights(net_ctx, params);
 801be32:	6839      	ldr	r1, [r7, #0]
 801be34:	68f8      	ldr	r0, [r7, #12]
 801be36:	f7ff feb5 	bl	801bba4 <network_appltemp_0506_configure_weights>
 801be3a:	4603      	mov	r3, r0
 801be3c:	461a      	mov	r2, r3
 801be3e:	7afb      	ldrb	r3, [r7, #11]
 801be40:	4013      	ands	r3, r2
 801be42:	2b00      	cmp	r3, #0
 801be44:	bf14      	ite	ne
 801be46:	2301      	movne	r3, #1
 801be48:	2300      	moveq	r3, #0
 801be4a:	72fb      	strb	r3, [r7, #11]
  ok &= network_appltemp_0506_configure_activations(net_ctx, params);
 801be4c:	6839      	ldr	r1, [r7, #0]
 801be4e:	68f8      	ldr	r0, [r7, #12]
 801be50:	f7ff fe54 	bl	801bafc <network_appltemp_0506_configure_activations>
 801be54:	4603      	mov	r3, r0
 801be56:	461a      	mov	r2, r3
 801be58:	7afb      	ldrb	r3, [r7, #11]
 801be5a:	4013      	ands	r3, r2
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	bf14      	ite	ne
 801be60:	2301      	movne	r3, #1
 801be62:	2300      	moveq	r3, #0
 801be64:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801be66:	6878      	ldr	r0, [r7, #4]
 801be68:	f002 fef4 	bl	801ec54 <ai_platform_network_post_init>
 801be6c:	4603      	mov	r3, r0
 801be6e:	461a      	mov	r2, r3
 801be70:	7afb      	ldrb	r3, [r7, #11]
 801be72:	4013      	ands	r3, r2
 801be74:	2b00      	cmp	r3, #0
 801be76:	bf14      	ite	ne
 801be78:	2301      	movne	r3, #1
 801be7a:	2300      	moveq	r3, #0
 801be7c:	72fb      	strb	r3, [r7, #11]

  return ok;
 801be7e:	7afb      	ldrb	r3, [r7, #11]
}
 801be80:	4618      	mov	r0, r3
 801be82:	3710      	adds	r7, #16
 801be84:	46bd      	mov	sp, r7
 801be86:	bd80      	pop	{r7, pc}

0801be88 <ai_network_appltemp_0506_run>:


AI_API_ENTRY
ai_i32 ai_network_appltemp_0506_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b084      	sub	sp, #16
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	60f8      	str	r0, [r7, #12]
 801be90:	60b9      	str	r1, [r7, #8]
 801be92:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801be94:	687a      	ldr	r2, [r7, #4]
 801be96:	68b9      	ldr	r1, [r7, #8]
 801be98:	68f8      	ldr	r0, [r7, #12]
 801be9a:	f002 ff09 	bl	801ecb0 <ai_platform_network_process>
 801be9e:	4603      	mov	r3, r0
}
 801bea0:	4618      	mov	r0, r3
 801bea2:	3710      	adds	r7, #16
 801bea4:	46bd      	mov	sp, r7
 801bea6:	bd80      	pop	{r7, pc}

0801bea8 <ai_network_appltemp_0506_data_params_get>:
 * @ingroup network_appltemp_0506_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_appltemp_0506_data_params_get(ai_network_params* params)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b086      	sub	sp, #24
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d101      	bne.n	801beba <ai_network_appltemp_0506_data_params_get+0x12>
 801beb6:	2300      	movs	r3, #0
 801beb8:	e016      	b.n	801bee8 <ai_network_appltemp_0506_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801beba:	4a0d      	ldr	r2, [pc, #52]	@ (801bef0 <ai_network_appltemp_0506_data_params_get+0x48>)
 801bebc:	f107 0310 	add.w	r3, r7, #16
 801bec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bec4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT, g_network_appltemp_0506_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801bec8:	4a0a      	ldr	r2, [pc, #40]	@ (801bef4 <ai_network_appltemp_0506_data_params_get+0x4c>)
 801beca:	f107 0308 	add.w	r3, r7, #8
 801bece:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bed2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT, g_network_appltemp_0506_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801bed6:	f107 0210 	add.w	r2, r7, #16
 801beda:	f107 0308 	add.w	r3, r7, #8
 801bede:	4619      	mov	r1, r3
 801bee0:	6878      	ldr	r0, [r7, #4]
 801bee2:	f002 fcc3 	bl	801e86c <ai_platform_bind_network_params>
 801bee6:	4603      	mov	r3, r0
}
 801bee8:	4618      	mov	r0, r3
 801beea:	3718      	adds	r7, #24
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}
 801bef0:	080219fc 	.word	0x080219fc
 801bef4:	08021a04 	.word	0x08021a04

0801bef8 <LL_APB1_GRP1_EnableClock>:
{
 801bef8:	b480      	push	{r7}
 801befa:	b085      	sub	sp, #20
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801bf00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bf04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801bf06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	4313      	orrs	r3, r2
 801bf0e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801bf10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bf14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	4013      	ands	r3, r2
 801bf1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801bf1c:	68fb      	ldr	r3, [r7, #12]
}
 801bf1e:	bf00      	nop
 801bf20:	3714      	adds	r7, #20
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bc80      	pop	{r7}
 801bf26:	4770      	bx	lr

0801bf28 <LL_APB1_GRP2_EnableClock>:
{
 801bf28:	b480      	push	{r7}
 801bf2a:	b085      	sub	sp, #20
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 801bf30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bf34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801bf36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	4313      	orrs	r3, r2
 801bf3e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801bf40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bf44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	4013      	ands	r3, r2
 801bf4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801bf4c:	68fb      	ldr	r3, [r7, #12]
}
 801bf4e:	bf00      	nop
 801bf50:	3714      	adds	r7, #20
 801bf52:	46bd      	mov	sp, r7
 801bf54:	bc80      	pop	{r7}
 801bf56:	4770      	bx	lr

0801bf58 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 801bf58:	b580      	push	{r7, lr}
 801bf5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 801bf5c:	4b13      	ldr	r3, [pc, #76]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf5e:	4a14      	ldr	r2, [pc, #80]	@ (801bfb0 <MX_LPTIM1_Init+0x58>)
 801bf60:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 801bf62:	4b12      	ldr	r3, [pc, #72]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf64:	2200      	movs	r2, #0
 801bf66:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 801bf68:	4b10      	ldr	r3, [pc, #64]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf6a:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 801bf6e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 801bf70:	4b0e      	ldr	r3, [pc, #56]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bf76:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 801bf78:	4b0c      	ldr	r3, [pc, #48]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 801bf7e:	4b0b      	ldr	r3, [pc, #44]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf80:	2200      	movs	r2, #0
 801bf82:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 801bf84:	4b09      	ldr	r3, [pc, #36]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf86:	2200      	movs	r2, #0
 801bf88:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 801bf8a:	4b08      	ldr	r3, [pc, #32]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf8c:	2200      	movs	r2, #0
 801bf8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 801bf90:	4b06      	ldr	r3, [pc, #24]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf92:	2200      	movs	r2, #0
 801bf94:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 801bf96:	4805      	ldr	r0, [pc, #20]	@ (801bfac <MX_LPTIM1_Init+0x54>)
 801bf98:	f001 feb6 	bl	801dd08 <HAL_LPTIM_Init>
 801bf9c:	4603      	mov	r3, r0
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d001      	beq.n	801bfa6 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 801bfa2:	f7e5 fa43 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 801bfa6:	bf00      	nop
 801bfa8:	bd80      	pop	{r7, pc}
 801bfaa:	bf00      	nop
 801bfac:	20001b40 	.word	0x20001b40
 801bfb0:	40007c00 	.word	0x40007c00

0801bfb4 <HAL_LPTIM_MspInit>:

}


void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b090      	sub	sp, #64	@ 0x40
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801bfbc:	f107 0308 	add.w	r3, r7, #8
 801bfc0:	2238      	movs	r2, #56	@ 0x38
 801bfc2:	2100      	movs	r1, #0
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f004 fbe3 	bl	8020790 <memset>
  if(lptimHandle->Instance==LPTIM1)
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	4a21      	ldr	r2, [pc, #132]	@ (801c054 <HAL_LPTIM_MspInit+0xa0>)
 801bfd0:	4293      	cmp	r3, r2
 801bfd2:	d11c      	bne.n	801c00e <HAL_LPTIM_MspInit+0x5a>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 801bfd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801bfd8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 801bfda:	f04f 130c 	mov.w	r3, #786444	@ 0xc000c
 801bfde:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801bfe0:	f107 0308 	add.w	r3, r7, #8
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	f7ea ffc9 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 801bfea:	4603      	mov	r3, r0
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d001      	beq.n	801bff4 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 801bff0:	f7e5 fa1c 	bl	800142c <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 801bff4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801bff8:	f7ff ff7e 	bl	801bef8 <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 801bffc:	2200      	movs	r2, #0
 801bffe:	2100      	movs	r1, #0
 801c000:	2027      	movs	r0, #39	@ 0x27
 801c002:	f7e7 ff28 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 801c006:	2027      	movs	r0, #39	@ 0x27
 801c008:	f7e7 ff3f 	bl	8003e8a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM2_MspInit 1 */

    /* USER CODE END LPTIM2_MspInit 1 */
    }

}
 801c00c:	e01e      	b.n	801c04c <HAL_LPTIM_MspInit+0x98>
  else if(lptimHandle->Instance==LPTIM2)
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	4a11      	ldr	r2, [pc, #68]	@ (801c058 <HAL_LPTIM_MspInit+0xa4>)
 801c014:	4293      	cmp	r3, r2
 801c016:	d119      	bne.n	801c04c <HAL_LPTIM_MspInit+0x98>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 801c018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c01c:	60bb      	str	r3, [r7, #8]
	  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_HSI;
 801c01e:	4b0f      	ldr	r3, [pc, #60]	@ (801c05c <HAL_LPTIM_MspInit+0xa8>)
 801c020:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c022:	f107 0308 	add.w	r3, r7, #8
 801c026:	4618      	mov	r0, r3
 801c028:	f7ea ffa8 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 801c02c:	4603      	mov	r3, r0
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d001      	beq.n	801c036 <HAL_LPTIM_MspInit+0x82>
		  Error_Handler();
 801c032:	f7e5 f9fb 	bl	800142c <Error_Handler>
	  __HAL_RCC_LPTIM2_CLK_ENABLE();
 801c036:	2020      	movs	r0, #32
 801c038:	f7ff ff76 	bl	801bf28 <LL_APB1_GRP2_EnableClock>
	  HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 801c03c:	2200      	movs	r2, #0
 801c03e:	2100      	movs	r1, #0
 801c040:	2028      	movs	r0, #40	@ 0x28
 801c042:	f7e7 ff08 	bl	8003e56 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 801c046:	2028      	movs	r0, #40	@ 0x28
 801c048:	f7e7 ff1f 	bl	8003e8a <HAL_NVIC_EnableIRQ>
}
 801c04c:	bf00      	nop
 801c04e:	3740      	adds	r7, #64	@ 0x40
 801c050:	46bd      	mov	sp, r7
 801c052:	bd80      	pop	{r7, pc}
 801c054:	40007c00 	.word	0x40007c00
 801c058:	40009400 	.word	0x40009400
 801c05c:	00300020 	.word	0x00300020

0801c060 <LL_PWR_SetPowerMode>:
{
 801c060:	b480      	push	{r7}
 801c062:	b083      	sub	sp, #12
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 801c068:	4b06      	ldr	r3, [pc, #24]	@ (801c084 <LL_PWR_SetPowerMode+0x24>)
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	f023 0207 	bic.w	r2, r3, #7
 801c070:	4904      	ldr	r1, [pc, #16]	@ (801c084 <LL_PWR_SetPowerMode+0x24>)
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	4313      	orrs	r3, r2
 801c076:	600b      	str	r3, [r1, #0]
}
 801c078:	bf00      	nop
 801c07a:	370c      	adds	r7, #12
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bc80      	pop	{r7}
 801c080:	4770      	bx	lr
 801c082:	bf00      	nop
 801c084:	58000400 	.word	0x58000400

0801c088 <LL_C2_PWR_SetPowerMode>:
{
 801c088:	b480      	push	{r7}
 801c08a:	b083      	sub	sp, #12
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 801c090:	4b07      	ldr	r3, [pc, #28]	@ (801c0b0 <LL_C2_PWR_SetPowerMode+0x28>)
 801c092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c096:	f023 0207 	bic.w	r2, r3, #7
 801c09a:	4905      	ldr	r1, [pc, #20]	@ (801c0b0 <LL_C2_PWR_SetPowerMode+0x28>)
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	4313      	orrs	r3, r2
 801c0a0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 801c0a4:	bf00      	nop
 801c0a6:	370c      	adds	r7, #12
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	bc80      	pop	{r7}
 801c0ac:	4770      	bx	lr
 801c0ae:	bf00      	nop
 801c0b0:	58000400 	.word	0x58000400

0801c0b4 <LL_PWR_IsActiveFlag_C1SB>:
{
 801c0b4:	b480      	push	{r7}
 801c0b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 801c0b8:	4b07      	ldr	r3, [pc, #28]	@ (801c0d8 <LL_PWR_IsActiveFlag_C1SB+0x24>)
 801c0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c0be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c0c6:	d101      	bne.n	801c0cc <LL_PWR_IsActiveFlag_C1SB+0x18>
 801c0c8:	2301      	movs	r3, #1
 801c0ca:	e000      	b.n	801c0ce <LL_PWR_IsActiveFlag_C1SB+0x1a>
 801c0cc:	2300      	movs	r3, #0
}
 801c0ce:	4618      	mov	r0, r3
 801c0d0:	46bd      	mov	sp, r7
 801c0d2:	bc80      	pop	{r7}
 801c0d4:	4770      	bx	lr
 801c0d6:	bf00      	nop
 801c0d8:	58000400 	.word	0x58000400

0801c0dc <LL_PWR_IsActiveFlag_C2SB>:
{
 801c0dc:	b480      	push	{r7}
 801c0de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 801c0e0:	4b07      	ldr	r3, [pc, #28]	@ (801c100 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 801c0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c0e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c0ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801c0ee:	d101      	bne.n	801c0f4 <LL_PWR_IsActiveFlag_C2SB+0x18>
 801c0f0:	2301      	movs	r3, #1
 801c0f2:	e000      	b.n	801c0f6 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 801c0f4:	2300      	movs	r3, #0
}
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	bc80      	pop	{r7}
 801c0fc:	4770      	bx	lr
 801c0fe:	bf00      	nop
 801c100:	58000400 	.word	0x58000400

0801c104 <LL_PWR_ClearFlag_C1STOP_C1STB>:
{
 801c104:	b480      	push	{r7}
 801c106:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 801c108:	4b03      	ldr	r3, [pc, #12]	@ (801c118 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 801c10a:	2201      	movs	r2, #1
 801c10c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801c110:	bf00      	nop
 801c112:	46bd      	mov	sp, r7
 801c114:	bc80      	pop	{r7}
 801c116:	4770      	bx	lr
 801c118:	58000400 	.word	0x58000400

0801c11c <LL_PWR_ClearFlag_C2STOP_C2STB>:
  * @brief  Clear standby and stop flags for CPU2
  * @rmtoll EXTSCR       C2CSSF        LL_PWR_ClearFlag_C2STOP_C2STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C2STOP_C2STB(void)
{
 801c11c:	b480      	push	{r7}
 801c11e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C2CSSF);
 801c120:	4b03      	ldr	r3, [pc, #12]	@ (801c130 <LL_PWR_ClearFlag_C2STOP_C2STB+0x14>)
 801c122:	2202      	movs	r2, #2
 801c124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801c128:	bf00      	nop
 801c12a:	46bd      	mov	sp, r7
 801c12c:	bc80      	pop	{r7}
 801c12e:	4770      	bx	lr
 801c130:	58000400 	.word	0x58000400

0801c134 <LL_RCC_LSE_SetDriveCapability>:
{
 801c134:	b480      	push	{r7}
 801c136:	b083      	sub	sp, #12
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 801c13c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c144:	f023 0218 	bic.w	r2, r3, #24
 801c148:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	4313      	orrs	r3, r2
 801c150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 801c154:	bf00      	nop
 801c156:	370c      	adds	r7, #12
 801c158:	46bd      	mov	sp, r7
 801c15a:	bc80      	pop	{r7}
 801c15c:	4770      	bx	lr

0801c15e <LL_RCC_SetClkAfterWakeFromStop>:
{
 801c15e:	b480      	push	{r7}
 801c160:	b083      	sub	sp, #12
 801c162:	af00      	add	r7, sp, #0
 801c164:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 801c166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c16a:	689b      	ldr	r3, [r3, #8]
 801c16c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801c170:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	4313      	orrs	r3, r2
 801c178:	608b      	str	r3, [r1, #8]
}
 801c17a:	bf00      	nop
 801c17c:	370c      	adds	r7, #12
 801c17e:	46bd      	mov	sp, r7
 801c180:	bc80      	pop	{r7}
 801c182:	4770      	bx	lr

0801c184 <LL_AHB2_GRP1_EnableClock>:
{
 801c184:	b480      	push	{r7}
 801c186:	b085      	sub	sp, #20
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801c18c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c190:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	4313      	orrs	r3, r2
 801c19a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801c19c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c1a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	4013      	ands	r3, r2
 801c1a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801c1a8:	68fb      	ldr	r3, [r7, #12]
}
 801c1aa:	bf00      	nop
 801c1ac:	3714      	adds	r7, #20
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	bc80      	pop	{r7}
 801c1b2:	4770      	bx	lr

0801c1b4 <LL_AHB2_GRP1_DisableClock>:
{
 801c1b4:	b480      	push	{r7}
 801c1b6:	b083      	sub	sp, #12
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 801c1bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c1c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	43db      	mvns	r3, r3
 801c1c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c1ca:	4013      	ands	r3, r2
 801c1cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 801c1ce:	bf00      	nop
 801c1d0:	370c      	adds	r7, #12
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	bc80      	pop	{r7}
 801c1d6:	4770      	bx	lr

0801c1d8 <LL_APB1_GRP1_EnableClock>:
{
 801c1d8:	b480      	push	{r7}
 801c1da:	b085      	sub	sp, #20
 801c1dc:	af00      	add	r7, sp, #0
 801c1de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801c1e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c1e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801c1e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	4313      	orrs	r3, r2
 801c1ee:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801c1f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c1f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	4013      	ands	r3, r2
 801c1fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801c1fc:	68fb      	ldr	r3, [r7, #12]
}
 801c1fe:	bf00      	nop
 801c200:	3714      	adds	r7, #20
 801c202:	46bd      	mov	sp, r7
 801c204:	bc80      	pop	{r7}
 801c206:	4770      	bx	lr

0801c208 <LL_APB1_GRP1_DisableClock>:
{
 801c208:	b480      	push	{r7}
 801c20a:	b083      	sub	sp, #12
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 801c210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c214:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	43db      	mvns	r3, r3
 801c21a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c21e:	4013      	ands	r3, r2
 801c220:	658b      	str	r3, [r1, #88]	@ 0x58
}
 801c222:	bf00      	nop
 801c224:	370c      	adds	r7, #12
 801c226:	46bd      	mov	sp, r7
 801c228:	bc80      	pop	{r7}
 801c22a:	4770      	bx	lr

0801c22c <HAL_PWR_PVDCallback>:
extern RTC_HandleTypeDef hrtc;

/* CallBack Section Begin */

void HAL_PWR_PVDCallback(void)	// PVD CallBack
{
 801c22c:	b580      	push	{r7, lr}
 801c22e:	af00      	add	r7, sp, #0
	if(my_SystemClock_Config_done == 0)											// Check if the PS Detection has been executed
 801c230:	4b8e      	ldr	r3, [pc, #568]	@ (801c46c <HAL_PWR_PVDCallback+0x240>)
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d103      	bne.n	801c240 <HAL_PWR_PVDCallback+0x14>
	{
		my_Next_State = RTS;
 801c238:	4b8d      	ldr	r3, [pc, #564]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c23a:	2202      	movs	r2, #2
 801c23c:	701a      	strb	r2, [r3, #0]
			break;
		}

		}
	}
}
 801c23e:	e113      	b.n	801c468 <HAL_PWR_PVDCallback+0x23c>
		switch(my_Current_State)
 801c240:	4b8c      	ldr	r3, [pc, #560]	@ (801c474 <HAL_PWR_PVDCallback+0x248>)
 801c242:	781b      	ldrb	r3, [r3, #0]
 801c244:	3b03      	subs	r3, #3
 801c246:	2b04      	cmp	r3, #4
 801c248:	f200 8102 	bhi.w	801c450 <HAL_PWR_PVDCallback+0x224>
 801c24c:	a201      	add	r2, pc, #4	@ (adr r2, 801c254 <HAL_PWR_PVDCallback+0x28>)
 801c24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c252:	bf00      	nop
 801c254:	0801c269 	.word	0x0801c269
 801c258:	0801c2fd 	.word	0x0801c2fd
 801c25c:	0801c3e3 	.word	0x0801c3e3
 801c260:	0801c417 	.word	0x0801c417
 801c264:	0801c36b 	.word	0x0801c36b
			My_EHS_to_EMS_Timer(STOP_TIMER);									// Stop EHS_to_EMS Timer
 801c268:	2001      	movs	r0, #1
 801c26a:	f000 fd61 	bl	801cd30 <My_EHS_to_EMS_Timer>
			switch(my_Next_State)
 801c26e:	4b80      	ldr	r3, [pc, #512]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c270:	781b      	ldrb	r3, [r3, #0]
 801c272:	3b02      	subs	r3, #2
 801c274:	2b07      	cmp	r3, #7
 801c276:	d836      	bhi.n	801c2e6 <HAL_PWR_PVDCallback+0xba>
 801c278:	a201      	add	r2, pc, #4	@ (adr r2, 801c280 <HAL_PWR_PVDCallback+0x54>)
 801c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c27e:	bf00      	nop
 801c280:	0801c2a1 	.word	0x0801c2a1
 801c284:	0801c2e7 	.word	0x0801c2e7
 801c288:	0801c2c5 	.word	0x0801c2c5
 801c28c:	0801c2e7 	.word	0x0801c2e7
 801c290:	0801c2e7 	.word	0x0801c2e7
 801c294:	0801c2cf 	.word	0x0801c2cf
 801c298:	0801c2e7 	.word	0x0801c2e7
 801c29c:	0801c2db 	.word	0x0801c2db
				if (my_SubghzApp_Init_done == 1) 								// Check if Radio Initialization is done
 801c2a0:	4b75      	ldr	r3, [pc, #468]	@ (801c478 <HAL_PWR_PVDCallback+0x24c>)
 801c2a2:	781b      	ldrb	r3, [r3, #0]
 801c2a4:	2b01      	cmp	r3, #1
 801c2a6:	d127      	bne.n	801c2f8 <HAL_PWR_PVDCallback+0xcc>
					if (my_RTS_cnt == 0)
 801c2a8:	4b74      	ldr	r3, [pc, #464]	@ (801c47c <HAL_PWR_PVDCallback+0x250>)
 801c2aa:	781b      	ldrb	r3, [r3, #0]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d104      	bne.n	801c2ba <HAL_PWR_PVDCallback+0x8e>
						My_Trise_Meas();										// Measure the Trise Time
 801c2b0:	f001 faf0 	bl	801d894 <My_Trise_Meas>
						My_SMW_Timer(STOP_TIMER);								// Stop the SMW Timer
 801c2b4:	2001      	movs	r0, #1
 801c2b6:	f000 fcfb 	bl	801ccb0 <My_SMW_Timer>
					UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801c2ba:	2100      	movs	r1, #0
 801c2bc:	2010      	movs	r0, #16
 801c2be:	f7fe fca3 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c2c2:	e019      	b.n	801c2f8 <HAL_PWR_PVDCallback+0xcc>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0);  	// My_ESF -- ESF = Energy Storage Function
 801c2c4:	2100      	movs	r1, #0
 801c2c6:	2040      	movs	r0, #64	@ 0x40
 801c2c8:	f7fe fc9e 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c2cc:	e015      	b.n	801c2fa <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c2ce:	2100      	movs	r1, #0
 801c2d0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c2d4:	f7fe fc98 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c2d8:	e00f      	b.n	801c2fa <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_AIF), CFG_SEQ_Prio_0);  	// My_AIF -- AIF = Artificial Intelligence Function
 801c2da:	2100      	movs	r1, #0
 801c2dc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801c2e0:	f7fe fc92 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c2e4:	e009      	b.n	801c2fa <HAL_PWR_PVDCallback+0xce>
				my_Next_State = SMS;											// Set Next State as SMS
 801c2e6:	4b62      	ldr	r3, [pc, #392]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c2e8:	2207      	movs	r2, #7
 801c2ea:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c2ec:	2100      	movs	r1, #0
 801c2ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c2f2:	f7fe fc89 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c2f6:	e000      	b.n	801c2fa <HAL_PWR_PVDCallback+0xce>
				break;
 801c2f8:	bf00      	nop
			break;
 801c2fa:	e0b5      	b.n	801c468 <HAL_PWR_PVDCallback+0x23c>
			switch (my_Cmode)
 801c2fc:	4b60      	ldr	r3, [pc, #384]	@ (801c480 <HAL_PWR_PVDCallback+0x254>)
 801c2fe:	781b      	ldrb	r3, [r3, #0]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d002      	beq.n	801c30a <HAL_PWR_PVDCallback+0xde>
 801c304:	2b02      	cmp	r3, #2
 801c306:	d00b      	beq.n	801c320 <HAL_PWR_PVDCallback+0xf4>
 801c308:	e022      	b.n	801c350 <HAL_PWR_PVDCallback+0x124>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801c30a:	4b5a      	ldr	r3, [pc, #360]	@ (801c474 <HAL_PWR_PVDCallback+0x248>)
 801c30c:	2203      	movs	r2, #3
 801c30e:	701a      	strb	r2, [r3, #0]
				My_DCM_to_CCM_Timer(STOP_TIMER);  								// Stop the DCM to CCM Timer
 801c310:	2001      	movs	r0, #1
 801c312:	f000 fd2f 	bl	801cd74 <My_DCM_to_CCM_Timer>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF - Back to Harvest
 801c316:	2100      	movs	r1, #0
 801c318:	2020      	movs	r0, #32
 801c31a:	f7fe fc75 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c31e:	e023      	b.n	801c368 <HAL_PWR_PVDCallback+0x13c>
				if (my_Check_ESD == 0)
 801c320:	4b58      	ldr	r3, [pc, #352]	@ (801c484 <HAL_PWR_PVDCallback+0x258>)
 801c322:	781b      	ldrb	r3, [r3, #0]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d102      	bne.n	801c32e <HAL_PWR_PVDCallback+0x102>
					my_Cmode = EOC;  											// End of Charge Mode has been met
 801c328:	4b55      	ldr	r3, [pc, #340]	@ (801c480 <HAL_PWR_PVDCallback+0x254>)
 801c32a:	2202      	movs	r2, #2
 801c32c:	701a      	strb	r2, [r3, #0]
				My_ESW_CCM_Timer(STOP_TIMER);  									// Stop the Energy Storage Window Timer
 801c32e:	2001      	movs	r0, #1
 801c330:	f000 fc98 	bl	801cc64 <My_ESW_CCM_Timer>
				My_EHS_to_EMS_Timer(STOP_TIMER);  								// Stop the EHS to EMS Timer
 801c334:	2001      	movs	r0, #1
 801c336:	f000 fcfb 	bl	801cd30 <My_EHS_to_EMS_Timer>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801c33a:	4b4e      	ldr	r3, [pc, #312]	@ (801c474 <HAL_PWR_PVDCallback+0x248>)
 801c33c:	2203      	movs	r2, #3
 801c33e:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as RTS:	 	ESS --> EHS --> SMS
 801c340:	4b4b      	ldr	r3, [pc, #300]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c342:	2207      	movs	r2, #7
 801c344:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  	// My_EHF - Back to Harvest
 801c346:	2100      	movs	r1, #0
 801c348:	2020      	movs	r0, #32
 801c34a:	f7fe fc5d 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c34e:	e00b      	b.n	801c368 <HAL_PWR_PVDCallback+0x13c>
				my_Current_State = EHS;  										// Set Current State as EHS
 801c350:	4b48      	ldr	r3, [pc, #288]	@ (801c474 <HAL_PWR_PVDCallback+0x248>)
 801c352:	2203      	movs	r2, #3
 801c354:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as SMS
 801c356:	4b46      	ldr	r3, [pc, #280]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c358:	2207      	movs	r2, #7
 801c35a:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c35c:	2100      	movs	r1, #0
 801c35e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c362:	f7fe fc51 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c366:	bf00      	nop
			break;
 801c368:	e07e      	b.n	801c468 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801c36a:	2000      	movs	r0, #0
 801c36c:	f001 fb8e 	bl	801da8c <My_VDD_to_VDDS2_Switch>
			if (!((my_Cmode == DCM) && (my_Check_ESD == 0)))
 801c370:	4b43      	ldr	r3, [pc, #268]	@ (801c480 <HAL_PWR_PVDCallback+0x254>)
 801c372:	781b      	ldrb	r3, [r3, #0]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d103      	bne.n	801c380 <HAL_PWR_PVDCallback+0x154>
 801c378:	4b42      	ldr	r3, [pc, #264]	@ (801c484 <HAL_PWR_PVDCallback+0x258>)
 801c37a:	781b      	ldrb	r3, [r3, #0]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d002      	beq.n	801c386 <HAL_PWR_PVDCallback+0x15a>
				Radio.Sleep();													// Switch the Radio Off
 801c380:	4b41      	ldr	r3, [pc, #260]	@ (801c488 <HAL_PWR_PVDCallback+0x25c>)
 801c382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c384:	4798      	blx	r3
			my_Current_State = EHS;												// Set Current State as EHS
 801c386:	4b3b      	ldr	r3, [pc, #236]	@ (801c474 <HAL_PWR_PVDCallback+0x248>)
 801c388:	2203      	movs	r2, #3
 801c38a:	701a      	strb	r2, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801c38c:	4b3c      	ldr	r3, [pc, #240]	@ (801c480 <HAL_PWR_PVDCallback+0x254>)
 801c38e:	781b      	ldrb	r3, [r3, #0]
 801c390:	2b02      	cmp	r3, #2
 801c392:	d107      	bne.n	801c3a4 <HAL_PWR_PVDCallback+0x178>
 801c394:	483d      	ldr	r0, [pc, #244]	@ (801c48c <HAL_PWR_PVDCallback+0x260>)
 801c396:	f001 fee7 	bl	801e168 <HAL_LPTIM_ReadCounter>
 801c39a:	4603      	mov	r3, r0
 801c39c:	f642 0210 	movw	r2, #10256	@ 0x2810
 801c3a0:	4293      	cmp	r3, r2
 801c3a2:	d80f      	bhi.n	801c3c4 <HAL_PWR_PVDCallback+0x198>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801c3a4:	4b36      	ldr	r3, [pc, #216]	@ (801c480 <HAL_PWR_PVDCallback+0x254>)
 801c3a6:	781b      	ldrb	r3, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801c3a8:	2b02      	cmp	r3, #2
 801c3aa:	d007      	beq.n	801c3bc <HAL_PWR_PVDCallback+0x190>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801c3ac:	4837      	ldr	r0, [pc, #220]	@ (801c48c <HAL_PWR_PVDCallback+0x260>)
 801c3ae:	f001 fedb 	bl	801e168 <HAL_LPTIM_ReadCounter>
 801c3b2:	4603      	mov	r3, r0
 801c3b4:	f241 4208 	movw	r2, #5128	@ 0x1408
 801c3b8:	4293      	cmp	r3, r2
 801c3ba:	d803      	bhi.n	801c3c4 <HAL_PWR_PVDCallback+0x198>
					(my_SMS_cnt > SMS_MAX))
 801c3bc:	4b34      	ldr	r3, [pc, #208]	@ (801c490 <HAL_PWR_PVDCallback+0x264>)
 801c3be:	781b      	ldrb	r3, [r3, #0]
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801c3c0:	2b05      	cmp	r3, #5
 801c3c2:	d909      	bls.n	801c3d8 <HAL_PWR_PVDCallback+0x1ac>
				my_Trise_time_start = HAL_LPTIM_ReadCounter(&hlptim1);  		// Measure Starting Trise Time
 801c3c4:	4831      	ldr	r0, [pc, #196]	@ (801c48c <HAL_PWR_PVDCallback+0x260>)
 801c3c6:	f001 fecf 	bl	801e168 <HAL_LPTIM_ReadCounter>
 801c3ca:	4603      	mov	r3, r0
 801c3cc:	b29a      	uxth	r2, r3
 801c3ce:	4b31      	ldr	r3, [pc, #196]	@ (801c494 <HAL_PWR_PVDCallback+0x268>)
 801c3d0:	801a      	strh	r2, [r3, #0]
				my_Next_State = AIS;  											// SMS --> AIS
 801c3d2:	4b27      	ldr	r3, [pc, #156]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c3d4:	2209      	movs	r2, #9
 801c3d6:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 			// My_EHF
 801c3d8:	2100      	movs	r1, #0
 801c3da:	2020      	movs	r0, #32
 801c3dc:	f7fe fc14 	bl	801ac08 <UTIL_SEQ_SetTask>
			break;
 801c3e0:	e042      	b.n	801c468 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);									// Open the Switch between Vdd and ES
 801c3e2:	2000      	movs	r0, #0
 801c3e4:	f001 fad4 	bl	801d990 <My_VDD_to_ES_Switch>
			my_Cmode = EOC;  													// The Storage Element is in EOC since the PVD has been triggered with the VEOC threshold while in EMS.
 801c3e8:	4b25      	ldr	r3, [pc, #148]	@ (801c480 <HAL_PWR_PVDCallback+0x254>)
 801c3ea:	2202      	movs	r2, #2
 801c3ec:	701a      	strb	r2, [r3, #0]
			My_EMS_to_EDS_Timer(STOP_TIMER);  									// Stop the EMS to EDS Timer
 801c3ee:	2001      	movs	r0, #1
 801c3f0:	f000 fce2 	bl	801cdb8 <My_EMS_to_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);  									// Stop the EMS to SMS Timer
 801c3f4:	2001      	movs	r0, #1
 801c3f6:	f000 fd01 	bl	801cdfc <My_EMS_to_SMS_Timer>
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801c3fa:	4b27      	ldr	r3, [pc, #156]	@ (801c498 <HAL_PWR_PVDCallback+0x26c>)
 801c3fc:	2200      	movs	r2, #0
 801c3fe:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;  											// Set Current State as EHS: 	EMS --> EHS
 801c400:	4b1c      	ldr	r3, [pc, #112]	@ (801c474 <HAL_PWR_PVDCallback+0x248>)
 801c402:	2203      	movs	r2, #3
 801c404:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  												// Set Next State as RTS: 		EMS --> EHS --> RTS
 801c406:	4b1a      	ldr	r3, [pc, #104]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c408:	2202      	movs	r2, #2
 801c40a:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  		// My_EHF - Back to Harvest
 801c40c:	2100      	movs	r1, #0
 801c40e:	2020      	movs	r0, #32
 801c410:	f7fe fbfa 	bl	801ac08 <UTIL_SEQ_SetTask>
			break;
 801c414:	e028      	b.n	801c468 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);  									// Open the Switch connected to the Storage element
 801c416:	2000      	movs	r0, #0
 801c418:	f001 faba 	bl	801d990 <My_VDD_to_ES_Switch>
			my_Cmode = DCM;  													// Assume that the Energy Storage Device (ESD) is discharged
 801c41c:	4b18      	ldr	r3, [pc, #96]	@ (801c480 <HAL_PWR_PVDCallback+0x254>)
 801c41e:	2200      	movs	r2, #0
 801c420:	701a      	strb	r2, [r3, #0]
			My_EDS_Timer(STOP_TIMER);  											// Stop the EDS Timer
 801c422:	2001      	movs	r0, #1
 801c424:	f000 fc6a 	bl	801ccfc <My_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);									// Stop the EMS_to_SMS Timer
 801c428:	2001      	movs	r0, #1
 801c42a:	f000 fce7 	bl	801cdfc <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 0;
 801c42e:	4b1b      	ldr	r3, [pc, #108]	@ (801c49c <HAL_PWR_PVDCallback+0x270>)
 801c430:	2200      	movs	r2, #0
 801c432:	701a      	strb	r2, [r3, #0]
			my_rtc_B_ems_flag = 0;
 801c434:	4b1a      	ldr	r3, [pc, #104]	@ (801c4a0 <HAL_PWR_PVDCallback+0x274>)
 801c436:	2200      	movs	r2, #0
 801c438:	701a      	strb	r2, [r3, #0]
			my_RTS_cnt = 0;  													// Resets the transmissions counter
 801c43a:	4b10      	ldr	r3, [pc, #64]	@ (801c47c <HAL_PWR_PVDCallback+0x250>)
 801c43c:	2200      	movs	r2, #0
 801c43e:	701a      	strb	r2, [r3, #0]
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801c440:	4b15      	ldr	r3, [pc, #84]	@ (801c498 <HAL_PWR_PVDCallback+0x26c>)
 801c442:	2200      	movs	r2, #0
 801c444:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);  		// SendTxData
 801c446:	2100      	movs	r1, #0
 801c448:	2010      	movs	r0, #16
 801c44a:	f7fe fbdd 	bl	801ac08 <UTIL_SEQ_SetTask>
			break;
 801c44e:	e00b      	b.n	801c468 <HAL_PWR_PVDCallback+0x23c>
			my_Current_State = EHS;  											// Set Current State as EHS
 801c450:	4b08      	ldr	r3, [pc, #32]	@ (801c474 <HAL_PWR_PVDCallback+0x248>)
 801c452:	2203      	movs	r2, #3
 801c454:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;												// Set Next State as SMS
 801c456:	4b06      	ldr	r3, [pc, #24]	@ (801c470 <HAL_PWR_PVDCallback+0x244>)
 801c458:	2207      	movs	r2, #7
 801c45a:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  		// My_SMF -- SMF = Sensors Measurement Function
 801c45c:	2100      	movs	r1, #0
 801c45e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c462:	f7fe fbd1 	bl	801ac08 <UTIL_SEQ_SetTask>
			break;
 801c466:	bf00      	nop
}
 801c468:	bf00      	nop
 801c46a:	bd80      	pop	{r7, pc}
 801c46c:	2000074c 	.word	0x2000074c
 801c470:	20000638 	.word	0x20000638
 801c474:	20001be9 	.word	0x20001be9
 801c478:	200008a7 	.word	0x200008a7
 801c47c:	20001bba 	.word	0x20001bba
 801c480:	20001bea 	.word	0x20001bea
 801c484:	20001bc0 	.word	0x20001bc0
 801c488:	08021f8c 	.word	0x08021f8c
 801c48c:	20001b40 	.word	0x20001b40
 801c490:	20001bbc 	.word	0x20001bbc
 801c494:	20001bc2 	.word	0x20001bc2
 801c498:	20001bbd 	.word	0x20001bbd
 801c49c:	20001bbe 	.word	0x20001bbe
 801c4a0:	20001bbf 	.word	0x20001bbf

0801c4a4 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)	// LPTIM Callback
{
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b082      	sub	sp, #8
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	6078      	str	r0, [r7, #4]
	if(hlptim->Instance == LPTIM1)
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	4a36      	ldr	r2, [pc, #216]	@ (801c58c <HAL_LPTIM_AutoReloadMatchCallback+0xe8>)
 801c4b2:	4293      	cmp	r3, r2
 801c4b4:	d166      	bne.n	801c584 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
	{
		switch(my_Current_State)
 801c4b6:	4b36      	ldr	r3, [pc, #216]	@ (801c590 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c4b8:	781b      	ldrb	r3, [r3, #0]
 801c4ba:	3b03      	subs	r3, #3
 801c4bc:	2b03      	cmp	r3, #3
 801c4be:	d854      	bhi.n	801c56a <HAL_LPTIM_AutoReloadMatchCallback+0xc6>
 801c4c0:	a201      	add	r2, pc, #4	@ (adr r2, 801c4c8 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 801c4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4c6:	bf00      	nop
 801c4c8:	0801c4d9 	.word	0x0801c4d9
 801c4cc:	0801c517 	.word	0x0801c517
 801c4d0:	0801c541 	.word	0x0801c541
 801c4d4:	0801c54f 	.word	0x0801c54f
		{
		case EHS: 															// EHS = Energy Harvesting State
		{
			switch (my_Next_State)
 801c4d8:	4b2e      	ldr	r3, [pc, #184]	@ (801c594 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c4da:	781b      	ldrb	r3, [r3, #0]
 801c4dc:	2b04      	cmp	r3, #4
 801c4de:	d10d      	bne.n	801c4fc <HAL_LPTIM_AutoReloadMatchCallback+0x58>
			{
			case ESS:
			{

#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS; 										// 	ESS --> SMS
 801c4e0:	4b2c      	ldr	r3, [pc, #176]	@ (801c594 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c4e2:	2207      	movs	r2, #7
 801c4e4:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS; 										// ESS -->  RTS
#endif

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801c4e6:	2001      	movs	r0, #1
 801c4e8:	f000 fc44 	bl	801cd74 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);								// Stop ESW Timer
 801c4ec:	2001      	movs	r0, #1
 801c4ee:	f000 fbb9 	bl	801cc64 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801c4f2:	2100      	movs	r1, #0
 801c4f4:	2020      	movs	r0, #32
 801c4f6:	f7fe fb87 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c4fa:	e00b      	b.n	801c514 <HAL_LPTIM_AutoReloadMatchCallback+0x70>
			}

			default:
			{
				my_Current_State = EHS;  									// Set Current State as EHS
 801c4fc:	4b24      	ldr	r3, [pc, #144]	@ (801c590 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c4fe:	2203      	movs	r2, #3
 801c500:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;										// Set Next State as SMS
 801c502:	4b24      	ldr	r3, [pc, #144]	@ (801c594 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c504:	2207      	movs	r2, #7
 801c506:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801c508:	2100      	movs	r1, #0
 801c50a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c50e:	f7fe fb7b 	bl	801ac08 <UTIL_SEQ_SetTask>
				break;
 801c512:	bf00      	nop
			}
			}

			break;
 801c514:	e036      	b.n	801c584 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case ESS:															// ESS = Energy Storage State
		{
			if (my_Cmode != DCM)
 801c516:	4b20      	ldr	r3, [pc, #128]	@ (801c598 <HAL_LPTIM_AutoReloadMatchCallback+0xf4>)
 801c518:	781b      	ldrb	r3, [r3, #0]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d031      	beq.n	801c582 <HAL_LPTIM_AutoReloadMatchCallback+0xde>
			{
#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS;										// Set Next State as SMS: ESS --> EHS --> SMS
 801c51e:	4b1d      	ldr	r3, [pc, #116]	@ (801c594 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c520:	2207      	movs	r2, #7
 801c522:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;										// Set Next State as RTS: ESS --> EHS --> RTS
#endif

				my_Current_State = EHS;										// Set Current State as EHS: ESS --> EHS
 801c524:	4b1a      	ldr	r3, [pc, #104]	@ (801c590 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c526:	2203      	movs	r2, #3
 801c528:	701a      	strb	r2, [r3, #0]

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801c52a:	2001      	movs	r0, #1
 801c52c:	f000 fc22 	bl	801cd74 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);									// Stop ESW Timer
 801c530:	2001      	movs	r0, #1
 801c532:	f000 fb97 	bl	801cc64 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801c536:	2100      	movs	r1, #0
 801c538:	2020      	movs	r0, #32
 801c53a:	f7fe fb65 	bl	801ac08 <UTIL_SEQ_SetTask>
			}
			break;
 801c53e:	e020      	b.n	801c582 <HAL_LPTIM_AutoReloadMatchCallback+0xde>
		}

		case EMS:															// EMS = Energy Missing State
		{
			My_EDS_Timer(STOP_TIMER); 										// Stop the Energy Detection Timer
 801c540:	2001      	movs	r0, #1
 801c542:	f000 fbdb 	bl	801ccfc <My_EDS_Timer>
			my_rm_failure_flag = 1; 										// Resistance Measurement in EMS State has failed because the LPTIM1 Interrupt has been triggered earlier than the COMP Interrupt
 801c546:	4b15      	ldr	r3, [pc, #84]	@ (801c59c <HAL_LPTIM_AutoReloadMatchCallback+0xf8>)
 801c548:	2201      	movs	r2, #1
 801c54a:	701a      	strb	r2, [r3, #0]
			break;
 801c54c:	e01a      	b.n	801c584 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case EDS:															// EDS = Energy Detection State
		{
			My_EMS_to_EDS_Timer(START_TIMER); 								// Start the Timer for the Energy Presence Check (EDC)
 801c54e:	2000      	movs	r0, #0
 801c550:	f000 fc32 	bl	801cdb8 <My_EMS_to_EDS_Timer>
			My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the switch Between Vdd and ES Start Supplying from the Energy Storage Device (ESD)
 801c554:	2001      	movs	r0, #1
 801c556:	f001 fa1b 	bl	801d990 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
			My_VDD_to_VDDS2_Switch(Switch_OPEN);							// unBias the Sensors: Open the switch between VDD and VDDS2
#endif

			my_Current_State = EMS; 										// Set Current State as EMS: EDS --> EMS
 801c55a:	4b0d      	ldr	r3, [pc, #52]	@ (801c590 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c55c:	2205      	movs	r2, #5
 801c55e:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF -- Back to Harvest
 801c560:	2100      	movs	r1, #0
 801c562:	2020      	movs	r0, #32
 801c564:	f7fe fb50 	bl	801ac08 <UTIL_SEQ_SetTask>
			break;
 801c568:	e00c      	b.n	801c584 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		default:
		{
			my_Current_State = EHS;  										// Set Current State as EHS
 801c56a:	4b09      	ldr	r3, [pc, #36]	@ (801c590 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c56c:	2203      	movs	r2, #3
 801c56e:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;											// Set Next State as SMS
 801c570:	4b08      	ldr	r3, [pc, #32]	@ (801c594 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c572:	2207      	movs	r2, #7
 801c574:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c576:	2100      	movs	r1, #0
 801c578:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c57c:	f7fe fb44 	bl	801ac08 <UTIL_SEQ_SetTask>
			break;
 801c580:	e000      	b.n	801c584 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
			break;
 801c582:	bf00      	nop
		}
		}
	}
}
 801c584:	bf00      	nop
 801c586:	3708      	adds	r7, #8
 801c588:	46bd      	mov	sp, r7
 801c58a:	bd80      	pop	{r7, pc}
 801c58c:	40007c00 	.word	0x40007c00
 801c590:	20001be9 	.word	0x20001be9
 801c594:	20000638 	.word	0x20000638
 801c598:	20001bea 	.word	0x20001bea
 801c59c:	20001bc8 	.word	0x20001bc8

0801c5a0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)			// RTC Alarm A CallBack
{
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b082      	sub	sp, #8
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	6078      	str	r0, [r7, #4]

	switch(my_Current_State)
 801c5a8:	4b11      	ldr	r3, [pc, #68]	@ (801c5f0 <HAL_RTC_AlarmAEventCallback+0x50>)
 801c5aa:	781b      	ldrb	r3, [r3, #0]
 801c5ac:	2b05      	cmp	r3, #5
 801c5ae:	d002      	beq.n	801c5b6 <HAL_RTC_AlarmAEventCallback+0x16>
 801c5b0:	2b07      	cmp	r3, #7
 801c5b2:	d00e      	beq.n	801c5d2 <HAL_RTC_AlarmAEventCallback+0x32>
	default:
	{
#if MY_TX_OTAA
		UTIL_TIMER_IRQ_Handler();
#endif
		break;
 801c5b4:	e018      	b.n	801c5e8 <HAL_RTC_AlarmAEventCallback+0x48>
		My_EMS_to_SMS_Timer(STOP_TIMER);							// Stop EMS to SMS Timer
 801c5b6:	2001      	movs	r0, #1
 801c5b8:	f000 fc20 	bl	801cdfc <My_EMS_to_SMS_Timer>
		my_rtc_A_ems_flag = 0;
 801c5bc:	4b0d      	ldr	r3, [pc, #52]	@ (801c5f4 <HAL_RTC_AlarmAEventCallback+0x54>)
 801c5be:	2200      	movs	r2, #0
 801c5c0:	701a      	strb	r2, [r3, #0]
		my_Current_State = EMS;										// Set Current State as EMS
 801c5c2:	4b0b      	ldr	r3, [pc, #44]	@ (801c5f0 <HAL_RTC_AlarmAEventCallback+0x50>)
 801c5c4:	2205      	movs	r2, #5
 801c5c6:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801c5c8:	2100      	movs	r1, #0
 801c5ca:	2020      	movs	r0, #32
 801c5cc:	f7fe fb1c 	bl	801ac08 <UTIL_SEQ_SetTask>
		break;
 801c5d0:	e00a      	b.n	801c5e8 <HAL_RTC_AlarmAEventCallback+0x48>
		My_VDD_to_VDDS2_Switch(Switch_OPEN);						// unBias the Sensors: Open the switch between VDD and VDDS2
 801c5d2:	2000      	movs	r0, #0
 801c5d4:	f001 fa5a 	bl	801da8c <My_VDD_to_VDDS2_Switch>
		my_Current_State = EHS;										// Set Current State as EHS
 801c5d8:	4b05      	ldr	r3, [pc, #20]	@ (801c5f0 <HAL_RTC_AlarmAEventCallback+0x50>)
 801c5da:	2203      	movs	r2, #3
 801c5dc:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801c5de:	2100      	movs	r1, #0
 801c5e0:	2020      	movs	r0, #32
 801c5e2:	f7fe fb11 	bl	801ac08 <UTIL_SEQ_SetTask>
		break;
 801c5e6:	bf00      	nop
	}
	}
}
 801c5e8:	bf00      	nop
 801c5ea:	3708      	adds	r7, #8
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	bd80      	pop	{r7, pc}
 801c5f0:	20001be9 	.word	0x20001be9
 801c5f4:	20001bbe 	.word	0x20001bbe

0801c5f8 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)	// RTC Alarm B CallBack
{
 801c5f8:	b580      	push	{r7, lr}
 801c5fa:	b082      	sub	sp, #8
 801c5fc:	af00      	add	r7, sp, #0
 801c5fe:	6078      	str	r0, [r7, #4]
	switch (my_Current_State)
 801c600:	4b3e      	ldr	r3, [pc, #248]	@ (801c6fc <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c602:	781b      	ldrb	r3, [r3, #0]
 801c604:	2b05      	cmp	r3, #5
 801c606:	d04e      	beq.n	801c6a6 <HAL_RTCEx_AlarmBEventCallback+0xae>
 801c608:	2b05      	cmp	r3, #5
 801c60a:	dc67      	bgt.n	801c6dc <HAL_RTCEx_AlarmBEventCallback+0xe4>
 801c60c:	2b03      	cmp	r3, #3
 801c60e:	d034      	beq.n	801c67a <HAL_RTCEx_AlarmBEventCallback+0x82>
 801c610:	2b04      	cmp	r3, #4
 801c612:	d163      	bne.n	801c6dc <HAL_RTCEx_AlarmBEventCallback+0xe4>
		/* The Time Measured by the RTC Alarm B Timer has gone beyond T_DCM_CCM
		 * The system switches from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM)
		 */

	{
		My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);						// Configures PVD at the Highest Voltage and Normal Mode
 801c614:	2100      	movs	r1, #0
 801c616:	200c      	movs	r0, #12
 801c618:	f000 ff1e 	bl	801d458 <My_Set_PVD>
		My_HAL_Delay(100);												// Add Delay to settle PVD
 801c61c:	2064      	movs	r0, #100	@ 0x64
 801c61e:	f001 fa7d 	bl	801db1c <My_HAL_Delay>

		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)						// If VDD is > VPS_CHECK and Internal Reference is Ready
 801c622:	4b37      	ldr	r3, [pc, #220]	@ (801c700 <HAL_RTCEx_AlarmBEventCallback+0x108>)
 801c624:	695b      	ldr	r3, [r3, #20]
 801c626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d111      	bne.n	801c652 <HAL_RTCEx_AlarmBEventCallback+0x5a>
		{
			my_Check_ESD = 1;
 801c62e:	4b35      	ldr	r3, [pc, #212]	@ (801c704 <HAL_RTCEx_AlarmBEventCallback+0x10c>)
 801c630:	2201      	movs	r2, #1
 801c632:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN);							// Open the VDD to ES Switch
 801c634:	2000      	movs	r0, #0
 801c636:	f001 f9ab 	bl	801d990 <My_VDD_to_ES_Switch>
			my_Current_State = SMS;										// Set Current State as SMS
 801c63a:	4b30      	ldr	r3, [pc, #192]	@ (801c6fc <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c63c:	2207      	movs	r2, #7
 801c63e:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;										// Set Next State as SMS
 801c640:	4b31      	ldr	r3, [pc, #196]	@ (801c708 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801c642:	2207      	movs	r2, #7
 801c644:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0); 	// My_SMF = Sensors Measurement Function
 801c646:	2100      	movs	r1, #0
 801c648:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c64c:	f7fe fadc 	bl	801ac08 <UTIL_SEQ_SetTask>
 801c650:	e00f      	b.n	801c672 <HAL_RTCEx_AlarmBEventCallback+0x7a>
		}
		else
		{
			my_Cmode = CCM;												// Switch to Continuous Charge Mode
 801c652:	4b2e      	ldr	r3, [pc, #184]	@ (801c70c <HAL_RTCEx_AlarmBEventCallback+0x114>)
 801c654:	2201      	movs	r2, #1
 801c656:	701a      	strb	r2, [r3, #0]
			My_ESW_DCM_Timer(STOP_TIMER);								// Stop ESW DCM Timer
 801c658:	2001      	movs	r0, #1
 801c65a:	f000 fadd 	bl	801cc18 <My_ESW_DCM_Timer>
			My_ESW_CCM_Timer(START_TIMER);								// Start ESW CCM Timer
 801c65e:	2000      	movs	r0, #0
 801c660:	f000 fb00 	bl	801cc64 <My_ESW_CCM_Timer>

			my_Current_State = ESS;										// System keeps Staying in Energy Storage State (ESS)
 801c664:	4b25      	ldr	r3, [pc, #148]	@ (801c6fc <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c666:	2204      	movs	r2, #4
 801c668:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0); 	// My_ESF = Energy Storage Function
 801c66a:	2100      	movs	r1, #0
 801c66c:	2040      	movs	r0, #64	@ 0x40
 801c66e:	f7fe facb 	bl	801ac08 <UTIL_SEQ_SetTask>
		}

		My_DCM_to_CCM_Timer(STOP_TIMER);								// Stop DCM to CCM Timer
 801c672:	2001      	movs	r0, #1
 801c674:	f000 fb7e 	bl	801cd74 <My_DCM_to_CCM_Timer>

		break;
 801c678:	e03c      	b.n	801c6f4 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/* If RTC ALARM B is triggered during EHS: EHS --> EMS to manage Energy absence*/
	case EHS: 														// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(STOP_TIMER); 							// Stop EHS_to_EMS Timer
 801c67a:	2001      	movs	r0, #1
 801c67c:	f000 fb58 	bl	801cd30 <My_EHS_to_EMS_Timer>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Stop RTC A Alarm
 801c680:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c684:	6878      	ldr	r0, [r7, #4]
 801c686:	f7eb f8a5 	bl	80077d4 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801c68a:	4b21      	ldr	r3, [pc, #132]	@ (801c710 <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801c68c:	2200      	movs	r2, #0
 801c68e:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801c690:	4b20      	ldr	r3, [pc, #128]	@ (801c714 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801c692:	2200      	movs	r2, #0
 801c694:	701a      	strb	r2, [r3, #0]

		my_Current_State = EMS;										// Set Current State as EMS: EHS --> EMS
 801c696:	4b19      	ldr	r3, [pc, #100]	@ (801c6fc <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c698:	2205      	movs	r2, #5
 801c69a:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);  // My_EHF -- Back to Harvest
 801c69c:	2100      	movs	r1, #0
 801c69e:	2020      	movs	r0, #32
 801c6a0:	f7fe fab2 	bl	801ac08 <UTIL_SEQ_SetTask>
		break;
 801c6a4:	e026      	b.n	801c6f4 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/*If the Alarm B has been Triggered during the EMS a EDS is performed */
	case EMS: 														// EMS = Energy missing State
	{
		My_VDD_to_ES_Switch(Switch_OPEN);							// Open The Switch Beteween Vdd and ES
 801c6a6:	2000      	movs	r0, #0
 801c6a8:	f001 f972 	bl	801d990 <My_VDD_to_ES_Switch>

		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Deactivate Alarm A
 801c6ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f7eb f88f 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);					// Deactivate Alarm B
 801c6b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c6ba:	6878      	ldr	r0, [r7, #4]
 801c6bc:	f7eb f88a 	bl	80077d4 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801c6c0:	4b13      	ldr	r3, [pc, #76]	@ (801c710 <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801c6c6:	4b13      	ldr	r3, [pc, #76]	@ (801c714 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	701a      	strb	r2, [r3, #0]

		my_Current_State = EDS; 									// Set Current State as EDS: EMS --> EDS
 801c6cc:	4b0b      	ldr	r3, [pc, #44]	@ (801c6fc <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c6ce:	2206      	movs	r2, #6
 801c6d0:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF
 801c6d2:	2100      	movs	r1, #0
 801c6d4:	2020      	movs	r0, #32
 801c6d6:	f7fe fa97 	bl	801ac08 <UTIL_SEQ_SetTask>
		break;
 801c6da:	e00b      	b.n	801c6f4 <HAL_RTCEx_AlarmBEventCallback+0xfc>

	default:
	{

#if MY_TX_ABP
		my_Current_State = EHS;  									// Set Current State as EHS
 801c6dc:	4b07      	ldr	r3, [pc, #28]	@ (801c6fc <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c6de:	2203      	movs	r2, #3
 801c6e0:	701a      	strb	r2, [r3, #0]
		my_Next_State = SMS;										// Set Next State as SMS
 801c6e2:	4b09      	ldr	r3, [pc, #36]	@ (801c708 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801c6e4:	2207      	movs	r2, #7
 801c6e6:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801c6e8:	2100      	movs	r1, #0
 801c6ea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c6ee:	f7fe fa8b 	bl	801ac08 <UTIL_SEQ_SetTask>
#endif
		break;
 801c6f2:	bf00      	nop
	}

	}
}
 801c6f4:	bf00      	nop
 801c6f6:	3708      	adds	r7, #8
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	bd80      	pop	{r7, pc}
 801c6fc:	20001be9 	.word	0x20001be9
 801c700:	58000400 	.word	0x58000400
 801c704:	20001bc0 	.word	0x20001bc0
 801c708:	20000638 	.word	0x20000638
 801c70c:	20001bea 	.word	0x20001bea
 801c710:	20001bbf 	.word	0x20001bbf
 801c714:	20001bbe 	.word	0x20001bbe

0801c718 <My_RTC_Init>:

/* CallBack Section End */
/*my rtc init*/
void My_RTC_Init(void)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b092      	sub	sp, #72	@ 0x48
 801c71c:	af00      	add	r7, sp, #0
#if MY_RTC_INIT
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c71e:	202a      	movs	r0, #42	@ 0x2a
 801c720:	f7e7 fbc1 	bl	8003ea6 <HAL_NVIC_DisableIRQ>

	RTC_TimeTypeDef sTime = {0};
 801c724:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801c728:	2200      	movs	r2, #0
 801c72a:	601a      	str	r2, [r3, #0]
 801c72c:	605a      	str	r2, [r3, #4]
 801c72e:	609a      	str	r2, [r3, #8]
 801c730:	60da      	str	r2, [r3, #12]
 801c732:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 801c734:	2300      	movs	r3, #0
 801c736:	633b      	str	r3, [r7, #48]	@ 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 801c738:	1d3b      	adds	r3, r7, #4
 801c73a:	222c      	movs	r2, #44	@ 0x2c
 801c73c:	2100      	movs	r1, #0
 801c73e:	4618      	mov	r0, r3
 801c740:	f004 f826 	bl	8020790 <memset>
#define CFG_RTC_SYNCH_PRESCALER     (DIVR( LSE_VALUE, (CFG_RTC_ASYNCH_PRESCALER+1) ) - 1 )
	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 801c744:	4b3f      	ldr	r3, [pc, #252]	@ (801c844 <My_RTC_Init+0x12c>)
 801c746:	4a40      	ldr	r2, [pc, #256]	@ (801c848 <My_RTC_Init+0x130>)
 801c748:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801c74a:	4b3e      	ldr	r3, [pc, #248]	@ (801c844 <My_RTC_Init+0x12c>)
 801c74c:	2200      	movs	r2, #0
 801c74e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 801c750:	4b3c      	ldr	r3, [pc, #240]	@ (801c844 <My_RTC_Init+0x12c>)
 801c752:	220f      	movs	r2, #15
 801c754:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 801c756:	4b3b      	ldr	r3, [pc, #236]	@ (801c844 <My_RTC_Init+0x12c>)
 801c758:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c75c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801c75e:	4b39      	ldr	r3, [pc, #228]	@ (801c844 <My_RTC_Init+0x12c>)
 801c760:	2200      	movs	r2, #0
 801c762:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801c764:	4b37      	ldr	r3, [pc, #220]	@ (801c844 <My_RTC_Init+0x12c>)
 801c766:	2200      	movs	r2, #0
 801c768:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801c76a:	4b36      	ldr	r3, [pc, #216]	@ (801c844 <My_RTC_Init+0x12c>)
 801c76c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801c770:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801c772:	4b34      	ldr	r3, [pc, #208]	@ (801c844 <My_RTC_Init+0x12c>)
 801c774:	2200      	movs	r2, #0
 801c776:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801c778:	4832      	ldr	r0, [pc, #200]	@ (801c844 <My_RTC_Init+0x12c>)
 801c77a:	f7ea fd19 	bl	80071b0 <HAL_RTC_Init>
 801c77e:	4603      	mov	r3, r0
 801c780:	2b00      	cmp	r3, #0
 801c782:	d001      	beq.n	801c788 <My_RTC_Init+0x70>
	{
		Error_Handler();
 801c784:	f7e4 fe52 	bl	800142c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 801c788:	2300      	movs	r3, #0
 801c78a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	sTime.Minutes = 0;
 801c78e:	2300      	movs	r3, #0
 801c790:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	sTime.Seconds = 0;
 801c794:	2300      	movs	r3, #0
 801c796:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	sTime.SubSeconds = 0x0;
 801c79a:	2300      	movs	r3, #0
 801c79c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c79e:	2300      	movs	r3, #0
 801c7a0:	643b      	str	r3, [r7, #64]	@ 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 801c7a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801c7aa:	2200      	movs	r2, #0
 801c7ac:	4619      	mov	r1, r3
 801c7ae:	4825      	ldr	r0, [pc, #148]	@ (801c844 <My_RTC_Init+0x12c>)
 801c7b0:	f7ea fd80 	bl	80072b4 <HAL_RTC_SetTime>
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d001      	beq.n	801c7be <My_RTC_Init+0xa6>
	{
		Error_Handler();
 801c7ba:	f7e4 fe37 	bl	800142c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801c7be:	2301      	movs	r3, #1
 801c7c0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 801c7c4:	2301      	movs	r3, #1
 801c7c6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	sDate.Date = 1;
 801c7ca:	2301      	movs	r3, #1
 801c7cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	sDate.Year = 0;
 801c7d0:	2300      	movs	r3, #0
 801c7d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801c7d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801c7da:	2200      	movs	r2, #0
 801c7dc:	4619      	mov	r1, r3
 801c7de:	4819      	ldr	r0, [pc, #100]	@ (801c844 <My_RTC_Init+0x12c>)
 801c7e0:	f7ea fe66 	bl	80074b0 <HAL_RTC_SetDate>
 801c7e4:	4603      	mov	r3, r0
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d001      	beq.n	801c7ee <My_RTC_Init+0xd6>
	{
		Error_Handler();
 801c7ea:	f7e4 fe1f 	bl	800142c <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0;
 801c7f2:	2300      	movs	r3, #0
 801c7f4:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0;
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0;
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c7fe:	2300      	movs	r3, #0
 801c800:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c802:	2300      	movs	r3, #0
 801c804:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801c806:	2300      	movs	r3, #0
 801c808:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801c80a:	2300      	movs	r3, #0
 801c80c:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801c80e:	2300      	movs	r3, #0
 801c810:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = 1;
 801c812:	2301      	movs	r3, #1
 801c814:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 801c818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801c81e:	1d3b      	adds	r3, r7, #4
 801c820:	2200      	movs	r2, #0
 801c822:	4619      	mov	r1, r3
 801c824:	4807      	ldr	r0, [pc, #28]	@ (801c844 <My_RTC_Init+0x12c>)
 801c826:	f7ea fec9 	bl	80075bc <HAL_RTC_SetAlarm_IT>
 801c82a:	4603      	mov	r3, r0
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d001      	beq.n	801c834 <My_RTC_Init+0x11c>
	{
		Error_Handler();
 801c830:	f7e4 fdfc 	bl	800142c <Error_Handler>
	}

	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c834:	202a      	movs	r0, #42	@ 0x2a
 801c836:	f7e7 fb36 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
#endif
}
 801c83a:	bf00      	nop
 801c83c:	3748      	adds	r7, #72	@ 0x48
 801c83e:	46bd      	mov	sp, r7
 801c840:	bd80      	pop	{r7, pc}
 801c842:	bf00      	nop
 801c844:	20000750 	.word	0x20000750
 801c848:	40002800 	.word	0x40002800

0801c84c <My_EHF>:

/* FSM Function Begin */

void My_EHF(void)	// EHF = Energy Harvesting Function
{
 801c84c:	b580      	push	{r7, lr}
 801c84e:	af00      	add	r7, sp, #0
	/*
	 * The EHF Function manages the Energy Harvesting feature of the system
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();										// Set all GPIO in Analog Mode
 801c850:	f000 fd34 	bl	801d2bc <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 										// Clear all Pending Interrupts
 801c854:	2002      	movs	r0, #2
 801c856:	f000 fe1d 	bl	801d494 <My_Interrupts_Manager>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);										// Open VDD to ES Switch
 801c85a:	2000      	movs	r0, #0
 801c85c:	f001 f898 	bl	801d990 <My_VDD_to_ES_Switch>
#endif

	switch (my_Current_State)
 801c860:	4b5e      	ldr	r3, [pc, #376]	@ (801c9dc <My_EHF+0x190>)
 801c862:	781b      	ldrb	r3, [r3, #0]
 801c864:	3b02      	subs	r3, #2
 801c866:	2b05      	cmp	r3, #5
 801c868:	f200 80ae 	bhi.w	801c9c8 <My_EHF+0x17c>
 801c86c:	a201      	add	r2, pc, #4	@ (adr r2, 801c874 <My_EHF+0x28>)
 801c86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c872:	bf00      	nop
 801c874:	0801c8db 	.word	0x0801c8db
 801c878:	0801c88d 	.word	0x0801c88d
 801c87c:	0801c93d 	.word	0x0801c93d
 801c880:	0801c963 	.word	0x0801c963
 801c884:	0801c9b7 	.word	0x0801c9b7
 801c888:	0801c951 	.word	0x0801c951
	{
	case EHS:  																// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS timer
 801c88c:	2000      	movs	r0, #0
 801c88e:	f000 fa4f 	bl	801cd30 <My_EHS_to_EMS_Timer>

		switch (my_Next_State)
 801c892:	4b53      	ldr	r3, [pc, #332]	@ (801c9e0 <My_EHF+0x194>)
 801c894:	781b      	ldrb	r3, [r3, #0]
 801c896:	2b09      	cmp	r3, #9
 801c898:	d012      	beq.n	801c8c0 <My_EHF+0x74>
 801c89a:	2b09      	cmp	r3, #9
 801c89c:	dc16      	bgt.n	801c8cc <My_EHF+0x80>
 801c89e:	2b04      	cmp	r3, #4
 801c8a0:	d002      	beq.n	801c8a8 <My_EHF+0x5c>
 801c8a2:	2b07      	cmp	r3, #7
 801c8a4:	d006      	beq.n	801c8b4 <My_EHF+0x68>
 801c8a6:	e011      	b.n	801c8cc <My_EHF+0x80>
		{

		case ESS:
		{
			My_Enter_Stop2_Mode_WFI(VESS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801c8a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c8ac:	2008      	movs	r0, #8
 801c8ae:	f000 fd4d 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
			break;
 801c8b2:	e011      	b.n	801c8d8 <My_EHF+0x8c>
		}

		case SMS:
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801c8b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c8b8:	200c      	movs	r0, #12
 801c8ba:	f000 fd47 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
			break;
 801c8be:	e00b      	b.n	801c8d8 <My_EHF+0x8c>
		}
#if AI
		case AIS:
		{
			My_Enter_Stop2_Mode_WFI(VAIS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801c8c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c8c4:	200c      	movs	r0, #12
 801c8c6:	f000 fd41 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
			break;
 801c8ca:	e005      	b.n	801c8d8 <My_EHF+0x8c>
		}
#endif

		default:
		{
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 			// Set Enter Stop2 Mode and WFI
 801c8cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c8d0:	200c      	movs	r0, #12
 801c8d2:	f000 fd3b 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
			break;
 801c8d6:	bf00      	nop
		}
		}

		break;
 801c8d8:	e07d      	b.n	801c9d6 <My_EHF+0x18a>
	}

	case RTS:  																// RTS = Radio Transmission State
	{
#if MY_ES_FEATURE_ENABLE  													// If the Energy Storage Feature is enabled
		if (++my_RTS_cnt >= N_LORA_TX)  									// If the number of transmissions has reached the threshold
 801c8da:	4b42      	ldr	r3, [pc, #264]	@ (801c9e4 <My_EHF+0x198>)
 801c8dc:	781b      	ldrb	r3, [r3, #0]
 801c8de:	3301      	adds	r3, #1
 801c8e0:	b2da      	uxtb	r2, r3
 801c8e2:	4b40      	ldr	r3, [pc, #256]	@ (801c9e4 <My_EHF+0x198>)
 801c8e4:	701a      	strb	r2, [r3, #0]
 801c8e6:	4b3f      	ldr	r3, [pc, #252]	@ (801c9e4 <My_EHF+0x198>)
 801c8e8:	781b      	ldrb	r3, [r3, #0]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d017      	beq.n	801c91e <My_EHF+0xd2>
		{
			if (my_Cmode != EOC)											// If the Energy Storage Device (ESD) is NOT in End of Charge (EOC)
 801c8ee:	4b3e      	ldr	r3, [pc, #248]	@ (801c9e8 <My_EHF+0x19c>)
 801c8f0:	781b      	ldrb	r3, [r3, #0]
 801c8f2:	2b02      	cmp	r3, #2
 801c8f4:	d006      	beq.n	801c904 <My_EHF+0xb8>
			{
				my_Current_State = EHS;  									// RTS --> EHS
 801c8f6:	4b39      	ldr	r3, [pc, #228]	@ (801c9dc <My_EHF+0x190>)
 801c8f8:	2203      	movs	r2, #3
 801c8fa:	701a      	strb	r2, [r3, #0]
				my_Next_State = ESS;  										// RTS --> EHS --> ESS
 801c8fc:	4b38      	ldr	r3, [pc, #224]	@ (801c9e0 <My_EHF+0x194>)
 801c8fe:	2204      	movs	r2, #4
 801c900:	701a      	strb	r2, [r3, #0]
 801c902:	e008      	b.n	801c916 <My_EHF+0xca>
			}
			else  															// If Energy Storage Device (ESD) is in End of Charge (EOC)
			{
				My_VDD_to_ES_Switch(Switch_OPEN);  							// Open the Vdd to ES Switch
 801c904:	2000      	movs	r0, #0
 801c906:	f001 f843 	bl	801d990 <My_VDD_to_ES_Switch>
				my_Current_State = EHS;  									// RTS --> EHS
 801c90a:	4b34      	ldr	r3, [pc, #208]	@ (801c9dc <My_EHF+0x190>)
 801c90c:	2203      	movs	r2, #3
 801c90e:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE  													// If the Sensor Measurements Feature is enabled
				my_Next_State = SMS;										// RTS --> EHS --> SMS
 801c910:	4b33      	ldr	r3, [pc, #204]	@ (801c9e0 <My_EHF+0x194>)
 801c912:	2207      	movs	r2, #7
 801c914:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;  										// RTS --> EHS --> RTS
#endif
			}
			my_RTS_cnt = 0;  												// Reset the transmissions counter
 801c916:	4b33      	ldr	r3, [pc, #204]	@ (801c9e4 <My_EHF+0x198>)
 801c918:	2200      	movs	r2, #0
 801c91a:	701a      	strb	r2, [r3, #0]
 801c91c:	e005      	b.n	801c92a <My_EHF+0xde>
		}
		else  																// If the number of Radio transmissions is lower than N_LORA_TX
		{
			my_Current_State = EHS;  										// RTS --> EHS
 801c91e:	4b2f      	ldr	r3, [pc, #188]	@ (801c9dc <My_EHF+0x190>)
 801c920:	2203      	movs	r2, #3
 801c922:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  											// RTS --> EHS --> RTS
 801c924:	4b2e      	ldr	r3, [pc, #184]	@ (801c9e0 <My_EHF+0x194>)
 801c926:	2202      	movs	r2, #2
 801c928:	701a      	strb	r2, [r3, #0]
#else
		my_Next_State = RTS;  												// Set Following State as RTS
#endif
#endif

		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801c92a:	2000      	movs	r0, #0
 801c92c:	f000 fa00 	bl	801cd30 <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801c930:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c934:	200c      	movs	r0, #12
 801c936:	f000 fd09 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801c93a:	e04c      	b.n	801c9d6 <My_EHF+0x18a>
	}

	case ESS:
	{
		if (my_Next_State == SMS)
 801c93c:	4b28      	ldr	r3, [pc, #160]	@ (801c9e0 <My_EHF+0x194>)
 801c93e:	781b      	ldrb	r3, [r3, #0]
 801c940:	2b07      	cmp	r3, #7
 801c942:	d147      	bne.n	801c9d4 <My_EHF+0x188>
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  	// Enter Stop2 Power Mode and Wait for Interrupt
 801c944:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c948:	200c      	movs	r0, #12
 801c94a:	f000 fcff 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		}
		break;
 801c94e:	e041      	b.n	801c9d4 <My_EHF+0x188>
	}

	case SMS:
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801c950:	2000      	movs	r0, #0
 801c952:	f000 f9ed 	bl	801cd30 <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  		// Enter Stop2 Power Mode and Wait for Interrupt
 801c956:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c95a:	200c      	movs	r0, #12
 801c95c:	f000 fcf6 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801c960:	e039      	b.n	801c9d6 <My_EHF+0x18a>
	}

	case EMS:  																// EMS = Energy Missing State
	{
		My_ESW_DCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801c962:	2001      	movs	r0, #1
 801c964:	f000 f958 	bl	801cc18 <My_ESW_DCM_Timer>
		My_ESW_CCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801c968:	2001      	movs	r0, #1
 801c96a:	f000 f97b 	bl	801cc64 <My_ESW_CCM_Timer>
#if MY_LIS2DU12 && STEVAL_HARVEST1
		My_VDD_to_VDDS1_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
		My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801c96e:	2000      	movs	r0, #0
 801c970:	f001 f88c 	bl	801da8c <My_VDD_to_VDDS2_Switch>
#endif

#endif

		My_VDD_to_ES_Switch(Switch_CLOSED);  								// The system is supplied by the Energy Storage Device (ESD)
 801c974:	2001      	movs	r0, #1
 801c976:	f001 f80b 	bl	801d990 <My_VDD_to_ES_Switch>

		My_PVD_Delay();														// 2 sec delay
 801c97a:	f000 ffcd 	bl	801d918 <My_PVD_Delay>
		My_PVD_Delay();														// 2 sec delay
 801c97e:	f000 ffcb 	bl	801d918 <My_PVD_Delay>

		if (my_rtc_B_ems_flag == 0)  										// Flag the occurrence of EDS
 801c982:	4b1a      	ldr	r3, [pc, #104]	@ (801c9ec <My_EHF+0x1a0>)
 801c984:	781b      	ldrb	r3, [r3, #0]
 801c986:	2b00      	cmp	r3, #0
 801c988:	d105      	bne.n	801c996 <My_EHF+0x14a>
		{
			My_EMS_to_EDS_Timer(START_TIMER);  								// Start an Energy Presence Check
 801c98a:	2000      	movs	r0, #0
 801c98c:	f000 fa14 	bl	801cdb8 <My_EMS_to_EDS_Timer>
			my_rtc_B_ems_flag = 1;
 801c990:	4b16      	ldr	r3, [pc, #88]	@ (801c9ec <My_EHF+0x1a0>)
 801c992:	2201      	movs	r2, #1
 801c994:	701a      	strb	r2, [r3, #0]
		}

		if (my_rtc_A_ems_flag == 0)  										// Flag the occurrence of ems Measurement
 801c996:	4b16      	ldr	r3, [pc, #88]	@ (801c9f0 <My_EHF+0x1a4>)
 801c998:	781b      	ldrb	r3, [r3, #0]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d105      	bne.n	801c9aa <My_EHF+0x15e>
		{
			My_EMS_to_SMS_Timer(START_TIMER);  								// Start the timer to move from EMS to SMS
 801c99e:	2000      	movs	r0, #0
 801c9a0:	f000 fa2c 	bl	801cdfc <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 1;
 801c9a4:	4b12      	ldr	r3, [pc, #72]	@ (801c9f0 <My_EHF+0x1a4>)
 801c9a6:	2201      	movs	r2, #1
 801c9a8:	701a      	strb	r2, [r3, #0]
		}

		My_Enter_Stop2_Mode_WFI(PVD_EMS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801c9aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c9ae:	2008      	movs	r0, #8
 801c9b0:	f000 fccc 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801c9b4:	e00f      	b.n	801c9d6 <My_EHF+0x18a>
	}

	case EDS:  																// EDS = Energy Detection State
	{
		My_EDS_Timer(START_TIMER);  										// Start the EDS Timer
 801c9b6:	2000      	movs	r0, #0
 801c9b8:	f000 f9a0 	bl	801ccfc <My_EDS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801c9bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c9c0:	200c      	movs	r0, #12
 801c9c2:	f000 fcc3 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801c9c6:	e006      	b.n	801c9d6 <My_EHF+0x18a>
	}

	default:
	{
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801c9c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c9cc:	200c      	movs	r0, #12
 801c9ce:	f000 fcbd 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801c9d2:	e000      	b.n	801c9d6 <My_EHF+0x18a>
		break;
 801c9d4:	bf00      	nop
	}
	}
}
 801c9d6:	bf00      	nop
 801c9d8:	bd80      	pop	{r7, pc}
 801c9da:	bf00      	nop
 801c9dc:	20001be9 	.word	0x20001be9
 801c9e0:	20000638 	.word	0x20000638
 801c9e4:	20001bba 	.word	0x20001bba
 801c9e8:	20001bea 	.word	0x20001bea
 801c9ec:	20001bbf 	.word	0x20001bbf
 801c9f0:	20001bbe 	.word	0x20001bbe

0801c9f4 <My_ESF>:
/*
 * The ESF Function performs the actions executed during the Energy Storage State (ESS).
 * In the Energy Storage State (ESS) the additional Energy Storage Device (ESD) gets charged.
 */

{
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	af00      	add	r7, sp, #0

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();									// Set all GPIO in Analog Mode
 801c9f8:	f000 fc60 	bl	801d2bc <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 									// Clear all Pending Interrupts
 801c9fc:	2002      	movs	r0, #2
 801c9fe:	f000 fd49 	bl	801d494 <My_Interrupts_Manager>
#endif

	my_Check_ESD = 0;													// Reset my_Check_ESD
 801ca02:	4b43      	ldr	r3, [pc, #268]	@ (801cb10 <My_ESF+0x11c>)
 801ca04:	2200      	movs	r2, #0
 801ca06:	701a      	strb	r2, [r3, #0]

	my_Current_State = ESS;												// Set Current State as Energy Storage State (ESS)
 801ca08:	4b42      	ldr	r3, [pc, #264]	@ (801cb14 <My_ESF+0x120>)
 801ca0a:	2204      	movs	r2, #4
 801ca0c:	701a      	strb	r2, [r3, #0]

	switch (my_Cmode)
 801ca0e:	4b42      	ldr	r3, [pc, #264]	@ (801cb18 <My_ESF+0x124>)
 801ca10:	781b      	ldrb	r3, [r3, #0]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d002      	beq.n	801ca1c <My_ESF+0x28>
 801ca16:	2b01      	cmp	r3, #1
 801ca18:	d027      	beq.n	801ca6a <My_ESF+0x76>
		break;
	}

	default:
	{
		break;
 801ca1a:	e077      	b.n	801cb0c <My_ESF+0x118>
		My_Interrupts_Manager(NVIC_DISABLE);							// Disable all the interrupts
 801ca1c:	2001      	movs	r0, #1
 801ca1e:	f000 fd39 	bl	801d494 <My_Interrupts_Manager>
		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable only interrupts for PVD During DCM
 801ca22:	2001      	movs	r0, #1
 801ca24:	f7e7 fa31 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		if (HAL_LPTIM_ReadCounter(&hlptim1) > T_ESW || (my_ESS_cnt >= DCM_MAX))
 801ca28:	483c      	ldr	r0, [pc, #240]	@ (801cb1c <My_ESF+0x128>)
 801ca2a:	f001 fb9d 	bl	801e168 <HAL_LPTIM_ReadCounter>
 801ca2e:	4603      	mov	r3, r0
 801ca30:	f241 4208 	movw	r2, #5128	@ 0x1408
 801ca34:	4293      	cmp	r3, r2
 801ca36:	d803      	bhi.n	801ca40 <My_ESF+0x4c>
 801ca38:	4b39      	ldr	r3, [pc, #228]	@ (801cb20 <My_ESF+0x12c>)
 801ca3a:	781b      	ldrb	r3, [r3, #0]
 801ca3c:	2b04      	cmp	r3, #4
 801ca3e:	d906      	bls.n	801ca4e <My_ESF+0x5a>
			My_ESW_DCM_Timer(STOP_TIMER);
 801ca40:	2001      	movs	r0, #1
 801ca42:	f000 f8e9 	bl	801cc18 <My_ESW_DCM_Timer>
			my_Next_State = SMS;
 801ca46:	4b37      	ldr	r3, [pc, #220]	@ (801cb24 <My_ESF+0x130>)
 801ca48:	2207      	movs	r2, #7
 801ca4a:	701a      	strb	r2, [r3, #0]
 801ca4c:	e002      	b.n	801ca54 <My_ESF+0x60>
			My_ESW_DCM_Timer(START_TIMER);								// Start the EWS DCM Timer
 801ca4e:	2000      	movs	r0, #0
 801ca50:	f000 f8e2 	bl	801cc18 <My_ESW_DCM_Timer>
		My_DCM_to_CCM_Timer(START_TIMER); 								// Start Timer to monitor DCM to CCM.
 801ca54:	2000      	movs	r0, #0
 801ca56:	f000 f98d 	bl	801cd74 <My_DCM_to_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801ca5a:	2001      	movs	r0, #1
 801ca5c:	f000 ff98 	bl	801d990 <My_VDD_to_ES_Switch>
		My_Enter_Stop2_Mode_WFI(VESS_LOW, PWR_PVD_MODE_IT_FALLING); 	// Set PVD to level VESS_LOW with Interrupt for Falling Vdd and Enter Stop2 Mode and Wait for Interrupt
 801ca60:	4931      	ldr	r1, [pc, #196]	@ (801cb28 <My_ESF+0x134>)
 801ca62:	2002      	movs	r0, #2
 801ca64:	f000 fc72 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801ca68:	e050      	b.n	801cb0c <My_ESF+0x118>
		My_ESW_CCM_Timer(START_TIMER);									// Start the EWS CCM Timer
 801ca6a:	2000      	movs	r0, #0
 801ca6c:	f000 f8fa 	bl	801cc64 <My_ESW_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801ca70:	2001      	movs	r0, #1
 801ca72:	f000 ff8d 	bl	801d990 <My_VDD_to_ES_Switch>
		My_Set_PVD(VEOC, PWR_PVD_MODE_NORMAL); 							// Set PVD in Normal Mode and VEOC
 801ca76:	2100      	movs	r1, #0
 801ca78:	2008      	movs	r0, #8
 801ca7a:	f000 fced 	bl	801d458 <My_Set_PVD>
		My_PVD_Delay(); 												// Delay to allow the PVD to Settle
 801ca7e:	f000 ff4b 	bl	801d918 <My_PVD_Delay>
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 					// If the voltage across the Energy Storage Device (ESD) is higher than VEOC the System is in End of Charge (EOC)
 801ca82:	4b2a      	ldr	r3, [pc, #168]	@ (801cb2c <My_ESF+0x138>)
 801ca84:	695b      	ldr	r3, [r3, #20]
 801ca86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d11a      	bne.n	801cac4 <My_ESF+0xd0>
			my_Cmode = EOC; 											// Set Charging Mode in End of Charge (EOC)
 801ca8e:	4b22      	ldr	r3, [pc, #136]	@ (801cb18 <My_ESF+0x124>)
 801ca90:	2202      	movs	r2, #2
 801ca92:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;										// Set Current State as Energy Harvesting State (EHS): ESS --> EHS
 801ca94:	4b1f      	ldr	r3, [pc, #124]	@ (801cb14 <My_ESF+0x120>)
 801ca96:	2203      	movs	r2, #3
 801ca98:	701a      	strb	r2, [r3, #0]
			My_EBK_status = 100;
 801ca9a:	4b25      	ldr	r3, [pc, #148]	@ (801cb30 <My_ESF+0x13c>)
 801ca9c:	2264      	movs	r2, #100	@ 0x64
 801ca9e:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS; 										// Set Next State as Radio Transmission State (RTS): ESS --> EHS --> SMS
 801caa0:	4b20      	ldr	r3, [pc, #128]	@ (801cb24 <My_ESF+0x130>)
 801caa2:	2207      	movs	r2, #7
 801caa4:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN); 							// Stop Charging: Open the Switch between Vdd and ES
 801caa6:	2000      	movs	r0, #0
 801caa8:	f000 ff72 	bl	801d990 <My_VDD_to_ES_Switch>
			My_ESW_CCM_Timer(STOP_TIMER);								// Stop the Energy Storage Window (ESW) Timer
 801caac:	2001      	movs	r0, #1
 801caae:	f000 f8d9 	bl	801cc64 <My_ESW_CCM_Timer>
			My_EHS_to_EMS_Timer(START_TIMER); 							// Start the EHS to EMS Timer (Detects if Energy to Harvest is Missing)
 801cab2:	2000      	movs	r0, #0
 801cab4:	f000 f93c 	bl	801cd30 <My_EHS_to_EMS_Timer>
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 		// Enter Stop 2 Power Mode and Wait for Interrupt
 801cab8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801cabc:	200c      	movs	r0, #12
 801cabe:	f000 fc45 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801cac2:	e022      	b.n	801cb0a <My_ESF+0x116>
				My_Set_PVD(V2P2, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801cac4:	2100      	movs	r1, #0
 801cac6:	2002      	movs	r0, #2
 801cac8:	f000 fcc6 	bl	801d458 <My_Set_PVD>
				My_PVD_Delay(); 										// Delay to allow the PVD to Settle
 801cacc:	f000 ff24 	bl	801d918 <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P2
 801cad0:	4b16      	ldr	r3, [pc, #88]	@ (801cb2c <My_ESF+0x138>)
 801cad2:	695b      	ldr	r3, [r3, #20]
 801cad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d102      	bne.n	801cae2 <My_ESF+0xee>
					My_EBK_status = 33;
 801cadc:	4b14      	ldr	r3, [pc, #80]	@ (801cb30 <My_ESF+0x13c>)
 801cade:	2221      	movs	r2, #33	@ 0x21
 801cae0:	701a      	strb	r2, [r3, #0]
				My_Set_PVD(V2P4, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801cae2:	2100      	movs	r1, #0
 801cae4:	2004      	movs	r0, #4
 801cae6:	f000 fcb7 	bl	801d458 <My_Set_PVD>
				My_PVD_Delay();
 801caea:	f000 ff15 	bl	801d918 <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P4
 801caee:	4b0f      	ldr	r3, [pc, #60]	@ (801cb2c <My_ESF+0x138>)
 801caf0:	695b      	ldr	r3, [r3, #20]
 801caf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d102      	bne.n	801cb00 <My_ESF+0x10c>
					My_EBK_status = 66;
 801cafa:	4b0d      	ldr	r3, [pc, #52]	@ (801cb30 <My_ESF+0x13c>)
 801cafc:	2242      	movs	r2, #66	@ 0x42
 801cafe:	701a      	strb	r2, [r3, #0]
				My_Enter_Stop2_Mode_WFI(VEOC, PWR_PVD_MODE_IT_RISING);	// Enter Stop2 Mode and Wait for Interrupt and wait for the charging to be completed
 801cb00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801cb04:	2008      	movs	r0, #8
 801cb06:	f000 fc21 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
		break;
 801cb0a:	bf00      	nop
	}
	}
}
 801cb0c:	bf00      	nop
 801cb0e:	bd80      	pop	{r7, pc}
 801cb10:	20001bc0 	.word	0x20001bc0
 801cb14:	20001be9 	.word	0x20001be9
 801cb18:	20001bea 	.word	0x20001bea
 801cb1c:	20001b40 	.word	0x20001b40
 801cb20:	20001bbb 	.word	0x20001bbb
 801cb24:	20000638 	.word	0x20000638
 801cb28:	00010002 	.word	0x00010002
 801cb2c:	58000400 	.word	0x58000400
 801cb30:	20001bb9 	.word	0x20001bb9

0801cb34 <My_SMF>:

void My_SMF(void)	// SMF = Sensor Measurement Function
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	af00      	add	r7, sp, #0
	 * SMF = Sensor Measurement Function
	 * The SMF Function Manages the Sensors
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 801cb38:	f000 fbc0 	bl	801d2bc <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 								// Clear all Pending Interrupts
 801cb3c:	2002      	movs	r0, #2
 801cb3e:	f000 fca9 	bl	801d494 <My_Interrupts_Manager>
#endif

	HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);								// Disable Interrupt for RTC_WKUP
 801cb42:	2003      	movs	r0, #3
 801cb44:	f7e7 f9af 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);							// Disable Interrupt for RTC_Alarm_IRQn
 801cb48:	202a      	movs	r0, #42	@ 0x2a
 801cb4a:	f7e7 f9ac 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(LPTIM1_IRQn);								// Disable Interrupt for LPTIM1
 801cb4e:	2027      	movs	r0, #39	@ 0x27
 801cb50:	f7e7 f9a9 	bl	8003ea6 <HAL_NVIC_DisableIRQ>

	my_Current_State = SMS;											// Set Current State as SMS
 801cb54:	4b23      	ldr	r3, [pc, #140]	@ (801cbe4 <My_SMF+0xb0>)
 801cb56:	2207      	movs	r2, #7
 801cb58:	701a      	strb	r2, [r3, #0]
	My_SMW_Timer(START_TIMER);										// Start Sensor Measurement Window Timer
 801cb5a:	2000      	movs	r0, #0
 801cb5c:	f000 f8a8 	bl	801ccb0 <My_SMW_Timer>

	My_Set_PVD(VSMS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801cb60:	4921      	ldr	r1, [pc, #132]	@ (801cbe8 <My_SMF+0xb4>)
 801cb62:	2004      	movs	r0, #4
 801cb64:	f000 fc78 	bl	801d458 <My_Set_PVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);	// Set Internal Voltage Regulator at 1.2 V
 801cb68:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801cb6c:	f7e8 ff00 	bl	8005970 <HAL_PWREx_ControlVoltageScaling>
//	GPIO_InitStruct.Pin = GPIO_PIN_7;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	MX_GPIO_Init();
 801cb70:	f7e4 fbd8 	bl	8001324 <MX_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, GPIO_PIN_SET);
 801cb74:	2201      	movs	r2, #1
 801cb76:	2180      	movs	r1, #128	@ 0x80
 801cb78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cb7c:	f7e7 fff6 	bl	8004b6c <HAL_GPIO_WritePin>
	My_HAL_Delay(40);
 801cb80:	2028      	movs	r0, #40	@ 0x28
 801cb82:	f000 ffcb 	bl	801db1c <My_HAL_Delay>
	My_SoilSensor_Get_Data();
 801cb86:	f000 fb6d 	bl	801d264 <My_SoilSensor_Get_Data>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 801cb8a:	2200      	movs	r2, #0
 801cb8c:	2180      	movs	r1, #128	@ 0x80
 801cb8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cb92:	f7e7 ffeb 	bl	8004b6c <HAL_GPIO_WritePin>
	My_HAL_Delay(10);												// Add a Delay
	My_I2C_Init(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_CLOSED);							// Bias the Sensors: Close the switch between VDD and VDDS2 to Power Sensors
 801cb96:	2001      	movs	r0, #1
 801cb98:	f000 ff78 	bl	801da8c <My_VDD_to_VDDS2_Switch>
	My_HAL_Delay(10);												// Add a Delay
 801cb9c:	200a      	movs	r0, #10
 801cb9e:	f000 ffbd 	bl	801db1c <My_HAL_Delay>
	My_I2C_Init(MY_I2C2);											// Initialize I2C2
 801cba2:	2001      	movs	r0, #1
 801cba4:	f000 fa6a 	bl	801d07c <My_I2C_Init>
#endif

#if MY_SHT40 && STEVAL_HARVEST1
	My_SHT40_Get_Data();											// SHT40 Get Data
 801cba8:	f000 faa6 	bl	801d0f8 <My_SHT40_Get_Data>
#if MY_LIS2DU12 && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C2);											// DeInitialize I2C2
 801cbac:	2001      	movs	r0, #1
 801cbae:	f000 fa87 	bl	801d0c0 <My_I2C_Deinit>
#endif

#endif

	if (my_Cmode == DCM && my_Check_ESD == 0)						// If in DCM Mode --> Charge the Energy Backup Device
 801cbb2:	4b0e      	ldr	r3, [pc, #56]	@ (801cbec <My_SMF+0xb8>)
 801cbb4:	781b      	ldrb	r3, [r3, #0]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d107      	bne.n	801cbca <My_SMF+0x96>
 801cbba:	4b0d      	ldr	r3, [pc, #52]	@ (801cbf0 <My_SMF+0xbc>)
 801cbbc:	781b      	ldrb	r3, [r3, #0]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d103      	bne.n	801cbca <My_SMF+0x96>
	{
		My_VDD_to_ES_Switch(Switch_CLOSED);							// Charge the Energy Backup Device
 801cbc2:	2001      	movs	r0, #1
 801cbc4:	f000 fee4 	bl	801d990 <My_VDD_to_ES_Switch>
 801cbc8:	e003      	b.n	801cbd2 <My_SMF+0x9e>
	}
	else
	{
		Radio.Rx(1);												// Turn the Radio in RX Mode
 801cbca:	4b0a      	ldr	r3, [pc, #40]	@ (801cbf4 <My_SMF+0xc0>)
 801cbcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cbce:	2001      	movs	r0, #1
 801cbd0:	4798      	blx	r3
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801cbd2:	2001      	movs	r0, #1
 801cbd4:	f000 fc5e 	bl	801d494 <My_Interrupts_Manager>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801cbd8:	2001      	movs	r0, #1
 801cbda:	f7e7 f956 	bl	8003e8a <HAL_NVIC_EnableIRQ>
	__WFI();														// Wait for Interrupt From PVD
 801cbde:	bf30      	wfi
}
 801cbe0:	bf00      	nop
 801cbe2:	bd80      	pop	{r7, pc}
 801cbe4:	20001be9 	.word	0x20001be9
 801cbe8:	00010002 	.word	0x00010002
 801cbec:	20001bea 	.word	0x20001bea
 801cbf0:	20001bc0 	.word	0x20001bc0
 801cbf4:	08021f8c 	.word	0x08021f8c

0801cbf8 <My_AIF>:

void My_AIF(void)
{
 801cbf8:	b580      	push	{r7, lr}
 801cbfa:	af00      	add	r7, sp, #0
	My_Set_PVD(VAIS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801cbfc:	4905      	ldr	r1, [pc, #20]	@ (801cc14 <My_AIF+0x1c>)
 801cbfe:	2006      	movs	r0, #6
 801cc00:	f000 fc2a 	bl	801d458 <My_Set_PVD>
	//My_PVD_Delay();

	MX_X_CUBE_AI_Process();
 801cc04:	f7fe ff44 	bl	801ba90 <MX_X_CUBE_AI_Process>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801cc08:	2100      	movs	r1, #0
 801cc0a:	2010      	movs	r0, #16
 801cc0c:	f7fd fffc 	bl	801ac08 <UTIL_SEQ_SetTask>
}
 801cc10:	bf00      	nop
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	00010002 	.word	0x00010002

0801cc18 <My_ESW_DCM_Timer>:


/* Timer Section Begin */

void My_ESW_DCM_Timer(My_Timer_td mode)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b082      	sub	sp, #8
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	4603      	mov	r3, r0
 801cc20:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in DCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801cc22:	79fb      	ldrb	r3, [r7, #7]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d10c      	bne.n	801cc42 <My_ESW_DCM_Timer+0x2a>
 801cc28:	4b0c      	ldr	r3, [pc, #48]	@ (801cc5c <My_ESW_DCM_Timer+0x44>)
 801cc2a:	781b      	ldrb	r3, [r3, #0]
 801cc2c:	1c5a      	adds	r2, r3, #1
 801cc2e:	b2d1      	uxtb	r1, r2
 801cc30:	4a0a      	ldr	r2, [pc, #40]	@ (801cc5c <My_ESW_DCM_Timer+0x44>)
 801cc32:	7011      	strb	r1, [r2, #0]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d104      	bne.n	801cc42 <My_ESW_DCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Energy Storage Window (ESW)
 801cc38:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801cc3c:	4808      	ldr	r0, [pc, #32]	@ (801cc60 <My_ESW_DCM_Timer+0x48>)
 801cc3e:	f001 f92b 	bl	801de98 <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801cc42:	79fb      	ldrb	r3, [r7, #7]
 801cc44:	2b01      	cmp	r3, #1
 801cc46:	d105      	bne.n	801cc54 <My_ESW_DCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801cc48:	4b04      	ldr	r3, [pc, #16]	@ (801cc5c <My_ESW_DCM_Timer+0x44>)
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801cc4e:	4804      	ldr	r0, [pc, #16]	@ (801cc60 <My_ESW_DCM_Timer+0x48>)
 801cc50:	f001 f966 	bl	801df20 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801cc54:	bf00      	nop
 801cc56:	3708      	adds	r7, #8
 801cc58:	46bd      	mov	sp, r7
 801cc5a:	bd80      	pop	{r7, pc}
 801cc5c:	20001bbb 	.word	0x20001bbb
 801cc60:	20001b40 	.word	0x20001b40

0801cc64 <My_ESW_CCM_Timer>:

void My_ESW_CCM_Timer(My_Timer_td mode)
{
 801cc64:	b580      	push	{r7, lr}
 801cc66:	b082      	sub	sp, #8
 801cc68:	af00      	add	r7, sp, #0
 801cc6a:	4603      	mov	r3, r0
 801cc6c:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in CCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801cc6e:	79fb      	ldrb	r3, [r7, #7]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d10c      	bne.n	801cc8e <My_ESW_CCM_Timer+0x2a>
 801cc74:	4b0c      	ldr	r3, [pc, #48]	@ (801cca8 <My_ESW_CCM_Timer+0x44>)
 801cc76:	781b      	ldrb	r3, [r3, #0]
 801cc78:	1c5a      	adds	r2, r3, #1
 801cc7a:	b2d1      	uxtb	r1, r2
 801cc7c:	4a0a      	ldr	r2, [pc, #40]	@ (801cca8 <My_ESW_CCM_Timer+0x44>)
 801cc7e:	7011      	strb	r1, [r2, #0]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d104      	bne.n	801cc8e <My_ESW_CCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_ESW);
 801cc84:	f241 4108 	movw	r1, #5128	@ 0x1408
 801cc88:	4808      	ldr	r0, [pc, #32]	@ (801ccac <My_ESW_CCM_Timer+0x48>)
 801cc8a:	f001 f965 	bl	801df58 <HAL_LPTIM_Counter_Start_IT>
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif

	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801cc8e:	79fb      	ldrb	r3, [r7, #7]
 801cc90:	2b01      	cmp	r3, #1
 801cc92:	d105      	bne.n	801cca0 <My_ESW_CCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801cc94:	4b04      	ldr	r3, [pc, #16]	@ (801cca8 <My_ESW_CCM_Timer+0x44>)
 801cc96:	2200      	movs	r2, #0
 801cc98:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop_IT(&hlptim1); 			// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801cc9a:	4804      	ldr	r0, [pc, #16]	@ (801ccac <My_ESW_CCM_Timer+0x48>)
 801cc9c:	f001 f9fe 	bl	801e09c <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801cca0:	bf00      	nop
 801cca2:	3708      	adds	r7, #8
 801cca4:	46bd      	mov	sp, r7
 801cca6:	bd80      	pop	{r7, pc}
 801cca8:	20001bbb 	.word	0x20001bbb
 801ccac:	20001b40 	.word	0x20001b40

0801ccb0 <My_SMW_Timer>:

void My_SMW_Timer(My_Timer_td mode)
{
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b082      	sub	sp, #8
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_SMW that defines the Sensor Measure Window (SMW) */

	if ((mode == START_TIMER) && (my_SMS_cnt++ == 0))	// Start the Sensor Measurement Window (SMW) Timer
 801ccba:	79fb      	ldrb	r3, [r7, #7]
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d10c      	bne.n	801ccda <My_SMW_Timer+0x2a>
 801ccc0:	4b0c      	ldr	r3, [pc, #48]	@ (801ccf4 <My_SMW_Timer+0x44>)
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	1c5a      	adds	r2, r3, #1
 801ccc6:	b2d1      	uxtb	r1, r2
 801ccc8:	4a0a      	ldr	r2, [pc, #40]	@ (801ccf4 <My_SMW_Timer+0x44>)
 801ccca:	7011      	strb	r1, [r2, #0]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d104      	bne.n	801ccda <My_SMW_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Sensor Measurement Window (SMW)
 801ccd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801ccd4:	4808      	ldr	r0, [pc, #32]	@ (801ccf8 <My_SMW_Timer+0x48>)
 801ccd6:	f001 f8df 	bl	801de98 <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Sensor Measurement Window (SMW) Timer
 801ccda:	79fb      	ldrb	r3, [r7, #7]
 801ccdc:	2b01      	cmp	r3, #1
 801ccde:	d105      	bne.n	801ccec <My_SMW_Timer+0x3c>
	{
		my_SMS_cnt = 0;									// Reset my_SMS_cnt
 801cce0:	4b04      	ldr	r3, [pc, #16]	@ (801ccf4 <My_SMW_Timer+0x44>)
 801cce2:	2200      	movs	r2, #0
 801cce4:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Sensor Measurement Window (SMW)
 801cce6:	4804      	ldr	r0, [pc, #16]	@ (801ccf8 <My_SMW_Timer+0x48>)
 801cce8:	f001 f91a 	bl	801df20 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801ccec:	bf00      	nop
 801ccee:	3708      	adds	r7, #8
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	bd80      	pop	{r7, pc}
 801ccf4:	20001bbc 	.word	0x20001bbc
 801ccf8:	20001b40 	.word	0x20001b40

0801ccfc <My_EDS_Timer>:

void My_EDS_Timer(My_Timer_td mode)
{
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b082      	sub	sp, #8
 801cd00:	af00      	add	r7, sp, #0
 801cd02:	4603      	mov	r3, r0
 801cd04:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_EDS that defines the Energy Detection State time Window */

	if (mode == START_TIMER) // Start the Energy Detection State (EDS) Timer
 801cd06:	79fb      	ldrb	r3, [r7, #7]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d104      	bne.n	801cd16 <My_EDS_Timer+0x1a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_EDS);
 801cd0c:	f643 2198 	movw	r1, #15000	@ 0x3a98
 801cd10:	4806      	ldr	r0, [pc, #24]	@ (801cd2c <My_EDS_Timer+0x30>)
 801cd12:	f001 f921 	bl	801df58 <HAL_LPTIM_Counter_Start_IT>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop the Energy Detection State (EDS) Timer
 801cd16:	79fb      	ldrb	r3, [r7, #7]
 801cd18:	2b01      	cmp	r3, #1
 801cd1a:	d102      	bne.n	801cd22 <My_EDS_Timer+0x26>
	{
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 801cd1c:	4803      	ldr	r0, [pc, #12]	@ (801cd2c <My_EDS_Timer+0x30>)
 801cd1e:	f001 f9bd 	bl	801e09c <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801cd22:	bf00      	nop
 801cd24:	3708      	adds	r7, #8
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bd80      	pop	{r7, pc}
 801cd2a:	bf00      	nop
 801cd2c:	20001b40 	.word	0x20001b40

0801cd30 <My_EHS_to_EMS_Timer>:

void My_EHS_to_EMS_Timer(My_Timer_td mode)
{
 801cd30:	b580      	push	{r7, lr}
 801cd32:	b082      	sub	sp, #8
 801cd34:	af00      	add	r7, sp, #0
 801cd36:	4603      	mov	r3, r0
 801cd38:	71fb      	strb	r3, [r7, #7]
	 * This Function Starts and Stops the EHS to EMS Timer
	 * It starts an RCT Alarm B Timer to detect, if the energy to harvest is missing while the System is in Energy Harvesting State (EHS).
	 * If the Energy to Harvest is missing for a time longer than T_EHS_EMS the System switches from the Energy Harvesting State (EHS) into the Energy Missing State (EMS).
	 */

	if (mode == START_TIMER)
 801cd3a:	79fb      	ldrb	r3, [r7, #7]
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d10a      	bne.n	801cd56 <My_EHS_to_EMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cd40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd44:	480a      	ldr	r0, [pc, #40]	@ (801cd70 <My_EHS_to_EMS_Timer+0x40>)
 801cd46:	f7ea fd45 	bl	80077d4 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B	// Start EHS to EMS Timer
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	2104      	movs	r1, #4
 801cd50:	2000      	movs	r0, #0
 801cd52:	f000 fcf1 	bl	801d738 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801cd56:	79fb      	ldrb	r3, [r7, #7]
 801cd58:	2b01      	cmp	r3, #1
 801cd5a:	d104      	bne.n	801cd66 <My_EHS_to_EMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cd5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd60:	4803      	ldr	r0, [pc, #12]	@ (801cd70 <My_EHS_to_EMS_Timer+0x40>)
 801cd62:	f7ea fd37 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}

}
 801cd66:	bf00      	nop
 801cd68:	3708      	adds	r7, #8
 801cd6a:	46bd      	mov	sp, r7
 801cd6c:	bd80      	pop	{r7, pc}
 801cd6e:	bf00      	nop
 801cd70:	20000750 	.word	0x20000750

0801cd74 <My_DCM_to_CCM_Timer>:

void My_DCM_to_CCM_Timer(My_Timer_td mode)
{
 801cd74:	b580      	push	{r7, lr}
 801cd76:	b082      	sub	sp, #8
 801cd78:	af00      	add	r7, sp, #0
 801cd7a:	4603      	mov	r3, r0
 801cd7c:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts and Stops the RCT Alarm B Timer to detect, while in Energy Storage State (EHS), to measure the time T_DCM_CCM.
	 * The time T_DC_CCM, defines when to switch from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM).
	 */

	if (mode == START_TIMER)
 801cd7e:	79fb      	ldrb	r3, [r7, #7]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d10a      	bne.n	801cd9a <My_DCM_to_CCM_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cd84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd88:	480a      	ldr	r0, [pc, #40]	@ (801cdb4 <My_DCM_to_CCM_Timer+0x40>)
 801cd8a:	f7ea fd23 	bl	80077d4 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801cd8e:	2300      	movs	r3, #0
 801cd90:	2207      	movs	r2, #7
 801cd92:	2100      	movs	r1, #0
 801cd94:	2000      	movs	r0, #0
 801cd96:	f000 fccf 	bl	801d738 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801cd9a:	79fb      	ldrb	r3, [r7, #7]
 801cd9c:	2b01      	cmp	r3, #1
 801cd9e:	d104      	bne.n	801cdaa <My_DCM_to_CCM_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cda0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cda4:	4803      	ldr	r0, [pc, #12]	@ (801cdb4 <My_DCM_to_CCM_Timer+0x40>)
 801cda6:	f7ea fd15 	bl	80077d4 <HAL_RTC_DeactivateAlarm>

#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801cdaa:	bf00      	nop
 801cdac:	3708      	adds	r7, #8
 801cdae:	46bd      	mov	sp, r7
 801cdb0:	bd80      	pop	{r7, pc}
 801cdb2:	bf00      	nop
 801cdb4:	20000750 	.word	0x20000750

0801cdb8 <My_EMS_to_EDS_Timer>:

void My_EMS_to_EDS_Timer(My_Timer_td mode)
{
 801cdb8:	b580      	push	{r7, lr}
 801cdba:	b082      	sub	sp, #8
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	4603      	mov	r3, r0
 801cdc0:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RCT Alarm B Timer to detect, while in Energy Missing State (EMS), to measure the time T_EMS_EDS.
	 * The time T_EMS_EDS, defines When to switch from Energy Missing State (EMS) to Energy Detection State (EDS), to perform an Energy presence check.
	 */

	if (mode == START_TIMER)
 801cdc2:	79fb      	ldrb	r3, [r7, #7]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d10a      	bne.n	801cdde <My_EMS_to_EDS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cdc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cdcc:	480a      	ldr	r0, [pc, #40]	@ (801cdf8 <My_EMS_to_EDS_Timer+0x40>)
 801cdce:	f7ea fd01 	bl	80077d4 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801cdd2:	2300      	movs	r3, #0
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	2102      	movs	r1, #2
 801cdd8:	2000      	movs	r0, #0
 801cdda:	f000 fcad 	bl	801d738 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801cdde:	79fb      	ldrb	r3, [r7, #7]
 801cde0:	2b01      	cmp	r3, #1
 801cde2:	d104      	bne.n	801cdee <My_EMS_to_EDS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cde4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cde8:	4803      	ldr	r0, [pc, #12]	@ (801cdf8 <My_EMS_to_EDS_Timer+0x40>)
 801cdea:	f7ea fcf3 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801cdee:	bf00      	nop
 801cdf0:	3708      	adds	r7, #8
 801cdf2:	46bd      	mov	sp, r7
 801cdf4:	bd80      	pop	{r7, pc}
 801cdf6:	bf00      	nop
 801cdf8:	20000750 	.word	0x20000750

0801cdfc <My_EMS_to_SMS_Timer>:

void My_EMS_to_SMS_Timer(My_Timer_td mode)
{
 801cdfc:	b580      	push	{r7, lr}
 801cdfe:	b082      	sub	sp, #8
 801ce00:	af00      	add	r7, sp, #0
 801ce02:	4603      	mov	r3, r0
 801ce04:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RTC Alarm A Timer to periodically switch into the Sensor Measurement State (SMS)
	 * while the system is in the Energy Missing State (EMS)
	 * */

	if (mode == START_TIMER)
 801ce06:	79fb      	ldrb	r3, [r7, #7]
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d10a      	bne.n	801ce22 <My_EMS_to_SMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801ce0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ce10:	480a      	ldr	r0, [pc, #40]	@ (801ce3c <My_EMS_to_SMS_Timer+0x40>)
 801ce12:	f7ea fcdf 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
		My_Set_RTC_Alarm_A
 801ce16:	2300      	movs	r3, #0
 801ce18:	221e      	movs	r2, #30
 801ce1a:	2100      	movs	r1, #0
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	f000 fc3b 	bl	801d698 <My_Set_RTC_Alarm_A>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to SMS Timer
 801ce22:	79fb      	ldrb	r3, [r7, #7]
 801ce24:	2b01      	cmp	r3, #1
 801ce26:	d104      	bne.n	801ce32 <My_EMS_to_SMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801ce28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ce2c:	4803      	ldr	r0, [pc, #12]	@ (801ce3c <My_EMS_to_SMS_Timer+0x40>)
 801ce2e:	f7ea fcd1 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_OPEN);
#endif
	}
}
 801ce32:	bf00      	nop
 801ce34:	3708      	adds	r7, #8
 801ce36:	46bd      	mov	sp, r7
 801ce38:	bd80      	pop	{r7, pc}
 801ce3a:	bf00      	nop
 801ce3c:	20000750 	.word	0x20000750

0801ce40 <My_MX_I2C1_Init>:


/* Sensor Section Begin */

HAL_StatusTypeDef My_MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 801ce40:	b580      	push	{r7, lr}
 801ce42:	b084      	sub	sp, #16
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801ce48:	2300      	movs	r3, #0
 801ce4a:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C1;
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	4a1c      	ldr	r2, [pc, #112]	@ (801cec0 <My_MX_I2C1_Init+0x80>)
 801ce50:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	4a1b      	ldr	r2, [pc, #108]	@ (801cec4 <My_MX_I2C1_Init+0x84>)
 801ce56:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	2201      	movs	r2, #1
 801ce62:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2200      	movs	r2, #0
 801ce68:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	2200      	movs	r2, #0
 801ce74:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	2200      	movs	r2, #0
 801ce7a:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	2200      	movs	r2, #0
 801ce80:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801ce82:	6878      	ldr	r0, [r7, #4]
 801ce84:	f7e7 feac 	bl	8004be0 <HAL_I2C_Init>
 801ce88:	4603      	mov	r3, r0
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d001      	beq.n	801ce92 <My_MX_I2C1_Init+0x52>
	{
		ret = HAL_ERROR;
 801ce8e:	2301      	movs	r3, #1
 801ce90:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801ce92:	2100      	movs	r1, #0
 801ce94:	6878      	ldr	r0, [r7, #4]
 801ce96:	f7e8 fb8f 	bl	80055b8 <HAL_I2CEx_ConfigAnalogFilter>
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d001      	beq.n	801cea4 <My_MX_I2C1_Init+0x64>
	{
		ret = HAL_ERROR;
 801cea0:	2301      	movs	r3, #1
 801cea2:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801cea4:	2100      	movs	r1, #0
 801cea6:	6878      	ldr	r0, [r7, #4]
 801cea8:	f7e8 fbd0 	bl	800564c <HAL_I2CEx_ConfigDigitalFilter>
 801ceac:	4603      	mov	r3, r0
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d001      	beq.n	801ceb6 <My_MX_I2C1_Init+0x76>
	{
		ret = HAL_ERROR;
 801ceb2:	2301      	movs	r3, #1
 801ceb4:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801ceb6:	7bfb      	ldrb	r3, [r7, #15]
}
 801ceb8:	4618      	mov	r0, r3
 801ceba:	3710      	adds	r7, #16
 801cebc:	46bd      	mov	sp, r7
 801cebe:	bd80      	pop	{r7, pc}
 801cec0:	40005400 	.word	0x40005400
 801cec4:	9010deff 	.word	0x9010deff

0801cec8 <My_I2C1_MspInit>:

void My_I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801cec8:	b580      	push	{r7, lr}
 801ceca:	b096      	sub	sp, #88	@ 0x58
 801cecc:	af00      	add	r7, sp, #0
 801cece:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ced0:	f107 030c 	add.w	r3, r7, #12
 801ced4:	2238      	movs	r2, #56	@ 0x38
 801ced6:	2100      	movs	r1, #0
 801ced8:	4618      	mov	r0, r3
 801ceda:	f003 fc59 	bl	8020790 <memset>

	/* USER CODE END I2C1_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 801cede:	2340      	movs	r3, #64	@ 0x40
 801cee0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801cee2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 801cee6:	623b      	str	r3, [r7, #32]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801cee8:	f107 030c 	add.w	r3, r7, #12
 801ceec:	4618      	mov	r0, r3
 801ceee:	f7ea f845 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOB_CLK_ENABLE();
 801cef2:	2002      	movs	r0, #2
 801cef4:	f7ff f946 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801cef8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801cefc:	647b      	str	r3, [r7, #68]	@ 0x44

	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801cefe:	2312      	movs	r3, #18
 801cf00:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801cf02:	2301      	movs	r3, #1
 801cf04:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cf06:	2303      	movs	r3, #3
 801cf08:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801cf0a:	2304      	movs	r3, #4
 801cf0c:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801cf0e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801cf12:	4619      	mov	r1, r3
 801cf14:	4805      	ldr	r0, [pc, #20]	@ (801cf2c <My_I2C1_MspInit+0x64>)
 801cf16:	f7e7 fbfb 	bl	8004710 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 801cf1a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801cf1e:	f7ff f95b 	bl	801c1d8 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C1_MspInit 1 */

	/* USER CODE END I2C1_MspInit 1 */
}
 801cf22:	bf00      	nop
 801cf24:	3758      	adds	r7, #88	@ 0x58
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}
 801cf2a:	bf00      	nop
 801cf2c:	48000400 	.word	0x48000400

0801cf30 <My_I2C1_MspDeInit>:

void My_I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b082      	sub	sp, #8
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C1_MspDeInit 0 */

	/* USER CODE END I2C1_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C1_CLK_DISABLE();
 801cf38:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801cf3c:	f7ff f964 	bl	801c208 <LL_APB1_GRP1_DisableClock>

	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 801cf40:	2180      	movs	r1, #128	@ 0x80
 801cf42:	4806      	ldr	r0, [pc, #24]	@ (801cf5c <My_I2C1_MspDeInit+0x2c>)
 801cf44:	f7e7 fd44 	bl	80049d0 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 801cf48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801cf4c:	4803      	ldr	r0, [pc, #12]	@ (801cf5c <My_I2C1_MspDeInit+0x2c>)
 801cf4e:	f7e7 fd3f 	bl	80049d0 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C1_MspDeInit 1 */

	/* USER CODE END I2C1_MspDeInit 1 */
}
 801cf52:	bf00      	nop
 801cf54:	3708      	adds	r7, #8
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bd80      	pop	{r7, pc}
 801cf5a:	bf00      	nop
 801cf5c:	48000400 	.word	0x48000400

0801cf60 <My_MX_I2C2_Init>:


HAL_StatusTypeDef My_MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b084      	sub	sp, #16
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801cf68:	2300      	movs	r3, #0
 801cf6a:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C2;
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	4a1c      	ldr	r2, [pc, #112]	@ (801cfe0 <My_MX_I2C2_Init+0x80>)
 801cf70:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	4a1b      	ldr	r2, [pc, #108]	@ (801cfe4 <My_MX_I2C2_Init+0x84>)
 801cf76:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	2201      	movs	r2, #1
 801cf82:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	2200      	movs	r2, #0
 801cf88:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	2200      	movs	r2, #0
 801cf94:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	2200      	movs	r2, #0
 801cf9a:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	2200      	movs	r2, #0
 801cfa0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801cfa2:	6878      	ldr	r0, [r7, #4]
 801cfa4:	f7e7 fe1c 	bl	8004be0 <HAL_I2C_Init>
 801cfa8:	4603      	mov	r3, r0
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d001      	beq.n	801cfb2 <My_MX_I2C2_Init+0x52>
	{
		ret = HAL_ERROR;
 801cfae:	2301      	movs	r3, #1
 801cfb0:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801cfb2:	2100      	movs	r1, #0
 801cfb4:	6878      	ldr	r0, [r7, #4]
 801cfb6:	f7e8 faff 	bl	80055b8 <HAL_I2CEx_ConfigAnalogFilter>
 801cfba:	4603      	mov	r3, r0
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d001      	beq.n	801cfc4 <My_MX_I2C2_Init+0x64>
	{
		ret = HAL_ERROR;
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801cfc4:	2100      	movs	r1, #0
 801cfc6:	6878      	ldr	r0, [r7, #4]
 801cfc8:	f7e8 fb40 	bl	800564c <HAL_I2CEx_ConfigDigitalFilter>
 801cfcc:	4603      	mov	r3, r0
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d001      	beq.n	801cfd6 <My_MX_I2C2_Init+0x76>
	{
		ret = HAL_ERROR;
 801cfd2:	2301      	movs	r3, #1
 801cfd4:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801cfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfd8:	4618      	mov	r0, r3
 801cfda:	3710      	adds	r7, #16
 801cfdc:	46bd      	mov	sp, r7
 801cfde:	bd80      	pop	{r7, pc}
 801cfe0:	40005800 	.word	0x40005800
 801cfe4:	9010deff 	.word	0x9010deff

0801cfe8 <My_I2C2_MspInit>:

void My_I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b096      	sub	sp, #88	@ 0x58
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801cff0:	f107 030c 	add.w	r3, r7, #12
 801cff4:	2238      	movs	r2, #56	@ 0x38
 801cff6:	2100      	movs	r1, #0
 801cff8:	4618      	mov	r0, r3
 801cffa:	f003 fbc9 	bl	8020790 <memset>

	/* USER CODE END I2C2_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801cffe:	2380      	movs	r3, #128	@ 0x80
 801d000:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801d002:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 801d006:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801d008:	f107 030c 	add.w	r3, r7, #12
 801d00c:	4618      	mov	r0, r3
 801d00e:	f7e9 ffb5 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d012:	2001      	movs	r0, #1
 801d014:	f7ff f8b6 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 801d018:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 801d01c:	647b      	str	r3, [r7, #68]	@ 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801d01e:	2312      	movs	r3, #18
 801d020:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d022:	2301      	movs	r3, #1
 801d024:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d026:	2303      	movs	r3, #3
 801d028:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801d02a:	2304      	movs	r3, #4
 801d02c:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d02e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d032:	4619      	mov	r1, r3
 801d034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d038:	f7e7 fb6a 	bl	8004710 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C2_CLK_ENABLE();
 801d03c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801d040:	f7ff f8ca 	bl	801c1d8 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C2_MspInit 1 */

	/* USER CODE END I2C2_MspInit 1 */
}
 801d044:	bf00      	nop
 801d046:	3758      	adds	r7, #88	@ 0x58
 801d048:	46bd      	mov	sp, r7
 801d04a:	bd80      	pop	{r7, pc}

0801d04c <My_I2C2_MspDeInit>:

void My_I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b082      	sub	sp, #8
 801d050:	af00      	add	r7, sp, #0
 801d052:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C2_MspDeInit 0 */

	/* USER CODE END I2C2_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C2_CLK_DISABLE();
 801d054:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801d058:	f7ff f8d6 	bl	801c208 <LL_APB1_GRP1_DisableClock>

	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 801d05c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801d060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d064:	f7e7 fcb4 	bl	80049d0 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 801d068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801d06c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d070:	f7e7 fcae 	bl	80049d0 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C2_MspDeInit 1 */

	/* USER CODE END I2C2_MspDeInit 1 */
}
 801d074:	bf00      	nop
 801d076:	3708      	adds	r7, #8
 801d078:	46bd      	mov	sp, r7
 801d07a:	bd80      	pop	{r7, pc}

0801d07c <My_I2C_Init>:


void My_I2C_Init(My_I2C_td mode)
{
 801d07c:	b580      	push	{r7, lr}
 801d07e:	b082      	sub	sp, #8
 801d080:	af00      	add	r7, sp, #0
 801d082:	4603      	mov	r3, r0
 801d084:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801d086:	79fb      	ldrb	r3, [r7, #7]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d002      	beq.n	801d092 <My_I2C_Init+0x16>
 801d08c:	2b01      	cmp	r3, #1
 801d08e:	d007      	beq.n	801d0a0 <My_I2C_Init+0x24>
		break;
	}

	default:
	{
		break;
 801d090:	e00d      	b.n	801d0ae <My_I2C_Init+0x32>
		My_I2C1_MspInit(&hi2c1);
 801d092:	4809      	ldr	r0, [pc, #36]	@ (801d0b8 <My_I2C_Init+0x3c>)
 801d094:	f7ff ff18 	bl	801cec8 <My_I2C1_MspInit>
		My_MX_I2C1_Init(&hi2c1);
 801d098:	4807      	ldr	r0, [pc, #28]	@ (801d0b8 <My_I2C_Init+0x3c>)
 801d09a:	f7ff fed1 	bl	801ce40 <My_MX_I2C1_Init>
		break;
 801d09e:	e006      	b.n	801d0ae <My_I2C_Init+0x32>
		My_I2C2_MspInit(&hi2c2);
 801d0a0:	4806      	ldr	r0, [pc, #24]	@ (801d0bc <My_I2C_Init+0x40>)
 801d0a2:	f7ff ffa1 	bl	801cfe8 <My_I2C2_MspInit>
		My_MX_I2C2_Init(&hi2c2);
 801d0a6:	4805      	ldr	r0, [pc, #20]	@ (801d0bc <My_I2C_Init+0x40>)
 801d0a8:	f7ff ff5a 	bl	801cf60 <My_MX_I2C2_Init>
		break;
 801d0ac:	bf00      	nop
	}
	}
}
 801d0ae:	bf00      	nop
 801d0b0:	3708      	adds	r7, #8
 801d0b2:	46bd      	mov	sp, r7
 801d0b4:	bd80      	pop	{r7, pc}
 801d0b6:	bf00      	nop
 801d0b8:	20001c40 	.word	0x20001c40
 801d0bc:	20001c94 	.word	0x20001c94

0801d0c0 <My_I2C_Deinit>:

void My_I2C_Deinit(My_I2C_td mode)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b082      	sub	sp, #8
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801d0ca:	79fb      	ldrb	r3, [r7, #7]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d002      	beq.n	801d0d6 <My_I2C_Deinit+0x16>
 801d0d0:	2b01      	cmp	r3, #1
 801d0d2:	d004      	beq.n	801d0de <My_I2C_Deinit+0x1e>
		break;
	}

	default:
	{
		break;
 801d0d4:	e007      	b.n	801d0e6 <My_I2C_Deinit+0x26>
		My_I2C1_MspDeInit(&hi2c1);
 801d0d6:	4806      	ldr	r0, [pc, #24]	@ (801d0f0 <My_I2C_Deinit+0x30>)
 801d0d8:	f7ff ff2a 	bl	801cf30 <My_I2C1_MspDeInit>
		break;
 801d0dc:	e003      	b.n	801d0e6 <My_I2C_Deinit+0x26>
		My_I2C2_MspDeInit(&hi2c2);
 801d0de:	4805      	ldr	r0, [pc, #20]	@ (801d0f4 <My_I2C_Deinit+0x34>)
 801d0e0:	f7ff ffb4 	bl	801d04c <My_I2C2_MspDeInit>
		break;
 801d0e4:	bf00      	nop
	}
	}
}
 801d0e6:	bf00      	nop
 801d0e8:	3708      	adds	r7, #8
 801d0ea:	46bd      	mov	sp, r7
 801d0ec:	bd80      	pop	{r7, pc}
 801d0ee:	bf00      	nop
 801d0f0:	20001c40 	.word	0x20001c40
 801d0f4:	20001c94 	.word	0x20001c94

0801d0f8 <My_SHT40_Get_Data>:

#if MY_SHT40

void My_SHT40_Get_Data(void)
{
 801d0f8:	b580      	push	{r7, lr}
 801d0fa:	b086      	sub	sp, #24
 801d0fc:	af02      	add	r7, sp, #8
	my_SHT40_Temp = 0;																								// Reset my_SHT40_Temp
 801d0fe:	4b4d      	ldr	r3, [pc, #308]	@ (801d234 <My_SHT40_Get_Data+0x13c>)
 801d100:	2200      	movs	r2, #0
 801d102:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid = 0;																								// Reset my_SHT40_Humid
 801d104:	4b4c      	ldr	r3, [pc, #304]	@ (801d238 <My_SHT40_Get_Data+0x140>)
 801d106:	2200      	movs	r2, #0
 801d108:	601a      	str	r2, [r3, #0]

	uint8_t SHT40_Raw_Data[6];																						// Define raw data vector
	memset(SHT40_Raw_Data, 0, sizeof(SHT40_Raw_Data));																// Initialize raw data vector
 801d10a:	1d3b      	adds	r3, r7, #4
 801d10c:	2206      	movs	r2, #6
 801d10e:	2100      	movs	r1, #0
 801d110:	4618      	mov	r0, r3
 801d112:	f003 fb3d 	bl	8020790 <memset>

	uint8_t SHT40_Measure_Cmd = SHT40_MEASURE_CMD_HP;																// Initialize SHT40 Address
 801d116:	23fd      	movs	r3, #253	@ 0xfd
 801d118:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, SHT40AD1B_I2C_ADDRESS, &SHT40_Measure_Cmd, 1, HAL_MAX_DELAY); 					// Transmit Data through I2C2
 801d11a:	1cfa      	adds	r2, r7, #3
 801d11c:	f04f 33ff 	mov.w	r3, #4294967295
 801d120:	9300      	str	r3, [sp, #0]
 801d122:	2301      	movs	r3, #1
 801d124:	2189      	movs	r1, #137	@ 0x89
 801d126:	4845      	ldr	r0, [pc, #276]	@ (801d23c <My_SHT40_Get_Data+0x144>)
 801d128:	f7e7 fdf2 	bl	8004d10 <HAL_I2C_Master_Transmit>

	My_HAL_Delay(25);																								// Add delay to ensure the sensor is ready to provide data
 801d12c:	2019      	movs	r0, #25
 801d12e:	f000 fcf5 	bl	801db1c <My_HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c2, SHT40AD1B_I2C_ADDRESS, SHT40_Raw_Data, sizeof(SHT40_Raw_Data), HAL_MAX_DELAY);	// Receive Data through I2C2
 801d132:	1d3a      	adds	r2, r7, #4
 801d134:	f04f 33ff 	mov.w	r3, #4294967295
 801d138:	9300      	str	r3, [sp, #0]
 801d13a:	2306      	movs	r3, #6
 801d13c:	2189      	movs	r1, #137	@ 0x89
 801d13e:	483f      	ldr	r0, [pc, #252]	@ (801d23c <My_SHT40_Get_Data+0x144>)
 801d140:	f7e7 feda 	bl	8004ef8 <HAL_I2C_Master_Receive>

	uint16_t SHT40_Raw_Temp = (SHT40_Raw_Data[0] << 8) | SHT40_Raw_Data[1];											// Temperature Data From SHT40
 801d144:	793b      	ldrb	r3, [r7, #4]
 801d146:	b21b      	sxth	r3, r3
 801d148:	021b      	lsls	r3, r3, #8
 801d14a:	b21a      	sxth	r2, r3
 801d14c:	797b      	ldrb	r3, [r7, #5]
 801d14e:	b21b      	sxth	r3, r3
 801d150:	4313      	orrs	r3, r2
 801d152:	b21b      	sxth	r3, r3
 801d154:	81fb      	strh	r3, [r7, #14]
	uint16_t SHT40_Raw_Humid = (SHT40_Raw_Data[3] << 8) | SHT40_Raw_Data[4];										// Relative Humidity (RH) From SHT40
 801d156:	79fb      	ldrb	r3, [r7, #7]
 801d158:	b21b      	sxth	r3, r3
 801d15a:	021b      	lsls	r3, r3, #8
 801d15c:	b21a      	sxth	r2, r3
 801d15e:	7a3b      	ldrb	r3, [r7, #8]
 801d160:	b21b      	sxth	r3, r3
 801d162:	4313      	orrs	r3, r2
 801d164:	b21b      	sxth	r3, r3
 801d166:	81bb      	strh	r3, [r7, #12]

//	float my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
//	float my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
	my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
 801d168:	89fb      	ldrh	r3, [r7, #14]
 801d16a:	4618      	mov	r0, r3
 801d16c:	f7e3 fb82 	bl	8000874 <__aeabi_ui2f>
 801d170:	4603      	mov	r3, r0
 801d172:	4933      	ldr	r1, [pc, #204]	@ (801d240 <My_SHT40_Get_Data+0x148>)
 801d174:	4618      	mov	r0, r3
 801d176:	f7e3 fc89 	bl	8000a8c <__aeabi_fdiv>
 801d17a:	4603      	mov	r3, r0
 801d17c:	4931      	ldr	r1, [pc, #196]	@ (801d244 <My_SHT40_Get_Data+0x14c>)
 801d17e:	4618      	mov	r0, r3
 801d180:	f7e3 fbd0 	bl	8000924 <__aeabi_fmul>
 801d184:	4603      	mov	r3, r0
 801d186:	4930      	ldr	r1, [pc, #192]	@ (801d248 <My_SHT40_Get_Data+0x150>)
 801d188:	4618      	mov	r0, r3
 801d18a:	f7e3 fac1 	bl	8000710 <__aeabi_fsub>
 801d18e:	4603      	mov	r3, r0
 801d190:	461a      	mov	r2, r3
 801d192:	4b2e      	ldr	r3, [pc, #184]	@ (801d24c <My_SHT40_Get_Data+0x154>)
 801d194:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
 801d196:	89bb      	ldrh	r3, [r7, #12]
 801d198:	4618      	mov	r0, r3
 801d19a:	f7e3 fb6b 	bl	8000874 <__aeabi_ui2f>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	4927      	ldr	r1, [pc, #156]	@ (801d240 <My_SHT40_Get_Data+0x148>)
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f7e3 fc72 	bl	8000a8c <__aeabi_fdiv>
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	4929      	ldr	r1, [pc, #164]	@ (801d250 <My_SHT40_Get_Data+0x158>)
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	f7e3 fbb9 	bl	8000924 <__aeabi_fmul>
 801d1b2:	4603      	mov	r3, r0
 801d1b4:	4927      	ldr	r1, [pc, #156]	@ (801d254 <My_SHT40_Get_Data+0x15c>)
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	f7e3 faaa 	bl	8000710 <__aeabi_fsub>
 801d1bc:	4603      	mov	r3, r0
 801d1be:	461a      	mov	r2, r3
 801d1c0:	4b25      	ldr	r3, [pc, #148]	@ (801d258 <My_SHT40_Get_Data+0x160>)
 801d1c2:	601a      	str	r2, [r3, #0]

	if (my_SHT40_Humid_Float > 100.0f)																				// Clamp Humidity values to valid range (0-100%)
 801d1c4:	4b24      	ldr	r3, [pc, #144]	@ (801d258 <My_SHT40_Get_Data+0x160>)
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	4924      	ldr	r1, [pc, #144]	@ (801d25c <My_SHT40_Get_Data+0x164>)
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	f7e3 fd66 	bl	8000c9c <__aeabi_fcmpgt>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d002      	beq.n	801d1dc <My_SHT40_Get_Data+0xe4>
	{
		my_SHT40_Humid_Float = 100.0f;
 801d1d6:	4b20      	ldr	r3, [pc, #128]	@ (801d258 <My_SHT40_Get_Data+0x160>)
 801d1d8:	4a20      	ldr	r2, [pc, #128]	@ (801d25c <My_SHT40_Get_Data+0x164>)
 801d1da:	601a      	str	r2, [r3, #0]
	}

	if (my_SHT40_Humid_Float < 0.0f)																				// Clamp Humidity values to valid range (0-100%)
 801d1dc:	4b1e      	ldr	r3, [pc, #120]	@ (801d258 <My_SHT40_Get_Data+0x160>)
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	f04f 0100 	mov.w	r1, #0
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	f7e3 fd3b 	bl	8000c60 <__aeabi_fcmplt>
 801d1ea:	4603      	mov	r3, r0
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d003      	beq.n	801d1f8 <My_SHT40_Get_Data+0x100>
	{
		my_SHT40_Humid_Float = 0.0f;
 801d1f0:	4b19      	ldr	r3, [pc, #100]	@ (801d258 <My_SHT40_Get_Data+0x160>)
 801d1f2:	f04f 0200 	mov.w	r2, #0
 801d1f6:	601a      	str	r2, [r3, #0]
	}

	my_SHT40_Temp =  (uint32_t)(10*my_SHT40_Temp_Float);															// Scale Temperature Value and convert to integer values
 801d1f8:	4b14      	ldr	r3, [pc, #80]	@ (801d24c <My_SHT40_Get_Data+0x154>)
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	4918      	ldr	r1, [pc, #96]	@ (801d260 <My_SHT40_Get_Data+0x168>)
 801d1fe:	4618      	mov	r0, r3
 801d200:	f7e3 fb90 	bl	8000924 <__aeabi_fmul>
 801d204:	4603      	mov	r3, r0
 801d206:	4618      	mov	r0, r3
 801d208:	f7e3 fd78 	bl	8000cfc <__aeabi_f2uiz>
 801d20c:	4603      	mov	r3, r0
 801d20e:	4a09      	ldr	r2, [pc, #36]	@ (801d234 <My_SHT40_Get_Data+0x13c>)
 801d210:	6013      	str	r3, [r2, #0]
	my_SHT40_Humid = (uint32_t)(10*my_SHT40_Humid_Float);															// Scale Humidity Value and convert to integer values
 801d212:	4b11      	ldr	r3, [pc, #68]	@ (801d258 <My_SHT40_Get_Data+0x160>)
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	4912      	ldr	r1, [pc, #72]	@ (801d260 <My_SHT40_Get_Data+0x168>)
 801d218:	4618      	mov	r0, r3
 801d21a:	f7e3 fb83 	bl	8000924 <__aeabi_fmul>
 801d21e:	4603      	mov	r3, r0
 801d220:	4618      	mov	r0, r3
 801d222:	f7e3 fd6b 	bl	8000cfc <__aeabi_f2uiz>
 801d226:	4603      	mov	r3, r0
 801d228:	4a03      	ldr	r2, [pc, #12]	@ (801d238 <My_SHT40_Get_Data+0x140>)
 801d22a:	6013      	str	r3, [r2, #0]
}
 801d22c:	bf00      	nop
 801d22e:	3710      	adds	r7, #16
 801d230:	46bd      	mov	sp, r7
 801d232:	bd80      	pop	{r7, pc}
 801d234:	20001bf8 	.word	0x20001bf8
 801d238:	20001bfc 	.word	0x20001bfc
 801d23c:	20001c94 	.word	0x20001c94
 801d240:	477fff00 	.word	0x477fff00
 801d244:	432f0000 	.word	0x432f0000
 801d248:	42340000 	.word	0x42340000
 801d24c:	20001bf0 	.word	0x20001bf0
 801d250:	42fa0000 	.word	0x42fa0000
 801d254:	40c00000 	.word	0x40c00000
 801d258:	20001bf4 	.word	0x20001bf4
 801d25c:	42c80000 	.word	0x42c80000
 801d260:	41200000 	.word	0x41200000

0801d264 <My_SoilSensor_Get_Data>:
#endif

#if MY_SoilSensor
void My_SoilSensor_Get_Data(void)
{
 801d264:	b580      	push	{r7, lr}
 801d266:	b082      	sub	sp, #8
 801d268:	af00      	add	r7, sp, #0
//	HAL_ADC_Start(&hadc);
//	HAL_ADC_PollForConversion(&hadc, 5000);
//	uint32_t adc_val = HAL_ADC_GetValue(&hadc);
//	HAL_ADC_Stop(&hadc);

	uint32_t adc_val = ADC_ReadChannels(ADC_CHANNEL_4);
 801d26a:	480f      	ldr	r0, [pc, #60]	@ (801d2a8 <My_SoilSensor_Get_Data+0x44>)
 801d26c:	f7e3 ffd2 	bl	8001214 <ADC_ReadChannels>
 801d270:	6078      	str	r0, [r7, #4]
//	Convert the ADC value to a percentage
	float adc = (float)adc_val;
 801d272:	6878      	ldr	r0, [r7, #4]
 801d274:	f7e3 fafe 	bl	8000874 <__aeabi_ui2f>
 801d278:	4603      	mov	r3, r0
 801d27a:	603b      	str	r3, [r7, #0]
//	if (adc > AIR_VALUE) adc = AIR_VALUE;
//	if (adc < WATER_VALUE) adc = WATER_VALUE;
	my_SoilSensor = 100.0f * (AIR_VALUE - adc) / (AIR_VALUE - WATER_VALUE);
 801d27c:	6839      	ldr	r1, [r7, #0]
 801d27e:	480b      	ldr	r0, [pc, #44]	@ (801d2ac <My_SoilSensor_Get_Data+0x48>)
 801d280:	f7e3 fa46 	bl	8000710 <__aeabi_fsub>
 801d284:	4603      	mov	r3, r0
 801d286:	490a      	ldr	r1, [pc, #40]	@ (801d2b0 <My_SoilSensor_Get_Data+0x4c>)
 801d288:	4618      	mov	r0, r3
 801d28a:	f7e3 fb4b 	bl	8000924 <__aeabi_fmul>
 801d28e:	4603      	mov	r3, r0
 801d290:	4908      	ldr	r1, [pc, #32]	@ (801d2b4 <My_SoilSensor_Get_Data+0x50>)
 801d292:	4618      	mov	r0, r3
 801d294:	f7e3 fbfa 	bl	8000a8c <__aeabi_fdiv>
 801d298:	4603      	mov	r3, r0
 801d29a:	461a      	mov	r2, r3
 801d29c:	4b06      	ldr	r3, [pc, #24]	@ (801d2b8 <My_SoilSensor_Get_Data+0x54>)
 801d29e:	601a      	str	r2, [r3, #0]
}
 801d2a0:	bf00      	nop
 801d2a2:	3708      	adds	r7, #8
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	bd80      	pop	{r7, pc}
 801d2a8:	10000010 	.word	0x10000010
 801d2ac:	44eaebd7 	.word	0x44eaebd7
 801d2b0:	42c80000 	.word	0x42c80000
 801d2b4:	440e97ae 	.word	0x440e97ae
 801d2b8:	20001bec 	.word	0x20001bec

0801d2bc <My_Set_All_GPIO_To_Analog_Mode>:
#endif

/* Sensor Section End */

void My_Set_All_GPIO_To_Analog_Mode(void)
{
 801d2bc:	b580      	push	{r7, lr}
 801d2be:	b086      	sub	sp, #24
 801d2c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d2c2:	1d3b      	adds	r3, r7, #4
 801d2c4:	2200      	movs	r2, #0
 801d2c6:	601a      	str	r2, [r3, #0]
 801d2c8:	605a      	str	r2, [r3, #4]
 801d2ca:	609a      	str	r2, [r3, #8]
 801d2cc:	60da      	str	r2, [r3, #12]
 801d2ce:	611a      	str	r2, [r3, #16]

	// Enable clocks for all available GPIO ports
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d2d0:	2001      	movs	r0, #1
 801d2d2:	f7fe ff57 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d2d6:	2002      	movs	r0, #2
 801d2d8:	f7fe ff54 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d2dc:	2004      	movs	r0, #4
 801d2de:	f7fe ff51 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d2e2:	2080      	movs	r0, #128	@ 0x80
 801d2e4:	f7fe ff4e 	bl	801c184 <LL_AHB2_GRP1_EnableClock>

	// Configure all pins of the GPIO ports as analog to reduce power consumption
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d2e8:	2303      	movs	r3, #3
 801d2ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2ec:	2300      	movs	r3, #0
 801d2ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 801d2f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d2f4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d2f6:	1d3b      	adds	r3, r7, #4
 801d2f8:	4619      	mov	r1, r3
 801d2fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d2fe:	f7e7 fa07 	bl	8004710 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801d302:	1d3b      	adds	r3, r7, #4
 801d304:	4619      	mov	r1, r3
 801d306:	480e      	ldr	r0, [pc, #56]	@ (801d340 <My_Set_All_GPIO_To_Analog_Mode+0x84>)
 801d308:	f7e7 fa02 	bl	8004710 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d30c:	1d3b      	adds	r3, r7, #4
 801d30e:	4619      	mov	r1, r3
 801d310:	480c      	ldr	r0, [pc, #48]	@ (801d344 <My_Set_All_GPIO_To_Analog_Mode+0x88>)
 801d312:	f7e7 f9fd 	bl	8004710 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801d316:	1d3b      	adds	r3, r7, #4
 801d318:	4619      	mov	r1, r3
 801d31a:	480b      	ldr	r0, [pc, #44]	@ (801d348 <My_Set_All_GPIO_To_Analog_Mode+0x8c>)
 801d31c:	f7e7 f9f8 	bl	8004710 <HAL_GPIO_Init>

	// Disable clocks to save power
	__HAL_RCC_GPIOA_CLK_DISABLE();
 801d320:	2001      	movs	r0, #1
 801d322:	f7fe ff47 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801d326:	2002      	movs	r0, #2
 801d328:	f7fe ff44 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801d32c:	2004      	movs	r0, #4
 801d32e:	f7fe ff41 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801d332:	2080      	movs	r0, #128	@ 0x80
 801d334:	f7fe ff3e 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
}
 801d338:	bf00      	nop
 801d33a:	3718      	adds	r7, #24
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}
 801d340:	48000400 	.word	0x48000400
 801d344:	48000800 	.word	0x48000800
 801d348:	48001c00 	.word	0x48001c00

0801d34c <My_Enter_Stop2_Mode_WFI>:

void My_Enter_Stop2_Mode_WFI(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Enter in STOP2 MODE and Wait for Interrupts (WFI)
{
 801d34c:	b580      	push	{r7, lr}
 801d34e:	b082      	sub	sp, #8
 801d350:	af00      	add	r7, sp, #0
 801d352:	6078      	str	r0, [r7, #4]
 801d354:	6039      	str	r1, [r7, #0]

	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801d356:	4a31      	ldr	r2, [pc, #196]	@ (801d41c <My_Enter_Stop2_Mode_WFI+0xd0>)
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Config PVD to provide Interrupt
 801d35c:	4a2f      	ldr	r2, [pc, #188]	@ (801d41c <My_Enter_Stop2_Mode_WFI+0xd0>)
 801d35e:	683b      	ldr	r3, [r7, #0]
 801d360:	6053      	str	r3, [r2, #4]

	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801d362:	482e      	ldr	r0, [pc, #184]	@ (801d41c <My_Enter_Stop2_Mode_WFI+0xd0>)
 801d364:	f7e8 fa3c 	bl	80057e0 <HAL_PWR_ConfigPVD>

	if (my_MX_GPIO_Init_done == 1)
 801d368:	4b2d      	ldr	r3, [pc, #180]	@ (801d420 <My_Enter_Stop2_Mode_WFI+0xd4>)
 801d36a:	781b      	ldrb	r3, [r3, #0]
 801d36c:	2b01      	cmp	r3, #1
 801d36e:	d101      	bne.n	801d374 <My_Enter_Stop2_Mode_WFI+0x28>
	{
		BSP_RADIO_DeInit();											// Deinit the External Radio Amplifier
 801d370:	f7e5 faea 	bl	8002948 <BSP_RADIO_DeInit>
	}

	if (my_SystemClock_Config_done == 1)							// Check if the Clock System has been configured
 801d374:	4b2b      	ldr	r3, [pc, #172]	@ (801d424 <My_Enter_Stop2_Mode_WFI+0xd8>)
 801d376:	781b      	ldrb	r3, [r3, #0]
 801d378:	2b01      	cmp	r3, #1
 801d37a:	d104      	bne.n	801d386 <My_Enter_Stop2_Mode_WFI+0x3a>
	{
		HAL_SuspendTick();											// Suspend Tick increment of System Clock
 801d37c:	f7e5 fbd8 	bl	8002b30 <HAL_SuspendTick>
		__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI); 	// Ensure that MSI is wake-up system clock
 801d380:	2000      	movs	r0, #0
 801d382:	f7fe feec 	bl	801c15e <LL_RCC_SetClkAfterWakeFromStop>
	}

	if((LL_PWR_IsActiveFlag_C1SB() == 0) || (LL_PWR_IsActiveFlag_C2SB() == 0))
 801d386:	f7fe fe95 	bl	801c0b4 <LL_PWR_IsActiveFlag_C1SB>
 801d38a:	4603      	mov	r3, r0
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d004      	beq.n	801d39a <My_Enter_Stop2_Mode_WFI+0x4e>
 801d390:	f7fe fea4 	bl	801c0dc <LL_PWR_IsActiveFlag_C2SB>
 801d394:	4603      	mov	r3, r0
 801d396:	2b00      	cmp	r3, #0
 801d398:	d109      	bne.n	801d3ae <My_Enter_Stop2_Mode_WFI+0x62>
	{
		LL_PWR_ClearFlag_C1STOP_C1STB();			  				// Clear standby and stop flags for CPU1
 801d39a:	f7fe feb3 	bl	801c104 <LL_PWR_ClearFlag_C1STOP_C1STB>
		LL_PWR_ClearFlag_C2STOP_C2STB();							// Clear standby and stop flags for CPU2
 801d39e:	f7fe febd 	bl	801c11c <LL_PWR_ClearFlag_C2STOP_C2STB>
		LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN); 				// Set the lowest low-power mode for CPU2: shutdown mode
 801d3a2:	2007      	movs	r0, #7
 801d3a4:	f7fe fe70 	bl	801c088 <LL_C2_PWR_SetPowerMode>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);						// Set Low-Power mode for CPU1
 801d3a8:	2002      	movs	r0, #2
 801d3aa:	f7fe fe59 	bl	801c060 <LL_PWR_SetPowerMode>
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801d3ae:	2001      	movs	r0, #1
 801d3b0:	f000 f870 	bl	801d494 <My_Interrupts_Manager>
	HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);							// Clear Pending Bit for PVD
 801d3b4:	2001      	movs	r0, #1
 801d3b6:	f7e6 fd84 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);						// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d3ba:	202a      	movs	r0, #42	@ 0x2a
 801d3bc:	f7e6 fd81 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(COMP_IRQn);							// Clear Pending Bit for Comparator
 801d3c0:	2015      	movs	r0, #21
 801d3c2:	f7e6 fd7e 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801d3c6:	4b18      	ldr	r3, [pc, #96]	@ (801d428 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d3cc:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801d3ce:	4b16      	ldr	r3, [pc, #88]	@ (801d428 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3d0:	2207      	movs	r2, #7
 801d3d2:	619a      	str	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801d3d4:	2001      	movs	r0, #1
 801d3d6:	f7e6 fd58 	bl	8003e8a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);								// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801d3da:	202a      	movs	r0, #42	@ 0x2a
 801d3dc:	f7e6 fd55 	bl	8003e8a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPTIM1_IRQn);								// Enable Interrupt for LPTIM1
 801d3e0:	2027      	movs	r0, #39	@ 0x27
 801d3e2:	f7e6 fd52 	bl	8003e8a <HAL_NVIC_EnableIRQ>

	if (__HAL_PWR_GET_FLAG(PWR_CR1_LPR) == 1)						// Check if PWR_CR1_LPR is set (must be 0 in Stop2 Mode)
 801d3e6:	4b10      	ldr	r3, [pc, #64]	@ (801d428 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d3ec:	f003 0301 	and.w	r3, r3, #1
 801d3f0:	2b01      	cmp	r3, #1
 801d3f2:	d105      	bne.n	801d400 <My_Enter_Stop2_Mode_WFI+0xb4>
	{
		CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 							// LPR bit must be cleared to enter stop 2 mode.
 801d3f4:	4b0c      	ldr	r3, [pc, #48]	@ (801d428 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	4a0b      	ldr	r2, [pc, #44]	@ (801d428 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801d3fe:	6013      	str	r3, [r2, #0]
	}

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);					// Enter STOP2 mode and WFI
 801d400:	2001      	movs	r0, #1
 801d402:	f7e8 fb75 	bl	8005af0 <HAL_PWREx_EnterSTOP2Mode>

	if (my_SubghzApp_Init_done == 0)
 801d406:	4b09      	ldr	r3, [pc, #36]	@ (801d42c <My_Enter_Stop2_Mode_WFI+0xe0>)
 801d408:	781b      	ldrb	r3, [r3, #0]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d101      	bne.n	801d412 <My_Enter_Stop2_Mode_WFI+0xc6>
	{
		My_Exit_Stop2_Mode_WFI();									// Exit From Stop2 Mode
 801d40e:	f000 f80f 	bl	801d430 <My_Exit_Stop2_Mode_WFI>
	}
}
 801d412:	bf00      	nop
 801d414:	3708      	adds	r7, #8
 801d416:	46bd      	mov	sp, r7
 801d418:	bd80      	pop	{r7, pc}
 801d41a:	bf00      	nop
 801d41c:	20001be0 	.word	0x20001be0
 801d420:	200008a4 	.word	0x200008a4
 801d424:	2000074c 	.word	0x2000074c
 801d428:	58000400 	.word	0x58000400
 801d42c:	200008a7 	.word	0x200008a7

0801d430 <My_Exit_Stop2_Mode_WFI>:

void My_Exit_Stop2_Mode_WFI(void)	// Exit Stop2 Mode After Interrupt
{
 801d430:	b580      	push	{r7, lr}
 801d432:	af00      	add	r7, sp, #0
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);		// Undervolting
 801d434:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801d438:	f7e8 fa9a 	bl	8005970 <HAL_PWREx_ControlVoltageScaling>
	My_Interrupts_Manager(NVIC_ENABLE);									// Re-Enable Interrupts
 801d43c:	2000      	movs	r0, #0
 801d43e:	f000 f829 	bl	801d494 <My_Interrupts_Manager>
	if (my_SystemClock_Config_done == 1)
 801d442:	4b04      	ldr	r3, [pc, #16]	@ (801d454 <My_Exit_Stop2_Mode_WFI+0x24>)
 801d444:	781b      	ldrb	r3, [r3, #0]
 801d446:	2b01      	cmp	r3, #1
 801d448:	d101      	bne.n	801d44e <My_Exit_Stop2_Mode_WFI+0x1e>
	{
		HAL_ResumeTick();												// Resume Tick Increment
 801d44a:	f7e5 fb7f 	bl	8002b4c <HAL_ResumeTick>
	}
}
 801d44e:	bf00      	nop
 801d450:	bd80      	pop	{r7, pc}
 801d452:	bf00      	nop
 801d454:	2000074c 	.word	0x2000074c

0801d458 <My_Set_PVD>:

void My_Set_PVD(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Sets PVD Threshold and Interrupt Modes
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	b082      	sub	sp, #8
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
 801d460:	6039      	str	r1, [r7, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801d462:	4b0a      	ldr	r3, [pc, #40]	@ (801d48c <My_Set_PVD+0x34>)
 801d464:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d468:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801d46a:	4b08      	ldr	r3, [pc, #32]	@ (801d48c <My_Set_PVD+0x34>)
 801d46c:	2207      	movs	r2, #7
 801d46e:	619a      	str	r2, [r3, #24]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801d470:	4a07      	ldr	r2, [pc, #28]	@ (801d490 <My_Set_PVD+0x38>)
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Set PVD to provide Interrupt
 801d476:	4a06      	ldr	r2, [pc, #24]	@ (801d490 <My_Set_PVD+0x38>)
 801d478:	683b      	ldr	r3, [r7, #0]
 801d47a:	6053      	str	r3, [r2, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801d47c:	4804      	ldr	r0, [pc, #16]	@ (801d490 <My_Set_PVD+0x38>)
 801d47e:	f7e8 f9af 	bl	80057e0 <HAL_PWR_ConfigPVD>
}
 801d482:	bf00      	nop
 801d484:	3708      	adds	r7, #8
 801d486:	46bd      	mov	sp, r7
 801d488:	bd80      	pop	{r7, pc}
 801d48a:	bf00      	nop
 801d48c:	58000400 	.word	0x58000400
 801d490:	20001be0 	.word	0x20001be0

0801d494 <My_Interrupts_Manager>:

	__WFI(); 														// Wait for the Interrupt
}

void My_Interrupts_Manager(My_Interrupts_Manager_td My_Interrupts_Status)	// Enable or Disable IRQ
{
 801d494:	b580      	push	{r7, lr}
 801d496:	b082      	sub	sp, #8
 801d498:	af00      	add	r7, sp, #0
 801d49a:	4603      	mov	r3, r0
 801d49c:	71fb      	strb	r3, [r7, #7]
	switch (My_Interrupts_Status)
 801d49e:	79fb      	ldrb	r3, [r7, #7]
 801d4a0:	2b02      	cmp	r3, #2
 801d4a2:	f000 80aa 	beq.w	801d5fa <My_Interrupts_Manager+0x166>
 801d4a6:	2b02      	cmp	r3, #2
 801d4a8:	f300 80f0 	bgt.w	801d68c <My_Interrupts_Manager+0x1f8>
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d033      	beq.n	801d518 <My_Interrupts_Manager+0x84>
 801d4b0:	2b01      	cmp	r3, #1
 801d4b2:	f040 80eb 	bne.w	801d68c <My_Interrupts_Manager+0x1f8>
	{
	case NVIC_DISABLE:
	{

		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801d4b6:	2001      	movs	r0, #1
 801d4b8:	f7e6 fcf5 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801d4bc:	2003      	movs	r0, #3
 801d4be:	f7e6 fcf2 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d4c2:	2002      	movs	r0, #2
 801d4c4:	f7e6 fcef 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801d4c8:	200f      	movs	r0, #15
 801d4ca:	f7e6 fcec 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801d4ce:	2025      	movs	r0, #37	@ 0x25
 801d4d0:	f7e6 fce9 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801d4d4:	202a      	movs	r0, #42	@ 0x2a
 801d4d6:	f7e6 fce6 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801d4da:	2032      	movs	r0, #50	@ 0x32
 801d4dc:	f7e6 fce3 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801d4e0:	2027      	movs	r0, #39	@ 0x27
 801d4e2:	f7e6 fce0 	bl	8003ea6 <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801d4e6:	2001      	movs	r0, #1
 801d4e8:	f7e6 fceb 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801d4ec:	2003      	movs	r0, #3
 801d4ee:	f7e6 fce8 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d4f2:	2002      	movs	r0, #2
 801d4f4:	f7e6 fce5 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801d4f8:	200f      	movs	r0, #15
 801d4fa:	f7e6 fce2 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801d4fe:	2025      	movs	r0, #37	@ 0x25
 801d500:	f7e6 fcdf 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d504:	202a      	movs	r0, #42	@ 0x2a
 801d506:	f7e6 fcdc 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801d50a:	2032      	movs	r0, #50	@ 0x32
 801d50c:	f7e6 fcd9 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801d510:	2027      	movs	r0, #39	@ 0x27
 801d512:	f7e6 fcd6 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>

		break;
 801d516:	e0ba      	b.n	801d68e <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_ENABLE:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801d518:	2001      	movs	r0, #1
 801d51a:	f7e6 fcc4 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801d51e:	2003      	movs	r0, #3
 801d520:	f7e6 fcc1 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d524:	2002      	movs	r0, #2
 801d526:	f7e6 fcbe 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801d52a:	200f      	movs	r0, #15
 801d52c:	f7e6 fcbb 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801d530:	2025      	movs	r0, #37	@ 0x25
 801d532:	f7e6 fcb8 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801d536:	202a      	movs	r0, #42	@ 0x2a
 801d538:	f7e6 fcb5 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801d53c:	2032      	movs	r0, #50	@ 0x32
 801d53e:	f7e6 fcb2 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801d542:	2027      	movs	r0, #39	@ 0x27
 801d544:	f7e6 fcaf 	bl	8003ea6 <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801d548:	2001      	movs	r0, #1
 801d54a:	f7e6 fcba 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801d54e:	2003      	movs	r0, #3
 801d550:	f7e6 fcb7 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d554:	2002      	movs	r0, #2
 801d556:	f7e6 fcb4 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801d55a:	200f      	movs	r0, #15
 801d55c:	f7e6 fcb1 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801d560:	2025      	movs	r0, #37	@ 0x25
 801d562:	f7e6 fcae 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d566:	202a      	movs	r0, #42	@ 0x2a
 801d568:	f7e6 fcab 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801d56c:	2032      	movs	r0, #50	@ 0x32
 801d56e:	f7e6 fca8 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801d572:	2027      	movs	r0, #39	@ 0x27
 801d574:	f7e6 fca5 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);							// Set Interrupt Priority
 801d578:	2200      	movs	r2, #0
 801d57a:	2100      	movs	r1, #0
 801d57c:	2001      	movs	r0, #1
 801d57e:	f7e6 fc6a 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);							// Set Interrupt Priority
 801d582:	2200      	movs	r2, #0
 801d584:	2101      	movs	r1, #1
 801d586:	2003      	movs	r0, #3
 801d588:	f7e6 fc65 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 1, 0);			// Set Interrupt Priority
 801d58c:	2200      	movs	r2, #0
 801d58e:	2101      	movs	r1, #1
 801d590:	2002      	movs	r0, #2
 801d592:	f7e6 fc60 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);						// Set Interrupt Priority
 801d596:	2200      	movs	r2, #0
 801d598:	2101      	movs	r1, #1
 801d59a:	200f      	movs	r0, #15
 801d59c:	f7e6 fc5b 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);							// Set Interrupt Priority
 801d5a0:	2200      	movs	r2, #0
 801d5a2:	2101      	movs	r1, #1
 801d5a4:	2025      	movs	r0, #37	@ 0x25
 801d5a6:	f7e6 fc56 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);							// Set Interrupt Priority
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	2101      	movs	r1, #1
 801d5ae:	202a      	movs	r0, #42	@ 0x2a
 801d5b0:	f7e6 fc51 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 1, 0);						// Set Interrupt Priority
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	2101      	movs	r1, #1
 801d5b8:	2032      	movs	r0, #50	@ 0x32
 801d5ba:	f7e6 fc4c 	bl	8003e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);							// Set Interrupt Priority
 801d5be:	2200      	movs	r2, #0
 801d5c0:	2101      	movs	r1, #1
 801d5c2:	2027      	movs	r0, #39	@ 0x27
 801d5c4:	f7e6 fc47 	bl	8003e56 <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801d5c8:	2001      	movs	r0, #1
 801d5ca:	f7e6 fc5e 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801d5ce:	2003      	movs	r0, #3
 801d5d0:	f7e6 fc5b 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d5d4:	2002      	movs	r0, #2
 801d5d6:	f7e6 fc58 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d5da:	200f      	movs	r0, #15
 801d5dc:	f7e6 fc55 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801d5e0:	2025      	movs	r0, #37	@ 0x25
 801d5e2:	f7e6 fc52 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801d5e6:	202a      	movs	r0, #42	@ 0x2a
 801d5e8:	f7e6 fc4f 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d5ec:	2032      	movs	r0, #50	@ 0x32
 801d5ee:	f7e6 fc4c 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801d5f2:	2027      	movs	r0, #39	@ 0x27
 801d5f4:	f7e6 fc49 	bl	8003e8a <HAL_NVIC_EnableIRQ>

		break;
 801d5f8:	e049      	b.n	801d68e <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_CLEAR:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801d5fa:	2001      	movs	r0, #1
 801d5fc:	f7e6 fc53 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801d600:	2003      	movs	r0, #3
 801d602:	f7e6 fc50 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d606:	2002      	movs	r0, #2
 801d608:	f7e6 fc4d 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801d60c:	200f      	movs	r0, #15
 801d60e:	f7e6 fc4a 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801d612:	2025      	movs	r0, #37	@ 0x25
 801d614:	f7e6 fc47 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801d618:	202a      	movs	r0, #42	@ 0x2a
 801d61a:	f7e6 fc44 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801d61e:	2032      	movs	r0, #50	@ 0x32
 801d620:	f7e6 fc41 	bl	8003ea6 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801d624:	2027      	movs	r0, #39	@ 0x27
 801d626:	f7e6 fc3e 	bl	8003ea6 <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801d62a:	2001      	movs	r0, #1
 801d62c:	f7e6 fc49 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801d630:	2003      	movs	r0, #3
 801d632:	f7e6 fc46 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d636:	2002      	movs	r0, #2
 801d638:	f7e6 fc43 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801d63c:	200f      	movs	r0, #15
 801d63e:	f7e6 fc40 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801d642:	2025      	movs	r0, #37	@ 0x25
 801d644:	f7e6 fc3d 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d648:	202a      	movs	r0, #42	@ 0x2a
 801d64a:	f7e6 fc3a 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801d64e:	2032      	movs	r0, #50	@ 0x32
 801d650:	f7e6 fc37 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801d654:	2027      	movs	r0, #39	@ 0x27
 801d656:	f7e6 fc34 	bl	8003ec2 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801d65a:	2001      	movs	r0, #1
 801d65c:	f7e6 fc15 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801d660:	2003      	movs	r0, #3
 801d662:	f7e6 fc12 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d666:	2002      	movs	r0, #2
 801d668:	f7e6 fc0f 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d66c:	200f      	movs	r0, #15
 801d66e:	f7e6 fc0c 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801d672:	2025      	movs	r0, #37	@ 0x25
 801d674:	f7e6 fc09 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801d678:	202a      	movs	r0, #42	@ 0x2a
 801d67a:	f7e6 fc06 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d67e:	2032      	movs	r0, #50	@ 0x32
 801d680:	f7e6 fc03 	bl	8003e8a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801d684:	2027      	movs	r0, #39	@ 0x27
 801d686:	f7e6 fc00 	bl	8003e8a <HAL_NVIC_EnableIRQ>

		break;
 801d68a:	e000      	b.n	801d68e <My_Interrupts_Manager+0x1fa>
	}

	default:
	{
		break;
 801d68c:	bf00      	nop
	}

	}
}
 801d68e:	bf00      	nop
 801d690:	3708      	adds	r7, #8
 801d692:	46bd      	mov	sp, r7
 801d694:	bd80      	pop	{r7, pc}
	...

0801d698 <My_Set_RTC_Alarm_A>:

void My_Set_RTC_Alarm_A(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801d698:	b580      	push	{r7, lr}
 801d69a:	b082      	sub	sp, #8
 801d69c:	af00      	add	r7, sp, #0
 801d69e:	603b      	str	r3, [r7, #0]
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	71fb      	strb	r3, [r7, #7]
 801d6a4:	460b      	mov	r3, r1
 801d6a6:	71bb      	strb	r3, [r7, #6]
 801d6a8:	4613      	mov	r3, r2
 801d6aa:	717b      	strb	r3, [r7, #5]

	/* This function Sets the RTC ALARM A Timer */

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	491f      	ldr	r1, [pc, #124]	@ (801d72c <My_Set_RTC_Alarm_A+0x94>)
 801d6b0:	481f      	ldr	r0, [pc, #124]	@ (801d730 <My_Set_RTC_Alarm_A+0x98>)
 801d6b2:	f7e9 fe9b 	bl	80073ec <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours + my_hours;
 801d6b6:	4b1d      	ldr	r3, [pc, #116]	@ (801d72c <My_Set_RTC_Alarm_A+0x94>)
 801d6b8:	781a      	ldrb	r2, [r3, #0]
 801d6ba:	79fb      	ldrb	r3, [r7, #7]
 801d6bc:	4413      	add	r3, r2
 801d6be:	b2da      	uxtb	r2, r3
 801d6c0:	4b1c      	ldr	r3, [pc, #112]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d6c2:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = my_minutes + sTime.Minutes;
 801d6c4:	4b19      	ldr	r3, [pc, #100]	@ (801d72c <My_Set_RTC_Alarm_A+0x94>)
 801d6c6:	785a      	ldrb	r2, [r3, #1]
 801d6c8:	79bb      	ldrb	r3, [r7, #6]
 801d6ca:	4413      	add	r3, r2
 801d6cc:	b2da      	uxtb	r2, r3
 801d6ce:	4b19      	ldr	r3, [pc, #100]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d6d0:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = my_seconds + sTime.Seconds;
 801d6d2:	4b16      	ldr	r3, [pc, #88]	@ (801d72c <My_Set_RTC_Alarm_A+0x94>)
 801d6d4:	789a      	ldrb	r2, [r3, #2]
 801d6d6:	797b      	ldrb	r3, [r7, #5]
 801d6d8:	4413      	add	r3, r2
 801d6da:	b2da      	uxtb	r2, r3
 801d6dc:	4b15      	ldr	r3, [pc, #84]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d6de:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds + sTime.SubSeconds;
 801d6e0:	4b12      	ldr	r3, [pc, #72]	@ (801d72c <My_Set_RTC_Alarm_A+0x94>)
 801d6e2:	685a      	ldr	r2, [r3, #4]
 801d6e4:	683b      	ldr	r3, [r7, #0]
 801d6e6:	4413      	add	r3, r2
 801d6e8:	4a12      	ldr	r2, [pc, #72]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d6ea:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801d6ec:	4b11      	ldr	r3, [pc, #68]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d6ee:	2200      	movs	r2, #0
 801d6f0:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801d6f2:	4b10      	ldr	r3, [pc, #64]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d6f4:	2200      	movs	r2, #0
 801d6f6:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801d6f8:	4b0e      	ldr	r3, [pc, #56]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d6fa:	2200      	movs	r2, #0
 801d6fc:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801d6fe:	4b0d      	ldr	r3, [pc, #52]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d700:	2200      	movs	r2, #0
 801d702:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801d704:	4b0b      	ldr	r3, [pc, #44]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d706:	2200      	movs	r2, #0
 801d708:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801d70a:	4b0a      	ldr	r3, [pc, #40]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d70c:	2201      	movs	r2, #1
 801d70e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 801d712:	4b08      	ldr	r3, [pc, #32]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d718:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);			// Set RTC Alarm Time with Interrupt
 801d71a:	2200      	movs	r2, #0
 801d71c:	4905      	ldr	r1, [pc, #20]	@ (801d734 <My_Set_RTC_Alarm_A+0x9c>)
 801d71e:	4804      	ldr	r0, [pc, #16]	@ (801d730 <My_Set_RTC_Alarm_A+0x98>)
 801d720:	f7e9 ff4c 	bl	80075bc <HAL_RTC_SetAlarm_IT>
}
 801d724:	bf00      	nop
 801d726:	3708      	adds	r7, #8
 801d728:	46bd      	mov	sp, r7
 801d72a:	bd80      	pop	{r7, pc}
 801d72c:	20001c00 	.word	0x20001c00
 801d730:	20000750 	.word	0x20000750
 801d734:	20001c14 	.word	0x20001c14

0801d738 <My_Set_RTC_Alarm_B>:

void My_Set_RTC_Alarm_B(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	b082      	sub	sp, #8
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	603b      	str	r3, [r7, #0]
 801d740:	4603      	mov	r3, r0
 801d742:	71fb      	strb	r3, [r7, #7]
 801d744:	460b      	mov	r3, r1
 801d746:	71bb      	strb	r3, [r7, #6]
 801d748:	4613      	mov	r3, r2
 801d74a:	717b      	strb	r3, [r7, #5]
	/* Set the RTC ALARM B Timer */

	sTime.Hours = 0x00; 														// Config Time Parameter RTC Struct Init
 801d74c:	4b22      	ldr	r3, [pc, #136]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d74e:	2200      	movs	r2, #0
 801d750:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x00;
 801d752:	4b21      	ldr	r3, [pc, #132]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d754:	2200      	movs	r2, #0
 801d756:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x00;
 801d758:	4b1f      	ldr	r3, [pc, #124]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d75a:	2200      	movs	r2, #0
 801d75c:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x00;
 801d75e:	4b1e      	ldr	r3, [pc, #120]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d760:	2200      	movs	r2, #0
 801d762:	605a      	str	r2, [r3, #4]
	sTime.SecondFraction = 0x00;
 801d764:	4b1c      	ldr	r3, [pc, #112]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d766:	2200      	movs	r2, #0
 801d768:	609a      	str	r2, [r3, #8]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801d76a:	4b1b      	ldr	r3, [pc, #108]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d76c:	2200      	movs	r2, #0
 801d76e:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801d770:	4b19      	ldr	r3, [pc, #100]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d772:	2200      	movs	r2, #0
 801d774:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmTime.Hours = my_hours;											// Config Time Parameter of RTC_Alarm Struct
 801d776:	4a19      	ldr	r2, [pc, #100]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d778:	79fb      	ldrb	r3, [r7, #7]
 801d77a:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = my_minutes;
 801d77c:	4a17      	ldr	r2, [pc, #92]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d77e:	79bb      	ldrb	r3, [r7, #6]
 801d780:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = my_seconds;
 801d782:	4a16      	ldr	r2, [pc, #88]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d784:	797b      	ldrb	r3, [r7, #5]
 801d786:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds;
 801d788:	4a14      	ldr	r2, [pc, #80]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d78a:	683b      	ldr	r3, [r7, #0]
 801d78c:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801d78e:	4b13      	ldr	r3, [pc, #76]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d790:	2200      	movs	r2, #0
 801d792:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801d794:	4b11      	ldr	r3, [pc, #68]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d796:	2200      	movs	r2, #0
 801d798:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801d79a:	4b10      	ldr	r3, [pc, #64]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d79c:	2200      	movs	r2, #0
 801d79e:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801d7a0:	4b0e      	ldr	r3, [pc, #56]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d7a2:	2200      	movs	r2, #0
 801d7a4:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801d7a6:	4b0d      	ldr	r3, [pc, #52]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d7a8:	2200      	movs	r2, #0
 801d7aa:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801d7ac:	4b0b      	ldr	r3, [pc, #44]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d7ae:	2201      	movs	r2, #1
 801d7b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_B;
 801d7b4:	4b09      	ldr	r3, [pc, #36]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d7b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d7ba:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);								// Set RTC Time (this Command needed for Set Alarm)
 801d7bc:	2200      	movs	r2, #0
 801d7be:	4906      	ldr	r1, [pc, #24]	@ (801d7d8 <My_Set_RTC_Alarm_B+0xa0>)
 801d7c0:	4807      	ldr	r0, [pc, #28]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa8>)
 801d7c2:	f7e9 fd77 	bl	80072b4 <HAL_RTC_SetTime>
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);						// Set RTC Alarm Time with Interrupt
 801d7c6:	2200      	movs	r2, #0
 801d7c8:	4904      	ldr	r1, [pc, #16]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa4>)
 801d7ca:	4805      	ldr	r0, [pc, #20]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa8>)
 801d7cc:	f7e9 fef6 	bl	80075bc <HAL_RTC_SetAlarm_IT>
}
 801d7d0:	bf00      	nop
 801d7d2:	3708      	adds	r7, #8
 801d7d4:	46bd      	mov	sp, r7
 801d7d6:	bd80      	pop	{r7, pc}
 801d7d8:	20001c00 	.word	0x20001c00
 801d7dc:	20001c14 	.word	0x20001c14
 801d7e0:	20000750 	.word	0x20000750

0801d7e4 <My_SystemClock_Config>:

void My_SystemClock_Config(void)
{
 801d7e4:	b580      	push	{r7, lr}
 801d7e6:	b09a      	sub	sp, #104	@ 0x68
 801d7e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801d7ea:	f107 0320 	add.w	r3, r7, #32
 801d7ee:	2248      	movs	r2, #72	@ 0x48
 801d7f0:	2100      	movs	r1, #0
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	f002 ffcc 	bl	8020790 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801d7f8:	1d3b      	adds	r3, r7, #4
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	601a      	str	r2, [r3, #0]
 801d7fe:	605a      	str	r2, [r3, #4]
 801d800:	609a      	str	r2, [r3, #8]
 801d802:	60da      	str	r2, [r3, #12]
 801d804:	611a      	str	r2, [r3, #16]
 801d806:	615a      	str	r2, [r3, #20]
 801d808:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 801d80a:	f7e7 ffdb 	bl	80057c4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801d80e:	2000      	movs	r0, #0
 801d810:	f7fe fc90 	bl	801c134 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801d814:	4b1e      	ldr	r3, [pc, #120]	@ (801d890 <My_SystemClock_Config+0xac>)
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801d81c:	4a1c      	ldr	r2, [pc, #112]	@ (801d890 <My_SystemClock_Config+0xac>)
 801d81e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801d822:	6013      	str	r3, [r2, #0]
 801d824:	4b1a      	ldr	r3, [pc, #104]	@ (801d890 <My_SystemClock_Config+0xac>)
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801d82c:	603b      	str	r3, [r7, #0]
 801d82e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 801d830:	2324      	movs	r3, #36	@ 0x24
 801d832:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801d834:	2381      	movs	r3, #129	@ 0x81
 801d836:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801d838:	2301      	movs	r3, #1
 801d83a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 801d83c:	2300      	movs	r3, #0
 801d83e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;				// Set Clock Frequency Below 16 MHz to allow Undervolting
 801d840:	2370      	movs	r3, #112	@ 0x70
 801d842:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801d844:	2300      	movs	r3, #0
 801d846:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d848:	f107 0320 	add.w	r3, r7, #32
 801d84c:	4618      	mov	r0, r3
 801d84e:	f7e8 fc53 	bl	80060f8 <HAL_RCC_OscConfig>
 801d852:	4603      	mov	r3, r0
 801d854:	2b00      	cmp	r3, #0
 801d856:	d001      	beq.n	801d85c <My_SystemClock_Config+0x78>
	{
		Error_Handler();
 801d858:	f7e3 fde8 	bl	800142c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 801d85c:	234f      	movs	r3, #79	@ 0x4f
 801d85e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 801d860:	2300      	movs	r3, #0
 801d862:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d864:	2300      	movs	r3, #0
 801d866:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801d868:	2300      	movs	r3, #0
 801d86a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d86c:	2300      	movs	r3, #0
 801d86e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 801d870:	2300      	movs	r3, #0
 801d872:	61fb      	str	r3, [r7, #28]


	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801d874:	1d3b      	adds	r3, r7, #4
 801d876:	2102      	movs	r1, #2
 801d878:	4618      	mov	r0, r3
 801d87a:	f7e8 ffbf 	bl	80067fc <HAL_RCC_ClockConfig>
 801d87e:	4603      	mov	r3, r0
 801d880:	2b00      	cmp	r3, #0
 801d882:	d001      	beq.n	801d888 <My_SystemClock_Config+0xa4>
	{
		Error_Handler();
 801d884:	f7e3 fdd2 	bl	800142c <Error_Handler>
	}
}
 801d888:	bf00      	nop
 801d88a:	3768      	adds	r7, #104	@ 0x68
 801d88c:	46bd      	mov	sp, r7
 801d88e:	bd80      	pop	{r7, pc}
 801d890:	58000400 	.word	0x58000400

0801d894 <My_Trise_Meas>:
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOBEN);
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOCEN);
}

void My_Trise_Meas(void)
{
 801d894:	b580      	push	{r7, lr}
 801d896:	af00      	add	r7, sp, #0
	/* This Function measures the charging time (Trise) during the Energy Harvesting State (EHS) from the last SMS State to the following RTS State */

	my_Trise_time_stop = HAL_LPTIM_ReadCounter(&hlptim1);// Stop Measuring Trise
 801d898:	481a      	ldr	r0, [pc, #104]	@ (801d904 <My_Trise_Meas+0x70>)
 801d89a:	f000 fc65 	bl	801e168 <HAL_LPTIM_ReadCounter>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	b29a      	uxth	r2, r3
 801d8a2:	4b19      	ldr	r3, [pc, #100]	@ (801d908 <My_Trise_Meas+0x74>)
 801d8a4:	801a      	strh	r2, [r3, #0]

	if (my_Trise_time_stop > my_Trise_time_start)
 801d8a6:	4b18      	ldr	r3, [pc, #96]	@ (801d908 <My_Trise_Meas+0x74>)
 801d8a8:	881a      	ldrh	r2, [r3, #0]
 801d8aa:	4b18      	ldr	r3, [pc, #96]	@ (801d90c <My_Trise_Meas+0x78>)
 801d8ac:	881b      	ldrh	r3, [r3, #0]
 801d8ae:	429a      	cmp	r2, r3
 801d8b0:	d908      	bls.n	801d8c4 <My_Trise_Meas+0x30>
	{
		my_Trise_time = my_Trise_time_stop - my_Trise_time_start;
 801d8b2:	4b15      	ldr	r3, [pc, #84]	@ (801d908 <My_Trise_Meas+0x74>)
 801d8b4:	881a      	ldrh	r2, [r3, #0]
 801d8b6:	4b15      	ldr	r3, [pc, #84]	@ (801d90c <My_Trise_Meas+0x78>)
 801d8b8:	881b      	ldrh	r3, [r3, #0]
 801d8ba:	1ad3      	subs	r3, r2, r3
 801d8bc:	b29a      	uxth	r2, r3
 801d8be:	4b14      	ldr	r3, [pc, #80]	@ (801d910 <My_Trise_Meas+0x7c>)
 801d8c0:	801a      	strh	r2, [r3, #0]
		else
		{
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
		}
	}
}
 801d8c2:	e01c      	b.n	801d8fe <My_Trise_Meas+0x6a>
		if (my_Cmode == EOC)
 801d8c4:	4b13      	ldr	r3, [pc, #76]	@ (801d914 <My_Trise_Meas+0x80>)
 801d8c6:	781b      	ldrb	r3, [r3, #0]
 801d8c8:	2b02      	cmp	r3, #2
 801d8ca:	d10c      	bne.n	801d8e6 <My_Trise_Meas+0x52>
			my_Trise_time = my_Trise_time_stop + (T_ESW + T_SMW) - my_Trise_time_start;
 801d8cc:	4b0e      	ldr	r3, [pc, #56]	@ (801d908 <My_Trise_Meas+0x74>)
 801d8ce:	881a      	ldrh	r2, [r3, #0]
 801d8d0:	4b0e      	ldr	r3, [pc, #56]	@ (801d90c <My_Trise_Meas+0x78>)
 801d8d2:	881b      	ldrh	r3, [r3, #0]
 801d8d4:	1ad3      	subs	r3, r2, r3
 801d8d6:	b29b      	uxth	r3, r3
 801d8d8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 801d8dc:	3310      	adds	r3, #16
 801d8de:	b29a      	uxth	r2, r3
 801d8e0:	4b0b      	ldr	r3, [pc, #44]	@ (801d910 <My_Trise_Meas+0x7c>)
 801d8e2:	801a      	strh	r2, [r3, #0]
}
 801d8e4:	e00b      	b.n	801d8fe <My_Trise_Meas+0x6a>
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
 801d8e6:	4b08      	ldr	r3, [pc, #32]	@ (801d908 <My_Trise_Meas+0x74>)
 801d8e8:	881a      	ldrh	r2, [r3, #0]
 801d8ea:	4b08      	ldr	r3, [pc, #32]	@ (801d90c <My_Trise_Meas+0x78>)
 801d8ec:	881b      	ldrh	r3, [r3, #0]
 801d8ee:	1ad3      	subs	r3, r2, r3
 801d8f0:	b29b      	uxth	r3, r3
 801d8f2:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 801d8f6:	3308      	adds	r3, #8
 801d8f8:	b29a      	uxth	r2, r3
 801d8fa:	4b05      	ldr	r3, [pc, #20]	@ (801d910 <My_Trise_Meas+0x7c>)
 801d8fc:	801a      	strh	r2, [r3, #0]
}
 801d8fe:	bf00      	nop
 801d900:	bd80      	pop	{r7, pc}
 801d902:	bf00      	nop
 801d904:	20001b40 	.word	0x20001b40
 801d908:	20001bc4 	.word	0x20001bc4
 801d90c:	20001bc2 	.word	0x20001bc2
 801d910:	20001bc6 	.word	0x20001bc6
 801d914:	20001bea 	.word	0x20001bea

0801d918 <My_PVD_Delay>:

void My_PVD_Delay(void)
{
 801d918:	b580      	push	{r7, lr}
 801d91a:	af00      	add	r7, sp, #0
	/* This Function creates a Delay to allow the PVD to settle */

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); 	// Deactivate the RTC Alarm A
 801d91c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d920:	4808      	ldr	r0, [pc, #32]	@ (801d944 <My_PVD_Delay+0x2c>)
 801d922:	f7e9 ff57 	bl	80077d4 <HAL_RTC_DeactivateAlarm>

	My_Set_RTC_Alarm_A								// Sets the RTC Alarm A Timer to create a Delay of time T_Delay_PVD
 801d926:	2300      	movs	r3, #0
 801d928:	2202      	movs	r2, #2
 801d92a:	2100      	movs	r1, #0
 801d92c:	2000      	movs	r0, #0
 801d92e:	f7ff feb3 	bl	801d698 <My_Set_RTC_Alarm_A>
			T_Delay_PVD_hours,
			T_Delay_PVD_minutes,
			T_Delay_PVD_seconds,
			T_Delay_PVD_subseconds
	);
	__WFI(); 										// Wait for the Interrupt
 801d932:	bf30      	wfi

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);   	// Deactivate the RTC Alarm A
 801d934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d938:	4802      	ldr	r0, [pc, #8]	@ (801d944 <My_PVD_Delay+0x2c>)
 801d93a:	f7e9 ff4b 	bl	80077d4 <HAL_RTC_DeactivateAlarm>
}
 801d93e:	bf00      	nop
 801d940:	bd80      	pop	{r7, pc}
 801d942:	bf00      	nop
 801d944:	20000750 	.word	0x20000750

0801d948 <My_PS_Detection>:

void My_PS_Detection(void)
{
 801d948:	b580      	push	{r7, lr}
 801d94a:	af00      	add	r7, sp, #0
	My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);  	  					// Configures PVD at the Highest Voltage and Normal Mode
 801d94c:	2100      	movs	r1, #0
 801d94e:	200c      	movs	r0, #12
 801d950:	f7ff fd82 	bl	801d458 <My_Set_PVD>

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)							// If VDD is > 2.9 Volt and and Internal Reference is Ready
 801d954:	4b0b      	ldr	r3, [pc, #44]	@ (801d984 <My_PS_Detection+0x3c>)
 801d956:	695b      	ldr	r3, [r3, #20]
 801d958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d103      	bne.n	801d968 <My_PS_Detection+0x20>
	{
		my_Current_State = PSS;											// System is Supplied by a Power Supply with voltage > 3.0 V
 801d960:	4b09      	ldr	r3, [pc, #36]	@ (801d988 <My_PS_Detection+0x40>)
 801d962:	2201      	movs	r2, #1
 801d964:	701a      	strb	r2, [r3, #0]
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
//		My_Enter_Stop2_Mode_WFI(V2P5, PWR_PVD_MODE_IT_RISING);
	}
}
 801d966:	e00a      	b.n	801d97e <My_PS_Detection+0x36>
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
 801d968:	4b07      	ldr	r3, [pc, #28]	@ (801d988 <My_PS_Detection+0x40>)
 801d96a:	2203      	movs	r2, #3
 801d96c:	701a      	strb	r2, [r3, #0]
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
 801d96e:	4b07      	ldr	r3, [pc, #28]	@ (801d98c <My_PS_Detection+0x44>)
 801d970:	2202      	movs	r2, #2
 801d972:	701a      	strb	r2, [r3, #0]
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
 801d974:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801d978:	200c      	movs	r0, #12
 801d97a:	f7ff fce7 	bl	801d34c <My_Enter_Stop2_Mode_WFI>
}
 801d97e:	bf00      	nop
 801d980:	bd80      	pop	{r7, pc}
 801d982:	bf00      	nop
 801d984:	58000400 	.word	0x58000400
 801d988:	20001be9 	.word	0x20001be9
 801d98c:	20000638 	.word	0x20000638

0801d990 <My_VDD_to_ES_Switch>:


#if STEVAL_HARVEST1
void My_VDD_to_ES_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and ES net
{
 801d990:	b580      	push	{r7, lr}
 801d992:	b08c      	sub	sp, #48	@ 0x30
 801d994:	af00      	add	r7, sp, #0
 801d996:	4603      	mov	r3, r0
 801d998:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d99a:	2001      	movs	r0, #1
 801d99c:	f7fe fbf2 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d9a0:	2002      	movs	r0, #2
 801d9a2:	f7fe fbef 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d9a6:	2004      	movs	r0, #4
 801d9a8:	f7fe fbec 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d9ac:	2080      	movs	r0, #128	@ 0x80
 801d9ae:	f7fe fbe9 	bl	801c184 <LL_AHB2_GRP1_EnableClock>

	if (mode == Switch_OPEN)
 801d9b2:	79fb      	ldrb	r3, [r7, #7]
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d11d      	bne.n	801d9f4 <My_VDD_to_ES_Switch+0x64>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d9b8:	f107 031c 	add.w	r3, r7, #28
 801d9bc:	2200      	movs	r2, #0
 801d9be:	601a      	str	r2, [r3, #0]
 801d9c0:	605a      	str	r2, [r3, #4]
 801d9c2:	609a      	str	r2, [r3, #8]
 801d9c4:	60da      	str	r2, [r3, #12]
 801d9c6:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d9c8:	2303      	movs	r3, #3
 801d9ca:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801d9d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801d9d4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801d9d6:	f107 031c 	add.w	r3, r7, #28
 801d9da:	4619      	mov	r1, r3
 801d9dc:	4829      	ldr	r0, [pc, #164]	@ (801da84 <My_VDD_to_ES_Switch+0xf4>)
 801d9de:	f7e6 fe97 	bl	8004710 <HAL_GPIO_Init>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801d9e2:	f244 0318 	movw	r3, #16408	@ 0x4018
 801d9e6:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801d9e8:	f107 031c 	add.w	r3, r7, #28
 801d9ec:	4619      	mov	r1, r3
 801d9ee:	4826      	ldr	r0, [pc, #152]	@ (801da88 <My_VDD_to_ES_Switch+0xf8>)
 801d9f0:	f7e6 fe8e 	bl	8004710 <HAL_GPIO_Init>
	}

	if (mode == Switch_CLOSED)
 801d9f4:	79fb      	ldrb	r3, [r7, #7]
 801d9f6:	2b01      	cmp	r3, #1
 801d9f8:	d133      	bne.n	801da62 <My_VDD_to_ES_Switch+0xd2>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d9fa:	f107 0308 	add.w	r3, r7, #8
 801d9fe:	2200      	movs	r2, #0
 801da00:	601a      	str	r2, [r3, #0]
 801da02:	605a      	str	r2, [r3, #4]
 801da04:	609a      	str	r2, [r3, #8]
 801da06:	60da      	str	r2, [r3, #12]
 801da08:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801da0a:	2301      	movs	r3, #1
 801da0c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da0e:	2300      	movs	r3, #0
 801da10:	613b      	str	r3, [r7, #16]

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801da12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801da16:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801da18:	f107 0308 	add.w	r3, r7, #8
 801da1c:	4619      	mov	r1, r3
 801da1e:	4819      	ldr	r0, [pc, #100]	@ (801da84 <My_VDD_to_ES_Switch+0xf4>)
 801da20:	f7e6 fe76 	bl	8004710 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortC, ES_Pin4, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin4 to Vdd
 801da24:	2201      	movs	r2, #1
 801da26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801da2a:	4816      	ldr	r0, [pc, #88]	@ (801da84 <My_VDD_to_ES_Switch+0xf4>)
 801da2c:	f7e7 f89e 	bl	8004b6c <HAL_GPIO_WritePin>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801da30:	f244 0318 	movw	r3, #16408	@ 0x4018
 801da34:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801da36:	f107 0308 	add.w	r3, r7, #8
 801da3a:	4619      	mov	r1, r3
 801da3c:	4812      	ldr	r0, [pc, #72]	@ (801da88 <My_VDD_to_ES_Switch+0xf8>)
 801da3e:	f7e6 fe67 	bl	8004710 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin1, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin1 to Vdd
 801da42:	2201      	movs	r2, #1
 801da44:	2108      	movs	r1, #8
 801da46:	4810      	ldr	r0, [pc, #64]	@ (801da88 <My_VDD_to_ES_Switch+0xf8>)
 801da48:	f7e7 f890 	bl	8004b6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin2, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin2 to Vdd
 801da4c:	2201      	movs	r2, #1
 801da4e:	2110      	movs	r1, #16
 801da50:	480d      	ldr	r0, [pc, #52]	@ (801da88 <My_VDD_to_ES_Switch+0xf8>)
 801da52:	f7e7 f88b 	bl	8004b6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin3, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin3 to Vdd
 801da56:	2201      	movs	r2, #1
 801da58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801da5c:	480a      	ldr	r0, [pc, #40]	@ (801da88 <My_VDD_to_ES_Switch+0xf8>)
 801da5e:	f7e7 f885 	bl	8004b6c <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801da62:	2001      	movs	r0, #1
 801da64:	f7fe fba6 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801da68:	2002      	movs	r0, #2
 801da6a:	f7fe fba3 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801da6e:	2004      	movs	r0, #4
 801da70:	f7fe fba0 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801da74:	2080      	movs	r0, #128	@ 0x80
 801da76:	f7fe fb9d 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
}
 801da7a:	bf00      	nop
 801da7c:	3730      	adds	r7, #48	@ 0x30
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}
 801da82:	bf00      	nop
 801da84:	48000800 	.word	0x48000800
 801da88:	48000400 	.word	0x48000400

0801da8c <My_VDD_to_VDDS2_Switch>:
	__HAL_RCC_GPIOC_CLK_DISABLE();
	__HAL_RCC_GPIOH_CLK_DISABLE();
}

void My_VDD_to_VDDS2_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and VDDS2
{
 801da8c:	b580      	push	{r7, lr}
 801da8e:	b088      	sub	sp, #32
 801da90:	af00      	add	r7, sp, #0
 801da92:	4603      	mov	r3, r0
 801da94:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801da96:	2001      	movs	r0, #1
 801da98:	f7fe fb74 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801da9c:	2002      	movs	r0, #2
 801da9e:	f7fe fb71 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801daa2:	2004      	movs	r0, #4
 801daa4:	f7fe fb6e 	bl	801c184 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801daa8:	2080      	movs	r0, #128	@ 0x80
 801daaa:	f7fe fb6b 	bl	801c184 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801daae:	f107 030c 	add.w	r3, r7, #12
 801dab2:	2200      	movs	r2, #0
 801dab4:	601a      	str	r2, [r3, #0]
 801dab6:	605a      	str	r2, [r3, #4]
 801dab8:	609a      	str	r2, [r3, #8]
 801daba:	60da      	str	r2, [r3, #12]
 801dabc:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dabe:	2301      	movs	r3, #1
 801dac0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dac2:	2300      	movs	r3, #0
 801dac4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dac6:	2303      	movs	r3, #3
 801dac8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin =  VDDS2_Pin;
 801daca:	2310      	movs	r3, #16
 801dacc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(VDDS2_Port, &GPIO_InitStruct);
 801dace:	f107 030c 	add.w	r3, r7, #12
 801dad2:	4619      	mov	r1, r3
 801dad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801dad8:	f7e6 fe1a 	bl	8004710 <HAL_GPIO_Init>

	if (mode == Switch_CLOSED)
 801dadc:	79fb      	ldrb	r3, [r7, #7]
 801dade:	2b01      	cmp	r3, #1
 801dae0:	d106      	bne.n	801daf0 <My_VDD_to_VDDS2_Switch+0x64>
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_SET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801dae2:	2201      	movs	r2, #1
 801dae4:	2110      	movs	r1, #16
 801dae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801daea:	f7e7 f83f 	bl	8004b6c <HAL_GPIO_WritePin>
 801daee:	e005      	b.n	801dafc <My_VDD_to_VDDS2_Switch+0x70>
	}
	else
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_RESET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801daf0:	2200      	movs	r2, #0
 801daf2:	2110      	movs	r1, #16
 801daf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801daf8:	f7e7 f838 	bl	8004b6c <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801dafc:	2001      	movs	r0, #1
 801dafe:	f7fe fb59 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801db02:	2002      	movs	r0, #2
 801db04:	f7fe fb56 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801db08:	2004      	movs	r0, #4
 801db0a:	f7fe fb53 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801db0e:	2080      	movs	r0, #128	@ 0x80
 801db10:	f7fe fb50 	bl	801c1b4 <LL_AHB2_GRP1_DisableClock>
}
 801db14:	bf00      	nop
 801db16:	3720      	adds	r7, #32
 801db18:	46bd      	mov	sp, r7
 801db1a:	bd80      	pop	{r7, pc}

0801db1c <My_HAL_Delay>:
#endif

void My_HAL_Delay(__IO uint32_t Delay)
{
 801db1c:	b580      	push	{r7, lr}
 801db1e:	b082      	sub	sp, #8
 801db20:	af00      	add	r7, sp, #0
 801db22:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	4618      	mov	r0, r3
 801db28:	f7e4 f8f7 	bl	8001d1a <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 801db2c:	bf00      	nop
 801db2e:	3708      	adds	r7, #8
 801db30:	46bd      	mov	sp, r7
 801db32:	bd80      	pop	{r7, pc}

0801db34 <SystemInit>:
	return deviceAddress;
}

#if !MY_SYSTEM_INIT
void SystemInit(void)	// System Init Function
{
 801db34:	b580      	push	{r7, lr}
 801db36:	af00      	add	r7, sp, #0
	SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
#else
	//	My_Set_GPIO_ANALOG();							// Configure all GPIOs in Analog Mode (High Impedance)
#endif

	HAL_Init();										// Configure HAL
 801db38:	f7e4 ffda 	bl	8002af0 <HAL_Init>

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 801db3c:	f7ff fbbe 	bl	801d2bc <My_Set_All_GPIO_To_Analog_Mode>
#endif

	HAL_PWR_EnablePVD();							// Enable PVD
 801db40:	f7e7 fe8c 	bl	800585c <HAL_PWR_EnablePVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2); // Undervolting
 801db44:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801db48:	f7e7 ff12 	bl	8005970 <HAL_PWREx_ControlVoltageScaling>

	My_Set_PVD(V2P0, PWR_PVD_MODE_IT_RISING);		// Configure PVD
 801db4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801db50:	2000      	movs	r0, #0
 801db52:	f7ff fc81 	bl	801d458 <My_Set_PVD>
	HAL_PWREx_EnableLowPowerRunMode();				// Enter Low Power Run Mode
 801db56:	f7e7 ff5f 	bl	8005a18 <HAL_PWREx_EnableLowPowerRunMode>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn); 				// Enable PVD Interrupt
 801db5a:	2001      	movs	r0, #1
 801db5c:	f7e6 f995 	bl	8003e8a <HAL_NVIC_EnableIRQ>
	HAL_PWREx_EnterSTOP0Mode(PWR_STOPENTRY_WFI);	// Enter STOP0 mode and WFI
 801db60:	2001      	movs	r0, #1
 801db62:	f7e7 ff9d 	bl	8005aa0 <HAL_PWREx_EnterSTOP0Mode>
	HAL_PWREx_DisableLowPowerRunMode();				// Disable Low Power Run Mode
 801db66:	f7e7 ff65 	bl	8005a34 <HAL_PWREx_DisableLowPowerRunMode>
}
 801db6a:	bf00      	nop
 801db6c:	bd80      	pop	{r7, pc}
	...

0801db70 <LL_EXTI_IsActiveFlag_0_31>:
{
 801db70:	b480      	push	{r7}
 801db72:	b083      	sub	sp, #12
 801db74:	af00      	add	r7, sp, #0
 801db76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 801db78:	4b07      	ldr	r3, [pc, #28]	@ (801db98 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 801db7a:	68da      	ldr	r2, [r3, #12]
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	4013      	ands	r3, r2
 801db80:	687a      	ldr	r2, [r7, #4]
 801db82:	429a      	cmp	r2, r3
 801db84:	d101      	bne.n	801db8a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 801db86:	2301      	movs	r3, #1
 801db88:	e000      	b.n	801db8c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 801db8a:	2300      	movs	r3, #0
}
 801db8c:	4618      	mov	r0, r3
 801db8e:	370c      	adds	r7, #12
 801db90:	46bd      	mov	sp, r7
 801db92:	bc80      	pop	{r7}
 801db94:	4770      	bx	lr
 801db96:	bf00      	nop
 801db98:	58000800 	.word	0x58000800

0801db9c <LL_EXTI_ClearFlag_0_31>:
{
 801db9c:	b480      	push	{r7}
 801db9e:	b083      	sub	sp, #12
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 801dba4:	4a03      	ldr	r2, [pc, #12]	@ (801dbb4 <LL_EXTI_ClearFlag_0_31+0x18>)
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	60d3      	str	r3, [r2, #12]
}
 801dbaa:	bf00      	nop
 801dbac:	370c      	adds	r7, #12
 801dbae:	46bd      	mov	sp, r7
 801dbb0:	bc80      	pop	{r7}
 801dbb2:	4770      	bx	lr
 801dbb4:	58000800 	.word	0x58000800

0801dbb8 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 801dbb8:	b580      	push	{r7, lr}
 801dbba:	b084      	sub	sp, #16
 801dbbc:	af00      	add	r7, sp, #0
 801dbbe:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	4a11      	ldr	r2, [pc, #68]	@ (801dc0c <HAL_COMP_IRQHandler+0x54>)
 801dbc6:	4293      	cmp	r3, r2
 801dbc8:	d102      	bne.n	801dbd0 <HAL_COMP_IRQHandler+0x18>
 801dbca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801dbce:	e001      	b.n	801dbd4 <HAL_COMP_IRQHandler+0x1c>
 801dbd0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801dbd4:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 801dbd6:	68f8      	ldr	r0, [r7, #12]
 801dbd8:	f7ff ffca 	bl	801db70 <LL_EXTI_IsActiveFlag_0_31>
 801dbdc:	4603      	mov	r3, r0
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d010      	beq.n	801dc04 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 801dbe2:	4b0b      	ldr	r3, [pc, #44]	@ (801dc10 <HAL_COMP_IRQHandler+0x58>)
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d004      	beq.n	801dbf8 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 801dbee:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 801dbf2:	f7ff ffd3 	bl	801db9c <LL_EXTI_ClearFlag_0_31>
 801dbf6:	e002      	b.n	801dbfe <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 801dbf8:	68f8      	ldr	r0, [r7, #12]
 801dbfa:	f7ff ffcf 	bl	801db9c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 801dbfe:	6878      	ldr	r0, [r7, #4]
 801dc00:	f000 f808 	bl	801dc14 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 801dc04:	bf00      	nop
 801dc06:	3710      	adds	r7, #16
 801dc08:	46bd      	mov	sp, r7
 801dc0a:	bd80      	pop	{r7, pc}
 801dc0c:	40010200 	.word	0x40010200
 801dc10:	40010204 	.word	0x40010204

0801dc14 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 801dc14:	b480      	push	{r7}
 801dc16:	b083      	sub	sp, #12
 801dc18:	af00      	add	r7, sp, #0
 801dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 801dc1c:	bf00      	nop
 801dc1e:	370c      	adds	r7, #12
 801dc20:	46bd      	mov	sp, r7
 801dc22:	bc80      	pop	{r7}
 801dc24:	4770      	bx	lr

0801dc26 <LL_RCC_SetLPTIMClockSource>:
{
 801dc26:	b480      	push	{r7}
 801dc28:	b083      	sub	sp, #12
 801dc2a:	af00      	add	r7, sp, #0
 801dc2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801dc2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dc32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	0c1b      	lsrs	r3, r3, #16
 801dc3a:	041b      	lsls	r3, r3, #16
 801dc3c:	43db      	mvns	r3, r3
 801dc3e:	401a      	ands	r2, r3
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	041b      	lsls	r3, r3, #16
 801dc44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dc48:	4313      	orrs	r3, r2
 801dc4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801dc4e:	bf00      	nop
 801dc50:	370c      	adds	r7, #12
 801dc52:	46bd      	mov	sp, r7
 801dc54:	bc80      	pop	{r7}
 801dc56:	4770      	bx	lr

0801dc58 <LL_RCC_GetLPTIMClockSource>:
{
 801dc58:	b480      	push	{r7}
 801dc5a:	b083      	sub	sp, #12
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 801dc60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dc64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	4013      	ands	r3, r2
 801dc6c:	0c1a      	lsrs	r2, r3, #16
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	4313      	orrs	r3, r2
}
 801dc72:	4618      	mov	r0, r3
 801dc74:	370c      	adds	r7, #12
 801dc76:	46bd      	mov	sp, r7
 801dc78:	bc80      	pop	{r7}
 801dc7a:	4770      	bx	lr

0801dc7c <LL_APB1_GRP1_ForceReset>:
{
 801dc7c:	b480      	push	{r7}
 801dc7e:	b083      	sub	sp, #12
 801dc80:	af00      	add	r7, sp, #0
 801dc82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 801dc84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dc88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dc8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	4313      	orrs	r3, r2
 801dc92:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801dc94:	bf00      	nop
 801dc96:	370c      	adds	r7, #12
 801dc98:	46bd      	mov	sp, r7
 801dc9a:	bc80      	pop	{r7}
 801dc9c:	4770      	bx	lr

0801dc9e <LL_APB1_GRP2_ForceReset>:
{
 801dc9e:	b480      	push	{r7}
 801dca0:	b083      	sub	sp, #12
 801dca2:	af00      	add	r7, sp, #0
 801dca4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 801dca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dcaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dcac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	4313      	orrs	r3, r2
 801dcb4:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801dcb6:	bf00      	nop
 801dcb8:	370c      	adds	r7, #12
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	bc80      	pop	{r7}
 801dcbe:	4770      	bx	lr

0801dcc0 <LL_APB1_GRP1_ReleaseReset>:
{
 801dcc0:	b480      	push	{r7}
 801dcc2:	b083      	sub	sp, #12
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 801dcc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	43db      	mvns	r3, r3
 801dcd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dcd6:	4013      	ands	r3, r2
 801dcd8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801dcda:	bf00      	nop
 801dcdc:	370c      	adds	r7, #12
 801dcde:	46bd      	mov	sp, r7
 801dce0:	bc80      	pop	{r7}
 801dce2:	4770      	bx	lr

0801dce4 <LL_APB1_GRP2_ReleaseReset>:
{
 801dce4:	b480      	push	{r7}
 801dce6:	b083      	sub	sp, #12
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 801dcec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dcf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	43db      	mvns	r3, r3
 801dcf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dcfa:	4013      	ands	r3, r2
 801dcfc:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801dcfe:	bf00      	nop
 801dd00:	370c      	adds	r7, #12
 801dd02:	46bd      	mov	sp, r7
 801dd04:	bc80      	pop	{r7}
 801dd06:	4770      	bx	lr

0801dd08 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 801dd08:	b580      	push	{r7, lr}
 801dd0a:	b084      	sub	sp, #16
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d101      	bne.n	801dd1a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 801dd16:	2301      	movs	r3, #1
 801dd18:	e0b6      	b.n	801de88 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	685b      	ldr	r3, [r3, #4]
 801dd1e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801dd26:	b2db      	uxtb	r3, r3
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d106      	bne.n	801dd3a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	2200      	movs	r2, #0
 801dd30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 801dd34:	6878      	ldr	r0, [r7, #4]
 801dd36:	f7fe f93d 	bl	801bfb4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	2202      	movs	r2, #2
 801dd3e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	681b      	ldr	r3, [r3, #0]
 801dd46:	691a      	ldr	r2, [r3, #16]
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	f042 0201 	orr.w	r2, r2, #1
 801dd50:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dd5a:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	687a      	ldr	r2, [r7, #4]
 801dd62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801dd64:	629a      	str	r2, [r3, #40]	@ 0x28
//  if(hlptim -> Instance == LPTIM2)
//  {
//	  RCC->CCIPR |= (1 << 21) | (1 << 20);
//  }
  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801dd66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801dd6a:	6878      	ldr	r0, [r7, #4]
 801dd6c:	f000 fb26 	bl	801e3bc <LPTIM_WaitForFlag>
 801dd70:	4603      	mov	r3, r0
 801dd72:	2b03      	cmp	r3, #3
 801dd74:	d101      	bne.n	801dd7a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 801dd76:	2303      	movs	r3, #3
 801dd78:	e086      	b.n	801de88 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801dd7a:	6878      	ldr	r0, [r7, #4]
 801dd7c:	f000 fb4e 	bl	801e41c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801dd80:	6878      	ldr	r0, [r7, #4]
 801dd82:	f000 fb0d 	bl	801e3a0 <HAL_LPTIM_GetState>
 801dd86:	4603      	mov	r3, r0
 801dd88:	2b03      	cmp	r3, #3
 801dd8a:	d101      	bne.n	801dd90 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 801dd8c:	2303      	movs	r3, #3
 801dd8e:	e07b      	b.n	801de88 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	68db      	ldr	r3, [r3, #12]
 801dd96:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	685b      	ldr	r3, [r3, #4]
 801dd9c:	2b01      	cmp	r3, #1
 801dd9e:	d004      	beq.n	801ddaa <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dda4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801dda8:	d103      	bne.n	801ddb2 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	f023 031e 	bic.w	r3, r3, #30
 801ddb0:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	695b      	ldr	r3, [r3, #20]
 801ddb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ddba:	4293      	cmp	r3, r2
 801ddbc:	d005      	beq.n	801ddca <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 801ddbe:	68fb      	ldr	r3, [r7, #12]
 801ddc0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801ddc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801ddc8:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 801ddca:	68fa      	ldr	r2, [r7, #12]
 801ddcc:	4b30      	ldr	r3, [pc, #192]	@ (801de90 <HAL_LPTIM_Init+0x188>)
 801ddce:	4013      	ands	r3, r2
 801ddd0:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ddda:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 801dde0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 801dde6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 801ddec:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ddee:	68fa      	ldr	r2, [r7, #12]
 801ddf0:	4313      	orrs	r3, r2
 801ddf2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	685b      	ldr	r3, [r3, #4]
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d107      	bne.n	801de0c <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801de04:	4313      	orrs	r3, r2
 801de06:	68fa      	ldr	r2, [r7, #12]
 801de08:	4313      	orrs	r3, r2
 801de0a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	685b      	ldr	r3, [r3, #4]
 801de10:	2b01      	cmp	r3, #1
 801de12:	d004      	beq.n	801de1e <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801de1c:	d107      	bne.n	801de2e <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801de26:	4313      	orrs	r3, r2
 801de28:	68fa      	ldr	r2, [r7, #12]
 801de2a:	4313      	orrs	r3, r2
 801de2c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	695b      	ldr	r3, [r3, #20]
 801de32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801de36:	4293      	cmp	r3, r2
 801de38:	d00a      	beq.n	801de50 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801de42:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 801de48:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801de4a:	68fa      	ldr	r2, [r7, #12]
 801de4c:	4313      	orrs	r3, r2
 801de4e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	68fa      	ldr	r2, [r7, #12]
 801de56:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	4a0d      	ldr	r2, [pc, #52]	@ (801de94 <HAL_LPTIM_Init+0x18c>)
 801de5e:	4293      	cmp	r3, r2
 801de60:	d108      	bne.n	801de74 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	430a      	orrs	r2, r1
 801de70:	621a      	str	r2, [r3, #32]
 801de72:	e004      	b.n	801de7e <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	687a      	ldr	r2, [r7, #4]
 801de7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801de7c:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	2201      	movs	r2, #1
 801de82:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801de86:	2300      	movs	r3, #0
}
 801de88:	4618      	mov	r0, r3
 801de8a:	3710      	adds	r7, #16
 801de8c:	46bd      	mov	sp, r7
 801de8e:	bd80      	pop	{r7, pc}
 801de90:	ff19f1fe 	.word	0xff19f1fe
 801de94:	40007c00 	.word	0x40007c00

0801de98 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b082      	sub	sp, #8
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	6078      	str	r0, [r7, #4]
 801dea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	2202      	movs	r2, #2
 801dea6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	685b      	ldr	r3, [r3, #4]
 801deae:	2b01      	cmp	r3, #1
 801deb0:	d00c      	beq.n	801decc <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801deb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801deba:	d107      	bne.n	801decc <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	68da      	ldr	r2, [r3, #12]
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801deca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	691a      	ldr	r2, [r3, #16]
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	f042 0201 	orr.w	r2, r2, #1
 801deda:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	2210      	movs	r2, #16
 801dee2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	683a      	ldr	r2, [r7, #0]
 801deea:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801deec:	2110      	movs	r1, #16
 801deee:	6878      	ldr	r0, [r7, #4]
 801def0:	f000 fa64 	bl	801e3bc <LPTIM_WaitForFlag>
 801def4:	4603      	mov	r3, r0
 801def6:	2b03      	cmp	r3, #3
 801def8:	d101      	bne.n	801defe <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 801defa:	2303      	movs	r3, #3
 801defc:	e00c      	b.n	801df18 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	691a      	ldr	r2, [r3, #16]
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	681b      	ldr	r3, [r3, #0]
 801df08:	f042 0204 	orr.w	r2, r2, #4
 801df0c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	2201      	movs	r2, #1
 801df12:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801df16:	2300      	movs	r3, #0
}
 801df18:	4618      	mov	r0, r3
 801df1a:	3708      	adds	r7, #8
 801df1c:	46bd      	mov	sp, r7
 801df1e:	bd80      	pop	{r7, pc}

0801df20 <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 801df20:	b580      	push	{r7, lr}
 801df22:	b082      	sub	sp, #8
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	2202      	movs	r2, #2
 801df2c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801df30:	6878      	ldr	r0, [r7, #4]
 801df32:	f000 fa73 	bl	801e41c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801df36:	6878      	ldr	r0, [r7, #4]
 801df38:	f000 fa32 	bl	801e3a0 <HAL_LPTIM_GetState>
 801df3c:	4603      	mov	r3, r0
 801df3e:	2b03      	cmp	r3, #3
 801df40:	d101      	bne.n	801df46 <HAL_LPTIM_Counter_Stop+0x26>
  {
    return HAL_TIMEOUT;
 801df42:	2303      	movs	r3, #3
 801df44:	e004      	b.n	801df50 <HAL_LPTIM_Counter_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	2201      	movs	r2, #1
 801df4a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801df4e:	2300      	movs	r3, #0
}
 801df50:	4618      	mov	r0, r3
 801df52:	3708      	adds	r7, #8
 801df54:	46bd      	mov	sp, r7
 801df56:	bd80      	pop	{r7, pc}

0801df58 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801df58:	b580      	push	{r7, lr}
 801df5a:	b082      	sub	sp, #8
 801df5c:	af00      	add	r7, sp, #0
 801df5e:	6078      	str	r0, [r7, #4]
 801df60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	2202      	movs	r2, #2
 801df66:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	4a48      	ldr	r2, [pc, #288]	@ (801e090 <HAL_LPTIM_Counter_Start_IT+0x138>)
 801df70:	4293      	cmp	r3, r2
 801df72:	d108      	bne.n	801df86 <HAL_LPTIM_Counter_Start_IT+0x2e>
 801df74:	4b47      	ldr	r3, [pc, #284]	@ (801e094 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df7a:	4a46      	ldr	r2, [pc, #280]	@ (801e094 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801df80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801df84:	e015      	b.n	801dfb2 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	681b      	ldr	r3, [r3, #0]
 801df8a:	4a43      	ldr	r2, [pc, #268]	@ (801e098 <HAL_LPTIM_Counter_Start_IT+0x140>)
 801df8c:	4293      	cmp	r3, r2
 801df8e:	d108      	bne.n	801dfa2 <HAL_LPTIM_Counter_Start_IT+0x4a>
 801df90:	4b40      	ldr	r3, [pc, #256]	@ (801e094 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df96:	4a3f      	ldr	r2, [pc, #252]	@ (801e094 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801df9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801dfa0:	e007      	b.n	801dfb2 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801dfa2:	4b3c      	ldr	r3, [pc, #240]	@ (801e094 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801dfa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dfa8:	4a3a      	ldr	r2, [pc, #232]	@ (801e094 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801dfaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801dfae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	685b      	ldr	r3, [r3, #4]
 801dfb6:	2b01      	cmp	r3, #1
 801dfb8:	d00c      	beq.n	801dfd4 <HAL_LPTIM_Counter_Start_IT+0x7c>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801dfc2:	d107      	bne.n	801dfd4 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	68da      	ldr	r2, [r3, #12]
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801dfd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	691a      	ldr	r2, [r3, #16]
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	f042 0201 	orr.w	r2, r2, #1
 801dfe2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	2210      	movs	r2, #16
 801dfea:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	681b      	ldr	r3, [r3, #0]
 801dff0:	683a      	ldr	r2, [r7, #0]
 801dff2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801dff4:	2110      	movs	r1, #16
 801dff6:	6878      	ldr	r0, [r7, #4]
 801dff8:	f000 f9e0 	bl	801e3bc <LPTIM_WaitForFlag>
 801dffc:	4603      	mov	r3, r0
 801dffe:	2b03      	cmp	r3, #3
 801e000:	d101      	bne.n	801e006 <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 801e002:	2303      	movs	r3, #3
 801e004:	e03f      	b.n	801e086 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801e006:	6878      	ldr	r0, [r7, #4]
 801e008:	f000 fa08 	bl	801e41c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801e00c:	6878      	ldr	r0, [r7, #4]
 801e00e:	f000 f9c7 	bl	801e3a0 <HAL_LPTIM_GetState>
 801e012:	4603      	mov	r3, r0
 801e014:	2b03      	cmp	r3, #3
 801e016:	d101      	bne.n	801e01c <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 801e018:	2303      	movs	r3, #3
 801e01a:	e034      	b.n	801e086 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	689a      	ldr	r2, [r3, #8]
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	f042 0210 	orr.w	r2, r2, #16
 801e02a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	689a      	ldr	r2, [r3, #8]
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	f042 0202 	orr.w	r2, r2, #2
 801e03a:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	689a      	ldr	r2, [r3, #8]
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e04a:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	689a      	ldr	r2, [r3, #8]
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e05a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	691a      	ldr	r2, [r3, #16]
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	f042 0201 	orr.w	r2, r2, #1
 801e06a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	691a      	ldr	r2, [r3, #16]
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	f042 0204 	orr.w	r2, r2, #4
 801e07a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	2201      	movs	r2, #1
 801e080:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801e084:	2300      	movs	r3, #0
}
 801e086:	4618      	mov	r0, r3
 801e088:	3708      	adds	r7, #8
 801e08a:	46bd      	mov	sp, r7
 801e08c:	bd80      	pop	{r7, pc}
 801e08e:	bf00      	nop
 801e090:	40007c00 	.word	0x40007c00
 801e094:	58000800 	.word	0x58000800
 801e098:	40009400 	.word	0x40009400

0801e09c <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b082      	sub	sp, #8
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	4a2c      	ldr	r2, [pc, #176]	@ (801e15c <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	d108      	bne.n	801e0c0 <HAL_LPTIM_Counter_Stop_IT+0x24>
 801e0ae:	4b2c      	ldr	r3, [pc, #176]	@ (801e160 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e0b4:	4a2a      	ldr	r2, [pc, #168]	@ (801e160 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801e0ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801e0be:	e015      	b.n	801e0ec <HAL_LPTIM_Counter_Stop_IT+0x50>
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	681b      	ldr	r3, [r3, #0]
 801e0c4:	4a27      	ldr	r2, [pc, #156]	@ (801e164 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 801e0c6:	4293      	cmp	r3, r2
 801e0c8:	d108      	bne.n	801e0dc <HAL_LPTIM_Counter_Stop_IT+0x40>
 801e0ca:	4b25      	ldr	r3, [pc, #148]	@ (801e160 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e0d0:	4a23      	ldr	r2, [pc, #140]	@ (801e160 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801e0d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801e0da:	e007      	b.n	801e0ec <HAL_LPTIM_Counter_Stop_IT+0x50>
 801e0dc:	4b20      	ldr	r3, [pc, #128]	@ (801e160 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e0e2:	4a1f      	ldr	r2, [pc, #124]	@ (801e160 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e0e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	2202      	movs	r2, #2
 801e0f0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801e0f4:	6878      	ldr	r0, [r7, #4]
 801e0f6:	f000 f991 	bl	801e41c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801e0fa:	6878      	ldr	r0, [r7, #4]
 801e0fc:	f000 f950 	bl	801e3a0 <HAL_LPTIM_GetState>
 801e100:	4603      	mov	r3, r0
 801e102:	2b03      	cmp	r3, #3
 801e104:	d101      	bne.n	801e10a <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 801e106:	2303      	movs	r3, #3
 801e108:	e024      	b.n	801e154 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	689a      	ldr	r2, [r3, #8]
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	f022 0210 	bic.w	r2, r2, #16
 801e118:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	689a      	ldr	r2, [r3, #8]
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	f022 0202 	bic.w	r2, r2, #2
 801e128:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	689a      	ldr	r2, [r3, #8]
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801e138:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	689a      	ldr	r2, [r3, #8]
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	681b      	ldr	r3, [r3, #0]
 801e144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e148:	609a      	str	r2, [r3, #8]
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801e14a:	687b      	ldr	r3, [r7, #4]
 801e14c:	2201      	movs	r2, #1
 801e14e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801e152:	2300      	movs	r3, #0
}
 801e154:	4618      	mov	r0, r3
 801e156:	3708      	adds	r7, #8
 801e158:	46bd      	mov	sp, r7
 801e15a:	bd80      	pop	{r7, pc}
 801e15c:	40007c00 	.word	0x40007c00
 801e160:	58000800 	.word	0x58000800
 801e164:	40009400 	.word	0x40009400

0801e168 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 801e168:	b480      	push	{r7}
 801e16a:	b083      	sub	sp, #12
 801e16c:	af00      	add	r7, sp, #0
 801e16e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	69db      	ldr	r3, [r3, #28]
}
 801e176:	4618      	mov	r0, r3
 801e178:	370c      	adds	r7, #12
 801e17a:	46bd      	mov	sp, r7
 801e17c:	bc80      	pop	{r7}
 801e17e:	4770      	bx	lr

0801e180 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 801e180:	b580      	push	{r7, lr}
 801e182:	b082      	sub	sp, #8
 801e184:	af00      	add	r7, sp, #0
 801e186:	6078      	str	r0, [r7, #4]

  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	f003 0301 	and.w	r3, r3, #1
 801e192:	2b01      	cmp	r3, #1
 801e194:	d10d      	bne.n	801e1b2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	689b      	ldr	r3, [r3, #8]
 801e19c:	f003 0301 	and.w	r3, r3, #1
 801e1a0:	2b01      	cmp	r3, #1
 801e1a2:	d106      	bne.n	801e1b2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	2201      	movs	r2, #1
 801e1aa:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 801e1ac:	6878      	ldr	r0, [r7, #4]
 801e1ae:	f000 f8af 	bl	801e310 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	f003 0302 	and.w	r3, r3, #2
 801e1bc:	2b02      	cmp	r3, #2
 801e1be:	d10d      	bne.n	801e1dc <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	689b      	ldr	r3, [r3, #8]
 801e1c6:	f003 0302 	and.w	r3, r3, #2
 801e1ca:	2b02      	cmp	r3, #2
 801e1cc:	d106      	bne.n	801e1dc <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	2202      	movs	r2, #2
 801e1d4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 801e1d6:	6878      	ldr	r0, [r7, #4]
 801e1d8:	f7fe f964 	bl	801c4a4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	f003 0304 	and.w	r3, r3, #4
 801e1e6:	2b04      	cmp	r3, #4
 801e1e8:	d10d      	bne.n	801e206 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	689b      	ldr	r3, [r3, #8]
 801e1f0:	f003 0304 	and.w	r3, r3, #4
 801e1f4:	2b04      	cmp	r3, #4
 801e1f6:	d106      	bne.n	801e206 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	2204      	movs	r2, #4
 801e1fe:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 801e200:	6878      	ldr	r0, [r7, #4]
 801e202:	f000 f88e 	bl	801e322 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	f003 0308 	and.w	r3, r3, #8
 801e210:	2b08      	cmp	r3, #8
 801e212:	d10d      	bne.n	801e230 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	689b      	ldr	r3, [r3, #8]
 801e21a:	f003 0308 	and.w	r3, r3, #8
 801e21e:	2b08      	cmp	r3, #8
 801e220:	d106      	bne.n	801e230 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	2208      	movs	r2, #8
 801e228:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 801e22a:	6878      	ldr	r0, [r7, #4]
 801e22c:	f000 f882 	bl	801e334 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	f003 0310 	and.w	r3, r3, #16
 801e23a:	2b10      	cmp	r3, #16
 801e23c:	d10d      	bne.n	801e25a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	689b      	ldr	r3, [r3, #8]
 801e244:	f003 0310 	and.w	r3, r3, #16
 801e248:	2b10      	cmp	r3, #16
 801e24a:	d106      	bne.n	801e25a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	2210      	movs	r2, #16
 801e252:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 801e254:	6878      	ldr	r0, [r7, #4]
 801e256:	f000 f876 	bl	801e346 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	f003 0320 	and.w	r3, r3, #32
 801e264:	2b20      	cmp	r3, #32
 801e266:	d10d      	bne.n	801e284 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	689b      	ldr	r3, [r3, #8]
 801e26e:	f003 0320 	and.w	r3, r3, #32
 801e272:	2b20      	cmp	r3, #32
 801e274:	d106      	bne.n	801e284 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	2220      	movs	r2, #32
 801e27c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 801e27e:	6878      	ldr	r0, [r7, #4]
 801e280:	f000 f86a 	bl	801e358 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	681b      	ldr	r3, [r3, #0]
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e28e:	2b40      	cmp	r3, #64	@ 0x40
 801e290:	d10d      	bne.n	801e2ae <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	689b      	ldr	r3, [r3, #8]
 801e298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e29c:	2b40      	cmp	r3, #64	@ 0x40
 801e29e:	d106      	bne.n	801e2ae <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	681b      	ldr	r3, [r3, #0]
 801e2a4:	2240      	movs	r2, #64	@ 0x40
 801e2a6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 801e2a8:	6878      	ldr	r0, [r7, #4]
 801e2aa:	f000 f85e 	bl	801e36a <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e2b8:	2b80      	cmp	r3, #128	@ 0x80
 801e2ba:	d10d      	bne.n	801e2d8 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	689b      	ldr	r3, [r3, #8]
 801e2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e2c6:	2b80      	cmp	r3, #128	@ 0x80
 801e2c8:	d106      	bne.n	801e2d8 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	2280      	movs	r2, #128	@ 0x80
 801e2d0:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 801e2d2:	6878      	ldr	r0, [r7, #4]
 801e2d4:	f000 f852 	bl	801e37c <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2e6:	d10f      	bne.n	801e308 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	689b      	ldr	r3, [r3, #8]
 801e2ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e2f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2f6:	d107      	bne.n	801e308 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e300:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801e302:	6878      	ldr	r0, [r7, #4]
 801e304:	f000 f843 	bl	801e38e <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 801e308:	bf00      	nop
 801e30a:	3708      	adds	r7, #8
 801e30c:	46bd      	mov	sp, r7
 801e30e:	bd80      	pop	{r7, pc}

0801e310 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e310:	b480      	push	{r7}
 801e312:	b083      	sub	sp, #12
 801e314:	af00      	add	r7, sp, #0
 801e316:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 801e318:	bf00      	nop
 801e31a:	370c      	adds	r7, #12
 801e31c:	46bd      	mov	sp, r7
 801e31e:	bc80      	pop	{r7}
 801e320:	4770      	bx	lr

0801e322 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e322:	b480      	push	{r7}
 801e324:	b083      	sub	sp, #12
 801e326:	af00      	add	r7, sp, #0
 801e328:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 801e32a:	bf00      	nop
 801e32c:	370c      	adds	r7, #12
 801e32e:	46bd      	mov	sp, r7
 801e330:	bc80      	pop	{r7}
 801e332:	4770      	bx	lr

0801e334 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e334:	b480      	push	{r7}
 801e336:	b083      	sub	sp, #12
 801e338:	af00      	add	r7, sp, #0
 801e33a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 801e33c:	bf00      	nop
 801e33e:	370c      	adds	r7, #12
 801e340:	46bd      	mov	sp, r7
 801e342:	bc80      	pop	{r7}
 801e344:	4770      	bx	lr

0801e346 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e346:	b480      	push	{r7}
 801e348:	b083      	sub	sp, #12
 801e34a:	af00      	add	r7, sp, #0
 801e34c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 801e34e:	bf00      	nop
 801e350:	370c      	adds	r7, #12
 801e352:	46bd      	mov	sp, r7
 801e354:	bc80      	pop	{r7}
 801e356:	4770      	bx	lr

0801e358 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e358:	b480      	push	{r7}
 801e35a:	b083      	sub	sp, #12
 801e35c:	af00      	add	r7, sp, #0
 801e35e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 801e360:	bf00      	nop
 801e362:	370c      	adds	r7, #12
 801e364:	46bd      	mov	sp, r7
 801e366:	bc80      	pop	{r7}
 801e368:	4770      	bx	lr

0801e36a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e36a:	b480      	push	{r7}
 801e36c:	b083      	sub	sp, #12
 801e36e:	af00      	add	r7, sp, #0
 801e370:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 801e372:	bf00      	nop
 801e374:	370c      	adds	r7, #12
 801e376:	46bd      	mov	sp, r7
 801e378:	bc80      	pop	{r7}
 801e37a:	4770      	bx	lr

0801e37c <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e37c:	b480      	push	{r7}
 801e37e:	b083      	sub	sp, #12
 801e380:	af00      	add	r7, sp, #0
 801e382:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 801e384:	bf00      	nop
 801e386:	370c      	adds	r7, #12
 801e388:	46bd      	mov	sp, r7
 801e38a:	bc80      	pop	{r7}
 801e38c:	4770      	bx	lr

0801e38e <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e38e:	b480      	push	{r7}
 801e390:	b083      	sub	sp, #12
 801e392:	af00      	add	r7, sp, #0
 801e394:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 801e396:	bf00      	nop
 801e398:	370c      	adds	r7, #12
 801e39a:	46bd      	mov	sp, r7
 801e39c:	bc80      	pop	{r7}
 801e39e:	4770      	bx	lr

0801e3a0 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 801e3a0:	b480      	push	{r7}
 801e3a2:	b083      	sub	sp, #12
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801e3ae:	b2db      	uxtb	r3, r3
}
 801e3b0:	4618      	mov	r0, r3
 801e3b2:	370c      	adds	r7, #12
 801e3b4:	46bd      	mov	sp, r7
 801e3b6:	bc80      	pop	{r7}
 801e3b8:	4770      	bx	lr
	...

0801e3bc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 801e3bc:	b480      	push	{r7}
 801e3be:	b085      	sub	sp, #20
 801e3c0:	af00      	add	r7, sp, #0
 801e3c2:	6078      	str	r0, [r7, #4]
 801e3c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 801e3c6:	2300      	movs	r3, #0
 801e3c8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 801e3ca:	4b12      	ldr	r3, [pc, #72]	@ (801e414 <LPTIM_WaitForFlag+0x58>)
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	4a12      	ldr	r2, [pc, #72]	@ (801e418 <LPTIM_WaitForFlag+0x5c>)
 801e3d0:	fba2 2303 	umull	r2, r3, r2, r3
 801e3d4:	0b9b      	lsrs	r3, r3, #14
 801e3d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e3da:	fb02 f303 	mul.w	r3, r2, r3
 801e3de:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 801e3e0:	68bb      	ldr	r3, [r7, #8]
 801e3e2:	3b01      	subs	r3, #1
 801e3e4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 801e3e6:	68bb      	ldr	r3, [r7, #8]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d101      	bne.n	801e3f0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 801e3ec:	2303      	movs	r3, #3
 801e3ee:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	681a      	ldr	r2, [r3, #0]
 801e3f6:	683b      	ldr	r3, [r7, #0]
 801e3f8:	4013      	ands	r3, r2
 801e3fa:	683a      	ldr	r2, [r7, #0]
 801e3fc:	429a      	cmp	r2, r3
 801e3fe:	d002      	beq.n	801e406 <LPTIM_WaitForFlag+0x4a>
 801e400:	68bb      	ldr	r3, [r7, #8]
 801e402:	2b00      	cmp	r3, #0
 801e404:	d1ec      	bne.n	801e3e0 <LPTIM_WaitForFlag+0x24>

  return result;
 801e406:	7bfb      	ldrb	r3, [r7, #15]
}
 801e408:	4618      	mov	r0, r3
 801e40a:	3714      	adds	r7, #20
 801e40c:	46bd      	mov	sp, r7
 801e40e:	bc80      	pop	{r7}
 801e410:	4770      	bx	lr
 801e412:	bf00      	nop
 801e414:	20000070 	.word	0x20000070
 801e418:	d1b71759 	.word	0xd1b71759

0801e41c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 801e41c:	b580      	push	{r7, lr}
 801e41e:	b08e      	sub	sp, #56	@ 0x38
 801e420:	af00      	add	r7, sp, #0
 801e422:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 801e424:	2300      	movs	r3, #0
 801e426:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e428:	f3ef 8310 	mrs	r3, PRIMASK
 801e42c:	613b      	str	r3, [r7, #16]
  return(result);
 801e42e:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 801e430:	633b      	str	r3, [r7, #48]	@ 0x30
 801e432:	2301      	movs	r3, #1
 801e434:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e436:	697b      	ldr	r3, [r7, #20]
 801e438:	f383 8810 	msr	PRIMASK, r3
}
 801e43c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 801e43e:	687b      	ldr	r3, [r7, #4]
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	4a8f      	ldr	r2, [pc, #572]	@ (801e680 <LPTIM_Disable+0x264>)
 801e444:	4293      	cmp	r3, r2
 801e446:	d015      	beq.n	801e474 <LPTIM_Disable+0x58>
 801e448:	4a8d      	ldr	r2, [pc, #564]	@ (801e680 <LPTIM_Disable+0x264>)
 801e44a:	4293      	cmp	r3, r2
 801e44c:	d818      	bhi.n	801e480 <LPTIM_Disable+0x64>
 801e44e:	4a8d      	ldr	r2, [pc, #564]	@ (801e684 <LPTIM_Disable+0x268>)
 801e450:	4293      	cmp	r3, r2
 801e452:	d003      	beq.n	801e45c <LPTIM_Disable+0x40>
 801e454:	4a8c      	ldr	r2, [pc, #560]	@ (801e688 <LPTIM_Disable+0x26c>)
 801e456:	4293      	cmp	r3, r2
 801e458:	d006      	beq.n	801e468 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 801e45a:	e011      	b.n	801e480 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 801e45c:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801e460:	f7ff fbfa 	bl	801dc58 <LL_RCC_GetLPTIMClockSource>
 801e464:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801e466:	e00c      	b.n	801e482 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 801e468:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801e46c:	f7ff fbf4 	bl	801dc58 <LL_RCC_GetLPTIMClockSource>
 801e470:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801e472:	e006      	b.n	801e482 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 801e474:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801e478:	f7ff fbee 	bl	801dc58 <LL_RCC_GetLPTIMClockSource>
 801e47c:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801e47e:	e000      	b.n	801e482 <LPTIM_Disable+0x66>
      break;
 801e480:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	689b      	ldr	r3, [r3, #8]
 801e488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	68db      	ldr	r3, [r3, #12]
 801e490:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpCMP = hlptim->Instance->CMP;
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	695b      	ldr	r3, [r3, #20]
 801e498:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpARR = hlptim->Instance->ARR;
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	699b      	ldr	r3, [r3, #24]
 801e4a0:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	6a1b      	ldr	r3, [r3, #32]
 801e4a8:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4b0:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	4a72      	ldr	r2, [pc, #456]	@ (801e680 <LPTIM_Disable+0x264>)
 801e4b8:	4293      	cmp	r3, r2
 801e4ba:	d019      	beq.n	801e4f0 <LPTIM_Disable+0xd4>
 801e4bc:	4a70      	ldr	r2, [pc, #448]	@ (801e680 <LPTIM_Disable+0x264>)
 801e4be:	4293      	cmp	r3, r2
 801e4c0:	d81d      	bhi.n	801e4fe <LPTIM_Disable+0xe2>
 801e4c2:	4a70      	ldr	r2, [pc, #448]	@ (801e684 <LPTIM_Disable+0x268>)
 801e4c4:	4293      	cmp	r3, r2
 801e4c6:	d003      	beq.n	801e4d0 <LPTIM_Disable+0xb4>
 801e4c8:	4a6f      	ldr	r2, [pc, #444]	@ (801e688 <LPTIM_Disable+0x26c>)
 801e4ca:	4293      	cmp	r3, r2
 801e4cc:	d009      	beq.n	801e4e2 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 801e4ce:	e016      	b.n	801e4fe <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 801e4d0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801e4d4:	f7ff fbd2 	bl	801dc7c <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 801e4d8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801e4dc:	f7ff fbf0 	bl	801dcc0 <LL_APB1_GRP1_ReleaseReset>
      break;
 801e4e0:	e00e      	b.n	801e500 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 801e4e2:	2020      	movs	r0, #32
 801e4e4:	f7ff fbdb 	bl	801dc9e <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 801e4e8:	2020      	movs	r0, #32
 801e4ea:	f7ff fbfb 	bl	801dce4 <LL_APB1_GRP2_ReleaseReset>
      break;
 801e4ee:	e007      	b.n	801e500 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 801e4f0:	2040      	movs	r0, #64	@ 0x40
 801e4f2:	f7ff fbd4 	bl	801dc9e <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 801e4f6:	2040      	movs	r0, #64	@ 0x40
 801e4f8:	f7ff fbf4 	bl	801dce4 <LL_APB1_GRP2_ReleaseReset>
      break;
 801e4fc:	e000      	b.n	801e500 <LPTIM_Disable+0xe4>
      break;
 801e4fe:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 801e500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e502:	2b00      	cmp	r3, #0
 801e504:	d106      	bne.n	801e514 <LPTIM_Disable+0xf8>
 801e506:	6a3b      	ldr	r3, [r7, #32]
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d103      	bne.n	801e514 <LPTIM_Disable+0xf8>
 801e50c:	69bb      	ldr	r3, [r7, #24]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	f000 8097 	beq.w	801e642 <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	681b      	ldr	r3, [r3, #0]
 801e518:	4a59      	ldr	r2, [pc, #356]	@ (801e680 <LPTIM_Disable+0x264>)
 801e51a:	4293      	cmp	r3, r2
 801e51c:	d013      	beq.n	801e546 <LPTIM_Disable+0x12a>
 801e51e:	4a58      	ldr	r2, [pc, #352]	@ (801e680 <LPTIM_Disable+0x264>)
 801e520:	4293      	cmp	r3, r2
 801e522:	d815      	bhi.n	801e550 <LPTIM_Disable+0x134>
 801e524:	4a57      	ldr	r2, [pc, #348]	@ (801e684 <LPTIM_Disable+0x268>)
 801e526:	4293      	cmp	r3, r2
 801e528:	d003      	beq.n	801e532 <LPTIM_Disable+0x116>
 801e52a:	4a57      	ldr	r2, [pc, #348]	@ (801e688 <LPTIM_Disable+0x26c>)
 801e52c:	4293      	cmp	r3, r2
 801e52e:	d005      	beq.n	801e53c <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 801e530:	e00e      	b.n	801e550 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 801e532:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801e536:	f7ff fb76 	bl	801dc26 <LL_RCC_SetLPTIMClockSource>
        break;
 801e53a:	e00a      	b.n	801e552 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 801e53c:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801e540:	f7ff fb71 	bl	801dc26 <LL_RCC_SetLPTIMClockSource>
        break;
 801e544:	e005      	b.n	801e552 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 801e546:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801e54a:	f7ff fb6c 	bl	801dc26 <LL_RCC_SetLPTIMClockSource>
        break;
 801e54e:	e000      	b.n	801e552 <LPTIM_Disable+0x136>
        break;
 801e550:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 801e552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e554:	2b00      	cmp	r3, #0
 801e556:	d01a      	beq.n	801e58e <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	691a      	ldr	r2, [r3, #16]
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	f042 0201 	orr.w	r2, r2, #1
 801e566:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e56e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 801e570:	2108      	movs	r1, #8
 801e572:	6878      	ldr	r0, [r7, #4]
 801e574:	f7ff ff22 	bl	801e3bc <LPTIM_WaitForFlag>
 801e578:	4603      	mov	r3, r0
 801e57a:	2b03      	cmp	r3, #3
 801e57c:	d103      	bne.n	801e586 <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	2203      	movs	r2, #3
 801e582:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	2208      	movs	r2, #8
 801e58c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 801e58e:	6a3b      	ldr	r3, [r7, #32]
 801e590:	2b00      	cmp	r3, #0
 801e592:	d01a      	beq.n	801e5ca <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	691a      	ldr	r2, [r3, #16]
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f042 0201 	orr.w	r2, r2, #1
 801e5a2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	6a3a      	ldr	r2, [r7, #32]
 801e5aa:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801e5ac:	2110      	movs	r1, #16
 801e5ae:	6878      	ldr	r0, [r7, #4]
 801e5b0:	f7ff ff04 	bl	801e3bc <LPTIM_WaitForFlag>
 801e5b4:	4603      	mov	r3, r0
 801e5b6:	2b03      	cmp	r3, #3
 801e5b8:	d103      	bne.n	801e5c2 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	2203      	movs	r2, #3
 801e5be:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	2210      	movs	r2, #16
 801e5c8:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 801e5ca:	69bb      	ldr	r3, [r7, #24]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d01c      	beq.n	801e60a <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	691a      	ldr	r2, [r3, #16]
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	f042 0201 	orr.w	r2, r2, #1
 801e5de:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	69ba      	ldr	r2, [r7, #24]
 801e5e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801e5e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e5ec:	6878      	ldr	r0, [r7, #4]
 801e5ee:	f7ff fee5 	bl	801e3bc <LPTIM_WaitForFlag>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	2b03      	cmp	r3, #3
 801e5f6:	d103      	bne.n	801e600 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	2203      	movs	r2, #3
 801e5fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e608:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	4a1c      	ldr	r2, [pc, #112]	@ (801e680 <LPTIM_Disable+0x264>)
 801e610:	4293      	cmp	r3, r2
 801e612:	d011      	beq.n	801e638 <LPTIM_Disable+0x21c>
 801e614:	4a1a      	ldr	r2, [pc, #104]	@ (801e680 <LPTIM_Disable+0x264>)
 801e616:	4293      	cmp	r3, r2
 801e618:	d812      	bhi.n	801e640 <LPTIM_Disable+0x224>
 801e61a:	4a1a      	ldr	r2, [pc, #104]	@ (801e684 <LPTIM_Disable+0x268>)
 801e61c:	4293      	cmp	r3, r2
 801e61e:	d003      	beq.n	801e628 <LPTIM_Disable+0x20c>
 801e620:	4a19      	ldr	r2, [pc, #100]	@ (801e688 <LPTIM_Disable+0x26c>)
 801e622:	4293      	cmp	r3, r2
 801e624:	d004      	beq.n	801e630 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 801e626:	e00b      	b.n	801e640 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 801e628:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e62a:	f7ff fafc 	bl	801dc26 <LL_RCC_SetLPTIMClockSource>
        break;
 801e62e:	e008      	b.n	801e642 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 801e630:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e632:	f7ff faf8 	bl	801dc26 <LL_RCC_SetLPTIMClockSource>
        break;
 801e636:	e004      	b.n	801e642 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 801e638:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e63a:	f7ff faf4 	bl	801dc26 <LL_RCC_SetLPTIMClockSource>
        break;
 801e63e:	e000      	b.n	801e642 <LPTIM_Disable+0x226>
        break;
 801e640:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	691a      	ldr	r2, [r3, #16]
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	f022 0201 	bic.w	r2, r2, #1
 801e650:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e658:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	681b      	ldr	r3, [r3, #0]
 801e65e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e660:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	69fa      	ldr	r2, [r7, #28]
 801e668:	621a      	str	r2, [r3, #32]
 801e66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e66c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	f383 8810 	msr	PRIMASK, r3
}
 801e674:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801e676:	bf00      	nop
 801e678:	3738      	adds	r7, #56	@ 0x38
 801e67a:	46bd      	mov	sp, r7
 801e67c:	bd80      	pop	{r7, pc}
 801e67e:	bf00      	nop
 801e680:	40009800 	.word	0x40009800
 801e684:	40007c00 	.word	0x40007c00
 801e688:	40009400 	.word	0x40009400

0801e68c <ai_buffer_get_size>:
 801e68c:	b360      	cbz	r0, 801e6e8 <ai_buffer_get_size+0x5c>
 801e68e:	b430      	push	{r4, r5}
 801e690:	6803      	ldr	r3, [r0, #0]
 801e692:	4d16      	ldr	r5, [pc, #88]	@ (801e6ec <ai_buffer_get_size+0x60>)
 801e694:	6984      	ldr	r4, [r0, #24]
 801e696:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801e69a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801e69e:	42ab      	cmp	r3, r5
 801e6a0:	6862      	ldr	r2, [r4, #4]
 801e6a2:	d01b      	beq.n	801e6dc <ai_buffer_get_size+0x50>
 801e6a4:	7d03      	ldrb	r3, [r0, #20]
 801e6a6:	6941      	ldr	r1, [r0, #20]
 801e6a8:	f1a3 0301 	sub.w	r3, r3, #1
 801e6ac:	fab3 f383 	clz	r3, r3
 801e6b0:	095b      	lsrs	r3, r3, #5
 801e6b2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801e6b6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801e6ba:	da0b      	bge.n	801e6d4 <ai_buffer_get_size+0x48>
 801e6bc:	2b01      	cmp	r3, #1
 801e6be:	d102      	bne.n	801e6c6 <ai_buffer_get_size+0x3a>
 801e6c0:	2802      	cmp	r0, #2
 801e6c2:	d007      	beq.n	801e6d4 <ai_buffer_get_size+0x48>
 801e6c4:	2302      	movs	r3, #2
 801e6c6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801e6ca:	3301      	adds	r3, #1
 801e6cc:	4298      	cmp	r0, r3
 801e6ce:	fb01 f202 	mul.w	r2, r1, r2
 801e6d2:	d1f3      	bne.n	801e6bc <ai_buffer_get_size+0x30>
 801e6d4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801e6d8:	bc30      	pop	{r4, r5}
 801e6da:	4770      	bx	lr
 801e6dc:	2900      	cmp	r1, #0
 801e6de:	d0e1      	beq.n	801e6a4 <ai_buffer_get_size+0x18>
 801e6e0:	321f      	adds	r2, #31
 801e6e2:	f022 021f 	bic.w	r2, r2, #31
 801e6e6:	e7dd      	b.n	801e6a4 <ai_buffer_get_size+0x18>
 801e6e8:	4770      	bx	lr
 801e6ea:	bf00      	nop
 801e6ec:	000400c0 	.word	0x000400c0

0801e6f0 <ai_buffer_array_sane>:
 801e6f0:	b138      	cbz	r0, 801e702 <ai_buffer_array_sane+0x12>
 801e6f2:	6843      	ldr	r3, [r0, #4]
 801e6f4:	b123      	cbz	r3, 801e700 <ai_buffer_array_sane+0x10>
 801e6f6:	8840      	ldrh	r0, [r0, #2]
 801e6f8:	3800      	subs	r0, #0
 801e6fa:	bf18      	it	ne
 801e6fc:	2001      	movne	r0, #1
 801e6fe:	4770      	bx	lr
 801e700:	4618      	mov	r0, r3
 801e702:	4770      	bx	lr

0801e704 <ai_buffer_array_item_set_address>:
 801e704:	b158      	cbz	r0, 801e71e <ai_buffer_array_item_set_address+0x1a>
 801e706:	6843      	ldr	r3, [r0, #4]
 801e708:	b143      	cbz	r3, 801e71c <ai_buffer_array_item_set_address+0x18>
 801e70a:	8840      	ldrh	r0, [r0, #2]
 801e70c:	b138      	cbz	r0, 801e71e <ai_buffer_array_item_set_address+0x1a>
 801e70e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801e712:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801e716:	2001      	movs	r0, #1
 801e718:	605a      	str	r2, [r3, #4]
 801e71a:	4770      	bx	lr
 801e71c:	4618      	mov	r0, r3
 801e71e:	4770      	bx	lr

0801e720 <ai_platform_get_weights_map>:
 801e720:	b1f2      	cbz	r2, 801e760 <ai_platform_get_weights_map+0x40>
 801e722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e724:	4605      	mov	r5, r0
 801e726:	b1c8      	cbz	r0, 801e75c <ai_platform_get_weights_map+0x3c>
 801e728:	460c      	mov	r4, r1
 801e72a:	b1b9      	cbz	r1, 801e75c <ai_platform_get_weights_map+0x3c>
 801e72c:	4b24      	ldr	r3, [pc, #144]	@ (801e7c0 <ai_platform_get_weights_map+0xa0>)
 801e72e:	6811      	ldr	r1, [r2, #0]
 801e730:	4299      	cmp	r1, r3
 801e732:	4616      	mov	r6, r2
 801e734:	d00b      	beq.n	801e74e <ai_platform_get_weights_map+0x2e>
 801e736:	6856      	ldr	r6, [r2, #4]
 801e738:	b186      	cbz	r6, 801e75c <ai_platform_get_weights_map+0x3c>
 801e73a:	6837      	ldr	r7, [r6, #0]
 801e73c:	429f      	cmp	r7, r3
 801e73e:	d011      	beq.n	801e764 <ai_platform_get_weights_map+0x44>
 801e740:	6006      	str	r6, [r0, #0]
 801e742:	f1a4 0001 	sub.w	r0, r4, #1
 801e746:	fab0 f080 	clz	r0, r0
 801e74a:	0940      	lsrs	r0, r0, #5
 801e74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e74e:	1d10      	adds	r0, r2, #4
 801e750:	f7ff ffce 	bl	801e6f0 <ai_buffer_array_sane>
 801e754:	b110      	cbz	r0, 801e75c <ai_platform_get_weights_map+0x3c>
 801e756:	88f3      	ldrh	r3, [r6, #6]
 801e758:	429c      	cmp	r4, r3
 801e75a:	d01b      	beq.n	801e794 <ai_platform_get_weights_map+0x74>
 801e75c:	2000      	movs	r0, #0
 801e75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e760:	2000      	movs	r0, #0
 801e762:	4770      	bx	lr
 801e764:	4631      	mov	r1, r6
 801e766:	3804      	subs	r0, #4
 801e768:	2300      	movs	r3, #0
 801e76a:	e004      	b.n	801e776 <ai_platform_get_weights_map+0x56>
 801e76c:	3301      	adds	r3, #1
 801e76e:	429c      	cmp	r4, r3
 801e770:	f840 2f04 	str.w	r2, [r0, #4]!
 801e774:	d005      	beq.n	801e782 <ai_platform_get_weights_map+0x62>
 801e776:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801e77a:	42ba      	cmp	r2, r7
 801e77c:	d1f6      	bne.n	801e76c <ai_platform_get_weights_map+0x4c>
 801e77e:	429c      	cmp	r4, r3
 801e780:	d1ec      	bne.n	801e75c <ai_platform_get_weights_map+0x3c>
 801e782:	3401      	adds	r4, #1
 801e784:	4b0e      	ldr	r3, [pc, #56]	@ (801e7c0 <ai_platform_get_weights_map+0xa0>)
 801e786:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801e78a:	1ac0      	subs	r0, r0, r3
 801e78c:	fab0 f080 	clz	r0, r0
 801e790:	0940      	lsrs	r0, r0, #5
 801e792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e794:	2100      	movs	r1, #0
 801e796:	1f28      	subs	r0, r5, #4
 801e798:	468c      	mov	ip, r1
 801e79a:	e005      	b.n	801e7a8 <ai_platform_get_weights_map+0x88>
 801e79c:	f10c 0c01 	add.w	ip, ip, #1
 801e7a0:	4564      	cmp	r4, ip
 801e7a2:	f840 3f04 	str.w	r3, [r0, #4]!
 801e7a6:	d005      	beq.n	801e7b4 <ai_platform_get_weights_map+0x94>
 801e7a8:	68b3      	ldr	r3, [r6, #8]
 801e7aa:	440b      	add	r3, r1
 801e7ac:	311c      	adds	r1, #28
 801e7ae:	685b      	ldr	r3, [r3, #4]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d1f3      	bne.n	801e79c <ai_platform_get_weights_map+0x7c>
 801e7b4:	eba4 000c 	sub.w	r0, r4, ip
 801e7b8:	fab0 f080 	clz	r0, r0
 801e7bc:	0940      	lsrs	r0, r0, #5
 801e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7c0:	a1facade 	.word	0xa1facade

0801e7c4 <ai_platform_get_activations_map>:
 801e7c4:	b1fa      	cbz	r2, 801e806 <ai_platform_get_activations_map+0x42>
 801e7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7c8:	4605      	mov	r5, r0
 801e7ca:	b1d0      	cbz	r0, 801e802 <ai_platform_get_activations_map+0x3e>
 801e7cc:	460c      	mov	r4, r1
 801e7ce:	b1c1      	cbz	r1, 801e802 <ai_platform_get_activations_map+0x3e>
 801e7d0:	4b25      	ldr	r3, [pc, #148]	@ (801e868 <ai_platform_get_activations_map+0xa4>)
 801e7d2:	6811      	ldr	r1, [r2, #0]
 801e7d4:	4299      	cmp	r1, r3
 801e7d6:	4616      	mov	r6, r2
 801e7d8:	d00b      	beq.n	801e7f2 <ai_platform_get_activations_map+0x2e>
 801e7da:	6a16      	ldr	r6, [r2, #32]
 801e7dc:	b18e      	cbz	r6, 801e802 <ai_platform_get_activations_map+0x3e>
 801e7de:	6837      	ldr	r7, [r6, #0]
 801e7e0:	429f      	cmp	r7, r3
 801e7e2:	d012      	beq.n	801e80a <ai_platform_get_activations_map+0x46>
 801e7e4:	6006      	str	r6, [r0, #0]
 801e7e6:	f1a4 0001 	sub.w	r0, r4, #1
 801e7ea:	fab0 f080 	clz	r0, r0
 801e7ee:	0940      	lsrs	r0, r0, #5
 801e7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7f2:	f102 000c 	add.w	r0, r2, #12
 801e7f6:	f7ff ff7b 	bl	801e6f0 <ai_buffer_array_sane>
 801e7fa:	b110      	cbz	r0, 801e802 <ai_platform_get_activations_map+0x3e>
 801e7fc:	89f3      	ldrh	r3, [r6, #14]
 801e7fe:	429c      	cmp	r4, r3
 801e800:	d01b      	beq.n	801e83a <ai_platform_get_activations_map+0x76>
 801e802:	2000      	movs	r0, #0
 801e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e806:	2000      	movs	r0, #0
 801e808:	4770      	bx	lr
 801e80a:	4631      	mov	r1, r6
 801e80c:	3804      	subs	r0, #4
 801e80e:	2300      	movs	r3, #0
 801e810:	e004      	b.n	801e81c <ai_platform_get_activations_map+0x58>
 801e812:	3301      	adds	r3, #1
 801e814:	429c      	cmp	r4, r3
 801e816:	f840 2f04 	str.w	r2, [r0, #4]!
 801e81a:	d005      	beq.n	801e828 <ai_platform_get_activations_map+0x64>
 801e81c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801e820:	42ba      	cmp	r2, r7
 801e822:	d1f6      	bne.n	801e812 <ai_platform_get_activations_map+0x4e>
 801e824:	429c      	cmp	r4, r3
 801e826:	d1ec      	bne.n	801e802 <ai_platform_get_activations_map+0x3e>
 801e828:	3401      	adds	r4, #1
 801e82a:	4b0f      	ldr	r3, [pc, #60]	@ (801e868 <ai_platform_get_activations_map+0xa4>)
 801e82c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801e830:	1ac0      	subs	r0, r0, r3
 801e832:	fab0 f080 	clz	r0, r0
 801e836:	0940      	lsrs	r0, r0, #5
 801e838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e83a:	2100      	movs	r1, #0
 801e83c:	1f28      	subs	r0, r5, #4
 801e83e:	468c      	mov	ip, r1
 801e840:	e005      	b.n	801e84e <ai_platform_get_activations_map+0x8a>
 801e842:	f10c 0c01 	add.w	ip, ip, #1
 801e846:	4564      	cmp	r4, ip
 801e848:	f840 3f04 	str.w	r3, [r0, #4]!
 801e84c:	d005      	beq.n	801e85a <ai_platform_get_activations_map+0x96>
 801e84e:	6933      	ldr	r3, [r6, #16]
 801e850:	440b      	add	r3, r1
 801e852:	311c      	adds	r1, #28
 801e854:	685b      	ldr	r3, [r3, #4]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d1f3      	bne.n	801e842 <ai_platform_get_activations_map+0x7e>
 801e85a:	eba4 000c 	sub.w	r0, r4, ip
 801e85e:	fab0 f080 	clz	r0, r0
 801e862:	0940      	lsrs	r0, r0, #5
 801e864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e866:	bf00      	nop
 801e868:	a1facade 	.word	0xa1facade

0801e86c <ai_platform_bind_network_params>:
 801e86c:	b198      	cbz	r0, 801e896 <ai_platform_bind_network_params+0x2a>
 801e86e:	b1a9      	cbz	r1, 801e89c <ai_platform_bind_network_params+0x30>
 801e870:	b1ba      	cbz	r2, 801e8a2 <ai_platform_bind_network_params+0x36>
 801e872:	b410      	push	{r4}
 801e874:	4603      	mov	r3, r0
 801e876:	4c0c      	ldr	r4, [pc, #48]	@ (801e8a8 <ai_platform_bind_network_params+0x3c>)
 801e878:	f843 4b04 	str.w	r4, [r3], #4
 801e87c:	f100 0c0c 	add.w	ip, r0, #12
 801e880:	c903      	ldmia	r1, {r0, r1}
 801e882:	e883 0003 	stmia.w	r3, {r0, r1}
 801e886:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e88a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e88e:	2301      	movs	r3, #1
 801e890:	4618      	mov	r0, r3
 801e892:	bc10      	pop	{r4}
 801e894:	4770      	bx	lr
 801e896:	4603      	mov	r3, r0
 801e898:	4618      	mov	r0, r3
 801e89a:	4770      	bx	lr
 801e89c:	460b      	mov	r3, r1
 801e89e:	4618      	mov	r0, r3
 801e8a0:	4770      	bx	lr
 801e8a2:	4613      	mov	r3, r2
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	4770      	bx	lr
 801e8a8:	a1facade 	.word	0xa1facade

0801e8ac <ai_platform_network_get_error>:
 801e8ac:	4b04      	ldr	r3, [pc, #16]	@ (801e8c0 <ai_platform_network_get_error+0x14>)
 801e8ae:	6802      	ldr	r2, [r0, #0]
 801e8b0:	4393      	bics	r3, r2
 801e8b2:	d102      	bne.n	801e8ba <ai_platform_network_get_error+0xe>
 801e8b4:	300c      	adds	r0, #12
 801e8b6:	f000 bc19 	b.w	801f0ec <core_get_error>
 801e8ba:	f241 0010 	movw	r0, #4112	@ 0x1010
 801e8be:	4770      	bx	lr
 801e8c0:	a1c00100 	.word	0xa1c00100

0801e8c4 <ai_platform_network_set_error>:
 801e8c4:	b110      	cbz	r0, 801e8cc <ai_platform_network_set_error+0x8>
 801e8c6:	300c      	adds	r0, #12
 801e8c8:	f000 bc16 	b.w	801f0f8 <core_set_error>
 801e8cc:	4770      	bx	lr
 801e8ce:	bf00      	nop

0801e8d0 <ai_platform_inputs_get>:
 801e8d0:	4b39      	ldr	r3, [pc, #228]	@ (801e9b8 <ai_platform_inputs_get+0xe8>)
 801e8d2:	6802      	ldr	r2, [r0, #0]
 801e8d4:	4393      	bics	r3, r2
 801e8d6:	d163      	bne.n	801e9a0 <ai_platform_inputs_get+0xd0>
 801e8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8dc:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801e8de:	b085      	sub	sp, #20
 801e8e0:	4605      	mov	r5, r0
 801e8e2:	460c      	mov	r4, r1
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d04e      	beq.n	801e986 <ai_platform_inputs_get+0xb6>
 801e8e8:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801e8ea:	2f00      	cmp	r7, #0
 801e8ec:	d04b      	beq.n	801e986 <ai_platform_inputs_get+0xb6>
 801e8ee:	f04f 0b00 	mov.w	fp, #0
 801e8f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8f6:	465e      	mov	r6, fp
 801e8f8:	46ba      	mov	sl, r7
 801e8fa:	e017      	b.n	801e92c <ai_platform_inputs_get+0x5c>
 801e8fc:	9901      	ldr	r1, [sp, #4]
 801e8fe:	f04f 0c01 	mov.w	ip, #1
 801e902:	f847 c001 	str.w	ip, [r7, r1]
 801e906:	69a1      	ldr	r1, [r4, #24]
 801e908:	684c      	ldr	r4, [r1, #4]
 801e90a:	6028      	str	r0, [r5, #0]
 801e90c:	f04f 0101 	mov.w	r1, #1
 801e910:	7529      	strb	r1, [r5, #20]
 801e912:	6968      	ldr	r0, [r5, #20]
 801e914:	60ab      	str	r3, [r5, #8]
 801e916:	f368 201f 	bfi	r0, r8, #8, #24
 801e91a:	2300      	movs	r3, #0
 801e91c:	e9c5 3403 	strd	r3, r4, [r5, #12]
 801e920:	e9c5 0905 	strd	r0, r9, [r5, #20]
 801e924:	606a      	str	r2, [r5, #4]
 801e926:	3601      	adds	r6, #1
 801e928:	f10b 0b1c 	add.w	fp, fp, #28
 801e92c:	f8ba 3000 	ldrh.w	r3, [sl]
 801e930:	00f2      	lsls	r2, r6, #3
 801e932:	42b3      	cmp	r3, r6
 801e934:	9201      	str	r2, [sp, #4]
 801e936:	d935      	bls.n	801e9a4 <ai_platform_inputs_get+0xd4>
 801e938:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d031      	beq.n	801e9a4 <ai_platform_inputs_get+0xd4>
 801e940:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801e944:	b374      	cbz	r4, 801e9a4 <ai_platform_inputs_get+0xd4>
 801e946:	f8da 3008 	ldr.w	r3, [sl, #8]
 801e94a:	69a2      	ldr	r2, [r4, #24]
 801e94c:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801e950:	6810      	ldr	r0, [r2, #0]
 801e952:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 801e956:	68a3      	ldr	r3, [r4, #8]
 801e958:	f3c3 2817 	ubfx	r8, r3, #8, #24
 801e95c:	f001 fbc2 	bl	80200e4 <ai_array_to_buffer_fmt>
 801e960:	69a1      	ldr	r1, [r4, #24]
 801e962:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801e966:	688a      	ldr	r2, [r1, #8]
 801e968:	445d      	add	r5, fp
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d0cc      	beq.n	801e908 <ai_platform_inputs_get+0x38>
 801e96e:	2100      	movs	r1, #0
 801e970:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 801e974:	6821      	ldr	r1, [r4, #0]
 801e976:	6059      	str	r1, [r3, #4]
 801e978:	b111      	cbz	r1, 801e980 <ai_platform_inputs_get+0xb0>
 801e97a:	8849      	ldrh	r1, [r1, #2]
 801e97c:	2900      	cmp	r1, #0
 801e97e:	d1bd      	bne.n	801e8fc <ai_platform_inputs_get+0x2c>
 801e980:	69a1      	ldr	r1, [r4, #24]
 801e982:	2300      	movs	r3, #0
 801e984:	e7c0      	b.n	801e908 <ai_platform_inputs_get+0x38>
 801e986:	2218      	movs	r2, #24
 801e988:	2111      	movs	r1, #17
 801e98a:	f105 000c 	add.w	r0, r5, #12
 801e98e:	2600      	movs	r6, #0
 801e990:	f000 fbb2 	bl	801f0f8 <core_set_error>
 801e994:	4630      	mov	r0, r6
 801e996:	b104      	cbz	r4, 801e99a <ai_platform_inputs_get+0xca>
 801e998:	8026      	strh	r6, [r4, #0]
 801e99a:	b005      	add	sp, #20
 801e99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9a0:	2000      	movs	r0, #0
 801e9a2:	4770      	bx	lr
 801e9a4:	b2b6      	uxth	r6, r6
 801e9a6:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801e9aa:	2e00      	cmp	r6, #0
 801e9ac:	d0eb      	beq.n	801e986 <ai_platform_inputs_get+0xb6>
 801e9ae:	f8da 3008 	ldr.w	r3, [sl, #8]
 801e9b2:	6858      	ldr	r0, [r3, #4]
 801e9b4:	e7ef      	b.n	801e996 <ai_platform_inputs_get+0xc6>
 801e9b6:	bf00      	nop
 801e9b8:	a1c00100 	.word	0xa1c00100

0801e9bc <ai_platform_outputs_get>:
 801e9bc:	4b37      	ldr	r3, [pc, #220]	@ (801ea9c <ai_platform_outputs_get+0xe0>)
 801e9be:	6802      	ldr	r2, [r0, #0]
 801e9c0:	4393      	bics	r3, r2
 801e9c2:	d169      	bne.n	801ea98 <ai_platform_outputs_get+0xdc>
 801e9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9c8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801e9ca:	2b01      	cmp	r3, #1
 801e9cc:	b085      	sub	sp, #20
 801e9ce:	4605      	mov	r5, r0
 801e9d0:	460c      	mov	r4, r1
 801e9d2:	d94b      	bls.n	801ea6c <ai_platform_outputs_get+0xb0>
 801e9d4:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801e9d6:	f04f 0b00 	mov.w	fp, #0
 801e9da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e9de:	465e      	mov	r6, fp
 801e9e0:	46d8      	mov	r8, fp
 801e9e2:	46ba      	mov	sl, r7
 801e9e4:	e017      	b.n	801ea16 <ai_platform_outputs_get+0x5a>
 801e9e6:	9901      	ldr	r1, [sp, #4]
 801e9e8:	f04f 0c01 	mov.w	ip, #1
 801e9ec:	f847 c001 	str.w	ip, [r7, r1]
 801e9f0:	69a9      	ldr	r1, [r5, #24]
 801e9f2:	684d      	ldr	r5, [r1, #4]
 801e9f4:	6020      	str	r0, [r4, #0]
 801e9f6:	f04f 0101 	mov.w	r1, #1
 801e9fa:	7521      	strb	r1, [r4, #20]
 801e9fc:	6960      	ldr	r0, [r4, #20]
 801e9fe:	6062      	str	r2, [r4, #4]
 801ea00:	f369 201f 	bfi	r0, r9, #8, #24
 801ea04:	e9c4 5004 	strd	r5, r0, [r4, #16]
 801ea08:	e9c4 3802 	strd	r3, r8, [r4, #8]
 801ea0c:	9b00      	ldr	r3, [sp, #0]
 801ea0e:	61a3      	str	r3, [r4, #24]
 801ea10:	3601      	adds	r6, #1
 801ea12:	f10b 0b1c 	add.w	fp, fp, #28
 801ea16:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ea1a:	00f2      	lsls	r2, r6, #3
 801ea1c:	42b3      	cmp	r3, r6
 801ea1e:	9201      	str	r2, [sp, #4]
 801ea20:	d931      	bls.n	801ea86 <ai_platform_outputs_get+0xca>
 801ea22:	f8da 3010 	ldr.w	r3, [sl, #16]
 801ea26:	b373      	cbz	r3, 801ea86 <ai_platform_outputs_get+0xca>
 801ea28:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801ea2c:	b35d      	cbz	r5, 801ea86 <ai_platform_outputs_get+0xca>
 801ea2e:	f8da 3014 	ldr.w	r3, [sl, #20]
 801ea32:	69aa      	ldr	r2, [r5, #24]
 801ea34:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801ea38:	68ab      	ldr	r3, [r5, #8]
 801ea3a:	6810      	ldr	r0, [r2, #0]
 801ea3c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801ea40:	68eb      	ldr	r3, [r5, #12]
 801ea42:	9300      	str	r3, [sp, #0]
 801ea44:	f001 fb4e 	bl	80200e4 <ai_array_to_buffer_fmt>
 801ea48:	69a9      	ldr	r1, [r5, #24]
 801ea4a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801ea4e:	688a      	ldr	r2, [r1, #8]
 801ea50:	445c      	add	r4, fp
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d0cd      	beq.n	801e9f2 <ai_platform_outputs_get+0x36>
 801ea56:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 801ea5a:	6829      	ldr	r1, [r5, #0]
 801ea5c:	6059      	str	r1, [r3, #4]
 801ea5e:	b111      	cbz	r1, 801ea66 <ai_platform_outputs_get+0xaa>
 801ea60:	8849      	ldrh	r1, [r1, #2]
 801ea62:	2900      	cmp	r1, #0
 801ea64:	d1bf      	bne.n	801e9e6 <ai_platform_outputs_get+0x2a>
 801ea66:	69a9      	ldr	r1, [r5, #24]
 801ea68:	2300      	movs	r3, #0
 801ea6a:	e7c2      	b.n	801e9f2 <ai_platform_outputs_get+0x36>
 801ea6c:	2218      	movs	r2, #24
 801ea6e:	2111      	movs	r1, #17
 801ea70:	f105 000c 	add.w	r0, r5, #12
 801ea74:	2600      	movs	r6, #0
 801ea76:	f000 fb3f 	bl	801f0f8 <core_set_error>
 801ea7a:	4630      	mov	r0, r6
 801ea7c:	b104      	cbz	r4, 801ea80 <ai_platform_outputs_get+0xc4>
 801ea7e:	8026      	strh	r6, [r4, #0]
 801ea80:	b005      	add	sp, #20
 801ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea86:	b2b6      	uxth	r6, r6
 801ea88:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801ea8c:	2e00      	cmp	r6, #0
 801ea8e:	d0ed      	beq.n	801ea6c <ai_platform_outputs_get+0xb0>
 801ea90:	f8da 3014 	ldr.w	r3, [sl, #20]
 801ea94:	6858      	ldr	r0, [r3, #4]
 801ea96:	e7f1      	b.n	801ea7c <ai_platform_outputs_get+0xc0>
 801ea98:	2000      	movs	r0, #0
 801ea9a:	4770      	bx	lr
 801ea9c:	a1c00100 	.word	0xa1c00100

0801eaa0 <ai_platform_network_create>:
 801eaa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eaa4:	b083      	sub	sp, #12
 801eaa6:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801eaaa:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801eaae:	b320      	cbz	r0, 801eafa <ai_platform_network_create+0x5a>
 801eab0:	6002      	str	r2, [r0, #0]
 801eab2:	4616      	mov	r6, r2
 801eab4:	461f      	mov	r7, r3
 801eab6:	4604      	mov	r4, r0
 801eab8:	f000 fb16 	bl	801f0e8 <core_init>
 801eabc:	b970      	cbnz	r0, 801eadc <ai_platform_network_create+0x3c>
 801eabe:	2530      	movs	r5, #48	@ 0x30
 801eac0:	2300      	movs	r3, #0
 801eac2:	6023      	str	r3, [r4, #0]
 801eac4:	2410      	movs	r4, #16
 801eac6:	464a      	mov	r2, r9
 801eac8:	4641      	mov	r1, r8
 801eaca:	4638      	mov	r0, r7
 801eacc:	f001 fb8c 	bl	80201e8 <ai_version_get>
 801ead0:	60b0      	str	r0, [r6, #8]
 801ead2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801ead6:	b003      	add	sp, #12
 801ead8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eadc:	2200      	movs	r2, #0
 801eade:	4641      	mov	r1, r8
 801eae0:	4638      	mov	r0, r7
 801eae2:	f001 fb81 	bl	80201e8 <ai_version_get>
 801eae6:	2200      	movs	r2, #0
 801eae8:	4605      	mov	r5, r0
 801eaea:	2105      	movs	r1, #5
 801eaec:	2001      	movs	r0, #1
 801eaee:	f001 fb7b 	bl	80201e8 <ai_version_get>
 801eaf2:	4285      	cmp	r5, r0
 801eaf4:	d008      	beq.n	801eb08 <ai_platform_network_create+0x68>
 801eaf6:	2501      	movs	r5, #1
 801eaf8:	e7e2      	b.n	801eac0 <ai_platform_network_create+0x20>
 801eafa:	2510      	movs	r5, #16
 801eafc:	462c      	mov	r4, r5
 801eafe:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801eb02:	b003      	add	sp, #12
 801eb04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb08:	4b05      	ldr	r3, [pc, #20]	@ (801eb20 <ai_platform_network_create+0x80>)
 801eb0a:	9301      	str	r3, [sp, #4]
 801eb0c:	a801      	add	r0, sp, #4
 801eb0e:	f000 faff 	bl	801f110 <ai_check_custom_types>
 801eb12:	b110      	cbz	r0, 801eb1a <ai_platform_network_create+0x7a>
 801eb14:	2400      	movs	r4, #0
 801eb16:	4625      	mov	r5, r4
 801eb18:	e7d5      	b.n	801eac6 <ai_platform_network_create+0x26>
 801eb1a:	2502      	movs	r5, #2
 801eb1c:	e7d0      	b.n	801eac0 <ai_platform_network_create+0x20>
 801eb1e:	bf00      	nop
 801eb20:	84048403 	.word	0x84048403

0801eb24 <ai_platform_network_init>:
 801eb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb28:	4a48      	ldr	r2, [pc, #288]	@ (801ec4c <ai_platform_network_init+0x128>)
 801eb2a:	4604      	mov	r4, r0
 801eb2c:	6800      	ldr	r0, [r0, #0]
 801eb2e:	460b      	mov	r3, r1
 801eb30:	ea00 0102 	and.w	r1, r0, r2
 801eb34:	4382      	bics	r2, r0
 801eb36:	d13b      	bne.n	801ebb0 <ai_platform_network_init+0x8c>
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d078      	beq.n	801ec2e <ai_platform_network_init+0x10a>
 801eb3c:	4a44      	ldr	r2, [pc, #272]	@ (801ec50 <ai_platform_network_init+0x12c>)
 801eb3e:	681d      	ldr	r5, [r3, #0]
 801eb40:	4295      	cmp	r5, r2
 801eb42:	d10a      	bne.n	801eb5a <ai_platform_network_init+0x36>
 801eb44:	4288      	cmp	r0, r1
 801eb46:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 801eb4a:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 801eb4e:	d03d      	beq.n	801ebcc <ai_platform_network_init+0xa8>
 801eb50:	2303      	movs	r3, #3
 801eb52:	6123      	str	r3, [r4, #16]
 801eb54:	4620      	mov	r0, r4
 801eb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb5a:	2101      	movs	r1, #1
 801eb5c:	4618      	mov	r0, r3
 801eb5e:	461d      	mov	r5, r3
 801eb60:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801eb64:	f7ff fd92 	bl	801e68c <ai_buffer_get_size>
 801eb68:	f105 071c 	add.w	r7, r5, #28
 801eb6c:	4606      	mov	r6, r0
 801eb6e:	2101      	movs	r1, #1
 801eb70:	4638      	mov	r0, r7
 801eb72:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801eb76:	f7ff fd89 	bl	801e68c <ai_buffer_get_size>
 801eb7a:	2e00      	cmp	r6, #0
 801eb7c:	bf0a      	itet	eq
 801eb7e:	4631      	moveq	r1, r6
 801eb80:	2101      	movne	r1, #1
 801eb82:	4635      	moveq	r5, r6
 801eb84:	b1b0      	cbz	r0, 801ebb4 <ai_platform_network_init+0x90>
 801eb86:	f1b9 0f00 	cmp.w	r9, #0
 801eb8a:	d057      	beq.n	801ec3c <ai_platform_network_init+0x118>
 801eb8c:	f04f 0e01 	mov.w	lr, #1
 801eb90:	f1b8 0f00 	cmp.w	r8, #0
 801eb94:	d011      	beq.n	801ebba <ai_platform_network_init+0x96>
 801eb96:	4b2d      	ldr	r3, [pc, #180]	@ (801ec4c <ai_platform_network_init+0x128>)
 801eb98:	6822      	ldr	r2, [r4, #0]
 801eb9a:	429a      	cmp	r2, r3
 801eb9c:	d1d8      	bne.n	801eb50 <ai_platform_network_init+0x2c>
 801eb9e:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801eba0:	428b      	cmp	r3, r1
 801eba2:	d21b      	bcs.n	801ebdc <ai_platform_network_init+0xb8>
 801eba4:	2212      	movs	r2, #18
 801eba6:	2116      	movs	r1, #22
 801eba8:	f104 000c 	add.w	r0, r4, #12
 801ebac:	f000 faa4 	bl	801f0f8 <core_set_error>
 801ebb0:	2000      	movs	r0, #0
 801ebb2:	e7d0      	b.n	801eb56 <ai_platform_network_init+0x32>
 801ebb4:	4607      	mov	r7, r0
 801ebb6:	4686      	mov	lr, r0
 801ebb8:	e7ea      	b.n	801eb90 <ai_platform_network_init+0x6c>
 801ebba:	2e00      	cmp	r6, #0
 801ebbc:	d0eb      	beq.n	801eb96 <ai_platform_network_init+0x72>
 801ebbe:	2212      	movs	r2, #18
 801ebc0:	2110      	movs	r1, #16
 801ebc2:	f104 000c 	add.w	r0, r4, #12
 801ebc6:	f000 fa97 	bl	801f0f8 <core_set_error>
 801ebca:	e7f1      	b.n	801ebb0 <ai_platform_network_init+0x8c>
 801ebcc:	e9c4 6308 	strd	r6, r3, [r4, #32]
 801ebd0:	62e5      	str	r5, [r4, #44]	@ 0x2c
 801ebd2:	62a2      	str	r2, [r4, #40]	@ 0x28
 801ebd4:	4620      	mov	r0, r4
 801ebd6:	f000 fac5 	bl	801f164 <ai_layers_init_all>
 801ebda:	e7b9      	b.n	801eb50 <ai_platform_network_init+0x2c>
 801ebdc:	b1e1      	cbz	r1, 801ec18 <ai_platform_network_init+0xf4>
 801ebde:	46ac      	mov	ip, r5
 801ebe0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ebe4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801ebe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ebe8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801ebec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801ebf0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801ebf2:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 801ebf6:	4573      	cmp	r3, lr
 801ebf8:	6226      	str	r6, [r4, #32]
 801ebfa:	d311      	bcc.n	801ec20 <ai_platform_network_init+0xfc>
 801ebfc:	f1be 0f00 	cmp.w	lr, #0
 801ec00:	d007      	beq.n	801ec12 <ai_platform_network_init+0xee>
 801ec02:	463e      	mov	r6, r7
 801ec04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ec06:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 801ec08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ec0a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ec0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801ec12:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801ec16:	e7dc      	b.n	801ebd2 <ai_platform_network_init+0xae>
 801ec18:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801ec1a:	6221      	str	r1, [r4, #32]
 801ec1c:	4573      	cmp	r3, lr
 801ec1e:	d2ed      	bcs.n	801ebfc <ai_platform_network_init+0xd8>
 801ec20:	2213      	movs	r2, #19
 801ec22:	2116      	movs	r1, #22
 801ec24:	f104 000c 	add.w	r0, r4, #12
 801ec28:	f000 fa66 	bl	801f0f8 <core_set_error>
 801ec2c:	e7c0      	b.n	801ebb0 <ai_platform_network_init+0x8c>
 801ec2e:	2211      	movs	r2, #17
 801ec30:	2110      	movs	r1, #16
 801ec32:	f104 000c 	add.w	r0, r4, #12
 801ec36:	f000 fa5f 	bl	801f0f8 <core_set_error>
 801ec3a:	e7b9      	b.n	801ebb0 <ai_platform_network_init+0x8c>
 801ec3c:	2213      	movs	r2, #19
 801ec3e:	2110      	movs	r1, #16
 801ec40:	f104 000c 	add.w	r0, r4, #12
 801ec44:	f000 fa58 	bl	801f0f8 <core_set_error>
 801ec48:	e7b2      	b.n	801ebb0 <ai_platform_network_init+0x8c>
 801ec4a:	bf00      	nop
 801ec4c:	a1c00100 	.word	0xa1c00100
 801ec50:	a1facade 	.word	0xa1facade

0801ec54 <ai_platform_network_post_init>:
 801ec54:	4b15      	ldr	r3, [pc, #84]	@ (801ecac <ai_platform_network_post_init+0x58>)
 801ec56:	6802      	ldr	r2, [r0, #0]
 801ec58:	ea02 0103 	and.w	r1, r2, r3
 801ec5c:	4393      	bics	r3, r2
 801ec5e:	d123      	bne.n	801eca8 <ai_platform_network_post_init+0x54>
 801ec60:	b570      	push	{r4, r5, r6, lr}
 801ec62:	6903      	ldr	r3, [r0, #16]
 801ec64:	079b      	lsls	r3, r3, #30
 801ec66:	4604      	mov	r4, r0
 801ec68:	d503      	bpl.n	801ec72 <ai_platform_network_post_init+0x1e>
 801ec6a:	428a      	cmp	r2, r1
 801ec6c:	d008      	beq.n	801ec80 <ai_platform_network_post_init+0x2c>
 801ec6e:	2001      	movs	r0, #1
 801ec70:	bd70      	pop	{r4, r5, r6, pc}
 801ec72:	2210      	movs	r2, #16
 801ec74:	2111      	movs	r1, #17
 801ec76:	300c      	adds	r0, #12
 801ec78:	f000 fa3e 	bl	801f0f8 <core_set_error>
 801ec7c:	2000      	movs	r0, #0
 801ec7e:	bd70      	pop	{r4, r5, r6, pc}
 801ec80:	f000 fa80 	bl	801f184 <ai_layers_post_init_all>
 801ec84:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801ec86:	2e00      	cmp	r6, #0
 801ec88:	d0f1      	beq.n	801ec6e <ai_platform_network_post_init+0x1a>
 801ec8a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801ec8c:	2d00      	cmp	r5, #0
 801ec8e:	d0ee      	beq.n	801ec6e <ai_platform_network_post_init+0x1a>
 801ec90:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801ec92:	4629      	mov	r1, r5
 801ec94:	2000      	movs	r0, #0
 801ec96:	47b0      	blx	r6
 801ec98:	692b      	ldr	r3, [r5, #16]
 801ec9a:	42ab      	cmp	r3, r5
 801ec9c:	d0e7      	beq.n	801ec6e <ai_platform_network_post_init+0x1a>
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	d0e5      	beq.n	801ec6e <ai_platform_network_post_init+0x1a>
 801eca2:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801eca4:	461d      	mov	r5, r3
 801eca6:	e7f3      	b.n	801ec90 <ai_platform_network_post_init+0x3c>
 801eca8:	2000      	movs	r0, #0
 801ecaa:	4770      	bx	lr
 801ecac:	a1c00100 	.word	0xa1c00100

0801ecb0 <ai_platform_network_process>:
 801ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecb4:	4bb7      	ldr	r3, [pc, #732]	@ (801ef94 <ai_platform_network_process+0x2e4>)
 801ecb6:	4607      	mov	r7, r0
 801ecb8:	6800      	ldr	r0, [r0, #0]
 801ecba:	4383      	bics	r3, r0
 801ecbc:	b085      	sub	sp, #20
 801ecbe:	f040 812d 	bne.w	801ef1c <ai_platform_network_process+0x26c>
 801ecc2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	f000 811d 	beq.w	801ef04 <ai_platform_network_process+0x254>
 801ecca:	693b      	ldr	r3, [r7, #16]
 801eccc:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801ecd0:	f003 0303 	and.w	r3, r3, #3
 801ecd4:	2600      	movs	r6, #0
 801ecd6:	2b03      	cmp	r3, #3
 801ecd8:	61be      	str	r6, [r7, #24]
 801ecda:	f040 8129 	bne.w	801ef30 <ai_platform_network_process+0x280>
 801ecde:	2900      	cmp	r1, #0
 801ece0:	f000 8116 	beq.w	801ef10 <ai_platform_network_process+0x260>
 801ece4:	f1b9 0f00 	cmp.w	r9, #0
 801ece8:	f000 8112 	beq.w	801ef10 <ai_platform_network_process+0x260>
 801ecec:	f8b9 3000 	ldrh.w	r3, [r9]
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	f000 810d 	beq.w	801ef10 <ai_platform_network_process+0x260>
 801ecf6:	698b      	ldr	r3, [r1, #24]
 801ecf8:	e9cd 7202 	strd	r7, r2, [sp, #8]
 801ecfc:	f8d3 b000 	ldr.w	fp, [r3]
 801ed00:	460c      	mov	r4, r1
 801ed02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ed06:	2b00      	cmp	r3, #0
 801ed08:	d072      	beq.n	801edf0 <ai_platform_network_process+0x140>
 801ed0a:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801ed0e:	2d00      	cmp	r5, #0
 801ed10:	d06e      	beq.n	801edf0 <ai_platform_network_process+0x140>
 801ed12:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ed16:	f8d3 a000 	ldr.w	sl, [r3]
 801ed1a:	0133      	lsls	r3, r6, #4
 801ed1c:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801ed20:	9301      	str	r3, [sp, #4]
 801ed22:	f000 81ba 	beq.w	801f09a <ai_platform_network_process+0x3ea>
 801ed26:	69ab      	ldr	r3, [r5, #24]
 801ed28:	2101      	movs	r1, #1
 801ed2a:	4620      	mov	r0, r4
 801ed2c:	685f      	ldr	r7, [r3, #4]
 801ed2e:	f7ff fcad 	bl	801e68c <ai_buffer_get_size>
 801ed32:	4287      	cmp	r7, r0
 801ed34:	f0c0 8103 	bcc.w	801ef3e <ai_platform_network_process+0x28e>
 801ed38:	68e8      	ldr	r0, [r5, #12]
 801ed3a:	69a1      	ldr	r1, [r4, #24]
 801ed3c:	68c2      	ldr	r2, [r0, #12]
 801ed3e:	68cb      	ldr	r3, [r1, #12]
 801ed40:	429a      	cmp	r2, r3
 801ed42:	f040 80fc 	bne.w	801ef3e <ai_platform_network_process+0x28e>
 801ed46:	6882      	ldr	r2, [r0, #8]
 801ed48:	688b      	ldr	r3, [r1, #8]
 801ed4a:	429a      	cmp	r2, r3
 801ed4c:	f040 80f7 	bne.w	801ef3e <ai_platform_network_process+0x28e>
 801ed50:	6842      	ldr	r2, [r0, #4]
 801ed52:	684b      	ldr	r3, [r1, #4]
 801ed54:	429a      	cmp	r2, r3
 801ed56:	f040 80f2 	bne.w	801ef3e <ai_platform_network_process+0x28e>
 801ed5a:	69ab      	ldr	r3, [r5, #24]
 801ed5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ed60:	f001 fa30 	bl	80201c4 <ai_array_get_data_byte_size>
 801ed64:	9001      	str	r0, [sp, #4]
 801ed66:	4628      	mov	r0, r5
 801ed68:	f001 fa44 	bl	80201f4 <get_tensor_byte_size>
 801ed6c:	9b01      	ldr	r3, [sp, #4]
 801ed6e:	4283      	cmp	r3, r0
 801ed70:	f0c0 80e5 	bcc.w	801ef3e <ai_platform_network_process+0x28e>
 801ed74:	69ab      	ldr	r3, [r5, #24]
 801ed76:	6818      	ldr	r0, [r3, #0]
 801ed78:	f001 f9b4 	bl	80200e4 <ai_array_to_buffer_fmt>
 801ed7c:	6823      	ldr	r3, [r4, #0]
 801ed7e:	4058      	eors	r0, r3
 801ed80:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 801ed84:	f040 8193 	bne.w	801f0ae <ai_platform_network_process+0x3fe>
 801ed88:	6863      	ldr	r3, [r4, #4]
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	f000 8185 	beq.w	801f09a <ai_platform_network_process+0x3ea>
 801ed90:	69a3      	ldr	r3, [r4, #24]
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	f000 8182 	beq.w	801f09e <ai_platform_network_process+0x3ee>
 801ed9a:	459b      	cmp	fp, r3
 801ed9c:	4628      	mov	r0, r5
 801ed9e:	bf38      	it	cc
 801eda0:	469b      	movcc	fp, r3
 801eda2:	f001 fa27 	bl	80201f4 <get_tensor_byte_size>
 801eda6:	f8c8 0008 	str.w	r0, [r8, #8]
 801edaa:	69a3      	ldr	r3, [r4, #24]
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	fb00 f303 	mul.w	r3, r0, r3
 801edb2:	f8c8 300c 	str.w	r3, [r8, #12]
 801edb6:	6861      	ldr	r1, [r4, #4]
 801edb8:	f8c8 1004 	str.w	r1, [r8, #4]
 801edbc:	0132      	lsls	r2, r6, #4
 801edbe:	440b      	add	r3, r1
 801edc0:	f84a 3002 	str.w	r3, [sl, r2]
 801edc4:	69a8      	ldr	r0, [r5, #24]
 801edc6:	6803      	ldr	r3, [r0, #0]
 801edc8:	009a      	lsls	r2, r3, #2
 801edca:	f106 0601 	add.w	r6, r6, #1
 801edce:	f104 041c 	add.w	r4, r4, #28
 801edd2:	f100 80a7 	bmi.w	801ef24 <ai_platform_network_process+0x274>
 801edd6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801edda:	1a9b      	subs	r3, r3, r2
 801eddc:	4419      	add	r1, r3
 801edde:	6081      	str	r1, [r0, #8]
 801ede0:	69ab      	ldr	r3, [r5, #24]
 801ede2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ede6:	60da      	str	r2, [r3, #12]
 801ede8:	f8b9 3000 	ldrh.w	r3, [r9]
 801edec:	42b3      	cmp	r3, r6
 801edee:	d888      	bhi.n	801ed02 <ai_platform_network_process+0x52>
 801edf0:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 801edf4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801edf6:	f1b8 0f00 	cmp.w	r8, #0
 801edfa:	f000 80b5 	beq.w	801ef68 <ai_platform_network_process+0x2b8>
 801edfe:	2b01      	cmp	r3, #1
 801ee00:	f240 80a5 	bls.w	801ef4e <ai_platform_network_process+0x29e>
 801ee04:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801ee08:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	f000 809e 	beq.w	801ef4e <ai_platform_network_process+0x29e>
 801ee12:	4645      	mov	r5, r8
 801ee14:	2600      	movs	r6, #0
 801ee16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	f000 80a3 	beq.w	801ef66 <ai_platform_network_process+0x2b6>
 801ee20:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801ee24:	2c00      	cmp	r4, #0
 801ee26:	f000 809e 	beq.w	801ef66 <ai_platform_network_process+0x2b6>
 801ee2a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ee2e:	f8d3 a000 	ldr.w	sl, [r3]
 801ee32:	0133      	lsls	r3, r6, #4
 801ee34:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801ee38:	9301      	str	r3, [sp, #4]
 801ee3a:	f000 8140 	beq.w	801f0be <ai_platform_network_process+0x40e>
 801ee3e:	69a3      	ldr	r3, [r4, #24]
 801ee40:	2101      	movs	r1, #1
 801ee42:	685b      	ldr	r3, [r3, #4]
 801ee44:	9301      	str	r3, [sp, #4]
 801ee46:	4628      	mov	r0, r5
 801ee48:	f7ff fc20 	bl	801e68c <ai_buffer_get_size>
 801ee4c:	9b01      	ldr	r3, [sp, #4]
 801ee4e:	4283      	cmp	r3, r0
 801ee50:	d37d      	bcc.n	801ef4e <ai_platform_network_process+0x29e>
 801ee52:	68e0      	ldr	r0, [r4, #12]
 801ee54:	69a9      	ldr	r1, [r5, #24]
 801ee56:	68c2      	ldr	r2, [r0, #12]
 801ee58:	68cb      	ldr	r3, [r1, #12]
 801ee5a:	429a      	cmp	r2, r3
 801ee5c:	d177      	bne.n	801ef4e <ai_platform_network_process+0x29e>
 801ee5e:	6882      	ldr	r2, [r0, #8]
 801ee60:	688b      	ldr	r3, [r1, #8]
 801ee62:	429a      	cmp	r2, r3
 801ee64:	d173      	bne.n	801ef4e <ai_platform_network_process+0x29e>
 801ee66:	6842      	ldr	r2, [r0, #4]
 801ee68:	684b      	ldr	r3, [r1, #4]
 801ee6a:	429a      	cmp	r2, r3
 801ee6c:	d16f      	bne.n	801ef4e <ai_platform_network_process+0x29e>
 801ee6e:	69a3      	ldr	r3, [r4, #24]
 801ee70:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ee74:	f001 f9a6 	bl	80201c4 <ai_array_get_data_byte_size>
 801ee78:	9001      	str	r0, [sp, #4]
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	f001 f9ba 	bl	80201f4 <get_tensor_byte_size>
 801ee80:	9b01      	ldr	r3, [sp, #4]
 801ee82:	4283      	cmp	r3, r0
 801ee84:	d363      	bcc.n	801ef4e <ai_platform_network_process+0x29e>
 801ee86:	69a3      	ldr	r3, [r4, #24]
 801ee88:	6818      	ldr	r0, [r3, #0]
 801ee8a:	f001 f92b 	bl	80200e4 <ai_array_to_buffer_fmt>
 801ee8e:	682b      	ldr	r3, [r5, #0]
 801ee90:	4043      	eors	r3, r0
 801ee92:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 801ee96:	f040 8119 	bne.w	801f0cc <ai_platform_network_process+0x41c>
 801ee9a:	686b      	ldr	r3, [r5, #4]
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	f000 810e 	beq.w	801f0be <ai_platform_network_process+0x40e>
 801eea2:	69ab      	ldr	r3, [r5, #24]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	f000 8117 	beq.w	801f0da <ai_platform_network_process+0x42a>
 801eeac:	459b      	cmp	fp, r3
 801eeae:	4620      	mov	r0, r4
 801eeb0:	bf38      	it	cc
 801eeb2:	469b      	movcc	fp, r3
 801eeb4:	f001 f99e 	bl	80201f4 <get_tensor_byte_size>
 801eeb8:	f8c8 0008 	str.w	r0, [r8, #8]
 801eebc:	69aa      	ldr	r2, [r5, #24]
 801eebe:	6812      	ldr	r2, [r2, #0]
 801eec0:	4603      	mov	r3, r0
 801eec2:	fb02 f303 	mul.w	r3, r2, r3
 801eec6:	f8c8 300c 	str.w	r3, [r8, #12]
 801eeca:	6869      	ldr	r1, [r5, #4]
 801eecc:	f8c8 1004 	str.w	r1, [r8, #4]
 801eed0:	0132      	lsls	r2, r6, #4
 801eed2:	440b      	add	r3, r1
 801eed4:	f84a 3002 	str.w	r3, [sl, r2]
 801eed8:	69a0      	ldr	r0, [r4, #24]
 801eeda:	6803      	ldr	r3, [r0, #0]
 801eedc:	009b      	lsls	r3, r3, #2
 801eede:	f106 0601 	add.w	r6, r6, #1
 801eee2:	f105 051c 	add.w	r5, r5, #28
 801eee6:	d439      	bmi.n	801ef5c <ai_platform_network_process+0x2ac>
 801eee8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801eeec:	1a9b      	subs	r3, r3, r2
 801eeee:	4419      	add	r1, r3
 801eef0:	6081      	str	r1, [r0, #8]
 801eef2:	69a3      	ldr	r3, [r4, #24]
 801eef4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801eef8:	60da      	str	r2, [r3, #12]
 801eefa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801eefe:	429e      	cmp	r6, r3
 801ef00:	d389      	bcc.n	801ee16 <ai_platform_network_process+0x166>
 801ef02:	e030      	b.n	801ef66 <ai_platform_network_process+0x2b6>
 801ef04:	693a      	ldr	r2, [r7, #16]
 801ef06:	61bb      	str	r3, [r7, #24]
 801ef08:	f002 0203 	and.w	r2, r2, #3
 801ef0c:	2a03      	cmp	r2, #3
 801ef0e:	d10f      	bne.n	801ef30 <ai_platform_network_process+0x280>
 801ef10:	2217      	movs	r2, #23
 801ef12:	2112      	movs	r1, #18
 801ef14:	f107 000c 	add.w	r0, r7, #12
 801ef18:	f000 f8ee 	bl	801f0f8 <core_set_error>
 801ef1c:	2000      	movs	r0, #0
 801ef1e:	b005      	add	sp, #20
 801ef20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef24:	f8b9 3000 	ldrh.w	r3, [r9]
 801ef28:	429e      	cmp	r6, r3
 801ef2a:	f4ff aeea 	bcc.w	801ed02 <ai_platform_network_process+0x52>
 801ef2e:	e75f      	b.n	801edf0 <ai_platform_network_process+0x140>
 801ef30:	2230      	movs	r2, #48	@ 0x30
 801ef32:	2111      	movs	r1, #17
 801ef34:	f107 000c 	add.w	r0, r7, #12
 801ef38:	f000 f8de 	bl	801f0f8 <core_set_error>
 801ef3c:	e7ee      	b.n	801ef1c <ai_platform_network_process+0x26c>
 801ef3e:	9f02      	ldr	r7, [sp, #8]
 801ef40:	2218      	movs	r2, #24
 801ef42:	2112      	movs	r1, #18
 801ef44:	f107 000c 	add.w	r0, r7, #12
 801ef48:	f000 f8d6 	bl	801f0f8 <core_set_error>
 801ef4c:	e7e6      	b.n	801ef1c <ai_platform_network_process+0x26c>
 801ef4e:	2218      	movs	r2, #24
 801ef50:	2113      	movs	r1, #19
 801ef52:	f107 000c 	add.w	r0, r7, #12
 801ef56:	f000 f8cf 	bl	801f0f8 <core_set_error>
 801ef5a:	e7df      	b.n	801ef1c <ai_platform_network_process+0x26c>
 801ef5c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801ef60:	429e      	cmp	r6, r3
 801ef62:	f4ff af58 	bcc.w	801ee16 <ai_platform_network_process+0x166>
 801ef66:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801ef68:	fa1f fb8b 	uxth.w	fp, fp
 801ef6c:	f8a7 b018 	strh.w	fp, [r7, #24]
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	f000 808c 	beq.w	801f08e <ai_platform_network_process+0x3de>
 801ef76:	2b01      	cmp	r3, #1
 801ef78:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 801ef7a:	f000 808b 	beq.w	801f094 <ai_platform_network_process+0x3e4>
 801ef7e:	f106 080c 	add.w	r8, r6, #12
 801ef82:	8b78      	ldrh	r0, [r7, #26]
 801ef84:	4583      	cmp	fp, r0
 801ef86:	d9ca      	bls.n	801ef1e <ai_platform_network_process+0x26e>
 801ef88:	4645      	mov	r5, r8
 801ef8a:	46bb      	mov	fp, r7
 801ef8c:	f04f 0800 	mov.w	r8, #0
 801ef90:	b9ae      	cbnz	r6, 801efbe <ai_platform_network_process+0x30e>
 801ef92:	e02d      	b.n	801eff0 <ai_platform_network_process+0x340>
 801ef94:	a1c00100 	.word	0xa1c00100
 801ef98:	68df      	ldr	r7, [r3, #12]
 801ef9a:	1bc9      	subs	r1, r1, r7
 801ef9c:	4408      	add	r0, r1
 801ef9e:	6098      	str	r0, [r3, #8]
 801efa0:	6993      	ldr	r3, [r2, #24]
 801efa2:	6862      	ldr	r2, [r4, #4]
 801efa4:	60da      	str	r2, [r3, #12]
 801efa6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801efaa:	f859 200a 	ldr.w	r2, [r9, sl]
 801efae:	440b      	add	r3, r1
 801efb0:	4293      	cmp	r3, r2
 801efb2:	bf24      	itt	cs
 801efb4:	68e3      	ldrcs	r3, [r4, #12]
 801efb6:	1ad3      	subcs	r3, r2, r3
 801efb8:	6063      	str	r3, [r4, #4]
 801efba:	f108 0801 	add.w	r8, r8, #1
 801efbe:	8833      	ldrh	r3, [r6, #0]
 801efc0:	4543      	cmp	r3, r8
 801efc2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801efc6:	d913      	bls.n	801eff0 <ai_platform_network_process+0x340>
 801efc8:	6873      	ldr	r3, [r6, #4]
 801efca:	b18b      	cbz	r3, 801eff0 <ai_platform_network_process+0x340>
 801efcc:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801efd0:	b172      	cbz	r2, 801eff0 <ai_platform_network_process+0x340>
 801efd2:	68b1      	ldr	r1, [r6, #8]
 801efd4:	6993      	ldr	r3, [r2, #24]
 801efd6:	f8d1 9000 	ldr.w	r9, [r1]
 801efda:	681f      	ldr	r7, [r3, #0]
 801efdc:	6899      	ldr	r1, [r3, #8]
 801efde:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801efe2:	00bf      	lsls	r7, r7, #2
 801efe4:	6860      	ldr	r0, [r4, #4]
 801efe6:	d5d7      	bpl.n	801ef98 <ai_platform_network_process+0x2e8>
 801efe8:	68a2      	ldr	r2, [r4, #8]
 801efea:	f000 ffdd 	bl	801ffa8 <st_int8_copy>
 801efee:	e7da      	b.n	801efa6 <ai_platform_network_process+0x2f6>
 801eff0:	4658      	mov	r0, fp
 801eff2:	f000 f8e5 	bl	801f1c0 <ai_layers_forward_all>
 801eff6:	2400      	movs	r4, #0
 801eff8:	b9b5      	cbnz	r5, 801f028 <ai_platform_network_process+0x378>
 801effa:	e03b      	b.n	801f074 <ai_platform_network_process+0x3c4>
 801effc:	f859 300a 	ldr.w	r3, [r9, sl]
 801f000:	eb01 020c 	add.w	r2, r1, ip
 801f004:	429a      	cmp	r2, r3
 801f006:	bf24      	itt	cs
 801f008:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 801f00c:	1a9a      	subcs	r2, r3, r2
 801f00e:	f8c8 2004 	str.w	r2, [r8, #4]
 801f012:	6981      	ldr	r1, [r0, #24]
 801f014:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 801f018:	1bdb      	subs	r3, r3, r7
 801f01a:	441a      	add	r2, r3
 801f01c:	608a      	str	r2, [r1, #8]
 801f01e:	6983      	ldr	r3, [r0, #24]
 801f020:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f024:	60da      	str	r2, [r3, #12]
 801f026:	3401      	adds	r4, #1
 801f028:	882b      	ldrh	r3, [r5, #0]
 801f02a:	42a3      	cmp	r3, r4
 801f02c:	d922      	bls.n	801f074 <ai_platform_network_process+0x3c4>
 801f02e:	686b      	ldr	r3, [r5, #4]
 801f030:	b303      	cbz	r3, 801f074 <ai_platform_network_process+0x3c4>
 801f032:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f036:	b1e8      	cbz	r0, 801f074 <ai_platform_network_process+0x3c4>
 801f038:	68ab      	ldr	r3, [r5, #8]
 801f03a:	6982      	ldr	r2, [r0, #24]
 801f03c:	f8d3 9000 	ldr.w	r9, [r3]
 801f040:	6813      	ldr	r3, [r2, #0]
 801f042:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801f046:	009b      	lsls	r3, r3, #2
 801f048:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 801f04c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801f050:	d5d4      	bpl.n	801effc <ai_platform_network_process+0x34c>
 801f052:	6890      	ldr	r0, [r2, #8]
 801f054:	4662      	mov	r2, ip
 801f056:	f000 ffa7 	bl	801ffa8 <st_int8_copy>
 801f05a:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801f05e:	f859 200a 	ldr.w	r2, [r9, sl]
 801f062:	440b      	add	r3, r1
 801f064:	4293      	cmp	r3, r2
 801f066:	bf24      	itt	cs
 801f068:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801f06c:	1ad3      	subcs	r3, r2, r3
 801f06e:	f8c8 3004 	str.w	r3, [r8, #4]
 801f072:	e7d8      	b.n	801f026 <ai_platform_network_process+0x376>
 801f074:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 801f078:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801f07c:	3001      	adds	r0, #1
 801f07e:	b280      	uxth	r0, r0
 801f080:	4283      	cmp	r3, r0
 801f082:	f8ab 001a 	strh.w	r0, [fp, #26]
 801f086:	d881      	bhi.n	801ef8c <ai_platform_network_process+0x2dc>
 801f088:	b005      	add	sp, #20
 801f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f08e:	461e      	mov	r6, r3
 801f090:	4698      	mov	r8, r3
 801f092:	e776      	b.n	801ef82 <ai_platform_network_process+0x2d2>
 801f094:	f04f 0800 	mov.w	r8, #0
 801f098:	e773      	b.n	801ef82 <ai_platform_network_process+0x2d2>
 801f09a:	9f02      	ldr	r7, [sp, #8]
 801f09c:	e738      	b.n	801ef10 <ai_platform_network_process+0x260>
 801f09e:	9f02      	ldr	r7, [sp, #8]
 801f0a0:	2221      	movs	r2, #33	@ 0x21
 801f0a2:	2112      	movs	r1, #18
 801f0a4:	f107 000c 	add.w	r0, r7, #12
 801f0a8:	f000 f826 	bl	801f0f8 <core_set_error>
 801f0ac:	e736      	b.n	801ef1c <ai_platform_network_process+0x26c>
 801f0ae:	9f02      	ldr	r7, [sp, #8]
 801f0b0:	2219      	movs	r2, #25
 801f0b2:	2112      	movs	r1, #18
 801f0b4:	f107 000c 	add.w	r0, r7, #12
 801f0b8:	f000 f81e 	bl	801f0f8 <core_set_error>
 801f0bc:	e72e      	b.n	801ef1c <ai_platform_network_process+0x26c>
 801f0be:	2217      	movs	r2, #23
 801f0c0:	2113      	movs	r1, #19
 801f0c2:	f107 000c 	add.w	r0, r7, #12
 801f0c6:	f000 f817 	bl	801f0f8 <core_set_error>
 801f0ca:	e727      	b.n	801ef1c <ai_platform_network_process+0x26c>
 801f0cc:	2219      	movs	r2, #25
 801f0ce:	2113      	movs	r1, #19
 801f0d0:	f107 000c 	add.w	r0, r7, #12
 801f0d4:	f000 f810 	bl	801f0f8 <core_set_error>
 801f0d8:	e720      	b.n	801ef1c <ai_platform_network_process+0x26c>
 801f0da:	2221      	movs	r2, #33	@ 0x21
 801f0dc:	2113      	movs	r1, #19
 801f0de:	f107 000c 	add.w	r0, r7, #12
 801f0e2:	f000 f809 	bl	801f0f8 <core_set_error>
 801f0e6:	e719      	b.n	801ef1c <ai_platform_network_process+0x26c>

0801f0e8 <core_init>:
 801f0e8:	2001      	movs	r0, #1
 801f0ea:	4770      	bx	lr

0801f0ec <core_get_error>:
 801f0ec:	4603      	mov	r3, r0
 801f0ee:	2200      	movs	r2, #0
 801f0f0:	6800      	ldr	r0, [r0, #0]
 801f0f2:	601a      	str	r2, [r3, #0]
 801f0f4:	4770      	bx	lr
 801f0f6:	bf00      	nop

0801f0f8 <core_set_error>:
 801f0f8:	4603      	mov	r3, r0
 801f0fa:	7800      	ldrb	r0, [r0, #0]
 801f0fc:	b108      	cbz	r0, 801f102 <core_set_error+0xa>
 801f0fe:	2000      	movs	r0, #0
 801f100:	4770      	bx	lr
 801f102:	7019      	strb	r1, [r3, #0]
 801f104:	6819      	ldr	r1, [r3, #0]
 801f106:	f362 211f 	bfi	r1, r2, #8, #24
 801f10a:	2001      	movs	r0, #1
 801f10c:	6019      	str	r1, [r3, #0]
 801f10e:	4770      	bx	lr

0801f110 <ai_check_custom_types>:
 801f110:	b082      	sub	sp, #8
 801f112:	4b13      	ldr	r3, [pc, #76]	@ (801f160 <ai_check_custom_types+0x50>)
 801f114:	9301      	str	r3, [sp, #4]
 801f116:	b118      	cbz	r0, 801f120 <ai_check_custom_types+0x10>
 801f118:	7803      	ldrb	r3, [r0, #0]
 801f11a:	2b03      	cmp	r3, #3
 801f11c:	d002      	beq.n	801f124 <ai_check_custom_types+0x14>
 801f11e:	2000      	movs	r0, #0
 801f120:	b002      	add	sp, #8
 801f122:	4770      	bx	lr
 801f124:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801f128:	4293      	cmp	r3, r2
 801f12a:	d004      	beq.n	801f136 <ai_check_custom_types+0x26>
 801f12c:	2001      	movs	r0, #1
 801f12e:	f080 0001 	eor.w	r0, r0, #1
 801f132:	b002      	add	sp, #8
 801f134:	4770      	bx	lr
 801f136:	7842      	ldrb	r2, [r0, #1]
 801f138:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801f13c:	429a      	cmp	r2, r3
 801f13e:	f100 0001 	add.w	r0, r0, #1
 801f142:	d1f3      	bne.n	801f12c <ai_check_custom_types+0x1c>
 801f144:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801f148:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801f14c:	429a      	cmp	r2, r3
 801f14e:	d1ed      	bne.n	801f12c <ai_check_custom_types+0x1c>
 801f150:	7842      	ldrb	r2, [r0, #1]
 801f152:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801f156:	429a      	cmp	r2, r3
 801f158:	d1e8      	bne.n	801f12c <ai_check_custom_types+0x1c>
 801f15a:	2000      	movs	r0, #0
 801f15c:	e7e7      	b.n	801f12e <ai_check_custom_types+0x1e>
 801f15e:	bf00      	nop
 801f160:	84048403 	.word	0x84048403

0801f164 <ai_layers_init_all>:
 801f164:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801f166:	4601      	mov	r1, r0
 801f168:	b153      	cbz	r3, 801f180 <ai_layers_init_all+0x1c>
 801f16a:	2000      	movs	r0, #0
 801f16c:	461a      	mov	r2, r3
 801f16e:	60d9      	str	r1, [r3, #12]
 801f170:	691b      	ldr	r3, [r3, #16]
 801f172:	4293      	cmp	r3, r2
 801f174:	f100 0001 	add.w	r0, r0, #1
 801f178:	d003      	beq.n	801f182 <ai_layers_init_all+0x1e>
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d1f6      	bne.n	801f16c <ai_layers_init_all+0x8>
 801f17e:	4770      	bx	lr
 801f180:	4618      	mov	r0, r3
 801f182:	4770      	bx	lr

0801f184 <ai_layers_post_init_all>:
 801f184:	b538      	push	{r3, r4, r5, lr}
 801f186:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801f188:	b1b4      	cbz	r4, 801f1b8 <ai_layers_post_init_all+0x34>
 801f18a:	6863      	ldr	r3, [r4, #4]
 801f18c:	07db      	lsls	r3, r3, #31
 801f18e:	f04f 0500 	mov.w	r5, #0
 801f192:	d504      	bpl.n	801f19e <ai_layers_post_init_all+0x1a>
 801f194:	6a23      	ldr	r3, [r4, #32]
 801f196:	4620      	mov	r0, r4
 801f198:	b10b      	cbz	r3, 801f19e <ai_layers_post_init_all+0x1a>
 801f19a:	4798      	blx	r3
 801f19c:	3501      	adds	r5, #1
 801f19e:	6923      	ldr	r3, [r4, #16]
 801f1a0:	42a3      	cmp	r3, r4
 801f1a2:	d007      	beq.n	801f1b4 <ai_layers_post_init_all+0x30>
 801f1a4:	b133      	cbz	r3, 801f1b4 <ai_layers_post_init_all+0x30>
 801f1a6:	461c      	mov	r4, r3
 801f1a8:	6863      	ldr	r3, [r4, #4]
 801f1aa:	07db      	lsls	r3, r3, #31
 801f1ac:	d4f2      	bmi.n	801f194 <ai_layers_post_init_all+0x10>
 801f1ae:	6923      	ldr	r3, [r4, #16]
 801f1b0:	42a3      	cmp	r3, r4
 801f1b2:	d1f7      	bne.n	801f1a4 <ai_layers_post_init_all+0x20>
 801f1b4:	4628      	mov	r0, r5
 801f1b6:	bd38      	pop	{r3, r4, r5, pc}
 801f1b8:	4625      	mov	r5, r4
 801f1ba:	4628      	mov	r0, r5
 801f1bc:	bd38      	pop	{r3, r4, r5, pc}
 801f1be:	bf00      	nop

0801f1c0 <ai_layers_forward_all>:
 801f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1c4:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801f1c8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801f1ca:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801f1cc:	4604      	mov	r4, r0
 801f1ce:	f1b8 0f00 	cmp.w	r8, #0
 801f1d2:	d02a      	beq.n	801f22a <ai_layers_forward_all+0x6a>
 801f1d4:	b32d      	cbz	r5, 801f222 <ai_layers_forward_all+0x62>
 801f1d6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801f1d8:	4629      	mov	r1, r5
 801f1da:	2001      	movs	r0, #1
 801f1dc:	47c0      	blx	r8
 801f1de:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801f1e0:	b1fe      	cbz	r6, 801f222 <ai_layers_forward_all+0x62>
 801f1e2:	2700      	movs	r7, #0
 801f1e4:	4631      	mov	r1, r6
 801f1e6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801f1e8:	2002      	movs	r0, #2
 801f1ea:	47c0      	blx	r8
 801f1ec:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801f1ee:	4628      	mov	r0, r5
 801f1f0:	696b      	ldr	r3, [r5, #20]
 801f1f2:	4798      	blx	r3
 801f1f4:	692e      	ldr	r6, [r5, #16]
 801f1f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801f1f8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801f1fa:	42b5      	cmp	r5, r6
 801f1fc:	f04f 0003 	mov.w	r0, #3
 801f200:	d007      	beq.n	801f212 <ai_layers_forward_all+0x52>
 801f202:	47c0      	blx	r8
 801f204:	3701      	adds	r7, #1
 801f206:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801f208:	2e00      	cmp	r6, #0
 801f20a:	d1eb      	bne.n	801f1e4 <ai_layers_forward_all+0x24>
 801f20c:	4638      	mov	r0, r7
 801f20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f212:	2003      	movs	r0, #3
 801f214:	47c0      	blx	r8
 801f216:	2300      	movs	r3, #0
 801f218:	3701      	adds	r7, #1
 801f21a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801f21c:	4638      	mov	r0, r7
 801f21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f222:	2700      	movs	r7, #0
 801f224:	4638      	mov	r0, r7
 801f226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f22a:	2d00      	cmp	r5, #0
 801f22c:	d0f9      	beq.n	801f222 <ai_layers_forward_all+0x62>
 801f22e:	4647      	mov	r7, r8
 801f230:	696b      	ldr	r3, [r5, #20]
 801f232:	4628      	mov	r0, r5
 801f234:	4798      	blx	r3
 801f236:	462b      	mov	r3, r5
 801f238:	692d      	ldr	r5, [r5, #16]
 801f23a:	429d      	cmp	r5, r3
 801f23c:	d004      	beq.n	801f248 <ai_layers_forward_all+0x88>
 801f23e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801f240:	3701      	adds	r7, #1
 801f242:	2d00      	cmp	r5, #0
 801f244:	d1f4      	bne.n	801f230 <ai_layers_forward_all+0x70>
 801f246:	e7e1      	b.n	801f20c <ai_layers_forward_all+0x4c>
 801f248:	2300      	movs	r3, #0
 801f24a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801f24c:	3701      	adds	r7, #1
 801f24e:	e7dd      	b.n	801f20c <ai_layers_forward_all+0x4c>

0801f250 <forward_dense>:
 801f250:	6982      	ldr	r2, [r0, #24]
 801f252:	8813      	ldrh	r3, [r2, #0]
 801f254:	b90b      	cbnz	r3, 801f25a <forward_dense+0xa>
 801f256:	685b      	ldr	r3, [r3, #4]
 801f258:	deff      	udf	#255	@ 0xff
 801f25a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f25e:	6857      	ldr	r7, [r2, #4]
 801f260:	6878      	ldr	r0, [r7, #4]
 801f262:	b08f      	sub	sp, #60	@ 0x3c
 801f264:	b100      	cbz	r0, 801f268 <forward_dense+0x18>
 801f266:	6800      	ldr	r0, [r0, #0]
 801f268:	2b01      	cmp	r3, #1
 801f26a:	d05d      	beq.n	801f328 <forward_dense+0xd8>
 801f26c:	693a      	ldr	r2, [r7, #16]
 801f26e:	b102      	cbz	r2, 801f272 <forward_dense+0x22>
 801f270:	6812      	ldr	r2, [r2, #0]
 801f272:	2b02      	cmp	r3, #2
 801f274:	d032      	beq.n	801f2dc <forward_dense+0x8c>
 801f276:	69fd      	ldr	r5, [r7, #28]
 801f278:	2d00      	cmp	r5, #0
 801f27a:	d053      	beq.n	801f324 <forward_dense+0xd4>
 801f27c:	8b3c      	ldrh	r4, [r7, #24]
 801f27e:	6829      	ldr	r1, [r5, #0]
 801f280:	2c01      	cmp	r4, #1
 801f282:	d954      	bls.n	801f32e <forward_dense+0xde>
 801f284:	686d      	ldr	r5, [r5, #4]
 801f286:	698e      	ldr	r6, [r1, #24]
 801f288:	68c4      	ldr	r4, [r0, #12]
 801f28a:	68d1      	ldr	r1, [r2, #12]
 801f28c:	f8d4 e004 	ldr.w	lr, [r4, #4]
 801f290:	f8d1 9004 	ldr.w	r9, [r1, #4]
 801f294:	e9d1 4c02 	ldrd	r4, ip, [r1, #8]
 801f298:	6831      	ldr	r1, [r6, #0]
 801f29a:	2b03      	cmp	r3, #3
 801f29c:	fb0c f804 	mul.w	r8, ip, r4
 801f2a0:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 801f2a4:	d045      	beq.n	801f332 <forward_dense+0xe2>
 801f2a6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801f2a8:	b11c      	cbz	r4, 801f2b2 <forward_dense+0x62>
 801f2aa:	6824      	ldr	r4, [r4, #0]
 801f2ac:	b10c      	cbz	r4, 801f2b2 <forward_dense+0x62>
 801f2ae:	69a3      	ldr	r3, [r4, #24]
 801f2b0:	689c      	ldr	r4, [r3, #8]
 801f2b2:	6983      	ldr	r3, [r0, #24]
 801f2b4:	6992      	ldr	r2, [r2, #24]
 801f2b6:	6899      	ldr	r1, [r3, #8]
 801f2b8:	6890      	ldr	r0, [r2, #8]
 801f2ba:	b10d      	cbz	r5, 801f2c0 <forward_dense+0x70>
 801f2bc:	69ab      	ldr	r3, [r5, #24]
 801f2be:	689d      	ldr	r5, [r3, #8]
 801f2c0:	4f1d      	ldr	r7, [pc, #116]	@ (801f338 <forward_dense+0xe8>)
 801f2c2:	45bc      	cmp	ip, r7
 801f2c4:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 801f2c8:	d022      	beq.n	801f310 <forward_dense+0xc0>
 801f2ca:	4e1c      	ldr	r6, [pc, #112]	@ (801f33c <forward_dense+0xec>)
 801f2cc:	45b4      	cmp	ip, r6
 801f2ce:	d015      	beq.n	801f2fc <forward_dense+0xac>
 801f2d0:	4b1b      	ldr	r3, [pc, #108]	@ (801f340 <forward_dense+0xf0>)
 801f2d2:	459c      	cmp	ip, r3
 801f2d4:	d005      	beq.n	801f2e2 <forward_dense+0x92>
 801f2d6:	b00f      	add	sp, #60	@ 0x3c
 801f2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f2dc:	2300      	movs	r3, #0
 801f2de:	685b      	ldr	r3, [r3, #4]
 801f2e0:	deff      	udf	#255	@ 0xff
 801f2e2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801f2e6:	a807      	add	r0, sp, #28
 801f2e8:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 801f2ec:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 801f2f0:	9209      	str	r2, [sp, #36]	@ 0x24
 801f2f2:	f000 f965 	bl	801f5c0 <forward_lite_dense_if32of32wf32>
 801f2f6:	b00f      	add	sp, #60	@ 0x3c
 801f2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f2fc:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801f300:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801f304:	9400      	str	r4, [sp, #0]
 801f306:	f000 fb35 	bl	801f974 <forward_lite_dense_if32of32wf32_lut4>
 801f30a:	b00f      	add	sp, #60	@ 0x3c
 801f30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f310:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801f314:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801f318:	9400      	str	r4, [sp, #0]
 801f31a:	f000 fca7 	bl	801fc6c <forward_lite_dense_if32of32wf32_lut8>
 801f31e:	b00f      	add	sp, #60	@ 0x3c
 801f320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f324:	4629      	mov	r1, r5
 801f326:	e7ae      	b.n	801f286 <forward_dense+0x36>
 801f328:	2300      	movs	r3, #0
 801f32a:	685b      	ldr	r3, [r3, #4]
 801f32c:	deff      	udf	#255	@ 0xff
 801f32e:	2500      	movs	r5, #0
 801f330:	e7a9      	b.n	801f286 <forward_dense+0x36>
 801f332:	2300      	movs	r3, #0
 801f334:	685b      	ldr	r3, [r3, #4]
 801f336:	deff      	udf	#255	@ 0xff
 801f338:	00d01040 	.word	0x00d01040
 801f33c:	00f01040 	.word	0x00f01040
 801f340:	00821040 	.word	0x00821040

0801f344 <forward_sigmoid>:
 801f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f346:	6982      	ldr	r2, [r0, #24]
 801f348:	8813      	ldrh	r3, [r2, #0]
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d038      	beq.n	801f3c0 <forward_sigmoid+0x7c>
 801f34e:	6852      	ldr	r2, [r2, #4]
 801f350:	6854      	ldr	r4, [r2, #4]
 801f352:	b104      	cbz	r4, 801f356 <forward_sigmoid+0x12>
 801f354:	6824      	ldr	r4, [r4, #0]
 801f356:	2b01      	cmp	r3, #1
 801f358:	d031      	beq.n	801f3be <forward_sigmoid+0x7a>
 801f35a:	6915      	ldr	r5, [r2, #16]
 801f35c:	b105      	cbz	r5, 801f360 <forward_sigmoid+0x1c>
 801f35e:	682d      	ldr	r5, [r5, #0]
 801f360:	68a3      	ldr	r3, [r4, #8]
 801f362:	0a1b      	lsrs	r3, r3, #8
 801f364:	d02e      	beq.n	801f3c4 <forward_sigmoid+0x80>
 801f366:	68e0      	ldr	r0, [r4, #12]
 801f368:	2201      	movs	r2, #1
 801f36a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f36e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f372:	4298      	cmp	r0, r3
 801f374:	fb01 f202 	mul.w	r2, r1, r2
 801f378:	d1f9      	bne.n	801f36e <forward_sigmoid+0x2a>
 801f37a:	69a7      	ldr	r7, [r4, #24]
 801f37c:	69a9      	ldr	r1, [r5, #24]
 801f37e:	68bb      	ldr	r3, [r7, #8]
 801f380:	688d      	ldr	r5, [r1, #8]
 801f382:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f386:	3a01      	subs	r2, #1
 801f388:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f38c:	42a3      	cmp	r3, r4
 801f38e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801f392:	d813      	bhi.n	801f3bc <forward_sigmoid+0x78>
 801f394:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
 801f398:	f854 0904 	ldr.w	r0, [r4], #-4
 801f39c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 801f3a0:	f001 fec4 	bl	802112c <expf>
 801f3a4:	4631      	mov	r1, r6
 801f3a6:	f7e1 f9b5 	bl	8000714 <__addsf3>
 801f3aa:	4601      	mov	r1, r0
 801f3ac:	4630      	mov	r0, r6
 801f3ae:	f7e1 fb6d 	bl	8000a8c <__aeabi_fdiv>
 801f3b2:	f845 0904 	str.w	r0, [r5], #-4
 801f3b6:	68bb      	ldr	r3, [r7, #8]
 801f3b8:	42a3      	cmp	r3, r4
 801f3ba:	d9ed      	bls.n	801f398 <forward_sigmoid+0x54>
 801f3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3be:	2300      	movs	r3, #0
 801f3c0:	685b      	ldr	r3, [r3, #4]
 801f3c2:	deff      	udf	#255	@ 0xff
 801f3c4:	69a7      	ldr	r7, [r4, #24]
 801f3c6:	69ab      	ldr	r3, [r5, #24]
 801f3c8:	68bc      	ldr	r4, [r7, #8]
 801f3ca:	689d      	ldr	r5, [r3, #8]
 801f3cc:	e7e2      	b.n	801f394 <forward_sigmoid+0x50>
 801f3ce:	bf00      	nop

0801f3d0 <forward_relu>:
 801f3d0:	6982      	ldr	r2, [r0, #24]
 801f3d2:	8813      	ldrh	r3, [r2, #0]
 801f3d4:	b90b      	cbnz	r3, 801f3da <forward_relu+0xa>
 801f3d6:	685b      	ldr	r3, [r3, #4]
 801f3d8:	deff      	udf	#255	@ 0xff
 801f3da:	6852      	ldr	r2, [r2, #4]
 801f3dc:	6851      	ldr	r1, [r2, #4]
 801f3de:	b101      	cbz	r1, 801f3e2 <forward_relu+0x12>
 801f3e0:	6809      	ldr	r1, [r1, #0]
 801f3e2:	2b01      	cmp	r3, #1
 801f3e4:	d07a      	beq.n	801f4dc <forward_relu+0x10c>
 801f3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3ea:	6913      	ldr	r3, [r2, #16]
 801f3ec:	b103      	cbz	r3, 801f3f0 <forward_relu+0x20>
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	699c      	ldr	r4, [r3, #24]
 801f3f2:	698a      	ldr	r2, [r1, #24]
 801f3f4:	688b      	ldr	r3, [r1, #8]
 801f3f6:	69c6      	ldr	r6, [r0, #28]
 801f3f8:	68a4      	ldr	r4, [r4, #8]
 801f3fa:	6895      	ldr	r5, [r2, #8]
 801f3fc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801f400:	b1ae      	cbz	r6, 801f42e <forward_relu+0x5e>
 801f402:	6872      	ldr	r2, [r6, #4]
 801f404:	2a01      	cmp	r2, #1
 801f406:	d037      	beq.n	801f478 <forward_relu+0xa8>
 801f408:	2b00      	cmp	r3, #0
 801f40a:	d05e      	beq.n	801f4ca <forward_relu+0xfa>
 801f40c:	68c8      	ldr	r0, [r1, #12]
 801f40e:	2201      	movs	r2, #1
 801f410:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f418:	4298      	cmp	r0, r3
 801f41a:	fb01 f202 	mul.w	r2, r1, r2
 801f41e:	d1f9      	bne.n	801f414 <forward_relu+0x44>
 801f420:	68b3      	ldr	r3, [r6, #8]
 801f422:	4629      	mov	r1, r5
 801f424:	4620      	mov	r0, r4
 801f426:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f42a:	f000 b85b 	b.w	801f4e4 <forward_lite_nl_relu_generic_if32of32_kernel>
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d04d      	beq.n	801f4ce <forward_relu+0xfe>
 801f432:	68c8      	ldr	r0, [r1, #12]
 801f434:	2201      	movs	r2, #1
 801f436:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f43a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f43e:	4283      	cmp	r3, r0
 801f440:	fb01 f202 	mul.w	r2, r1, r2
 801f444:	d1f9      	bne.n	801f43a <forward_relu+0x6a>
 801f446:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f44a:	3a01      	subs	r2, #1
 801f44c:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 801f450:	42af      	cmp	r7, r5
 801f452:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801f456:	d30d      	bcc.n	801f474 <forward_relu+0xa4>
 801f458:	f04f 0800 	mov.w	r8, #0
 801f45c:	f857 6904 	ldr.w	r6, [r7], #-4
 801f460:	4641      	mov	r1, r8
 801f462:	4630      	mov	r0, r6
 801f464:	f7e1 fc10 	bl	8000c88 <__aeabi_fcmpge>
 801f468:	b900      	cbnz	r0, 801f46c <forward_relu+0x9c>
 801f46a:	4646      	mov	r6, r8
 801f46c:	42bd      	cmp	r5, r7
 801f46e:	f844 6904 	str.w	r6, [r4], #-4
 801f472:	d9f3      	bls.n	801f45c <forward_relu+0x8c>
 801f474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f478:	b35b      	cbz	r3, 801f4d2 <forward_relu+0x102>
 801f47a:	68c8      	ldr	r0, [r1, #12]
 801f47c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f480:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f484:	4298      	cmp	r0, r3
 801f486:	fb01 f202 	mul.w	r2, r1, r2
 801f48a:	d1f9      	bne.n	801f480 <forward_relu+0xb0>
 801f48c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f490:	3a01      	subs	r2, #1
 801f492:	68b3      	ldr	r3, [r6, #8]
 801f494:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 801f498:	42ae      	cmp	r6, r5
 801f49a:	f8d3 8000 	ldr.w	r8, [r3]
 801f49e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801f4a2:	d3e7      	bcc.n	801f474 <forward_relu+0xa4>
 801f4a4:	f04f 0900 	mov.w	r9, #0
 801f4a8:	f856 7904 	ldr.w	r7, [r6], #-4
 801f4ac:	4640      	mov	r0, r8
 801f4ae:	4639      	mov	r1, r7
 801f4b0:	f7e1 fbd6 	bl	8000c60 <__aeabi_fcmplt>
 801f4b4:	b120      	cbz	r0, 801f4c0 <forward_relu+0xf0>
 801f4b6:	42b5      	cmp	r5, r6
 801f4b8:	f844 7904 	str.w	r7, [r4], #-4
 801f4bc:	d9f4      	bls.n	801f4a8 <forward_relu+0xd8>
 801f4be:	e7d9      	b.n	801f474 <forward_relu+0xa4>
 801f4c0:	42b5      	cmp	r5, r6
 801f4c2:	f844 9904 	str.w	r9, [r4], #-4
 801f4c6:	d9ef      	bls.n	801f4a8 <forward_relu+0xd8>
 801f4c8:	e7d4      	b.n	801f474 <forward_relu+0xa4>
 801f4ca:	2201      	movs	r2, #1
 801f4cc:	e7a8      	b.n	801f420 <forward_relu+0x50>
 801f4ce:	462f      	mov	r7, r5
 801f4d0:	e7c2      	b.n	801f458 <forward_relu+0x88>
 801f4d2:	68b3      	ldr	r3, [r6, #8]
 801f4d4:	462e      	mov	r6, r5
 801f4d6:	f8d3 8000 	ldr.w	r8, [r3]
 801f4da:	e7e3      	b.n	801f4a4 <forward_relu+0xd4>
 801f4dc:	2300      	movs	r3, #0
 801f4de:	685b      	ldr	r3, [r3, #4]
 801f4e0:	deff      	udf	#255	@ 0xff
 801f4e2:	bf00      	nop

0801f4e4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 801f4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f4e8:	f102 4480 	add.w	r4, r2, #1073741824	@ 0x40000000
 801f4ec:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801f4f0:	681f      	ldr	r7, [r3, #0]
 801f4f2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801f4f6:	3c01      	subs	r4, #1
 801f4f8:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 801f4fc:	4688      	mov	r8, r1
 801f4fe:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f502:	4650      	mov	r0, sl
 801f504:	2100      	movs	r1, #0
 801f506:	f7e1 fbab 	bl	8000c60 <__aeabi_fcmplt>
 801f50a:	bb20      	cbnz	r0, 801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801f50c:	4544      	cmp	r4, r8
 801f50e:	d210      	bcs.n	801f532 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801f510:	e01f      	b.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f512:	f7e1 fbb9 	bl	8000c88 <__aeabi_fcmpge>
 801f516:	4603      	mov	r3, r0
 801f518:	4639      	mov	r1, r7
 801f51a:	4628      	mov	r0, r5
 801f51c:	b12b      	cbz	r3, 801f52a <forward_lite_nl_relu_generic_if32of32_kernel+0x46>
 801f51e:	f7e1 f8f7 	bl	8000710 <__aeabi_fsub>
 801f522:	4649      	mov	r1, r9
 801f524:	f7e1 f9fe 	bl	8000924 <__aeabi_fmul>
 801f528:	4605      	mov	r5, r0
 801f52a:	45a0      	cmp	r8, r4
 801f52c:	f846 5904 	str.w	r5, [r6], #-4
 801f530:	d80f      	bhi.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f532:	f854 5904 	ldr.w	r5, [r4], #-4
 801f536:	4650      	mov	r0, sl
 801f538:	4629      	mov	r1, r5
 801f53a:	f7e1 fba5 	bl	8000c88 <__aeabi_fcmpge>
 801f53e:	4603      	mov	r3, r0
 801f540:	4629      	mov	r1, r5
 801f542:	4638      	mov	r0, r7
 801f544:	2b00      	cmp	r3, #0
 801f546:	d1e4      	bne.n	801f512 <forward_lite_nl_relu_generic_if32of32_kernel+0x2e>
 801f548:	4655      	mov	r5, sl
 801f54a:	45a0      	cmp	r8, r4
 801f54c:	f846 5904 	str.w	r5, [r6], #-4
 801f550:	d9ef      	bls.n	801f532 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801f552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f556:	2100      	movs	r1, #0
 801f558:	4648      	mov	r0, r9
 801f55a:	f7e1 fb77 	bl	8000c4c <__aeabi_fcmpeq>
 801f55e:	b9d0      	cbnz	r0, 801f596 <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 801f560:	4544      	cmp	r4, r8
 801f562:	d3f6      	bcc.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f564:	f854 5904 	ldr.w	r5, [r4], #-4
 801f568:	4639      	mov	r1, r7
 801f56a:	4628      	mov	r0, r5
 801f56c:	f7e1 fb82 	bl	8000c74 <__aeabi_fcmple>
 801f570:	4603      	mov	r3, r0
 801f572:	4639      	mov	r1, r7
 801f574:	4628      	mov	r0, r5
 801f576:	b14b      	cbz	r3, 801f58c <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 801f578:	f7e1 f8ca 	bl	8000710 <__aeabi_fsub>
 801f57c:	4649      	mov	r1, r9
 801f57e:	f7e1 f9d1 	bl	8000924 <__aeabi_fmul>
 801f582:	45a0      	cmp	r8, r4
 801f584:	f846 0904 	str.w	r0, [r6], #-4
 801f588:	d9ec      	bls.n	801f564 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801f58a:	e7e2      	b.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f58c:	45a0      	cmp	r8, r4
 801f58e:	f846 5904 	str.w	r5, [r6], #-4
 801f592:	d9e7      	bls.n	801f564 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801f594:	e7dd      	b.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f596:	4544      	cmp	r4, r8
 801f598:	d3db      	bcc.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f59a:	f04f 0900 	mov.w	r9, #0
 801f59e:	f854 5904 	ldr.w	r5, [r4], #-4
 801f5a2:	4639      	mov	r1, r7
 801f5a4:	4628      	mov	r0, r5
 801f5a6:	f7e1 fb79 	bl	8000c9c <__aeabi_fcmpgt>
 801f5aa:	b120      	cbz	r0, 801f5b6 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 801f5ac:	45a0      	cmp	r8, r4
 801f5ae:	f846 5904 	str.w	r5, [r6], #-4
 801f5b2:	d9f4      	bls.n	801f59e <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801f5b4:	e7cd      	b.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f5b6:	45a0      	cmp	r8, r4
 801f5b8:	f846 9904 	str.w	r9, [r6], #-4
 801f5bc:	d9ef      	bls.n	801f59e <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801f5be:	e7c8      	b.n	801f552 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>

0801f5c0 <forward_lite_dense_if32of32wf32>:
 801f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 801f5c8:	6805      	ldr	r5, [r0, #0]
 801f5ca:	6841      	ldr	r1, [r0, #4]
 801f5cc:	fb03 f202 	mul.w	r2, r3, r2
 801f5d0:	b08b      	sub	sp, #44	@ 0x2c
 801f5d2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801f5d6:	4295      	cmp	r5, r2
 801f5d8:	9209      	str	r2, [sp, #36]	@ 0x24
 801f5da:	9101      	str	r1, [sp, #4]
 801f5dc:	f080 81a8 	bcs.w	801f930 <forward_lite_dense_if32of32wf32+0x370>
 801f5e0:	f8d0 b010 	ldr.w	fp, [r0, #16]
 801f5e4:	4604      	mov	r4, r0
 801f5e6:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801f5ea:	462e      	mov	r6, r5
 801f5ec:	4619      	mov	r1, r3
 801f5ee:	44b6      	add	lr, r6
 801f5f0:	45b6      	cmp	lr, r6
 801f5f2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801f5f6:	f240 818b 	bls.w	801f910 <forward_lite_dense_if32of32wf32+0x350>
 801f5fa:	f1ab 0110 	sub.w	r1, fp, #16
 801f5fe:	0909      	lsrs	r1, r1, #4
 801f600:	3101      	adds	r1, #1
 801f602:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f606:	9302      	str	r3, [sp, #8]
 801f608:	018b      	lsls	r3, r1, #6
 801f60a:	9305      	str	r3, [sp, #20]
 801f60c:	9b01      	ldr	r3, [sp, #4]
 801f60e:	f8cd e00c 	str.w	lr, [sp, #12]
 801f612:	e9cd 6407 	strd	r6, r4, [sp, #28]
 801f616:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 801f61a:	9306      	str	r3, [sp, #24]
 801f61c:	46b0      	mov	r8, r6
 801f61e:	f1bb 0f0f 	cmp.w	fp, #15
 801f622:	f240 8188 	bls.w	801f936 <forward_lite_dense_if32of32wf32+0x376>
 801f626:	9b01      	ldr	r3, [sp, #4]
 801f628:	f109 0440 	add.w	r4, r9, #64	@ 0x40
 801f62c:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 801f630:	46da      	mov	sl, fp
 801f632:	2600      	movs	r6, #0
 801f634:	f854 1c40 	ldr.w	r1, [r4, #-64]
 801f638:	f855 0c40 	ldr.w	r0, [r5, #-64]
 801f63c:	f7e1 f972 	bl	8000924 <__aeabi_fmul>
 801f640:	f854 1c3c 	ldr.w	r1, [r4, #-60]
 801f644:	4607      	mov	r7, r0
 801f646:	f855 0c3c 	ldr.w	r0, [r5, #-60]
 801f64a:	f7e1 f96b 	bl	8000924 <__aeabi_fmul>
 801f64e:	4601      	mov	r1, r0
 801f650:	4638      	mov	r0, r7
 801f652:	f7e1 f85f 	bl	8000714 <__addsf3>
 801f656:	f854 1c38 	ldr.w	r1, [r4, #-56]
 801f65a:	4607      	mov	r7, r0
 801f65c:	f855 0c38 	ldr.w	r0, [r5, #-56]
 801f660:	f7e1 f960 	bl	8000924 <__aeabi_fmul>
 801f664:	4601      	mov	r1, r0
 801f666:	4638      	mov	r0, r7
 801f668:	f7e1 f854 	bl	8000714 <__addsf3>
 801f66c:	f854 1c34 	ldr.w	r1, [r4, #-52]
 801f670:	4607      	mov	r7, r0
 801f672:	f855 0c34 	ldr.w	r0, [r5, #-52]
 801f676:	f7e1 f955 	bl	8000924 <__aeabi_fmul>
 801f67a:	4601      	mov	r1, r0
 801f67c:	4638      	mov	r0, r7
 801f67e:	f7e1 f849 	bl	8000714 <__addsf3>
 801f682:	f854 1c30 	ldr.w	r1, [r4, #-48]
 801f686:	4607      	mov	r7, r0
 801f688:	f855 0c30 	ldr.w	r0, [r5, #-48]
 801f68c:	f7e1 f94a 	bl	8000924 <__aeabi_fmul>
 801f690:	4601      	mov	r1, r0
 801f692:	4638      	mov	r0, r7
 801f694:	f7e1 f83e 	bl	8000714 <__addsf3>
 801f698:	f854 1c2c 	ldr.w	r1, [r4, #-44]
 801f69c:	4607      	mov	r7, r0
 801f69e:	f855 0c2c 	ldr.w	r0, [r5, #-44]
 801f6a2:	f7e1 f93f 	bl	8000924 <__aeabi_fmul>
 801f6a6:	4601      	mov	r1, r0
 801f6a8:	4638      	mov	r0, r7
 801f6aa:	f7e1 f833 	bl	8000714 <__addsf3>
 801f6ae:	f854 1c28 	ldr.w	r1, [r4, #-40]
 801f6b2:	4607      	mov	r7, r0
 801f6b4:	f855 0c28 	ldr.w	r0, [r5, #-40]
 801f6b8:	f7e1 f934 	bl	8000924 <__aeabi_fmul>
 801f6bc:	4601      	mov	r1, r0
 801f6be:	4638      	mov	r0, r7
 801f6c0:	f7e1 f828 	bl	8000714 <__addsf3>
 801f6c4:	f854 1c24 	ldr.w	r1, [r4, #-36]
 801f6c8:	4607      	mov	r7, r0
 801f6ca:	f855 0c24 	ldr.w	r0, [r5, #-36]
 801f6ce:	f7e1 f929 	bl	8000924 <__aeabi_fmul>
 801f6d2:	4601      	mov	r1, r0
 801f6d4:	4638      	mov	r0, r7
 801f6d6:	f7e1 f81d 	bl	8000714 <__addsf3>
 801f6da:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801f6de:	4607      	mov	r7, r0
 801f6e0:	f855 0c20 	ldr.w	r0, [r5, #-32]
 801f6e4:	f7e1 f91e 	bl	8000924 <__aeabi_fmul>
 801f6e8:	4601      	mov	r1, r0
 801f6ea:	4638      	mov	r0, r7
 801f6ec:	f7e1 f812 	bl	8000714 <__addsf3>
 801f6f0:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801f6f4:	4607      	mov	r7, r0
 801f6f6:	f855 0c1c 	ldr.w	r0, [r5, #-28]
 801f6fa:	f7e1 f913 	bl	8000924 <__aeabi_fmul>
 801f6fe:	4601      	mov	r1, r0
 801f700:	4638      	mov	r0, r7
 801f702:	f7e1 f807 	bl	8000714 <__addsf3>
 801f706:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801f70a:	4607      	mov	r7, r0
 801f70c:	f855 0c18 	ldr.w	r0, [r5, #-24]
 801f710:	f7e1 f908 	bl	8000924 <__aeabi_fmul>
 801f714:	4601      	mov	r1, r0
 801f716:	4638      	mov	r0, r7
 801f718:	f7e0 fffc 	bl	8000714 <__addsf3>
 801f71c:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801f720:	4607      	mov	r7, r0
 801f722:	f855 0c14 	ldr.w	r0, [r5, #-20]
 801f726:	f7e1 f8fd 	bl	8000924 <__aeabi_fmul>
 801f72a:	4601      	mov	r1, r0
 801f72c:	4638      	mov	r0, r7
 801f72e:	f7e0 fff1 	bl	8000714 <__addsf3>
 801f732:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801f736:	4607      	mov	r7, r0
 801f738:	f855 0c10 	ldr.w	r0, [r5, #-16]
 801f73c:	f7e1 f8f2 	bl	8000924 <__aeabi_fmul>
 801f740:	4601      	mov	r1, r0
 801f742:	4638      	mov	r0, r7
 801f744:	f7e0 ffe6 	bl	8000714 <__addsf3>
 801f748:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801f74c:	4607      	mov	r7, r0
 801f74e:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 801f752:	f7e1 f8e7 	bl	8000924 <__aeabi_fmul>
 801f756:	4601      	mov	r1, r0
 801f758:	4638      	mov	r0, r7
 801f75a:	f7e0 ffdb 	bl	8000714 <__addsf3>
 801f75e:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801f762:	4607      	mov	r7, r0
 801f764:	f855 0c08 	ldr.w	r0, [r5, #-8]
 801f768:	f7e1 f8dc 	bl	8000924 <__aeabi_fmul>
 801f76c:	4601      	mov	r1, r0
 801f76e:	4638      	mov	r0, r7
 801f770:	f7e0 ffd0 	bl	8000714 <__addsf3>
 801f774:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801f778:	4607      	mov	r7, r0
 801f77a:	f855 0c04 	ldr.w	r0, [r5, #-4]
 801f77e:	f7e1 f8d1 	bl	8000924 <__aeabi_fmul>
 801f782:	4601      	mov	r1, r0
 801f784:	4638      	mov	r0, r7
 801f786:	f7e0 ffc5 	bl	8000714 <__addsf3>
 801f78a:	4601      	mov	r1, r0
 801f78c:	4630      	mov	r0, r6
 801f78e:	f7e0 ffc1 	bl	8000714 <__addsf3>
 801f792:	f1aa 0a10 	sub.w	sl, sl, #16
 801f796:	f1ba 0f0f 	cmp.w	sl, #15
 801f79a:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 801f79e:	4606      	mov	r6, r0
 801f7a0:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 801f7a4:	f63f af46 	bhi.w	801f634 <forward_lite_dense_if32of32wf32+0x74>
 801f7a8:	9b05      	ldr	r3, [sp, #20]
 801f7aa:	9c06      	ldr	r4, [sp, #24]
 801f7ac:	eb09 0503 	add.w	r5, r9, r3
 801f7b0:	f00b 0a0f 	and.w	sl, fp, #15
 801f7b4:	f1ba 0f03 	cmp.w	sl, #3
 801f7b8:	d97b      	bls.n	801f8b2 <forward_lite_dense_if32of32wf32+0x2f2>
 801f7ba:	6869      	ldr	r1, [r5, #4]
 801f7bc:	6860      	ldr	r0, [r4, #4]
 801f7be:	f7e1 f8b1 	bl	8000924 <__aeabi_fmul>
 801f7c2:	6829      	ldr	r1, [r5, #0]
 801f7c4:	4607      	mov	r7, r0
 801f7c6:	6820      	ldr	r0, [r4, #0]
 801f7c8:	f7e1 f8ac 	bl	8000924 <__aeabi_fmul>
 801f7cc:	4601      	mov	r1, r0
 801f7ce:	4638      	mov	r0, r7
 801f7d0:	f7e0 ffa0 	bl	8000714 <__addsf3>
 801f7d4:	4631      	mov	r1, r6
 801f7d6:	f7e0 ff9d 	bl	8000714 <__addsf3>
 801f7da:	68a9      	ldr	r1, [r5, #8]
 801f7dc:	4606      	mov	r6, r0
 801f7de:	68a0      	ldr	r0, [r4, #8]
 801f7e0:	f7e1 f8a0 	bl	8000924 <__aeabi_fmul>
 801f7e4:	4631      	mov	r1, r6
 801f7e6:	f7e0 ff95 	bl	8000714 <__addsf3>
 801f7ea:	68e9      	ldr	r1, [r5, #12]
 801f7ec:	4606      	mov	r6, r0
 801f7ee:	68e0      	ldr	r0, [r4, #12]
 801f7f0:	f7e1 f898 	bl	8000924 <__aeabi_fmul>
 801f7f4:	4631      	mov	r1, r6
 801f7f6:	f7e0 ff8d 	bl	8000714 <__addsf3>
 801f7fa:	f1aa 0204 	sub.w	r2, sl, #4
 801f7fe:	2a03      	cmp	r2, #3
 801f800:	4606      	mov	r6, r0
 801f802:	d94e      	bls.n	801f8a2 <forward_lite_dense_if32of32wf32+0x2e2>
 801f804:	6969      	ldr	r1, [r5, #20]
 801f806:	6960      	ldr	r0, [r4, #20]
 801f808:	9204      	str	r2, [sp, #16]
 801f80a:	f7e1 f88b 	bl	8000924 <__aeabi_fmul>
 801f80e:	6929      	ldr	r1, [r5, #16]
 801f810:	4607      	mov	r7, r0
 801f812:	6920      	ldr	r0, [r4, #16]
 801f814:	f7e1 f886 	bl	8000924 <__aeabi_fmul>
 801f818:	4601      	mov	r1, r0
 801f81a:	4638      	mov	r0, r7
 801f81c:	f7e0 ff7a 	bl	8000714 <__addsf3>
 801f820:	69a9      	ldr	r1, [r5, #24]
 801f822:	4607      	mov	r7, r0
 801f824:	69a0      	ldr	r0, [r4, #24]
 801f826:	f7e1 f87d 	bl	8000924 <__aeabi_fmul>
 801f82a:	4601      	mov	r1, r0
 801f82c:	4638      	mov	r0, r7
 801f82e:	f7e0 ff71 	bl	8000714 <__addsf3>
 801f832:	69e9      	ldr	r1, [r5, #28]
 801f834:	4607      	mov	r7, r0
 801f836:	69e0      	ldr	r0, [r4, #28]
 801f838:	f7e1 f874 	bl	8000924 <__aeabi_fmul>
 801f83c:	4601      	mov	r1, r0
 801f83e:	4638      	mov	r0, r7
 801f840:	f7e0 ff68 	bl	8000714 <__addsf3>
 801f844:	4601      	mov	r1, r0
 801f846:	4630      	mov	r0, r6
 801f848:	f7e0 ff64 	bl	8000714 <__addsf3>
 801f84c:	f1aa 0108 	sub.w	r1, sl, #8
 801f850:	2903      	cmp	r1, #3
 801f852:	9a04      	ldr	r2, [sp, #16]
 801f854:	4606      	mov	r6, r0
 801f856:	d924      	bls.n	801f8a2 <forward_lite_dense_if32of32wf32+0x2e2>
 801f858:	6a21      	ldr	r1, [r4, #32]
 801f85a:	6a28      	ldr	r0, [r5, #32]
 801f85c:	f7e1 f862 	bl	8000924 <__aeabi_fmul>
 801f860:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801f862:	4607      	mov	r7, r0
 801f864:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801f866:	f7e1 f85d 	bl	8000924 <__aeabi_fmul>
 801f86a:	4601      	mov	r1, r0
 801f86c:	4638      	mov	r0, r7
 801f86e:	f7e0 ff51 	bl	8000714 <__addsf3>
 801f872:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801f874:	4607      	mov	r7, r0
 801f876:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801f878:	f7e1 f854 	bl	8000924 <__aeabi_fmul>
 801f87c:	4601      	mov	r1, r0
 801f87e:	4638      	mov	r0, r7
 801f880:	f7e0 ff48 	bl	8000714 <__addsf3>
 801f884:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801f886:	4607      	mov	r7, r0
 801f888:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801f88a:	f7e1 f84b 	bl	8000924 <__aeabi_fmul>
 801f88e:	4601      	mov	r1, r0
 801f890:	4638      	mov	r0, r7
 801f892:	f7e0 ff3f 	bl	8000714 <__addsf3>
 801f896:	4601      	mov	r1, r0
 801f898:	4630      	mov	r0, r6
 801f89a:	f7e0 ff3b 	bl	8000714 <__addsf3>
 801f89e:	9a04      	ldr	r2, [sp, #16]
 801f8a0:	4606      	mov	r6, r0
 801f8a2:	0892      	lsrs	r2, r2, #2
 801f8a4:	3201      	adds	r2, #1
 801f8a6:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 801f8aa:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 801f8ae:	f00a 0a03 	and.w	sl, sl, #3
 801f8b2:	f1ba 0f00 	cmp.w	sl, #0
 801f8b6:	d020      	beq.n	801f8fa <forward_lite_dense_if32of32wf32+0x33a>
 801f8b8:	6829      	ldr	r1, [r5, #0]
 801f8ba:	6820      	ldr	r0, [r4, #0]
 801f8bc:	f7e1 f832 	bl	8000924 <__aeabi_fmul>
 801f8c0:	4601      	mov	r1, r0
 801f8c2:	4630      	mov	r0, r6
 801f8c4:	f7e0 ff26 	bl	8000714 <__addsf3>
 801f8c8:	f1ba 0f01 	cmp.w	sl, #1
 801f8cc:	4606      	mov	r6, r0
 801f8ce:	d014      	beq.n	801f8fa <forward_lite_dense_if32of32wf32+0x33a>
 801f8d0:	6869      	ldr	r1, [r5, #4]
 801f8d2:	6860      	ldr	r0, [r4, #4]
 801f8d4:	f7e1 f826 	bl	8000924 <__aeabi_fmul>
 801f8d8:	4601      	mov	r1, r0
 801f8da:	4630      	mov	r0, r6
 801f8dc:	f7e0 ff1a 	bl	8000714 <__addsf3>
 801f8e0:	f1ba 0f02 	cmp.w	sl, #2
 801f8e4:	4606      	mov	r6, r0
 801f8e6:	d008      	beq.n	801f8fa <forward_lite_dense_if32of32wf32+0x33a>
 801f8e8:	68a1      	ldr	r1, [r4, #8]
 801f8ea:	68a8      	ldr	r0, [r5, #8]
 801f8ec:	f7e1 f81a 	bl	8000924 <__aeabi_fmul>
 801f8f0:	4601      	mov	r1, r0
 801f8f2:	4630      	mov	r0, r6
 801f8f4:	f7e0 ff0e 	bl	8000714 <__addsf3>
 801f8f8:	4606      	mov	r6, r0
 801f8fa:	9b02      	ldr	r3, [sp, #8]
 801f8fc:	f848 6b04 	str.w	r6, [r8], #4
 801f900:	4499      	add	r9, r3
 801f902:	9b03      	ldr	r3, [sp, #12]
 801f904:	4543      	cmp	r3, r8
 801f906:	f63f ae8a 	bhi.w	801f61e <forward_lite_dense_if32of32wf32+0x5e>
 801f90a:	e9dd 6407 	ldrd	r6, r4, [sp, #28]
 801f90e:	6961      	ldr	r1, [r4, #20]
 801f910:	68e3      	ldr	r3, [r4, #12]
 801f912:	b9ab      	cbnz	r3, 801f940 <forward_lite_dense_if32of32wf32+0x380>
 801f914:	9b01      	ldr	r3, [sp, #4]
 801f916:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f91a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801f91e:	9301      	str	r3, [sp, #4]
 801f920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f922:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 801f926:	42b3      	cmp	r3, r6
 801f928:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 801f92c:	f63f ae5f 	bhi.w	801f5ee <forward_lite_dense_if32of32wf32+0x2e>
 801f930:	b00b      	add	sp, #44	@ 0x2c
 801f932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f936:	9c01      	ldr	r4, [sp, #4]
 801f938:	46da      	mov	sl, fp
 801f93a:	464d      	mov	r5, r9
 801f93c:	2600      	movs	r6, #0
 801f93e:	e739      	b.n	801f7b4 <forward_lite_dense_if32of32wf32+0x1f4>
 801f940:	2900      	cmp	r1, #0
 801f942:	d0e7      	beq.n	801f914 <forward_lite_dense_if32of32wf32+0x354>
 801f944:	6819      	ldr	r1, [r3, #0]
 801f946:	6830      	ldr	r0, [r6, #0]
 801f948:	f7e0 fee4 	bl	8000714 <__addsf3>
 801f94c:	6030      	str	r0, [r6, #0]
 801f94e:	6961      	ldr	r1, [r4, #20]
 801f950:	2901      	cmp	r1, #1
 801f952:	d9df      	bls.n	801f914 <forward_lite_dense_if32of32wf32+0x354>
 801f954:	46b0      	mov	r8, r6
 801f956:	2501      	movs	r5, #1
 801f958:	68e3      	ldr	r3, [r4, #12]
 801f95a:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801f95e:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801f962:	f7e0 fed7 	bl	8000714 <__addsf3>
 801f966:	f8c8 0000 	str.w	r0, [r8]
 801f96a:	6961      	ldr	r1, [r4, #20]
 801f96c:	3501      	adds	r5, #1
 801f96e:	42a9      	cmp	r1, r5
 801f970:	d8f2      	bhi.n	801f958 <forward_lite_dense_if32of32wf32+0x398>
 801f972:	e7cf      	b.n	801f914 <forward_lite_dense_if32of32wf32+0x354>

0801f974 <forward_lite_dense_if32of32wf32_lut4>:
 801f974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f978:	b095      	sub	sp, #84	@ 0x54
 801f97a:	469b      	mov	fp, r3
 801f97c:	9210      	str	r2, [sp, #64]	@ 0x40
 801f97e:	e9dd 2321 	ldrd	r2, r3, [sp, #132]	@ 0x84
 801f982:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 801f984:	fb02 f303 	mul.w	r3, r2, r3
 801f988:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f98c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f98e:	4606      	mov	r6, r0
 801f990:	e9dd 351f 	ldrd	r3, r5, [sp, #124]	@ 0x7c
 801f994:	460c      	mov	r4, r1
 801f996:	b137      	cbz	r7, 801f9a6 <forward_lite_dense_if32of32wf32_lut4+0x32>
 801f998:	4658      	mov	r0, fp
 801f99a:	2240      	movs	r2, #64	@ 0x40
 801f99c:	4639      	mov	r1, r7
 801f99e:	f000 fb03 	bl	801ffa8 <st_int8_copy>
 801f9a2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f9a4:	46bb      	mov	fp, r7
 801f9a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9a8:	4296      	cmp	r6, r2
 801f9aa:	f080 813d 	bcs.w	801fc28 <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801f9ae:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f9b0:	960a      	str	r6, [sp, #40]	@ 0x28
 801f9b2:	f025 0101 	bic.w	r1, r5, #1
 801f9b6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f9ba:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 801f9be:	9102      	str	r1, [sp, #8]
 801f9c0:	f06f 0103 	mvn.w	r1, #3
 801f9c4:	eba1 010a 	sub.w	r1, r1, sl
 801f9c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f9ca:	f005 0101 	and.w	r1, r5, #1
 801f9ce:	08ea      	lsrs	r2, r5, #3
 801f9d0:	9107      	str	r1, [sp, #28]
 801f9d2:	00a9      	lsls	r1, r5, #2
 801f9d4:	9206      	str	r2, [sp, #24]
 801f9d6:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f9d8:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 801f9dc:	0092      	lsls	r2, r2, #2
 801f9de:	9209      	str	r2, [sp, #36]	@ 0x24
 801f9e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f9e2:	9105      	str	r1, [sp, #20]
 801f9e4:	1f18      	subs	r0, r3, #4
 801f9e6:	e9cd aa0d 	strd	sl, sl, [sp, #52]	@ 0x34
 801f9ea:	f104 0120 	add.w	r1, r4, #32
 801f9ee:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 801f9f2:	9011      	str	r0, [sp, #68]	@ 0x44
 801f9f4:	9104      	str	r1, [sp, #16]
 801f9f6:	9412      	str	r4, [sp, #72]	@ 0x48
 801f9f8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f9fa:	4632      	mov	r2, r6
 801f9fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f9fe:	9904      	ldr	r1, [sp, #16]
 801fa00:	18d3      	adds	r3, r2, r3
 801fa02:	3920      	subs	r1, #32
 801fa04:	4293      	cmp	r3, r2
 801fa06:	9303      	str	r3, [sp, #12]
 801fa08:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fa0a:	f240 8110 	bls.w	801fc2e <forward_lite_dense_if32of32wf32_lut4+0x2ba>
 801fa0e:	9b02      	ldr	r3, [sp, #8]
 801fa10:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 801fa14:	9200      	str	r2, [sp, #0]
 801fa16:	3b01      	subs	r3, #1
 801fa18:	9308      	str	r3, [sp, #32]
 801fa1a:	9b06      	ldr	r3, [sp, #24]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	f000 80e7 	beq.w	801fbf0 <forward_lite_dense_if32of32wf32_lut4+0x27c>
 801fa22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa24:	9c04      	ldr	r4, [sp, #16]
 801fa26:	eb09 0a03 	add.w	sl, r9, r3
 801fa2a:	2500      	movs	r5, #0
 801fa2c:	f899 6000 	ldrb.w	r6, [r9]
 801fa30:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801fa34:	0933      	lsrs	r3, r6, #4
 801fa36:	f006 060f 	and.w	r6, r6, #15
 801fa3a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fa3e:	f7e0 ff71 	bl	8000924 <__aeabi_fmul>
 801fa42:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801fa46:	4607      	mov	r7, r0
 801fa48:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801fa4c:	f899 6001 	ldrb.w	r6, [r9, #1]
 801fa50:	f7e0 ff68 	bl	8000924 <__aeabi_fmul>
 801fa54:	4601      	mov	r1, r0
 801fa56:	4638      	mov	r0, r7
 801fa58:	f7e0 fe5c 	bl	8000714 <__addsf3>
 801fa5c:	0933      	lsrs	r3, r6, #4
 801fa5e:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801fa62:	4607      	mov	r7, r0
 801fa64:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fa68:	f7e0 ff5c 	bl	8000924 <__aeabi_fmul>
 801fa6c:	4601      	mov	r1, r0
 801fa6e:	4638      	mov	r0, r7
 801fa70:	f7e0 fe50 	bl	8000714 <__addsf3>
 801fa74:	f006 060f 	and.w	r6, r6, #15
 801fa78:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801fa7c:	4607      	mov	r7, r0
 801fa7e:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801fa82:	f899 6002 	ldrb.w	r6, [r9, #2]
 801fa86:	f7e0 ff4d 	bl	8000924 <__aeabi_fmul>
 801fa8a:	4601      	mov	r1, r0
 801fa8c:	4638      	mov	r0, r7
 801fa8e:	f7e0 fe41 	bl	8000714 <__addsf3>
 801fa92:	0933      	lsrs	r3, r6, #4
 801fa94:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801fa98:	4607      	mov	r7, r0
 801fa9a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fa9e:	f7e0 ff41 	bl	8000924 <__aeabi_fmul>
 801faa2:	4601      	mov	r1, r0
 801faa4:	4638      	mov	r0, r7
 801faa6:	f7e0 fe35 	bl	8000714 <__addsf3>
 801faaa:	f006 060f 	and.w	r6, r6, #15
 801faae:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801fab2:	4607      	mov	r7, r0
 801fab4:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801fab8:	f899 6003 	ldrb.w	r6, [r9, #3]
 801fabc:	f7e0 ff32 	bl	8000924 <__aeabi_fmul>
 801fac0:	4601      	mov	r1, r0
 801fac2:	4638      	mov	r0, r7
 801fac4:	f7e0 fe26 	bl	8000714 <__addsf3>
 801fac8:	0933      	lsrs	r3, r6, #4
 801faca:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801face:	4607      	mov	r7, r0
 801fad0:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fad4:	f7e0 ff26 	bl	8000924 <__aeabi_fmul>
 801fad8:	4601      	mov	r1, r0
 801fada:	4638      	mov	r0, r7
 801fadc:	f7e0 fe1a 	bl	8000714 <__addsf3>
 801fae0:	f006 060f 	and.w	r6, r6, #15
 801fae4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801fae8:	4607      	mov	r7, r0
 801faea:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801faee:	f7e0 ff19 	bl	8000924 <__aeabi_fmul>
 801faf2:	4601      	mov	r1, r0
 801faf4:	4638      	mov	r0, r7
 801faf6:	f7e0 fe0d 	bl	8000714 <__addsf3>
 801fafa:	4601      	mov	r1, r0
 801fafc:	4628      	mov	r0, r5
 801fafe:	f7e0 fe09 	bl	8000714 <__addsf3>
 801fb02:	f109 0904 	add.w	r9, r9, #4
 801fb06:	45d1      	cmp	r9, sl
 801fb08:	4605      	mov	r5, r0
 801fb0a:	f104 0420 	add.w	r4, r4, #32
 801fb0e:	d18d      	bne.n	801fa2c <forward_lite_dense_if32of32wf32_lut4+0xb8>
 801fb10:	9c05      	ldr	r4, [sp, #20]
 801fb12:	9b02      	ldr	r3, [sp, #8]
 801fb14:	429c      	cmp	r4, r3
 801fb16:	d272      	bcs.n	801fbfe <forward_lite_dense_if32of32wf32_lut4+0x28a>
 801fb18:	9b08      	ldr	r3, [sp, #32]
 801fb1a:	9401      	str	r4, [sp, #4]
 801fb1c:	eba3 0804 	sub.w	r8, r3, r4
 801fb20:	f104 0608 	add.w	r6, r4, #8
 801fb24:	f10a 37ff 	add.w	r7, sl, #4294967295
 801fb28:	ea4f 09d8 	mov.w	r9, r8, lsr #3
 801fb2c:	463c      	mov	r4, r7
 801fb2e:	eb0a 08d8 	add.w	r8, sl, r8, lsr #3
 801fb32:	4637      	mov	r7, r6
 801fb34:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 801fb38:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801fb3c:	0932      	lsrs	r2, r6, #4
 801fb3e:	3708      	adds	r7, #8
 801fb40:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801fb44:	f7e0 feee 	bl	8000924 <__aeabi_fmul>
 801fb48:	f006 020f 	and.w	r2, r6, #15
 801fb4c:	f857 1c0c 	ldr.w	r1, [r7, #-12]
 801fb50:	4606      	mov	r6, r0
 801fb52:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801fb56:	f7e0 fee5 	bl	8000924 <__aeabi_fmul>
 801fb5a:	4601      	mov	r1, r0
 801fb5c:	4630      	mov	r0, r6
 801fb5e:	f7e0 fdd9 	bl	8000714 <__addsf3>
 801fb62:	4601      	mov	r1, r0
 801fb64:	4628      	mov	r0, r5
 801fb66:	f7e0 fdd5 	bl	8000714 <__addsf3>
 801fb6a:	4544      	cmp	r4, r8
 801fb6c:	4605      	mov	r5, r0
 801fb6e:	d1e1      	bne.n	801fb34 <forward_lite_dense_if32of32wf32_lut4+0x1c0>
 801fb70:	9c01      	ldr	r4, [sp, #4]
 801fb72:	f109 0301 	add.w	r3, r9, #1
 801fb76:	eb0a 0903 	add.w	r9, sl, r3
 801fb7a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 801fb7e:	9b07      	ldr	r3, [sp, #28]
 801fb80:	b35b      	cbz	r3, 801fbda <forward_lite_dense_if32of32wf32_lut4+0x266>
 801fb82:	f819 3b01 	ldrb.w	r3, [r9], #1
 801fb86:	6821      	ldr	r1, [r4, #0]
 801fb88:	091b      	lsrs	r3, r3, #4
 801fb8a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fb8e:	f7e0 fec9 	bl	8000924 <__aeabi_fmul>
 801fb92:	4629      	mov	r1, r5
 801fb94:	f7e0 fdbe 	bl	8000714 <__addsf3>
 801fb98:	9b00      	ldr	r3, [sp, #0]
 801fb9a:	9a03      	ldr	r2, [sp, #12]
 801fb9c:	f843 0b04 	str.w	r0, [r3], #4
 801fba0:	429a      	cmp	r2, r3
 801fba2:	9300      	str	r3, [sp, #0]
 801fba4:	f63f af39 	bhi.w	801fa1a <forward_lite_dense_if32of32wf32_lut4+0xa6>
 801fba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fbaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fbac:	189c      	adds	r4, r3, r2
 801fbae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fbb0:	bb3b      	cbnz	r3, 801fc02 <forward_lite_dense_if32of32wf32_lut4+0x28e>
 801fbb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fbb4:	42a3      	cmp	r3, r4
 801fbb6:	d937      	bls.n	801fc28 <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801fbb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbba:	9a02      	ldr	r2, [sp, #8]
 801fbbc:	441a      	add	r2, r3
 801fbbe:	9202      	str	r2, [sp, #8]
 801fbc0:	9a05      	ldr	r2, [sp, #20]
 801fbc2:	441a      	add	r2, r3
 801fbc4:	9205      	str	r2, [sp, #20]
 801fbc6:	9a04      	ldr	r2, [sp, #16]
 801fbc8:	441a      	add	r2, r3
 801fbca:	9204      	str	r2, [sp, #16]
 801fbcc:	9b03      	ldr	r3, [sp, #12]
 801fbce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fbd0:	4293      	cmp	r3, r2
 801fbd2:	d92e      	bls.n	801fc32 <forward_lite_dense_if32of32wf32_lut4+0x2be>
 801fbd4:	940a      	str	r4, [sp, #40]	@ 0x28
 801fbd6:	4622      	mov	r2, r4
 801fbd8:	e710      	b.n	801f9fc <forward_lite_dense_if32of32wf32_lut4+0x88>
 801fbda:	9b00      	ldr	r3, [sp, #0]
 801fbdc:	9a03      	ldr	r2, [sp, #12]
 801fbde:	f843 5b04 	str.w	r5, [r3], #4
 801fbe2:	429a      	cmp	r2, r3
 801fbe4:	9300      	str	r3, [sp, #0]
 801fbe6:	d9df      	bls.n	801fba8 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801fbe8:	9b06      	ldr	r3, [sp, #24]
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	f47f af19 	bne.w	801fa22 <forward_lite_dense_if32of32wf32_lut4+0xae>
 801fbf0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fbf2:	9b02      	ldr	r3, [sp, #8]
 801fbf4:	429c      	cmp	r4, r3
 801fbf6:	46ca      	mov	sl, r9
 801fbf8:	f04f 0500 	mov.w	r5, #0
 801fbfc:	d38c      	bcc.n	801fb18 <forward_lite_dense_if32of32wf32_lut4+0x1a4>
 801fbfe:	46d1      	mov	r9, sl
 801fc00:	e7bd      	b.n	801fb7e <forward_lite_dense_if32of32wf32_lut4+0x20a>
 801fc02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	d0d4      	beq.n	801fbb2 <forward_lite_dense_if32of32wf32_lut4+0x23e>
 801fc08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc0a:	e9dd 5a11 	ldrd	r5, sl, [sp, #68]	@ 0x44
 801fc0e:	18e6      	adds	r6, r4, r3
 801fc10:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801fc14:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801fc18:	f7e0 fd7c 	bl	8000714 <__addsf3>
 801fc1c:	4555      	cmp	r5, sl
 801fc1e:	6030      	str	r0, [r6, #0]
 801fc20:	d1f6      	bne.n	801fc10 <forward_lite_dense_if32of32wf32_lut4+0x29c>
 801fc22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc24:	42a3      	cmp	r3, r4
 801fc26:	d8c7      	bhi.n	801fbb8 <forward_lite_dense_if32of32wf32_lut4+0x244>
 801fc28:	b015      	add	sp, #84	@ 0x54
 801fc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc2e:	4614      	mov	r4, r2
 801fc30:	e7bd      	b.n	801fbae <forward_lite_dense_if32of32wf32_lut4+0x23a>
 801fc32:	46a1      	mov	r9, r4
 801fc34:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 801fc38:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fc3a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fc3c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fc3e:	b903      	cbnz	r3, 801fc42 <forward_lite_dense_if32of32wf32_lut4+0x2ce>
 801fc40:	e7fe      	b.n	801fc40 <forward_lite_dense_if32of32wf32_lut4+0x2cc>
 801fc42:	2a00      	cmp	r2, #0
 801fc44:	d0fb      	beq.n	801fc3e <forward_lite_dense_if32of32wf32_lut4+0x2ca>
 801fc46:	f06f 0703 	mvn.w	r7, #3
 801fc4a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801fc4e:	eba7 070a 	sub.w	r7, r7, sl
 801fc52:	eb09 0607 	add.w	r6, r9, r7
 801fc56:	4645      	mov	r5, r8
 801fc58:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801fc5c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801fc60:	f7e0 fd58 	bl	8000714 <__addsf3>
 801fc64:	42ac      	cmp	r4, r5
 801fc66:	6030      	str	r0, [r6, #0]
 801fc68:	d1f6      	bne.n	801fc58 <forward_lite_dense_if32of32wf32_lut4+0x2e4>
 801fc6a:	e7f2      	b.n	801fc52 <forward_lite_dense_if32of32wf32_lut4+0x2de>

0801fc6c <forward_lite_dense_if32of32wf32_lut8>:
 801fc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc70:	b091      	sub	sp, #68	@ 0x44
 801fc72:	461d      	mov	r5, r3
 801fc74:	920c      	str	r2, [sp, #48]	@ 0x30
 801fc76:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801fc7a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801fc7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801fc7e:	fb02 f303 	mul.w	r3, r2, r3
 801fc82:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801fc86:	4682      	mov	sl, r0
 801fc88:	460c      	mov	r4, r1
 801fc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc8c:	b137      	cbz	r7, 801fc9c <forward_lite_dense_if32of32wf32_lut8+0x30>
 801fc8e:	4628      	mov	r0, r5
 801fc90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801fc94:	4639      	mov	r1, r7
 801fc96:	f000 f987 	bl	801ffa8 <st_int8_copy>
 801fc9a:	463d      	mov	r5, r7
 801fc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc9e:	459a      	cmp	sl, r3
 801fca0:	f080 8163 	bcs.w	801ff6a <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801fca4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fca6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801fca8:	0099      	lsls	r1, r3, #2
 801fcaa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fcac:	9108      	str	r1, [sp, #32]
 801fcae:	1f18      	subs	r0, r3, #4
 801fcb0:	f06f 0303 	mvn.w	r3, #3
 801fcb4:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 801fcb8:	08f2      	lsrs	r2, r6, #3
 801fcba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fcbc:	00b3      	lsls	r3, r6, #2
 801fcbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fcc0:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 801fcc4:	9303      	str	r3, [sp, #12]
 801fcc6:	00d3      	lsls	r3, r2, #3
 801fcc8:	9305      	str	r3, [sp, #20]
 801fcca:	9b08      	ldr	r3, [sp, #32]
 801fccc:	9204      	str	r2, [sp, #16]
 801fcce:	4652      	mov	r2, sl
 801fcd0:	eb02 0e03 	add.w	lr, r2, r3
 801fcd4:	f104 0c20 	add.w	ip, r4, #32
 801fcd8:	eb00 0887 	add.w	r8, r0, r7, lsl #2
 801fcdc:	4596      	cmp	lr, r2
 801fcde:	900d      	str	r0, [sp, #52]	@ 0x34
 801fce0:	f006 0907 	and.w	r9, r6, #7
 801fce4:	910a      	str	r1, [sp, #40]	@ 0x28
 801fce6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801fcea:	f1ac 0320 	sub.w	r3, ip, #32
 801fcee:	f240 810a 	bls.w	801ff06 <forward_lite_dense_if32of32wf32_lut8+0x29a>
 801fcf2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fcf4:	f8cd e004 	str.w	lr, [sp, #4]
 801fcf8:	46b8      	mov	r8, r7
 801fcfa:	4693      	mov	fp, r2
 801fcfc:	9306      	str	r3, [sp, #24]
 801fcfe:	464f      	mov	r7, r9
 801fd00:	f8cd c008 	str.w	ip, [sp, #8]
 801fd04:	9207      	str	r2, [sp, #28]
 801fd06:	9b04      	ldr	r3, [sp, #16]
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	f000 810b 	beq.w	801ff24 <forward_lite_dense_if32of32wf32_lut8+0x2b8>
 801fd0e:	9b05      	ldr	r3, [sp, #20]
 801fd10:	9c02      	ldr	r4, [sp, #8]
 801fd12:	9700      	str	r7, [sp, #0]
 801fd14:	eb08 0a03 	add.w	sl, r8, r3
 801fd18:	2600      	movs	r6, #0
 801fd1a:	f898 2000 	ldrb.w	r2, [r8]
 801fd1e:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801fd22:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd26:	f7e0 fdfd 	bl	8000924 <__aeabi_fmul>
 801fd2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fd2e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801fd32:	4607      	mov	r7, r0
 801fd34:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd38:	f7e0 fdf4 	bl	8000924 <__aeabi_fmul>
 801fd3c:	4601      	mov	r1, r0
 801fd3e:	4638      	mov	r0, r7
 801fd40:	f7e0 fce8 	bl	8000714 <__addsf3>
 801fd44:	f898 2002 	ldrb.w	r2, [r8, #2]
 801fd48:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801fd4c:	4607      	mov	r7, r0
 801fd4e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd52:	f7e0 fde7 	bl	8000924 <__aeabi_fmul>
 801fd56:	4601      	mov	r1, r0
 801fd58:	4638      	mov	r0, r7
 801fd5a:	f7e0 fcdb 	bl	8000714 <__addsf3>
 801fd5e:	f898 2003 	ldrb.w	r2, [r8, #3]
 801fd62:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801fd66:	4607      	mov	r7, r0
 801fd68:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd6c:	f7e0 fdda 	bl	8000924 <__aeabi_fmul>
 801fd70:	4601      	mov	r1, r0
 801fd72:	4638      	mov	r0, r7
 801fd74:	f7e0 fcce 	bl	8000714 <__addsf3>
 801fd78:	f898 2004 	ldrb.w	r2, [r8, #4]
 801fd7c:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801fd80:	4607      	mov	r7, r0
 801fd82:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd86:	f7e0 fdcd 	bl	8000924 <__aeabi_fmul>
 801fd8a:	4639      	mov	r1, r7
 801fd8c:	f7e0 fcc2 	bl	8000714 <__addsf3>
 801fd90:	f898 2005 	ldrb.w	r2, [r8, #5]
 801fd94:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801fd98:	4607      	mov	r7, r0
 801fd9a:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd9e:	f7e0 fdc1 	bl	8000924 <__aeabi_fmul>
 801fda2:	4601      	mov	r1, r0
 801fda4:	4638      	mov	r0, r7
 801fda6:	f7e0 fcb5 	bl	8000714 <__addsf3>
 801fdaa:	4607      	mov	r7, r0
 801fdac:	f898 0006 	ldrb.w	r0, [r8, #6]
 801fdb0:	f898 9007 	ldrb.w	r9, [r8, #7]
 801fdb4:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801fdb8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801fdbc:	f7e0 fdb2 	bl	8000924 <__aeabi_fmul>
 801fdc0:	4601      	mov	r1, r0
 801fdc2:	4638      	mov	r0, r7
 801fdc4:	f7e0 fca6 	bl	8000714 <__addsf3>
 801fdc8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801fdcc:	4607      	mov	r7, r0
 801fdce:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
 801fdd2:	f7e0 fda7 	bl	8000924 <__aeabi_fmul>
 801fdd6:	4601      	mov	r1, r0
 801fdd8:	4638      	mov	r0, r7
 801fdda:	f7e0 fc9b 	bl	8000714 <__addsf3>
 801fdde:	4601      	mov	r1, r0
 801fde0:	4630      	mov	r0, r6
 801fde2:	f7e0 fc97 	bl	8000714 <__addsf3>
 801fde6:	f108 0808 	add.w	r8, r8, #8
 801fdea:	45d0      	cmp	r8, sl
 801fdec:	4606      	mov	r6, r0
 801fdee:	f104 0420 	add.w	r4, r4, #32
 801fdf2:	d192      	bne.n	801fd1a <forward_lite_dense_if32of32wf32_lut8+0xae>
 801fdf4:	9f00      	ldr	r7, [sp, #0]
 801fdf6:	9c03      	ldr	r4, [sp, #12]
 801fdf8:	2f00      	cmp	r7, #0
 801fdfa:	f000 8091 	beq.w	801ff20 <forward_lite_dense_if32of32wf32_lut8+0x2b4>
 801fdfe:	f89a 3000 	ldrb.w	r3, [sl]
 801fe02:	6821      	ldr	r1, [r4, #0]
 801fe04:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe08:	f7e0 fd8c 	bl	8000924 <__aeabi_fmul>
 801fe0c:	4601      	mov	r1, r0
 801fe0e:	4630      	mov	r0, r6
 801fe10:	f7e0 fc80 	bl	8000714 <__addsf3>
 801fe14:	2f01      	cmp	r7, #1
 801fe16:	4606      	mov	r6, r0
 801fe18:	d051      	beq.n	801febe <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe1a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801fe1e:	6861      	ldr	r1, [r4, #4]
 801fe20:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe24:	f7e0 fd7e 	bl	8000924 <__aeabi_fmul>
 801fe28:	4601      	mov	r1, r0
 801fe2a:	4630      	mov	r0, r6
 801fe2c:	f7e0 fc72 	bl	8000714 <__addsf3>
 801fe30:	2f02      	cmp	r7, #2
 801fe32:	4606      	mov	r6, r0
 801fe34:	d043      	beq.n	801febe <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe36:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801fe3a:	68a1      	ldr	r1, [r4, #8]
 801fe3c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe40:	f7e0 fd70 	bl	8000924 <__aeabi_fmul>
 801fe44:	4601      	mov	r1, r0
 801fe46:	4630      	mov	r0, r6
 801fe48:	f7e0 fc64 	bl	8000714 <__addsf3>
 801fe4c:	2f03      	cmp	r7, #3
 801fe4e:	4606      	mov	r6, r0
 801fe50:	d035      	beq.n	801febe <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe52:	f89a 3003 	ldrb.w	r3, [sl, #3]
 801fe56:	68e1      	ldr	r1, [r4, #12]
 801fe58:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe5c:	f7e0 fd62 	bl	8000924 <__aeabi_fmul>
 801fe60:	4601      	mov	r1, r0
 801fe62:	4630      	mov	r0, r6
 801fe64:	f7e0 fc56 	bl	8000714 <__addsf3>
 801fe68:	2f04      	cmp	r7, #4
 801fe6a:	4606      	mov	r6, r0
 801fe6c:	d027      	beq.n	801febe <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe6e:	f89a 3004 	ldrb.w	r3, [sl, #4]
 801fe72:	6921      	ldr	r1, [r4, #16]
 801fe74:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe78:	f7e0 fd54 	bl	8000924 <__aeabi_fmul>
 801fe7c:	4601      	mov	r1, r0
 801fe7e:	4630      	mov	r0, r6
 801fe80:	f7e0 fc48 	bl	8000714 <__addsf3>
 801fe84:	2f05      	cmp	r7, #5
 801fe86:	4606      	mov	r6, r0
 801fe88:	d019      	beq.n	801febe <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe8a:	f89a 3005 	ldrb.w	r3, [sl, #5]
 801fe8e:	6961      	ldr	r1, [r4, #20]
 801fe90:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe94:	f7e0 fd46 	bl	8000924 <__aeabi_fmul>
 801fe98:	4601      	mov	r1, r0
 801fe9a:	4630      	mov	r0, r6
 801fe9c:	f7e0 fc3a 	bl	8000714 <__addsf3>
 801fea0:	2f06      	cmp	r7, #6
 801fea2:	4606      	mov	r6, r0
 801fea4:	d00b      	beq.n	801febe <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fea6:	f89a 3006 	ldrb.w	r3, [sl, #6]
 801feaa:	69a1      	ldr	r1, [r4, #24]
 801feac:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801feb0:	f7e0 fd38 	bl	8000924 <__aeabi_fmul>
 801feb4:	4601      	mov	r1, r0
 801feb6:	4630      	mov	r0, r6
 801feb8:	f7e0 fc2c 	bl	8000714 <__addsf3>
 801febc:	4606      	mov	r6, r0
 801febe:	eb0a 0807 	add.w	r8, sl, r7
 801fec2:	f84b 6b04 	str.w	r6, [fp], #4
 801fec6:	9b01      	ldr	r3, [sp, #4]
 801fec8:	455b      	cmp	r3, fp
 801feca:	f63f af1c 	bhi.w	801fd06 <forward_lite_dense_if32of32wf32_lut8+0x9a>
 801fece:	9a07      	ldr	r2, [sp, #28]
 801fed0:	f8dd c008 	ldr.w	ip, [sp, #8]
 801fed4:	469e      	mov	lr, r3
 801fed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fed8:	46b9      	mov	r9, r7
 801feda:	18d7      	adds	r7, r2, r3
 801fedc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fede:	bb33      	cbnz	r3, 801ff2e <forward_lite_dense_if32of32wf32_lut8+0x2c2>
 801fee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fee2:	42bb      	cmp	r3, r7
 801fee4:	d941      	bls.n	801ff6a <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801fee6:	9b03      	ldr	r3, [sp, #12]
 801fee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801feea:	4596      	cmp	lr, r2
 801feec:	440b      	add	r3, r1
 801feee:	9303      	str	r3, [sp, #12]
 801fef0:	448c      	add	ip, r1
 801fef2:	d950      	bls.n	801ff96 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 801fef4:	9b08      	ldr	r3, [sp, #32]
 801fef6:	463a      	mov	r2, r7
 801fef8:	eb02 0e03 	add.w	lr, r2, r3
 801fefc:	4596      	cmp	lr, r2
 801fefe:	f1ac 0320 	sub.w	r3, ip, #32
 801ff02:	f63f aef6 	bhi.w	801fcf2 <forward_lite_dense_if32of32wf32_lut8+0x86>
 801ff06:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff08:	b983      	cbnz	r3, 801ff2c <forward_lite_dense_if32of32wf32_lut8+0x2c0>
 801ff0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff0c:	9908      	ldr	r1, [sp, #32]
 801ff0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801ff12:	4293      	cmp	r3, r2
 801ff14:	4692      	mov	sl, r2
 801ff16:	d928      	bls.n	801ff6a <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801ff18:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff1a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ff1c:	bb43      	cbnz	r3, 801ff70 <forward_lite_dense_if32of32wf32_lut8+0x304>
 801ff1e:	e7fe      	b.n	801ff1e <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801ff20:	46d0      	mov	r8, sl
 801ff22:	e7ce      	b.n	801fec2 <forward_lite_dense_if32of32wf32_lut8+0x256>
 801ff24:	9c06      	ldr	r4, [sp, #24]
 801ff26:	46c2      	mov	sl, r8
 801ff28:	2600      	movs	r6, #0
 801ff2a:	e765      	b.n	801fdf8 <forward_lite_dense_if32of32wf32_lut8+0x18c>
 801ff2c:	4617      	mov	r7, r2
 801ff2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	d0d5      	beq.n	801fee0 <forward_lite_dense_if32of32wf32_lut8+0x274>
 801ff34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff36:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ff38:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801ff3c:	9500      	str	r5, [sp, #0]
 801ff3e:	18fe      	adds	r6, r7, r3
 801ff40:	4625      	mov	r5, r4
 801ff42:	46f3      	mov	fp, lr
 801ff44:	4634      	mov	r4, r6
 801ff46:	46e2      	mov	sl, ip
 801ff48:	4616      	mov	r6, r2
 801ff4a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801ff4e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801ff52:	f7e0 fbdf 	bl	8000714 <__addsf3>
 801ff56:	4545      	cmp	r5, r8
 801ff58:	6020      	str	r0, [r4, #0]
 801ff5a:	d1f6      	bne.n	801ff4a <forward_lite_dense_if32of32wf32_lut8+0x2de>
 801ff5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff5e:	9d00      	ldr	r5, [sp, #0]
 801ff60:	42bb      	cmp	r3, r7
 801ff62:	46de      	mov	lr, fp
 801ff64:	46d4      	mov	ip, sl
 801ff66:	4632      	mov	r2, r6
 801ff68:	d8bd      	bhi.n	801fee6 <forward_lite_dense_if32of32wf32_lut8+0x27a>
 801ff6a:	b011      	add	sp, #68	@ 0x44
 801ff6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff70:	2a00      	cmp	r2, #0
 801ff72:	d0d3      	beq.n	801ff1c <forward_lite_dense_if32of32wf32_lut8+0x2b0>
 801ff74:	f06f 0603 	mvn.w	r6, #3
 801ff78:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ff7a:	1a76      	subs	r6, r6, r1
 801ff7c:	eb0a 0506 	add.w	r5, sl, r6
 801ff80:	463c      	mov	r4, r7
 801ff82:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801ff86:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801ff8a:	f7e0 fbc3 	bl	8000714 <__addsf3>
 801ff8e:	4544      	cmp	r4, r8
 801ff90:	6028      	str	r0, [r5, #0]
 801ff92:	d1f6      	bne.n	801ff82 <forward_lite_dense_if32of32wf32_lut8+0x316>
 801ff94:	e7f2      	b.n	801ff7c <forward_lite_dense_if32of32wf32_lut8+0x310>
 801ff96:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff98:	9908      	ldr	r1, [sp, #32]
 801ff9a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801ff9e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ffa0:	46ba      	mov	sl, r7
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d0bb      	beq.n	801ff1e <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801ffa6:	e7e3      	b.n	801ff70 <forward_lite_dense_if32of32wf32_lut8+0x304>

0801ffa8 <st_int8_copy>:
 801ffa8:	4288      	cmp	r0, r1
 801ffaa:	d021      	beq.n	801fff0 <st_int8_copy+0x48>
 801ffac:	b302      	cbz	r2, 801fff0 <st_int8_copy+0x48>
 801ffae:	4288      	cmp	r0, r1
 801ffb0:	d313      	bcc.n	801ffda <st_int8_copy+0x32>
 801ffb2:	2a03      	cmp	r2, #3
 801ffb4:	d81d      	bhi.n	801fff2 <st_int8_copy+0x4a>
 801ffb6:	3a01      	subs	r2, #1
 801ffb8:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffbc:	f801 3b01 	strb.w	r3, [r1], #1
 801ffc0:	b1b2      	cbz	r2, 801fff0 <st_int8_copy+0x48>
 801ffc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffc6:	f801 3b01 	strb.w	r3, [r1], #1
 801ffca:	2a01      	cmp	r2, #1
 801ffcc:	f000 8088 	beq.w	80200e0 <st_int8_copy+0x138>
 801ffd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffd4:	f801 3b01 	strb.w	r3, [r1], #1
 801ffd8:	4770      	bx	lr
 801ffda:	1883      	adds	r3, r0, r2
 801ffdc:	428b      	cmp	r3, r1
 801ffde:	d9e8      	bls.n	801ffb2 <st_int8_copy+0xa>
 801ffe0:	440a      	add	r2, r1
 801ffe2:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801ffe6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801ffea:	4298      	cmp	r0, r3
 801ffec:	d1f9      	bne.n	801ffe2 <st_int8_copy+0x3a>
 801ffee:	4770      	bx	lr
 801fff0:	4770      	bx	lr
 801fff2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fff6:	f001 0e03 	and.w	lr, r1, #3
 801fffa:	f1ce 0304 	rsb	r3, lr, #4
 801fffe:	eba2 0c03 	sub.w	ip, r2, r3
 8020002:	f000 0803 	and.w	r8, r0, #3
 8020006:	f1ce 0203 	rsb	r2, lr, #3
 802000a:	f810 3b01 	ldrb.w	r3, [r0], #1
 802000e:	f801 3b01 	strb.w	r3, [r1], #1
 8020012:	b182      	cbz	r2, 8020036 <st_int8_copy+0x8e>
 8020014:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020018:	f801 3b01 	strb.w	r3, [r1], #1
 802001c:	2a01      	cmp	r2, #1
 802001e:	d00a      	beq.n	8020036 <st_int8_copy+0x8e>
 8020020:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020024:	f801 3b01 	strb.w	r3, [r1], #1
 8020028:	f1be 0f01 	cmp.w	lr, #1
 802002c:	d003      	beq.n	8020036 <st_int8_copy+0x8e>
 802002e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020032:	f801 3b01 	strb.w	r3, [r1], #1
 8020036:	45c6      	cmp	lr, r8
 8020038:	d02a      	beq.n	8020090 <st_int8_copy+0xe8>
 802003a:	ea5f 121c 	movs.w	r2, ip, lsr #4
 802003e:	d00a      	beq.n	8020056 <st_int8_copy+0xae>
 8020040:	f850 3b04 	ldr.w	r3, [r0], #4
 8020044:	f850 4b04 	ldr.w	r4, [r0], #4
 8020048:	f850 5b04 	ldr.w	r5, [r0], #4
 802004c:	f850 6b04 	ldr.w	r6, [r0], #4
 8020050:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8020052:	3a01      	subs	r2, #1
 8020054:	d1f4      	bne.n	8020040 <st_int8_copy+0x98>
 8020056:	f01c 0f08 	tst.w	ip, #8
 802005a:	d004      	beq.n	8020066 <st_int8_copy+0xbe>
 802005c:	f850 3b04 	ldr.w	r3, [r0], #4
 8020060:	f850 4b04 	ldr.w	r4, [r0], #4
 8020064:	c118      	stmia	r1!, {r3, r4}
 8020066:	f01c 0f04 	tst.w	ip, #4
 802006a:	d003      	beq.n	8020074 <st_int8_copy+0xcc>
 802006c:	f850 3b04 	ldr.w	r3, [r0], #4
 8020070:	f841 3b04 	str.w	r3, [r1], #4
 8020074:	f01c 0f02 	tst.w	ip, #2
 8020078:	d003      	beq.n	8020082 <st_int8_copy+0xda>
 802007a:	f830 3b02 	ldrh.w	r3, [r0], #2
 802007e:	f821 3b02 	strh.w	r3, [r1], #2
 8020082:	f01c 0f01 	tst.w	ip, #1
 8020086:	d001      	beq.n	802008c <st_int8_copy+0xe4>
 8020088:	7803      	ldrb	r3, [r0, #0]
 802008a:	700b      	strb	r3, [r1, #0]
 802008c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020090:	ea5f 199c 	movs.w	r9, ip, lsr #6
 8020094:	d00e      	beq.n	80200b4 <st_int8_copy+0x10c>
 8020096:	4688      	mov	r8, r1
 8020098:	4686      	mov	lr, r0
 802009a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 802009e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200a2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200a6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200aa:	f1b9 0901 	subs.w	r9, r9, #1
 80200ae:	4641      	mov	r1, r8
 80200b0:	4670      	mov	r0, lr
 80200b2:	d1f0      	bne.n	8020096 <st_int8_copy+0xee>
 80200b4:	f01c 0f20 	tst.w	ip, #32
 80200b8:	d007      	beq.n	80200ca <st_int8_copy+0x122>
 80200ba:	4688      	mov	r8, r1
 80200bc:	4686      	mov	lr, r0
 80200be:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200c2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200c6:	4641      	mov	r1, r8
 80200c8:	4670      	mov	r0, lr
 80200ca:	f01c 0f10 	tst.w	ip, #16
 80200ce:	d001      	beq.n	80200d4 <st_int8_copy+0x12c>
 80200d0:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 80200d2:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80200d4:	f01c 0f08 	tst.w	ip, #8
 80200d8:	d0c5      	beq.n	8020066 <st_int8_copy+0xbe>
 80200da:	c818      	ldmia	r0!, {r3, r4}
 80200dc:	c118      	stmia	r1!, {r3, r4}
 80200de:	e7c2      	b.n	8020066 <st_int8_copy+0xbe>
 80200e0:	4770      	bx	lr
 80200e2:	bf00      	nop

080200e4 <ai_array_to_buffer_fmt>:
 80200e4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80200e8:	2b02      	cmp	r3, #2
 80200ea:	d055      	beq.n	8020198 <ai_array_to_buffer_fmt+0xb4>
 80200ec:	4a2d      	ldr	r2, [pc, #180]	@ (80201a4 <ai_array_to_buffer_fmt+0xc0>)
 80200ee:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80200f2:	4293      	cmp	r3, r2
 80200f4:	d010      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 80200f6:	dc21      	bgt.n	802013c <ai_array_to_buffer_fmt+0x58>
 80200f8:	4a2b      	ldr	r2, [pc, #172]	@ (80201a8 <ai_array_to_buffer_fmt+0xc4>)
 80200fa:	4293      	cmp	r3, r2
 80200fc:	d00c      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 80200fe:	dd0f      	ble.n	8020120 <ai_array_to_buffer_fmt+0x3c>
 8020100:	4a2a      	ldr	r2, [pc, #168]	@ (80201ac <ai_array_to_buffer_fmt+0xc8>)
 8020102:	4293      	cmp	r3, r2
 8020104:	d008      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 8020106:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 802010a:	4293      	cmp	r3, r2
 802010c:	d004      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 802010e:	4a28      	ldr	r2, [pc, #160]	@ (80201b0 <ai_array_to_buffer_fmt+0xcc>)
 8020110:	4293      	cmp	r3, r2
 8020112:	bf0c      	ite	eq
 8020114:	4613      	moveq	r3, r2
 8020116:	2340      	movne	r3, #64	@ 0x40
 8020118:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 802011c:	4318      	orrs	r0, r3
 802011e:	4770      	bx	lr
 8020120:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8020124:	4293      	cmp	r3, r2
 8020126:	d0f7      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 8020128:	dd2c      	ble.n	8020184 <ai_array_to_buffer_fmt+0xa0>
 802012a:	4a22      	ldr	r2, [pc, #136]	@ (80201b4 <ai_array_to_buffer_fmt+0xd0>)
 802012c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020130:	4293      	cmp	r3, r2
 8020132:	bf0c      	ite	eq
 8020134:	4613      	moveq	r3, r2
 8020136:	2340      	movne	r3, #64	@ 0x40
 8020138:	4318      	orrs	r0, r3
 802013a:	4770      	bx	lr
 802013c:	4a1e      	ldr	r2, [pc, #120]	@ (80201b8 <ai_array_to_buffer_fmt+0xd4>)
 802013e:	4293      	cmp	r3, r2
 8020140:	d0ea      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 8020142:	dd10      	ble.n	8020166 <ai_array_to_buffer_fmt+0x82>
 8020144:	4a1d      	ldr	r2, [pc, #116]	@ (80201bc <ai_array_to_buffer_fmt+0xd8>)
 8020146:	4293      	cmp	r3, r2
 8020148:	d0e6      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 802014a:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 802014e:	4293      	cmp	r3, r2
 8020150:	d0e2      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 8020152:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8020156:	4293      	cmp	r3, r2
 8020158:	bf0c      	ite	eq
 802015a:	4613      	moveq	r3, r2
 802015c:	2340      	movne	r3, #64	@ 0x40
 802015e:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020162:	4318      	orrs	r0, r3
 8020164:	4770      	bx	lr
 8020166:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 802016a:	4293      	cmp	r3, r2
 802016c:	d0d4      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 802016e:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8020172:	4293      	cmp	r3, r2
 8020174:	d0d0      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 8020176:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 802017a:	4293      	cmp	r3, r2
 802017c:	bf0c      	ite	eq
 802017e:	4613      	moveq	r3, r2
 8020180:	2340      	movne	r3, #64	@ 0x40
 8020182:	e7c9      	b.n	8020118 <ai_array_to_buffer_fmt+0x34>
 8020184:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8020188:	4293      	cmp	r3, r2
 802018a:	d0c5      	beq.n	8020118 <ai_array_to_buffer_fmt+0x34>
 802018c:	3280      	adds	r2, #128	@ 0x80
 802018e:	4293      	cmp	r3, r2
 8020190:	bf0c      	ite	eq
 8020192:	4613      	moveq	r3, r2
 8020194:	2340      	movne	r3, #64	@ 0x40
 8020196:	e7bf      	b.n	8020118 <ai_array_to_buffer_fmt+0x34>
 8020198:	4b09      	ldr	r3, [pc, #36]	@ (80201c0 <ai_array_to_buffer_fmt+0xdc>)
 802019a:	4003      	ands	r3, r0
 802019c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80201a0:	e7ba      	b.n	8020118 <ai_array_to_buffer_fmt+0x34>
 80201a2:	bf00      	nop
 80201a4:	00821040 	.word	0x00821040
 80201a8:	00040840 	.word	0x00040840
 80201ac:	00041040 	.word	0x00041040
 80201b0:	0004084f 	.word	0x0004084f
 80201b4:	00040447 	.word	0x00040447
 80201b8:	00840447 	.word	0x00840447
 80201bc:	0084084f 	.word	0x0084084f
 80201c0:	00803fff 	.word	0x00803fff

080201c4 <ai_array_get_data_byte_size>:
 80201c4:	b169      	cbz	r1, 80201e2 <ai_array_get_data_byte_size+0x1e>
 80201c6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80201ca:	fb01 f303 	mul.w	r3, r1, r3
 80201ce:	3307      	adds	r3, #7
 80201d0:	f023 0307 	bic.w	r3, r3, #7
 80201d4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80201d8:	fa23 f000 	lsr.w	r0, r3, r0
 80201dc:	3007      	adds	r0, #7
 80201de:	08c0      	lsrs	r0, r0, #3
 80201e0:	4770      	bx	lr
 80201e2:	4608      	mov	r0, r1
 80201e4:	4770      	bx	lr
 80201e6:	bf00      	nop

080201e8 <ai_version_get>:
 80201e8:	0212      	lsls	r2, r2, #8
 80201ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80201ee:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80201f2:	4770      	bx	lr

080201f4 <get_tensor_byte_size>:
 80201f4:	b410      	push	{r4}
 80201f6:	6983      	ldr	r3, [r0, #24]
 80201f8:	68c4      	ldr	r4, [r0, #12]
 80201fa:	6941      	ldr	r1, [r0, #20]
 80201fc:	681b      	ldr	r3, [r3, #0]
 80201fe:	68e0      	ldr	r0, [r4, #12]
 8020200:	4a06      	ldr	r2, [pc, #24]	@ (802021c <get_tensor_byte_size+0x28>)
 8020202:	68c9      	ldr	r1, [r1, #12]
 8020204:	bc10      	pop	{r4}
 8020206:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 802020a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 802020e:	fb01 f000 	mul.w	r0, r1, r0
 8020212:	4293      	cmp	r3, r2
 8020214:	bf04      	itt	eq
 8020216:	3007      	addeq	r0, #7
 8020218:	08c0      	lsreq	r0, r0, #3
 802021a:	4770      	bx	lr
 802021c:	000400c0 	.word	0x000400c0

08020220 <sbrk_aligned>:
 8020220:	b570      	push	{r4, r5, r6, lr}
 8020222:	4e0f      	ldr	r6, [pc, #60]	@ (8020260 <sbrk_aligned+0x40>)
 8020224:	460c      	mov	r4, r1
 8020226:	6831      	ldr	r1, [r6, #0]
 8020228:	4605      	mov	r5, r0
 802022a:	b911      	cbnz	r1, 8020232 <sbrk_aligned+0x12>
 802022c:	f000 faec 	bl	8020808 <_sbrk_r>
 8020230:	6030      	str	r0, [r6, #0]
 8020232:	4621      	mov	r1, r4
 8020234:	4628      	mov	r0, r5
 8020236:	f000 fae7 	bl	8020808 <_sbrk_r>
 802023a:	1c43      	adds	r3, r0, #1
 802023c:	d103      	bne.n	8020246 <sbrk_aligned+0x26>
 802023e:	f04f 34ff 	mov.w	r4, #4294967295
 8020242:	4620      	mov	r0, r4
 8020244:	bd70      	pop	{r4, r5, r6, pc}
 8020246:	1cc4      	adds	r4, r0, #3
 8020248:	f024 0403 	bic.w	r4, r4, #3
 802024c:	42a0      	cmp	r0, r4
 802024e:	d0f8      	beq.n	8020242 <sbrk_aligned+0x22>
 8020250:	1a21      	subs	r1, r4, r0
 8020252:	4628      	mov	r0, r5
 8020254:	f000 fad8 	bl	8020808 <_sbrk_r>
 8020258:	3001      	adds	r0, #1
 802025a:	d1f2      	bne.n	8020242 <sbrk_aligned+0x22>
 802025c:	e7ef      	b.n	802023e <sbrk_aligned+0x1e>
 802025e:	bf00      	nop
 8020260:	20001ce8 	.word	0x20001ce8

08020264 <_malloc_r>:
 8020264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020268:	1ccd      	adds	r5, r1, #3
 802026a:	f025 0503 	bic.w	r5, r5, #3
 802026e:	3508      	adds	r5, #8
 8020270:	2d0c      	cmp	r5, #12
 8020272:	bf38      	it	cc
 8020274:	250c      	movcc	r5, #12
 8020276:	2d00      	cmp	r5, #0
 8020278:	4606      	mov	r6, r0
 802027a:	db01      	blt.n	8020280 <_malloc_r+0x1c>
 802027c:	42a9      	cmp	r1, r5
 802027e:	d904      	bls.n	802028a <_malloc_r+0x26>
 8020280:	230c      	movs	r3, #12
 8020282:	6033      	str	r3, [r6, #0]
 8020284:	2000      	movs	r0, #0
 8020286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802028a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020360 <_malloc_r+0xfc>
 802028e:	f000 f869 	bl	8020364 <__malloc_lock>
 8020292:	f8d8 3000 	ldr.w	r3, [r8]
 8020296:	461c      	mov	r4, r3
 8020298:	bb44      	cbnz	r4, 80202ec <_malloc_r+0x88>
 802029a:	4629      	mov	r1, r5
 802029c:	4630      	mov	r0, r6
 802029e:	f7ff ffbf 	bl	8020220 <sbrk_aligned>
 80202a2:	1c43      	adds	r3, r0, #1
 80202a4:	4604      	mov	r4, r0
 80202a6:	d158      	bne.n	802035a <_malloc_r+0xf6>
 80202a8:	f8d8 4000 	ldr.w	r4, [r8]
 80202ac:	4627      	mov	r7, r4
 80202ae:	2f00      	cmp	r7, #0
 80202b0:	d143      	bne.n	802033a <_malloc_r+0xd6>
 80202b2:	2c00      	cmp	r4, #0
 80202b4:	d04b      	beq.n	802034e <_malloc_r+0xea>
 80202b6:	6823      	ldr	r3, [r4, #0]
 80202b8:	4639      	mov	r1, r7
 80202ba:	4630      	mov	r0, r6
 80202bc:	eb04 0903 	add.w	r9, r4, r3
 80202c0:	f000 faa2 	bl	8020808 <_sbrk_r>
 80202c4:	4581      	cmp	r9, r0
 80202c6:	d142      	bne.n	802034e <_malloc_r+0xea>
 80202c8:	6821      	ldr	r1, [r4, #0]
 80202ca:	1a6d      	subs	r5, r5, r1
 80202cc:	4629      	mov	r1, r5
 80202ce:	4630      	mov	r0, r6
 80202d0:	f7ff ffa6 	bl	8020220 <sbrk_aligned>
 80202d4:	3001      	adds	r0, #1
 80202d6:	d03a      	beq.n	802034e <_malloc_r+0xea>
 80202d8:	6823      	ldr	r3, [r4, #0]
 80202da:	442b      	add	r3, r5
 80202dc:	6023      	str	r3, [r4, #0]
 80202de:	f8d8 3000 	ldr.w	r3, [r8]
 80202e2:	685a      	ldr	r2, [r3, #4]
 80202e4:	bb62      	cbnz	r2, 8020340 <_malloc_r+0xdc>
 80202e6:	f8c8 7000 	str.w	r7, [r8]
 80202ea:	e00f      	b.n	802030c <_malloc_r+0xa8>
 80202ec:	6822      	ldr	r2, [r4, #0]
 80202ee:	1b52      	subs	r2, r2, r5
 80202f0:	d420      	bmi.n	8020334 <_malloc_r+0xd0>
 80202f2:	2a0b      	cmp	r2, #11
 80202f4:	d917      	bls.n	8020326 <_malloc_r+0xc2>
 80202f6:	1961      	adds	r1, r4, r5
 80202f8:	42a3      	cmp	r3, r4
 80202fa:	6025      	str	r5, [r4, #0]
 80202fc:	bf18      	it	ne
 80202fe:	6059      	strne	r1, [r3, #4]
 8020300:	6863      	ldr	r3, [r4, #4]
 8020302:	bf08      	it	eq
 8020304:	f8c8 1000 	streq.w	r1, [r8]
 8020308:	5162      	str	r2, [r4, r5]
 802030a:	604b      	str	r3, [r1, #4]
 802030c:	4630      	mov	r0, r6
 802030e:	f000 f82f 	bl	8020370 <__malloc_unlock>
 8020312:	f104 000b 	add.w	r0, r4, #11
 8020316:	1d23      	adds	r3, r4, #4
 8020318:	f020 0007 	bic.w	r0, r0, #7
 802031c:	1ac2      	subs	r2, r0, r3
 802031e:	bf1c      	itt	ne
 8020320:	1a1b      	subne	r3, r3, r0
 8020322:	50a3      	strne	r3, [r4, r2]
 8020324:	e7af      	b.n	8020286 <_malloc_r+0x22>
 8020326:	6862      	ldr	r2, [r4, #4]
 8020328:	42a3      	cmp	r3, r4
 802032a:	bf0c      	ite	eq
 802032c:	f8c8 2000 	streq.w	r2, [r8]
 8020330:	605a      	strne	r2, [r3, #4]
 8020332:	e7eb      	b.n	802030c <_malloc_r+0xa8>
 8020334:	4623      	mov	r3, r4
 8020336:	6864      	ldr	r4, [r4, #4]
 8020338:	e7ae      	b.n	8020298 <_malloc_r+0x34>
 802033a:	463c      	mov	r4, r7
 802033c:	687f      	ldr	r7, [r7, #4]
 802033e:	e7b6      	b.n	80202ae <_malloc_r+0x4a>
 8020340:	461a      	mov	r2, r3
 8020342:	685b      	ldr	r3, [r3, #4]
 8020344:	42a3      	cmp	r3, r4
 8020346:	d1fb      	bne.n	8020340 <_malloc_r+0xdc>
 8020348:	2300      	movs	r3, #0
 802034a:	6053      	str	r3, [r2, #4]
 802034c:	e7de      	b.n	802030c <_malloc_r+0xa8>
 802034e:	230c      	movs	r3, #12
 8020350:	6033      	str	r3, [r6, #0]
 8020352:	4630      	mov	r0, r6
 8020354:	f000 f80c 	bl	8020370 <__malloc_unlock>
 8020358:	e794      	b.n	8020284 <_malloc_r+0x20>
 802035a:	6005      	str	r5, [r0, #0]
 802035c:	e7d6      	b.n	802030c <_malloc_r+0xa8>
 802035e:	bf00      	nop
 8020360:	20001cec 	.word	0x20001cec

08020364 <__malloc_lock>:
 8020364:	4801      	ldr	r0, [pc, #4]	@ (802036c <__malloc_lock+0x8>)
 8020366:	f000 ba9c 	b.w	80208a2 <__retarget_lock_acquire_recursive>
 802036a:	bf00      	nop
 802036c:	20001e30 	.word	0x20001e30

08020370 <__malloc_unlock>:
 8020370:	4801      	ldr	r0, [pc, #4]	@ (8020378 <__malloc_unlock+0x8>)
 8020372:	f000 ba97 	b.w	80208a4 <__retarget_lock_release_recursive>
 8020376:	bf00      	nop
 8020378:	20001e30 	.word	0x20001e30

0802037c <std>:
 802037c:	2300      	movs	r3, #0
 802037e:	b510      	push	{r4, lr}
 8020380:	4604      	mov	r4, r0
 8020382:	e9c0 3300 	strd	r3, r3, [r0]
 8020386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802038a:	6083      	str	r3, [r0, #8]
 802038c:	8181      	strh	r1, [r0, #12]
 802038e:	6643      	str	r3, [r0, #100]	@ 0x64
 8020390:	81c2      	strh	r2, [r0, #14]
 8020392:	6183      	str	r3, [r0, #24]
 8020394:	4619      	mov	r1, r3
 8020396:	2208      	movs	r2, #8
 8020398:	305c      	adds	r0, #92	@ 0x5c
 802039a:	f000 f9f9 	bl	8020790 <memset>
 802039e:	4b0d      	ldr	r3, [pc, #52]	@ (80203d4 <std+0x58>)
 80203a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80203a2:	4b0d      	ldr	r3, [pc, #52]	@ (80203d8 <std+0x5c>)
 80203a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80203a6:	4b0d      	ldr	r3, [pc, #52]	@ (80203dc <std+0x60>)
 80203a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80203aa:	4b0d      	ldr	r3, [pc, #52]	@ (80203e0 <std+0x64>)
 80203ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80203ae:	4b0d      	ldr	r3, [pc, #52]	@ (80203e4 <std+0x68>)
 80203b0:	6224      	str	r4, [r4, #32]
 80203b2:	429c      	cmp	r4, r3
 80203b4:	d006      	beq.n	80203c4 <std+0x48>
 80203b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80203ba:	4294      	cmp	r4, r2
 80203bc:	d002      	beq.n	80203c4 <std+0x48>
 80203be:	33d0      	adds	r3, #208	@ 0xd0
 80203c0:	429c      	cmp	r4, r3
 80203c2:	d105      	bne.n	80203d0 <std+0x54>
 80203c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80203c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203cc:	f000 ba68 	b.w	80208a0 <__retarget_lock_init_recursive>
 80203d0:	bd10      	pop	{r4, pc}
 80203d2:	bf00      	nop
 80203d4:	080205e1 	.word	0x080205e1
 80203d8:	08020603 	.word	0x08020603
 80203dc:	0802063b 	.word	0x0802063b
 80203e0:	0802065f 	.word	0x0802065f
 80203e4:	20001cf0 	.word	0x20001cf0

080203e8 <stdio_exit_handler>:
 80203e8:	4a02      	ldr	r2, [pc, #8]	@ (80203f4 <stdio_exit_handler+0xc>)
 80203ea:	4903      	ldr	r1, [pc, #12]	@ (80203f8 <stdio_exit_handler+0x10>)
 80203ec:	4803      	ldr	r0, [pc, #12]	@ (80203fc <stdio_exit_handler+0x14>)
 80203ee:	f000 b869 	b.w	80204c4 <_fwalk_sglue>
 80203f2:	bf00      	nop
 80203f4:	2000063c 	.word	0x2000063c
 80203f8:	08020fd5 	.word	0x08020fd5
 80203fc:	2000064c 	.word	0x2000064c

08020400 <cleanup_stdio>:
 8020400:	6841      	ldr	r1, [r0, #4]
 8020402:	4b0c      	ldr	r3, [pc, #48]	@ (8020434 <cleanup_stdio+0x34>)
 8020404:	4299      	cmp	r1, r3
 8020406:	b510      	push	{r4, lr}
 8020408:	4604      	mov	r4, r0
 802040a:	d001      	beq.n	8020410 <cleanup_stdio+0x10>
 802040c:	f000 fde2 	bl	8020fd4 <_fflush_r>
 8020410:	68a1      	ldr	r1, [r4, #8]
 8020412:	4b09      	ldr	r3, [pc, #36]	@ (8020438 <cleanup_stdio+0x38>)
 8020414:	4299      	cmp	r1, r3
 8020416:	d002      	beq.n	802041e <cleanup_stdio+0x1e>
 8020418:	4620      	mov	r0, r4
 802041a:	f000 fddb 	bl	8020fd4 <_fflush_r>
 802041e:	68e1      	ldr	r1, [r4, #12]
 8020420:	4b06      	ldr	r3, [pc, #24]	@ (802043c <cleanup_stdio+0x3c>)
 8020422:	4299      	cmp	r1, r3
 8020424:	d004      	beq.n	8020430 <cleanup_stdio+0x30>
 8020426:	4620      	mov	r0, r4
 8020428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802042c:	f000 bdd2 	b.w	8020fd4 <_fflush_r>
 8020430:	bd10      	pop	{r4, pc}
 8020432:	bf00      	nop
 8020434:	20001cf0 	.word	0x20001cf0
 8020438:	20001d58 	.word	0x20001d58
 802043c:	20001dc0 	.word	0x20001dc0

08020440 <global_stdio_init.part.0>:
 8020440:	b510      	push	{r4, lr}
 8020442:	4b0b      	ldr	r3, [pc, #44]	@ (8020470 <global_stdio_init.part.0+0x30>)
 8020444:	4c0b      	ldr	r4, [pc, #44]	@ (8020474 <global_stdio_init.part.0+0x34>)
 8020446:	4a0c      	ldr	r2, [pc, #48]	@ (8020478 <global_stdio_init.part.0+0x38>)
 8020448:	601a      	str	r2, [r3, #0]
 802044a:	4620      	mov	r0, r4
 802044c:	2200      	movs	r2, #0
 802044e:	2104      	movs	r1, #4
 8020450:	f7ff ff94 	bl	802037c <std>
 8020454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020458:	2201      	movs	r2, #1
 802045a:	2109      	movs	r1, #9
 802045c:	f7ff ff8e 	bl	802037c <std>
 8020460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020464:	2202      	movs	r2, #2
 8020466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802046a:	2112      	movs	r1, #18
 802046c:	f7ff bf86 	b.w	802037c <std>
 8020470:	20001e28 	.word	0x20001e28
 8020474:	20001cf0 	.word	0x20001cf0
 8020478:	080203e9 	.word	0x080203e9

0802047c <__sfp_lock_acquire>:
 802047c:	4801      	ldr	r0, [pc, #4]	@ (8020484 <__sfp_lock_acquire+0x8>)
 802047e:	f000 ba10 	b.w	80208a2 <__retarget_lock_acquire_recursive>
 8020482:	bf00      	nop
 8020484:	20001e31 	.word	0x20001e31

08020488 <__sfp_lock_release>:
 8020488:	4801      	ldr	r0, [pc, #4]	@ (8020490 <__sfp_lock_release+0x8>)
 802048a:	f000 ba0b 	b.w	80208a4 <__retarget_lock_release_recursive>
 802048e:	bf00      	nop
 8020490:	20001e31 	.word	0x20001e31

08020494 <__sinit>:
 8020494:	b510      	push	{r4, lr}
 8020496:	4604      	mov	r4, r0
 8020498:	f7ff fff0 	bl	802047c <__sfp_lock_acquire>
 802049c:	6a23      	ldr	r3, [r4, #32]
 802049e:	b11b      	cbz	r3, 80204a8 <__sinit+0x14>
 80204a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204a4:	f7ff bff0 	b.w	8020488 <__sfp_lock_release>
 80204a8:	4b04      	ldr	r3, [pc, #16]	@ (80204bc <__sinit+0x28>)
 80204aa:	6223      	str	r3, [r4, #32]
 80204ac:	4b04      	ldr	r3, [pc, #16]	@ (80204c0 <__sinit+0x2c>)
 80204ae:	681b      	ldr	r3, [r3, #0]
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	d1f5      	bne.n	80204a0 <__sinit+0xc>
 80204b4:	f7ff ffc4 	bl	8020440 <global_stdio_init.part.0>
 80204b8:	e7f2      	b.n	80204a0 <__sinit+0xc>
 80204ba:	bf00      	nop
 80204bc:	08020401 	.word	0x08020401
 80204c0:	20001e28 	.word	0x20001e28

080204c4 <_fwalk_sglue>:
 80204c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204c8:	4607      	mov	r7, r0
 80204ca:	4688      	mov	r8, r1
 80204cc:	4614      	mov	r4, r2
 80204ce:	2600      	movs	r6, #0
 80204d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80204d4:	f1b9 0901 	subs.w	r9, r9, #1
 80204d8:	d505      	bpl.n	80204e6 <_fwalk_sglue+0x22>
 80204da:	6824      	ldr	r4, [r4, #0]
 80204dc:	2c00      	cmp	r4, #0
 80204de:	d1f7      	bne.n	80204d0 <_fwalk_sglue+0xc>
 80204e0:	4630      	mov	r0, r6
 80204e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80204e6:	89ab      	ldrh	r3, [r5, #12]
 80204e8:	2b01      	cmp	r3, #1
 80204ea:	d907      	bls.n	80204fc <_fwalk_sglue+0x38>
 80204ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80204f0:	3301      	adds	r3, #1
 80204f2:	d003      	beq.n	80204fc <_fwalk_sglue+0x38>
 80204f4:	4629      	mov	r1, r5
 80204f6:	4638      	mov	r0, r7
 80204f8:	47c0      	blx	r8
 80204fa:	4306      	orrs	r6, r0
 80204fc:	3568      	adds	r5, #104	@ 0x68
 80204fe:	e7e9      	b.n	80204d4 <_fwalk_sglue+0x10>

08020500 <iprintf>:
 8020500:	b40f      	push	{r0, r1, r2, r3}
 8020502:	b507      	push	{r0, r1, r2, lr}
 8020504:	4906      	ldr	r1, [pc, #24]	@ (8020520 <iprintf+0x20>)
 8020506:	ab04      	add	r3, sp, #16
 8020508:	6808      	ldr	r0, [r1, #0]
 802050a:	f853 2b04 	ldr.w	r2, [r3], #4
 802050e:	6881      	ldr	r1, [r0, #8]
 8020510:	9301      	str	r3, [sp, #4]
 8020512:	f000 fa3b 	bl	802098c <_vfiprintf_r>
 8020516:	b003      	add	sp, #12
 8020518:	f85d eb04 	ldr.w	lr, [sp], #4
 802051c:	b004      	add	sp, #16
 802051e:	4770      	bx	lr
 8020520:	20000648 	.word	0x20000648

08020524 <_puts_r>:
 8020524:	6a03      	ldr	r3, [r0, #32]
 8020526:	b570      	push	{r4, r5, r6, lr}
 8020528:	6884      	ldr	r4, [r0, #8]
 802052a:	4605      	mov	r5, r0
 802052c:	460e      	mov	r6, r1
 802052e:	b90b      	cbnz	r3, 8020534 <_puts_r+0x10>
 8020530:	f7ff ffb0 	bl	8020494 <__sinit>
 8020534:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020536:	07db      	lsls	r3, r3, #31
 8020538:	d405      	bmi.n	8020546 <_puts_r+0x22>
 802053a:	89a3      	ldrh	r3, [r4, #12]
 802053c:	0598      	lsls	r0, r3, #22
 802053e:	d402      	bmi.n	8020546 <_puts_r+0x22>
 8020540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020542:	f000 f9ae 	bl	80208a2 <__retarget_lock_acquire_recursive>
 8020546:	89a3      	ldrh	r3, [r4, #12]
 8020548:	0719      	lsls	r1, r3, #28
 802054a:	d502      	bpl.n	8020552 <_puts_r+0x2e>
 802054c:	6923      	ldr	r3, [r4, #16]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d135      	bne.n	80205be <_puts_r+0x9a>
 8020552:	4621      	mov	r1, r4
 8020554:	4628      	mov	r0, r5
 8020556:	f000 f8c5 	bl	80206e4 <__swsetup_r>
 802055a:	b380      	cbz	r0, 80205be <_puts_r+0x9a>
 802055c:	f04f 35ff 	mov.w	r5, #4294967295
 8020560:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020562:	07da      	lsls	r2, r3, #31
 8020564:	d405      	bmi.n	8020572 <_puts_r+0x4e>
 8020566:	89a3      	ldrh	r3, [r4, #12]
 8020568:	059b      	lsls	r3, r3, #22
 802056a:	d402      	bmi.n	8020572 <_puts_r+0x4e>
 802056c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802056e:	f000 f999 	bl	80208a4 <__retarget_lock_release_recursive>
 8020572:	4628      	mov	r0, r5
 8020574:	bd70      	pop	{r4, r5, r6, pc}
 8020576:	2b00      	cmp	r3, #0
 8020578:	da04      	bge.n	8020584 <_puts_r+0x60>
 802057a:	69a2      	ldr	r2, [r4, #24]
 802057c:	429a      	cmp	r2, r3
 802057e:	dc17      	bgt.n	80205b0 <_puts_r+0x8c>
 8020580:	290a      	cmp	r1, #10
 8020582:	d015      	beq.n	80205b0 <_puts_r+0x8c>
 8020584:	6823      	ldr	r3, [r4, #0]
 8020586:	1c5a      	adds	r2, r3, #1
 8020588:	6022      	str	r2, [r4, #0]
 802058a:	7019      	strb	r1, [r3, #0]
 802058c:	68a3      	ldr	r3, [r4, #8]
 802058e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020592:	3b01      	subs	r3, #1
 8020594:	60a3      	str	r3, [r4, #8]
 8020596:	2900      	cmp	r1, #0
 8020598:	d1ed      	bne.n	8020576 <_puts_r+0x52>
 802059a:	2b00      	cmp	r3, #0
 802059c:	da11      	bge.n	80205c2 <_puts_r+0x9e>
 802059e:	4622      	mov	r2, r4
 80205a0:	210a      	movs	r1, #10
 80205a2:	4628      	mov	r0, r5
 80205a4:	f000 f85f 	bl	8020666 <__swbuf_r>
 80205a8:	3001      	adds	r0, #1
 80205aa:	d0d7      	beq.n	802055c <_puts_r+0x38>
 80205ac:	250a      	movs	r5, #10
 80205ae:	e7d7      	b.n	8020560 <_puts_r+0x3c>
 80205b0:	4622      	mov	r2, r4
 80205b2:	4628      	mov	r0, r5
 80205b4:	f000 f857 	bl	8020666 <__swbuf_r>
 80205b8:	3001      	adds	r0, #1
 80205ba:	d1e7      	bne.n	802058c <_puts_r+0x68>
 80205bc:	e7ce      	b.n	802055c <_puts_r+0x38>
 80205be:	3e01      	subs	r6, #1
 80205c0:	e7e4      	b.n	802058c <_puts_r+0x68>
 80205c2:	6823      	ldr	r3, [r4, #0]
 80205c4:	1c5a      	adds	r2, r3, #1
 80205c6:	6022      	str	r2, [r4, #0]
 80205c8:	220a      	movs	r2, #10
 80205ca:	701a      	strb	r2, [r3, #0]
 80205cc:	e7ee      	b.n	80205ac <_puts_r+0x88>
	...

080205d0 <puts>:
 80205d0:	4b02      	ldr	r3, [pc, #8]	@ (80205dc <puts+0xc>)
 80205d2:	4601      	mov	r1, r0
 80205d4:	6818      	ldr	r0, [r3, #0]
 80205d6:	f7ff bfa5 	b.w	8020524 <_puts_r>
 80205da:	bf00      	nop
 80205dc:	20000648 	.word	0x20000648

080205e0 <__sread>:
 80205e0:	b510      	push	{r4, lr}
 80205e2:	460c      	mov	r4, r1
 80205e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205e8:	f000 f8fc 	bl	80207e4 <_read_r>
 80205ec:	2800      	cmp	r0, #0
 80205ee:	bfab      	itete	ge
 80205f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80205f2:	89a3      	ldrhlt	r3, [r4, #12]
 80205f4:	181b      	addge	r3, r3, r0
 80205f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80205fa:	bfac      	ite	ge
 80205fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80205fe:	81a3      	strhlt	r3, [r4, #12]
 8020600:	bd10      	pop	{r4, pc}

08020602 <__swrite>:
 8020602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020606:	461f      	mov	r7, r3
 8020608:	898b      	ldrh	r3, [r1, #12]
 802060a:	05db      	lsls	r3, r3, #23
 802060c:	4605      	mov	r5, r0
 802060e:	460c      	mov	r4, r1
 8020610:	4616      	mov	r6, r2
 8020612:	d505      	bpl.n	8020620 <__swrite+0x1e>
 8020614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020618:	2302      	movs	r3, #2
 802061a:	2200      	movs	r2, #0
 802061c:	f000 f8d0 	bl	80207c0 <_lseek_r>
 8020620:	89a3      	ldrh	r3, [r4, #12]
 8020622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020626:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802062a:	81a3      	strh	r3, [r4, #12]
 802062c:	4632      	mov	r2, r6
 802062e:	463b      	mov	r3, r7
 8020630:	4628      	mov	r0, r5
 8020632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020636:	f000 b8f7 	b.w	8020828 <_write_r>

0802063a <__sseek>:
 802063a:	b510      	push	{r4, lr}
 802063c:	460c      	mov	r4, r1
 802063e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020642:	f000 f8bd 	bl	80207c0 <_lseek_r>
 8020646:	1c43      	adds	r3, r0, #1
 8020648:	89a3      	ldrh	r3, [r4, #12]
 802064a:	bf15      	itete	ne
 802064c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802064e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020652:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020656:	81a3      	strheq	r3, [r4, #12]
 8020658:	bf18      	it	ne
 802065a:	81a3      	strhne	r3, [r4, #12]
 802065c:	bd10      	pop	{r4, pc}

0802065e <__sclose>:
 802065e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020662:	f000 b89d 	b.w	80207a0 <_close_r>

08020666 <__swbuf_r>:
 8020666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020668:	460e      	mov	r6, r1
 802066a:	4614      	mov	r4, r2
 802066c:	4605      	mov	r5, r0
 802066e:	b118      	cbz	r0, 8020678 <__swbuf_r+0x12>
 8020670:	6a03      	ldr	r3, [r0, #32]
 8020672:	b90b      	cbnz	r3, 8020678 <__swbuf_r+0x12>
 8020674:	f7ff ff0e 	bl	8020494 <__sinit>
 8020678:	69a3      	ldr	r3, [r4, #24]
 802067a:	60a3      	str	r3, [r4, #8]
 802067c:	89a3      	ldrh	r3, [r4, #12]
 802067e:	071a      	lsls	r2, r3, #28
 8020680:	d501      	bpl.n	8020686 <__swbuf_r+0x20>
 8020682:	6923      	ldr	r3, [r4, #16]
 8020684:	b943      	cbnz	r3, 8020698 <__swbuf_r+0x32>
 8020686:	4621      	mov	r1, r4
 8020688:	4628      	mov	r0, r5
 802068a:	f000 f82b 	bl	80206e4 <__swsetup_r>
 802068e:	b118      	cbz	r0, 8020698 <__swbuf_r+0x32>
 8020690:	f04f 37ff 	mov.w	r7, #4294967295
 8020694:	4638      	mov	r0, r7
 8020696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020698:	6823      	ldr	r3, [r4, #0]
 802069a:	6922      	ldr	r2, [r4, #16]
 802069c:	1a98      	subs	r0, r3, r2
 802069e:	6963      	ldr	r3, [r4, #20]
 80206a0:	b2f6      	uxtb	r6, r6
 80206a2:	4283      	cmp	r3, r0
 80206a4:	4637      	mov	r7, r6
 80206a6:	dc05      	bgt.n	80206b4 <__swbuf_r+0x4e>
 80206a8:	4621      	mov	r1, r4
 80206aa:	4628      	mov	r0, r5
 80206ac:	f000 fc92 	bl	8020fd4 <_fflush_r>
 80206b0:	2800      	cmp	r0, #0
 80206b2:	d1ed      	bne.n	8020690 <__swbuf_r+0x2a>
 80206b4:	68a3      	ldr	r3, [r4, #8]
 80206b6:	3b01      	subs	r3, #1
 80206b8:	60a3      	str	r3, [r4, #8]
 80206ba:	6823      	ldr	r3, [r4, #0]
 80206bc:	1c5a      	adds	r2, r3, #1
 80206be:	6022      	str	r2, [r4, #0]
 80206c0:	701e      	strb	r6, [r3, #0]
 80206c2:	6962      	ldr	r2, [r4, #20]
 80206c4:	1c43      	adds	r3, r0, #1
 80206c6:	429a      	cmp	r2, r3
 80206c8:	d004      	beq.n	80206d4 <__swbuf_r+0x6e>
 80206ca:	89a3      	ldrh	r3, [r4, #12]
 80206cc:	07db      	lsls	r3, r3, #31
 80206ce:	d5e1      	bpl.n	8020694 <__swbuf_r+0x2e>
 80206d0:	2e0a      	cmp	r6, #10
 80206d2:	d1df      	bne.n	8020694 <__swbuf_r+0x2e>
 80206d4:	4621      	mov	r1, r4
 80206d6:	4628      	mov	r0, r5
 80206d8:	f000 fc7c 	bl	8020fd4 <_fflush_r>
 80206dc:	2800      	cmp	r0, #0
 80206de:	d0d9      	beq.n	8020694 <__swbuf_r+0x2e>
 80206e0:	e7d6      	b.n	8020690 <__swbuf_r+0x2a>
	...

080206e4 <__swsetup_r>:
 80206e4:	b538      	push	{r3, r4, r5, lr}
 80206e6:	4b29      	ldr	r3, [pc, #164]	@ (802078c <__swsetup_r+0xa8>)
 80206e8:	4605      	mov	r5, r0
 80206ea:	6818      	ldr	r0, [r3, #0]
 80206ec:	460c      	mov	r4, r1
 80206ee:	b118      	cbz	r0, 80206f8 <__swsetup_r+0x14>
 80206f0:	6a03      	ldr	r3, [r0, #32]
 80206f2:	b90b      	cbnz	r3, 80206f8 <__swsetup_r+0x14>
 80206f4:	f7ff fece 	bl	8020494 <__sinit>
 80206f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80206fc:	0719      	lsls	r1, r3, #28
 80206fe:	d422      	bmi.n	8020746 <__swsetup_r+0x62>
 8020700:	06da      	lsls	r2, r3, #27
 8020702:	d407      	bmi.n	8020714 <__swsetup_r+0x30>
 8020704:	2209      	movs	r2, #9
 8020706:	602a      	str	r2, [r5, #0]
 8020708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802070c:	81a3      	strh	r3, [r4, #12]
 802070e:	f04f 30ff 	mov.w	r0, #4294967295
 8020712:	e033      	b.n	802077c <__swsetup_r+0x98>
 8020714:	0758      	lsls	r0, r3, #29
 8020716:	d512      	bpl.n	802073e <__swsetup_r+0x5a>
 8020718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802071a:	b141      	cbz	r1, 802072e <__swsetup_r+0x4a>
 802071c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020720:	4299      	cmp	r1, r3
 8020722:	d002      	beq.n	802072a <__swsetup_r+0x46>
 8020724:	4628      	mov	r0, r5
 8020726:	f000 f8bf 	bl	80208a8 <_free_r>
 802072a:	2300      	movs	r3, #0
 802072c:	6363      	str	r3, [r4, #52]	@ 0x34
 802072e:	89a3      	ldrh	r3, [r4, #12]
 8020730:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020734:	81a3      	strh	r3, [r4, #12]
 8020736:	2300      	movs	r3, #0
 8020738:	6063      	str	r3, [r4, #4]
 802073a:	6923      	ldr	r3, [r4, #16]
 802073c:	6023      	str	r3, [r4, #0]
 802073e:	89a3      	ldrh	r3, [r4, #12]
 8020740:	f043 0308 	orr.w	r3, r3, #8
 8020744:	81a3      	strh	r3, [r4, #12]
 8020746:	6923      	ldr	r3, [r4, #16]
 8020748:	b94b      	cbnz	r3, 802075e <__swsetup_r+0x7a>
 802074a:	89a3      	ldrh	r3, [r4, #12]
 802074c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020754:	d003      	beq.n	802075e <__swsetup_r+0x7a>
 8020756:	4621      	mov	r1, r4
 8020758:	4628      	mov	r0, r5
 802075a:	f000 fc89 	bl	8021070 <__smakebuf_r>
 802075e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020762:	f013 0201 	ands.w	r2, r3, #1
 8020766:	d00a      	beq.n	802077e <__swsetup_r+0x9a>
 8020768:	2200      	movs	r2, #0
 802076a:	60a2      	str	r2, [r4, #8]
 802076c:	6962      	ldr	r2, [r4, #20]
 802076e:	4252      	negs	r2, r2
 8020770:	61a2      	str	r2, [r4, #24]
 8020772:	6922      	ldr	r2, [r4, #16]
 8020774:	b942      	cbnz	r2, 8020788 <__swsetup_r+0xa4>
 8020776:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802077a:	d1c5      	bne.n	8020708 <__swsetup_r+0x24>
 802077c:	bd38      	pop	{r3, r4, r5, pc}
 802077e:	0799      	lsls	r1, r3, #30
 8020780:	bf58      	it	pl
 8020782:	6962      	ldrpl	r2, [r4, #20]
 8020784:	60a2      	str	r2, [r4, #8]
 8020786:	e7f4      	b.n	8020772 <__swsetup_r+0x8e>
 8020788:	2000      	movs	r0, #0
 802078a:	e7f7      	b.n	802077c <__swsetup_r+0x98>
 802078c:	20000648 	.word	0x20000648

08020790 <memset>:
 8020790:	4402      	add	r2, r0
 8020792:	4603      	mov	r3, r0
 8020794:	4293      	cmp	r3, r2
 8020796:	d100      	bne.n	802079a <memset+0xa>
 8020798:	4770      	bx	lr
 802079a:	f803 1b01 	strb.w	r1, [r3], #1
 802079e:	e7f9      	b.n	8020794 <memset+0x4>

080207a0 <_close_r>:
 80207a0:	b538      	push	{r3, r4, r5, lr}
 80207a2:	4d06      	ldr	r5, [pc, #24]	@ (80207bc <_close_r+0x1c>)
 80207a4:	2300      	movs	r3, #0
 80207a6:	4604      	mov	r4, r0
 80207a8:	4608      	mov	r0, r1
 80207aa:	602b      	str	r3, [r5, #0]
 80207ac:	f7e1 f90b 	bl	80019c6 <_close>
 80207b0:	1c43      	adds	r3, r0, #1
 80207b2:	d102      	bne.n	80207ba <_close_r+0x1a>
 80207b4:	682b      	ldr	r3, [r5, #0]
 80207b6:	b103      	cbz	r3, 80207ba <_close_r+0x1a>
 80207b8:	6023      	str	r3, [r4, #0]
 80207ba:	bd38      	pop	{r3, r4, r5, pc}
 80207bc:	20001e2c 	.word	0x20001e2c

080207c0 <_lseek_r>:
 80207c0:	b538      	push	{r3, r4, r5, lr}
 80207c2:	4d07      	ldr	r5, [pc, #28]	@ (80207e0 <_lseek_r+0x20>)
 80207c4:	4604      	mov	r4, r0
 80207c6:	4608      	mov	r0, r1
 80207c8:	4611      	mov	r1, r2
 80207ca:	2200      	movs	r2, #0
 80207cc:	602a      	str	r2, [r5, #0]
 80207ce:	461a      	mov	r2, r3
 80207d0:	f7e1 f91d 	bl	8001a0e <_lseek>
 80207d4:	1c43      	adds	r3, r0, #1
 80207d6:	d102      	bne.n	80207de <_lseek_r+0x1e>
 80207d8:	682b      	ldr	r3, [r5, #0]
 80207da:	b103      	cbz	r3, 80207de <_lseek_r+0x1e>
 80207dc:	6023      	str	r3, [r4, #0]
 80207de:	bd38      	pop	{r3, r4, r5, pc}
 80207e0:	20001e2c 	.word	0x20001e2c

080207e4 <_read_r>:
 80207e4:	b538      	push	{r3, r4, r5, lr}
 80207e6:	4d07      	ldr	r5, [pc, #28]	@ (8020804 <_read_r+0x20>)
 80207e8:	4604      	mov	r4, r0
 80207ea:	4608      	mov	r0, r1
 80207ec:	4611      	mov	r1, r2
 80207ee:	2200      	movs	r2, #0
 80207f0:	602a      	str	r2, [r5, #0]
 80207f2:	461a      	mov	r2, r3
 80207f4:	f7e1 f8ae 	bl	8001954 <_read>
 80207f8:	1c43      	adds	r3, r0, #1
 80207fa:	d102      	bne.n	8020802 <_read_r+0x1e>
 80207fc:	682b      	ldr	r3, [r5, #0]
 80207fe:	b103      	cbz	r3, 8020802 <_read_r+0x1e>
 8020800:	6023      	str	r3, [r4, #0]
 8020802:	bd38      	pop	{r3, r4, r5, pc}
 8020804:	20001e2c 	.word	0x20001e2c

08020808 <_sbrk_r>:
 8020808:	b538      	push	{r3, r4, r5, lr}
 802080a:	4d06      	ldr	r5, [pc, #24]	@ (8020824 <_sbrk_r+0x1c>)
 802080c:	2300      	movs	r3, #0
 802080e:	4604      	mov	r4, r0
 8020810:	4608      	mov	r0, r1
 8020812:	602b      	str	r3, [r5, #0]
 8020814:	f7e1 f908 	bl	8001a28 <_sbrk>
 8020818:	1c43      	adds	r3, r0, #1
 802081a:	d102      	bne.n	8020822 <_sbrk_r+0x1a>
 802081c:	682b      	ldr	r3, [r5, #0]
 802081e:	b103      	cbz	r3, 8020822 <_sbrk_r+0x1a>
 8020820:	6023      	str	r3, [r4, #0]
 8020822:	bd38      	pop	{r3, r4, r5, pc}
 8020824:	20001e2c 	.word	0x20001e2c

08020828 <_write_r>:
 8020828:	b538      	push	{r3, r4, r5, lr}
 802082a:	4d07      	ldr	r5, [pc, #28]	@ (8020848 <_write_r+0x20>)
 802082c:	4604      	mov	r4, r0
 802082e:	4608      	mov	r0, r1
 8020830:	4611      	mov	r1, r2
 8020832:	2200      	movs	r2, #0
 8020834:	602a      	str	r2, [r5, #0]
 8020836:	461a      	mov	r2, r3
 8020838:	f7e1 f8a9 	bl	800198e <_write>
 802083c:	1c43      	adds	r3, r0, #1
 802083e:	d102      	bne.n	8020846 <_write_r+0x1e>
 8020840:	682b      	ldr	r3, [r5, #0]
 8020842:	b103      	cbz	r3, 8020846 <_write_r+0x1e>
 8020844:	6023      	str	r3, [r4, #0]
 8020846:	bd38      	pop	{r3, r4, r5, pc}
 8020848:	20001e2c 	.word	0x20001e2c

0802084c <__errno>:
 802084c:	4b01      	ldr	r3, [pc, #4]	@ (8020854 <__errno+0x8>)
 802084e:	6818      	ldr	r0, [r3, #0]
 8020850:	4770      	bx	lr
 8020852:	bf00      	nop
 8020854:	20000648 	.word	0x20000648

08020858 <__libc_init_array>:
 8020858:	b570      	push	{r4, r5, r6, lr}
 802085a:	4d0d      	ldr	r5, [pc, #52]	@ (8020890 <__libc_init_array+0x38>)
 802085c:	4c0d      	ldr	r4, [pc, #52]	@ (8020894 <__libc_init_array+0x3c>)
 802085e:	1b64      	subs	r4, r4, r5
 8020860:	10a4      	asrs	r4, r4, #2
 8020862:	2600      	movs	r6, #0
 8020864:	42a6      	cmp	r6, r4
 8020866:	d109      	bne.n	802087c <__libc_init_array+0x24>
 8020868:	4d0b      	ldr	r5, [pc, #44]	@ (8020898 <__libc_init_array+0x40>)
 802086a:	4c0c      	ldr	r4, [pc, #48]	@ (802089c <__libc_init_array+0x44>)
 802086c:	f000 fe24 	bl	80214b8 <_init>
 8020870:	1b64      	subs	r4, r4, r5
 8020872:	10a4      	asrs	r4, r4, #2
 8020874:	2600      	movs	r6, #0
 8020876:	42a6      	cmp	r6, r4
 8020878:	d105      	bne.n	8020886 <__libc_init_array+0x2e>
 802087a:	bd70      	pop	{r4, r5, r6, pc}
 802087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020880:	4798      	blx	r3
 8020882:	3601      	adds	r6, #1
 8020884:	e7ee      	b.n	8020864 <__libc_init_array+0xc>
 8020886:	f855 3b04 	ldr.w	r3, [r5], #4
 802088a:	4798      	blx	r3
 802088c:	3601      	adds	r6, #1
 802088e:	e7f2      	b.n	8020876 <__libc_init_array+0x1e>
 8020890:	08022200 	.word	0x08022200
 8020894:	08022200 	.word	0x08022200
 8020898:	08022200 	.word	0x08022200
 802089c:	08022204 	.word	0x08022204

080208a0 <__retarget_lock_init_recursive>:
 80208a0:	4770      	bx	lr

080208a2 <__retarget_lock_acquire_recursive>:
 80208a2:	4770      	bx	lr

080208a4 <__retarget_lock_release_recursive>:
 80208a4:	4770      	bx	lr
	...

080208a8 <_free_r>:
 80208a8:	b538      	push	{r3, r4, r5, lr}
 80208aa:	4605      	mov	r5, r0
 80208ac:	2900      	cmp	r1, #0
 80208ae:	d041      	beq.n	8020934 <_free_r+0x8c>
 80208b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80208b4:	1f0c      	subs	r4, r1, #4
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	bfb8      	it	lt
 80208ba:	18e4      	addlt	r4, r4, r3
 80208bc:	f7ff fd52 	bl	8020364 <__malloc_lock>
 80208c0:	4a1d      	ldr	r2, [pc, #116]	@ (8020938 <_free_r+0x90>)
 80208c2:	6813      	ldr	r3, [r2, #0]
 80208c4:	b933      	cbnz	r3, 80208d4 <_free_r+0x2c>
 80208c6:	6063      	str	r3, [r4, #4]
 80208c8:	6014      	str	r4, [r2, #0]
 80208ca:	4628      	mov	r0, r5
 80208cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80208d0:	f7ff bd4e 	b.w	8020370 <__malloc_unlock>
 80208d4:	42a3      	cmp	r3, r4
 80208d6:	d908      	bls.n	80208ea <_free_r+0x42>
 80208d8:	6820      	ldr	r0, [r4, #0]
 80208da:	1821      	adds	r1, r4, r0
 80208dc:	428b      	cmp	r3, r1
 80208de:	bf01      	itttt	eq
 80208e0:	6819      	ldreq	r1, [r3, #0]
 80208e2:	685b      	ldreq	r3, [r3, #4]
 80208e4:	1809      	addeq	r1, r1, r0
 80208e6:	6021      	streq	r1, [r4, #0]
 80208e8:	e7ed      	b.n	80208c6 <_free_r+0x1e>
 80208ea:	461a      	mov	r2, r3
 80208ec:	685b      	ldr	r3, [r3, #4]
 80208ee:	b10b      	cbz	r3, 80208f4 <_free_r+0x4c>
 80208f0:	42a3      	cmp	r3, r4
 80208f2:	d9fa      	bls.n	80208ea <_free_r+0x42>
 80208f4:	6811      	ldr	r1, [r2, #0]
 80208f6:	1850      	adds	r0, r2, r1
 80208f8:	42a0      	cmp	r0, r4
 80208fa:	d10b      	bne.n	8020914 <_free_r+0x6c>
 80208fc:	6820      	ldr	r0, [r4, #0]
 80208fe:	4401      	add	r1, r0
 8020900:	1850      	adds	r0, r2, r1
 8020902:	4283      	cmp	r3, r0
 8020904:	6011      	str	r1, [r2, #0]
 8020906:	d1e0      	bne.n	80208ca <_free_r+0x22>
 8020908:	6818      	ldr	r0, [r3, #0]
 802090a:	685b      	ldr	r3, [r3, #4]
 802090c:	6053      	str	r3, [r2, #4]
 802090e:	4408      	add	r0, r1
 8020910:	6010      	str	r0, [r2, #0]
 8020912:	e7da      	b.n	80208ca <_free_r+0x22>
 8020914:	d902      	bls.n	802091c <_free_r+0x74>
 8020916:	230c      	movs	r3, #12
 8020918:	602b      	str	r3, [r5, #0]
 802091a:	e7d6      	b.n	80208ca <_free_r+0x22>
 802091c:	6820      	ldr	r0, [r4, #0]
 802091e:	1821      	adds	r1, r4, r0
 8020920:	428b      	cmp	r3, r1
 8020922:	bf04      	itt	eq
 8020924:	6819      	ldreq	r1, [r3, #0]
 8020926:	685b      	ldreq	r3, [r3, #4]
 8020928:	6063      	str	r3, [r4, #4]
 802092a:	bf04      	itt	eq
 802092c:	1809      	addeq	r1, r1, r0
 802092e:	6021      	streq	r1, [r4, #0]
 8020930:	6054      	str	r4, [r2, #4]
 8020932:	e7ca      	b.n	80208ca <_free_r+0x22>
 8020934:	bd38      	pop	{r3, r4, r5, pc}
 8020936:	bf00      	nop
 8020938:	20001cec 	.word	0x20001cec

0802093c <__sfputc_r>:
 802093c:	6893      	ldr	r3, [r2, #8]
 802093e:	3b01      	subs	r3, #1
 8020940:	2b00      	cmp	r3, #0
 8020942:	b410      	push	{r4}
 8020944:	6093      	str	r3, [r2, #8]
 8020946:	da07      	bge.n	8020958 <__sfputc_r+0x1c>
 8020948:	6994      	ldr	r4, [r2, #24]
 802094a:	42a3      	cmp	r3, r4
 802094c:	db01      	blt.n	8020952 <__sfputc_r+0x16>
 802094e:	290a      	cmp	r1, #10
 8020950:	d102      	bne.n	8020958 <__sfputc_r+0x1c>
 8020952:	bc10      	pop	{r4}
 8020954:	f7ff be87 	b.w	8020666 <__swbuf_r>
 8020958:	6813      	ldr	r3, [r2, #0]
 802095a:	1c58      	adds	r0, r3, #1
 802095c:	6010      	str	r0, [r2, #0]
 802095e:	7019      	strb	r1, [r3, #0]
 8020960:	4608      	mov	r0, r1
 8020962:	bc10      	pop	{r4}
 8020964:	4770      	bx	lr

08020966 <__sfputs_r>:
 8020966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020968:	4606      	mov	r6, r0
 802096a:	460f      	mov	r7, r1
 802096c:	4614      	mov	r4, r2
 802096e:	18d5      	adds	r5, r2, r3
 8020970:	42ac      	cmp	r4, r5
 8020972:	d101      	bne.n	8020978 <__sfputs_r+0x12>
 8020974:	2000      	movs	r0, #0
 8020976:	e007      	b.n	8020988 <__sfputs_r+0x22>
 8020978:	f814 1b01 	ldrb.w	r1, [r4], #1
 802097c:	463a      	mov	r2, r7
 802097e:	4630      	mov	r0, r6
 8020980:	f7ff ffdc 	bl	802093c <__sfputc_r>
 8020984:	1c43      	adds	r3, r0, #1
 8020986:	d1f3      	bne.n	8020970 <__sfputs_r+0xa>
 8020988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802098c <_vfiprintf_r>:
 802098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020990:	460d      	mov	r5, r1
 8020992:	b09d      	sub	sp, #116	@ 0x74
 8020994:	4614      	mov	r4, r2
 8020996:	4698      	mov	r8, r3
 8020998:	4606      	mov	r6, r0
 802099a:	b118      	cbz	r0, 80209a4 <_vfiprintf_r+0x18>
 802099c:	6a03      	ldr	r3, [r0, #32]
 802099e:	b90b      	cbnz	r3, 80209a4 <_vfiprintf_r+0x18>
 80209a0:	f7ff fd78 	bl	8020494 <__sinit>
 80209a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209a6:	07d9      	lsls	r1, r3, #31
 80209a8:	d405      	bmi.n	80209b6 <_vfiprintf_r+0x2a>
 80209aa:	89ab      	ldrh	r3, [r5, #12]
 80209ac:	059a      	lsls	r2, r3, #22
 80209ae:	d402      	bmi.n	80209b6 <_vfiprintf_r+0x2a>
 80209b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80209b2:	f7ff ff76 	bl	80208a2 <__retarget_lock_acquire_recursive>
 80209b6:	89ab      	ldrh	r3, [r5, #12]
 80209b8:	071b      	lsls	r3, r3, #28
 80209ba:	d501      	bpl.n	80209c0 <_vfiprintf_r+0x34>
 80209bc:	692b      	ldr	r3, [r5, #16]
 80209be:	b99b      	cbnz	r3, 80209e8 <_vfiprintf_r+0x5c>
 80209c0:	4629      	mov	r1, r5
 80209c2:	4630      	mov	r0, r6
 80209c4:	f7ff fe8e 	bl	80206e4 <__swsetup_r>
 80209c8:	b170      	cbz	r0, 80209e8 <_vfiprintf_r+0x5c>
 80209ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209cc:	07dc      	lsls	r4, r3, #31
 80209ce:	d504      	bpl.n	80209da <_vfiprintf_r+0x4e>
 80209d0:	f04f 30ff 	mov.w	r0, #4294967295
 80209d4:	b01d      	add	sp, #116	@ 0x74
 80209d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209da:	89ab      	ldrh	r3, [r5, #12]
 80209dc:	0598      	lsls	r0, r3, #22
 80209de:	d4f7      	bmi.n	80209d0 <_vfiprintf_r+0x44>
 80209e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80209e2:	f7ff ff5f 	bl	80208a4 <__retarget_lock_release_recursive>
 80209e6:	e7f3      	b.n	80209d0 <_vfiprintf_r+0x44>
 80209e8:	2300      	movs	r3, #0
 80209ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80209ec:	2320      	movs	r3, #32
 80209ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80209f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80209f6:	2330      	movs	r3, #48	@ 0x30
 80209f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020ba8 <_vfiprintf_r+0x21c>
 80209fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020a00:	f04f 0901 	mov.w	r9, #1
 8020a04:	4623      	mov	r3, r4
 8020a06:	469a      	mov	sl, r3
 8020a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a0c:	b10a      	cbz	r2, 8020a12 <_vfiprintf_r+0x86>
 8020a0e:	2a25      	cmp	r2, #37	@ 0x25
 8020a10:	d1f9      	bne.n	8020a06 <_vfiprintf_r+0x7a>
 8020a12:	ebba 0b04 	subs.w	fp, sl, r4
 8020a16:	d00b      	beq.n	8020a30 <_vfiprintf_r+0xa4>
 8020a18:	465b      	mov	r3, fp
 8020a1a:	4622      	mov	r2, r4
 8020a1c:	4629      	mov	r1, r5
 8020a1e:	4630      	mov	r0, r6
 8020a20:	f7ff ffa1 	bl	8020966 <__sfputs_r>
 8020a24:	3001      	adds	r0, #1
 8020a26:	f000 80a7 	beq.w	8020b78 <_vfiprintf_r+0x1ec>
 8020a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a2c:	445a      	add	r2, fp
 8020a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a30:	f89a 3000 	ldrb.w	r3, [sl]
 8020a34:	2b00      	cmp	r3, #0
 8020a36:	f000 809f 	beq.w	8020b78 <_vfiprintf_r+0x1ec>
 8020a3a:	2300      	movs	r3, #0
 8020a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8020a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020a44:	f10a 0a01 	add.w	sl, sl, #1
 8020a48:	9304      	str	r3, [sp, #16]
 8020a4a:	9307      	str	r3, [sp, #28]
 8020a4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020a50:	931a      	str	r3, [sp, #104]	@ 0x68
 8020a52:	4654      	mov	r4, sl
 8020a54:	2205      	movs	r2, #5
 8020a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a5a:	4853      	ldr	r0, [pc, #332]	@ (8020ba8 <_vfiprintf_r+0x21c>)
 8020a5c:	f7df fb98 	bl	8000190 <memchr>
 8020a60:	9a04      	ldr	r2, [sp, #16]
 8020a62:	b9d8      	cbnz	r0, 8020a9c <_vfiprintf_r+0x110>
 8020a64:	06d1      	lsls	r1, r2, #27
 8020a66:	bf44      	itt	mi
 8020a68:	2320      	movmi	r3, #32
 8020a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a6e:	0713      	lsls	r3, r2, #28
 8020a70:	bf44      	itt	mi
 8020a72:	232b      	movmi	r3, #43	@ 0x2b
 8020a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a78:	f89a 3000 	ldrb.w	r3, [sl]
 8020a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a7e:	d015      	beq.n	8020aac <_vfiprintf_r+0x120>
 8020a80:	9a07      	ldr	r2, [sp, #28]
 8020a82:	4654      	mov	r4, sl
 8020a84:	2000      	movs	r0, #0
 8020a86:	f04f 0c0a 	mov.w	ip, #10
 8020a8a:	4621      	mov	r1, r4
 8020a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020a90:	3b30      	subs	r3, #48	@ 0x30
 8020a92:	2b09      	cmp	r3, #9
 8020a94:	d94b      	bls.n	8020b2e <_vfiprintf_r+0x1a2>
 8020a96:	b1b0      	cbz	r0, 8020ac6 <_vfiprintf_r+0x13a>
 8020a98:	9207      	str	r2, [sp, #28]
 8020a9a:	e014      	b.n	8020ac6 <_vfiprintf_r+0x13a>
 8020a9c:	eba0 0308 	sub.w	r3, r0, r8
 8020aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8020aa4:	4313      	orrs	r3, r2
 8020aa6:	9304      	str	r3, [sp, #16]
 8020aa8:	46a2      	mov	sl, r4
 8020aaa:	e7d2      	b.n	8020a52 <_vfiprintf_r+0xc6>
 8020aac:	9b03      	ldr	r3, [sp, #12]
 8020aae:	1d19      	adds	r1, r3, #4
 8020ab0:	681b      	ldr	r3, [r3, #0]
 8020ab2:	9103      	str	r1, [sp, #12]
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	bfbb      	ittet	lt
 8020ab8:	425b      	neglt	r3, r3
 8020aba:	f042 0202 	orrlt.w	r2, r2, #2
 8020abe:	9307      	strge	r3, [sp, #28]
 8020ac0:	9307      	strlt	r3, [sp, #28]
 8020ac2:	bfb8      	it	lt
 8020ac4:	9204      	strlt	r2, [sp, #16]
 8020ac6:	7823      	ldrb	r3, [r4, #0]
 8020ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8020aca:	d10a      	bne.n	8020ae2 <_vfiprintf_r+0x156>
 8020acc:	7863      	ldrb	r3, [r4, #1]
 8020ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8020ad0:	d132      	bne.n	8020b38 <_vfiprintf_r+0x1ac>
 8020ad2:	9b03      	ldr	r3, [sp, #12]
 8020ad4:	1d1a      	adds	r2, r3, #4
 8020ad6:	681b      	ldr	r3, [r3, #0]
 8020ad8:	9203      	str	r2, [sp, #12]
 8020ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020ade:	3402      	adds	r4, #2
 8020ae0:	9305      	str	r3, [sp, #20]
 8020ae2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8020bac <_vfiprintf_r+0x220>
 8020ae6:	7821      	ldrb	r1, [r4, #0]
 8020ae8:	2203      	movs	r2, #3
 8020aea:	4650      	mov	r0, sl
 8020aec:	f7df fb50 	bl	8000190 <memchr>
 8020af0:	b138      	cbz	r0, 8020b02 <_vfiprintf_r+0x176>
 8020af2:	9b04      	ldr	r3, [sp, #16]
 8020af4:	eba0 000a 	sub.w	r0, r0, sl
 8020af8:	2240      	movs	r2, #64	@ 0x40
 8020afa:	4082      	lsls	r2, r0
 8020afc:	4313      	orrs	r3, r2
 8020afe:	3401      	adds	r4, #1
 8020b00:	9304      	str	r3, [sp, #16]
 8020b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b06:	482a      	ldr	r0, [pc, #168]	@ (8020bb0 <_vfiprintf_r+0x224>)
 8020b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020b0c:	2206      	movs	r2, #6
 8020b0e:	f7df fb3f 	bl	8000190 <memchr>
 8020b12:	2800      	cmp	r0, #0
 8020b14:	d03f      	beq.n	8020b96 <_vfiprintf_r+0x20a>
 8020b16:	4b27      	ldr	r3, [pc, #156]	@ (8020bb4 <_vfiprintf_r+0x228>)
 8020b18:	bb1b      	cbnz	r3, 8020b62 <_vfiprintf_r+0x1d6>
 8020b1a:	9b03      	ldr	r3, [sp, #12]
 8020b1c:	3307      	adds	r3, #7
 8020b1e:	f023 0307 	bic.w	r3, r3, #7
 8020b22:	3308      	adds	r3, #8
 8020b24:	9303      	str	r3, [sp, #12]
 8020b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b28:	443b      	add	r3, r7
 8020b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b2c:	e76a      	b.n	8020a04 <_vfiprintf_r+0x78>
 8020b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8020b32:	460c      	mov	r4, r1
 8020b34:	2001      	movs	r0, #1
 8020b36:	e7a8      	b.n	8020a8a <_vfiprintf_r+0xfe>
 8020b38:	2300      	movs	r3, #0
 8020b3a:	3401      	adds	r4, #1
 8020b3c:	9305      	str	r3, [sp, #20]
 8020b3e:	4619      	mov	r1, r3
 8020b40:	f04f 0c0a 	mov.w	ip, #10
 8020b44:	4620      	mov	r0, r4
 8020b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b4a:	3a30      	subs	r2, #48	@ 0x30
 8020b4c:	2a09      	cmp	r2, #9
 8020b4e:	d903      	bls.n	8020b58 <_vfiprintf_r+0x1cc>
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	d0c6      	beq.n	8020ae2 <_vfiprintf_r+0x156>
 8020b54:	9105      	str	r1, [sp, #20]
 8020b56:	e7c4      	b.n	8020ae2 <_vfiprintf_r+0x156>
 8020b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8020b5c:	4604      	mov	r4, r0
 8020b5e:	2301      	movs	r3, #1
 8020b60:	e7f0      	b.n	8020b44 <_vfiprintf_r+0x1b8>
 8020b62:	ab03      	add	r3, sp, #12
 8020b64:	9300      	str	r3, [sp, #0]
 8020b66:	462a      	mov	r2, r5
 8020b68:	4b13      	ldr	r3, [pc, #76]	@ (8020bb8 <_vfiprintf_r+0x22c>)
 8020b6a:	a904      	add	r1, sp, #16
 8020b6c:	4630      	mov	r0, r6
 8020b6e:	f3af 8000 	nop.w
 8020b72:	4607      	mov	r7, r0
 8020b74:	1c78      	adds	r0, r7, #1
 8020b76:	d1d6      	bne.n	8020b26 <_vfiprintf_r+0x19a>
 8020b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020b7a:	07d9      	lsls	r1, r3, #31
 8020b7c:	d405      	bmi.n	8020b8a <_vfiprintf_r+0x1fe>
 8020b7e:	89ab      	ldrh	r3, [r5, #12]
 8020b80:	059a      	lsls	r2, r3, #22
 8020b82:	d402      	bmi.n	8020b8a <_vfiprintf_r+0x1fe>
 8020b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020b86:	f7ff fe8d 	bl	80208a4 <__retarget_lock_release_recursive>
 8020b8a:	89ab      	ldrh	r3, [r5, #12]
 8020b8c:	065b      	lsls	r3, r3, #25
 8020b8e:	f53f af1f 	bmi.w	80209d0 <_vfiprintf_r+0x44>
 8020b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020b94:	e71e      	b.n	80209d4 <_vfiprintf_r+0x48>
 8020b96:	ab03      	add	r3, sp, #12
 8020b98:	9300      	str	r3, [sp, #0]
 8020b9a:	462a      	mov	r2, r5
 8020b9c:	4b06      	ldr	r3, [pc, #24]	@ (8020bb8 <_vfiprintf_r+0x22c>)
 8020b9e:	a904      	add	r1, sp, #16
 8020ba0:	4630      	mov	r0, r6
 8020ba2:	f000 f879 	bl	8020c98 <_printf_i>
 8020ba6:	e7e4      	b.n	8020b72 <_vfiprintf_r+0x1e6>
 8020ba8:	080221a8 	.word	0x080221a8
 8020bac:	080221ae 	.word	0x080221ae
 8020bb0:	080221b2 	.word	0x080221b2
 8020bb4:	00000000 	.word	0x00000000
 8020bb8:	08020967 	.word	0x08020967

08020bbc <_printf_common>:
 8020bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bc0:	4616      	mov	r6, r2
 8020bc2:	4698      	mov	r8, r3
 8020bc4:	688a      	ldr	r2, [r1, #8]
 8020bc6:	690b      	ldr	r3, [r1, #16]
 8020bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020bcc:	4293      	cmp	r3, r2
 8020bce:	bfb8      	it	lt
 8020bd0:	4613      	movlt	r3, r2
 8020bd2:	6033      	str	r3, [r6, #0]
 8020bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020bd8:	4607      	mov	r7, r0
 8020bda:	460c      	mov	r4, r1
 8020bdc:	b10a      	cbz	r2, 8020be2 <_printf_common+0x26>
 8020bde:	3301      	adds	r3, #1
 8020be0:	6033      	str	r3, [r6, #0]
 8020be2:	6823      	ldr	r3, [r4, #0]
 8020be4:	0699      	lsls	r1, r3, #26
 8020be6:	bf42      	ittt	mi
 8020be8:	6833      	ldrmi	r3, [r6, #0]
 8020bea:	3302      	addmi	r3, #2
 8020bec:	6033      	strmi	r3, [r6, #0]
 8020bee:	6825      	ldr	r5, [r4, #0]
 8020bf0:	f015 0506 	ands.w	r5, r5, #6
 8020bf4:	d106      	bne.n	8020c04 <_printf_common+0x48>
 8020bf6:	f104 0a19 	add.w	sl, r4, #25
 8020bfa:	68e3      	ldr	r3, [r4, #12]
 8020bfc:	6832      	ldr	r2, [r6, #0]
 8020bfe:	1a9b      	subs	r3, r3, r2
 8020c00:	42ab      	cmp	r3, r5
 8020c02:	dc26      	bgt.n	8020c52 <_printf_common+0x96>
 8020c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020c08:	6822      	ldr	r2, [r4, #0]
 8020c0a:	3b00      	subs	r3, #0
 8020c0c:	bf18      	it	ne
 8020c0e:	2301      	movne	r3, #1
 8020c10:	0692      	lsls	r2, r2, #26
 8020c12:	d42b      	bmi.n	8020c6c <_printf_common+0xb0>
 8020c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020c18:	4641      	mov	r1, r8
 8020c1a:	4638      	mov	r0, r7
 8020c1c:	47c8      	blx	r9
 8020c1e:	3001      	adds	r0, #1
 8020c20:	d01e      	beq.n	8020c60 <_printf_common+0xa4>
 8020c22:	6823      	ldr	r3, [r4, #0]
 8020c24:	6922      	ldr	r2, [r4, #16]
 8020c26:	f003 0306 	and.w	r3, r3, #6
 8020c2a:	2b04      	cmp	r3, #4
 8020c2c:	bf02      	ittt	eq
 8020c2e:	68e5      	ldreq	r5, [r4, #12]
 8020c30:	6833      	ldreq	r3, [r6, #0]
 8020c32:	1aed      	subeq	r5, r5, r3
 8020c34:	68a3      	ldr	r3, [r4, #8]
 8020c36:	bf0c      	ite	eq
 8020c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020c3c:	2500      	movne	r5, #0
 8020c3e:	4293      	cmp	r3, r2
 8020c40:	bfc4      	itt	gt
 8020c42:	1a9b      	subgt	r3, r3, r2
 8020c44:	18ed      	addgt	r5, r5, r3
 8020c46:	2600      	movs	r6, #0
 8020c48:	341a      	adds	r4, #26
 8020c4a:	42b5      	cmp	r5, r6
 8020c4c:	d11a      	bne.n	8020c84 <_printf_common+0xc8>
 8020c4e:	2000      	movs	r0, #0
 8020c50:	e008      	b.n	8020c64 <_printf_common+0xa8>
 8020c52:	2301      	movs	r3, #1
 8020c54:	4652      	mov	r2, sl
 8020c56:	4641      	mov	r1, r8
 8020c58:	4638      	mov	r0, r7
 8020c5a:	47c8      	blx	r9
 8020c5c:	3001      	adds	r0, #1
 8020c5e:	d103      	bne.n	8020c68 <_printf_common+0xac>
 8020c60:	f04f 30ff 	mov.w	r0, #4294967295
 8020c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c68:	3501      	adds	r5, #1
 8020c6a:	e7c6      	b.n	8020bfa <_printf_common+0x3e>
 8020c6c:	18e1      	adds	r1, r4, r3
 8020c6e:	1c5a      	adds	r2, r3, #1
 8020c70:	2030      	movs	r0, #48	@ 0x30
 8020c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020c76:	4422      	add	r2, r4
 8020c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020c80:	3302      	adds	r3, #2
 8020c82:	e7c7      	b.n	8020c14 <_printf_common+0x58>
 8020c84:	2301      	movs	r3, #1
 8020c86:	4622      	mov	r2, r4
 8020c88:	4641      	mov	r1, r8
 8020c8a:	4638      	mov	r0, r7
 8020c8c:	47c8      	blx	r9
 8020c8e:	3001      	adds	r0, #1
 8020c90:	d0e6      	beq.n	8020c60 <_printf_common+0xa4>
 8020c92:	3601      	adds	r6, #1
 8020c94:	e7d9      	b.n	8020c4a <_printf_common+0x8e>
	...

08020c98 <_printf_i>:
 8020c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020c9c:	7e0f      	ldrb	r7, [r1, #24]
 8020c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020ca0:	2f78      	cmp	r7, #120	@ 0x78
 8020ca2:	4691      	mov	r9, r2
 8020ca4:	4680      	mov	r8, r0
 8020ca6:	460c      	mov	r4, r1
 8020ca8:	469a      	mov	sl, r3
 8020caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020cae:	d807      	bhi.n	8020cc0 <_printf_i+0x28>
 8020cb0:	2f62      	cmp	r7, #98	@ 0x62
 8020cb2:	d80a      	bhi.n	8020cca <_printf_i+0x32>
 8020cb4:	2f00      	cmp	r7, #0
 8020cb6:	f000 80d1 	beq.w	8020e5c <_printf_i+0x1c4>
 8020cba:	2f58      	cmp	r7, #88	@ 0x58
 8020cbc:	f000 80b8 	beq.w	8020e30 <_printf_i+0x198>
 8020cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020cc8:	e03a      	b.n	8020d40 <_printf_i+0xa8>
 8020cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020cce:	2b15      	cmp	r3, #21
 8020cd0:	d8f6      	bhi.n	8020cc0 <_printf_i+0x28>
 8020cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8020cd8 <_printf_i+0x40>)
 8020cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020cd8:	08020d31 	.word	0x08020d31
 8020cdc:	08020d45 	.word	0x08020d45
 8020ce0:	08020cc1 	.word	0x08020cc1
 8020ce4:	08020cc1 	.word	0x08020cc1
 8020ce8:	08020cc1 	.word	0x08020cc1
 8020cec:	08020cc1 	.word	0x08020cc1
 8020cf0:	08020d45 	.word	0x08020d45
 8020cf4:	08020cc1 	.word	0x08020cc1
 8020cf8:	08020cc1 	.word	0x08020cc1
 8020cfc:	08020cc1 	.word	0x08020cc1
 8020d00:	08020cc1 	.word	0x08020cc1
 8020d04:	08020e43 	.word	0x08020e43
 8020d08:	08020d6f 	.word	0x08020d6f
 8020d0c:	08020dfd 	.word	0x08020dfd
 8020d10:	08020cc1 	.word	0x08020cc1
 8020d14:	08020cc1 	.word	0x08020cc1
 8020d18:	08020e65 	.word	0x08020e65
 8020d1c:	08020cc1 	.word	0x08020cc1
 8020d20:	08020d6f 	.word	0x08020d6f
 8020d24:	08020cc1 	.word	0x08020cc1
 8020d28:	08020cc1 	.word	0x08020cc1
 8020d2c:	08020e05 	.word	0x08020e05
 8020d30:	6833      	ldr	r3, [r6, #0]
 8020d32:	1d1a      	adds	r2, r3, #4
 8020d34:	681b      	ldr	r3, [r3, #0]
 8020d36:	6032      	str	r2, [r6, #0]
 8020d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020d40:	2301      	movs	r3, #1
 8020d42:	e09c      	b.n	8020e7e <_printf_i+0x1e6>
 8020d44:	6833      	ldr	r3, [r6, #0]
 8020d46:	6820      	ldr	r0, [r4, #0]
 8020d48:	1d19      	adds	r1, r3, #4
 8020d4a:	6031      	str	r1, [r6, #0]
 8020d4c:	0606      	lsls	r6, r0, #24
 8020d4e:	d501      	bpl.n	8020d54 <_printf_i+0xbc>
 8020d50:	681d      	ldr	r5, [r3, #0]
 8020d52:	e003      	b.n	8020d5c <_printf_i+0xc4>
 8020d54:	0645      	lsls	r5, r0, #25
 8020d56:	d5fb      	bpl.n	8020d50 <_printf_i+0xb8>
 8020d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020d5c:	2d00      	cmp	r5, #0
 8020d5e:	da03      	bge.n	8020d68 <_printf_i+0xd0>
 8020d60:	232d      	movs	r3, #45	@ 0x2d
 8020d62:	426d      	negs	r5, r5
 8020d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020d68:	4858      	ldr	r0, [pc, #352]	@ (8020ecc <_printf_i+0x234>)
 8020d6a:	230a      	movs	r3, #10
 8020d6c:	e011      	b.n	8020d92 <_printf_i+0xfa>
 8020d6e:	6821      	ldr	r1, [r4, #0]
 8020d70:	6833      	ldr	r3, [r6, #0]
 8020d72:	0608      	lsls	r0, r1, #24
 8020d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8020d78:	d402      	bmi.n	8020d80 <_printf_i+0xe8>
 8020d7a:	0649      	lsls	r1, r1, #25
 8020d7c:	bf48      	it	mi
 8020d7e:	b2ad      	uxthmi	r5, r5
 8020d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8020d82:	4852      	ldr	r0, [pc, #328]	@ (8020ecc <_printf_i+0x234>)
 8020d84:	6033      	str	r3, [r6, #0]
 8020d86:	bf14      	ite	ne
 8020d88:	230a      	movne	r3, #10
 8020d8a:	2308      	moveq	r3, #8
 8020d8c:	2100      	movs	r1, #0
 8020d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020d92:	6866      	ldr	r6, [r4, #4]
 8020d94:	60a6      	str	r6, [r4, #8]
 8020d96:	2e00      	cmp	r6, #0
 8020d98:	db05      	blt.n	8020da6 <_printf_i+0x10e>
 8020d9a:	6821      	ldr	r1, [r4, #0]
 8020d9c:	432e      	orrs	r6, r5
 8020d9e:	f021 0104 	bic.w	r1, r1, #4
 8020da2:	6021      	str	r1, [r4, #0]
 8020da4:	d04b      	beq.n	8020e3e <_printf_i+0x1a6>
 8020da6:	4616      	mov	r6, r2
 8020da8:	fbb5 f1f3 	udiv	r1, r5, r3
 8020dac:	fb03 5711 	mls	r7, r3, r1, r5
 8020db0:	5dc7      	ldrb	r7, [r0, r7]
 8020db2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020db6:	462f      	mov	r7, r5
 8020db8:	42bb      	cmp	r3, r7
 8020dba:	460d      	mov	r5, r1
 8020dbc:	d9f4      	bls.n	8020da8 <_printf_i+0x110>
 8020dbe:	2b08      	cmp	r3, #8
 8020dc0:	d10b      	bne.n	8020dda <_printf_i+0x142>
 8020dc2:	6823      	ldr	r3, [r4, #0]
 8020dc4:	07df      	lsls	r7, r3, #31
 8020dc6:	d508      	bpl.n	8020dda <_printf_i+0x142>
 8020dc8:	6923      	ldr	r3, [r4, #16]
 8020dca:	6861      	ldr	r1, [r4, #4]
 8020dcc:	4299      	cmp	r1, r3
 8020dce:	bfde      	ittt	le
 8020dd0:	2330      	movle	r3, #48	@ 0x30
 8020dd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020dd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020dda:	1b92      	subs	r2, r2, r6
 8020ddc:	6122      	str	r2, [r4, #16]
 8020dde:	f8cd a000 	str.w	sl, [sp]
 8020de2:	464b      	mov	r3, r9
 8020de4:	aa03      	add	r2, sp, #12
 8020de6:	4621      	mov	r1, r4
 8020de8:	4640      	mov	r0, r8
 8020dea:	f7ff fee7 	bl	8020bbc <_printf_common>
 8020dee:	3001      	adds	r0, #1
 8020df0:	d14a      	bne.n	8020e88 <_printf_i+0x1f0>
 8020df2:	f04f 30ff 	mov.w	r0, #4294967295
 8020df6:	b004      	add	sp, #16
 8020df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020dfc:	6823      	ldr	r3, [r4, #0]
 8020dfe:	f043 0320 	orr.w	r3, r3, #32
 8020e02:	6023      	str	r3, [r4, #0]
 8020e04:	4832      	ldr	r0, [pc, #200]	@ (8020ed0 <_printf_i+0x238>)
 8020e06:	2778      	movs	r7, #120	@ 0x78
 8020e08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020e0c:	6823      	ldr	r3, [r4, #0]
 8020e0e:	6831      	ldr	r1, [r6, #0]
 8020e10:	061f      	lsls	r7, r3, #24
 8020e12:	f851 5b04 	ldr.w	r5, [r1], #4
 8020e16:	d402      	bmi.n	8020e1e <_printf_i+0x186>
 8020e18:	065f      	lsls	r7, r3, #25
 8020e1a:	bf48      	it	mi
 8020e1c:	b2ad      	uxthmi	r5, r5
 8020e1e:	6031      	str	r1, [r6, #0]
 8020e20:	07d9      	lsls	r1, r3, #31
 8020e22:	bf44      	itt	mi
 8020e24:	f043 0320 	orrmi.w	r3, r3, #32
 8020e28:	6023      	strmi	r3, [r4, #0]
 8020e2a:	b11d      	cbz	r5, 8020e34 <_printf_i+0x19c>
 8020e2c:	2310      	movs	r3, #16
 8020e2e:	e7ad      	b.n	8020d8c <_printf_i+0xf4>
 8020e30:	4826      	ldr	r0, [pc, #152]	@ (8020ecc <_printf_i+0x234>)
 8020e32:	e7e9      	b.n	8020e08 <_printf_i+0x170>
 8020e34:	6823      	ldr	r3, [r4, #0]
 8020e36:	f023 0320 	bic.w	r3, r3, #32
 8020e3a:	6023      	str	r3, [r4, #0]
 8020e3c:	e7f6      	b.n	8020e2c <_printf_i+0x194>
 8020e3e:	4616      	mov	r6, r2
 8020e40:	e7bd      	b.n	8020dbe <_printf_i+0x126>
 8020e42:	6833      	ldr	r3, [r6, #0]
 8020e44:	6825      	ldr	r5, [r4, #0]
 8020e46:	6961      	ldr	r1, [r4, #20]
 8020e48:	1d18      	adds	r0, r3, #4
 8020e4a:	6030      	str	r0, [r6, #0]
 8020e4c:	062e      	lsls	r6, r5, #24
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	d501      	bpl.n	8020e56 <_printf_i+0x1be>
 8020e52:	6019      	str	r1, [r3, #0]
 8020e54:	e002      	b.n	8020e5c <_printf_i+0x1c4>
 8020e56:	0668      	lsls	r0, r5, #25
 8020e58:	d5fb      	bpl.n	8020e52 <_printf_i+0x1ba>
 8020e5a:	8019      	strh	r1, [r3, #0]
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	6123      	str	r3, [r4, #16]
 8020e60:	4616      	mov	r6, r2
 8020e62:	e7bc      	b.n	8020dde <_printf_i+0x146>
 8020e64:	6833      	ldr	r3, [r6, #0]
 8020e66:	1d1a      	adds	r2, r3, #4
 8020e68:	6032      	str	r2, [r6, #0]
 8020e6a:	681e      	ldr	r6, [r3, #0]
 8020e6c:	6862      	ldr	r2, [r4, #4]
 8020e6e:	2100      	movs	r1, #0
 8020e70:	4630      	mov	r0, r6
 8020e72:	f7df f98d 	bl	8000190 <memchr>
 8020e76:	b108      	cbz	r0, 8020e7c <_printf_i+0x1e4>
 8020e78:	1b80      	subs	r0, r0, r6
 8020e7a:	6060      	str	r0, [r4, #4]
 8020e7c:	6863      	ldr	r3, [r4, #4]
 8020e7e:	6123      	str	r3, [r4, #16]
 8020e80:	2300      	movs	r3, #0
 8020e82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020e86:	e7aa      	b.n	8020dde <_printf_i+0x146>
 8020e88:	6923      	ldr	r3, [r4, #16]
 8020e8a:	4632      	mov	r2, r6
 8020e8c:	4649      	mov	r1, r9
 8020e8e:	4640      	mov	r0, r8
 8020e90:	47d0      	blx	sl
 8020e92:	3001      	adds	r0, #1
 8020e94:	d0ad      	beq.n	8020df2 <_printf_i+0x15a>
 8020e96:	6823      	ldr	r3, [r4, #0]
 8020e98:	079b      	lsls	r3, r3, #30
 8020e9a:	d413      	bmi.n	8020ec4 <_printf_i+0x22c>
 8020e9c:	68e0      	ldr	r0, [r4, #12]
 8020e9e:	9b03      	ldr	r3, [sp, #12]
 8020ea0:	4298      	cmp	r0, r3
 8020ea2:	bfb8      	it	lt
 8020ea4:	4618      	movlt	r0, r3
 8020ea6:	e7a6      	b.n	8020df6 <_printf_i+0x15e>
 8020ea8:	2301      	movs	r3, #1
 8020eaa:	4632      	mov	r2, r6
 8020eac:	4649      	mov	r1, r9
 8020eae:	4640      	mov	r0, r8
 8020eb0:	47d0      	blx	sl
 8020eb2:	3001      	adds	r0, #1
 8020eb4:	d09d      	beq.n	8020df2 <_printf_i+0x15a>
 8020eb6:	3501      	adds	r5, #1
 8020eb8:	68e3      	ldr	r3, [r4, #12]
 8020eba:	9903      	ldr	r1, [sp, #12]
 8020ebc:	1a5b      	subs	r3, r3, r1
 8020ebe:	42ab      	cmp	r3, r5
 8020ec0:	dcf2      	bgt.n	8020ea8 <_printf_i+0x210>
 8020ec2:	e7eb      	b.n	8020e9c <_printf_i+0x204>
 8020ec4:	2500      	movs	r5, #0
 8020ec6:	f104 0619 	add.w	r6, r4, #25
 8020eca:	e7f5      	b.n	8020eb8 <_printf_i+0x220>
 8020ecc:	080221b9 	.word	0x080221b9
 8020ed0:	080221ca 	.word	0x080221ca

08020ed4 <__sflush_r>:
 8020ed4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eda:	0716      	lsls	r6, r2, #28
 8020edc:	4605      	mov	r5, r0
 8020ede:	460c      	mov	r4, r1
 8020ee0:	d454      	bmi.n	8020f8c <__sflush_r+0xb8>
 8020ee2:	684b      	ldr	r3, [r1, #4]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	dc02      	bgt.n	8020eee <__sflush_r+0x1a>
 8020ee8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	dd48      	ble.n	8020f80 <__sflush_r+0xac>
 8020eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020ef0:	2e00      	cmp	r6, #0
 8020ef2:	d045      	beq.n	8020f80 <__sflush_r+0xac>
 8020ef4:	2300      	movs	r3, #0
 8020ef6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020efa:	682f      	ldr	r7, [r5, #0]
 8020efc:	6a21      	ldr	r1, [r4, #32]
 8020efe:	602b      	str	r3, [r5, #0]
 8020f00:	d030      	beq.n	8020f64 <__sflush_r+0x90>
 8020f02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020f04:	89a3      	ldrh	r3, [r4, #12]
 8020f06:	0759      	lsls	r1, r3, #29
 8020f08:	d505      	bpl.n	8020f16 <__sflush_r+0x42>
 8020f0a:	6863      	ldr	r3, [r4, #4]
 8020f0c:	1ad2      	subs	r2, r2, r3
 8020f0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020f10:	b10b      	cbz	r3, 8020f16 <__sflush_r+0x42>
 8020f12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020f14:	1ad2      	subs	r2, r2, r3
 8020f16:	2300      	movs	r3, #0
 8020f18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020f1a:	6a21      	ldr	r1, [r4, #32]
 8020f1c:	4628      	mov	r0, r5
 8020f1e:	47b0      	blx	r6
 8020f20:	1c43      	adds	r3, r0, #1
 8020f22:	89a3      	ldrh	r3, [r4, #12]
 8020f24:	d106      	bne.n	8020f34 <__sflush_r+0x60>
 8020f26:	6829      	ldr	r1, [r5, #0]
 8020f28:	291d      	cmp	r1, #29
 8020f2a:	d82b      	bhi.n	8020f84 <__sflush_r+0xb0>
 8020f2c:	4a28      	ldr	r2, [pc, #160]	@ (8020fd0 <__sflush_r+0xfc>)
 8020f2e:	40ca      	lsrs	r2, r1
 8020f30:	07d6      	lsls	r6, r2, #31
 8020f32:	d527      	bpl.n	8020f84 <__sflush_r+0xb0>
 8020f34:	2200      	movs	r2, #0
 8020f36:	6062      	str	r2, [r4, #4]
 8020f38:	04d9      	lsls	r1, r3, #19
 8020f3a:	6922      	ldr	r2, [r4, #16]
 8020f3c:	6022      	str	r2, [r4, #0]
 8020f3e:	d504      	bpl.n	8020f4a <__sflush_r+0x76>
 8020f40:	1c42      	adds	r2, r0, #1
 8020f42:	d101      	bne.n	8020f48 <__sflush_r+0x74>
 8020f44:	682b      	ldr	r3, [r5, #0]
 8020f46:	b903      	cbnz	r3, 8020f4a <__sflush_r+0x76>
 8020f48:	6560      	str	r0, [r4, #84]	@ 0x54
 8020f4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020f4c:	602f      	str	r7, [r5, #0]
 8020f4e:	b1b9      	cbz	r1, 8020f80 <__sflush_r+0xac>
 8020f50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020f54:	4299      	cmp	r1, r3
 8020f56:	d002      	beq.n	8020f5e <__sflush_r+0x8a>
 8020f58:	4628      	mov	r0, r5
 8020f5a:	f7ff fca5 	bl	80208a8 <_free_r>
 8020f5e:	2300      	movs	r3, #0
 8020f60:	6363      	str	r3, [r4, #52]	@ 0x34
 8020f62:	e00d      	b.n	8020f80 <__sflush_r+0xac>
 8020f64:	2301      	movs	r3, #1
 8020f66:	4628      	mov	r0, r5
 8020f68:	47b0      	blx	r6
 8020f6a:	4602      	mov	r2, r0
 8020f6c:	1c50      	adds	r0, r2, #1
 8020f6e:	d1c9      	bne.n	8020f04 <__sflush_r+0x30>
 8020f70:	682b      	ldr	r3, [r5, #0]
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	d0c6      	beq.n	8020f04 <__sflush_r+0x30>
 8020f76:	2b1d      	cmp	r3, #29
 8020f78:	d001      	beq.n	8020f7e <__sflush_r+0xaa>
 8020f7a:	2b16      	cmp	r3, #22
 8020f7c:	d11d      	bne.n	8020fba <__sflush_r+0xe6>
 8020f7e:	602f      	str	r7, [r5, #0]
 8020f80:	2000      	movs	r0, #0
 8020f82:	e021      	b.n	8020fc8 <__sflush_r+0xf4>
 8020f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020f88:	b21b      	sxth	r3, r3
 8020f8a:	e01a      	b.n	8020fc2 <__sflush_r+0xee>
 8020f8c:	690f      	ldr	r7, [r1, #16]
 8020f8e:	2f00      	cmp	r7, #0
 8020f90:	d0f6      	beq.n	8020f80 <__sflush_r+0xac>
 8020f92:	0793      	lsls	r3, r2, #30
 8020f94:	680e      	ldr	r6, [r1, #0]
 8020f96:	bf08      	it	eq
 8020f98:	694b      	ldreq	r3, [r1, #20]
 8020f9a:	600f      	str	r7, [r1, #0]
 8020f9c:	bf18      	it	ne
 8020f9e:	2300      	movne	r3, #0
 8020fa0:	1bf6      	subs	r6, r6, r7
 8020fa2:	608b      	str	r3, [r1, #8]
 8020fa4:	2e00      	cmp	r6, #0
 8020fa6:	ddeb      	ble.n	8020f80 <__sflush_r+0xac>
 8020fa8:	6a21      	ldr	r1, [r4, #32]
 8020faa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8020fae:	4633      	mov	r3, r6
 8020fb0:	463a      	mov	r2, r7
 8020fb2:	4628      	mov	r0, r5
 8020fb4:	47e0      	blx	ip
 8020fb6:	2800      	cmp	r0, #0
 8020fb8:	dc07      	bgt.n	8020fca <__sflush_r+0xf6>
 8020fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020fc2:	81a3      	strh	r3, [r4, #12]
 8020fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8020fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020fca:	4407      	add	r7, r0
 8020fcc:	1a36      	subs	r6, r6, r0
 8020fce:	e7e9      	b.n	8020fa4 <__sflush_r+0xd0>
 8020fd0:	20400001 	.word	0x20400001

08020fd4 <_fflush_r>:
 8020fd4:	b538      	push	{r3, r4, r5, lr}
 8020fd6:	690b      	ldr	r3, [r1, #16]
 8020fd8:	4605      	mov	r5, r0
 8020fda:	460c      	mov	r4, r1
 8020fdc:	b913      	cbnz	r3, 8020fe4 <_fflush_r+0x10>
 8020fde:	2500      	movs	r5, #0
 8020fe0:	4628      	mov	r0, r5
 8020fe2:	bd38      	pop	{r3, r4, r5, pc}
 8020fe4:	b118      	cbz	r0, 8020fee <_fflush_r+0x1a>
 8020fe6:	6a03      	ldr	r3, [r0, #32]
 8020fe8:	b90b      	cbnz	r3, 8020fee <_fflush_r+0x1a>
 8020fea:	f7ff fa53 	bl	8020494 <__sinit>
 8020fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d0f3      	beq.n	8020fde <_fflush_r+0xa>
 8020ff6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020ff8:	07d0      	lsls	r0, r2, #31
 8020ffa:	d404      	bmi.n	8021006 <_fflush_r+0x32>
 8020ffc:	0599      	lsls	r1, r3, #22
 8020ffe:	d402      	bmi.n	8021006 <_fflush_r+0x32>
 8021000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021002:	f7ff fc4e 	bl	80208a2 <__retarget_lock_acquire_recursive>
 8021006:	4628      	mov	r0, r5
 8021008:	4621      	mov	r1, r4
 802100a:	f7ff ff63 	bl	8020ed4 <__sflush_r>
 802100e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021010:	07da      	lsls	r2, r3, #31
 8021012:	4605      	mov	r5, r0
 8021014:	d4e4      	bmi.n	8020fe0 <_fflush_r+0xc>
 8021016:	89a3      	ldrh	r3, [r4, #12]
 8021018:	059b      	lsls	r3, r3, #22
 802101a:	d4e1      	bmi.n	8020fe0 <_fflush_r+0xc>
 802101c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802101e:	f7ff fc41 	bl	80208a4 <__retarget_lock_release_recursive>
 8021022:	e7dd      	b.n	8020fe0 <_fflush_r+0xc>

08021024 <__swhatbuf_r>:
 8021024:	b570      	push	{r4, r5, r6, lr}
 8021026:	460c      	mov	r4, r1
 8021028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802102c:	2900      	cmp	r1, #0
 802102e:	b096      	sub	sp, #88	@ 0x58
 8021030:	4615      	mov	r5, r2
 8021032:	461e      	mov	r6, r3
 8021034:	da0d      	bge.n	8021052 <__swhatbuf_r+0x2e>
 8021036:	89a3      	ldrh	r3, [r4, #12]
 8021038:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802103c:	f04f 0100 	mov.w	r1, #0
 8021040:	bf14      	ite	ne
 8021042:	2340      	movne	r3, #64	@ 0x40
 8021044:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021048:	2000      	movs	r0, #0
 802104a:	6031      	str	r1, [r6, #0]
 802104c:	602b      	str	r3, [r5, #0]
 802104e:	b016      	add	sp, #88	@ 0x58
 8021050:	bd70      	pop	{r4, r5, r6, pc}
 8021052:	466a      	mov	r2, sp
 8021054:	f000 f848 	bl	80210e8 <_fstat_r>
 8021058:	2800      	cmp	r0, #0
 802105a:	dbec      	blt.n	8021036 <__swhatbuf_r+0x12>
 802105c:	9901      	ldr	r1, [sp, #4]
 802105e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021062:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021066:	4259      	negs	r1, r3
 8021068:	4159      	adcs	r1, r3
 802106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802106e:	e7eb      	b.n	8021048 <__swhatbuf_r+0x24>

08021070 <__smakebuf_r>:
 8021070:	898b      	ldrh	r3, [r1, #12]
 8021072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021074:	079d      	lsls	r5, r3, #30
 8021076:	4606      	mov	r6, r0
 8021078:	460c      	mov	r4, r1
 802107a:	d507      	bpl.n	802108c <__smakebuf_r+0x1c>
 802107c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021080:	6023      	str	r3, [r4, #0]
 8021082:	6123      	str	r3, [r4, #16]
 8021084:	2301      	movs	r3, #1
 8021086:	6163      	str	r3, [r4, #20]
 8021088:	b003      	add	sp, #12
 802108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802108c:	ab01      	add	r3, sp, #4
 802108e:	466a      	mov	r2, sp
 8021090:	f7ff ffc8 	bl	8021024 <__swhatbuf_r>
 8021094:	9f00      	ldr	r7, [sp, #0]
 8021096:	4605      	mov	r5, r0
 8021098:	4639      	mov	r1, r7
 802109a:	4630      	mov	r0, r6
 802109c:	f7ff f8e2 	bl	8020264 <_malloc_r>
 80210a0:	b948      	cbnz	r0, 80210b6 <__smakebuf_r+0x46>
 80210a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210a6:	059a      	lsls	r2, r3, #22
 80210a8:	d4ee      	bmi.n	8021088 <__smakebuf_r+0x18>
 80210aa:	f023 0303 	bic.w	r3, r3, #3
 80210ae:	f043 0302 	orr.w	r3, r3, #2
 80210b2:	81a3      	strh	r3, [r4, #12]
 80210b4:	e7e2      	b.n	802107c <__smakebuf_r+0xc>
 80210b6:	89a3      	ldrh	r3, [r4, #12]
 80210b8:	6020      	str	r0, [r4, #0]
 80210ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80210be:	81a3      	strh	r3, [r4, #12]
 80210c0:	9b01      	ldr	r3, [sp, #4]
 80210c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80210c6:	b15b      	cbz	r3, 80210e0 <__smakebuf_r+0x70>
 80210c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80210cc:	4630      	mov	r0, r6
 80210ce:	f000 f81d 	bl	802110c <_isatty_r>
 80210d2:	b128      	cbz	r0, 80210e0 <__smakebuf_r+0x70>
 80210d4:	89a3      	ldrh	r3, [r4, #12]
 80210d6:	f023 0303 	bic.w	r3, r3, #3
 80210da:	f043 0301 	orr.w	r3, r3, #1
 80210de:	81a3      	strh	r3, [r4, #12]
 80210e0:	89a3      	ldrh	r3, [r4, #12]
 80210e2:	431d      	orrs	r5, r3
 80210e4:	81a5      	strh	r5, [r4, #12]
 80210e6:	e7cf      	b.n	8021088 <__smakebuf_r+0x18>

080210e8 <_fstat_r>:
 80210e8:	b538      	push	{r3, r4, r5, lr}
 80210ea:	4d07      	ldr	r5, [pc, #28]	@ (8021108 <_fstat_r+0x20>)
 80210ec:	2300      	movs	r3, #0
 80210ee:	4604      	mov	r4, r0
 80210f0:	4608      	mov	r0, r1
 80210f2:	4611      	mov	r1, r2
 80210f4:	602b      	str	r3, [r5, #0]
 80210f6:	f7e0 fc71 	bl	80019dc <_fstat>
 80210fa:	1c43      	adds	r3, r0, #1
 80210fc:	d102      	bne.n	8021104 <_fstat_r+0x1c>
 80210fe:	682b      	ldr	r3, [r5, #0]
 8021100:	b103      	cbz	r3, 8021104 <_fstat_r+0x1c>
 8021102:	6023      	str	r3, [r4, #0]
 8021104:	bd38      	pop	{r3, r4, r5, pc}
 8021106:	bf00      	nop
 8021108:	20001e2c 	.word	0x20001e2c

0802110c <_isatty_r>:
 802110c:	b538      	push	{r3, r4, r5, lr}
 802110e:	4d06      	ldr	r5, [pc, #24]	@ (8021128 <_isatty_r+0x1c>)
 8021110:	2300      	movs	r3, #0
 8021112:	4604      	mov	r4, r0
 8021114:	4608      	mov	r0, r1
 8021116:	602b      	str	r3, [r5, #0]
 8021118:	f7e0 fc6f 	bl	80019fa <_isatty>
 802111c:	1c43      	adds	r3, r0, #1
 802111e:	d102      	bne.n	8021126 <_isatty_r+0x1a>
 8021120:	682b      	ldr	r3, [r5, #0]
 8021122:	b103      	cbz	r3, 8021126 <_isatty_r+0x1a>
 8021124:	6023      	str	r3, [r4, #0]
 8021126:	bd38      	pop	{r3, r4, r5, pc}
 8021128:	20001e2c 	.word	0x20001e2c

0802112c <expf>:
 802112c:	b538      	push	{r3, r4, r5, lr}
 802112e:	4605      	mov	r5, r0
 8021130:	f000 f8ca 	bl	80212c8 <__ieee754_expf>
 8021134:	4604      	mov	r4, r0
 8021136:	4628      	mov	r0, r5
 8021138:	f000 f81e 	bl	8021178 <finitef>
 802113c:	b150      	cbz	r0, 8021154 <expf+0x28>
 802113e:	490c      	ldr	r1, [pc, #48]	@ (8021170 <expf+0x44>)
 8021140:	4628      	mov	r0, r5
 8021142:	f7df fdab 	bl	8000c9c <__aeabi_fcmpgt>
 8021146:	b138      	cbz	r0, 8021158 <expf+0x2c>
 8021148:	f7ff fb80 	bl	802084c <__errno>
 802114c:	2322      	movs	r3, #34	@ 0x22
 802114e:	6003      	str	r3, [r0, #0]
 8021150:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 8021154:	4620      	mov	r0, r4
 8021156:	bd38      	pop	{r3, r4, r5, pc}
 8021158:	4906      	ldr	r1, [pc, #24]	@ (8021174 <expf+0x48>)
 802115a:	4628      	mov	r0, r5
 802115c:	f7df fd80 	bl	8000c60 <__aeabi_fcmplt>
 8021160:	2800      	cmp	r0, #0
 8021162:	d0f7      	beq.n	8021154 <expf+0x28>
 8021164:	f7ff fb72 	bl	802084c <__errno>
 8021168:	2322      	movs	r3, #34	@ 0x22
 802116a:	6003      	str	r3, [r0, #0]
 802116c:	2400      	movs	r4, #0
 802116e:	e7f1      	b.n	8021154 <expf+0x28>
 8021170:	42b17217 	.word	0x42b17217
 8021174:	c2cff1b5 	.word	0xc2cff1b5

08021178 <finitef>:
 8021178:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802117c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8021180:	bfac      	ite	ge
 8021182:	2000      	movge	r0, #0
 8021184:	2001      	movlt	r0, #1
 8021186:	4770      	bx	lr

08021188 <with_errnof>:
 8021188:	b538      	push	{r3, r4, r5, lr}
 802118a:	4604      	mov	r4, r0
 802118c:	460d      	mov	r5, r1
 802118e:	f7ff fb5d 	bl	802084c <__errno>
 8021192:	6005      	str	r5, [r0, #0]
 8021194:	4620      	mov	r0, r4
 8021196:	bd38      	pop	{r3, r4, r5, pc}

08021198 <xflowf>:
 8021198:	b508      	push	{r3, lr}
 802119a:	b140      	cbz	r0, 80211ae <xflowf+0x16>
 802119c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80211a0:	f7df fbc0 	bl	8000924 <__aeabi_fmul>
 80211a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80211a8:	2122      	movs	r1, #34	@ 0x22
 80211aa:	f7ff bfed 	b.w	8021188 <with_errnof>
 80211ae:	4608      	mov	r0, r1
 80211b0:	e7f6      	b.n	80211a0 <xflowf+0x8>

080211b2 <__math_uflowf>:
 80211b2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80211b6:	f7ff bfef 	b.w	8021198 <xflowf>

080211ba <__math_oflowf>:
 80211ba:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80211be:	f7ff bfeb 	b.w	8021198 <xflowf>
 80211c2:	0000      	movs	r0, r0
 80211c4:	0000      	movs	r0, r0
	...

080211c8 <floor>:
 80211c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80211cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80211d0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80211d4:	2e13      	cmp	r6, #19
 80211d6:	4602      	mov	r2, r0
 80211d8:	460b      	mov	r3, r1
 80211da:	460c      	mov	r4, r1
 80211dc:	4605      	mov	r5, r0
 80211de:	4680      	mov	r8, r0
 80211e0:	dc35      	bgt.n	802124e <floor+0x86>
 80211e2:	2e00      	cmp	r6, #0
 80211e4:	da17      	bge.n	8021216 <floor+0x4e>
 80211e6:	a334      	add	r3, pc, #208	@ (adr r3, 80212b8 <floor+0xf0>)
 80211e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211ec:	f7df f826 	bl	800023c <__adddf3>
 80211f0:	2200      	movs	r2, #0
 80211f2:	2300      	movs	r3, #0
 80211f4:	f7df fa56 	bl	80006a4 <__aeabi_dcmpgt>
 80211f8:	b150      	cbz	r0, 8021210 <floor+0x48>
 80211fa:	2c00      	cmp	r4, #0
 80211fc:	da57      	bge.n	80212ae <floor+0xe6>
 80211fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8021202:	432c      	orrs	r4, r5
 8021204:	2500      	movs	r5, #0
 8021206:	42ac      	cmp	r4, r5
 8021208:	4c2d      	ldr	r4, [pc, #180]	@ (80212c0 <floor+0xf8>)
 802120a:	bf08      	it	eq
 802120c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8021210:	4623      	mov	r3, r4
 8021212:	462a      	mov	r2, r5
 8021214:	e024      	b.n	8021260 <floor+0x98>
 8021216:	4f2b      	ldr	r7, [pc, #172]	@ (80212c4 <floor+0xfc>)
 8021218:	4137      	asrs	r7, r6
 802121a:	ea01 0c07 	and.w	ip, r1, r7
 802121e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8021222:	d01d      	beq.n	8021260 <floor+0x98>
 8021224:	a324      	add	r3, pc, #144	@ (adr r3, 80212b8 <floor+0xf0>)
 8021226:	e9d3 2300 	ldrd	r2, r3, [r3]
 802122a:	f7df f807 	bl	800023c <__adddf3>
 802122e:	2200      	movs	r2, #0
 8021230:	2300      	movs	r3, #0
 8021232:	f7df fa37 	bl	80006a4 <__aeabi_dcmpgt>
 8021236:	2800      	cmp	r0, #0
 8021238:	d0ea      	beq.n	8021210 <floor+0x48>
 802123a:	2c00      	cmp	r4, #0
 802123c:	bfbe      	ittt	lt
 802123e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8021242:	4133      	asrlt	r3, r6
 8021244:	18e4      	addlt	r4, r4, r3
 8021246:	ea24 0407 	bic.w	r4, r4, r7
 802124a:	2500      	movs	r5, #0
 802124c:	e7e0      	b.n	8021210 <floor+0x48>
 802124e:	2e33      	cmp	r6, #51	@ 0x33
 8021250:	dd0a      	ble.n	8021268 <floor+0xa0>
 8021252:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021256:	d103      	bne.n	8021260 <floor+0x98>
 8021258:	f7de fff0 	bl	800023c <__adddf3>
 802125c:	4602      	mov	r2, r0
 802125e:	460b      	mov	r3, r1
 8021260:	4610      	mov	r0, r2
 8021262:	4619      	mov	r1, r3
 8021264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021268:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 802126c:	f04f 3cff 	mov.w	ip, #4294967295
 8021270:	fa2c f707 	lsr.w	r7, ip, r7
 8021274:	4207      	tst	r7, r0
 8021276:	d0f3      	beq.n	8021260 <floor+0x98>
 8021278:	a30f      	add	r3, pc, #60	@ (adr r3, 80212b8 <floor+0xf0>)
 802127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802127e:	f7de ffdd 	bl	800023c <__adddf3>
 8021282:	2200      	movs	r2, #0
 8021284:	2300      	movs	r3, #0
 8021286:	f7df fa0d 	bl	80006a4 <__aeabi_dcmpgt>
 802128a:	2800      	cmp	r0, #0
 802128c:	d0c0      	beq.n	8021210 <floor+0x48>
 802128e:	2c00      	cmp	r4, #0
 8021290:	da0a      	bge.n	80212a8 <floor+0xe0>
 8021292:	2e14      	cmp	r6, #20
 8021294:	d101      	bne.n	802129a <floor+0xd2>
 8021296:	3401      	adds	r4, #1
 8021298:	e006      	b.n	80212a8 <floor+0xe0>
 802129a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802129e:	2301      	movs	r3, #1
 80212a0:	40b3      	lsls	r3, r6
 80212a2:	441d      	add	r5, r3
 80212a4:	4545      	cmp	r5, r8
 80212a6:	d3f6      	bcc.n	8021296 <floor+0xce>
 80212a8:	ea25 0507 	bic.w	r5, r5, r7
 80212ac:	e7b0      	b.n	8021210 <floor+0x48>
 80212ae:	2500      	movs	r5, #0
 80212b0:	462c      	mov	r4, r5
 80212b2:	e7ad      	b.n	8021210 <floor+0x48>
 80212b4:	f3af 8000 	nop.w
 80212b8:	8800759c 	.word	0x8800759c
 80212bc:	7e37e43c 	.word	0x7e37e43c
 80212c0:	bff00000 	.word	0xbff00000
 80212c4:	000fffff 	.word	0x000fffff

080212c8 <__ieee754_expf>:
 80212c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80212d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80212d4:	4604      	mov	r4, r0
 80212d6:	d904      	bls.n	80212e2 <__ieee754_expf+0x1a>
 80212d8:	4601      	mov	r1, r0
 80212da:	f7df fa1b 	bl	8000714 <__addsf3>
 80212de:	4604      	mov	r4, r0
 80212e0:	e005      	b.n	80212ee <__ieee754_expf+0x26>
 80212e2:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 80212e6:	d105      	bne.n	80212f4 <__ieee754_expf+0x2c>
 80212e8:	2e00      	cmp	r6, #0
 80212ea:	f040 80c3 	bne.w	8021474 <__ieee754_expf+0x1ac>
 80212ee:	4620      	mov	r0, r4
 80212f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212f4:	4960      	ldr	r1, [pc, #384]	@ (8021478 <__ieee754_expf+0x1b0>)
 80212f6:	4288      	cmp	r0, r1
 80212f8:	dd04      	ble.n	8021304 <__ieee754_expf+0x3c>
 80212fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212fe:	2000      	movs	r0, #0
 8021300:	f7ff bf5b 	b.w	80211ba <__math_oflowf>
 8021304:	2800      	cmp	r0, #0
 8021306:	da07      	bge.n	8021318 <__ieee754_expf+0x50>
 8021308:	4a5c      	ldr	r2, [pc, #368]	@ (802147c <__ieee754_expf+0x1b4>)
 802130a:	4293      	cmp	r3, r2
 802130c:	d904      	bls.n	8021318 <__ieee754_expf+0x50>
 802130e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021312:	2000      	movs	r0, #0
 8021314:	f7ff bf4d 	b.w	80211b2 <__math_uflowf>
 8021318:	4a59      	ldr	r2, [pc, #356]	@ (8021480 <__ieee754_expf+0x1b8>)
 802131a:	4293      	cmp	r3, r2
 802131c:	d971      	bls.n	8021402 <__ieee754_expf+0x13a>
 802131e:	4a59      	ldr	r2, [pc, #356]	@ (8021484 <__ieee754_expf+0x1bc>)
 8021320:	4293      	cmp	r3, r2
 8021322:	d851      	bhi.n	80213c8 <__ieee754_expf+0x100>
 8021324:	4b58      	ldr	r3, [pc, #352]	@ (8021488 <__ieee754_expf+0x1c0>)
 8021326:	4620      	mov	r0, r4
 8021328:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 802132c:	f7df f9f0 	bl	8000710 <__aeabi_fsub>
 8021330:	4b56      	ldr	r3, [pc, #344]	@ (802148c <__ieee754_expf+0x1c4>)
 8021332:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8021336:	f086 0301 	eor.w	r3, r6, #1
 802133a:	4605      	mov	r5, r0
 802133c:	eba3 0806 	sub.w	r8, r3, r6
 8021340:	4639      	mov	r1, r7
 8021342:	4628      	mov	r0, r5
 8021344:	f7df f9e4 	bl	8000710 <__aeabi_fsub>
 8021348:	4604      	mov	r4, r0
 802134a:	4621      	mov	r1, r4
 802134c:	4620      	mov	r0, r4
 802134e:	f7df fae9 	bl	8000924 <__aeabi_fmul>
 8021352:	494f      	ldr	r1, [pc, #316]	@ (8021490 <__ieee754_expf+0x1c8>)
 8021354:	4606      	mov	r6, r0
 8021356:	f7df fae5 	bl	8000924 <__aeabi_fmul>
 802135a:	494e      	ldr	r1, [pc, #312]	@ (8021494 <__ieee754_expf+0x1cc>)
 802135c:	f7df f9d8 	bl	8000710 <__aeabi_fsub>
 8021360:	4631      	mov	r1, r6
 8021362:	f7df fadf 	bl	8000924 <__aeabi_fmul>
 8021366:	494c      	ldr	r1, [pc, #304]	@ (8021498 <__ieee754_expf+0x1d0>)
 8021368:	f7df f9d4 	bl	8000714 <__addsf3>
 802136c:	4631      	mov	r1, r6
 802136e:	f7df fad9 	bl	8000924 <__aeabi_fmul>
 8021372:	494a      	ldr	r1, [pc, #296]	@ (802149c <__ieee754_expf+0x1d4>)
 8021374:	f7df f9cc 	bl	8000710 <__aeabi_fsub>
 8021378:	4631      	mov	r1, r6
 802137a:	f7df fad3 	bl	8000924 <__aeabi_fmul>
 802137e:	4948      	ldr	r1, [pc, #288]	@ (80214a0 <__ieee754_expf+0x1d8>)
 8021380:	f7df f9c8 	bl	8000714 <__addsf3>
 8021384:	4631      	mov	r1, r6
 8021386:	f7df facd 	bl	8000924 <__aeabi_fmul>
 802138a:	4601      	mov	r1, r0
 802138c:	4620      	mov	r0, r4
 802138e:	f7df f9bf 	bl	8000710 <__aeabi_fsub>
 8021392:	4601      	mov	r1, r0
 8021394:	4606      	mov	r6, r0
 8021396:	4620      	mov	r0, r4
 8021398:	f7df fac4 	bl	8000924 <__aeabi_fmul>
 802139c:	4681      	mov	r9, r0
 802139e:	f1b8 0f00 	cmp.w	r8, #0
 80213a2:	d143      	bne.n	802142c <__ieee754_expf+0x164>
 80213a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80213a8:	4630      	mov	r0, r6
 80213aa:	f7df f9b1 	bl	8000710 <__aeabi_fsub>
 80213ae:	4601      	mov	r1, r0
 80213b0:	4648      	mov	r0, r9
 80213b2:	f7df fb6b 	bl	8000a8c <__aeabi_fdiv>
 80213b6:	4621      	mov	r1, r4
 80213b8:	f7df f9aa 	bl	8000710 <__aeabi_fsub>
 80213bc:	4601      	mov	r1, r0
 80213be:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80213c2:	f7df f9a5 	bl	8000710 <__aeabi_fsub>
 80213c6:	e78a      	b.n	80212de <__ieee754_expf+0x16>
 80213c8:	4936      	ldr	r1, [pc, #216]	@ (80214a4 <__ieee754_expf+0x1dc>)
 80213ca:	4620      	mov	r0, r4
 80213cc:	f7df faaa 	bl	8000924 <__aeabi_fmul>
 80213d0:	4b35      	ldr	r3, [pc, #212]	@ (80214a8 <__ieee754_expf+0x1e0>)
 80213d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80213d6:	f7df f99d 	bl	8000714 <__addsf3>
 80213da:	f7df fc69 	bl	8000cb0 <__aeabi_f2iz>
 80213de:	4680      	mov	r8, r0
 80213e0:	f7df fa4c 	bl	800087c <__aeabi_i2f>
 80213e4:	4931      	ldr	r1, [pc, #196]	@ (80214ac <__ieee754_expf+0x1e4>)
 80213e6:	4606      	mov	r6, r0
 80213e8:	f7df fa9c 	bl	8000924 <__aeabi_fmul>
 80213ec:	4601      	mov	r1, r0
 80213ee:	4620      	mov	r0, r4
 80213f0:	f7df f98e 	bl	8000710 <__aeabi_fsub>
 80213f4:	492e      	ldr	r1, [pc, #184]	@ (80214b0 <__ieee754_expf+0x1e8>)
 80213f6:	4605      	mov	r5, r0
 80213f8:	4630      	mov	r0, r6
 80213fa:	f7df fa93 	bl	8000924 <__aeabi_fmul>
 80213fe:	4607      	mov	r7, r0
 8021400:	e79e      	b.n	8021340 <__ieee754_expf+0x78>
 8021402:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8021406:	d20c      	bcs.n	8021422 <__ieee754_expf+0x15a>
 8021408:	492a      	ldr	r1, [pc, #168]	@ (80214b4 <__ieee754_expf+0x1ec>)
 802140a:	4620      	mov	r0, r4
 802140c:	f7df f982 	bl	8000714 <__addsf3>
 8021410:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8021414:	f7df fc42 	bl	8000c9c <__aeabi_fcmpgt>
 8021418:	b130      	cbz	r0, 8021428 <__ieee754_expf+0x160>
 802141a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 802141e:	4620      	mov	r0, r4
 8021420:	e75b      	b.n	80212da <__ieee754_expf+0x12>
 8021422:	f04f 0800 	mov.w	r8, #0
 8021426:	e790      	b.n	802134a <__ieee754_expf+0x82>
 8021428:	4680      	mov	r8, r0
 802142a:	e78e      	b.n	802134a <__ieee754_expf+0x82>
 802142c:	4631      	mov	r1, r6
 802142e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8021432:	f7df f96d 	bl	8000710 <__aeabi_fsub>
 8021436:	4601      	mov	r1, r0
 8021438:	4648      	mov	r0, r9
 802143a:	f7df fb27 	bl	8000a8c <__aeabi_fdiv>
 802143e:	4601      	mov	r1, r0
 8021440:	4638      	mov	r0, r7
 8021442:	f7df f965 	bl	8000710 <__aeabi_fsub>
 8021446:	4629      	mov	r1, r5
 8021448:	f7df f962 	bl	8000710 <__aeabi_fsub>
 802144c:	4601      	mov	r1, r0
 802144e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8021452:	f7df f95d 	bl	8000710 <__aeabi_fsub>
 8021456:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 802145a:	db02      	blt.n	8021462 <__ieee754_expf+0x19a>
 802145c:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 8021460:	e745      	b.n	80212ee <__ieee754_expf+0x26>
 8021462:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 8021466:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 802146a:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 802146e:	f7df fa59 	bl	8000924 <__aeabi_fmul>
 8021472:	e734      	b.n	80212de <__ieee754_expf+0x16>
 8021474:	2400      	movs	r4, #0
 8021476:	e73a      	b.n	80212ee <__ieee754_expf+0x26>
 8021478:	42b17217 	.word	0x42b17217
 802147c:	42cff1b5 	.word	0x42cff1b5
 8021480:	3eb17218 	.word	0x3eb17218
 8021484:	3f851591 	.word	0x3f851591
 8021488:	080221e4 	.word	0x080221e4
 802148c:	080221dc 	.word	0x080221dc
 8021490:	3331bb4c 	.word	0x3331bb4c
 8021494:	35ddea0e 	.word	0x35ddea0e
 8021498:	388ab355 	.word	0x388ab355
 802149c:	3b360b61 	.word	0x3b360b61
 80214a0:	3e2aaaab 	.word	0x3e2aaaab
 80214a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80214a8:	080221ec 	.word	0x080221ec
 80214ac:	3f317180 	.word	0x3f317180
 80214b0:	3717f7d1 	.word	0x3717f7d1
 80214b4:	7149f2ca 	.word	0x7149f2ca

080214b8 <_init>:
 80214b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214ba:	bf00      	nop
 80214bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214be:	bc08      	pop	{r3}
 80214c0:	469e      	mov	lr, r3
 80214c2:	4770      	bx	lr

080214c4 <_fini>:
 80214c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214c6:	bf00      	nop
 80214c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214ca:	bc08      	pop	{r3}
 80214cc:	469e      	mov	lr, r3
 80214ce:	4770      	bx	lr
