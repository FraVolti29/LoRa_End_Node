
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021390  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  080214e0  080214e0  000224e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080221f8  080221f8  000255d8  2**0
                  CONTENTS
  4 .ARM          00000008  080221f8  080221f8  000231f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022200  08022200  000255d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08022200  08022200  00023200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08022208  08022208  00023208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00025500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000698  20000000  08022210  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .AI_SRAM1     0000002c  200006a0  080228a8  000246a0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 LW_NVM_RAM    00000b98  20008000  20008000  00026000  2**2
                  ALLOC
 12 .bss          0000176c  200006cc  200006cc  000256cc  2**2
                  ALLOC
 13 RAM1_region   00000000  20001e38  20001e38  000255d8  2**0
                  CONTENTS
 14 RAM2_region   00000000  20009000  20009000  000255d8  2**0
                  CONTENTS
 15 ._user_heap_stack 00000a00  20001e38  20001e38  000256cc  2**0
                  ALLOC
 16 .ARM.attributes 0000002a  00000000  00000000  000255d8  2**0
                  CONTENTS, READONLY
 17 .debug_info   0004e54c  00000000  00000000  00025602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000b79a  00000000  00000000  00073b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003b88  00000000  00000000  0007f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002d3f  00000000  00000000  00082e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000349ac  00000000  00000000  00085baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000528e9  00000000  00000000  000ba55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f756a  00000000  00000000  0010ce44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000086  00000000  00000000  002043ae  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ffe8  00000000  00000000  00204434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000af  00000000  00000000  0021441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006cc 	.word	0x200006cc
 800015c:	00000000 	.word	0x00000000
 8000160:	080214b8 	.word	0x080214b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006d0 	.word	0x200006d0
 800017c:	080214b8 	.word	0x080214b8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000976:	2afd      	cmp	r2, #253	@ 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	@ 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	@ 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	@ 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__gesf2>:
 8000bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__lesf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	e002      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bd2:	bf00      	nop

08000bd4 <__cmpsf2>:
 8000bd4:	f04f 0c01 	mov.w	ip, #1
 8000bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d011      	beq.n	8000c14 <__cmpsf2+0x40>
 8000bf0:	b001      	add	sp, #4
 8000bf2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bf6:	bf18      	it	ne
 8000bf8:	ea90 0f01 	teqne	r0, r1
 8000bfc:	bf58      	it	pl
 8000bfe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c02:	bf88      	it	hi
 8000c04:	17c8      	asrhi	r0, r1, #31
 8000c06:	bf38      	it	cc
 8000c08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c0c:	bf18      	it	ne
 8000c0e:	f040 0001 	orrne.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	d102      	bne.n	8000c20 <__cmpsf2+0x4c>
 8000c1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1e:	d105      	bne.n	8000c2c <__cmpsf2+0x58>
 8000c20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c24:	d1e4      	bne.n	8000bf0 <__cmpsf2+0x1c>
 8000c26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c2a:	d0e1      	beq.n	8000bf0 <__cmpsf2+0x1c>
 8000c2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_cfrcmple>:
 8000c34:	4684      	mov	ip, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4661      	mov	r1, ip
 8000c3a:	e7ff      	b.n	8000c3c <__aeabi_cfcmpeq>

08000c3c <__aeabi_cfcmpeq>:
 8000c3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c3e:	f7ff ffc9 	bl	8000bd4 <__cmpsf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	bf48      	it	mi
 8000c46:	f110 0f00 	cmnmi.w	r0, #0
 8000c4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c4c <__aeabi_fcmpeq>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff fff4 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fcmplt>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff ffea 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c68:	bf34      	ite	cc
 8000c6a:	2001      	movcc	r0, #1
 8000c6c:	2000      	movcs	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmple>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffe0 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c7c:	bf94      	ite	ls
 8000c7e:	2001      	movls	r0, #1
 8000c80:	2000      	movhi	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmpge>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffd2 	bl	8000c34 <__aeabi_cfrcmple>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpgt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffc8 	bl	8000c34 <__aeabi_cfrcmple>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_f2iz>:
 8000cb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cb8:	d30f      	bcc.n	8000cda <__aeabi_f2iz+0x2a>
 8000cba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc2:	d90d      	bls.n	8000ce0 <__aeabi_f2iz+0x30>
 8000cc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ccc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd4:	bf18      	it	ne
 8000cd6:	4240      	negne	r0, r0
 8000cd8:	4770      	bx	lr
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	4770      	bx	lr
 8000ce0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ce4:	d101      	bne.n	8000cea <__aeabi_f2iz+0x3a>
 8000ce6:	0242      	lsls	r2, r0, #9
 8000ce8:	d105      	bne.n	8000cf6 <__aeabi_f2iz+0x46>
 8000cea:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_f2uiz>:
 8000cfc:	0042      	lsls	r2, r0, #1
 8000cfe:	d20e      	bcs.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d00:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d04:	d30b      	bcc.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d06:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d0e:	d409      	bmi.n	8000d24 <__aeabi_f2uiz+0x28>
 8000d10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d18:	fa23 f002 	lsr.w	r0, r3, r2
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr
 8000d24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d28:	d101      	bne.n	8000d2e <__aeabi_f2uiz+0x32>
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	d102      	bne.n	8000d34 <__aeabi_f2uiz+0x38>
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	4770      	bx	lr
 8000d34:	f04f 0000 	mov.w	r0, #0
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b988 	b.w	8001064 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f806 	bl	8000d6c <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__udivmoddi4>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	9d08      	ldr	r5, [sp, #32]
 8000d72:	468e      	mov	lr, r1
 8000d74:	4604      	mov	r4, r0
 8000d76:	4688      	mov	r8, r1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d14a      	bne.n	8000e12 <__udivmoddi4+0xa6>
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	d962      	bls.n	8000e48 <__udivmoddi4+0xdc>
 8000d82:	fab2 f682 	clz	r6, r2
 8000d86:	b14e      	cbz	r6, 8000d9c <__udivmoddi4+0x30>
 8000d88:	f1c6 0320 	rsb	r3, r6, #32
 8000d8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d90:	fa20 f303 	lsr.w	r3, r0, r3
 8000d94:	40b7      	lsls	r7, r6
 8000d96:	ea43 0808 	orr.w	r8, r3, r8
 8000d9a:	40b4      	lsls	r4, r6
 8000d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fb01 f20c 	mul.w	r2, r1, ip
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d909      	bls.n	8000dce <__udivmoddi4+0x62>
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc0:	f080 80ea 	bcs.w	8000f98 <__udivmoddi4+0x22c>
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f240 80e7 	bls.w	8000f98 <__udivmoddi4+0x22c>
 8000dca:	3902      	subs	r1, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9a      	subs	r2, r3, r2
 8000dd0:	b2a3      	uxth	r3, r4
 8000dd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000de2:	459c      	cmp	ip, r3
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0x8e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	f080 80d6 	bcs.w	8000f9c <__udivmoddi4+0x230>
 8000df0:	459c      	cmp	ip, r3
 8000df2:	f240 80d3 	bls.w	8000f9c <__udivmoddi4+0x230>
 8000df6:	443b      	add	r3, r7
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfe:	eba3 030c 	sub.w	r3, r3, ip
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11d      	cbz	r5, 8000e0e <__udivmoddi4+0xa2>
 8000e06:	40f3      	lsrs	r3, r6
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d905      	bls.n	8000e22 <__udivmoddi4+0xb6>
 8000e16:	b10d      	cbz	r5, 8000e1c <__udivmoddi4+0xb0>
 8000e18:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e7f5      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e22:	fab3 f183 	clz	r1, r3
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d146      	bne.n	8000eb8 <__udivmoddi4+0x14c>
 8000e2a:	4573      	cmp	r3, lr
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xc8>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 8105 	bhi.w	800103e <__udivmoddi4+0x2d2>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0e5      	beq.n	8000e0e <__udivmoddi4+0xa2>
 8000e42:	e9c5 4800 	strd	r4, r8, [r5]
 8000e46:	e7e2      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f000 8090 	beq.w	8000f6e <__udivmoddi4+0x202>
 8000e4e:	fab2 f682 	clz	r6, r2
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	f040 80a4 	bne.w	8000fa0 <__udivmoddi4+0x234>
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	0c03      	lsrs	r3, r0, #16
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	b280      	uxth	r0, r0
 8000e62:	b2bc      	uxth	r4, r7
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e72:	fb04 f20c 	mul.w	r2, r4, ip
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x11e>
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x11c>
 8000e82:	429a      	cmp	r2, r3
 8000e84:	f200 80e0 	bhi.w	8001048 <__udivmoddi4+0x2dc>
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	1a9b      	subs	r3, r3, r2
 8000e8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e98:	fb02 f404 	mul.w	r4, r2, r4
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x144>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x142>
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	f200 80ca 	bhi.w	8001042 <__udivmoddi4+0x2d6>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	1b1b      	subs	r3, r3, r4
 8000eb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0x98>
 8000eb8:	f1c1 0620 	rsb	r6, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ecc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	fa00 f801 	lsl.w	r8, r0, r1
 8000eda:	fa1f fc87 	uxth.w	ip, r7
 8000ede:	fbbe f0f9 	udiv	r0, lr, r9
 8000ee2:	0c1c      	lsrs	r4, r3, #16
 8000ee4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x1a0>
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000efe:	f080 809c 	bcs.w	800103a <__udivmoddi4+0x2ce>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f240 8099 	bls.w	800103a <__udivmoddi4+0x2ce>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	eba4 040e 	sub.w	r4, r4, lr
 8000f10:	fa1f fe83 	uxth.w	lr, r3
 8000f14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f18:	fb09 4413 	mls	r4, r9, r3, r4
 8000f1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f24:	45a4      	cmp	ip, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1ce>
 8000f28:	193c      	adds	r4, r7, r4
 8000f2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f2e:	f080 8082 	bcs.w	8001036 <__udivmoddi4+0x2ca>
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d97f      	bls.n	8001036 <__udivmoddi4+0x2ca>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f46:	4564      	cmp	r4, ip
 8000f48:	4673      	mov	r3, lr
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	d362      	bcc.n	8001014 <__udivmoddi4+0x2a8>
 8000f4e:	d05f      	beq.n	8001010 <__udivmoddi4+0x2a4>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x1fe>
 8000f52:	ebb8 0203 	subs.w	r2, r8, r3
 8000f56:	eb64 0409 	sbc.w	r4, r4, r9
 8000f5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f62:	431e      	orrs	r6, r3
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	e74f      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000f6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f72:	0c01      	lsrs	r1, r0, #16
 8000f74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f78:	b280      	uxth	r0, r0
 8000f7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4638      	mov	r0, r7
 8000f82:	463c      	mov	r4, r7
 8000f84:	46b8      	mov	r8, r7
 8000f86:	46be      	mov	lr, r7
 8000f88:	2620      	movs	r6, #32
 8000f8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f8e:	eba2 0208 	sub.w	r2, r2, r8
 8000f92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f96:	e766      	b.n	8000e66 <__udivmoddi4+0xfa>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	e718      	b.n	8000dce <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e72c      	b.n	8000dfa <__udivmoddi4+0x8e>
 8000fa0:	f1c6 0220 	rsb	r2, r6, #32
 8000fa4:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa8:	40b7      	lsls	r7, r6
 8000faa:	40b1      	lsls	r1, r6
 8000fac:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fba:	b2bc      	uxth	r4, r7
 8000fbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc0:	0c11      	lsrs	r1, r2, #16
 8000fc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc6:	fb08 f904 	mul.w	r9, r8, r4
 8000fca:	40b0      	lsls	r0, r6
 8000fcc:	4589      	cmp	r9, r1
 8000fce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fd2:	b280      	uxth	r0, r0
 8000fd4:	d93e      	bls.n	8001054 <__udivmoddi4+0x2e8>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fdc:	d201      	bcs.n	8000fe2 <__udivmoddi4+0x276>
 8000fde:	4589      	cmp	r9, r1
 8000fe0:	d81f      	bhi.n	8001022 <__udivmoddi4+0x2b6>
 8000fe2:	eba1 0109 	sub.w	r1, r1, r9
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff8:	4542      	cmp	r2, r8
 8000ffa:	d229      	bcs.n	8001050 <__udivmoddi4+0x2e4>
 8000ffc:	18ba      	adds	r2, r7, r2
 8000ffe:	f109 31ff 	add.w	r1, r9, #4294967295
 8001002:	d2c4      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001004:	4542      	cmp	r2, r8
 8001006:	d2c2      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001008:	f1a9 0102 	sub.w	r1, r9, #2
 800100c:	443a      	add	r2, r7
 800100e:	e7be      	b.n	8000f8e <__udivmoddi4+0x222>
 8001010:	45f0      	cmp	r8, lr
 8001012:	d29d      	bcs.n	8000f50 <__udivmoddi4+0x1e4>
 8001014:	ebbe 0302 	subs.w	r3, lr, r2
 8001018:	eb6c 0c07 	sbc.w	ip, ip, r7
 800101c:	3801      	subs	r0, #1
 800101e:	46e1      	mov	r9, ip
 8001020:	e796      	b.n	8000f50 <__udivmoddi4+0x1e4>
 8001022:	eba7 0909 	sub.w	r9, r7, r9
 8001026:	4449      	add	r1, r9
 8001028:	f1a8 0c02 	sub.w	ip, r8, #2
 800102c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001030:	fb09 f804 	mul.w	r8, r9, r4
 8001034:	e7db      	b.n	8000fee <__udivmoddi4+0x282>
 8001036:	4673      	mov	r3, lr
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1ce>
 800103a:	4650      	mov	r0, sl
 800103c:	e766      	b.n	8000f0c <__udivmoddi4+0x1a0>
 800103e:	4608      	mov	r0, r1
 8001040:	e6fd      	b.n	8000e3e <__udivmoddi4+0xd2>
 8001042:	443b      	add	r3, r7
 8001044:	3a02      	subs	r2, #2
 8001046:	e733      	b.n	8000eb0 <__udivmoddi4+0x144>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	443b      	add	r3, r7
 800104e:	e71c      	b.n	8000e8a <__udivmoddi4+0x11e>
 8001050:	4649      	mov	r1, r9
 8001052:	e79c      	b.n	8000f8e <__udivmoddi4+0x222>
 8001054:	eba1 0109 	sub.w	r1, r1, r9
 8001058:	46c4      	mov	ip, r8
 800105a:	fbb1 f9fe 	udiv	r9, r1, lr
 800105e:	fb09 f804 	mul.w	r8, r9, r4
 8001062:	e7c4      	b.n	8000fee <__udivmoddi4+0x282>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001074:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010bc:	68fb      	ldr	r3, [r7, #12]
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	43db      	mvns	r3, r3
 80010da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010de:	4013      	ands	r3, r2
 80010e0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010f0:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <MX_ADC_Init+0x94>)
 80010f2:	4a24      	ldr	r2, [pc, #144]	@ (8001184 <MX_ADC_Init+0x98>)
 80010f4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f6:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_ADC_Init+0x94>)
 80010f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010fc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <MX_ADC_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_ADC_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_ADC_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_ADC_Init+0x94>)
 8001112:	2204      	movs	r2, #4
 8001114:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_ADC_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_ADC_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_ADC_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_ADC_Init+0x94>)
 800112a:	2201      	movs	r2, #1
 800112c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_ADC_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_ADC_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_ADC_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_ADC_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_ADC_Init+0x94>)
 800114c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001150:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_ADC_Init+0x94>)
 8001154:	2207      	movs	r2, #7
 8001156:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_ADC_Init+0x94>)
 800115a:	2207      	movs	r2, #7
 800115c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_ADC_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_ADC_Init+0x94>)
 800116e:	f001 fe79 	bl	8002e64 <HAL_ADC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001178:	f000 f958 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200006e8 	.word	0x200006e8
 8001184:	40012400 	.word	0x40012400

08001188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <HAL_ADC_MspInit+0x50>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d112      	bne.n	80011d0 <HAL_ADC_MspInit+0x48>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ae:	f7ff ff73 	bl	8001098 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff ff58 	bl	8001068 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b8:	2304      	movs	r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011bc:	2303      	movs	r3, #3
 80011be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <HAL_ADC_MspInit+0x54>)
 80011cc:	f003 fa8a 	bl	80046e4 <HAL_GPIO_Init>

    /* USER CODE END ADC_MspInit 1 */

  }

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40012400 	.word	0x40012400
 80011dc:	48000400 	.word	0x48000400

080011e0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_ADC_MspDeInit+0x2c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d107      	bne.n	8001202 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f6:	f7ff ff67 	bl	80010c8 <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80011fa:	2104      	movs	r1, #4
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <HAL_ADC_MspDeInit+0x30>)
 80011fe:	f003 fbd1 	bl	80049a4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40012400 	.word	0x40012400
 8001210:	48000400 	.word	0x48000400

08001214 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800122c:	f7ff ff5e 	bl	80010ec <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001230:	481a      	ldr	r0, [pc, #104]	@ (800129c <ADC_ReadChannels+0x88>)
 8001232:	f002 fc36 	bl	8003aa2 <HAL_ADCEx_Calibration_Start>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800123c:	f000 f8f6 	bl	800142c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4619      	mov	r1, r3
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <ADC_ReadChannels+0x88>)
 8001254:	f002 f942 	bl	80034dc <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800125e:	f000 f8e5 	bl	800142c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001262:	480e      	ldr	r0, [pc, #56]	@ (800129c <ADC_ReadChannels+0x88>)
 8001264:	f002 f81e 	bl	80032a4 <HAL_ADC_Start>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800126e:	f000 f8dd 	bl	800142c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001272:	f04f 31ff 	mov.w	r1, #4294967295
 8001276:	4809      	ldr	r0, [pc, #36]	@ (800129c <ADC_ReadChannels+0x88>)
 8001278:	f002 f88c 	bl	8003394 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800127c:	4807      	ldr	r0, [pc, #28]	@ (800129c <ADC_ReadChannels+0x88>)
 800127e:	f002 f857 	bl	8003330 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001282:	4806      	ldr	r0, [pc, #24]	@ (800129c <ADC_ReadChannels+0x88>)
 8001284:	f002 f91d 	bl	80034c2 <HAL_ADC_GetValue>
 8001288:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <ADC_ReadChannels+0x88>)
 800128c:	f001 ff7e 	bl	800318c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001290:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200006e8 	.word	0x200006e8

080012a0 <LL_AHB1_GRP1_EnableClock>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c4:	68fb      	ldr	r3, [r7, #12]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012d4:	2004      	movs	r0, #4
 80012d6:	f7ff ffe3 	bl	80012a0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff ffe0 	bl	80012a0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2102      	movs	r1, #2
 80012e4:	200f      	movs	r0, #15
 80012e6:	f002 fda0 	bl	8003e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f002 fdb7 	bl	8003e5e <HAL_NVIC_EnableIRQ>

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <LL_AHB2_GRP1_EnableClock>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001302:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001310:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001318:	68fb      	ldr	r3, [r7, #12]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
#endif

#if MY_TX
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff ffdb 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff ffd8 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	2004      	movs	r0, #4
 8001346:	f7ff ffd5 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2080      	movs	r0, #128	@ 0x80
 800134c:	f7ff ffd2 	bl	80012f4 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pins : PA14 PA12 PA15 PA13
                             PA11 PA10 PA0 PA9
                             PA6 PA1 PA7 PA4
                             PA5 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13
 8001350:	f64f 7373 	movw	r3, #65395	@ 0xff73
 8001354:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_9
			|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_4
			|GPIO_PIN_5|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f003 f9bd 	bl	80046e4 <HAL_GPIO_Init>

	// PA7 defined separately
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f003 f9af 	bl	80046e4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f003 fbd7 	bl	8004b40 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB15 PB3 PB4 PB7
                             PB9 PB14 PB5 PB8
                             PB13 PB2 PB6 PB12
                             PB1 PB11 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001392:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001396:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_8
			|GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_12
			|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <MX_GPIO_Init+0xbc>)
 80013a6:	f003 f99d 	bl	80046e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC2 PC1 PC0
                             PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80013aa:	f242 0347 	movw	r3, #8263	@ 0x2047
 80013ae:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b0:	2303      	movs	r3, #3
 80013b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <MX_GPIO_Init+0xc0>)
 80013be:	f003 f991 	bl	80046e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c2:	2308      	movs	r3, #8
 80013c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_GPIO_Init+0xc4>)
 80013d4:	f003 f986 	bl	80046e4 <HAL_GPIO_Init>

#endif

#endif

}
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48001c00 	.word	0x48001c00

080013ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_Init();														// Configure HAL
	HAL_PWR_EnablePVD();											// Enable PVD
#endif

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 80013f0:	f01b ff66 	bl	801d2c0 <My_Set_All_GPIO_To_Analog_Mode>
#endif

	My_PS_Detection();												// Power Supply (PS) Detection Function: Detects if the System is Supplied by a Power Supply with a voltage > 2.9 V or by an Harvester
 80013f4:	f01c faaa 	bl	801d94c <My_PS_Detection>

#if MY_UNDERVOLTING_FEATURE

	My_SystemClock_Config(); 										// Configure the System Clock Frequency Below 16 MHz to allow Undervolting
 80013f8:	f01c f9f6 	bl	801d7e8 <My_SystemClock_Config>
	my_SystemClock_Config_done = 1;									// SystemClock is Configures
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <main+0x3c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);	// Configure Undervolting
 8001402:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001406:	f004 fa9d 	bl	8005944 <HAL_PWREx_ControlVoltageScaling>
	my_SystemClock_Config_done = 1;	// SystemClock is Configured

#endif

#if MY_TX_ABP
	MX_RTC_Init();
 800140a:	f000 f83d 	bl	8001488 <MX_RTC_Init>
#endif

	MX_LPTIM1_Init();
 800140e:	f01a fd8d 	bl	801bf2c <MX_LPTIM1_Init>

#if !MY_DEBUGGER_ENABLED
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001412:	f7ff ff87 	bl	8001324 <MX_GPIO_Init>
#if AI
	MX_ADC_Init();
 8001416:	f7ff fe69 	bl	80010ec <MX_ADC_Init>
	MX_X_CUBE_AI_Init(); 				// initialization AI
 800141a:	f01a fb15 	bl	801ba48 <MX_X_CUBE_AI_Init>
#endif
	MX_LoRaWAN_Init();
 800141e:	f000 ffab 	bl	8002378 <MX_LoRaWAN_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_LoRaWAN_Process();
 8001422:	f000 ffb7 	bl	8002394 <MX_LoRaWAN_Process>
 8001426:	e7fc      	b.n	8001422 <main+0x36>
 8001428:	2000074c 	.word	0x2000074c

0800142c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <Error_Handler+0x8>

08001438 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800144c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <LL_APB1_GRP1_EnableClock>:
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001464:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001474:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147c:	68fb      	ldr	r3, [r7, #12]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

#if MY_TX_ABP
	My_RTC_Init();
 800148c:	f01b f92e 	bl	801c6ec <My_RTC_Init>
	    Error_Handler();
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
#endif

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b090      	sub	sp, #64	@ 0x40
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	2238      	movs	r2, #56	@ 0x38
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f01f f975 	bl	8020794 <memset>
	if(rtcHandle->Instance==RTC)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <HAL_RTC_MspInit+0x70>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d122      	bne.n	80014fa <HAL_RTC_MspInit+0x66>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clocks
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b8:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 fd43 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RTC_MspInit+0x40>
		{
			Error_Handler();
 80014d0:	f7ff ffac 	bl	800142c <Error_Handler>
		}

		/* RTC clock enable */
		__HAL_RCC_RTC_ENABLE();
 80014d4:	f7ff ffb0 	bl	8001438 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 80014d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80014dc:	f7ff ffbc 	bl	8001458 <LL_APB1_GRP1_EnableClock>

		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2002      	movs	r0, #2
 80014e6:	f002 fca0 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	202a      	movs	r0, #42	@ 0x2a
 80014f0:	f002 fc9b 	bl	8003e2a <HAL_NVIC_SetPriority>
#if MY_TX_OTAA
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
#endif
		/* USER CODE BEGIN RTC_MspInit 1 */
		HAL_RTCEx_EnableBypassShadow(rtcHandle);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f006 fab7 	bl	8007a68 <HAL_RTCEx_EnableBypassShadow>
		/* USER CODE END RTC_MspInit 1 */
	}
}
 80014fa:	bf00      	nop
 80014fc:	3740      	adds	r7, #64	@ 0x40
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40002800 	.word	0x40002800

08001508 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800150e:	2201      	movs	r2, #1
 8001510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	58000400 	.word	0x58000400

08001520 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800153c:	f001 fae2 	bl	8002b04 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001540:	f7ff ffe2 	bl	8001508 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001544:	2001      	movs	r0, #1
 8001546:	f004 fabd 	bl	8005ac4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001552:	f001 fae5 	bl	8002b20 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001556:	f000 feb9 	bl	80022cc <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}

0800155e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001562:	f001 facf 	bl	8002b04 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001566:	2101      	movs	r1, #1
 8001568:	2000      	movs	r0, #0
 800156a:	f004 f96f 	bl	800584c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}

08001572 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001576:	f001 fad3 	bl	8002b20 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f002 fc4f 	bl	8003e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800158c:	2001      	movs	r0, #1
 800158e:	f002 fc66 	bl	8003e5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	bf00      	nop
 80015a4:	e7fd      	b.n	80015a2 <HardFault_Handler+0x4>

080015a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	bf00      	nop
 80015b4:	e7fd      	b.n	80015b2 <BusFault_Handler+0x4>

080015b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD and PVM detector.
  */
void PVD_PVM_IRQHandler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80015f2:	f004 fa91 	bl	8005b18 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001602:	f006 fa63 	bl	8007acc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000750 	.word	0x20000750

08001610 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001614:	2001      	movs	r0, #1
 8001616:	f003 faab 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}

0800161e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001622:	2002      	movs	r0, #2
 8001624:	f003 faa4 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <DMA1_Channel5_IRQHandler+0x10>)
 8001632:	f002 feb9 	bl	80043a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000838 	.word	0x20000838

08001640 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001644:	2040      	movs	r0, #64	@ 0x40
 8001646:	f003 fa93 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <USART2_IRQHandler+0x10>)
 8001656:	f007 f883 	bl	8008760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200007a4 	.word	0x200007a4

08001664 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <RTC_Alarm_IRQHandler+0x10>)
 800166a:	f006 f8f9 	bl	8007860 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000750 	.word	0x20000750

08001678 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <SUBGHZ_Radio_IRQHandler+0x10>)
 800167e:	f006 fd89 	bl	8008194 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000788 	.word	0x20000788

0800168c <LPTIM1_IRQHandler>:

/* USER CODE BEGIN 1 */
void LPTIM1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

	HAL_LPTIM_IRQHandler(&hlptim1);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <LPTIM1_IRQHandler+0x10>)
 8001692:	f01c fd77 	bl	801e184 <HAL_LPTIM_IRQHandler>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20001b40 	.word	0x20001b40

080016a0 <LPTIM2_IRQHandler>:

void LPTIM2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	HAL_LPTIM_IRQHandler(&hlptim2);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <LPTIM2_IRQHandler+0x10>)
 80016a6:	f01c fd6d 	bl	801e184 <HAL_LPTIM_IRQHandler>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20001b7c 	.word	0x20001b7c

080016b4 <COMP_IRQHandler>:

void COMP_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80016b8:	4803      	ldr	r0, [pc, #12]	@ (80016c8 <COMP_IRQHandler+0x14>)
 80016ba:	f01c fa7f 	bl	801dbbc <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 80016be:	4803      	ldr	r0, [pc, #12]	@ (80016cc <COMP_IRQHandler+0x18>)
 80016c0:	f01c fa7c 	bl	801dbbc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20001ae8 	.word	0x20001ae8
 80016cc:	20001b14 	.word	0x20001b14

080016d0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_SUBGHZ_Init+0x20>)
 8001706:	2208      	movs	r2, #8
 8001708:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_SUBGHZ_Init+0x20>)
 800170c:	f006 fac0 	bl	8007c90 <HAL_SUBGHZ_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001716:	f7ff fe89 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000788 	.word	0x20000788

08001724 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff ffcf 	bl	80016d0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2032      	movs	r0, #50	@ 0x32
 8001738:	f002 fb77 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800173c:	2032      	movs	r0, #50	@ 0x32
 800173e:	f002 fb8e 	bl	8003e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800175c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
//	DBG_Init();

	/* USER CODE END SystemApp_Init_1 */

	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ffe8 	bl	800174a <LL_RCC_SetClkAfterWakeFromStop>

	/*Initialize timer and RTC*/
	UTIL_TIMER_Init();
 800177a:	f019 fbfd 	bl	801af78 <UTIL_TIMER_Init>
	SYS_TimerInitialisedFlag = 1;
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <SystemApp_Init+0x40>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
	/* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
	DBG_Init();
 8001784:	f000 f8a8 	bl	80018d8 <DBG_Init>

	/*Initialize the terminal */
	UTIL_ADV_TRACE_Init();
 8001788:	f018 fda2 	bl	801a2d0 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <SystemApp_Init+0x44>)
 800178e:	f018 fe4d 	bl	801a42c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

	/* #warning "should be removed when proper obl is done" */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <SystemApp_Init+0x48>)
 8001794:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001798:	611a      	str	r2, [r3, #16]

	/*Set verbose LEVEL*/
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800179a:	2002      	movs	r0, #2
 800179c:	f018 fe54 	bl	801a448 <UTIL_ADV_TRACE_SetVerboseLevel>

	/*Initialize the Sensors */
//	EnvSensors_Init();

	/*Init low power manager*/
	UTIL_LPM_Init();
 80017a0:	f019 f83c 	bl	801a81c <UTIL_LPM_Init>
	/* Disable Stand-by mode */
	UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80017a4:	2101      	movs	r1, #1
 80017a6:	2001      	movs	r0, #1
 80017a8:	f019 f878 	bl	801a89c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

	/* USER CODE BEGIN SystemApp_Init_2 */

	/* USER CODE END SystemApp_Init_2 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000794 	.word	0x20000794
 80017b4:	080017c9 	.word	0x080017c9
 80017b8:	58004000 	.word	0x58004000

080017bc <UTIL_SEQ_Idle>:

/**
 * @brief redefines __weak function in stm32_seq.c such to enter low power
 */
void UTIL_SEQ_Idle(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_SEQ_Idle_1 */

	/* USER CODE END UTIL_SEQ_Idle_1 */
	UTIL_LPM_EnterLowPower();
 80017c0:	f019 f89c 	bl	801a8fc <UTIL_LPM_EnterLowPower>
	/* USER CODE BEGIN UTIL_SEQ_Idle_2 */

	/* USER CODE END UTIL_SEQ_Idle_2 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <TimestampNow>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TimestampNow_1 */

	/* USER CODE END TimestampNow_1 */
	SysTime_t curtime = SysTimeGet();
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f019 fb10 	bl	801adfc <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <TimestampNow+0x3c>)
 80017e6:	2110      	movs	r1, #16
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f81d 	bl	8001828 <tiny_snprintf_like>
	*size = strlen((char *)buff);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe fcc6 	bl	8000180 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN TimestampNow_2 */

	/* USER CODE END TimestampNow_2 */
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	080214e0 	.word	0x080214e0

08001808 <UTIL_ADV_TRACE_PreSendHook>:
/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800180c:	2101      	movs	r1, #1
 800180e:	2002      	movs	r0, #2
 8001810:	f019 f814 	bl	801a83c <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

	/* USER CODE END UTIL_LPM_SetStopMode_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800181c:	2100      	movs	r1, #0
 800181e:	2002      	movs	r0, #2
 8001820:	f019 f80c 	bl	801a83c <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

	/* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001828:	b40c      	push	{r2, r3}
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN tiny_snprintf_like_1 */

	/* USER CODE END tiny_snprintf_like_1 */
	va_list vaArgs;
	va_start(vaArgs, strFormat);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	60fb      	str	r3, [r7, #12]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f019 febd 	bl	801b5c0 <tiny_vsnprintf_like>
	va_end(vaArgs);
	/* USER CODE BEGIN tiny_snprintf_like_2 */

	/* USER CODE END tiny_snprintf_like_2 */
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001850:	b002      	add	sp, #8
 8001852:	4770      	bx	lr

08001854 <HAL_InitTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	/*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
	/* USER CODE BEGIN HAL_InitTick_1 */

	/* USER CODE END HAL_InitTick_1 */
	return HAL_OK;
 800185c:	2300      	movs	r3, #0
	/* USER CODE BEGIN HAL_InitTick_2 */

	/* USER CODE END HAL_InitTick_2 */
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_GetTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
uint32_t HAL_GetTick(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_GetTick_1 */

	/* USER CODE END HAL_GetTick_1 */
	if (SYS_TimerInitialisedFlag == 0)
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_GetTick+0x24>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_GetTick+0x18>

		/* USER CODE END HAL_GetTick_EarlyCall */
	}
	else
	{
		ret = TIMER_IF_GetTimerValue();
 800187a:	f000 f9c7 	bl	8001c0c <TIMER_IF_GetTimerValue>
 800187e:	6078      	str	r0, [r7, #4]
	}
	/* USER CODE BEGIN HAL_GetTick_2 */

	/* USER CODE END HAL_GetTick_2 */
	return ret;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000794 	.word	0x20000794

08001890 <HAL_Delay>:

/**
 * @note This function overwrites the __weak one from HAL
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa3d 	bl	8001d1a <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <LL_AHB2_GRP1_EnableClock>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
#define DEBUGGER_ENABLED MY_DEBUGGER_ENABLED
  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80018de:	f001 f92d 	bl	8002b3c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80018e2:	f001 f931 	bl	8002b48 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80018e6:	f001 f935 	bl	8002b54 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001904:	2002      	movs	r0, #2
 8001906:	f7ff ffcf 	bl	80018a8 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800190a:	2002      	movs	r0, #2
 800190c:	f7ff ffcc 	bl	80018a8 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001914:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	@ (8001950 <DBG_Init+0x78>)
 800191c:	f002 fee2 	bl	80046e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001924:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4809      	ldr	r0, [pc, #36]	@ (8001950 <DBG_Init+0x78>)
 800192c:	f002 feda 	bl	80046e4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <DBG_Init+0x78>)
 8001938:	f003 f902 	bl	8004b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001942:	4803      	ldr	r0, [pc, #12]	@ (8001950 <DBG_Init+0x78>)
 8001944:	f003 f8fc 	bl	8004b40 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400

08001954 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e00a      	b.n	800197c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001966:	f3af 8000 	nop.w
 800196a:	4601      	mov	r1, r0
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	b2ca      	uxtb	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf0      	blt.n	8001966 <_read+0x12>
  }

  return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e009      	b.n	80019b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	60ba      	str	r2, [r7, #8]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf1      	blt.n	80019a0 <_write+0x12>
  }
  return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_close>:

int _close(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ec:	605a      	str	r2, [r3, #4]
  return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_isatty>:

int _isatty(int file)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f01e fefa 	bl	8020850 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20008000 	.word	0x20008000
 8001a88:	00000800 	.word	0x00000800
 8001a8c:	20000798 	.word	0x20000798
 8001a90:	20001e38 	.word	0x20001e38

08001a94 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <TIMER_IF_Init+0x5c>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	f083 0301 	eor.w	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001acc:	f7ff fcdc 	bl	8001488 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001ad0:	f000 f856 	bl	8001b80 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ad4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ada:	f005 fe65 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ae6:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <TIMER_IF_Init+0x60>)
 8001ae8:	f005 ffbe 	bl	8007a68 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 f9c9 	bl	8001e84 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001af2:	f000 f85f 	bl	8001bb4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <TIMER_IF_Init+0x5c>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001afc:	79fb      	ldrb	r3, [r7, #7]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000079c 	.word	0x2000079c
 8001b0c:	20000750 	.word	0x20000750

08001b10 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08e      	sub	sp, #56	@ 0x38
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	222c      	movs	r2, #44	@ 0x2c
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f01e fe34 	bl	8020794 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001b2c:	f000 f828 	bl	8001b80 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <TIMER_IF_StartTimer+0x68>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b4c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <TIMER_IF_StartTimer+0x6c>)
 8001b5e:	f005 fd17 	bl	8007590 <HAL_RTC_SetAlarm_IT>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001b68:	f7ff fc60 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3738      	adds	r7, #56	@ 0x38
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200007a0 	.word	0x200007a0
 8001b7c:	20000750 	.word	0x20000750

08001b80 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <TIMER_IF_StopTimer+0x2c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001b90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b94:	4806      	ldr	r0, [pc, #24]	@ (8001bb0 <TIMER_IF_StopTimer+0x30>)
 8001b96:	f005 fe07 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <TIMER_IF_StopTimer+0x30>)
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40002800 	.word	0x40002800
 8001bb0:	20000750 	.word	0x20000750

08001bb4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001bb8:	f000 f984 	bl	8001ec4 <GetTimerTicks>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a03      	ldr	r2, [pc, #12]	@ (8001bcc <TIMER_IF_SetTimerContext+0x18>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001bc2:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <TIMER_IF_SetTimerContext+0x18>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200007a0 	.word	0x200007a0

08001bd0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <TIMER_IF_GetTimerContext+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	200007a0 	.word	0x200007a0

08001be4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001bee:	f000 f969 	bl	8001ec4 <GetTimerTicks>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200007a0 	.word	0x200007a0

08001c0c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <TIMER_IF_GetTimerValue+0x24>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001c1e:	f000 f951 	bl	8001ec4 <GetTimerTicks>
 8001c22:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000079c 	.word	0x2000079c

08001c34 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001c3e:	2303      	movs	r3, #3
 8001c40:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001c4e:	b5b0      	push	{r4, r5, r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001c56:	2100      	movs	r1, #0
 8001c58:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	460a      	mov	r2, r1
 8001c60:	4603      	mov	r3, r0
 8001c62:	0d95      	lsrs	r5, r2, #22
 8001c64:	0294      	lsls	r4, r2, #10
 8001c66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7ff f863 	bl	8000d3c <__aeabi_uldivmod>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdb0      	pop	{r4, r5, r7, pc}

08001c88 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001c88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001c92:	2100      	movs	r1, #0
 8001c94:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	2000      	movs	r0, #0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4605      	mov	r5, r0
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f04f 0a00 	mov.w	sl, #0
 8001ca6:	f04f 0b00 	mov.w	fp, #0
 8001caa:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001cae:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001cb2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001cb6:	4650      	mov	r0, sl
 8001cb8:	4659      	mov	r1, fp
 8001cba:	1b02      	subs	r2, r0, r4
 8001cbc:	eb61 0305 	sbc.w	r3, r1, r5
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	0099      	lsls	r1, r3, #2
 8001cca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001cce:	0090      	lsls	r0, r2, #2
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	eb12 0804 	adds.w	r8, r2, r4
 8001cd8:	eb43 0905 	adc.w	r9, r3, r5
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ce8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	4640      	mov	r0, r8
 8001cf6:	4649      	mov	r1, r9
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	0a82      	lsrs	r2, r0, #10
 8001d02:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001d06:	0a8b      	lsrs	r3, r1, #10
 8001d08:	4613      	mov	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d18:	4770      	bx	lr

08001d1a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff93 	bl	8001c4e <TIMER_IF_Convert_ms2Tick>
 8001d28:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001d2a:	f000 f8cb 	bl	8001ec4 <GetTimerTicks>
 8001d2e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001d30:	e000      	b.n	8001d34 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001d32:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001d34:	f000 f8c6 	bl	8001ec4 <GetTimerTicks>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f6      	bhi.n	8001d32 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_RTCEx_SSRUEventCallback>:
//
//	/* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
//}

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001d56:	f000 f8a5 	bl	8001ea4 <TIMER_IF_BkUp_Read_MSBticks>
 8001d5a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f88f 	bl	8001e84 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001d6e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001d7c:	f000 f8a2 	bl	8001ec4 <GetTimerTicks>
 8001d80:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001d82:	f000 f88f 	bl	8001ea4 <TIMER_IF_BkUp_Read_MSBticks>
 8001d86:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	000b      	movs	r3, r1
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001da0:	2000      	movs	r0, #0
 8001da2:	460c      	mov	r4, r1
 8001da4:	4605      	mov	r5, r0
 8001da6:	eb12 0804 	adds.w	r8, r2, r4
 8001daa:	eb43 0905 	adc.w	r9, r3, r5
 8001dae:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001db2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	0a82      	lsrs	r2, r0, #10
 8001dc0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001dc4:	0a8b      	lsrs	r3, r1, #10
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001dd8:	f04f 0b00 	mov.w	fp, #0
 8001ddc:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff50 	bl	8001c88 <TIMER_IF_Convert_Tick2ms>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3730      	adds	r7, #48	@ 0x30
 8001df6:	46bd      	mov	sp, r7
 8001df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001dfc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001e0a:	f005 fe79 	bl	8007b00 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000750 	.word	0x20000750

08001e1c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	2101      	movs	r1, #1
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001e2a:	f005 fe69 	bl	8007b00 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000750 	.word	0x20000750

08001e3c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001e46:	2100      	movs	r1, #0
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001e4a:	f005 fe71 	bl	8007b30 <HAL_RTCEx_BKUPRead>
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000750 	.word	0x20000750

08001e60 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001e6e:	f005 fe5f 	bl	8007b30 <HAL_RTCEx_BKUPRead>
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001e74:	687b      	ldr	r3, [r7, #4]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000750 	.word	0x20000750

08001e84 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001e92:	f005 fe35 	bl	8007b00 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000750 	.word	0x20000750

08001ea4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001eaa:	2102      	movs	r1, #2
 8001eac:	4804      	ldr	r0, [pc, #16]	@ (8001ec0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001eae:	f005 fe3f 	bl	8007b30 <HAL_RTCEx_BKUPRead>
 8001eb2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001eb4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000750 	.word	0x20000750

08001ec4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001eca:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <GetTimerTicks+0x34>)
 8001ecc:	f7ff fde2 	bl	8001a94 <LL_RTC_TIME_GetSubSecond>
 8001ed0:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ed2:	e003      	b.n	8001edc <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001ed4:	4808      	ldr	r0, [pc, #32]	@ (8001ef8 <GetTimerTicks+0x34>)
 8001ed6:	f7ff fddd 	bl	8001a94 <LL_RTC_TIME_GetSubSecond>
 8001eda:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001edc:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <GetTimerTicks+0x34>)
 8001ede:	f7ff fdd9 	bl	8001a94 <LL_RTC_TIME_GetSubSecond>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d1f4      	bne.n	8001ed4 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40002800 	.word	0x40002800

08001efc <LL_AHB2_GRP1_EnableClock>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <LL_APB1_GRP1_EnableClock>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f50:	68fb      	ldr	r3, [r7, #12]
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <LL_APB1_GRP1_DisableClock>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f72:	4013      	ands	r3, r2
 8001f74:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f86:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <MX_USART2_UART_Init+0x94>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc8:	4811      	ldr	r0, [pc, #68]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fca:	f006 faac 	bl	8008526 <HAL_UART_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fd4:	f7ff fa2a 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	480d      	ldr	r0, [pc, #52]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fdc:	f008 fbcf 	bl	800a77e <HAL_UARTEx_SetTxFifoThreshold>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fe6:	f7ff fa21 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fea:	2100      	movs	r1, #0
 8001fec:	4808      	ldr	r0, [pc, #32]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001fee:	f008 fc04 	bl	800a7fa <HAL_UARTEx_SetRxFifoThreshold>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ff8:	f7ff fa18 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	@ (8002010 <MX_USART2_UART_Init+0x90>)
 8001ffe:	f008 fb83 	bl	800a708 <HAL_UARTEx_EnableFifoMode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002008:	f7ff fa10 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200007a4 	.word	0x200007a4
 8002014:	40004400 	.word	0x40004400

08002018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b096      	sub	sp, #88	@ 0x58
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2238      	movs	r2, #56	@ 0x38
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f01e fbab 	bl	8020794 <memset>
  if(uartHandle->Instance==USART2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a33      	ldr	r2, [pc, #204]	@ (8002110 <HAL_UART_MspInit+0xf8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d15f      	bne.n	8002108 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002048:	2302      	movs	r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800204c:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_UART_MspInit+0xfc>)
 800204e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4618      	mov	r0, r3
 8002056:	f004 ff7b 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002060:	f7ff f9e4 	bl	800142c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002064:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002068:	f7ff ff60 	bl	8001f2c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff ff45 	bl	8001efc <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002072:	230c      	movs	r3, #12
 8002074:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002082:	2307      	movs	r3, #7
 8002084:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002090:	f002 fb28 	bl	80046e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002094:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_UART_MspInit+0x100>)
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_UART_MspInit+0x104>)
 8002098:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800209a:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <HAL_UART_MspInit+0x100>)
 800209c:	2214      	movs	r2, #20
 800209e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020a2:	2210      	movs	r2, #16
 80020a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020ca:	4813      	ldr	r0, [pc, #76]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020cc:	f001 fef2 	bl	8003eb4 <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80020d6:	f7ff f9a9 	bl	800142c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020da:	2110      	movs	r1, #16
 80020dc:	480e      	ldr	r0, [pc, #56]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020de:	f002 fa29 	bl	8004534 <HAL_DMA_ConfigChannelAttributes>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 80020e8:	f7ff f9a0 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020f0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_UART_MspInit+0x100>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2102      	movs	r1, #2
 80020fc:	2025      	movs	r0, #37	@ 0x25
 80020fe:	f001 fe94 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002102:	2025      	movs	r0, #37	@ 0x25
 8002104:	f001 feab 	bl	8003e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002108:	bf00      	nop
 800210a:	3758      	adds	r7, #88	@ 0x58
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40004400 	.word	0x40004400
 8002114:	000c0004 	.word	0x000c0004
 8002118:	20000838 	.word	0x20000838
 800211c:	40020058 	.word	0x40020058

08002120 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_UART_MspDeInit+0x3c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d110      	bne.n	8002154 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002132:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002136:	f7ff ff11 	bl	8001f5c <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800213a:	210c      	movs	r1, #12
 800213c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002140:	f002 fc30 	bl	80049a4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002148:	4618      	mov	r0, r3
 800214a:	f001 ff5b 	bl	8004004 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800214e:	2025      	movs	r0, #37	@ 0x25
 8002150:	f001 fe93 	bl	8003e7a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40004400 	.word	0x40004400

08002160 <LL_APB1_GRP1_ForceReset>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_APB1_GRP1_ReleaseReset>:
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	43db      	mvns	r3, r3
 8002194:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002198:	4013      	ands	r3, r2
 800219a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <LL_EXTI_EnableIT_0_31+0x24>)
 80021b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80021b6:	4905      	ldr	r1, [pc, #20]	@ (80021cc <LL_EXTI_EnableIT_0_31+0x24>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	58000800 	.word	0x58000800

080021d0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80021d8:	4a07      	ldr	r2, [pc, #28]	@ (80021f8 <vcom_Init+0x28>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80021de:	f7ff f877 	bl	80012d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021e2:	f7ff fecd 	bl	8001f80 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80021e6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80021ea:	f7ff ffdd 	bl	80021a8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80021ee:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000089c 	.word	0x2000089c

080021fc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002200:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002204:	f7ff ffac 	bl	8002160 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002208:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800220c:	f7ff ffb9 	bl	8002182 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002210:	4804      	ldr	r0, [pc, #16]	@ (8002224 <vcom_DeInit+0x28>)
 8002212:	f7ff ff85 	bl	8002120 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002216:	200f      	movs	r0, #15
 8002218:	f001 fe2f 	bl	8003e7a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800221c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200007a4 	.word	0x200007a4

08002228 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	461a      	mov	r2, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4804      	ldr	r0, [pc, #16]	@ (800224c <vcom_Trace_DMA+0x24>)
 800223c:	f006 fa10 	bl	8008660 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002240:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200007a4 	.word	0x200007a4

08002250 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002258:	4a19      	ldr	r2, [pc, #100]	@ (80022c0 <vcom_ReceiveInit+0x70>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800225e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002262:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	e893 0006 	ldmia.w	r3, {r1, r2}
 800226c:	4815      	ldr	r0, [pc, #84]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 800226e:	f008 f9be 	bl	800a5ee <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002272:	bf00      	nop
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002282:	d0f7      	beq.n	8002274 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002284:	bf00      	nop
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002294:	d1f7      	bne.n	8002286 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80022a4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80022a6:	4807      	ldr	r0, [pc, #28]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 80022a8:	f008 f9fc 	bl	800a6a4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80022ac:	2201      	movs	r2, #1
 80022ae:	4906      	ldr	r1, [pc, #24]	@ (80022c8 <vcom_ReceiveInit+0x78>)
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 80022b2:	f006 f989 	bl	80085c8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80022b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200008a0 	.word	0x200008a0
 80022c4:	200007a4 	.word	0x200007a4
 80022c8:	20000898 	.word	0x20000898

080022cc <vcom_Resume>:

void vcom_Resume(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d0:	4808      	ldr	r0, [pc, #32]	@ (80022f4 <vcom_Resume+0x28>)
 80022d2:	f006 f928 	bl	8008526 <HAL_UART_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80022dc:	f7ff f8a6 	bl	800142c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <vcom_Resume+0x2c>)
 80022e2:	f001 fde7 	bl	8003eb4 <HAL_DMA_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80022ec:	f7ff f89e 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200007a4 	.word	0x200007a4
 80022f8:	20000838 	.word	0x20000838

080022fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <HAL_UART_TxCpltCallback+0x24>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d103      	bne.n	8002316 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_UART_TxCpltCallback+0x28>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2000      	movs	r0, #0
 8002314:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40004400 	.word	0x40004400
 8002324:	2000089c 	.word	0x2000089c

08002328 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_UART_RxCpltCallback+0x44>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d113      	bne.n	8002362 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <HAL_UART_RxCpltCallback+0x48>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_UART_RxCpltCallback+0x30>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800234c:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <HAL_UART_RxCpltCallback+0x48>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	2101      	movs	r1, #1
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <HAL_UART_RxCpltCallback+0x4c>)
 8002356:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	4906      	ldr	r1, [pc, #24]	@ (8002374 <HAL_UART_RxCpltCallback+0x4c>)
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f006 f933 	bl	80085c8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40004400 	.word	0x40004400
 8002370:	200008a0 	.word	0x200008a0
 8002374:	20000898 	.word	0x20000898

08002378 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */
	my_MX_GPIO_Init_done = 1;
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <MX_LoRaWAN_Init+0x18>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002382:	f7ff f9f5 	bl	8001770 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002386:	f000 f80d 	bl	80023a4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200008a4 	.word	0x200008a4

08002394 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f018 fb00 	bl	801a9a0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
#endif

#if MY_TX

#if MY_TX_ABP
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RTF), UTIL_SEQ_RFU, SendTxData);	// Register task for: SendTxData
 80023a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002424 <LoRaWAN_Init+0x80>)
 80023aa:	2100      	movs	r1, #0
 80023ac:	2010      	movs	r0, #16
 80023ae:	f018 fbf3 	bl	801ab98 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
 80023b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002428 <LoRaWAN_Init+0x84>)
 80023b4:	2100      	movs	r1, #0
 80023b6:	2020      	movs	r0, #32
 80023b8:	f018 fbee 	bl	801ab98 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
 80023bc:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <LoRaWAN_Init+0x88>)
 80023be:	2100      	movs	r1, #0
 80023c0:	2040      	movs	r0, #64	@ 0x40
 80023c2:	f018 fbe9 	bl	801ab98 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
 80023c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002430 <LoRaWAN_Init+0x8c>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80023ce:	f018 fbe3 	bl	801ab98 <UTIL_SEQ_RegTask>
#if AI
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_AIF), UTIL_SEQ_RFU, My_AIF);		// Register Task for: My_AIF
 80023d2:	4a18      	ldr	r2, [pc, #96]	@ (8002434 <LoRaWAN_Init+0x90>)
 80023d4:	2100      	movs	r1, #0
 80023d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80023da:	f018 fbdd 	bl	801ab98 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
#endif

	LoraInfo_Init();									 					// LoRaWAN info (Region, ClassB, Kms(Key Management Service))
 80023de:	f000 f9a9 	bl	8002734 <LoraInfo_Init>

	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);     					// LoRaMacPrimitives: Used to notify LmHandler of LoRaMac events and LoRaMacCallbacks On MacProcessNotify:
 80023e2:	4915      	ldr	r1, [pc, #84]	@ (8002438 <LoRaWAN_Init+0x94>)
 80023e4:	4815      	ldr	r0, [pc, #84]	@ (800243c <LoRaWAN_Init+0x98>)
 80023e6:	f008 fab5 	bl	800a954 <LmHandlerInit>
	// When a radio interrupt (IRQ) occurs, it means that the radio has finished transmitting or receiving a message and needs to be handled by the MAC layer

	//LmHandlerParams.TxDatarate = 2;
	LmHandlerConfigure(&LmHandlerParams);                					// LoRaWAN Configuration using LmHandlerParams
 80023ea:	4815      	ldr	r0, [pc, #84]	@ (8002440 <LoRaWAN_Init+0x9c>)
 80023ec:	f008 fae0 	bl	800a9b0 <LmHandlerConfigure>

	LmHandlerJoin(ActivationType, ForceRejoin);          					// LoRaWAN network ACTIVATION_TYPE_ABP file  (LmHandlerJoin) is modified, to work only with ABP no need to OTAA activation
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <LoRaWAN_Init+0xa0>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <LoRaWAN_Init+0xa4>)
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f008 fbfa 	bl	800abf4 <LmHandlerJoin>

	if (my_Current_State != PSS)
 8002400:	4b12      	ldr	r3, [pc, #72]	@ (800244c <LoRaWAN_Init+0xa8>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d002      	beq.n	800240e <LoRaWAN_Init+0x6a>
	{
		my_SubghzApp_Init_done = 1;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <LoRaWAN_Init+0xac>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
#if MY_RADIO_DEACTIVATION
		Radio.Sleep();
#endif
	}
#if MY_TX_ABP
	SendTxData();
 800240e:	f000 f925 	bl	800265c <SendTxData>
#endif
	my_LoRAWAN_Init++;
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <LoRaWAN_Init+0xb0>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <LoRaWAN_Init+0xb0>)
 800241c:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END LoRaWAN_Init_Last */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0800265d 	.word	0x0800265d
 8002428:	0801c821 	.word	0x0801c821
 800242c:	0801c9c9 	.word	0x0801c9c9
 8002430:	0801cb09 	.word	0x0801cb09
 8002434:	0801cbcd 	.word	0x0801cbcd
 8002438:	01030000 	.word	0x01030000
 800243c:	20000004 	.word	0x20000004
 8002440:	20000050 	.word	0x20000050
 8002444:	20000000 	.word	0x20000000
 8002448:	200008a6 	.word	0x200008a6
 800244c:	20001be9 	.word	0x20001be9
 8002450:	200008a7 	.word	0x200008a7
 8002454:	200008a5 	.word	0x200008a5

08002458 <My_Adv_Data_Init>:


#if MY_TX

void My_Adv_Data_Init(void)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]

	if (my_LoRAWAN_Init++ > N_LORA_TX)
 8002462:	4b54      	ldr	r3, [pc, #336]	@ (80025b4 <My_Adv_Data_Init+0x15c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	b2d1      	uxtb	r1, r2
 800246a:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <My_Adv_Data_Init+0x15c>)
 800246c:	7011      	strb	r1, [r2, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f240 8091 	bls.w	8002596 <My_Adv_Data_Init+0x13e>
//		AppData.Buffer[i++] = (uint8_t)((my_Trise_time >> 8) & 0xFF); 			// 0
//		AppData.Buffer[i++] = (uint8_t)(my_Trise_time & 0xFF); 					// 1

#if MY_ES_FEATURE_ENABLE

		if(my_Cmode == DCM)
 8002474:	4b50      	ldr	r3, [pc, #320]	@ (80025b8 <My_Adv_Data_Init+0x160>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <My_Adv_Data_Init+0x2c>
		{
			my_ESD_Level = 0;
 800247c:	4b4f      	ldr	r3, [pc, #316]	@ (80025bc <My_Adv_Data_Init+0x164>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e00a      	b.n	800249a <My_Adv_Data_Init+0x42>
		}
		else if (my_Cmode == CCM)
 8002484:	4b4c      	ldr	r3, [pc, #304]	@ (80025b8 <My_Adv_Data_Init+0x160>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d103      	bne.n	8002494 <My_Adv_Data_Init+0x3c>
		{
			my_ESD_Level = 1;
 800248c:	4b4b      	ldr	r3, [pc, #300]	@ (80025bc <My_Adv_Data_Init+0x164>)
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e002      	b.n	800249a <My_Adv_Data_Init+0x42>
		}
		else
		{
			my_ESD_Level = 2;
 8002494:	4b49      	ldr	r3, [pc, #292]	@ (80025bc <My_Adv_Data_Init+0x164>)
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
		}
		AppData.Buffer[i++] = (uint8_t)(my_ESD_Level & 0xFF); 					// 2
 800249a:	4b49      	ldr	r3, [pc, #292]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	1c59      	adds	r1, r3, #1
 80024a2:	6079      	str	r1, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a45      	ldr	r2, [pc, #276]	@ (80025bc <My_Adv_Data_Init+0x164>)
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(My_EBK_status & 0xFF); 					// 3
 80024ac:	4b44      	ldr	r3, [pc, #272]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	6079      	str	r1, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a42      	ldr	r2, [pc, #264]	@ (80025c4 <My_Adv_Data_Init+0x16c>)
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE

#if MY_SHT40
		/**** Get Temperature from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 24) & 0xFF); 			// 4
 80024be:	4b42      	ldr	r3, [pc, #264]	@ (80025c8 <My_Adv_Data_Init+0x170>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0e18      	lsrs	r0, r3, #24
 80024c4:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	6079      	str	r1, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	b2c2      	uxtb	r2, r0
 80024d2:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 16) & 0xFF); 			// 5
 80024d4:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <My_Adv_Data_Init+0x170>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0c18      	lsrs	r0, r3, #16
 80024da:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	1c59      	adds	r1, r3, #1
 80024e2:	6079      	str	r1, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	b2c2      	uxtb	r2, r0
 80024e8:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 8) & 0xFF); 			// 6
 80024ea:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <My_Adv_Data_Init+0x170>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0a18      	lsrs	r0, r3, #8
 80024f0:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	6079      	str	r1, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2c2      	uxtb	r2, r0
 80024fe:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Temp & 0xFF); 					// 7
 8002500:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <My_Adv_Data_Init+0x170>)
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	1c59      	adds	r1, r3, #1
 800250c:	6079      	str	r1, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	b2c2      	uxtb	r2, r0
 8002512:	701a      	strb	r2, [r3, #0]

		/**** Get RH from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 24) & 0xFF); 		// 8
 8002514:	4b2d      	ldr	r3, [pc, #180]	@ (80025cc <My_Adv_Data_Init+0x174>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e18      	lsrs	r0, r3, #24
 800251a:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1c59      	adds	r1, r3, #1
 8002522:	6079      	str	r1, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	b2c2      	uxtb	r2, r0
 8002528:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 16) & 0xFF); 		// 9
 800252a:	4b28      	ldr	r3, [pc, #160]	@ (80025cc <My_Adv_Data_Init+0x174>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0c18      	lsrs	r0, r3, #16
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	1c59      	adds	r1, r3, #1
 8002538:	6079      	str	r1, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	b2c2      	uxtb	r2, r0
 800253e:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 8) & 0xFF); 			// 10
 8002540:	4b22      	ldr	r3, [pc, #136]	@ (80025cc <My_Adv_Data_Init+0x174>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0a18      	lsrs	r0, r3, #8
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1c59      	adds	r1, r3, #1
 800254e:	6079      	str	r1, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	b2c2      	uxtb	r2, r0
 8002554:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Humid & 0xFF); 				// 11
 8002556:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <My_Adv_Data_Init+0x174>)
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	6079      	str	r1, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	b2c2      	uxtb	r2, r0
 8002568:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time_stop >> 8) & 0xFF); 		// 43
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time_stop & 0xFF); 			// 44
#endif
		/* Send the result of the neural network*/
#if AI
		AppData.Buffer[i++] = (uint8_t)(my_SoilSensor);
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <My_Adv_Data_Init+0x178>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	1c59      	adds	r1, r3, #1
 8002576:	6079      	str	r1, [r7, #4]
 8002578:	18d4      	adds	r4, r2, r3
 800257a:	f7fe fbbf 	bl	8000cfc <__aeabi_f2uiz>
 800257e:	4603      	mov	r3, r0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	7023      	strb	r3, [r4, #0]
		AppData.Buffer[i++] = (uint8_t)(result_nn);
 8002584:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	6079      	str	r1, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <My_Adv_Data_Init+0x17c>)
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	701a      	strb	r2, [r3, #0]
#endif
	}

	AppData.BufferSize = i;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 800259c:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <My_Adv_Data_Init+0x168>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
	my_Trise_time = 0;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <My_Adv_Data_Init+0x180>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	801a      	strh	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200008a5 	.word	0x200008a5
 80025b8:	20001bea 	.word	0x20001bea
 80025bc:	20001bb8 	.word	0x20001bb8
 80025c0:	20000068 	.word	0x20000068
 80025c4:	20001bb9 	.word	0x20001bb9
 80025c8:	20001bf8 	.word	0x20001bf8
 80025cc:	20001bfc 	.word	0x20001bfc
 80025d0:	20001bec 	.word	0x20001bec
 80025d4:	20001a48 	.word	0x20001a48
 80025d8:	20001bc6 	.word	0x20001bc6

080025dc <My_EMS_Adv_Data_Init>:

void My_EMS_Adv_Data_Init(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
	uint8_t j = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	70fb      	strb	r3, [r7, #3]

	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	70fb      	strb	r3, [r7, #3]
 80025ee:	e021      	b.n	8002634 <My_EMS_Adv_Data_Init+0x58>
	{
		AppData.Buffer[i++] = (uint8_t)((my_ems_buffer[j] >> 8) & 0xFF);
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <My_EMS_Adv_Data_Init+0x78>)
 80025f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	b298      	uxth	r0, r3
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <My_EMS_Adv_Data_Init+0x7c>)
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1c59      	adds	r1, r3, #1
 8002604:	6079      	str	r1, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	b2c2      	uxtb	r2, r0
 800260a:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_ems_buffer[j] & 0xFF);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <My_EMS_Adv_Data_Init+0x78>)
 8002610:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8002614:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <My_EMS_Adv_Data_Init+0x7c>)
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	6079      	str	r1, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	b2c2      	uxtb	r2, r0
 8002622:	701a      	strb	r2, [r3, #0]
		my_ems_buffer[j] = 0;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	4a0b      	ldr	r2, [pc, #44]	@ (8002654 <My_EMS_Adv_Data_Init+0x78>)
 8002628:	2100      	movs	r1, #0
 800262a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	3301      	adds	r3, #1
 8002632:	70fb      	strb	r3, [r7, #3]
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d9da      	bls.n	80025f0 <My_EMS_Adv_Data_Init+0x14>
	}
	AppData.BufferSize = i;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <My_EMS_Adv_Data_Init+0x7c>)
 8002640:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 8002642:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <My_EMS_Adv_Data_Init+0x7c>)
 8002644:	2202      	movs	r2, #2
 8002646:	701a      	strb	r2, [r3, #0]

}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20001bcc 	.word	0x20001bcc
 8002658:	20000068 	.word	0x20000068

0800265c <SendTxData>:

void SendTxData(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 8002660:	f01a fe2e 	bl	801d2c0 <My_Set_All_GPIO_To_Analog_Mode>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);											// Open VDD to ES Switch
 8002664:	2000      	movs	r0, #0
 8002666:	f01b f995 	bl	801d994 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_OPEN);										// unBias the Sensors
#endif

	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0); 	// Configure Radio Interrupt with the Highest Priority
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2032      	movs	r0, #50	@ 0x32
 8002670:	f001 fbdb 	bl	8003e2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);			// Set Radio Interrupt
 8002674:	2032      	movs	r0, #50	@ 0x32
 8002676:	f001 fbf2 	bl	8003e5e <HAL_NVIC_EnableIRQ>

	if (my_Current_State == PSS)
 800267a:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <SendTxData+0xa0>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d113      	bne.n	80026aa <SendTxData+0x4e>
	{
		HAL_ResumeTick();
 8002682:	f000 fa4d 	bl	8002b20 <HAL_ResumeTick>
		while(1)
		{
			My_Adv_Data_Init();
 8002686:	f7ff fee7 	bl	8002458 <My_Adv_Data_Init>
			HAL_Delay(3000);			// If Supplied by a Battery --> Add a delay for the Idle time between TX
 800268a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800268e:	f7ff f8ff 	bl	8001890 <HAL_Delay>
			my_Previous_State = PSS;
 8002692:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <SendTxData+0xa4>)
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
			LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 8002698:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <SendTxData+0xa8>)
 800269a:	78db      	ldrb	r3, [r3, #3]
 800269c:	2200      	movs	r2, #0
 800269e:	4619      	mov	r1, r3
 80026a0:	4819      	ldr	r0, [pc, #100]	@ (8002708 <SendTxData+0xac>)
 80026a2:	f008 fae3 	bl	800ac6c <LmHandlerSend>
			My_Adv_Data_Init();
 80026a6:	bf00      	nop
 80026a8:	e7ed      	b.n	8002686 <SendTxData+0x2a>
		}
	}
	else
	{
		My_Exit_Stop2_Mode_WFI();
 80026aa:	f01a fec3 	bl	801d434 <My_Exit_Stop2_Mode_WFI>

		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);	// Clear LPTIM1 Interrupt
 80026ae:	2027      	movs	r0, #39	@ 0x27
 80026b0:	f001 fbf1 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);		// Disable LPTIM1 Interrupt
 80026b4:	2027      	movs	r0, #39	@ 0x27
 80026b6:	f001 fbe0 	bl	8003e7a <HAL_NVIC_DisableIRQ>

		if (my_Current_State != SMS)
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <SendTxData+0xa0>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b07      	cmp	r3, #7
 80026c0:	d005      	beq.n	80026ce <SendTxData+0x72>
		{
			my_Previous_State = EHS;
 80026c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <SendTxData+0xa4>)
 80026c4:	2203      	movs	r2, #3
 80026c6:	701a      	strb	r2, [r3, #0]
			my_Current_State = RTS;				// EHS --> RTS
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <SendTxData+0xa0>)
 80026ca:	2202      	movs	r2, #2
 80026cc:	701a      	strb	r2, [r3, #0]
		}

		/*Check if it is the first Wake-up event after the Energy Missing State (EMS)
		 *If the system just woke up from EMS it sends the buffer that has been filled during the night
		 */
		if(my_Previous_State == EMS)
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <SendTxData+0xa4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d102      	bne.n	80026dc <SendTxData+0x80>
		{
			My_EMS_Adv_Data_Init();
 80026d6:	f7ff ff81 	bl	80025dc <My_EMS_Adv_Data_Init>
 80026da:	e001      	b.n	80026e0 <SendTxData+0x84>
		}
		else 									// Otherwise it sends the last measurement
		{
			My_Adv_Data_Init();
 80026dc:	f7ff febc 	bl	8002458 <My_Adv_Data_Init>
		}

		BSP_RADIO_Init();
 80026e0:	f000 f8de 	bl	80028a0 <BSP_RADIO_Init>
		LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 80026e4:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <SendTxData+0xa8>)
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	2200      	movs	r2, #0
 80026ea:	4619      	mov	r1, r3
 80026ec:	4806      	ldr	r0, [pc, #24]	@ (8002708 <SendTxData+0xac>)
 80026ee:	f008 fabd 	bl	800ac6c <LmHandlerSend>
		BSP_RADIO_DeInit();
 80026f2:	f000 f913 	bl	800291c <BSP_RADIO_DeInit>
	}
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20001be9 	.word	0x20001be9
 8002700:	20001be8 	.word	0x20001be8
 8002704:	20000050 	.word	0x20000050
 8002708:	20000068 	.word	0x20000068

0800270c <OnTxData>:

}
#endif
#if MY_TX_ABP
static void OnTxData(LmHandlerTxParams_t *params)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnTxData_1 */

	/* USER CODE END OnTxData_1 */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <OnMacProcessNotify>:
}
#endif

#if MY_TX
static void OnMacProcessNotify(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0
#if MY_TX_ABP
	/* USER CODE BEGIN OnMacProcessNotify_1 */
	LoRaMacProcess( );                                                            // should be Called at first the LoRaMAC process before to run all package process features
 8002722:	f00a f915 	bl	800c950 <LoRaMacProcess>

	/* USER CODE END OnMacProcessNotify_1 */

	/* USER CODE BEGIN OnMacProcessNotify_2 */
	UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
 8002726:	2100      	movs	r1, #0
 8002728:	2020      	movs	r0, #32
 800272a:	f018 fa57 	bl	801abdc <UTIL_SEQ_SetTask>
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
		}
	/* USER CODE END OnMacProcessNotify_2 */
#endif
	/* USER CODE END OnMacProcessNotify_2 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <LoraInfo_Init+0x5c>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <LoraInfo_Init+0x5c>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <LoraInfo_Init+0x5c>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <LoraInfo_Init+0x5c>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <LoraInfo_Init+0x5c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f043 0320 	orr.w	r3, r3, #32
 8002758:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <LoraInfo_Init+0x5c>)
 800275a:	6053      	str	r3, [r2, #4]
#endif
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <LoraInfo_Init+0x5c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <LoraInfo_Init+0x60>)
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	2000      	movs	r0, #0
 800276c:	f017 fdde 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8002770:	bf00      	nop
 8002772:	f017 fdc9 	bl	801a308 <UTIL_ADV_TRACE_IsBufferEmpty>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d1fa      	bne.n	8002772 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <LoraInfo_Init+0x5c>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002786:	4b02      	ldr	r3, [pc, #8]	@ (8002790 <LoraInfo_Init+0x5c>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	2000099c 	.word	0x2000099c
 8002794:	080214ec 	.word	0x080214ec

08002798 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800279c:	4b02      	ldr	r3, [pc, #8]	@ (80027a8 <LoraInfo_GetPtr+0x10>)
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	2000099c 	.word	0x2000099c

080027ac <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80027b0:	f000 f876 	bl	80028a0 <BSP_RADIO_Init>
 80027b4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd80      	pop	{r7, pc}

080027ba <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f8ce 	bl	8002968 <BSP_RADIO_ConfigRFSwitch>
 80027cc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80027da:	f000 f921 	bl	8002a20 <BSP_RADIO_GetTxConfig>
 80027de:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80027e8:	f000 f921 	bl	8002a2e <BSP_RADIO_IsTCXO>
 80027ec:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80027f6:	f000 f921 	bl	8002a3c <BSP_RADIO_IsDCDC>
 80027fa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}

08002800 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f91c 	bl	8002a4a <BSP_RADIO_GetRFOMaxPowerConfig>
 8002812:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800281c:	480d      	ldr	r0, [pc, #52]	@ (8002854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800281e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002820:	f01b f98a 	bl	801db38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002824:	480c      	ldr	r0, [pc, #48]	@ (8002858 <LoopForever+0x6>)
  ldr r1, =_edata
 8002826:	490d      	ldr	r1, [pc, #52]	@ (800285c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002828:	4a0d      	ldr	r2, [pc, #52]	@ (8002860 <LoopForever+0xe>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800282c:	e002      	b.n	8002834 <LoopCopyDataInit>

0800282e <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 800282e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002832:	3304      	adds	r3, #4

08002834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002838:	d3f9      	bcc.n	800282e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283a:	4a0a      	ldr	r2, [pc, #40]	@ (8002864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800283c:	4c0a      	ldr	r4, [pc, #40]	@ (8002868 <LoopForever+0x16>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002840:	e001      	b.n	8002846 <LoopFillZerobss>

08002842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002844:	3204      	adds	r2, #4

08002846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002848:	d3fb      	bcc.n	8002842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800284a:	f01e f807 	bl	802085c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800284e:	f7fe fdcd 	bl	80013ec <main>

08002852 <LoopForever>:

LoopForever:
    b LoopForever
 8002852:	e7fe      	b.n	8002852 <LoopForever>
  ldr   r0, =_estack
 8002854:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800285c:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 8002860:	08022210 	.word	0x08022210
  ldr r2, =_sbss
 8002864:	200006cc 	.word	0x200006cc
  ldr r4, =_ebss
 8002868:	20001e38 	.word	0x20001e38

0800286c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800286c:	e7fe      	b.n	800286c <ADC_IRQHandler>

0800286e <LL_AHB2_GRP1_EnableClock>:
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800287c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4313      	orrs	r3, r2
 8002884:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
	...

080028a0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80028b4:	2004      	movs	r0, #4
 80028b6:	f7ff ffda 	bl	800286e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80028ba:	2310      	movs	r3, #16
 80028bc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80028be:	2301      	movs	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4812      	ldr	r0, [pc, #72]	@ (8002918 <BSP_RADIO_Init+0x78>)
 80028d0:	f001 ff08 	bl	80046e4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80028d4:	2320      	movs	r3, #32
 80028d6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	480e      	ldr	r0, [pc, #56]	@ (8002918 <BSP_RADIO_Init+0x78>)
 80028de:	f001 ff01 	bl	80046e4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80028e2:	2308      	movs	r3, #8
 80028e4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	4619      	mov	r1, r3
 80028ea:	480b      	ldr	r0, [pc, #44]	@ (8002918 <BSP_RADIO_Init+0x78>)
 80028ec:	f001 fefa 	bl	80046e4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80028f0:	2200      	movs	r2, #0
 80028f2:	2120      	movs	r1, #32
 80028f4:	4808      	ldr	r0, [pc, #32]	@ (8002918 <BSP_RADIO_Init+0x78>)
 80028f6:	f002 f923 	bl	8004b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80028fa:	2200      	movs	r2, #0
 80028fc:	2110      	movs	r1, #16
 80028fe:	4806      	ldr	r0, [pc, #24]	@ (8002918 <BSP_RADIO_Init+0x78>)
 8002900:	f002 f91e 	bl	8004b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002904:	2200      	movs	r2, #0
 8002906:	2108      	movs	r1, #8
 8002908:	4803      	ldr	r0, [pc, #12]	@ (8002918 <BSP_RADIO_Init+0x78>)
 800290a:	f002 f919 	bl	8004b40 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	48000800 	.word	0x48000800

0800291c <BSP_RADIO_DeInit>:
/**
  * @brief  DeInit Radio Switch
  * @retval BSP status
  */
int32_t BSP_RADIO_DeInit(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002920:	2004      	movs	r0, #4
 8002922:	f7ff ffa4 	bl	800286e <LL_AHB2_GRP1_EnableClock>

  /* Turn off switch */
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002926:	2200      	movs	r2, #0
 8002928:	2110      	movs	r1, #16
 800292a:	480e      	ldr	r0, [pc, #56]	@ (8002964 <BSP_RADIO_DeInit+0x48>)
 800292c:	f002 f908 	bl	8004b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002930:	2200      	movs	r2, #0
 8002932:	2120      	movs	r1, #32
 8002934:	480b      	ldr	r0, [pc, #44]	@ (8002964 <BSP_RADIO_DeInit+0x48>)
 8002936:	f002 f903 	bl	8004b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800293a:	2200      	movs	r2, #0
 800293c:	2108      	movs	r1, #8
 800293e:	4809      	ldr	r0, [pc, #36]	@ (8002964 <BSP_RADIO_DeInit+0x48>)
 8002940:	f002 f8fe 	bl	8004b40 <HAL_GPIO_WritePin>
  
  /* DeInit the Radio Switch pin */
  HAL_GPIO_DeInit(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN);
 8002944:	2110      	movs	r1, #16
 8002946:	4807      	ldr	r0, [pc, #28]	@ (8002964 <BSP_RADIO_DeInit+0x48>)
 8002948:	f002 f82c 	bl	80049a4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN);
 800294c:	2120      	movs	r1, #32
 800294e:	4805      	ldr	r0, [pc, #20]	@ (8002964 <BSP_RADIO_DeInit+0x48>)
 8002950:	f002 f828 	bl	80049a4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN);
 8002954:	2108      	movs	r1, #8
 8002956:	4803      	ldr	r0, [pc, #12]	@ (8002964 <BSP_RADIO_DeInit+0x48>)
 8002958:	f002 f824 	bl	80049a4 <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	48000800 	.word	0x48000800

08002968 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d84b      	bhi.n	8002a10 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8002978:	a201      	add	r2, pc, #4	@ (adr r2, 8002980 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	080029b1 	.word	0x080029b1
 8002988:	080029d1 	.word	0x080029d1
 800298c:	080029f1 	.word	0x080029f1
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	2108      	movs	r1, #8
 8002994:	4821      	ldr	r0, [pc, #132]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002996:	f002 f8d3 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	2110      	movs	r1, #16
 800299e:	481f      	ldr	r0, [pc, #124]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029a0:	f002 f8ce 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2120      	movs	r1, #32
 80029a8:	481c      	ldr	r0, [pc, #112]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029aa:	f002 f8c9 	bl	8004b40 <HAL_GPIO_WritePin>
      break;      
 80029ae:	e030      	b.n	8002a12 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80029b0:	2201      	movs	r2, #1
 80029b2:	2108      	movs	r1, #8
 80029b4:	4819      	ldr	r0, [pc, #100]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029b6:	f002 f8c3 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029ba:	2201      	movs	r2, #1
 80029bc:	2110      	movs	r1, #16
 80029be:	4817      	ldr	r0, [pc, #92]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029c0:	f002 f8be 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029c4:	2200      	movs	r2, #0
 80029c6:	2120      	movs	r1, #32
 80029c8:	4814      	ldr	r0, [pc, #80]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029ca:	f002 f8b9 	bl	8004b40 <HAL_GPIO_WritePin>
      break;
 80029ce:	e020      	b.n	8002a12 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80029d0:	2201      	movs	r2, #1
 80029d2:	2108      	movs	r1, #8
 80029d4:	4811      	ldr	r0, [pc, #68]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029d6:	f002 f8b3 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029da:	2201      	movs	r2, #1
 80029dc:	2110      	movs	r1, #16
 80029de:	480f      	ldr	r0, [pc, #60]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029e0:	f002 f8ae 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029e4:	2201      	movs	r2, #1
 80029e6:	2120      	movs	r1, #32
 80029e8:	480c      	ldr	r0, [pc, #48]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029ea:	f002 f8a9 	bl	8004b40 <HAL_GPIO_WritePin>
      break;
 80029ee:	e010      	b.n	8002a12 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80029f0:	2201      	movs	r2, #1
 80029f2:	2108      	movs	r1, #8
 80029f4:	4809      	ldr	r0, [pc, #36]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80029f6:	f002 f8a3 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80029fa:	2200      	movs	r2, #0
 80029fc:	2110      	movs	r1, #16
 80029fe:	4807      	ldr	r0, [pc, #28]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a00:	f002 f89e 	bl	8004b40 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a04:	2201      	movs	r2, #1
 8002a06:	2120      	movs	r1, #32
 8002a08:	4804      	ldr	r0, [pc, #16]	@ (8002a1c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a0a:	f002 f899 	bl	8004b40 <HAL_GPIO_WritePin>
      break;
 8002a0e:	e000      	b.n	8002a12 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8002a10:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	48000800 	.word	0x48000800

08002a20 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002a5a:	230f      	movs	r3, #15
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e001      	b.n	8002a64 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002a60:	2316      	movs	r3, #22
 8002a62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a03      	ldr	r2, [pc, #12]	@ (8002a88 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6053      	str	r3, [r2, #4]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	e0042000 	.word	0xe0042000

08002a8c <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a03      	ldr	r2, [pc, #12]	@ (8002aa4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a96:	f023 0302 	bic.w	r3, r3, #2
 8002a9a:	6053      	str	r3, [r2, #4]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	e0042000 	.word	0xe0042000

08002aa8 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a03      	ldr	r2, [pc, #12]	@ (8002ac0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6053      	str	r3, [r2, #4]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	e0042000 	.word	0xe0042000

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f001 f9a0 	bl	8003e14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ad4:	f004 f85e 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <HAL_Init+0x3c>)
 8002adc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ade:	200f      	movs	r0, #15
 8002ae0:	f7fe feb8 	bl	8001854 <HAL_InitTick>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	71fb      	strb	r3, [r7, #7]
 8002aee:	e001      	b.n	8002af4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002af0:	f7fe fd45 	bl	800157e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002af4:	79fb      	ldrb	r3, [r7, #7]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000070 	.word	0x20000070

08002b04 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <HAL_SuspendTick+0x18>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a03      	ldr	r2, [pc, #12]	@ (8002b1c <HAL_SuspendTick+0x18>)
 8002b0e:	f023 0302 	bic.w	r3, r3, #2
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <HAL_ResumeTick+0x18>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a03      	ldr	r2, [pc, #12]	@ (8002b38 <HAL_ResumeTick+0x18>)
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002b40:	f7ff ff96 	bl	8002a70 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002b4c:	f7ff ff9e 	bl	8002a8c <LL_DBGMCU_DisableDBGStopMode>
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002b58:	f7ff ffa6 	bl	8002aa8 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2107      	movs	r1, #7
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2107      	movs	r1, #7
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	210f      	movs	r1, #15
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	f003 010f 	and.w	r1, r3, #15
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	431a      	orrs	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	401a      	ands	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	0219      	lsls	r1, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	400b      	ands	r3, r1
 8002cda:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002cde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d02:	f023 0317 	bic.w	r3, r3, #23
 8002d06:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d28:	f023 0317 	bic.w	r3, r3, #23
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6093      	str	r3, [r2, #8]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d4e:	d101      	bne.n	8002d54 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d70:	f023 0317 	bic.w	r3, r3, #23
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d96:	f023 0317 	bic.w	r3, r3, #23
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <LL_ADC_IsEnabled+0x18>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <LL_ADC_IsEnabled+0x1a>
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_IsDisableOngoing+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_IsDisableOngoing+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e04:	f023 0317 	bic.w	r3, r3, #23
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e2a:	f023 0317 	bic.w	r3, r3, #23
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d101      	bne.n	8002e58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e17e      	b.n	8003184 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe f977 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff44 	bl	8002d3a <LL_ADC_IsInternalRegulatorEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d115      	bne.n	8002ee4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff18 	bl	8002cf2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800313c <HAL_ADC_Init+0x2d8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	4a9d      	ldr	r2, [pc, #628]	@ (8003140 <HAL_ADC_Init+0x2dc>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed6:	e002      	b.n	8002ede <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f9      	bne.n	8002ed8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff26 	bl	8002d3a <LL_ADC_IsInternalRegulatorEnabled>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10d      	bne.n	8002f10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	f043 0210 	orr.w	r2, r3, #16
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff93 	bl	8002e40 <LL_ADC_REG_IsConversionOngoing>
 8002f1a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 8124 	bne.w	8003172 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 8120 	bne.w	8003172 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff30 	bl	8002dac <LL_ADC_IsEnabled>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 80a7 	bne.w	80030a2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7e1b      	ldrb	r3, [r3, #24]
 8002f5c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f5e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7e5b      	ldrb	r3, [r3, #25]
 8002f64:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f66:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7e9b      	ldrb	r3, [r3, #26]
 8002f6c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f6e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_ADC_Init+0x11a>
 8002f78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f7c:	e000      	b.n	8002f80 <HAL_ADC_Init+0x11c>
 8002f7e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f80:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f86:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da04      	bge.n	8002f9a <HAL_ADC_Init+0x136>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f98:	e001      	b.n	8002f9e <HAL_ADC_Init+0x13a>
 8002f9a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002f9e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002fa6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fa8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d114      	bne.n	8002fe4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7e9b      	ldrb	r3, [r3, #26]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e00b      	b.n	8002fe4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d009      	beq.n	8003000 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 800300a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	430b      	orrs	r3, r1
 8003016:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003024:	4313      	orrs	r3, r2
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d111      	bne.n	800305a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003042:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003048:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800304e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <HAL_ADC_Init+0x2e0>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	430b      	orrs	r3, r1
 800306c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003076:	d014      	beq.n	80030a2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003080:	d00f      	beq.n	80030a2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800308a:	d00a      	beq.n	80030a2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800308c:	4b2e      	ldr	r3, [pc, #184]	@ (8003148 <HAL_ADC_Init+0x2e4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800309c:	492a      	ldr	r1, [pc, #168]	@ (8003148 <HAL_ADC_Init+0x2e4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030aa:	461a      	mov	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	f7ff fd76 	bl	8002b9e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	461a      	mov	r2, r3
 80030bc:	4923      	ldr	r1, [pc, #140]	@ (800314c <HAL_ADC_Init+0x2e8>)
 80030be:	f7ff fd6e 	bl	8002b9e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d108      	bne.n	80030dc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f062 020f 	orn	r2, r2, #15
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80030da:	e017      	b.n	800310c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030e4:	d112      	bne.n	800310c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	f003 031c 	and.w	r3, r3, #28
 80030f8:	f06f 020f 	mvn.w	r2, #15
 80030fc:	fa02 f103 	lsl.w	r1, r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fd61 	bl	8002bda <LL_ADC_GetSamplingTimeCommonChannels>
 8003118:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800311e:	429a      	cmp	r2, r3
 8003120:	d116      	bne.n	8003150 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	f023 0303 	bic.w	r3, r3, #3
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003138:	e023      	b.n	8003182 <HAL_ADC_Init+0x31e>
 800313a:	bf00      	nop
 800313c:	20000070 	.word	0x20000070
 8003140:	053e2d63 	.word	0x053e2d63
 8003144:	1ffffc02 	.word	0x1ffffc02
 8003148:	40012708 	.word	0x40012708
 800314c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	f023 0312 	bic.w	r3, r3, #18
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003164:	f043 0201 	orr.w	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003170:	e007      	b.n	8003182 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003182:	7ffb      	ldrb	r3, [r7, #31]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07a      	b.n	8003294 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f043 0202 	orr.w	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 face 	bl	800374c <ADC_ConversionStop>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fb92 	bl	80038e4 <ADC_Disable>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fd9f 	bl	8002d18 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80031e8:	f023 0303 	bic.w	r3, r3, #3
 80031ec:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f240 329f 	movw	r2, #927	@ 0x39f
 80031f6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_ADC_DeInit+0x110>)
 8003204:	400b      	ands	r3, r1
 8003206:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003216:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0207 	bic.w	r2, r2, #7
 8003226:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003236:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003246:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003266:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <HAL_ADC_DeInit+0x114>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a0d      	ldr	r2, [pc, #52]	@ (80032a0 <HAL_ADC_DeInit+0x114>)
 800326c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003270:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd ffb4 	bl	80011e0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	833e0200 	.word	0x833e0200
 80032a0:	40012708 	.word	0x40012708

080032a4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fdc5 	bl	8002e40 <LL_ADC_REG_IsConversionOngoing>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d132      	bne.n	8003322 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_Start+0x26>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e02e      	b.n	8003328 <HAL_ADC_Start+0x84>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa80 	bl	80037d8 <ADC_Enable>
 80032d8:	4603      	mov	r3, r0
 80032da:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11a      	bne.n	8003318 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	221c      	movs	r2, #28
 8003302:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fd6f 	bl	8002df4 <LL_ADC_REG_StartConversion>
 8003316:	e006      	b.n	8003326 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003320:	e001      	b.n	8003326 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003322:	2302      	movs	r3, #2
 8003324:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Stop+0x16>
 8003342:	2302      	movs	r3, #2
 8003344:	e022      	b.n	800338c <HAL_ADC_Stop+0x5c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f9fc 	bl	800374c <ADC_ConversionStop>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d111      	bne.n	8003382 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fac0 	bl	80038e4 <ADC_Disable>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d102      	bne.n	80033ac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80033a6:	2308      	movs	r3, #8
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e010      	b.n	80033ce <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e077      	b.n	80034ba <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033ca:	2304      	movs	r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033ce:	f7fe fa4b 	bl	8001868 <HAL_GetTick>
 80033d2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033d4:	e021      	b.n	800341a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d01d      	beq.n	800341a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033de:	f7fe fa43 	bl	8001868 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <HAL_ADC_PollForConversion+0x60>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d112      	bne.n	800341a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e04f      	b.n	80034ba <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0d6      	beq.n	80033d6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fbe6 	bl	8002c0a <LL_ADC_REG_IsTriggerSourceSWStart>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d031      	beq.n	80034a8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7e9b      	ldrb	r3, [r3, #26]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d12d      	bne.n	80034a8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b08      	cmp	r3, #8
 8003458:	d126      	bne.n	80034a8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fcee 	bl	8002e40 <LL_ADC_REG_IsConversionOngoing>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d112      	bne.n	8003490 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 020c 	bic.w	r2, r2, #12
 8003478:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	659a      	str	r2, [r3, #88]	@ 0x58
 800348e:	e00b      	b.n	80034a8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e1b      	ldrb	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	220c      	movs	r2, #12
 80034b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x28>
 8003500:	2302      	movs	r3, #2
 8003502:	e110      	b.n	8003726 <HAL_ADC_ConfigChannel+0x24a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fc95 	bl	8002e40 <LL_ADC_REG_IsConversionOngoing>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 80f7 	bne.w	800370c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	f000 80b1 	beq.w	800368a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003530:	d004      	beq.n	800353c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003536:	4a7e      	ldr	r2, [pc, #504]	@ (8003730 <HAL_ADC_ConfigChannel+0x254>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7ff fb92 	bl	8002c70 <LL_ADC_REG_SetSequencerChAdd>
 800354c:	e041      	b.n	80035d2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	210f      	movs	r1, #15
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	401a      	ands	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_ADC_ConfigChannel+0xa0>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	e011      	b.n	80035a0 <HAL_ADC_ConfigChannel+0xc4>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	e003      	b.n	80035a0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	6849      	ldr	r1, [r1, #4]
 80035a4:	f001 011f 	and.w	r1, r1, #31
 80035a8:	408b      	lsls	r3, r1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d808      	bhi.n	80035d2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f7ff fb2e 	bl	8002c2e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	461a      	mov	r2, r3
 80035e0:	f7ff fb6b 	bl	8002cba <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f280 8097 	bge.w	800371c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ee:	4851      	ldr	r0, [pc, #324]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 80035f0:	f7ff fac8 	bl	8002b84 <LL_ADC_GetCommonPathInternalCh>
 80035f4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4f      	ldr	r2, [pc, #316]	@ (8003738 <HAL_ADC_ConfigChannel+0x25c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d120      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11b      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003610:	4619      	mov	r1, r3
 8003612:	4848      	ldr	r0, [pc, #288]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 8003614:	f7ff faa4 	bl	8002b60 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003618:	4b48      	ldr	r3, [pc, #288]	@ (800373c <HAL_ADC_ConfigChannel+0x260>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	4a48      	ldr	r2, [pc, #288]	@ (8003740 <HAL_ADC_ConfigChannel+0x264>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003632:	e002      	b.n	800363a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3b01      	subs	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f9      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003640:	e06c      	b.n	800371c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a3f      	ldr	r2, [pc, #252]	@ (8003744 <HAL_ADC_ConfigChannel+0x268>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d10c      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365c:	4619      	mov	r1, r3
 800365e:	4835      	ldr	r0, [pc, #212]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 8003660:	f7ff fa7e 	bl	8002b60 <LL_ADC_SetCommonPathInternalCh>
 8003664:	e05a      	b.n	800371c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a37      	ldr	r2, [pc, #220]	@ (8003748 <HAL_ADC_ConfigChannel+0x26c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d155      	bne.n	800371c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d150      	bne.n	800371c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003680:	4619      	mov	r1, r3
 8003682:	482c      	ldr	r0, [pc, #176]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 8003684:	f7ff fa6c 	bl	8002b60 <LL_ADC_SetCommonPathInternalCh>
 8003688:	e048      	b.n	800371c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003692:	d004      	beq.n	800369e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003698:	4a25      	ldr	r2, [pc, #148]	@ (8003730 <HAL_ADC_ConfigChannel+0x254>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d107      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7ff faf3 	bl	8002c94 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da32      	bge.n	800371c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b6:	481f      	ldr	r0, [pc, #124]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 80036b8:	f7ff fa64 	bl	8002b84 <LL_ADC_GetCommonPathInternalCh>
 80036bc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003738 <HAL_ADC_ConfigChannel+0x25c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d107      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036ce:	4619      	mov	r1, r3
 80036d0:	4818      	ldr	r0, [pc, #96]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 80036d2:	f7ff fa45 	bl	8002b60 <LL_ADC_SetCommonPathInternalCh>
 80036d6:	e021      	b.n	800371c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <HAL_ADC_ConfigChannel+0x268>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d107      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e8:	4619      	mov	r1, r3
 80036ea:	4812      	ldr	r0, [pc, #72]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 80036ec:	f7ff fa38 	bl	8002b60 <LL_ADC_SetCommonPathInternalCh>
 80036f0:	e014      	b.n	800371c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a14      	ldr	r2, [pc, #80]	@ (8003748 <HAL_ADC_ConfigChannel+0x26c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d10f      	bne.n	800371c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003702:	4619      	mov	r1, r3
 8003704:	480b      	ldr	r0, [pc, #44]	@ (8003734 <HAL_ADC_ConfigChannel+0x258>)
 8003706:	f7ff fa2b 	bl	8002b60 <LL_ADC_SetCommonPathInternalCh>
 800370a:	e007      	b.n	800371c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003724:	7ffb      	ldrb	r3, [r7, #31]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	80000004 	.word	0x80000004
 8003734:	40012708 	.word	0x40012708
 8003738:	b0001000 	.word	0xb0001000
 800373c:	20000070 	.word	0x20000070
 8003740:	053e2d63 	.word	0x053e2d63
 8003744:	b8004000 	.word	0xb8004000
 8003748:	b4002000 	.word	0xb4002000

0800374c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fb71 	bl	8002e40 <LL_ADC_REG_IsConversionOngoing>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d033      	beq.n	80037cc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fb31 	bl	8002dd0 <LL_ADC_IsDisableOngoing>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fb4e 	bl	8002e1a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800377e:	f7fe f873 	bl	8001868 <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003784:	e01b      	b.n	80037be <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003786:	f7fe f86f 	bl	8001868 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d914      	bls.n	80037be <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	f043 0210 	orr.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1dc      	bne.n	8003786 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fadf 	bl	8002dac <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d169      	bne.n	80038c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	4b36      	ldr	r3, [pc, #216]	@ (80038d4 <ADC_Enable+0xfc>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	f043 0210 	orr.w	r2, r3, #16
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e055      	b.n	80038ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fa9c 	bl	8002d60 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003828:	482b      	ldr	r0, [pc, #172]	@ (80038d8 <ADC_Enable+0x100>)
 800382a:	f7ff f9ab 	bl	8002b84 <LL_ADC_GetCommonPathInternalCh>
 800382e:	4603      	mov	r3, r0
 8003830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003838:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <ADC_Enable+0x104>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	4a28      	ldr	r2, [pc, #160]	@ (80038e0 <ADC_Enable+0x108>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003848:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800384a:	e002      	b.n	8003852 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3b01      	subs	r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f9      	bne.n	800384c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e5b      	ldrb	r3, [r3, #25]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d033      	beq.n	80038c8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003860:	f7fe f802 	bl	8001868 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003866:	e028      	b.n	80038ba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fa9d 	bl	8002dac <LL_ADC_IsEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fa6f 	bl	8002d60 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003882:	f7fd fff1 	bl	8001868 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d914      	bls.n	80038ba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d00d      	beq.n	80038ba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e007      	b.n	80038ca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d1cf      	bne.n	8003868 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	80000017 	.word	0x80000017
 80038d8:	40012708 	.word	0x40012708
 80038dc:	20000070 	.word	0x20000070
 80038e0:	053e2d63 	.word	0x053e2d63

080038e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fa6d 	bl	8002dd0 <LL_ADC_IsDisableOngoing>
 80038f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fa55 	bl	8002dac <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d047      	beq.n	8003998 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d144      	bne.n	8003998 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0305 	and.w	r3, r3, #5
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10c      	bne.n	8003936 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fa30 	bl	8002d86 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2203      	movs	r2, #3
 800392c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800392e:	f7fd ff9b 	bl	8001868 <HAL_GetTick>
 8003932:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003934:	e029      	b.n	800398a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e023      	b.n	800399a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003952:	f7fd ff89 	bl	8001868 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d914      	bls.n	800398a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003972:	f043 0210 	orr.w	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	f043 0201 	orr.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1dc      	bne.n	8003952 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <LL_ADC_SetCalibrationFactor>:
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039b2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_GetCalibrationFactor>:
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <LL_ADC_Enable>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039f6:	f023 0317 	bic.w	r3, r3, #23
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_Disable>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a1c:	f023 0317 	bic.w	r3, r3, #23
 8003a20:	f043 0202 	orr.w	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <LL_ADC_IsEnabled>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <LL_ADC_IsEnabled+0x18>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <LL_ADC_IsEnabled+0x1a>
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <LL_ADC_StartCalibration>:
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a66:	f023 0317 	bic.w	r3, r3, #23
 8003a6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_IsCalibrationOnGoing>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a90:	d101      	bne.n	8003a96 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b088      	sub	sp, #32
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADCEx_Calibration_Start+0x1e>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0b9      	b.n	8003c34 <HAL_ADCEx_Calibration_Start+0x192>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ff0b 	bl	80038e4 <ADC_Disable>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ffab 	bl	8003a32 <LL_ADC_IsEnabled>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 809d 	bne.w	8003c1e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003aec:	f043 0202 	orr.w	r2, r3, #2
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b10:	f023 0303 	bic.w	r3, r3, #3
 8003b14:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e02e      	b.n	8003b7a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff98 	bl	8003a56 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b26:	e014      	b.n	8003b52 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003b34:	d30d      	bcc.n	8003b52 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	f023 0312 	bic.w	r3, r3, #18
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e070      	b.n	8003c34 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ff90 	bl	8003a7c <LL_ADC_IsCalibrationOnGoing>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e2      	bne.n	8003b28 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff2f 	bl	80039ca <LL_ADC_GetCalibrationFactor>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4413      	add	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	d9cd      	bls.n	8003b1c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff ff29 	bl	80039e6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ff01 	bl	80039a2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff31 	bl	8003a0c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003baa:	f7fd fe5d 	bl	8001868 <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bb0:	e01c      	b.n	8003bec <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bb2:	f7fd fe59 	bl	8001868 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d915      	bls.n	8003bec <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff34 	bl	8003a32 <LL_ADC_IsEnabled>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e023      	b.n	8003c34 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff1e 	bl	8003a32 <LL_ADC_IsEnabled>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1da      	bne.n	8003bb2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68d9      	ldr	r1, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c10:	f023 0303 	bic.w	r3, r3, #3
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c1c:	e005      	b.n	8003c2a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	f043 0210 	orr.w	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <__NVIC_SetPriorityGrouping+0x44>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6e:	4a04      	ldr	r2, [pc, #16]	@ (8003c80 <__NVIC_SetPriorityGrouping+0x44>)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	60d3      	str	r3, [r2, #12]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c88:	4b04      	ldr	r3, [pc, #16]	@ (8003c9c <__NVIC_GetPriorityGrouping+0x18>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 0307 	and.w	r3, r3, #7
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	db0b      	blt.n	8003cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	f003 021f 	and.w	r2, r3, #31
 8003cb8:	4906      	ldr	r1, [pc, #24]	@ (8003cd4 <__NVIC_EnableIRQ+0x34>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	db12      	blt.n	8003d10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	f003 021f 	and.w	r2, r3, #31
 8003cf0:	490a      	ldr	r1, [pc, #40]	@ (8003d1c <__NVIC_DisableIRQ+0x44>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfe:	3320      	adds	r3, #32
 8003d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d04:	f3bf 8f4f 	dsb	sy
}
 8003d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d0a:	f3bf 8f6f 	isb	sy
}
 8003d0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000e100 	.word	0xe000e100

08003d20 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	db0c      	blt.n	8003d4c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	4907      	ldr	r1, [pc, #28]	@ (8003d58 <__NVIC_ClearPendingIRQ+0x38>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2001      	movs	r0, #1
 8003d42:	fa00 f202 	lsl.w	r2, r0, r2
 8003d46:	3360      	adds	r3, #96	@ 0x60
 8003d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000e100 	.word	0xe000e100

08003d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	db0a      	blt.n	8003d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	490c      	ldr	r1, [pc, #48]	@ (8003da8 <__NVIC_SetPriority+0x4c>)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d84:	e00a      	b.n	8003d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4908      	ldr	r1, [pc, #32]	@ (8003dac <__NVIC_SetPriority+0x50>)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	3b04      	subs	r3, #4
 8003d94:	0112      	lsls	r2, r2, #4
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	440b      	add	r3, r1
 8003d9a:	761a      	strb	r2, [r3, #24]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000e100 	.word	0xe000e100
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	@ 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f1c3 0307 	rsb	r3, r3, #7
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf28      	it	cs
 8003dce:	2304      	movcs	r3, #4
 8003dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d902      	bls.n	8003de0 <NVIC_EncodePriority+0x30>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3b03      	subs	r3, #3
 8003dde:	e000      	b.n	8003de2 <NVIC_EncodePriority+0x32>
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	401a      	ands	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	43d9      	mvns	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	4313      	orrs	r3, r2
         );
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3724      	adds	r7, #36	@ 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ff0d 	bl	8003c3c <__NVIC_SetPriorityGrouping>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	4603      	mov	r3, r0
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e38:	f7ff ff24 	bl	8003c84 <__NVIC_GetPriorityGrouping>
 8003e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	6978      	ldr	r0, [r7, #20]
 8003e44:	f7ff ffb4 	bl	8003db0 <NVIC_EncodePriority>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff83 	bl	8003d5c <__NVIC_SetPriority>
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff17 	bl	8003ca0 <__NVIC_EnableIRQ>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff25 	bl	8003cd8 <__NVIC_DisableIRQ>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff3b 	bl	8003d20 <__NVIC_ClearPendingIRQ>
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e08e      	b.n	8003fe4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b47      	ldr	r3, [pc, #284]	@ (8003fec <HAL_DMA_Init+0x138>)
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d80f      	bhi.n	8003ef2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b45      	ldr	r3, [pc, #276]	@ (8003ff0 <HAL_DMA_Init+0x13c>)
 8003eda:	4413      	add	r3, r2
 8003edc:	4a45      	ldr	r2, [pc, #276]	@ (8003ff4 <HAL_DMA_Init+0x140>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	009a      	lsls	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a42      	ldr	r2, [pc, #264]	@ (8003ff8 <HAL_DMA_Init+0x144>)
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ef0:	e00e      	b.n	8003f10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b40      	ldr	r3, [pc, #256]	@ (8003ffc <HAL_DMA_Init+0x148>)
 8003efa:	4413      	add	r3, r2
 8003efc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff4 <HAL_DMA_Init+0x140>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	009a      	lsls	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004000 <HAL_DMA_Init+0x14c>)
 8003f0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fb52 	bl	800460c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f70:	d102      	bne.n	8003f78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f8e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <HAL_DMA_Init+0x106>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d80c      	bhi.n	8003fba <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fb7b 	bl	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	e008      	b.n	8003fcc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40020407 	.word	0x40020407
 8003ff0:	bffdfff8 	.word	0xbffdfff8
 8003ff4:	cccccccd 	.word	0xcccccccd
 8003ff8:	40020000 	.word	0x40020000
 8003ffc:	bffdfbf8 	.word	0xbffdfbf8
 8004000:	40020400 	.word	0x40020400

08004004 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07b      	b.n	800410e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <HAL_DMA_DeInit+0x114>)
 800402e:	429a      	cmp	r2, r3
 8004030:	d80f      	bhi.n	8004052 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	4b38      	ldr	r3, [pc, #224]	@ (800411c <HAL_DMA_DeInit+0x118>)
 800403a:	4413      	add	r3, r2
 800403c:	4a38      	ldr	r2, [pc, #224]	@ (8004120 <HAL_DMA_DeInit+0x11c>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a35      	ldr	r2, [pc, #212]	@ (8004124 <HAL_DMA_DeInit+0x120>)
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004050:	e00e      	b.n	8004070 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b33      	ldr	r3, [pc, #204]	@ (8004128 <HAL_DMA_DeInit+0x124>)
 800405a:	4413      	add	r3, r2
 800405c:	4a30      	ldr	r2, [pc, #192]	@ (8004120 <HAL_DMA_DeInit+0x11c>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2f      	ldr	r2, [pc, #188]	@ (800412c <HAL_DMA_DeInit+0x128>)
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407c:	f003 021c 	and.w	r2, r3, #28
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	2101      	movs	r1, #1
 8004086:	fa01 f202 	lsl.w	r2, r1, r2
 800408a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fabd 	bl	800460c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040a2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00f      	beq.n	80040cc <HAL_DMA_DeInit+0xc8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d80b      	bhi.n	80040cc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 faf1 	bl	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040ca:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40020407 	.word	0x40020407
 800411c:	bffdfff8 	.word	0xbffdfff8
 8004120:	cccccccd 	.word	0xcccccccd
 8004124:	40020000 	.word	0x40020000
 8004128:	bffdfbf8 	.word	0xbffdfbf8
 800412c:	40020400 	.word	0x40020400

08004130 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_DMA_Start_IT+0x20>
 800414c:	2302      	movs	r3, #2
 800414e:	e069      	b.n	8004224 <HAL_DMA_Start_IT+0xf4>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d155      	bne.n	8004210 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fa02 	bl	8004592 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 020e 	orr.w	r2, r2, #14
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e00f      	b.n	80041c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0204 	bic.w	r2, r2, #4
 80041b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 020a 	orr.w	r2, r2, #10
 80041c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e008      	b.n	8004222 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2280      	movs	r2, #128	@ 0x80
 8004214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e04f      	b.n	80042de <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d008      	beq.n	800425c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2204      	movs	r2, #4
 800424e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e040      	b.n	80042de <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 020e 	bic.w	r2, r2, #14
 800426a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004276:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800427a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	f003 021c 	and.w	r2, r3, #28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	2101      	movs	r1, #1
 800429a:	fa01 f202 	lsl.w	r2, r1, r2
 800429e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d005      	beq.n	800430c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2204      	movs	r2, #4
 8004304:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e047      	b.n	800439c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 020e 	bic.w	r2, r2, #14
 800431a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004336:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800433a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	f003 021c 	and.w	r2, r3, #28
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f202 	lsl.w	r2, r1, r2
 800434e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004358:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800437a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
    }
  }
  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c4:	f003 031c 	and.w	r3, r3, #28
 80043c8:	2204      	movs	r2, #4
 80043ca:	409a      	lsls	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d027      	beq.n	8004424 <HAL_DMA_IRQHandler+0x7c>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d022      	beq.n	8004424 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	f003 021c 	and.w	r2, r3, #28
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2104      	movs	r1, #4
 800440a:	fa01 f202 	lsl.w	r2, r1, r2
 800440e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8081 	beq.w	800451c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004422:	e07b      	b.n	800451c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004428:	f003 031c 	and.w	r3, r3, #28
 800442c:	2202      	movs	r2, #2
 800442e:	409a      	lsls	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d03d      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x10c>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d038      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020a 	bic.w	r2, r2, #10
 800445e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	4b2e      	ldr	r3, [pc, #184]	@ (8004528 <HAL_DMA_IRQHandler+0x180>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d909      	bls.n	8004488 <HAL_DMA_IRQHandler+0xe0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004478:	f003 031c 	and.w	r3, r3, #28
 800447c:	4a2b      	ldr	r2, [pc, #172]	@ (800452c <HAL_DMA_IRQHandler+0x184>)
 800447e:	2102      	movs	r1, #2
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	6053      	str	r3, [r2, #4]
 8004486:	e008      	b.n	800449a <HAL_DMA_IRQHandler+0xf2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448c:	f003 031c 	and.w	r3, r3, #28
 8004490:	4a27      	ldr	r2, [pc, #156]	@ (8004530 <HAL_DMA_IRQHandler+0x188>)
 8004492:	2102      	movs	r1, #2
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d038      	beq.n	800451c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80044b2:	e033      	b.n	800451c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	f003 031c 	and.w	r3, r3, #28
 80044bc:	2208      	movs	r2, #8
 80044be:	409a      	lsls	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d02a      	beq.n	800451e <HAL_DMA_IRQHandler+0x176>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d025      	beq.n	800451e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 020e 	bic.w	r2, r2, #14
 80044e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f003 021c 	and.w	r2, r3, #28
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2101      	movs	r1, #1
 80044f0:	fa01 f202 	lsl.w	r2, r1, r2
 80044f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800451c:	bf00      	nop
 800451e:	bf00      	nop
}
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40020080 	.word	0x40020080
 800452c:	40020400 	.word	0x40020400
 8004530:	40020000 	.word	0x40020000

08004534 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	72fb      	strb	r3, [r7, #11]
    return status;
 800454c:	7afb      	ldrb	r3, [r7, #11]
 800454e:	e01b      	b.n	8004588 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e003      	b.n	800457e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800457c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]

  return status;
 8004586:	7afb      	ldrb	r3, [r7, #11]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045a8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c0:	f003 021c 	and.w	r2, r3, #28
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f202 	lsl.w	r2, r1, r2
 80045ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d108      	bne.n	80045f2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045f0:	e007      	b.n	8004602 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	4b1c      	ldr	r3, [pc, #112]	@ (800468c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800461c:	429a      	cmp	r2, r3
 800461e:	d813      	bhi.n	8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800462c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	3b08      	subs	r3, #8
 800463c:	4a14      	ldr	r2, [pc, #80]	@ (8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e011      	b.n	800466c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	009a      	lsls	r2, r3, #2
 8004650:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004652:	4413      	add	r3, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	3b08      	subs	r3, #8
 8004660:	4a0b      	ldr	r2, [pc, #44]	@ (8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	3307      	adds	r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a0a      	ldr	r2, [pc, #40]	@ (8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004670:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2201      	movs	r2, #1
 800467a:	409a      	lsls	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40020407 	.word	0x40020407
 8004690:	cccccccd 	.word	0xcccccccd
 8004694:	4002081c 	.word	0x4002081c
 8004698:	40020880 	.word	0x40020880

0800469c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	461a      	mov	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a08      	ldr	r2, [pc, #32]	@ (80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80046c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2201      	movs	r2, #1
 80046cc:	409a      	lsls	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	1000823f 	.word	0x1000823f
 80046e0:	40020940 	.word	0x40020940

080046e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f2:	e140      	b.n	8004976 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8132 	beq.w	8004970 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d005      	beq.n	8004724 <HAL_GPIO_Init+0x40>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d130      	bne.n	8004786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800475a:	2201      	movs	r2, #1
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 0201 	and.w	r2, r3, #1
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d017      	beq.n	80047c2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	2203      	movs	r2, #3
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4013      	ands	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d123      	bne.n	8004816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	08da      	lsrs	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3208      	adds	r2, #8
 80047d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	220f      	movs	r2, #15
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	08da      	lsrs	r2, r3, #3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3208      	adds	r2, #8
 8004810:	6939      	ldr	r1, [r7, #16]
 8004812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	2203      	movs	r2, #3
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0203 	and.w	r2, r3, #3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 808c 	beq.w	8004970 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004858:	4a4e      	ldr	r2, [pc, #312]	@ (8004994 <HAL_GPIO_Init+0x2b0>)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	3302      	adds	r3, #2
 8004860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	2207      	movs	r2, #7
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004882:	d00d      	beq.n	80048a0 <HAL_GPIO_Init+0x1bc>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a44      	ldr	r2, [pc, #272]	@ (8004998 <HAL_GPIO_Init+0x2b4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <HAL_GPIO_Init+0x1b8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a43      	ldr	r2, [pc, #268]	@ (800499c <HAL_GPIO_Init+0x2b8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_GPIO_Init+0x1b4>
 8004894:	2302      	movs	r3, #2
 8004896:	e004      	b.n	80048a2 <HAL_GPIO_Init+0x1be>
 8004898:	2307      	movs	r3, #7
 800489a:	e002      	b.n	80048a2 <HAL_GPIO_Init+0x1be>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_GPIO_Init+0x1be>
 80048a0:	2300      	movs	r3, #0
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	f002 0203 	and.w	r2, r2, #3
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	4093      	lsls	r3, r2
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048b2:	4938      	ldr	r1, [pc, #224]	@ (8004994 <HAL_GPIO_Init+0x2b0>)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	3302      	adds	r3, #2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c0:	4b37      	ldr	r3, [pc, #220]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048e4:	4a2e      	ldr	r2, [pc, #184]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048ea:	4b2d      	ldr	r3, [pc, #180]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800490e:	4a24      	ldr	r2, [pc, #144]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004914:	4b22      	ldr	r3, [pc, #136]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43db      	mvns	r3, r3
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800493a:	4a19      	ldr	r2, [pc, #100]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004942:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004948:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4013      	ands	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004968:	4a0d      	ldr	r2, [pc, #52]	@ (80049a0 <HAL_GPIO_Init+0x2bc>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3301      	adds	r3, #1
 8004974:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	f47f aeb7 	bne.w	80046f4 <HAL_GPIO_Init+0x10>
  }
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	48000400 	.word	0x48000400
 800499c:	48000800 	.word	0x48000800
 80049a0:	58000800 	.word	0x58000800

080049a4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049b2:	e0af      	b.n	8004b14 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049b4:	2201      	movs	r2, #1
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a2 	beq.w	8004b0e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049ca:	4a59      	ldr	r2, [pc, #356]	@ (8004b30 <HAL_GPIO_DeInit+0x18c>)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	2207      	movs	r2, #7
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4013      	ands	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049f2:	d00d      	beq.n	8004a10 <HAL_GPIO_DeInit+0x6c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004b34 <HAL_GPIO_DeInit+0x190>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <HAL_GPIO_DeInit+0x68>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004b38 <HAL_GPIO_DeInit+0x194>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <HAL_GPIO_DeInit+0x64>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e004      	b.n	8004a12 <HAL_GPIO_DeInit+0x6e>
 8004a08:	2307      	movs	r3, #7
 8004a0a:	e002      	b.n	8004a12 <HAL_GPIO_DeInit+0x6e>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_GPIO_DeInit+0x6e>
 8004a10:	2300      	movs	r3, #0
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	f002 0203 	and.w	r2, r2, #3
 8004a18:	0092      	lsls	r2, r2, #2
 8004a1a:	4093      	lsls	r3, r2
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d136      	bne.n	8004a90 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004a22:	4b46      	ldr	r3, [pc, #280]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a24:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	4943      	ldr	r1, [pc, #268]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a34:	4b41      	ldr	r3, [pc, #260]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a36:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	493f      	ldr	r1, [pc, #252]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a46:	4b3d      	ldr	r3, [pc, #244]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	493b      	ldr	r1, [pc, #236]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a54:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	4937      	ldr	r1, [pc, #220]	@ (8004b3c <HAL_GPIO_DeInit+0x198>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a72:	4a2f      	ldr	r2, [pc, #188]	@ (8004b30 <HAL_GPIO_DeInit+0x18c>)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	089b      	lsrs	r3, r3, #2
 8004a78:	3302      	adds	r3, #2
 8004a7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	482b      	ldr	r0, [pc, #172]	@ (8004b30 <HAL_GPIO_DeInit+0x18c>)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	400a      	ands	r2, r1
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	2103      	movs	r1, #3
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	08da      	lsrs	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3208      	adds	r2, #8
 8004aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	220f      	movs	r2, #15
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	08d2      	lsrs	r2, r2, #3
 8004ac4:	4019      	ands	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3208      	adds	r2, #8
 8004aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	2101      	movs	r1, #1
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	401a      	ands	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2103      	movs	r1, #3
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	401a      	ands	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3301      	adds	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f47f af49 	bne.w	80049b4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	48000400 	.word	0x48000400
 8004b38:	48000800 	.word	0x48000800
 8004b3c:	58000800 	.word	0x58000800

08004b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b50:	787b      	ldrb	r3, [r7, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b5c:	e002      	b.n	8004b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b7a:	4b08      	ldr	r3, [pc, #32]	@ (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b86:	4a05      	ldr	r2, [pc, #20]	@ (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f806 	bl	8004ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	58000800 	.word	0x58000800

08004ba0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e081      	b.n	8004cca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f879 	bl	8004cd2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	@ 0x24
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	e006      	b.n	8004c3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d104      	bne.n	8004c4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69d9      	ldr	r1, [r3, #28]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1a      	ldr	r2, [r3, #32]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	817b      	strh	r3, [r7, #10]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	f040 80da 	bne.w	8004eba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_I2C_Master_Transmit+0x30>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0d3      	b.n	8004ebc <HAL_I2C_Master_Transmit+0x1d8>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d1c:	f7fc fda4 	bl	8001868 <HAL_GetTick>
 8004d20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	2319      	movs	r3, #25
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f9e5 	bl	80050fe <I2C_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0be      	b.n	8004ebc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2221      	movs	r2, #33	@ 0x21
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2210      	movs	r2, #16
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	893a      	ldrh	r2, [r7, #8]
 8004d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2bff      	cmp	r3, #255	@ 0xff
 8004d6e:	d90e      	bls.n	8004d8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	22ff      	movs	r2, #255	@ 0xff
 8004d74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	8979      	ldrh	r1, [r7, #10]
 8004d7e:	4b51      	ldr	r3, [pc, #324]	@ (8004ec4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fbd0 	bl	800552c <I2C_TransferConfig>
 8004d8c:	e06c      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	8979      	ldrh	r1, [r7, #10]
 8004da0:	4b48      	ldr	r3, [pc, #288]	@ (8004ec4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fbbf 	bl	800552c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004dae:	e05b      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	6a39      	ldr	r1, [r7, #32]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f9e2 	bl	800517e <I2C_WaitOnTXISFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e07b      	b.n	8004ebc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d034      	beq.n	8004e68 <HAL_I2C_Master_Transmit+0x184>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d130      	bne.n	8004e68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	@ 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f974 	bl	80050fe <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e04d      	b.n	8004ebc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2bff      	cmp	r3, #255	@ 0xff
 8004e28:	d90e      	bls.n	8004e48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	22ff      	movs	r2, #255	@ 0xff
 8004e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	8979      	ldrh	r1, [r7, #10]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fb73 	bl	800552c <I2C_TransferConfig>
 8004e46:	e00f      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	8979      	ldrh	r1, [r7, #10]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fb62 	bl	800552c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d19e      	bne.n	8004db0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	6a39      	ldr	r1, [r7, #32]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f9c1 	bl	80051fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e01a      	b.n	8004ebc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e000      	b.n	8004ebc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
  }
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	80002000 	.word	0x80002000
 8004ec8:	fe00e800 	.word	0xfe00e800

08004ecc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	460b      	mov	r3, r1
 8004eda:	817b      	strh	r3, [r7, #10]
 8004edc:	4613      	mov	r3, r2
 8004ede:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	f040 80db 	bne.w	80050a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_I2C_Master_Receive+0x30>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e0d4      	b.n	80050a6 <HAL_I2C_Master_Receive+0x1da>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f04:	f7fc fcb0 	bl	8001868 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	2319      	movs	r3, #25
 8004f10:	2201      	movs	r2, #1
 8004f12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f8f1 	bl	80050fe <I2C_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0bf      	b.n	80050a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2222      	movs	r2, #34	@ 0x22
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2210      	movs	r2, #16
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	893a      	ldrh	r2, [r7, #8]
 8004f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2bff      	cmp	r3, #255	@ 0xff
 8004f56:	d90e      	bls.n	8004f76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	22ff      	movs	r2, #255	@ 0xff
 8004f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	8979      	ldrh	r1, [r7, #10]
 8004f66:	4b52      	ldr	r3, [pc, #328]	@ (80050b0 <HAL_I2C_Master_Receive+0x1e4>)
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fadc 	bl	800552c <I2C_TransferConfig>
 8004f74:	e06d      	b.n	8005052 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	4b49      	ldr	r3, [pc, #292]	@ (80050b0 <HAL_I2C_Master_Receive+0x1e4>)
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 facb 	bl	800552c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f96:	e05c      	b.n	8005052 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	6a39      	ldr	r1, [r7, #32]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f96b 	bl	8005278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e07c      	b.n	80050a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d034      	beq.n	8005052 <HAL_I2C_Master_Receive+0x186>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d130      	bne.n	8005052 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2180      	movs	r1, #128	@ 0x80
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f87f 	bl	80050fe <I2C_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e04d      	b.n	80050a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2bff      	cmp	r3, #255	@ 0xff
 8005012:	d90e      	bls.n	8005032 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	22ff      	movs	r2, #255	@ 0xff
 8005018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501e:	b2da      	uxtb	r2, r3
 8005020:	8979      	ldrh	r1, [r7, #10]
 8005022:	2300      	movs	r3, #0
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa7e 	bl	800552c <I2C_TransferConfig>
 8005030:	e00f      	b.n	8005052 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005040:	b2da      	uxtb	r2, r3
 8005042:	8979      	ldrh	r1, [r7, #10]
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fa6d 	bl	800552c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d19d      	bne.n	8004f98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	6a39      	ldr	r1, [r7, #32]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f8cc 	bl	80051fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e01a      	b.n	80050a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2220      	movs	r2, #32
 8005076:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <HAL_I2C_Master_Receive+0x1e8>)
 8005084:	400b      	ands	r3, r1
 8005086:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	80002400 	.word	0x80002400
 80050b4:	fe00e800 	.word	0xfe00e800

080050b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d103      	bne.n	80050d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d007      	beq.n	80050f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	619a      	str	r2, [r3, #24]
  }
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800510e:	e022      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d01e      	beq.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005118:	f7fc fba6 	bl	8001868 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d113      	bne.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e00f      	b.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d0cd      	beq.n	8005110 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800518a:	e02c      	b.n	80051e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f8eb 	bl	800536c <I2C_IsErrorOccurred>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e02a      	b.n	80051f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d01e      	beq.n	80051e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a8:	f7fc fb5e 	bl	8001868 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d302      	bcc.n	80051be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d113      	bne.n	80051e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e007      	b.n	80051f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d1cb      	bne.n	800518c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800520a:	e028      	b.n	800525e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f8ab 	bl	800536c <I2C_IsErrorOccurred>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e026      	b.n	800526e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005220:	f7fc fb22 	bl	8001868 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d113      	bne.n	800525e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e007      	b.n	800526e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b20      	cmp	r3, #32
 800526a:	d1cf      	bne.n	800520c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005284:	e064      	b.n	8005350 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f86e 	bl	800536c <I2C_IsErrorOccurred>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e062      	b.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d138      	bne.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d105      	bne.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e04e      	b.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d107      	bne.n	80052e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2210      	movs	r2, #16
 80052d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2204      	movs	r2, #4
 80052dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80052de:	e002      	b.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2220      	movs	r2, #32
 80052ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6859      	ldr	r1, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80052fa:	400b      	ands	r3, r1
 80052fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e022      	b.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fc faa5 	bl	8001868 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10f      	bne.n	8005350 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e007      	b.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d193      	bne.n	8005286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	fe00e800 	.word	0xfe00e800

0800536c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d068      	beq.n	800546a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2210      	movs	r2, #16
 800539e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053a0:	e049      	b.n	8005436 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d045      	beq.n	8005436 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053aa:	f7fc fa5d 	bl	8001868 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <I2C_IsErrorOccurred+0x54>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d13a      	bne.n	8005436 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e2:	d121      	bne.n	8005428 <I2C_IsErrorOccurred+0xbc>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ea:	d01d      	beq.n	8005428 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d01a      	beq.n	8005428 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005400:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005402:	f7fc fa31 	bl	8001868 <HAL_GetTick>
 8005406:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005408:	e00e      	b.n	8005428 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800540a:	f7fc fa2d 	bl	8001868 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b19      	cmp	r3, #25
 8005416:	d907      	bls.n	8005428 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f043 0320 	orr.w	r3, r3, #32
 800541e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005426:	e006      	b.n	8005436 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d1e9      	bne.n	800540a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b20      	cmp	r3, #32
 8005442:	d003      	beq.n	800544c <I2C_IsErrorOccurred+0xe0>
 8005444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0aa      	beq.n	80053a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800544c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2220      	movs	r2, #32
 800545a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800548c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01c      	beq.n	800551a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff fde9 	bl	80050b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6859      	ldr	r1, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <I2C_IsErrorOccurred+0x1bc>)
 80054f2:	400b      	ands	r3, r1
 80054f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800551a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800551e:	4618      	mov	r0, r3
 8005520:	3728      	adds	r7, #40	@ 0x28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	fe00e800 	.word	0xfe00e800

0800552c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	4613      	mov	r3, r2
 800553c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800553e:	897b      	ldrh	r3, [r7, #10]
 8005540:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005544:	7a7b      	ldrb	r3, [r7, #9]
 8005546:	041b      	lsls	r3, r3, #16
 8005548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800554c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	4313      	orrs	r3, r2
 8005556:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800555a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	0d5b      	lsrs	r3, r3, #21
 8005566:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800556a:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <I2C_TransferConfig+0x5c>)
 800556c:	430b      	orrs	r3, r1
 800556e:	43db      	mvns	r3, r3
 8005570:	ea02 0103 	and.w	r1, r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr
 8005588:	03ff63ff 	.word	0x03ff63ff

0800558c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d138      	bne.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e032      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	@ 0x24
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6819      	ldr	r1, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b20      	cmp	r3, #32
 8005634:	d139      	bne.n	80056aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005640:	2302      	movs	r3, #2
 8005642:	e033      	b.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	@ 0x24
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005672:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
	...

080056b8 <LL_EXTI_EnableIT_0_31>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80056c0:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <LL_EXTI_EnableIT_0_31+0x24>)
 80056c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80056c6:	4905      	ldr	r1, [pc, #20]	@ (80056dc <LL_EXTI_EnableIT_0_31+0x24>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	58000800 	.word	0x58000800

080056e0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80056e8:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <LL_EXTI_DisableIT_0_31+0x24>)
 80056ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	4904      	ldr	r1, [pc, #16]	@ (8005704 <LL_EXTI_DisableIT_0_31+0x24>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	58000800 	.word	0x58000800

08005708 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4904      	ldr	r1, [pc, #16]	@ (8005728 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	58000800 	.word	0x58000800

0800572c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005734:	4b05      	ldr	r3, [pc, #20]	@ (800574c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	43db      	mvns	r3, r3
 800573c:	4903      	ldr	r1, [pc, #12]	@ (800574c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800573e:	4013      	ands	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	58000800 	.word	0x58000800

08005750 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	4904      	ldr	r1, [pc, #16]	@ (8005770 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4313      	orrs	r3, r2
 8005762:	604b      	str	r3, [r1, #4]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	58000800 	.word	0x58000800

08005774 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	43db      	mvns	r3, r3
 8005784:	4903      	ldr	r1, [pc, #12]	@ (8005794 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005786:	4013      	ands	r3, r2
 8005788:	604b      	str	r3, [r1, #4]
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	58000800 	.word	0x58000800

08005798 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800579c:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a03      	ldr	r2, [pc, #12]	@ (80057b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80057a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a6:	6013      	str	r3, [r2, #0]
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	58000400 	.word	0x58000400

080057b4 <HAL_PWR_ConfigPVD>:
  * @note   For devices dual core: if "sConfigPVD->Mode" is set to PVD_MODE_IT,
  *         wake-up target is set to wake-up the selected CPU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80057bc:	4b1b      	ldr	r3, [pc, #108]	@ (800582c <HAL_PWR_ConfigPVD+0x78>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f023 020e 	bic.w	r2, r3, #14
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4918      	ldr	r1, [pc, #96]	@ (800582c <HAL_PWR_ConfigPVD+0x78>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WL series, power PVD event is not available on EXTI lines   */
  /*       (only interruption is available through EXTI line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80057ce:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80057d2:	f7ff ff85 	bl	80056e0 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80057d6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80057da:	f7ff ffcb 	bl	8005774 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80057de:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80057e2:	f7ff ffa3 	bl	800572c <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_PWR_ConfigPVD+0x46>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80057f2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80057f6:	f7ff ff5f 	bl	80056b8 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_PWR_ConfigPVD+0x5a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005806:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800580a:	f7ff ffa1 	bl	8005750 <LL_EXTI_EnableFallingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_PWR_ConfigPVD+0x6e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800581a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800581e:	f7ff ff73 	bl	8005708 <LL_EXTI_EnableRisingTrig_0_31>
  }

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	58000400 	.word	0x58000400

08005830 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005834:	4b04      	ldr	r3, [pc, #16]	@ (8005848 <HAL_PWR_EnablePVD+0x18>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4a03      	ldr	r2, [pc, #12]	@ (8005848 <HAL_PWR_EnablePVD+0x18>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6053      	str	r3, [r2, #4]
}
 8005840:	bf00      	nop
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	58000400 	.word	0x58000400

0800584c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10c      	bne.n	8005878 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800585e:	4b13      	ldr	r3, [pc, #76]	@ (80058ac <HAL_PWR_EnterSLEEPMode+0x60>)
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800586a:	d10d      	bne.n	8005888 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800586c:	f000 f8cc 	bl	8005a08 <HAL_PWREx_DisableLowPowerRunMode>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005876:	e015      	b.n	80058a4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <HAL_PWR_EnterSLEEPMode+0x60>)
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005884:	f000 f8b2 	bl	80059ec <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	4a08      	ldr	r2, [pc, #32]	@ (80058b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800588e:	f023 0304 	bic.w	r3, r3, #4
 8005892:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800589a:	bf30      	wfi
 800589c:	e002      	b.n	80058a4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800589e:	bf40      	sev
    __WFE();
 80058a0:	bf20      	wfe
    __WFE();
 80058a2:	bf20      	wfe
  }
}
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	58000400 	.word	0x58000400
 80058b0:	e000ed00 	.word	0xe000ed00

080058b4 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80058bc:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <LL_EXTI_ReadFlag_0_31+0x1c>)
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4013      	ands	r3, r2
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	58000800 	.word	0x58000800

080058d4 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80058dc:	4b04      	ldr	r3, [pc, #16]	@ (80058f0 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80058de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4013      	ands	r3, r2
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	58000800 	.word	0x58000800

080058f4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80058fc:	4a03      	ldr	r2, [pc, #12]	@ (800590c <LL_EXTI_ClearFlag_0_31+0x18>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60d3      	str	r3, [r2, #12]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	58000800 	.word	0x58000800

08005910 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005918:	4a03      	ldr	r2, [pc, #12]	@ (8005928 <LL_EXTI_ClearFlag_32_63+0x18>)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	58000800 	.word	0x58000800

0800592c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005930:	4b03      	ldr	r3, [pc, #12]	@ (8005940 <HAL_PWREx_GetVoltageRange+0x14>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	58000400 	.word	0x58000400

08005944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005952:	d12f      	bne.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x70>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005954:	4b22      	ldr	r3, [pc, #136]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800595c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005960:	d037      	beq.n	80059d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005962:	4b1f      	ldr	r3, [pc, #124]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800596a:	4a1d      	ldr	r2, [pc, #116]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800596c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005970:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005972:	4b1c      	ldr	r3, [pc, #112]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2232      	movs	r2, #50	@ 0x32
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	4a1a      	ldr	r2, [pc, #104]	@ (80059e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0c9b      	lsrs	r3, r3, #18
 8005984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005986:	e002      	b.n	800598e <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3b01      	subs	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800598e:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800599a:	d102      	bne.n	80059a2 <HAL_PWREx_ControlVoltageScaling+0x5e>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f2      	bne.n	8005988 <HAL_PWREx_ControlVoltageScaling+0x44>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059a2:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ae:	d110      	bne.n	80059d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e00f      	b.n	80059d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059b4:	4b0a      	ldr	r3, [pc, #40]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c0:	d007      	beq.n	80059d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059c2:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059ca:	4a05      	ldr	r2, [pc, #20]	@ (80059e0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80059cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	58000400 	.word	0x58000400
 80059e4:	20000070 	.word	0x20000070
 80059e8:	431bde83 	.word	0x431bde83

080059ec <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80059f0:	4b04      	ldr	r3, [pc, #16]	@ (8005a04 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a03      	ldr	r2, [pc, #12]	@ (8005a04 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80059f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	58000400 	.word	0x58000400

08005a08 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a0e:	4b16      	ldr	r3, [pc, #88]	@ (8005a68 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a15      	ldr	r2, [pc, #84]	@ (8005a68 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a18:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005a1a:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2232      	movs	r2, #50	@ 0x32
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	4a12      	ldr	r2, [pc, #72]	@ (8005a70 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0c9b      	lsrs	r3, r3, #18
 8005a2c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a2e:	e002      	b.n	8005a36 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a42:	d102      	bne.n	8005a4a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f2      	bne.n	8005a30 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a4a:	4b07      	ldr	r3, [pc, #28]	@ (8005a68 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a56:	d101      	bne.n	8005a5c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e000      	b.n	8005a5e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	58000400 	.word	0x58000400
 8005a6c:	20000070 	.word	0x20000070
 8005a70:	431bde83 	.word	0x431bde83

08005a74 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	71fb      	strb	r3, [r7, #7]
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP0);

#else
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a0e      	ldr	r2, [pc, #56]	@ (8005abc <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8005a84:	f023 0307 	bic.w	r3, r3, #7
 8005a88:	6013      	str	r3, [r2, #0]

#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005a90:	f043 0304 	orr.w	r3, r3, #4
 8005a94:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005a9c:	bf30      	wfi
 8005a9e:	e002      	b.n	8005aa6 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005aa0:	bf40      	sev
    __WFE();
 8005aa2:	bf20      	wfe
    __WFE();
 8005aa4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005aa6:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4a05      	ldr	r2, [pc, #20]	@ (8005ac0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005aac:	f023 0304 	bic.w	r3, r3, #4
 8005ab0:	6113      	str	r3, [r2, #16]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr
 8005abc:	58000400 	.word	0x58000400
 8005ac0:	e000ed00 	.word	0xe000ed00

08005ac4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005ace:	4b10      	ldr	r3, [pc, #64]	@ (8005b10 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 0307 	bic.w	r3, r3, #7
 8005ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b10 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005ad8:	f043 0302 	orr.w	r3, r3, #2
 8005adc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ade:	4b0d      	ldr	r3, [pc, #52]	@ (8005b14 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b14 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005ae4:	f043 0304 	orr.w	r3, r3, #4
 8005ae8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005af0:	bf30      	wfi
 8005af2:	e002      	b.n	8005afa <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005af4:	bf40      	sev
    __WFE();
 8005af6:	bf20      	wfe
    __WFE();
 8005af8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	4a05      	ldr	r2, [pc, #20]	@ (8005b14 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b00:	f023 0304 	bic.w	r3, r3, #4
 8005b04:	6113      	str	r3, [r2, #16]
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	58000400 	.word	0x58000400
 8005b14:	e000ed00 	.word	0xe000ed00

08005b18 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0UL)
 8005b1c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005b20:	f7ff fec8 	bl	80058b4 <LL_EXTI_ReadFlag_0_31>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005b2a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005b2e:	f7ff fee1 	bl	80058f4 <LL_EXTI_ClearFlag_0_31>

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005b32:	f016 fb65 	bl	801c200 <HAL_PWR_PVDCallback>
  }

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0UL)
 8005b36:	2004      	movs	r0, #4
 8005b38:	f7ff fecc 	bl	80058d4 <LL_EXTI_ReadFlag_32_63>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
  {
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005b42:	2004      	movs	r0, #4
 8005b44:	f7ff fee4 	bl	8005910 <LL_EXTI_ClearFlag_32_63>

    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8005b48:	f000 f802 	bl	8005b50 <HAL_PWREx_PVM3Callback>
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <LL_PWR_IsEnabledBkUpAccess>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005b60:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b6c:	d101      	bne.n	8005b72 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	58000400 	.word	0x58000400

08005b80 <LL_RCC_HSE_EnableTcxo>:
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_HSE_DisableTcxo>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005baa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bae:	6013      	str	r3, [r2, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bca:	d101      	bne.n	8005bd0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_HSE_Enable>:
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <LL_RCC_HSE_Disable>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_HSE_IsReady>:
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c24:	d101      	bne.n	8005c2a <LL_RCC_HSE_IsReady+0x18>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <LL_RCC_HSE_IsReady+0x1a>
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <LL_RCC_HSI_Enable>:
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c46:	6013      	str	r3, [r2, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <LL_RCC_HSI_Disable>:
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <LL_RCC_HSI_IsReady>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c7e:	d101      	bne.n	8005c84 <LL_RCC_HSI_IsReady+0x18>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <LL_RCC_HSI_IsReady+0x1a>
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	604b      	str	r3, [r1, #4]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <LL_RCC_LSE_IsReady>:
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d101      	bne.n	8005cce <LL_RCC_LSE_IsReady+0x18>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <LL_RCC_LSE_IsReady+0x1a>
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <LL_RCC_LSI_Enable>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_LSI_Disable>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr

08005d18 <LL_RCC_LSI_IsReady>:
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d101      	bne.n	8005d30 <LL_RCC_LSI_IsReady+0x18>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <LL_RCC_LSI_IsReady+0x1a>
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <LL_RCC_MSI_Enable>:
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6013      	str	r3, [r2, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <LL_RCC_MSI_Disable>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	6013      	str	r3, [r2, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <LL_RCC_MSI_IsReady>:
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d101      	bne.n	8005d88 <LL_RCC_MSI_IsReady+0x16>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <LL_RCC_MSI_IsReady+0x18>
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005d92:	b480      	push	{r7}
 8005d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d101      	bne.n	8005da8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <LL_RCC_MSI_GetRange>:
{
 8005db2:	b480      	push	{r7}
 8005db4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_SetSysClkSource>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f023 0203 	bic.w	r2, r3, #3
 8005e1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	608b      	str	r3, [r1, #8]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr

08005e2e <LL_RCC_GetSysClkSource>:
{
 8005e2e:	b480      	push	{r7}
 8005e30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 030c 	and.w	r3, r3, #12
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <LL_RCC_SetAHBPrescaler>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <LL_C2_RCC_SetAHBPrescaler>:
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <LL_RCC_SetAHB3Prescaler>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ea4:	f023 020f 	bic.w	r2, r3, #15
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <LL_RCC_SetAPB1Prescaler>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ed2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	608b      	str	r3, [r1, #8]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr

08005ee6 <LL_RCC_SetAPB2Prescaler>:
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ef8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <LL_RCC_GetAHBPrescaler>:
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <LL_RCC_GetAHB3Prescaler>:
{
 8005f22:	b480      	push	{r7}
 8005f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <LL_RCC_GetAPB1Prescaler>:
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <LL_RCC_GetAPB2Prescaler>:
{
 8005f52:	b480      	push	{r7}
 8005f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f7a:	6013      	str	r3, [r2, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr

08005fa0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fb2:	d101      	bne.n	8005fb8 <LL_RCC_PLL_IsReady+0x18>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <LL_RCC_PLL_IsReady+0x1a>
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr

08005fc2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bc80      	pop	{r7}
 8005fee:	4770      	bx	lr

08005ff0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr

08006006 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006006:	b480      	push	{r7}
 8006008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800600a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0303 	and.w	r3, r3, #3
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800602a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602e:	d101      	bne.n	8006034 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr

0800603e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800603e:	b480      	push	{r7}
 8006040:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006046:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800604a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006052:	d101      	bne.n	8006058 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006062:	b480      	push	{r7}
 8006064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800606e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006076:	d101      	bne.n	800607c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006086:	b480      	push	{r7}
 8006088:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006098:	d101      	bne.n	800609e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060ba:	d101      	bne.n	80060c0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e36f      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060de:	f7ff fea6 	bl	8005e2e <LL_RCC_GetSysClkSource>
 80060e2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060e4:	f7ff ff8f 	bl	8006006 <LL_RCC_PLL_GetMainSource>
 80060e8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 80c4 	beq.w	8006280 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <HAL_RCC_OscConfig+0x3e>
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d176      	bne.n	80061f2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d173      	bne.n	80061f2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e353      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800611a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCC_OscConfig+0x68>
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006132:	e006      	b.n	8006142 <HAL_RCC_OscConfig+0x76>
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006142:	4293      	cmp	r3, r2
 8006144:	d222      	bcs.n	800618c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fd5a 	bl	8006c04 <RCC_SetFlashLatencyFromMSIRange>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e331      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006164:	f043 0308 	orr.w	r3, r3, #8
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006178:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800617c:	4313      	orrs	r3, r2
 800617e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fe2b 	bl	8005de0 <LL_RCC_MSI_SetCalibTrimming>
 800618a:	e021      	b.n	80061d0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006196:	f043 0308 	orr.w	r3, r3, #8
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fe12 	bl	8005de0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fd1f 	bl	8006c04 <RCC_SetFlashLatencyFromMSIRange>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e2f6      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061d0:	f000 fce0 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 80061d4:	4603      	mov	r3, r0
 80061d6:	4aa7      	ldr	r2, [pc, #668]	@ (8006474 <HAL_RCC_OscConfig+0x3a8>)
 80061d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80061da:	4ba7      	ldr	r3, [pc, #668]	@ (8006478 <HAL_RCC_OscConfig+0x3ac>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fb fb38 	bl	8001854 <HAL_InitTick>
 80061e4:	4603      	mov	r3, r0
 80061e6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d047      	beq.n	800627e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	e2e5      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d02c      	beq.n	8006254 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061fa:	f7ff fd9e 	bl	8005d3a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061fe:	f7fb fb33 	bl	8001868 <HAL_GetTick>
 8006202:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006206:	f7fb fb2f 	bl	8001868 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e2d2      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006218:	f7ff fdab 	bl	8005d72 <LL_RCC_MSI_IsReady>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f1      	beq.n	8006206 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800622c:	f043 0308 	orr.w	r3, r3, #8
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006244:	4313      	orrs	r3, r2
 8006246:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fdc7 	bl	8005de0 <LL_RCC_MSI_SetCalibTrimming>
 8006252:	e015      	b.n	8006280 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006254:	f7ff fd7f 	bl	8005d56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006258:	f7fb fb06 	bl	8001868 <HAL_GetTick>
 800625c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006260:	f7fb fb02 	bl	8001868 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e2a5      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006272:	f7ff fd7e 	bl	8005d72 <LL_RCC_MSI_IsReady>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f1      	bne.n	8006260 <HAL_RCC_OscConfig+0x194>
 800627c:	e000      	b.n	8006280 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800627e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d058      	beq.n	800633e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b08      	cmp	r3, #8
 8006290:	d005      	beq.n	800629e <HAL_RCC_OscConfig+0x1d2>
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2b0c      	cmp	r3, #12
 8006296:	d108      	bne.n	80062aa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d105      	bne.n	80062aa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d14b      	bne.n	800633e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e289      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80062aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062bc:	4313      	orrs	r3, r2
 80062be:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c8:	d102      	bne.n	80062d0 <HAL_RCC_OscConfig+0x204>
 80062ca:	f7ff fc86 	bl	8005bda <LL_RCC_HSE_Enable>
 80062ce:	e00d      	b.n	80062ec <HAL_RCC_OscConfig+0x220>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80062d8:	d104      	bne.n	80062e4 <HAL_RCC_OscConfig+0x218>
 80062da:	f7ff fc51 	bl	8005b80 <LL_RCC_HSE_EnableTcxo>
 80062de:	f7ff fc7c 	bl	8005bda <LL_RCC_HSE_Enable>
 80062e2:	e003      	b.n	80062ec <HAL_RCC_OscConfig+0x220>
 80062e4:	f7ff fc87 	bl	8005bf6 <LL_RCC_HSE_Disable>
 80062e8:	f7ff fc58 	bl	8005b9c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d012      	beq.n	800631a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f4:	f7fb fab8 	bl	8001868 <HAL_GetTick>
 80062f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fb fab4 	bl	8001868 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	@ 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e257      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800630e:	f7ff fc80 	bl	8005c12 <LL_RCC_HSE_IsReady>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f1      	beq.n	80062fc <HAL_RCC_OscConfig+0x230>
 8006318:	e011      	b.n	800633e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fb faa5 	bl	8001868 <HAL_GetTick>
 800631e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006322:	f7fb faa1 	bl	8001868 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b64      	cmp	r3, #100	@ 0x64
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e244      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006334:	f7ff fc6d 	bl	8005c12 <LL_RCC_HSE_IsReady>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f1      	bne.n	8006322 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d046      	beq.n	80063d8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b04      	cmp	r3, #4
 800634e:	d005      	beq.n	800635c <HAL_RCC_OscConfig+0x290>
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d10e      	bne.n	8006374 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d10b      	bne.n	8006374 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e22a      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fc8e 	bl	8005c8e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006372:	e031      	b.n	80063d8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d019      	beq.n	80063b0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800637c:	f7ff fc5a 	bl	8005c34 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fb fa72 	bl	8001868 <HAL_GetTick>
 8006384:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006388:	f7fb fa6e 	bl	8001868 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e211      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800639a:	f7ff fc67 	bl	8005c6c <LL_RCC_HSI_IsReady>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f1      	beq.n	8006388 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fc70 	bl	8005c8e <LL_RCC_HSI_SetCalibTrimming>
 80063ae:	e013      	b.n	80063d8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b0:	f7ff fc4e 	bl	8005c50 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b4:	f7fb fa58 	bl	8001868 <HAL_GetTick>
 80063b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063bc:	f7fb fa54 	bl	8001868 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e1f7      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80063ce:	f7ff fc4d 	bl	8005c6c <LL_RCC_HSI_IsReady>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f1      	bne.n	80063bc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d06e      	beq.n	80064c2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d056      	beq.n	800649a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80063ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69da      	ldr	r2, [r3, #28]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	429a      	cmp	r2, r3
 8006402:	d031      	beq.n	8006468 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d006      	beq.n	800641c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e1d0      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d013      	beq.n	800644e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8006426:	f7ff fc67 	bl	8005cf8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800642a:	f7fb fa1d 	bl	8001868 <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006432:	f7fb fa19 	bl	8001868 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b11      	cmp	r3, #17
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e1bc      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006444:	f7ff fc68 	bl	8005d18 <LL_RCC_LSI_IsReady>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f1      	bne.n	8006432 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800644e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006456:	f023 0210 	bic.w	r2, r3, #16
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006468:	f7ff fc36 	bl	8005cd8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800646c:	f7fb f9fc 	bl	8001868 <HAL_GetTick>
 8006470:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006472:	e00c      	b.n	800648e <HAL_RCC_OscConfig+0x3c2>
 8006474:	20000070 	.word	0x20000070
 8006478:	20000074 	.word	0x20000074
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800647c:	f7fb f9f4 	bl	8001868 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b11      	cmp	r3, #17
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e197      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800648e:	f7ff fc43 	bl	8005d18 <LL_RCC_LSI_IsReady>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f1      	beq.n	800647c <HAL_RCC_OscConfig+0x3b0>
 8006498:	e013      	b.n	80064c2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649a:	f7ff fc2d 	bl	8005cf8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800649e:	f7fb f9e3 	bl	8001868 <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a6:	f7fb f9df 	bl	8001868 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b11      	cmp	r3, #17
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e182      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80064b8:	f7ff fc2e 	bl	8005d18 <LL_RCC_LSI_IsReady>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f1      	bne.n	80064a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80d8 	beq.w	8006680 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064d0:	f7ff fb44 	bl	8005b5c <LL_PWR_IsEnabledBkUpAccess>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d113      	bne.n	8006502 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80064da:	f7ff f95d 	bl	8005798 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064de:	f7fb f9c3 	bl	8001868 <HAL_GetTick>
 80064e2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e6:	f7fb f9bf 	bl	8001868 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e162      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064f8:	f7ff fb30 	bl	8005b5c <LL_PWR_IsEnabledBkUpAccess>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f1      	beq.n	80064e6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d07b      	beq.n	8006602 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b85      	cmp	r3, #133	@ 0x85
 8006510:	d003      	beq.n	800651a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	2b05      	cmp	r3, #5
 8006518:	d109      	bne.n	800652e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800651a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006526:	f043 0304 	orr.w	r3, r3, #4
 800652a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652e:	f7fb f99b 	bl	8001868 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006548:	e00a      	b.n	8006560 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654a:	f7fb f98d 	bl	8001868 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006558:	4293      	cmp	r3, r2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e12e      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006560:	f7ff fba9 	bl	8005cb6 <LL_RCC_LSE_IsReady>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0ef      	beq.n	800654a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b81      	cmp	r3, #129	@ 0x81
 8006570:	d003      	beq.n	800657a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b85      	cmp	r3, #133	@ 0x85
 8006578:	d121      	bne.n	80065be <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657a:	f7fb f975 	bl	8001868 <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006588:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800658c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006594:	e00a      	b.n	80065ac <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fb f967 	bl	8001868 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e108      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ec      	beq.n	8006596 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80065bc:	e060      	b.n	8006680 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065be:	f7fb f953 	bl	8001868 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065d8:	e00a      	b.n	80065f0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fb f945 	bl	8001868 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0e6      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ec      	bne.n	80065da <HAL_RCC_OscConfig+0x50e>
 8006600:	e03e      	b.n	8006680 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006602:	f7fb f931 	bl	8001868 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800660c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fb f923 	bl	8001868 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0c4      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1ec      	bne.n	800661e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006644:	f7fb f910 	bl	8001868 <HAL_GetTick>
 8006648:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800664a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800665e:	e00a      	b.n	8006676 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006660:	f7fb f902 	bl	8001868 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e0a3      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006676:	f7ff fb1e 	bl	8005cb6 <LL_RCC_LSE_IsReady>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1ef      	bne.n	8006660 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8099 	beq.w	80067bc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2b0c      	cmp	r3, #12
 800668e:	d06c      	beq.n	800676a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	2b02      	cmp	r3, #2
 8006696:	d14b      	bne.n	8006730 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006698:	f7ff fc74 	bl	8005f84 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669c:	f7fb f8e4 	bl	8001868 <HAL_GetTick>
 80066a0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a4:	f7fb f8e0 	bl	8001868 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b0a      	cmp	r3, #10
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e083      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80066b6:	f7ff fc73 	bl	8005fa0 <LL_RCC_PLL_IsReady>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f1      	bne.n	80066a4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	4b40      	ldr	r3, [pc, #256]	@ (80067c8 <HAL_RCC_OscConfig+0x6fc>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066d2:	4311      	orrs	r1, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066d8:	0212      	lsls	r2, r2, #8
 80066da:	4311      	orrs	r1, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066e0:	4311      	orrs	r1, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80066e6:	4311      	orrs	r1, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80066ec:	430a      	orrs	r2, r1
 80066ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f6:	f7ff fc37 	bl	8005f68 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006708:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670a:	f7fb f8ad 	bl	8001868 <HAL_GetTick>
 800670e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006712:	f7fb f8a9 	bl	8001868 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b0a      	cmp	r3, #10
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e04c      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006724:	f7ff fc3c 	bl	8005fa0 <LL_RCC_PLL_IsReady>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f1      	beq.n	8006712 <HAL_RCC_OscConfig+0x646>
 800672e:	e045      	b.n	80067bc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006730:	f7ff fc28 	bl	8005f84 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006734:	f7fb f898 	bl	8001868 <HAL_GetTick>
 8006738:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673c:	f7fb f894 	bl	8001868 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b0a      	cmp	r3, #10
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e037      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800674e:	f7ff fc27 	bl	8005fa0 <LL_RCC_PLL_IsReady>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1f1      	bne.n	800673c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006762:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <HAL_RCC_OscConfig+0x700>)
 8006764:	4013      	ands	r3, r2
 8006766:	60cb      	str	r3, [r1, #12]
 8006768:	e028      	b.n	80067bc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e023      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f003 0203 	and.w	r2, r3, #3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006788:	429a      	cmp	r2, r3
 800678a:	d115      	bne.n	80067b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006796:	429a      	cmp	r2, r3
 8006798:	d10e      	bne.n	80067b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d106      	bne.n	80067b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	11c1808c 	.word	0x11c1808c
 80067cc:	eefefffc 	.word	0xeefefffc

080067d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e12c      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067e4:	4b98      	ldr	r3, [pc, #608]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d91b      	bls.n	800682a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f2:	4b95      	ldr	r3, [pc, #596]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f023 0207 	bic.w	r2, r3, #7
 80067fa:	4993      	ldr	r1, [pc, #588]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	4313      	orrs	r3, r2
 8006800:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006802:	f7fb f831 	bl	8001868 <HAL_GetTick>
 8006806:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006808:	e008      	b.n	800681c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800680a:	f7fb f82d 	bl	8001868 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e110      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800681c:	4b8a      	ldr	r3, [pc, #552]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d1ef      	bne.n	800680a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d016      	beq.n	8006864 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fb02 	bl	8005e44 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006840:	f7fb f812 	bl	8001868 <HAL_GetTick>
 8006844:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006848:	f7fb f80e 	bl	8001868 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e0f1      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800685a:	f7ff fbdf 	bl	800601c <LL_RCC_IsActiveFlag_HPRE>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f1      	beq.n	8006848 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d016      	beq.n	800689e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff faf8 	bl	8005e6a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800687a:	f7fa fff5 	bl	8001868 <HAL_GetTick>
 800687e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006882:	f7fa fff1 	bl	8001868 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e0d4      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006894:	f7ff fbd3 	bl	800603e <LL_RCC_IsActiveFlag_C2HPRE>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f1      	beq.n	8006882 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff faf0 	bl	8005e94 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068b4:	f7fa ffd8 	bl	8001868 <HAL_GetTick>
 80068b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068bc:	f7fa ffd4 	bl	8001868 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e0b7      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80068ce:	f7ff fbc8 	bl	8006062 <LL_RCC_IsActiveFlag_SHDHPRE>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0f1      	beq.n	80068bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d016      	beq.n	8006912 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fae9 	bl	8005ec0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068ee:	f7fa ffbb 	bl	8001868 <HAL_GetTick>
 80068f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068f6:	f7fa ffb7 	bl	8001868 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e09a      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006908:	f7ff fbbd 	bl	8006086 <LL_RCC_IsActiveFlag_PPRE1>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f1      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d017      	beq.n	800694e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff fade 	bl	8005ee6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800692a:	f7fa ff9d 	bl	8001868 <HAL_GetTick>
 800692e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006932:	f7fa ff99 	bl	8001868 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e07c      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006944:	f7ff fbb0 	bl	80060a8 <LL_RCC_IsActiveFlag_PPRE2>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f1      	beq.n	8006932 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d043      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d106      	bne.n	8006970 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006962:	f7ff f956 	bl	8005c12 <LL_RCC_HSE_IsReady>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d11e      	bne.n	80069aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e066      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b03      	cmp	r3, #3
 8006976:	d106      	bne.n	8006986 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006978:	f7ff fb12 	bl	8005fa0 <LL_RCC_PLL_IsReady>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d113      	bne.n	80069aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e05b      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800698e:	f7ff f9f0 	bl	8005d72 <LL_RCC_MSI_IsReady>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d108      	bne.n	80069aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e050      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800699c:	f7ff f966 	bl	8005c6c <LL_RCC_HSI_IsReady>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e049      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fa2a 	bl	8005e08 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069b4:	f7fa ff58 	bl	8001868 <HAL_GetTick>
 80069b8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069bc:	f7fa ff54 	bl	8001868 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e035      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d2:	f7ff fa2c 	bl	8005e2e <LL_RCC_GetSysClkSource>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	429a      	cmp	r2, r3
 80069e0:	d1ec      	bne.n	80069bc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069e2:	4b19      	ldr	r3, [pc, #100]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d21b      	bcs.n	8006a28 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f0:	4b15      	ldr	r3, [pc, #84]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f023 0207 	bic.w	r2, r3, #7
 80069f8:	4913      	ldr	r1, [pc, #76]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a00:	f7fa ff32 	bl	8001868 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a08:	f7fa ff2e 	bl	8001868 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e011      	b.n	8006a3e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <HAL_RCC_ClockConfig+0x278>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d1ef      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006a28:	f000 f8b4 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	4a07      	ldr	r2, [pc, #28]	@ (8006a4c <HAL_RCC_ClockConfig+0x27c>)
 8006a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8006a32:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <HAL_RCC_ClockConfig+0x280>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fa ff0c 	bl	8001854 <HAL_InitTick>
 8006a3c:	4603      	mov	r3, r0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	58004000 	.word	0x58004000
 8006a4c:	20000070 	.word	0x20000070
 8006a50:	20000074 	.word	0x20000074

08006a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a62:	f7ff f9e4 	bl	8005e2e <LL_RCC_GetSysClkSource>
 8006a66:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a68:	f7ff facd 	bl	8006006 <LL_RCC_PLL_GetMainSource>
 8006a6c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x2c>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d139      	bne.n	8006aee <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d136      	bne.n	8006aee <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006a80:	f7ff f987 	bl	8005d92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d115      	bne.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x62>
 8006a8a:	f7ff f982 	bl	8005d92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x4e>
 8006a94:	f7ff f98d 	bl	8005db2 <LL_RCC_MSI_GetRange>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	0a1b      	lsrs	r3, r3, #8
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	e005      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x5a>
 8006aa2:	f7ff f991 	bl	8005dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	0a1b      	lsrs	r3, r3, #8
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	4a36      	ldr	r2, [pc, #216]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x134>)
 8006ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab4:	e014      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x8c>
 8006ab6:	f7ff f96c 	bl	8005d92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_GetSysClockFreq+0x7a>
 8006ac0:	f7ff f977 	bl	8005db2 <LL_RCC_MSI_GetRange>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	091b      	lsrs	r3, r3, #4
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	e005      	b.n	8006ada <HAL_RCC_GetSysClockFreq+0x86>
 8006ace:	f7ff f97b 	bl	8005dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	4a2b      	ldr	r2, [pc, #172]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x134>)
 8006adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d115      	bne.n	8006b14 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006aec:	e012      	b.n	8006b14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d102      	bne.n	8006afa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006af4:	4b25      	ldr	r3, [pc, #148]	@ (8006b8c <HAL_RCC_GetSysClockFreq+0x138>)
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e00c      	b.n	8006b14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d109      	bne.n	8006b14 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006b00:	f7ff f85a 	bl	8005bb8 <LL_RCC_HSE_IsEnabledDiv2>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d102      	bne.n	8006b10 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006b0a:	4b20      	ldr	r3, [pc, #128]	@ (8006b8c <HAL_RCC_GetSysClockFreq+0x138>)
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	e001      	b.n	8006b14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006b10:	4b1f      	ldr	r3, [pc, #124]	@ (8006b90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b12:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b14:	f7ff f98b 	bl	8005e2e <LL_RCC_GetSysClkSource>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	d12f      	bne.n	8006b7e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006b1e:	f7ff fa72 	bl	8006006 <LL_RCC_PLL_GetMainSource>
 8006b22:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d003      	beq.n	8006b32 <HAL_RCC_GetSysClockFreq+0xde>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d003      	beq.n	8006b38 <HAL_RCC_GetSysClockFreq+0xe4>
 8006b30:	e00d      	b.n	8006b4e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006b32:	4b16      	ldr	r3, [pc, #88]	@ (8006b8c <HAL_RCC_GetSysClockFreq+0x138>)
 8006b34:	60fb      	str	r3, [r7, #12]
        break;
 8006b36:	e00d      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006b38:	f7ff f83e 	bl	8005bb8 <LL_RCC_HSE_IsEnabledDiv2>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d102      	bne.n	8006b48 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006b42:	4b12      	ldr	r3, [pc, #72]	@ (8006b8c <HAL_RCC_GetSysClockFreq+0x138>)
 8006b44:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006b46:	e005      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006b48:	4b11      	ldr	r3, [pc, #68]	@ (8006b90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b4a:	60fb      	str	r3, [r7, #12]
        break;
 8006b4c:	e002      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	60fb      	str	r3, [r7, #12]
        break;
 8006b52:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006b54:	f7ff fa35 	bl	8005fc2 <LL_RCC_PLL_GetN>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	fb03 f402 	mul.w	r4, r3, r2
 8006b60:	f7ff fa46 	bl	8005ff0 <LL_RCC_PLL_GetDivider>
 8006b64:	4603      	mov	r3, r0
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	3301      	adds	r3, #1
 8006b6a:	fbb4 f4f3 	udiv	r4, r4, r3
 8006b6e:	f7ff fa34 	bl	8005fda <LL_RCC_PLL_GetR>
 8006b72:	4603      	mov	r3, r0
 8006b74:	0f5b      	lsrs	r3, r3, #29
 8006b76:	3301      	adds	r3, #1
 8006b78:	fbb4 f3f3 	udiv	r3, r4, r3
 8006b7c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006b7e:	697b      	ldr	r3, [r7, #20]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd90      	pop	{r4, r7, pc}
 8006b88:	08021ad4 	.word	0x08021ad4
 8006b8c:	00f42400 	.word	0x00f42400
 8006b90:	01e84800 	.word	0x01e84800

08006b94 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b94:	b598      	push	{r3, r4, r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006b98:	f7ff ff5c 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	f7ff f9b5 	bl	8005f0c <LL_RCC_GetAHBPrescaler>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	091b      	lsrs	r3, r3, #4
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	4a03      	ldr	r2, [pc, #12]	@ (8006bb8 <HAL_RCC_GetHCLKFreq+0x24>)
 8006bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	bd98      	pop	{r3, r4, r7, pc}
 8006bb8:	08021a74 	.word	0x08021a74

08006bbc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bbc:	b598      	push	{r3, r4, r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006bc0:	f7ff ffe8 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	f7ff f9b9 	bl	8005f3c <LL_RCC_GetAPB1Prescaler>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	4a03      	ldr	r2, [pc, #12]	@ (8006bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd98      	pop	{r3, r4, r7, pc}
 8006bdc:	08021ab4 	.word	0x08021ab4

08006be0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006be0:	b598      	push	{r3, r4, r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006be4:	f7ff ffd6 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006be8:	4604      	mov	r4, r0
 8006bea:	f7ff f9b2 	bl	8005f52 <LL_RCC_GetAPB2Prescaler>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	0adb      	lsrs	r3, r3, #11
 8006bf2:	4a03      	ldr	r2, [pc, #12]	@ (8006c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd98      	pop	{r3, r4, r7, pc}
 8006c00:	08021ab4 	.word	0x08021ab4

08006c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	4a10      	ldr	r2, [pc, #64]	@ (8006c58 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006c1c:	f7ff f981 	bl	8005f22 <LL_RCC_GetAHB3Prescaler>
 8006c20:	4603      	mov	r3, r0
 8006c22:	091b      	lsrs	r3, r3, #4
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	4a0c      	ldr	r2, [pc, #48]	@ (8006c5c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c34:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3e:	0c9c      	lsrs	r4, r3, #18
 8006c40:	f7fe fe74 	bl	800592c <HAL_PWREx_GetVoltageRange>
 8006c44:	4603      	mov	r3, r0
 8006c46:	4619      	mov	r1, r3
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 f80b 	bl	8006c64 <RCC_SetFlashLatency>
 8006c4e:	4603      	mov	r3, r0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd90      	pop	{r4, r7, pc}
 8006c58:	08021ad4 	.word	0x08021ad4
 8006c5c:	08021a74 	.word	0x08021a74
 8006c60:	431bde83 	.word	0x431bde83

08006c64 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08e      	sub	sp, #56	@ 0x38
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8006d58 <RCC_SetFlashLatency+0xf4>)
 8006c70:	f107 0320 	add.w	r3, r7, #32
 8006c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c78:	6018      	str	r0, [r3, #0]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006c7e:	4a37      	ldr	r2, [pc, #220]	@ (8006d5c <RCC_SetFlashLatency+0xf8>)
 8006c80:	f107 0318 	add.w	r3, r7, #24
 8006c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c88:	6018      	str	r0, [r3, #0]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006c8e:	4a34      	ldr	r2, [pc, #208]	@ (8006d60 <RCC_SetFlashLatency+0xfc>)
 8006c90:	f107 030c 	add.w	r3, r7, #12
 8006c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca4:	d11b      	bne.n	8006cde <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006caa:	e014      	b.n	8006cd6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	3338      	adds	r3, #56	@ 0x38
 8006cb2:	443b      	add	r3, r7
 8006cb4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d807      	bhi.n	8006cd0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	3338      	adds	r3, #56	@ 0x38
 8006cc6:	443b      	add	r3, r7
 8006cc8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cce:	e021      	b.n	8006d14 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d9e7      	bls.n	8006cac <RCC_SetFlashLatency+0x48>
 8006cdc:	e01a      	b.n	8006d14 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006cde:	2300      	movs	r3, #0
 8006ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ce2:	e014      	b.n	8006d0e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	3338      	adds	r3, #56	@ 0x38
 8006cea:	443b      	add	r3, r7
 8006cec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d807      	bhi.n	8006d08 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	3338      	adds	r3, #56	@ 0x38
 8006cfe:	443b      	add	r3, r7
 8006d00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d06:	e005      	b.n	8006d14 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d9e7      	bls.n	8006ce4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d14:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <RCC_SetFlashLatency+0x100>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f023 0207 	bic.w	r2, r3, #7
 8006d1c:	4911      	ldr	r1, [pc, #68]	@ (8006d64 <RCC_SetFlashLatency+0x100>)
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d24:	f7fa fda0 	bl	8001868 <HAL_GetTick>
 8006d28:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006d2a:	e008      	b.n	8006d3e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006d2c:	f7fa fd9c 	bl	8001868 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e007      	b.n	8006d4e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006d3e:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <RCC_SetFlashLatency+0x100>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d1ef      	bne.n	8006d2c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3738      	adds	r7, #56	@ 0x38
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	0802153c 	.word	0x0802153c
 8006d5c:	08021544 	.word	0x08021544
 8006d60:	0802154c 	.word	0x0802154c
 8006d64:	58004000 	.word	0x58004000

08006d68 <LL_RCC_LSE_IsReady>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d101      	bne.n	8006d80 <LL_RCC_LSE_IsReady+0x18>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <LL_RCC_LSE_IsReady+0x1a>
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <LL_RCC_SetUSARTClockSource>:
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0c1b      	lsrs	r3, r3, #16
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	401a      	ands	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_SetI2SClockSource>:
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <LL_RCC_SetLPUARTClockSource>:
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006df8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr

08006e0e <LL_RCC_SetI2CClockSource>:
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006e26:	43db      	mvns	r3, r3
 8006e28:	401a      	ands	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006e32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <LL_RCC_SetLPTIMClockSource>:
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e52:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	401a      	ands	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <LL_RCC_SetRNGClockSource>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e88:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <LL_RCC_SetADCClockSource>:
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006eb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <LL_RCC_SetRTCClockSource>:
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr

08006ef6 <LL_RCC_GetRTCClockSource>:
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr

08006f0e <LL_RCC_ForceBackupDomainReset>:
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f26:	bf00      	nop
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr

08006f2e <LL_RCC_ReleaseBackupDomainReset>:
{
 8006f2e:	b480      	push	{r7}
 8006f30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f46:	bf00      	nop
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr
	...

08006f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006f60:	2300      	movs	r3, #0
 8006f62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d058      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006f70:	f7fe fc12 	bl	8005798 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f74:	f7fa fc78 	bl	8001868 <HAL_GetTick>
 8006f78:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f7a:	e009      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f7c:	f7fa fc74 	bl	8001868 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d902      	bls.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	74fb      	strb	r3, [r7, #19]
        break;
 8006f8e:	e006      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f90:	4b7b      	ldr	r3, [pc, #492]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9c:	d1ee      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006f9e:	7cfb      	ldrb	r3, [r7, #19]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d13c      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006fa4:	f7ff ffa7 	bl	8006ef6 <LL_RCC_GetRTCClockSource>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d00f      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fbe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fc0:	f7ff ffa5 	bl	8006f0e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fc4:	f7ff ffb3 	bl	8006f2e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d014      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fa fc44 	bl	8001868 <HAL_GetTick>
 8006fe0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006fe2:	e00b      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe4:	f7fa fc40 	bl	8001868 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d902      	bls.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	74fb      	strb	r3, [r7, #19]
            break;
 8006ffa:	e004      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006ffc:	f7ff feb4 	bl	8006d68 <LL_RCC_LSE_IsReady>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d1ee      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007006:	7cfb      	ldrb	r3, [r7, #19]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ff5b 	bl	8006ecc <LL_RCC_SetRTCClockSource>
 8007016:	e004      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007018:	7cfb      	ldrb	r3, [r7, #19]
 800701a:	74bb      	strb	r3, [r7, #18]
 800701c:	e001      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	7cfb      	ldrb	r3, [r7, #19]
 8007020:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fea9 	bl	8006d8a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fe9e 	bl	8006d8a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff fec0 	bl	8006de4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff fee6 	bl	8006e46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fedb 	bl	8006e46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fed0 	bl	8006e46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fea9 	bl	8006e0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fe9e 	bl	8006e0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff fe93 	bl	8006e0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d011      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fe5e 	bl	8006dba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007106:	d107      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007116:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fea5 	bl	8006e78 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007132:	2b00      	cmp	r3, #0
 8007134:	d107      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007140:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007144:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d011      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fea3 	bl	8006ea2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007164:	d107      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007174:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007176:	7cbb      	ldrb	r3, [r7, #18]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	58000400 	.word	0x58000400

08007184 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d071      	beq.n	800727a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fa f972 	bl	8001494 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80071b8:	4b32      	ldr	r3, [pc, #200]	@ (8007284 <HAL_RTC_Init+0x100>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d051      	beq.n	8007268 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007284 <HAL_RTC_Init+0x100>)
 80071c6:	22ca      	movs	r2, #202	@ 0xca
 80071c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80071ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007284 <HAL_RTC_Init+0x100>)
 80071cc:	2253      	movs	r2, #83	@ 0x53
 80071ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fb9d 	bl	8007910 <RTC_EnterInitMode>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d13f      	bne.n	8007260 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80071e0:	4b28      	ldr	r3, [pc, #160]	@ (8007284 <HAL_RTC_Init+0x100>)
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	4a27      	ldr	r2, [pc, #156]	@ (8007284 <HAL_RTC_Init+0x100>)
 80071e6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80071ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ee:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80071f0:	4b24      	ldr	r3, [pc, #144]	@ (8007284 <HAL_RTC_Init+0x100>)
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6859      	ldr	r1, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	4319      	orrs	r1, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	430b      	orrs	r3, r1
 8007204:	491f      	ldr	r1, [pc, #124]	@ (8007284 <HAL_RTC_Init+0x100>)
 8007206:	4313      	orrs	r3, r2
 8007208:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	491b      	ldr	r1, [pc, #108]	@ (8007284 <HAL_RTC_Init+0x100>)
 8007216:	4313      	orrs	r3, r2
 8007218:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800721a:	4b1a      	ldr	r3, [pc, #104]	@ (8007284 <HAL_RTC_Init+0x100>)
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	430b      	orrs	r3, r1
 800722c:	4915      	ldr	r1, [pc, #84]	@ (8007284 <HAL_RTC_Init+0x100>)
 800722e:	4313      	orrs	r3, r2
 8007230:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fba0 	bl	8007978 <RTC_ExitInitMode>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10e      	bne.n	8007260 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007242:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <HAL_RTC_Init+0x100>)
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a19      	ldr	r1, [r3, #32]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	4319      	orrs	r1, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	430b      	orrs	r3, r1
 800725a:	490a      	ldr	r1, [pc, #40]	@ (8007284 <HAL_RTC_Init+0x100>)
 800725c:	4313      	orrs	r3, r2
 800725e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007260:	4b08      	ldr	r3, [pc, #32]	@ (8007284 <HAL_RTC_Init+0x100>)
 8007262:	22ff      	movs	r2, #255	@ 0xff
 8007264:	625a      	str	r2, [r3, #36]	@ 0x24
 8007266:	e001      	b.n	800726c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d103      	bne.n	800727a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40002800 	.word	0x40002800

08007288 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_RTC_SetTime+0x1a>
 800729e:	2302      	movs	r3, #2
 80072a0:	e088      	b.n	80073b4 <HAL_RTC_SetTime+0x12c>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072b2:	4b42      	ldr	r3, [pc, #264]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 80072b4:	22ca      	movs	r2, #202	@ 0xca
 80072b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80072b8:	4b40      	ldr	r3, [pc, #256]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 80072ba:	2253      	movs	r2, #83	@ 0x53
 80072bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fb26 	bl	8007910 <RTC_EnterInitMode>
 80072c4:	4603      	mov	r3, r0
 80072c6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80072c8:	7cfb      	ldrb	r3, [r7, #19]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d15e      	bne.n	800738c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80072ce:	4b3b      	ldr	r3, [pc, #236]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072da:	d057      	beq.n	800738c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d125      	bne.n	800732e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80072e2:	4b36      	ldr	r3, [pc, #216]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2200      	movs	r2, #0
 80072f2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fb7b 	bl	80079f4 <RTC_ByteToBcd2>
 80072fe:	4603      	mov	r3, r0
 8007300:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fb74 	bl	80079f4 <RTC_ByteToBcd2>
 800730c:	4603      	mov	r3, r0
 800730e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007310:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	789b      	ldrb	r3, [r3, #2]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fb6c 	bl	80079f4 <RTC_ByteToBcd2>
 800731c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800731e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	78db      	ldrb	r3, [r3, #3]
 8007326:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e017      	b.n	800735e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800732e:	4b23      	ldr	r3, [pc, #140]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2200      	movs	r2, #0
 800733e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800734c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007352:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	78db      	ldrb	r3, [r3, #3]
 8007358:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800735e:	4a17      	ldr	r2, [pc, #92]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007366:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800736a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800736c:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	4a12      	ldr	r2, [pc, #72]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 8007372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007376:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8007378:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	68d9      	ldr	r1, [r3, #12]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	430b      	orrs	r3, r1
 8007386:	490d      	ldr	r1, [pc, #52]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 8007388:	4313      	orrs	r3, r2
 800738a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 faf3 	bl	8007978 <RTC_ExitInitMode>
 8007392:	4603      	mov	r3, r0
 8007394:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007396:	4b09      	ldr	r3, [pc, #36]	@ (80073bc <HAL_RTC_SetTime+0x134>)
 8007398:	22ff      	movs	r2, #255	@ 0xff
 800739a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800739c:	7cfb      	ldrb	r3, [r7, #19]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 80073b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd90      	pop	{r4, r7, pc}
 80073bc:	40002800 	.word	0x40002800

080073c0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80073cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007480 <HAL_RTC_GetTime+0xc0>)
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80073d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007480 <HAL_RTC_GetTime+0xc0>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073e0:	d049      	beq.n	8007476 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80073e2:	4b27      	ldr	r3, [pc, #156]	@ (8007480 <HAL_RTC_GetTime+0xc0>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80073ee:	4b24      	ldr	r3, [pc, #144]	@ (8007480 <HAL_RTC_GetTime+0xc0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80073f6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80073fa:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	b2db      	uxtb	r3, r3
 8007402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007406:	b2da      	uxtb	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007416:	b2da      	uxtb	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007424:	b2da      	uxtb	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	0d9b      	lsrs	r3, r3, #22
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d11a      	bne.n	8007476 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 faf4 	bl	8007a32 <RTC_Bcd2ToByte>
 800744a:	4603      	mov	r3, r0
 800744c:	461a      	mov	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 faeb 	bl	8007a32 <RTC_Bcd2ToByte>
 800745c:	4603      	mov	r3, r0
 800745e:	461a      	mov	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	789b      	ldrb	r3, [r3, #2]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fae2 	bl	8007a32 <RTC_Bcd2ToByte>
 800746e:	4603      	mov	r3, r0
 8007470:	461a      	mov	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40002800 	.word	0x40002800

08007484 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007484:	b590      	push	{r4, r7, lr}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_RTC_SetDate+0x1a>
 800749a:	2302      	movs	r3, #2
 800749c:	e071      	b.n	8007582 <HAL_RTC_SetDate+0xfe>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2202      	movs	r2, #2
 80074aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10e      	bne.n	80074d2 <HAL_RTC_SetDate+0x4e>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	f023 0310 	bic.w	r3, r3, #16
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	330a      	adds	r3, #10
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d11c      	bne.n	8007512 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	78db      	ldrb	r3, [r3, #3]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fa89 	bl	80079f4 <RTC_ByteToBcd2>
 80074e2:	4603      	mov	r3, r0
 80074e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	785b      	ldrb	r3, [r3, #1]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fa82 	bl	80079f4 <RTC_ByteToBcd2>
 80074f0:	4603      	mov	r3, r0
 80074f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80074f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	789b      	ldrb	r3, [r3, #2]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fa7a 	bl	80079f4 <RTC_ByteToBcd2>
 8007500:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007502:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e00e      	b.n	8007530 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	78db      	ldrb	r3, [r3, #3]
 8007516:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800751e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007524:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007530:	4b16      	ldr	r3, [pc, #88]	@ (800758c <HAL_RTC_SetDate+0x108>)
 8007532:	22ca      	movs	r2, #202	@ 0xca
 8007534:	625a      	str	r2, [r3, #36]	@ 0x24
 8007536:	4b15      	ldr	r3, [pc, #84]	@ (800758c <HAL_RTC_SetDate+0x108>)
 8007538:	2253      	movs	r2, #83	@ 0x53
 800753a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f9e7 	bl	8007910 <RTC_EnterInitMode>
 8007542:	4603      	mov	r3, r0
 8007544:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007546:	7cfb      	ldrb	r3, [r7, #19]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800754c:	4a0f      	ldr	r2, [pc, #60]	@ (800758c <HAL_RTC_SetDate+0x108>)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007554:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007558:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fa0c 	bl	8007978 <RTC_ExitInitMode>
 8007560:	4603      	mov	r3, r0
 8007562:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007564:	4b09      	ldr	r3, [pc, #36]	@ (800758c <HAL_RTC_SetDate+0x108>)
 8007566:	22ff      	movs	r2, #255	@ 0xff
 8007568:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800756a:	7cfb      	ldrb	r3, [r7, #19]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8007580:	7cfb      	ldrb	r3, [r7, #19]
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}
 800758a:	bf00      	nop
 800758c:	40002800 	.word	0x40002800

08007590 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_RTC_SetAlarm_IT+0x1e>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e0f3      	b.n	8007796 <HAL_RTC_SetAlarm_IT+0x206>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80075be:	4b78      	ldr	r3, [pc, #480]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075c6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ce:	d06a      	beq.n	80076a6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d13a      	bne.n	800764c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80075d6:	4b72      	ldr	r3, [pc, #456]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d102      	bne.n	80075e8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2200      	movs	r2, #0
 80075e6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f9fd 	bl	80079f4 <RTC_ByteToBcd2>
 80075fa:	4603      	mov	r3, r0
 80075fc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f9f6 	bl	80079f4 <RTC_ByteToBcd2>
 8007608:	4603      	mov	r3, r0
 800760a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800760c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	789b      	ldrb	r3, [r3, #2]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f9ee 	bl	80079f4 <RTC_ByteToBcd2>
 8007618:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800761a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	78db      	ldrb	r3, [r3, #3]
 8007622:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007624:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f9e0 	bl	80079f4 <RTC_ByteToBcd2>
 8007634:	4603      	mov	r3, r0
 8007636:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007638:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007640:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e02c      	b.n	80076a6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007654:	d00d      	beq.n	8007672 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800765e:	d008      	beq.n	8007672 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007660:	4b4f      	ldr	r3, [pc, #316]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800767e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007684:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	78db      	ldrb	r3, [r3, #3]
 800768a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800768c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007694:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007696:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800769c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076a6:	4b3e      	ldr	r3, [pc, #248]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076a8:	22ca      	movs	r2, #202	@ 0xca
 80076aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80076ac:	4b3c      	ldr	r3, [pc, #240]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076ae:	2253      	movs	r2, #83	@ 0x53
 80076b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ba:	d12c      	bne.n	8007716 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80076bc:	4b38      	ldr	r3, [pc, #224]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	4a37      	ldr	r2, [pc, #220]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80076c6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80076c8:	4b35      	ldr	r3, [pc, #212]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d4:	d107      	bne.n	80076e6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	4930      	ldr	r1, [pc, #192]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	644b      	str	r3, [r1, #68]	@ 0x44
 80076e4:	e006      	b.n	80076f4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80076e6:	4a2e      	ldr	r2, [pc, #184]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80076ec:	4a2c      	ldr	r2, [pc, #176]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80076f4:	4a2a      	ldr	r2, [pc, #168]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007700:	f043 0201 	orr.w	r2, r3, #1
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007708:	4b25      	ldr	r3, [pc, #148]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	4a24      	ldr	r2, [pc, #144]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 800770e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8007712:	6193      	str	r3, [r2, #24]
 8007714:	e02b      	b.n	800776e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007716:	4b22      	ldr	r3, [pc, #136]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	4a21      	ldr	r2, [pc, #132]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 800771c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007720:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007722:	4b1f      	ldr	r3, [pc, #124]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007724:	2202      	movs	r2, #2
 8007726:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800772e:	d107      	bne.n	8007740 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	4919      	ldr	r1, [pc, #100]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 800773a:	4313      	orrs	r3, r2
 800773c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800773e:	e006      	b.n	800774e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007740:	4a17      	ldr	r2, [pc, #92]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007746:	4a16      	ldr	r2, [pc, #88]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800774e:	4a14      	ldr	r2, [pc, #80]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775a:	f043 0202 	orr.w	r2, r3, #2
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007762:	4b0f      	ldr	r3, [pc, #60]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	4a0e      	ldr	r2, [pc, #56]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007768:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800776c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800776e:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <HAL_RTC_SetAlarm_IT+0x214>)
 8007770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007774:	4a0b      	ldr	r2, [pc, #44]	@ (80077a4 <HAL_RTC_SetAlarm_IT+0x214>)
 8007776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800777a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800777e:	4b08      	ldr	r3, [pc, #32]	@ (80077a0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007780:	22ff      	movs	r2, #255	@ 0xff
 8007782:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	bd90      	pop	{r4, r7, pc}
 800779e:	bf00      	nop
 80077a0:	40002800 	.word	0x40002800
 80077a4:	58000800 	.word	0x58000800

080077a8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_RTC_DeactivateAlarm+0x18>
 80077bc:	2302      	movs	r3, #2
 80077be:	e048      	b.n	8007852 <HAL_RTC_DeactivateAlarm+0xaa>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077d0:	4b22      	ldr	r3, [pc, #136]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 80077d2:	22ca      	movs	r2, #202	@ 0xca
 80077d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80077d6:	4b21      	ldr	r3, [pc, #132]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 80077d8:	2253      	movs	r2, #83	@ 0x53
 80077da:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e2:	d115      	bne.n	8007810 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80077e4:	4b1d      	ldr	r3, [pc, #116]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	4a1c      	ldr	r2, [pc, #112]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 80077ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80077ee:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80077f0:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 80077f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f4:	4a19      	ldr	r2, [pc, #100]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 80077f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077fa:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	f023 0201 	bic.w	r2, r3, #1
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007808:	4b14      	ldr	r3, [pc, #80]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 800780a:	2201      	movs	r2, #1
 800780c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800780e:	e014      	b.n	800783a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007810:	4b12      	ldr	r3, [pc, #72]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	4a11      	ldr	r2, [pc, #68]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 8007816:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800781a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800781c:	4b0f      	ldr	r3, [pc, #60]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 800781e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007820:	4a0e      	ldr	r2, [pc, #56]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 8007822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007826:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782c:	f023 0202 	bic.w	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007834:	4b09      	ldr	r3, [pc, #36]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 8007836:	2202      	movs	r2, #2
 8007838:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800783a:	4b08      	ldr	r3, [pc, #32]	@ (800785c <HAL_RTC_DeactivateAlarm+0xb4>)
 800783c:	22ff      	movs	r2, #255	@ 0xff
 800783e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	bc80      	pop	{r7}
 800785a:	4770      	bx	lr
 800785c:	40002800 	.word	0x40002800

08007860 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	cnt++;
 8007868:	4b14      	ldr	r3, [pc, #80]	@ (80078bc <HAL_RTC_AlarmIRQHandler+0x5c>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	b2da      	uxtb	r2, r3
 8007870:	4b12      	ldr	r3, [pc, #72]	@ (80078bc <HAL_RTC_AlarmIRQHandler+0x5c>)
 8007872:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007874:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <HAL_RTC_AlarmIRQHandler+0x60>)
 8007876:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787c:	4013      	ands	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_RTC_AlarmIRQHandler+0x36>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800788a:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <HAL_RTC_AlarmIRQHandler+0x60>)
 800788c:	2201      	movs	r2, #1
 800788e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f014 fe6f 	bl	801c574 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <HAL_RTC_AlarmIRQHandler+0x4c>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80078a0:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <HAL_RTC_AlarmIRQHandler+0x60>)
 80078a2:	2202      	movs	r2, #2
 80078a4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f014 fe90 	bl	801c5cc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	200009ac 	.word	0x200009ac
 80078c0:	40002800 	.word	0x40002800

080078c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80078cc:	4b0f      	ldr	r3, [pc, #60]	@ (800790c <HAL_RTC_WaitForSynchro+0x48>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	4a0e      	ldr	r2, [pc, #56]	@ (800790c <HAL_RTC_WaitForSynchro+0x48>)
 80078d2:	f023 0320 	bic.w	r3, r3, #32
 80078d6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80078d8:	f7f9 ffc6 	bl	8001868 <HAL_GetTick>
 80078dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80078de:	e009      	b.n	80078f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078e0:	f7f9 ffc2 	bl	8001868 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078ee:	d901      	bls.n	80078f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e006      	b.n	8007902 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80078f4:	4b05      	ldr	r3, [pc, #20]	@ (800790c <HAL_RTC_WaitForSynchro+0x48>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0ef      	beq.n	80078e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40002800 	.word	0x40002800

08007910 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800791c:	4b15      	ldr	r3, [pc, #84]	@ (8007974 <RTC_EnterInitMode+0x64>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d120      	bne.n	800796a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007928:	4b12      	ldr	r3, [pc, #72]	@ (8007974 <RTC_EnterInitMode+0x64>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4a11      	ldr	r2, [pc, #68]	@ (8007974 <RTC_EnterInitMode+0x64>)
 800792e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007932:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007934:	f7f9 ff98 	bl	8001868 <HAL_GetTick>
 8007938:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800793a:	e00d      	b.n	8007958 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800793c:	f7f9 ff94 	bl	8001868 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800794a:	d905      	bls.n	8007958 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2203      	movs	r2, #3
 8007954:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007958:	4b06      	ldr	r3, [pc, #24]	@ (8007974 <RTC_EnterInitMode+0x64>)
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007960:	2b00      	cmp	r3, #0
 8007962:	d102      	bne.n	800796a <RTC_EnterInitMode+0x5a>
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d1e8      	bne.n	800793c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40002800 	.word	0x40002800

08007978 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007984:	4b1a      	ldr	r3, [pc, #104]	@ (80079f0 <RTC_ExitInitMode+0x78>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4a19      	ldr	r2, [pc, #100]	@ (80079f0 <RTC_ExitInitMode+0x78>)
 800798a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800798e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007990:	4b17      	ldr	r3, [pc, #92]	@ (80079f0 <RTC_ExitInitMode+0x78>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10c      	bne.n	80079b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff ff91 	bl	80078c4 <HAL_RTC_WaitForSynchro>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01e      	beq.n	80079e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2203      	movs	r2, #3
 80079ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	e017      	b.n	80079e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079b6:	4b0e      	ldr	r3, [pc, #56]	@ (80079f0 <RTC_ExitInitMode+0x78>)
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	4a0d      	ldr	r2, [pc, #52]	@ (80079f0 <RTC_ExitInitMode+0x78>)
 80079bc:	f023 0320 	bic.w	r3, r3, #32
 80079c0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff ff7e 	bl	80078c4 <HAL_RTC_WaitForSynchro>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079da:	4b05      	ldr	r3, [pc, #20]	@ (80079f0 <RTC_ExitInitMode+0x78>)
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	4a04      	ldr	r2, [pc, #16]	@ (80079f0 <RTC_ExitInitMode+0x78>)
 80079e0:	f043 0320 	orr.w	r3, r3, #32
 80079e4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	40002800 	.word	0x40002800

080079f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007a06:	e005      	b.n	8007a14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	3b0a      	subs	r3, #10
 8007a12:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	2b09      	cmp	r3, #9
 8007a18:	d8f6      	bhi.n	8007a08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b2db      	uxtb	r3, r3
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	4603      	mov	r3, r0
 8007a3a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	f003 030f 	and.w	r3, r3, #15
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	b2db      	uxtb	r3, r3
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_RTCEx_EnableBypassShadow+0x16>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e01f      	b.n	8007abe <HAL_RTCEx_EnableBypassShadow+0x56>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007a90:	22ca      	movs	r2, #202	@ 0xca
 8007a92:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a94:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007a96:	2253      	movs	r2, #83	@ 0x53
 8007a98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007aa0:	f043 0320 	orr.w	r3, r3, #32
 8007aa4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa6:	4b08      	ldr	r3, [pc, #32]	@ (8007ac8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007aa8:	22ff      	movs	r2, #255	@ 0xff
 8007aaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr
 8007ac8:	40002800 	.word	0x40002800

08007acc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007ad4:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007ae2:	2240      	movs	r2, #64	@ 0x40
 8007ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fa f931 	bl	8001d4e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40002800 	.word	0x40002800

08007b00 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007b0c:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <HAL_RTCEx_BKUPWrite+0x2c>)
 8007b0e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4413      	add	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	4000b100 	.word	0x4000b100

08007b30 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007b3a:	4b07      	ldr	r3, [pc, #28]	@ (8007b58 <HAL_RTCEx_BKUPRead+0x28>)
 8007b3c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	4000b100 	.word	0x4000b100

08007b5c <LL_PWR_SetRadioBusyTrigger>:
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007b64:	4b06      	ldr	r3, [pc, #24]	@ (8007b80 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b6c:	4904      	ldr	r1, [pc, #16]	@ (8007b80 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	608b      	str	r3, [r1, #8]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	58000400 	.word	0x58000400

08007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007b88:	4b05      	ldr	r3, [pc, #20]	@ (8007ba0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8e:	4a04      	ldr	r2, [pc, #16]	@ (8007ba0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007b98:	bf00      	nop
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bc80      	pop	{r7}
 8007b9e:	4770      	bx	lr
 8007ba0:	58000400 	.word	0x58000400

08007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007ba8:	4b05      	ldr	r3, [pc, #20]	@ (8007bc0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bae:	4a04      	ldr	r2, [pc, #16]	@ (8007bc0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007bb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007bb8:	bf00      	nop
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bc80      	pop	{r7}
 8007bbe:	4770      	bx	lr
 8007bc0:	58000400 	.word	0x58000400

08007bc4 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007bc8:	4b03      	ldr	r3, [pc, #12]	@ (8007bd8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007bca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bce:	619a      	str	r2, [r3, #24]
}
 8007bd0:	bf00      	nop
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr
 8007bd8:	58000400 	.word	0x58000400

08007bdc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007be0:	4b06      	ldr	r3, [pc, #24]	@ (8007bfc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d101      	bne.n	8007bf0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e000      	b.n	8007bf2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	58000400 	.word	0x58000400

08007c00 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007c04:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d101      	bne.n	8007c14 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	58000400 	.word	0x58000400

08007c24 <LL_RCC_RF_DisableReset>:
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007c3c:	bf00      	nop
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <LL_RCC_IsRFUnderReset>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c58:	d101      	bne.n	8007c5e <LL_RCC_IsRFUnderReset+0x1a>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e000      	b.n	8007c60 <LL_RCC_IsRFUnderReset+0x1c>
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr

08007c68 <LL_EXTI_EnableIT_32_63>:
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007c70:	4b06      	ldr	r3, [pc, #24]	@ (8007c8c <LL_EXTI_EnableIT_32_63+0x24>)
 8007c72:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007c76:	4905      	ldr	r1, [pc, #20]	@ (8007c8c <LL_EXTI_EnableIT_32_63+0x24>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	58000800 	.word	0x58000800

08007c90 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
    return status;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	e052      	b.n	8007d4c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	799b      	ldrb	r3, [r3, #6]
 8007cae:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_SUBGHZ_Init+0x2c>
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d109      	bne.n	8007cd0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7f9 fd2e 	bl	8001724 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007cc8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007ccc:	f7ff ffcc 	bl	8007c68 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d126      	bne.n	8007d24 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8007cdc:	f7ff ffa2 	bl	8007c24 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d54 <HAL_SUBGHZ_Init+0xc4>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	0cdb      	lsrs	r3, r3, #19
 8007cee:	2264      	movs	r2, #100	@ 0x64
 8007cf0:	fb02 f303 	mul.w	r3, r2, r3
 8007cf4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d105      	bne.n	8007d08 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	609a      	str	r2, [r3, #8]
        break;
 8007d06:	e007      	b.n	8007d18 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007d0e:	f7ff ff99 	bl	8007c44 <LL_RCC_IsRFUnderReset>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1ee      	bne.n	8007cf6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d18:	f7ff ff34 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007d1c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007d20:	f7ff ff1c 	bl	8007b5c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007d24:	f7ff ff4e 	bl	8007bc4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 fab6 	bl	80082a4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	719a      	strb	r2, [r3, #6]

  return status;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000070 	.word	0x20000070

08007d58 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	607a      	str	r2, [r7, #4]
 8007d62:	461a      	mov	r2, r3
 8007d64:	460b      	mov	r3, r1
 8007d66:	817b      	strh	r3, [r7, #10]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	799b      	ldrb	r3, [r3, #6]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d14a      	bne.n	8007e0c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	795b      	ldrb	r3, [r3, #5]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e045      	b.n	8007e0e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fb56 	bl	8008440 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d94:	f7ff ff06 	bl	8007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007d98:	210d      	movs	r1, #13
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 faa2 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007da0:	897b      	ldrh	r3, [r7, #10]
 8007da2:	0a1b      	lsrs	r3, r3, #8
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fa9a 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007db0:	897b      	ldrh	r3, [r7, #10]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fa94 	bl	80082e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	82bb      	strh	r3, [r7, #20]
 8007dc0:	e00a      	b.n	8007dd8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007dc2:	8abb      	ldrh	r3, [r7, #20]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fa89 	bl	80082e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007dd2:	8abb      	ldrh	r3, [r7, #20]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	82bb      	strh	r3, [r7, #20]
 8007dd8:	8aba      	ldrh	r2, [r7, #20]
 8007dda:	893b      	ldrh	r3, [r7, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d3f0      	bcc.n	8007dc2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007de0:	f7ff fed0 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 fb4f 	bl	8008488 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]
 8007df6:	e001      	b.n	8007dfc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	715a      	strb	r2, [r3, #5]

    return status;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	e000      	b.n	8007e0e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
  }
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b088      	sub	sp, #32
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	461a      	mov	r2, r3
 8007e22:	460b      	mov	r3, r1
 8007e24:	817b      	strh	r3, [r7, #10]
 8007e26:	4613      	mov	r3, r2
 8007e28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	799b      	ldrb	r3, [r3, #6]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d14a      	bne.n	8007ece <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	795b      	ldrb	r3, [r3, #5]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e045      	b.n	8007ed0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 faf8 	bl	8008440 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007e50:	f7ff fea8 	bl	8007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007e54:	211d      	movs	r1, #29
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 fa44 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007e5c:	897b      	ldrh	r3, [r7, #10]
 8007e5e:	0a1b      	lsrs	r3, r3, #8
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	4619      	mov	r1, r3
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 fa3c 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007e6c:	897b      	ldrh	r3, [r7, #10]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	4619      	mov	r1, r3
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fa36 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007e78:	2100      	movs	r1, #0
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fa32 	bl	80082e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	82fb      	strh	r3, [r7, #22]
 8007e84:	e009      	b.n	8007e9a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007e86:	69b9      	ldr	r1, [r7, #24]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 fa81 	bl	8008390 <SUBGHZSPI_Receive>
      pData++;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	3301      	adds	r3, #1
 8007e92:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007e94:	8afb      	ldrh	r3, [r7, #22]
 8007e96:	3301      	adds	r3, #1
 8007e98:	82fb      	strh	r3, [r7, #22]
 8007e9a:	8afa      	ldrh	r2, [r7, #22]
 8007e9c:	893b      	ldrh	r3, [r7, #8]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d3f1      	bcc.n	8007e86 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ea2:	f7ff fe6f 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 faee 	bl	8008488 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e001      	b.n	8007ebe <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	715a      	strb	r2, [r3, #5]

    return status;
 8007eca:	7ffb      	ldrb	r3, [r7, #31]
 8007ecc:	e000      	b.n	8007ed0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007ece:	2302      	movs	r3, #2
  }
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	72fb      	strb	r3, [r7, #11]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	799b      	ldrb	r3, [r3, #6]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d14a      	bne.n	8007f8c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	795b      	ldrb	r3, [r3, #5]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e045      	b.n	8007f8e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 fa99 	bl	8008440 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007f0e:	7afb      	ldrb	r3, [r7, #11]
 8007f10:	2b84      	cmp	r3, #132	@ 0x84
 8007f12:	d002      	beq.n	8007f1a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	2b94      	cmp	r3, #148	@ 0x94
 8007f18:	d103      	bne.n	8007f22 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	711a      	strb	r2, [r3, #4]
 8007f20:	e002      	b.n	8007f28 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007f28:	f7ff fe3c 	bl	8007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f9d7 	bl	80082e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	82bb      	strh	r3, [r7, #20]
 8007f3a:	e00a      	b.n	8007f52 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007f3c:	8abb      	ldrh	r3, [r7, #20]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	4413      	add	r3, r2
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f9cc 	bl	80082e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007f4c:	8abb      	ldrh	r3, [r7, #20]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	82bb      	strh	r3, [r7, #20]
 8007f52:	8aba      	ldrh	r2, [r7, #20]
 8007f54:	893b      	ldrh	r3, [r7, #8]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d3f0      	bcc.n	8007f3c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007f5a:	f7ff fe13 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	2b84      	cmp	r3, #132	@ 0x84
 8007f62:	d002      	beq.n	8007f6a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 fa8f 	bl	8008488 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]
 8007f76:	e001      	b.n	8007f7c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	715a      	strb	r2, [r3, #5]

    return status;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	e000      	b.n	8007f8e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
  }
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b088      	sub	sp, #32
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	72fb      	strb	r3, [r7, #11]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	799b      	ldrb	r3, [r3, #6]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d13d      	bne.n	8008034 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	795b      	ldrb	r3, [r3, #5]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e038      	b.n	8008036 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fa38 	bl	8008440 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007fd0:	f7ff fde8 	bl	8007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f983 	bl	80082e4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007fde:	2100      	movs	r1, #0
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f97f 	bl	80082e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	82fb      	strh	r3, [r7, #22]
 8007fea:	e009      	b.n	8008000 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007fec:	69b9      	ldr	r1, [r7, #24]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f9ce 	bl	8008390 <SUBGHZSPI_Receive>
      pData++;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ffa:	8afb      	ldrh	r3, [r7, #22]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	82fb      	strh	r3, [r7, #22]
 8008000:	8afa      	ldrh	r2, [r7, #22]
 8008002:	893b      	ldrh	r3, [r7, #8]
 8008004:	429a      	cmp	r2, r3
 8008006:	d3f1      	bcc.n	8007fec <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008008:	f7ff fdbc 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fa3b 	bl	8008488 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	77fb      	strb	r3, [r7, #31]
 800801e:	e001      	b.n	8008024 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	715a      	strb	r2, [r3, #5]

    return status;
 8008030:	7ffb      	ldrb	r3, [r7, #31]
 8008032:	e000      	b.n	8008036 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008034:	2302      	movs	r3, #2
  }
}
 8008036:	4618      	mov	r0, r3
 8008038:	3720      	adds	r7, #32
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b086      	sub	sp, #24
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	461a      	mov	r2, r3
 800804a:	460b      	mov	r3, r1
 800804c:	72fb      	strb	r3, [r7, #11]
 800804e:	4613      	mov	r3, r2
 8008050:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	799b      	ldrb	r3, [r3, #6]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d13e      	bne.n	80080da <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	795b      	ldrb	r3, [r3, #5]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d101      	bne.n	8008068 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008064:	2302      	movs	r3, #2
 8008066:	e039      	b.n	80080dc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f9e6 	bl	8008440 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008074:	f7ff fd96 	bl	8007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008078:	210e      	movs	r1, #14
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f932 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008080:	7afb      	ldrb	r3, [r7, #11]
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f92d 	bl	80082e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800808a:	2300      	movs	r3, #0
 800808c:	82bb      	strh	r3, [r7, #20]
 800808e:	e00a      	b.n	80080a6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008090:	8abb      	ldrh	r3, [r7, #20]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4413      	add	r3, r2
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f922 	bl	80082e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80080a0:	8abb      	ldrh	r3, [r7, #20]
 80080a2:	3301      	adds	r3, #1
 80080a4:	82bb      	strh	r3, [r7, #20]
 80080a6:	8aba      	ldrh	r2, [r7, #20]
 80080a8:	893b      	ldrh	r3, [r7, #8]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d3f0      	bcc.n	8008090 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80080ae:	f7ff fd69 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f9e8 	bl	8008488 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	75fb      	strb	r3, [r7, #23]
 80080c4:	e001      	b.n	80080ca <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	715a      	strb	r2, [r3, #5]

    return status;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	e000      	b.n	80080dc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80080da:	2302      	movs	r3, #2
  }
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	461a      	mov	r2, r3
 80080f0:	460b      	mov	r3, r1
 80080f2:	72fb      	strb	r3, [r7, #11]
 80080f4:	4613      	mov	r3, r2
 80080f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	799b      	ldrb	r3, [r3, #6]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b01      	cmp	r3, #1
 8008104:	d141      	bne.n	800818a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	795b      	ldrb	r3, [r3, #5]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800810e:	2302      	movs	r3, #2
 8008110:	e03c      	b.n	800818c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f991 	bl	8008440 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800811e:	f7ff fd41 	bl	8007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008122:	211e      	movs	r1, #30
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f8dd 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	4619      	mov	r1, r3
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f8d8 	bl	80082e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008134:	2100      	movs	r1, #0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f8d4 	bl	80082e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800813c:	2300      	movs	r3, #0
 800813e:	82fb      	strh	r3, [r7, #22]
 8008140:	e009      	b.n	8008156 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008142:	69b9      	ldr	r1, [r7, #24]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f923 	bl	8008390 <SUBGHZSPI_Receive>
      pData++;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	3301      	adds	r3, #1
 800814e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008150:	8afb      	ldrh	r3, [r7, #22]
 8008152:	3301      	adds	r3, #1
 8008154:	82fb      	strh	r3, [r7, #22]
 8008156:	8afa      	ldrh	r2, [r7, #22]
 8008158:	893b      	ldrh	r3, [r7, #8]
 800815a:	429a      	cmp	r2, r3
 800815c:	d3f1      	bcc.n	8008142 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800815e:	f7ff fd11 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f990 	bl	8008488 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	77fb      	strb	r3, [r7, #31]
 8008174:	e001      	b.n	800817a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	715a      	strb	r2, [r3, #5]

    return status;
 8008186:	7ffb      	ldrb	r3, [r7, #31]
 8008188:	e000      	b.n	800818c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800818a:	2302      	movs	r3, #2
  }
}
 800818c:	4618      	mov	r0, r3
 800818e:	3720      	adds	r7, #32
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800819c:	2300      	movs	r3, #0
 800819e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80081a0:	f107 020c 	add.w	r2, r7, #12
 80081a4:	2302      	movs	r3, #2
 80081a6:	2112      	movs	r1, #18
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff fef4 	bl	8007f96 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80081ae:	7b3b      	ldrb	r3, [r7, #12]
 80081b0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80081b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	b21a      	sxth	r2, r3
 80081ba:	7b7b      	ldrb	r3, [r7, #13]
 80081bc:	b21b      	sxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b21b      	sxth	r3, r3
 80081c2:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80081c4:	f107 020c 	add.w	r2, r7, #12
 80081c8:	2302      	movs	r3, #2
 80081ca:	2102      	movs	r1, #2
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff fe83 	bl	8007ed8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80081d2:	89fb      	ldrh	r3, [r7, #14]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f011 fea9 	bl	8019f34 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80081e2:	89fb      	ldrh	r3, [r7, #14]
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <HAL_SUBGHZ_IRQHandler+0x60>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f011 feae 	bl	8019f50 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80081f4:	89fb      	ldrh	r3, [r7, #14]
 80081f6:	089b      	lsrs	r3, r3, #2
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <HAL_SUBGHZ_IRQHandler+0x72>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f011 fefd 	bl	801a000 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008206:	89fb      	ldrh	r3, [r7, #14]
 8008208:	08db      	lsrs	r3, r3, #3
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f011 ff02 	bl	801a01c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008218:	89fb      	ldrh	r3, [r7, #14]
 800821a:	091b      	lsrs	r3, r3, #4
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f011 ff07 	bl	801a038 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800822a:	89fb      	ldrh	r3, [r7, #14]
 800822c:	095b      	lsrs	r3, r3, #5
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_SUBGHZ_IRQHandler+0xa8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f011 fed4 	bl	8019fe4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800823c:	89fb      	ldrh	r3, [r7, #14]
 800823e:	099b      	lsrs	r3, r3, #6
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <HAL_SUBGHZ_IRQHandler+0xba>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f011 fe8f 	bl	8019f6c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800824e:	89fb      	ldrh	r3, [r7, #14]
 8008250:	09db      	lsrs	r3, r3, #7
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00e      	beq.n	8008278 <HAL_SUBGHZ_IRQHandler+0xe4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800825a:	89fb      	ldrh	r3, [r7, #14]
 800825c:	0a1b      	lsrs	r3, r3, #8
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008266:	2101      	movs	r1, #1
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f011 fe8d 	bl	8019f88 <HAL_SUBGHZ_CADStatusCallback>
 800826e:	e003      	b.n	8008278 <HAL_SUBGHZ_IRQHandler+0xe4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008270:	2100      	movs	r1, #0
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f011 fe88 	bl	8019f88 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008278:	89fb      	ldrh	r3, [r7, #14]
 800827a:	0a5b      	lsrs	r3, r3, #9
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_SUBGHZ_IRQHandler+0xf6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f011 fe9d 	bl	8019fc4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800828a:	89fb      	ldrh	r3, [r7, #14]
 800828c:	0b9b      	lsrs	r3, r3, #14
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_SUBGHZ_IRQHandler+0x108>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f011 fedc 	bl	801a054 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80082ac:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <SUBGHZSPI_Init+0x3c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0b      	ldr	r2, [pc, #44]	@ (80082e0 <SUBGHZSPI_Init+0x3c>)
 80082b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082b6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80082b8:	4a09      	ldr	r2, [pc, #36]	@ (80082e0 <SUBGHZSPI_Init+0x3c>)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80082c0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80082c2:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <SUBGHZSPI_Init+0x3c>)
 80082c4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80082c8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80082ca:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <SUBGHZSPI_Init+0x3c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a04      	ldr	r2, [pc, #16]	@ (80082e0 <SUBGHZSPI_Init+0x3c>)
 80082d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d4:	6013      	str	r3, [r2, #0]
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr
 80082e0:	58010000 	.word	0x58010000

080082e4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80082f4:	4b23      	ldr	r3, [pc, #140]	@ (8008384 <SUBGHZSPI_Transmit+0xa0>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	0cdb      	lsrs	r3, r3, #19
 8008302:	2264      	movs	r2, #100	@ 0x64
 8008304:	fb02 f303 	mul.w	r3, r2, r3
 8008308:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	609a      	str	r2, [r3, #8]
      break;
 800831a:	e008      	b.n	800832e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3b01      	subs	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008322:	4b19      	ldr	r3, [pc, #100]	@ (8008388 <SUBGHZSPI_Transmit+0xa4>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d1ed      	bne.n	800830a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800832e:	4b17      	ldr	r3, [pc, #92]	@ (800838c <SUBGHZSPI_Transmit+0xa8>)
 8008330:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008338:	4b12      	ldr	r3, [pc, #72]	@ (8008384 <SUBGHZSPI_Transmit+0xa0>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	0cdb      	lsrs	r3, r3, #19
 8008346:	2264      	movs	r2, #100	@ 0x64
 8008348:	fb02 f303 	mul.w	r3, r2, r3
 800834c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	609a      	str	r2, [r3, #8]
      break;
 800835e:	e008      	b.n	8008372 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	3b01      	subs	r3, #1
 8008364:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008366:	4b08      	ldr	r3, [pc, #32]	@ (8008388 <SUBGHZSPI_Transmit+0xa4>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b01      	cmp	r3, #1
 8008370:	d1ed      	bne.n	800834e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008372:	4b05      	ldr	r3, [pc, #20]	@ (8008388 <SUBGHZSPI_Transmit+0xa4>)
 8008374:	68db      	ldr	r3, [r3, #12]

  return status;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
}
 8008378:	4618      	mov	r0, r3
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000070 	.word	0x20000070
 8008388:	58010000 	.word	0x58010000
 800838c:	5801000c 	.word	0x5801000c

08008390 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800839e:	4b25      	ldr	r3, [pc, #148]	@ (8008434 <SUBGHZSPI_Receive+0xa4>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4613      	mov	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	0cdb      	lsrs	r3, r3, #19
 80083ac:	2264      	movs	r2, #100	@ 0x64
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	609a      	str	r2, [r3, #8]
      break;
 80083c4:	e008      	b.n	80083d8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80083cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <SUBGHZSPI_Receive+0xa8>)
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d1ed      	bne.n	80083b4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80083d8:	4b18      	ldr	r3, [pc, #96]	@ (800843c <SUBGHZSPI_Receive+0xac>)
 80083da:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	22ff      	movs	r2, #255	@ 0xff
 80083e0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80083e2:	4b14      	ldr	r3, [pc, #80]	@ (8008434 <SUBGHZSPI_Receive+0xa4>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4613      	mov	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	0cdb      	lsrs	r3, r3, #19
 80083f0:	2264      	movs	r2, #100	@ 0x64
 80083f2:	fb02 f303 	mul.w	r3, r2, r3
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d105      	bne.n	800840a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	609a      	str	r2, [r3, #8]
      break;
 8008408:	e008      	b.n	800841c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3b01      	subs	r3, #1
 800840e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008410:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <SUBGHZSPI_Receive+0xa8>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d1ed      	bne.n	80083f8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <SUBGHZSPI_Receive+0xa8>)
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	b2da      	uxtb	r2, r3
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	701a      	strb	r2, [r3, #0]

  return status;
 8008426:	7dfb      	ldrb	r3, [r7, #23]
}
 8008428:	4618      	mov	r0, r3
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20000070 	.word	0x20000070
 8008438:	58010000 	.word	0x58010000
 800843c:	5801000c 	.word	0x5801000c

08008440 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	791b      	ldrb	r3, [r3, #4]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d111      	bne.n	8008474 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008450:	4b0c      	ldr	r3, [pc, #48]	@ (8008484 <SUBGHZ_CheckDeviceReady+0x44>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	0c1b      	lsrs	r3, r3, #16
 800845e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008460:	f7ff fba0 	bl	8007ba4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3b01      	subs	r3, #1
 8008468:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1f9      	bne.n	8008464 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008470:	f7ff fb88 	bl	8007b84 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f807 	bl	8008488 <SUBGHZ_WaitOnBusy>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000070 	.word	0x20000070

08008488 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008494:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <SUBGHZ_WaitOnBusy+0x58>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4613      	mov	r3, r2
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	4413      	add	r3, r2
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	0d1b      	lsrs	r3, r3, #20
 80084a2:	2264      	movs	r2, #100	@ 0x64
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80084aa:	f7ff fba9 	bl	8007c00 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80084ae:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d105      	bne.n	80084c2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	609a      	str	r2, [r3, #8]
      break;
 80084c0:	e009      	b.n	80084d6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80084c8:	f7ff fb88 	bl	8007bdc <LL_PWR_IsActiveFlag_RFBUSYS>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d0e9      	beq.n	80084aa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000070 	.word	0x20000070

080084e4 <LL_RCC_GetUSARTClockSource>:
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80084ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	401a      	ands	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	041b      	lsls	r3, r3, #16
 80084fc:	4313      	orrs	r3, r2
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr

08008508 <LL_RCC_GetLPUARTClockSource>:
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008514:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4013      	ands	r3, r2
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr

08008526 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e042      	b.n	80085be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853e:	2b00      	cmp	r3, #0
 8008540:	d106      	bne.n	8008550 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7f9 fd64 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2224      	movs	r2, #36	@ 0x24
 8008554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fc3b 	bl	8008de4 <UART_SetConfig>
 800856e:	4603      	mov	r3, r0
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e022      	b.n	80085be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fea3 	bl	80092cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008594:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 ff29 	bl	800940e <UART_CheckIdleState>
 80085bc:	4603      	mov	r3, r0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	@ 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085dc:	2b20      	cmp	r3, #32
 80085de:	d137      	bne.n	8008650 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <HAL_UART_Receive_IT+0x24>
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e030      	b.n	8008652 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a18      	ldr	r2, [pc, #96]	@ (800865c <HAL_UART_Receive_IT+0x94>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d01f      	beq.n	8008640 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d018      	beq.n	8008640 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	613b      	str	r3, [r7, #16]
   return(result);
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	623b      	str	r3, [r7, #32]
 800862e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	69f9      	ldr	r1, [r7, #28]
 8008632:	6a3a      	ldr	r2, [r7, #32]
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	61bb      	str	r3, [r7, #24]
   return(result);
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	461a      	mov	r2, r3
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fff8 	bl	800963c <UART_Start_Receive_IT>
 800864c:	4603      	mov	r3, r0
 800864e:	e000      	b.n	8008652 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008650:	2302      	movs	r3, #2
  }
}
 8008652:	4618      	mov	r0, r3
 8008654:	3728      	adds	r7, #40	@ 0x28
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40008000 	.word	0x40008000

08008660 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08a      	sub	sp, #40	@ 0x28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008674:	2b20      	cmp	r3, #32
 8008676:	d167      	bne.n	8008748 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <HAL_UART_Transmit_DMA+0x24>
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e060      	b.n	800874a <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	88fa      	ldrh	r2, [r7, #6]
 8008692:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	88fa      	ldrh	r2, [r7, #6]
 800869a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2221      	movs	r2, #33	@ 0x21
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d028      	beq.n	8008708 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ba:	4a26      	ldr	r2, [pc, #152]	@ (8008754 <HAL_UART_Transmit_DMA+0xf4>)
 80086bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086c2:	4a25      	ldr	r2, [pc, #148]	@ (8008758 <HAL_UART_Transmit_DMA+0xf8>)
 80086c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ca:	4a24      	ldr	r2, [pc, #144]	@ (800875c <HAL_UART_Transmit_DMA+0xfc>)
 80086cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086d2:	2200      	movs	r2, #0
 80086d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086de:	4619      	mov	r1, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3328      	adds	r3, #40	@ 0x28
 80086e6:	461a      	mov	r2, r3
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	f7fb fd21 	bl	8004130 <HAL_DMA_Start_IT>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2210      	movs	r2, #16
 80086f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2220      	movs	r2, #32
 8008700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e020      	b.n	800874a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2240      	movs	r2, #64	@ 0x40
 800870e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3308      	adds	r3, #8
 8008716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	e853 3f00 	ldrex	r3, [r3]
 800871e:	613b      	str	r3, [r7, #16]
   return(result);
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008726:	627b      	str	r3, [r7, #36]	@ 0x24
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008730:	623a      	str	r2, [r7, #32]
 8008732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	69f9      	ldr	r1, [r7, #28]
 8008736:	6a3a      	ldr	r2, [r7, #32]
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	61bb      	str	r3, [r7, #24]
   return(result);
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e5      	bne.n	8008710 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	e000      	b.n	800874a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008748:	2302      	movs	r3, #2
  }
}
 800874a:	4618      	mov	r0, r3
 800874c:	3728      	adds	r7, #40	@ 0x28
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	080099c7 	.word	0x080099c7
 8008758:	08009a61 	.word	0x08009a61
 800875c:	08009a7d 	.word	0x08009a7d

08008760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b0ba      	sub	sp, #232	@ 0xe8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800878a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800878e:	4013      	ands	r3, r2
 8008790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d11b      	bne.n	80087d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d015      	beq.n	80087d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 82e3 	beq.w	8008d90 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
      }
      return;
 80087d2:	e2dd      	b.n	8008d90 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8123 	beq.w	8008a24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008a18 <HAL_UART_IRQHandler+0x2b8>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80087ee:	4b8b      	ldr	r3, [pc, #556]	@ (8008a1c <HAL_UART_IRQHandler+0x2bc>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8116 	beq.w	8008a24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d011      	beq.n	8008828 <HAL_UART_IRQHandler+0xc8>
 8008804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2201      	movs	r2, #1
 8008816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881e:	f043 0201 	orr.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d011      	beq.n	8008858 <HAL_UART_IRQHandler+0xf8>
 8008834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2202      	movs	r2, #2
 8008846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884e:	f043 0204 	orr.w	r2, r3, #4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d011      	beq.n	8008888 <HAL_UART_IRQHandler+0x128>
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2204      	movs	r2, #4
 8008876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887e:	f043 0202 	orr.w	r2, r3, #2
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888c:	f003 0308 	and.w	r3, r3, #8
 8008890:	2b00      	cmp	r3, #0
 8008892:	d017      	beq.n	80088c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80088a4:	4b5c      	ldr	r3, [pc, #368]	@ (8008a18 <HAL_UART_IRQHandler+0x2b8>)
 80088a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ba:	f043 0208 	orr.w	r2, r3, #8
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d012      	beq.n	80088f6 <HAL_UART_IRQHandler+0x196>
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00c      	beq.n	80088f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8249 	beq.w	8008d94 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d013      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800890e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800891a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800893c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894a:	2b40      	cmp	r3, #64	@ 0x40
 800894c:	d005      	beq.n	800895a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800894e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008952:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008956:	2b00      	cmp	r3, #0
 8008958:	d054      	beq.n	8008a04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 ffce 	bl	80098fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896a:	2b40      	cmp	r3, #64	@ 0x40
 800896c:	d146      	bne.n	80089fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800898c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800899a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800899e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1d9      	bne.n	800896e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d017      	beq.n	80089f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ca:	4a15      	ldr	r2, [pc, #84]	@ (8008a20 <HAL_UART_IRQHandler+0x2c0>)
 80089cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fb fc87 	bl	80042e8 <HAL_DMA_Abort_IT>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d019      	beq.n	8008a14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80089ee:	4610      	mov	r0, r2
 80089f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f2:	e00f      	b.n	8008a14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f9e0 	bl	8008dba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fa:	e00b      	b.n	8008a14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f9dc 	bl	8008dba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a02:	e007      	b.n	8008a14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9d8 	bl	8008dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008a12:	e1bf      	b.n	8008d94 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a14:	bf00      	nop
    return;
 8008a16:	e1bd      	b.n	8008d94 <HAL_UART_IRQHandler+0x634>
 8008a18:	10000001 	.word	0x10000001
 8008a1c:	04000120 	.word	0x04000120
 8008a20:	08009afd 	.word	0x08009afd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	f040 8153 	bne.w	8008cd4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 814c 	beq.w	8008cd4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 8145 	beq.w	8008cd4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2210      	movs	r2, #16
 8008a50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a5c:	2b40      	cmp	r3, #64	@ 0x40
 8008a5e:	f040 80bb 	bne.w	8008bd8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 818f 	beq.w	8008d98 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a84:	429a      	cmp	r2, r3
 8008a86:	f080 8187 	bcs.w	8008d98 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 8087 	bne.w	8008bb6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ad6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1da      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3308      	adds	r3, #8
 8008af8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3308      	adds	r3, #8
 8008b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e1      	bne.n	8008af2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b84:	f023 0310 	bic.w	r3, r3, #16
 8008b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e4      	bne.n	8008b74 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fb fb3b 	bl	800422c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f8fb 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bd6:	e0df      	b.n	8008d98 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 80d1 	beq.w	8008d9c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008bfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80cc 	beq.w	8008d9c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c28:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e4      	bne.n	8008c04 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	623b      	str	r3, [r7, #32]
   return(result);
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c50:	f023 0301 	bic.w	r3, r3, #1
 8008c54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e1      	bne.n	8008c3a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cac:	61fb      	str	r3, [r7, #28]
 8008cae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e4      	bne.n	8008c8a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f87d 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cd2:	e063      	b.n	8008d9c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00e      	beq.n	8008cfe <HAL_UART_IRQHandler+0x59e>
 8008ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ce4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d008      	beq.n	8008cfe <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008cf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 fc5e 	bl	800a5b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cfc:	e051      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d014      	beq.n	8008d34 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d105      	bne.n	8008d22 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d03a      	beq.n	8008da0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
    }
    return;
 8008d32:	e035      	b.n	8008da0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <HAL_UART_IRQHandler+0x5f4>
 8008d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 feeb 	bl	8009b28 <UART_EndTransmit_IT>
    return;
 8008d52:	e026      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <HAL_UART_IRQHandler+0x614>
 8008d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 fc35 	bl	800a5dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d72:	e016      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d010      	beq.n	8008da2 <HAL_UART_IRQHandler+0x642>
 8008d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	da0c      	bge.n	8008da2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fc1e 	bl	800a5ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d8e:	e008      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
      return;
 8008d90:	bf00      	nop
 8008d92:	e006      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
    return;
 8008d94:	bf00      	nop
 8008d96:	e004      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
      return;
 8008d98:	bf00      	nop
 8008d9a:	e002      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
      return;
 8008d9c:	bf00      	nop
 8008d9e:	e000      	b.n	8008da2 <HAL_UART_IRQHandler+0x642>
    return;
 8008da0:	bf00      	nop
  }
}
 8008da2:	37e8      	adds	r7, #232	@ 0xe8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr

08008dba <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr
	...

08008de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008de8:	b08c      	sub	sp, #48	@ 0x30
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b94      	ldr	r3, [pc, #592]	@ (8009064 <UART_SetConfig+0x280>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	6812      	ldr	r2, [r2, #0]
 8008e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a89      	ldr	r2, [pc, #548]	@ (8009068 <UART_SetConfig+0x284>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008e5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	f023 010f 	bic.w	r1, r3, #15
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a7a      	ldr	r2, [pc, #488]	@ (800906c <UART_SetConfig+0x288>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d127      	bne.n	8008ed8 <UART_SetConfig+0xf4>
 8008e88:	2003      	movs	r0, #3
 8008e8a:	f7ff fb2b 	bl	80084e4 <LL_RCC_GetUSARTClockSource>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d81b      	bhi.n	8008ed0 <UART_SetConfig+0xec>
 8008e98:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea0 <UART_SetConfig+0xbc>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008eb1 	.word	0x08008eb1
 8008ea4:	08008ec1 	.word	0x08008ec1
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb6:	e080      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ebe:	e07c      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec6:	e078      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ece:	e074      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ed6:	e070      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a64      	ldr	r2, [pc, #400]	@ (8009070 <UART_SetConfig+0x28c>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d138      	bne.n	8008f54 <UART_SetConfig+0x170>
 8008ee2:	200c      	movs	r0, #12
 8008ee4:	f7ff fafe 	bl	80084e4 <LL_RCC_GetUSARTClockSource>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008eee:	2b0c      	cmp	r3, #12
 8008ef0:	d82c      	bhi.n	8008f4c <UART_SetConfig+0x168>
 8008ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef8 <UART_SetConfig+0x114>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f2d 	.word	0x08008f2d
 8008efc:	08008f4d 	.word	0x08008f4d
 8008f00:	08008f4d 	.word	0x08008f4d
 8008f04:	08008f4d 	.word	0x08008f4d
 8008f08:	08008f3d 	.word	0x08008f3d
 8008f0c:	08008f4d 	.word	0x08008f4d
 8008f10:	08008f4d 	.word	0x08008f4d
 8008f14:	08008f4d 	.word	0x08008f4d
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f4d 	.word	0x08008f4d
 8008f20:	08008f4d 	.word	0x08008f4d
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f45 	.word	0x08008f45
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f32:	e042      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008f34:	2302      	movs	r3, #2
 8008f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3a:	e03e      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f42:	e03a      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008f44:	2308      	movs	r3, #8
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4a:	e036      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e032      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a43      	ldr	r2, [pc, #268]	@ (8009068 <UART_SetConfig+0x284>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d12a      	bne.n	8008fb4 <UART_SetConfig+0x1d0>
 8008f5e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008f62:	f7ff fad1 	bl	8008508 <LL_RCC_GetLPUARTClockSource>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f6c:	d01a      	beq.n	8008fa4 <UART_SetConfig+0x1c0>
 8008f6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f72:	d81b      	bhi.n	8008fac <UART_SetConfig+0x1c8>
 8008f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f78:	d00c      	beq.n	8008f94 <UART_SetConfig+0x1b0>
 8008f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f7e:	d815      	bhi.n	8008fac <UART_SetConfig+0x1c8>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <UART_SetConfig+0x1a8>
 8008f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f88:	d008      	beq.n	8008f9c <UART_SetConfig+0x1b8>
 8008f8a:	e00f      	b.n	8008fac <UART_SetConfig+0x1c8>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f92:	e012      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008f94:	2302      	movs	r3, #2
 8008f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f9a:	e00e      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fa2:	e00a      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008fa4:	2308      	movs	r3, #8
 8008fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008faa:	e006      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008fac:	2310      	movs	r3, #16
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb2:	e002      	b.n	8008fba <UART_SetConfig+0x1d6>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009068 <UART_SetConfig+0x284>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	f040 80a4 	bne.w	800910e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	2b08      	cmp	r3, #8
 8008fcc:	d823      	bhi.n	8009016 <UART_SetConfig+0x232>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <UART_SetConfig+0x1f0>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08009017 	.word	0x08009017
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009017 	.word	0x08009017
 8008fe4:	08009007 	.word	0x08009007
 8008fe8:	08009017 	.word	0x08009017
 8008fec:	08009017 	.word	0x08009017
 8008ff0:	08009017 	.word	0x08009017
 8008ff4:	0800900f 	.word	0x0800900f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff8:	f7fd fde0 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 8008ffc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ffe:	e010      	b.n	8009022 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009000:	4b1c      	ldr	r3, [pc, #112]	@ (8009074 <UART_SetConfig+0x290>)
 8009002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009004:	e00d      	b.n	8009022 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009006:	f7fd fd25 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 800900a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800900c:	e009      	b.n	8009022 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800900e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009014:	e005      	b.n	8009022 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8137 	beq.w	8009298 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902e:	4a12      	ldr	r2, [pc, #72]	@ (8009078 <UART_SetConfig+0x294>)
 8009030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009034:	461a      	mov	r2, r3
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	fbb3 f3f2 	udiv	r3, r3, r2
 800903c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	4613      	mov	r3, r2
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	4413      	add	r3, r2
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	429a      	cmp	r2, r3
 800904c:	d305      	bcc.n	800905a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	429a      	cmp	r2, r3
 8009058:	d910      	bls.n	800907c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009060:	e11a      	b.n	8009298 <UART_SetConfig+0x4b4>
 8009062:	bf00      	nop
 8009064:	cfff69f3 	.word	0xcfff69f3
 8009068:	40008000 	.word	0x40008000
 800906c:	40013800 	.word	0x40013800
 8009070:	40004400 	.word	0x40004400
 8009074:	00f42400 	.word	0x00f42400
 8009078:	08021b14 	.word	0x08021b14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	2200      	movs	r2, #0
 8009080:	60bb      	str	r3, [r7, #8]
 8009082:	60fa      	str	r2, [r7, #12]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009088:	4a8e      	ldr	r2, [pc, #568]	@ (80092c4 <UART_SetConfig+0x4e0>)
 800908a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800908e:	b29b      	uxth	r3, r3
 8009090:	2200      	movs	r2, #0
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	607a      	str	r2, [r7, #4]
 8009096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800909a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800909e:	f7f7 fe4d 	bl	8000d3c <__aeabi_uldivmod>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4610      	mov	r0, r2
 80090a8:	4619      	mov	r1, r3
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	f04f 0300 	mov.w	r3, #0
 80090b2:	020b      	lsls	r3, r1, #8
 80090b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090b8:	0202      	lsls	r2, r0, #8
 80090ba:	6979      	ldr	r1, [r7, #20]
 80090bc:	6849      	ldr	r1, [r1, #4]
 80090be:	0849      	lsrs	r1, r1, #1
 80090c0:	2000      	movs	r0, #0
 80090c2:	460c      	mov	r4, r1
 80090c4:	4605      	mov	r5, r0
 80090c6:	eb12 0804 	adds.w	r8, r2, r4
 80090ca:	eb43 0905 	adc.w	r9, r3, r5
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	469a      	mov	sl, r3
 80090d6:	4693      	mov	fp, r2
 80090d8:	4652      	mov	r2, sl
 80090da:	465b      	mov	r3, fp
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 fe2c 	bl	8000d3c <__aeabi_uldivmod>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4613      	mov	r3, r2
 80090ea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090f2:	d308      	bcc.n	8009106 <UART_SetConfig+0x322>
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090fa:	d204      	bcs.n	8009106 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6a3a      	ldr	r2, [r7, #32]
 8009102:	60da      	str	r2, [r3, #12]
 8009104:	e0c8      	b.n	8009298 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800910c:	e0c4      	b.n	8009298 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009116:	d167      	bne.n	80091e8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009118:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800911c:	2b08      	cmp	r3, #8
 800911e:	d828      	bhi.n	8009172 <UART_SetConfig+0x38e>
 8009120:	a201      	add	r2, pc, #4	@ (adr r2, 8009128 <UART_SetConfig+0x344>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009155 	.word	0x08009155
 8009130:	0800915d 	.word	0x0800915d
 8009134:	08009173 	.word	0x08009173
 8009138:	08009163 	.word	0x08009163
 800913c:	08009173 	.word	0x08009173
 8009140:	08009173 	.word	0x08009173
 8009144:	08009173 	.word	0x08009173
 8009148:	0800916b 	.word	0x0800916b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800914c:	f7fd fd36 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 8009150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009152:	e014      	b.n	800917e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009154:	f7fd fd44 	bl	8006be0 <HAL_RCC_GetPCLK2Freq>
 8009158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800915a:	e010      	b.n	800917e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800915c:	4b5a      	ldr	r3, [pc, #360]	@ (80092c8 <UART_SetConfig+0x4e4>)
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009160:	e00d      	b.n	800917e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009162:	f7fd fc77 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8009166:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009168:	e009      	b.n	800917e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800916a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009170:	e005      	b.n	800917e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800917c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800917e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 8089 	beq.w	8009298 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918a:	4a4e      	ldr	r2, [pc, #312]	@ (80092c4 <UART_SetConfig+0x4e0>)
 800918c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009190:	461a      	mov	r2, r3
 8009192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009194:	fbb3 f3f2 	udiv	r3, r3, r2
 8009198:	005a      	lsls	r2, r3, #1
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	441a      	add	r2, r3
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	2b0f      	cmp	r3, #15
 80091b0:	d916      	bls.n	80091e0 <UART_SetConfig+0x3fc>
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091b8:	d212      	bcs.n	80091e0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f023 030f 	bic.w	r3, r3, #15
 80091c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	085b      	lsrs	r3, r3, #1
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	8bfb      	ldrh	r3, [r7, #30]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	8bfa      	ldrh	r2, [r7, #30]
 80091dc:	60da      	str	r2, [r3, #12]
 80091de:	e05b      	b.n	8009298 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091e6:	e057      	b.n	8009298 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d828      	bhi.n	8009242 <UART_SetConfig+0x45e>
 80091f0:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <UART_SetConfig+0x414>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	0800921d 	.word	0x0800921d
 80091fc:	08009225 	.word	0x08009225
 8009200:	0800922d 	.word	0x0800922d
 8009204:	08009243 	.word	0x08009243
 8009208:	08009233 	.word	0x08009233
 800920c:	08009243 	.word	0x08009243
 8009210:	08009243 	.word	0x08009243
 8009214:	08009243 	.word	0x08009243
 8009218:	0800923b 	.word	0x0800923b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800921c:	f7fd fcce 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 8009220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009222:	e014      	b.n	800924e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009224:	f7fd fcdc 	bl	8006be0 <HAL_RCC_GetPCLK2Freq>
 8009228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800922a:	e010      	b.n	800924e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800922c:	4b26      	ldr	r3, [pc, #152]	@ (80092c8 <UART_SetConfig+0x4e4>)
 800922e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009230:	e00d      	b.n	800924e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009232:	f7fd fc0f 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8009236:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009238:	e009      	b.n	800924e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800923a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009240:	e005      	b.n	800924e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800924c:	bf00      	nop
    }

    if (pclk != 0U)
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	2b00      	cmp	r3, #0
 8009252:	d021      	beq.n	8009298 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009258:	4a1a      	ldr	r2, [pc, #104]	@ (80092c4 <UART_SetConfig+0x4e0>)
 800925a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800925e:	461a      	mov	r2, r3
 8009260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009262:	fbb3 f2f2 	udiv	r2, r3, r2
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	441a      	add	r2, r3
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	fbb2 f3f3 	udiv	r3, r2, r3
 8009276:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	2b0f      	cmp	r3, #15
 800927c:	d909      	bls.n	8009292 <UART_SetConfig+0x4ae>
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009284:	d205      	bcs.n	8009292 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	b29a      	uxth	r2, r3
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60da      	str	r2, [r3, #12]
 8009290:	e002      	b.n	8009298 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2201      	movs	r2, #1
 800929c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2200      	movs	r2, #0
 80092ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2200      	movs	r2, #0
 80092b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80092b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3730      	adds	r7, #48	@ 0x30
 80092bc:	46bd      	mov	sp, r7
 80092be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092c2:	bf00      	nop
 80092c4:	08021b14 	.word	0x08021b14
 80092c8:	00f42400 	.word	0x00f42400

080092cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00a      	beq.n	80092f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00a      	beq.n	800933a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	f003 0310 	and.w	r3, r3, #16
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01a      	beq.n	80093e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ca:	d10a      	bne.n	80093e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	605a      	str	r2, [r3, #4]
  }
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr

0800940e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b086      	sub	sp, #24
 8009412:	af02      	add	r7, sp, #8
 8009414:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800941e:	f7f8 fa23 	bl	8001868 <HAL_GetTick>
 8009422:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b08      	cmp	r3, #8
 8009430:	d10e      	bne.n	8009450 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009432:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f832 	bl	80094aa <UART_WaitOnFlagUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e028      	b.n	80094a2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b04      	cmp	r3, #4
 800945c:	d10e      	bne.n	800947c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800945e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f81c 	bl	80094aa <UART_WaitOnFlagUntilTimeout>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e012      	b.n	80094a2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2220      	movs	r2, #32
 8009488:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b09c      	sub	sp, #112	@ 0x70
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ba:	e0a9      	b.n	8009610 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c2:	f000 80a5 	beq.w	8009610 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c6:	f7f8 f9cf 	bl	8001868 <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d302      	bcc.n	80094dc <UART_WaitOnFlagUntilTimeout+0x32>
 80094d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d140      	bne.n	800955e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80094ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80094f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094fc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009500:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e6      	bne.n	80094dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	f023 0301 	bic.w	r3, r3, #1
 8009524:	663b      	str	r3, [r7, #96]	@ 0x60
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3308      	adds	r3, #8
 800952c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800952e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009530:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800953c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e5      	bne.n	800950e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2220      	movs	r2, #32
 800954e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e069      	b.n	8009632 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d051      	beq.n	8009610 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800957a:	d149      	bne.n	8009610 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009584:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800959a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	613b      	str	r3, [r7, #16]
   return(result);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f023 0301 	bic.w	r3, r3, #1
 80095ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3308      	adds	r3, #8
 80095d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80095d8:	623a      	str	r2, [r7, #32]
 80095da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	69f9      	ldr	r1, [r7, #28]
 80095de:	6a3a      	ldr	r2, [r7, #32]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e5      	bne.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2220      	movs	r2, #32
 8009600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e010      	b.n	8009632 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	69da      	ldr	r2, [r3, #28]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	4013      	ands	r3, r2
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	429a      	cmp	r2, r3
 800961e:	bf0c      	ite	eq
 8009620:	2301      	moveq	r3, #1
 8009622:	2300      	movne	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	461a      	mov	r2, r3
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	429a      	cmp	r2, r3
 800962c:	f43f af46 	beq.w	80094bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3770      	adds	r7, #112	@ 0x70
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800963c:	b480      	push	{r7}
 800963e:	b0a3      	sub	sp, #140	@ 0x8c
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	88fa      	ldrh	r2, [r7, #6]
 8009654:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800966e:	d10e      	bne.n	800968e <UART_Start_Receive_IT+0x52>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d105      	bne.n	8009684 <UART_Start_Receive_IT+0x48>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800967e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009682:	e02d      	b.n	80096e0 <UART_Start_Receive_IT+0xa4>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	22ff      	movs	r2, #255	@ 0xff
 8009688:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800968c:	e028      	b.n	80096e0 <UART_Start_Receive_IT+0xa4>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10d      	bne.n	80096b2 <UART_Start_Receive_IT+0x76>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d104      	bne.n	80096a8 <UART_Start_Receive_IT+0x6c>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	22ff      	movs	r2, #255	@ 0xff
 80096a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096a6:	e01b      	b.n	80096e0 <UART_Start_Receive_IT+0xa4>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	227f      	movs	r2, #127	@ 0x7f
 80096ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096b0:	e016      	b.n	80096e0 <UART_Start_Receive_IT+0xa4>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096ba:	d10d      	bne.n	80096d8 <UART_Start_Receive_IT+0x9c>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <UART_Start_Receive_IT+0x92>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	227f      	movs	r2, #127	@ 0x7f
 80096c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096cc:	e008      	b.n	80096e0 <UART_Start_Receive_IT+0xa4>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	223f      	movs	r2, #63	@ 0x3f
 80096d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096d6:	e003      	b.n	80096e0 <UART_Start_Receive_IT+0xa4>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2222      	movs	r2, #34	@ 0x22
 80096ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009702:	f043 0301 	orr.w	r3, r3, #1
 8009706:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009714:	673a      	str	r2, [r7, #112]	@ 0x70
 8009716:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800971a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009722:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e3      	bne.n	80096f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800972c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009730:	d14f      	bne.n	80097d2 <UART_Start_Receive_IT+0x196>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009738:	88fa      	ldrh	r2, [r7, #6]
 800973a:	429a      	cmp	r2, r3
 800973c:	d349      	bcc.n	80097d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009746:	d107      	bne.n	8009758 <UART_Start_Receive_IT+0x11c>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4a46      	ldr	r2, [pc, #280]	@ (800986c <UART_Start_Receive_IT+0x230>)
 8009754:	675a      	str	r2, [r3, #116]	@ 0x74
 8009756:	e002      	b.n	800975e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4a45      	ldr	r2, [pc, #276]	@ (8009870 <UART_Start_Receive_IT+0x234>)
 800975c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01a      	beq.n	800979c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800977a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800978a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800978e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e4      	bne.n	8009766 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80097bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80097be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80097c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80097ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e5      	bne.n	800979c <UART_Start_Receive_IT+0x160>
 80097d0:	e046      	b.n	8009860 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097da:	d107      	bne.n	80097ec <UART_Start_Receive_IT+0x1b0>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d103      	bne.n	80097ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4a23      	ldr	r2, [pc, #140]	@ (8009874 <UART_Start_Receive_IT+0x238>)
 80097e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80097ea:	e002      	b.n	80097f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4a22      	ldr	r2, [pc, #136]	@ (8009878 <UART_Start_Receive_IT+0x23c>)
 80097f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d019      	beq.n	800982e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800980e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
 800981a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800981e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e6      	bne.n	80097fa <UART_Start_Receive_IT+0x1be>
 800982c:	e018      	b.n	8009860 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	613b      	str	r3, [r7, #16]
   return(result);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	f043 0320 	orr.w	r3, r3, #32
 8009842:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	461a      	mov	r2, r3
 800984a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800984c:	623b      	str	r3, [r7, #32]
 800984e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	69f9      	ldr	r1, [r7, #28]
 8009852:	6a3a      	ldr	r2, [r7, #32]
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	61bb      	str	r3, [r7, #24]
   return(result);
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e6      	bne.n	800982e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	378c      	adds	r7, #140	@ 0x8c
 8009866:	46bd      	mov	sp, r7
 8009868:	bc80      	pop	{r7}
 800986a:	4770      	bx	lr
 800986c:	0800a251 	.word	0x0800a251
 8009870:	08009ef1 	.word	0x08009ef1
 8009874:	08009d39 	.word	0x08009d39
 8009878:	08009b81 	.word	0x08009b81

0800987c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b08f      	sub	sp, #60	@ 0x3c
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	61fb      	str	r3, [r7, #28]
   return(result);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009898:	637b      	str	r3, [r7, #52]	@ 0x34
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e6      	bne.n	8009884 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3308      	adds	r3, #8
 80098bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3308      	adds	r3, #8
 80098d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098d6:	61ba      	str	r2, [r7, #24]
 80098d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6979      	ldr	r1, [r7, #20]
 80098dc:	69ba      	ldr	r2, [r7, #24]
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	613b      	str	r3, [r7, #16]
   return(result);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e5      	bne.n	80098b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80098f2:	bf00      	nop
 80098f4:	373c      	adds	r7, #60	@ 0x3c
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b095      	sub	sp, #84	@ 0x54
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009922:	643b      	str	r3, [r7, #64]	@ 0x40
 8009924:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009928:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e6      	bne.n	8009904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3308      	adds	r3, #8
 800993c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	e853 3f00 	ldrex	r3, [r3]
 8009944:	61fb      	str	r3, [r7, #28]
   return(result);
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800994c:	f023 0301 	bic.w	r3, r3, #1
 8009950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800995a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009962:	e841 2300 	strex	r3, r2, [r1]
 8009966:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1e3      	bne.n	8009936 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009972:	2b01      	cmp	r3, #1
 8009974:	d118      	bne.n	80099a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	60bb      	str	r3, [r7, #8]
   return(result);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f023 0310 	bic.w	r3, r3, #16
 800998a:	647b      	str	r3, [r7, #68]	@ 0x44
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6979      	ldr	r1, [r7, #20]
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	613b      	str	r3, [r7, #16]
   return(result);
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e6      	bne.n	8009976 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80099bc:	bf00      	nop
 80099be:	3754      	adds	r7, #84	@ 0x54
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bc80      	pop	{r7}
 80099c4:	4770      	bx	lr

080099c6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b090      	sub	sp, #64	@ 0x40
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0320 	and.w	r3, r3, #32
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d137      	bne.n	8009a52 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80099e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e4:	2200      	movs	r2, #0
 80099e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	623b      	str	r3, [r7, #32]
   return(result);
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e5      	bne.n	80099ea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3c:	61fb      	str	r3, [r7, #28]
 8009a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	617b      	str	r3, [r7, #20]
   return(result);
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e6      	bne.n	8009a1e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a50:	e002      	b.n	8009a58 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a52:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009a54:	f7f8 fc52 	bl	80022fc <HAL_UART_TxCpltCallback>
}
 8009a58:	bf00      	nop
 8009a5a:	3740      	adds	r7, #64	@ 0x40
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f7ff f99a 	bl	8008da8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a74:	bf00      	nop
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa4:	2b80      	cmp	r3, #128	@ 0x80
 8009aa6:	d109      	bne.n	8009abc <UART_DMAError+0x40>
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2b21      	cmp	r3, #33	@ 0x21
 8009aac:	d106      	bne.n	8009abc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009ab6:	6978      	ldr	r0, [r7, #20]
 8009ab8:	f7ff fee0 	bl	800987c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac6:	2b40      	cmp	r3, #64	@ 0x40
 8009ac8:	d109      	bne.n	8009ade <UART_DMAError+0x62>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b22      	cmp	r3, #34	@ 0x22
 8009ace:	d106      	bne.n	8009ade <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009ad8:	6978      	ldr	r0, [r7, #20]
 8009ada:	f7ff ff0f 	bl	80098fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae4:	f043 0210 	orr.w	r2, r3, #16
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009aee:	6978      	ldr	r0, [r7, #20]
 8009af0:	f7ff f963 	bl	8008dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009af4:	bf00      	nop
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff f94d 	bl	8008dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b20:	bf00      	nop
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e6      	bne.n	8009b30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7f8 fbc3 	bl	80022fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b76:	bf00      	nop
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b09c      	sub	sp, #112	@ 0x70
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b98:	2b22      	cmp	r3, #34	@ 0x22
 8009b9a:	f040 80be 	bne.w	8009d1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ba8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009bac:	b2d9      	uxtb	r1, r3
 8009bae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb8:	400a      	ands	r2, r1
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f040 80a1 	bne.w	8009d2a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e6      	bne.n	8009be8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009c3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e5      	bne.n	8009c1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a33      	ldr	r2, [pc, #204]	@ (8009d34 <UART_RxISR_8BIT+0x1b4>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d01f      	beq.n	8009cac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d018      	beq.n	8009cac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	623b      	str	r3, [r7, #32]
   return(result);
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e6      	bne.n	8009c7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d12e      	bne.n	8009d12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0310 	bic.w	r3, r3, #16
 8009cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cd8:	61fb      	str	r3, [r7, #28]
 8009cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	69b9      	ldr	r1, [r7, #24]
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e6      	bne.n	8009cba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b10      	cmp	r3, #16
 8009cf8:	d103      	bne.n	8009d02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2210      	movs	r2, #16
 8009d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff f85e 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d10:	e00b      	b.n	8009d2a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7f8 fb08 	bl	8002328 <HAL_UART_RxCpltCallback>
}
 8009d18:	e007      	b.n	8009d2a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	699a      	ldr	r2, [r3, #24]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f042 0208 	orr.w	r2, r2, #8
 8009d28:	619a      	str	r2, [r3, #24]
}
 8009d2a:	bf00      	nop
 8009d2c:	3770      	adds	r7, #112	@ 0x70
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	40008000 	.word	0x40008000

08009d38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b09c      	sub	sp, #112	@ 0x70
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d50:	2b22      	cmp	r3, #34	@ 0x22
 8009d52:	f040 80be 	bne.w	8009ed2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009d6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009d6e:	4013      	ands	r3, r2
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7a:	1c9a      	adds	r2, r3, #2
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f040 80a1 	bne.w	8009ee2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009db4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dc0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009dc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e6      	bne.n	8009da0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ddc:	e853 3f00 	ldrex	r3, [r3]
 8009de0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3308      	adds	r3, #8
 8009df0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009df2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e5      	bne.n	8009dd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a33      	ldr	r2, [pc, #204]	@ (8009eec <UART_RxISR_16BIT+0x1b4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d01f      	beq.n	8009e64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d018      	beq.n	8009e64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e6      	bne.n	8009e32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d12e      	bne.n	8009eca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f023 0310 	bic.w	r3, r3, #16
 8009e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6979      	ldr	r1, [r7, #20]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e6      	bne.n	8009e72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	f003 0310 	and.w	r3, r3, #16
 8009eae:	2b10      	cmp	r3, #16
 8009eb0:	d103      	bne.n	8009eba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2210      	movs	r2, #16
 8009eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7fe ff82 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ec8:	e00b      	b.n	8009ee2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7f8 fa2c 	bl	8002328 <HAL_UART_RxCpltCallback>
}
 8009ed0:	e007      	b.n	8009ee2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	699a      	ldr	r2, [r3, #24]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0208 	orr.w	r2, r2, #8
 8009ee0:	619a      	str	r2, [r3, #24]
}
 8009ee2:	bf00      	nop
 8009ee4:	3770      	adds	r7, #112	@ 0x70
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	40008000 	.word	0x40008000

08009ef0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b0ac      	sub	sp, #176	@ 0xb0
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009efe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f26:	2b22      	cmp	r3, #34	@ 0x22
 8009f28:	f040 8182 	bne.w	800a230 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f32:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f36:	e125      	b.n	800a184 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009f46:	b2d9      	uxtb	r1, r3
 8009f48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f52:	400a      	ands	r2, r1
 8009f54:	b2d2      	uxtb	r2, r2
 8009f56:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d053      	beq.n	800a032 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d011      	beq.n	8009fba <UART_RxISR_8BIT_FIFOEN+0xca>
 8009f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00b      	beq.n	8009fba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fb0:	f043 0201 	orr.w	r2, r3, #1
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d011      	beq.n	8009fea <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00b      	beq.n	8009fea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fe0:	f043 0204 	orr.w	r2, r3, #4
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fee:	f003 0304 	and.w	r3, r3, #4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d011      	beq.n	800a01a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00b      	beq.n	800a01a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2204      	movs	r2, #4
 800a008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a010:	f043 0202 	orr.w	r2, r3, #2
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a020:	2b00      	cmp	r3, #0
 800a022:	d006      	beq.n	800a032 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7fe fec8 	bl	8008dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a038:	b29b      	uxth	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f040 80a2 	bne.w	800a184 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a04e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a062:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a064:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a068:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e4      	bne.n	800a040 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3308      	adds	r3, #8
 800a07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a08c:	f023 0301 	bic.w	r3, r3, #1
 800a090:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3308      	adds	r3, #8
 800a09a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a09e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a0a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a0a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a0a6:	e841 2300 	strex	r3, r2, [r1]
 800a0aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a0ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1e1      	bne.n	800a076 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a5f      	ldr	r2, [pc, #380]	@ (800a248 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d021      	beq.n	800a114 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d01a      	beq.n	800a114 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a0ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a100:	657b      	str	r3, [r7, #84]	@ 0x54
 800a102:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a106:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a10e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e4      	bne.n	800a0de <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d130      	bne.n	800a17e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12a:	e853 3f00 	ldrex	r3, [r3]
 800a12e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a132:	f023 0310 	bic.w	r3, r3, #16
 800a136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a144:	643b      	str	r3, [r7, #64]	@ 0x40
 800a146:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a14a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e4      	bne.n	800a122 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	f003 0310 	and.w	r3, r3, #16
 800a162:	2b10      	cmp	r3, #16
 800a164:	d103      	bne.n	800a16e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2210      	movs	r2, #16
 800a16c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7fe fe28 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
 800a17c:	e002      	b.n	800a184 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7f8 f8d2 	bl	8002328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a184:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d006      	beq.n	800a19a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a18c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a190:	f003 0320 	and.w	r3, r3, #32
 800a194:	2b00      	cmp	r3, #0
 800a196:	f47f aecf 	bne.w	8009f38 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d049      	beq.n	800a240 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d242      	bcs.n	800a240 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a1de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e3      	bne.n	800a1ba <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a15      	ldr	r2, [pc, #84]	@ (800a24c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a1f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	e853 3f00 	ldrex	r3, [r3]
 800a204:	60bb      	str	r3, [r7, #8]
   return(result);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f043 0320 	orr.w	r3, r3, #32
 800a20c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a21a:	61bb      	str	r3, [r7, #24]
 800a21c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6979      	ldr	r1, [r7, #20]
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	613b      	str	r3, [r7, #16]
   return(result);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e4      	bne.n	800a1f8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a22e:	e007      	b.n	800a240 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f042 0208 	orr.w	r2, r2, #8
 800a23e:	619a      	str	r2, [r3, #24]
}
 800a240:	bf00      	nop
 800a242:	37b0      	adds	r7, #176	@ 0xb0
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	40008000 	.word	0x40008000
 800a24c:	08009b81 	.word	0x08009b81

0800a250 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b0ae      	sub	sp, #184	@ 0xb8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a25e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a286:	2b22      	cmp	r3, #34	@ 0x22
 800a288:	f040 8186 	bne.w	800a598 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a292:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a296:	e129      	b.n	800a4ec <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a29e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a2ae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2c0:	1c9a      	adds	r2, r3, #2
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a2e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d053      	beq.n	800a396 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d011      	beq.n	800a31e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a2fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2201      	movs	r2, #1
 800a30c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a314:	f043 0201 	orr.w	r2, r3, #1
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a31e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d011      	beq.n	800a34e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a32a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2202      	movs	r2, #2
 800a33c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a344:	f043 0204 	orr.w	r2, r3, #4
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a34e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b00      	cmp	r3, #0
 800a358:	d011      	beq.n	800a37e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a35a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00b      	beq.n	800a37e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2204      	movs	r2, #4
 800a36c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a374:	f043 0202 	orr.w	r2, r3, #2
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a384:	2b00      	cmp	r3, #0
 800a386:	d006      	beq.n	800a396 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7fe fd16 	bl	8008dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f040 80a4 	bne.w	800a4ec <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a3b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3d2:	e841 2300 	strex	r3, r2, [r1]
 800a3d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a3d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1e2      	bne.n	800a3a4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3e8:	e853 3f00 	ldrex	r3, [r3]
 800a3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3308      	adds	r3, #8
 800a402:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a408:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a40c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e1      	bne.n	800a3de <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2220      	movs	r2, #32
 800a41e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a5f      	ldr	r2, [pc, #380]	@ (800a5b0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d021      	beq.n	800a47c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d01a      	beq.n	800a47c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a45a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a46a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a46e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a470:	e841 2300 	strex	r3, r2, [r1]
 800a474:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e4      	bne.n	800a446 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a480:	2b01      	cmp	r3, #1
 800a482:	d130      	bne.n	800a4e6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49a:	f023 0310 	bic.w	r3, r3, #16
 800a49e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e4      	bne.n	800a48a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	f003 0310 	and.w	r3, r3, #16
 800a4ca:	2b10      	cmp	r3, #16
 800a4cc:	d103      	bne.n	800a4d6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2210      	movs	r2, #16
 800a4d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7fe fc74 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
 800a4e4:	e002      	b.n	800a4ec <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7f7 ff1e 	bl	8002328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d006      	beq.n	800a502 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a4f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f47f aecb 	bne.w	800a298 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a508:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a50c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a510:	2b00      	cmp	r3, #0
 800a512:	d049      	beq.n	800a5a8 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a51a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a51e:	429a      	cmp	r2, r3
 800a520:	d242      	bcs.n	800a5a8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3308      	adds	r3, #8
 800a528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	623b      	str	r3, [r7, #32]
   return(result);
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3308      	adds	r3, #8
 800a542:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a546:	633a      	str	r2, [r7, #48]	@ 0x30
 800a548:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a54c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e3      	bne.n	800a522 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a15      	ldr	r2, [pc, #84]	@ (800a5b4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a55e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	e853 3f00 	ldrex	r3, [r3]
 800a56c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f043 0320 	orr.w	r3, r3, #32
 800a574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a582:	61fb      	str	r3, [r7, #28]
 800a584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	69b9      	ldr	r1, [r7, #24]
 800a588:	69fa      	ldr	r2, [r7, #28]
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	617b      	str	r3, [r7, #20]
   return(result);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e4      	bne.n	800a560 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a596:	e007      	b.n	800a5a8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0208 	orr.w	r2, r2, #8
 800a5a6:	619a      	str	r2, [r3, #24]
}
 800a5a8:	bf00      	nop
 800a5aa:	37b8      	adds	r7, #184	@ 0xb8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40008000 	.word	0x40008000
 800a5b4:	08009d39 	.word	0x08009d39

0800a5b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr

0800a5ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5d2:	bf00      	nop
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bc80      	pop	{r7}
 800a5da:	4770      	bx	lr

0800a5dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr

0800a5ee <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b088      	sub	sp, #32
 800a5f2:	af02      	add	r7, sp, #8
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	1d3b      	adds	r3, r7, #4
 800a5f8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a60a:	2302      	movs	r3, #2
 800a60c:	e046      	b.n	800a69c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2224      	movs	r2, #36	@ 0x24
 800a61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0201 	bic.w	r2, r2, #1
 800a62c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d105      	bne.n	800a654 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a648:	1d3b      	adds	r3, r7, #4
 800a64a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 f911 	bl	800a876 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0201 	orr.w	r2, r2, #1
 800a662:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a664:	f7f7 f900 	bl	8001868 <HAL_GetTick>
 800a668:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a66a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2200      	movs	r2, #0
 800a674:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7fe ff16 	bl	80094aa <UART_WaitOnFlagUntilTimeout>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	75fb      	strb	r3, [r7, #23]
 800a688:	e003      	b.n	800a692 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b089      	sub	sp, #36	@ 0x24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d101      	bne.n	800a6ba <HAL_UARTEx_EnableStopMode+0x16>
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	e021      	b.n	800a6fe <HAL_UARTEx_EnableStopMode+0x5a>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f043 0302 	orr.w	r3, r3, #2
 800a6d6:	61fb      	str	r3, [r7, #28]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	61bb      	str	r3, [r7, #24]
 800a6e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e4:	6979      	ldr	r1, [r7, #20]
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	e841 2300 	strex	r3, r2, [r1]
 800a6ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e6      	bne.n	800a6c2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3724      	adds	r7, #36	@ 0x24
 800a702:	46bd      	mov	sp, r7
 800a704:	bc80      	pop	{r7}
 800a706:	4770      	bx	lr

0800a708 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <HAL_UARTEx_EnableFifoMode+0x16>
 800a71a:	2302      	movs	r3, #2
 800a71c:	e02b      	b.n	800a776 <HAL_UARTEx_EnableFifoMode+0x6e>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2224      	movs	r2, #36	@ 0x24
 800a72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0201 	bic.w	r2, r2, #1
 800a744:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a74c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800a754:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f8ac 	bl	800a8bc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a792:	2302      	movs	r3, #2
 800a794:	e02d      	b.n	800a7f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2224      	movs	r2, #36	@ 0x24
 800a7a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 0201 	bic.w	r2, r2, #1
 800a7bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f872 	bl	800a8bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d101      	bne.n	800a812 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a80e:	2302      	movs	r3, #2
 800a810:	e02d      	b.n	800a86e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2224      	movs	r2, #36	@ 0x24
 800a81e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 0201 	bic.w	r2, r2, #1
 800a838:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	430a      	orrs	r2, r1
 800a84c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f834 	bl	800a8bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2220      	movs	r2, #32
 800a860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a876:	b480      	push	{r7}
 800a878:	b085      	sub	sp, #20
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	1d3b      	adds	r3, r7, #4
 800a880:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f023 0210 	bic.w	r2, r3, #16
 800a88e:	893b      	ldrh	r3, [r7, #8]
 800a890:	4619      	mov	r1, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a8a4:	7abb      	ldrb	r3, [r7, #10]
 800a8a6:	061a      	lsls	r2, r3, #24
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	605a      	str	r2, [r3, #4]
}
 800a8b0:	bf00      	nop
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bc80      	pop	{r7}
 800a8b8:	4770      	bx	lr
	...

0800a8bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d108      	bne.n	800a8de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8dc:	e031      	b.n	800a942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8de:	2308      	movs	r3, #8
 800a8e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	0e5b      	lsrs	r3, r3, #25
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	0f5b      	lsrs	r3, r3, #29
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	7b3a      	ldrb	r2, [r7, #12]
 800a90a:	4910      	ldr	r1, [pc, #64]	@ (800a94c <UARTEx_SetNbDataToProcess+0x90>)
 800a90c:	5c8a      	ldrb	r2, [r1, r2]
 800a90e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a912:	7b3a      	ldrb	r2, [r7, #12]
 800a914:	490e      	ldr	r1, [pc, #56]	@ (800a950 <UARTEx_SetNbDataToProcess+0x94>)
 800a916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a918:	fb93 f3f2 	sdiv	r3, r3, r2
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	7b7a      	ldrb	r2, [r7, #13]
 800a928:	4908      	ldr	r1, [pc, #32]	@ (800a94c <UARTEx_SetNbDataToProcess+0x90>)
 800a92a:	5c8a      	ldrb	r2, [r1, r2]
 800a92c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a930:	7b7a      	ldrb	r2, [r7, #13]
 800a932:	4907      	ldr	r1, [pc, #28]	@ (800a950 <UARTEx_SetNbDataToProcess+0x94>)
 800a934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a936:	fb93 f3f2 	sdiv	r3, r3, r2
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a942:	bf00      	nop
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr
 800a94c:	08021b2c 	.word	0x08021b2c
 800a950:	08021b34 	.word	0x08021b34

0800a954 <LmHandlerInit>:
}
#endif

#if MY_TX
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800a95e:	4a0d      	ldr	r2, [pc, #52]	@ (800a994 <LmHandlerInit+0x40>)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6013      	str	r3, [r2, #0]

#if MY_TX_ABP
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800a964:	4b0c      	ldr	r3, [pc, #48]	@ (800a998 <LmHandlerInit+0x44>)
 800a966:	4a0d      	ldr	r2, [pc, #52]	@ (800a99c <LmHandlerInit+0x48>)
 800a968:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800a96a:	4b0b      	ldr	r3, [pc, #44]	@ (800a998 <LmHandlerInit+0x44>)
 800a96c:	4a0c      	ldr	r2, [pc, #48]	@ (800a9a0 <LmHandlerInit+0x4c>)
 800a96e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800a970:	4b09      	ldr	r3, [pc, #36]	@ (800a998 <LmHandlerInit+0x44>)
 800a972:	4a0c      	ldr	r2, [pc, #48]	@ (800a9a4 <LmHandlerInit+0x50>)
 800a974:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800a976:	4b08      	ldr	r3, [pc, #32]	@ (800a998 <LmHandlerInit+0x44>)
 800a978:	4a0b      	ldr	r2, [pc, #44]	@ (800a9a8 <LmHandlerInit+0x54>)
 800a97a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800a97c:	4b05      	ldr	r3, [pc, #20]	@ (800a994 <LmHandlerInit+0x40>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	4a0a      	ldr	r2, [pc, #40]	@ (800a9ac <LmHandlerInit+0x58>)
 800a984:	6153      	str	r3, [r2, #20]
		LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
		LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
		LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
		LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
#endif
    return LORAMAC_HANDLER_SUCCESS;
 800a986:	2300      	movs	r3, #0

}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bc80      	pop	{r7}
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	200009f4 	.word	0x200009f4
 800a998:	200009f8 	.word	0x200009f8
 800a99c:	0800b029 	.word	0x0800b029
 800a9a0:	0800b09d 	.word	0x0800b09d
 800a9a4:	0800b16d 	.word	0x0800b16d
 800a9a8:	0800b2bd 	.word	0x0800b2bd
 800a9ac:	20000a08 	.word	0x20000a08

0800a9b0 <LmHandlerConfigure>:
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b092      	sub	sp, #72	@ 0x48
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
	MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800a9b8:	2218      	movs	r2, #24
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	4884      	ldr	r0, [pc, #528]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800a9be:	f00c ff50 	bl	8017862 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800a9c2:	4b84      	ldr	r3, [pc, #528]	@ (800abd4 <LmHandlerConfigure+0x224>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800a9c8:	f7f7 fee6 	bl	8002798 <LoraInfo_GetPtr>
 800a9cc:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800a9ce:	4b80      	ldr	r3, [pc, #512]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	4093      	lsls	r3, r2
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d107      	bne.n	800a9f4 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800a9e4:	4b7c      	ldr	r3, [pc, #496]	@ (800abd8 <LmHandlerConfigure+0x228>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	f00f fc9e 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800a9f0:	bf00      	nop
 800a9f2:	e7fd      	b.n	800a9f0 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800a9f4:	4b76      	ldr	r3, [pc, #472]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4978      	ldr	r1, [pc, #480]	@ (800abdc <LmHandlerConfigure+0x22c>)
 800a9fc:	4878      	ldr	r0, [pc, #480]	@ (800abe0 <LmHandlerConfigure+0x230>)
 800a9fe:	f004 f83f 	bl	800ea80 <LoRaMacInitialization>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0c:	e0dc      	b.n	800abc8 <LmHandlerConfigure+0x218>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800aa0e:	2327      	movs	r3, #39	@ 0x27
 800aa10:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800aa12:	f107 0318 	add.w	r3, r7, #24
 800aa16:	4618      	mov	r0, r3
 800aa18:	f004 fd5e 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d103      	bne.n	800aa2a <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800aa22:	4b70      	ldr	r3, [pc, #448]	@ (800abe4 <LmHandlerConfigure+0x234>)
 800aa24:	2201      	movs	r2, #1
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	e02a      	b.n	800aa80 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800aa2a:	2328      	movs	r3, #40	@ 0x28
 800aa2c:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800aa2e:	4b6e      	ldr	r3, [pc, #440]	@ (800abe8 <LmHandlerConfigure+0x238>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00c      	beq.n	800aa52 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800aa38:	f107 0318 	add.w	r3, r7, #24
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f004 fb73 	bl	800f128 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800aa42:	4b69      	ldr	r3, [pc, #420]	@ (800abe8 <LmHandlerConfigure+0x238>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	69fa      	ldr	r2, [r7, #28]
 800aa4a:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 800aa4e:	4610      	mov	r0, r2
 800aa50:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800aa52:	2327      	movs	r3, #39	@ 0x27
 800aa54:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800aa56:	f107 0318 	add.w	r3, r7, #24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f004 fd3c 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10c      	bne.n	800aa80 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800aa66:	2301      	movs	r3, #1
 800aa68:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800aa6a:	f107 0318 	add.w	r3, r7, #24
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f004 fb5a 	bl	800f128 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800aa74:	7f3b      	ldrb	r3, [r7, #28]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800aa7a:	4b5a      	ldr	r3, [pc, #360]	@ (800abe4 <LmHandlerConfigure+0x234>)
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800aa80:	4b58      	ldr	r3, [pc, #352]	@ (800abe4 <LmHandlerConfigure+0x234>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d022      	beq.n	800aace <LmHandlerConfigure+0x11e>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800aa88:	4b57      	ldr	r3, [pc, #348]	@ (800abe8 <LmHandlerConfigure+0x238>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800aa92:	4b55      	ldr	r3, [pc, #340]	@ (800abe8 <LmHandlerConfigure+0x238>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69db      	ldr	r3, [r3, #28]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800aa9c:	2327      	movs	r3, #39	@ 0x27
 800aa9e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800aaa0:	f107 0318 	add.w	r3, r7, #24
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f004 fb3f 	bl	800f128 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800aaae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aab0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800aab4:	4b46      	ldr	r3, [pc, #280]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800aab6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800aab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaba:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800aabe:	4b44      	ldr	r3, [pc, #272]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800aac0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800aac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aac4:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800aac8:	4b41      	ldr	r3, [pc, #260]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800aaca:	709a      	strb	r2, [r3, #2]
 800aacc:	e008      	b.n	800aae0 <LmHandlerConfigure+0x130>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800aace:	2305      	movs	r3, #5
 800aad0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800aad2:	2300      	movs	r3, #0
 800aad4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800aad6:	f107 0318 	add.w	r3, r7, #24
 800aada:	4618      	mov	r0, r3
 800aadc:	f004 fcfc 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800aae0:	4b3e      	ldr	r3, [pc, #248]	@ (800abdc <LmHandlerConfigure+0x22c>)
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	4a3d      	ldr	r2, [pc, #244]	@ (800abdc <LmHandlerConfigure+0x22c>)
 800aae6:	68d2      	ldr	r2, [r2, #12]
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f00c fb4c 	bl	8017188 <SecureElementInitMcuID>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <LmHandlerConfigure+0x14c>
    {
        return LORAMAC_HANDLER_ERROR;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	e065      	b.n	800abc8 <LmHandlerConfigure+0x218>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800aafc:	2306      	movs	r3, #6
 800aafe:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ab00:	f107 0318 	add.w	r3, r7, #24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f004 fb0f 	bl	800f128 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4a37      	ldr	r2, [pc, #220]	@ (800abec <LmHandlerConfigure+0x23c>)
 800ab0e:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab10:	f107 0318 	add.w	r3, r7, #24
 800ab14:	4618      	mov	r0, r3
 800ab16:	f004 fcdf 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800ab1e:	4b33      	ldr	r3, [pc, #204]	@ (800abec <LmHandlerConfigure+0x23c>)
 800ab20:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ab22:	f107 0318 	add.w	r3, r7, #24
 800ab26:	4618      	mov	r0, r3
 800ab28:	f004 fafe 	bl	800f128 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800ab30:	4b2f      	ldr	r3, [pc, #188]	@ (800abf0 <LmHandlerConfigure+0x240>)
 800ab32:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ab34:	f107 0318 	add.w	r3, r7, #24
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f004 faf5 	bl	800f128 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800ab3e:	f00c fba3 	bl	8017288 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ab42:	230f      	movs	r3, #15
 800ab44:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ab46:	2301      	movs	r3, #1
 800ab48:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab4a:	f107 0318 	add.w	r3, r7, #24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f004 fcc2 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ab54:	2310      	movs	r3, #16
 800ab56:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab5c:	f107 0318 	add.w	r3, r7, #24
 800ab60:	4618      	mov	r0, r3
 800ab62:	f004 fcb9 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ab66:	2304      	movs	r3, #4
 800ab68:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ab6a:	4b19      	ldr	r3, [pc, #100]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800ab6c:	789b      	ldrb	r3, [r3, #2]
 800ab6e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab70:	f107 0318 	add.w	r3, r7, #24
 800ab74:	4618      	mov	r0, r3
 800ab76:	f004 fcaf 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ab7a:	233a      	movs	r3, #58	@ 0x3a
 800ab7c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ab7e:	4b14      	ldr	r3, [pc, #80]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ab84:	f107 0318 	add.w	r3, r7, #24
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f004 fca5 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ab8e:	230f      	movs	r3, #15
 800ab90:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ab92:	4b0f      	ldr	r3, [pc, #60]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f107 0210 	add.w	r2, r7, #16
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f007 fbc2 	bl	8012326 <RegionGetPhyParam>
 800aba2:	4603      	mov	r3, r0
 800aba4:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bf14      	ite	ne
 800abac:	2301      	movne	r3, #1
 800abae:	2300      	moveq	r3, #0
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	4b07      	ldr	r3, [pc, #28]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800abb4:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800abb6:	2014      	movs	r0, #20
 800abb8:	f000 fa1e 	bl	800aff8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800abbc:	4b04      	ldr	r3, [pc, #16]	@ (800abd0 <LmHandlerConfigure+0x220>)
 800abbe:	79db      	ldrb	r3, [r3, #7]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f005 fb03 	bl	80101cc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3748      	adds	r7, #72	@ 0x48
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	200009dc 	.word	0x200009dc
 800abd4:	20000a24 	.word	0x20000a24
 800abd8:	08021558 	.word	0x08021558
 800abdc:	20000a08 	.word	0x20000a08
 800abe0:	200009f8 	.word	0x200009f8
 800abe4:	20000a25 	.word	0x20000a25
 800abe8:	200009f4 	.word	0x200009f4
 800abec:	200009b0 	.word	0x200009b0
 800abf0:	200009b8 	.word	0x200009b8

0800abf4 <LmHandlerJoin>:
    return DutyCycleWaitTime;
}
#if MY_TX
#if MY_TX_ABP
void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08c      	sub	sp, #48	@ 0x30
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	460a      	mov	r2, r1
 800abfe:	71fb      	strb	r3, [r7, #7]
 800ac00:	4613      	mov	r3, r2
 800ac02:	71bb      	strb	r3, [r7, #6]

	if( mode == ACTIVATION_TYPE_ABP )
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d10d      	bne.n	800ac26 <LmHandlerJoin+0x32>
	{

		MibRequestConfirm_t mibReq;

		JoinParams.forceRejoin = forceRejoin;
 800ac0a:	4a09      	ldr	r2, [pc, #36]	@ (800ac30 <LmHandlerJoin+0x3c>)
 800ac0c:	79bb      	ldrb	r3, [r7, #6]
 800ac0e:	7213      	strb	r3, [r2, #8]

		LoRaMacStart();
 800ac10:	f004 f9ec 	bl	800efec <LoRaMacStart>

		mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ac14:	2301      	movs	r3, #1
 800ac16:	723b      	strb	r3, [r7, #8]
		mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	733b      	strb	r3, [r7, #12]
		LoRaMacMibSetRequestConfirm( &mibReq );
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	4618      	mov	r0, r3
 800ac22:	f004 fc59 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>
	}
}
 800ac26:	bf00      	nop
 800ac28:	3730      	adds	r7, #48	@ 0x30
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20000078 	.word	0x20000078

0800ac34 <LmHandlerJoinStatus>:
#endif /* LORAMAC_VERSION */
}
#endif

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08c      	sub	sp, #48	@ 0x30
 800ac38:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800ac3e:	1d3b      	adds	r3, r7, #4
 800ac40:	4618      	mov	r0, r3
 800ac42:	f004 fa71 	bl	800f128 <LoRaMacMibGetRequestConfirm>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800ac4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ac54:	7a3b      	ldrb	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e002      	b.n	800ac64 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e000      	b.n	800ac64 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800ac62:	2300      	movs	r3, #0
    }
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3730      	adds	r7, #48	@ 0x30
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <LmHandlerSend>:
LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	@ 0x28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ac7c:	23ff      	movs	r3, #255	@ 0xff
 800ac7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800ac82:	f001 fbbf 	bl	800c404 <LoRaMacIsBusy>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ac8c:	f06f 0301 	mvn.w	r3, #1
 800ac90:	e0ab      	b.n	800adea <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800ac92:	f001 fbdf 	bl	800c454 <LoRaMacIsStopped>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ac9c:	f06f 0302 	mvn.w	r3, #2
 800aca0:	e0a3      	b.n	800adea <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800aca2:	f7ff ffc7 	bl	800ac34 <LmHandlerJoinStatus>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d00a      	beq.n	800acc2 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800acac:	4b51      	ldr	r3, [pc, #324]	@ (800adf4 <LmHandlerSend+0x188>)
 800acae:	79db      	ldrb	r3, [r3, #7]
 800acb0:	4a50      	ldr	r2, [pc, #320]	@ (800adf4 <LmHandlerSend+0x188>)
 800acb2:	7a12      	ldrb	r2, [r2, #8]
 800acb4:	4611      	mov	r1, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff ff9c 	bl	800abf4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800acbc:	f06f 0302 	mvn.w	r3, #2
 800acc0:	e093      	b.n	800adea <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800acc2:	4a4d      	ldr	r2, [pc, #308]	@ (800adf8 <LmHandlerSend+0x18c>)
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800acc8:	78fb      	ldrb	r3, [r7, #3]
 800acca:	2b00      	cmp	r3, #0
 800accc:	bf14      	ite	ne
 800acce:	2301      	movne	r3, #1
 800acd0:	2300      	moveq	r3, #0
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800acd6:	4b49      	ldr	r3, [pc, #292]	@ (800adfc <LmHandlerSend+0x190>)
 800acd8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800acdc:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	785b      	ldrb	r3, [r3, #1]
 800ace2:	f107 020c 	add.w	r2, r7, #12
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f004 f98d 	bl	800f008 <LoRaMacQueryTxPossible>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800acf4:	2300      	movs	r3, #0
 800acf6:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800acf8:	2300      	movs	r3, #0
 800acfa:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ad00:	23f9      	movs	r3, #249	@ 0xf9
 800ad02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad06:	e008      	b.n	800ad1a <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	785b      	ldrb	r3, [r3, #1]
 800ad12:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ad1a:	4b37      	ldr	r3, [pc, #220]	@ (800adf8 <LmHandlerSend+0x18c>)
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	3310      	adds	r3, #16
 800ad20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad24:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ad28:	4b34      	ldr	r3, [pc, #208]	@ (800adfc <LmHandlerSend+0x190>)
 800ad2a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ad2e:	4b32      	ldr	r3, [pc, #200]	@ (800adf8 <LmHandlerSend+0x18c>)
 800ad30:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800ad32:	78ba      	ldrb	r2, [r7, #2]
 800ad34:	f107 0310 	add.w	r3, r7, #16
 800ad38:	4611      	mov	r1, r2
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f005 f90e 	bl	800ff5c <LoRaMacMcpsRequest>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	4a2d      	ldr	r2, [pc, #180]	@ (800ae00 <LmHandlerSend+0x194>)
 800ad4a:	6013      	str	r3, [r2, #0]

    switch( status )
 800ad4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad50:	2b11      	cmp	r3, #17
 800ad52:	d843      	bhi.n	800addc <LmHandlerSend+0x170>
 800ad54:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <LmHandlerSend+0xf0>)
 800ad56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5a:	bf00      	nop
 800ad5c:	0800ada5 	.word	0x0800ada5
 800ad60:	0800adbd 	.word	0x0800adbd
 800ad64:	0800addd 	.word	0x0800addd
 800ad68:	0800addd 	.word	0x0800addd
 800ad6c:	0800addd 	.word	0x0800addd
 800ad70:	0800addd 	.word	0x0800addd
 800ad74:	0800addd 	.word	0x0800addd
 800ad78:	0800adc5 	.word	0x0800adc5
 800ad7c:	0800addd 	.word	0x0800addd
 800ad80:	0800addd 	.word	0x0800addd
 800ad84:	0800addd 	.word	0x0800addd
 800ad88:	0800add5 	.word	0x0800add5
 800ad8c:	0800addd 	.word	0x0800addd
 800ad90:	0800addd 	.word	0x0800addd
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adbd 	.word	0x0800adbd
 800ad9c:	0800adbd 	.word	0x0800adbd
 800ada0:	0800adcd 	.word	0x0800adcd
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800ada4:	4b17      	ldr	r3, [pc, #92]	@ (800ae04 <LmHandlerSend+0x198>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800adaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800adae:	f113 0f07 	cmn.w	r3, #7
 800adb2:	d017      	beq.n	800ade4 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800adb4:	2300      	movs	r3, #0
 800adb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800adba:	e013      	b.n	800ade4 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800adbc:	23fe      	movs	r3, #254	@ 0xfe
 800adbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800adc2:	e010      	b.n	800ade6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800adc4:	23fd      	movs	r3, #253	@ 0xfd
 800adc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800adca:	e00c      	b.n	800ade6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800adcc:	23fb      	movs	r3, #251	@ 0xfb
 800adce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800add2:	e008      	b.n	800ade6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800add4:	23fa      	movs	r3, #250	@ 0xfa
 800add6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800adda:	e004      	b.n	800ade6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800addc:	23ff      	movs	r3, #255	@ 0xff
 800adde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ade2:	e000      	b.n	800ade6 <LmHandlerSend+0x17a>
            break;
 800ade4:	bf00      	nop
    }

    return lmhStatus;
 800ade6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800adea:	4618      	mov	r0, r3
 800adec:	3728      	adds	r7, #40	@ 0x28
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000078 	.word	0x20000078
 800adf8:	20000084 	.word	0x20000084
 800adfc:	200009dc 	.word	0x200009dc
 800ae00:	20000a20 	.word	0x20000a20
 800ae04:	20000a24 	.word	0x20000a24

0800ae08 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ae0e:	2309      	movs	r3, #9
 800ae10:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ae12:	463b      	mov	r3, r7
 800ae14:	4618      	mov	r0, r3
 800ae16:	f004 ff09 	bl	800fc2c <LoRaMacMlmeRequest>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	4a06      	ldr	r2, [pc, #24]	@ (800ae3c <LmHandlerDeviceTimeReq+0x34>)
 800ae22:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e001      	b.n	800ae32 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ae2e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000a20 	.word	0x20000a20

0800ae40 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	4603      	mov	r3, r0
 800ae48:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ae4a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bc80      	pop	{r7}
 800ae56:	4770      	bx	lr

0800ae58 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08e      	sub	sp, #56	@ 0x38
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ae62:	2300      	movs	r3, #0
 800ae64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800ae68:	f001 facc 	bl	800c404 <LoRaMacIsBusy>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ae72:	f06f 0301 	mvn.w	r3, #1
 800ae76:	e071      	b.n	800af5c <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800ae78:	f7ff fedc 	bl	800ac34 <LmHandlerJoinStatus>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d002      	beq.n	800ae88 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ae82:	f06f 0302 	mvn.w	r3, #2
 800ae86:	e069      	b.n	800af5c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ae8c:	f107 030c 	add.w	r3, r7, #12
 800ae90:	4618      	mov	r0, r3
 800ae92:	f004 f949 	bl	800f128 <LoRaMacMibGetRequestConfirm>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ae9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aea0:	e05c      	b.n	800af5c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800aea2:	7c3b      	ldrb	r3, [r7, #16]
 800aea4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800aea8:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800aeac:	79fb      	ldrb	r3, [r7, #7]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d052      	beq.n	800af58 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d028      	beq.n	800af0a <LmHandlerRequestClass+0xb2>
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	dc48      	bgt.n	800af4e <LmHandlerRequestClass+0xf6>
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <LmHandlerRequestClass+0x6e>
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d01e      	beq.n	800af02 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800aec4:	e043      	b.n	800af4e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800aec6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d041      	beq.n	800af52 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800aed2:	f107 030c 	add.w	r3, r7, #12
 800aed6:	4618      	mov	r0, r3
 800aed8:	f004 fafe 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10b      	bne.n	800aefa <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800aee2:	4b20      	ldr	r3, [pc, #128]	@ (800af64 <LmHandlerRequestClass+0x10c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d032      	beq.n	800af52 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800aeec:	4b1d      	ldr	r3, [pc, #116]	@ (800af64 <LmHandlerRequestClass+0x10c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aef2:	79fa      	ldrb	r2, [r7, #7]
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
                break;
 800aef8:	e02b      	b.n	800af52 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800aefa:	23ff      	movs	r3, #255	@ 0xff
 800aefc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af00:	e027      	b.n	800af52 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800af02:	23ff      	movs	r3, #255	@ 0xff
 800af04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af08:	e026      	b.n	800af58 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800af0a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800af12:	23ff      	movs	r3, #255	@ 0xff
 800af14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af18:	e01d      	b.n	800af56 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800af1e:	f107 030c 	add.w	r3, r7, #12
 800af22:	4618      	mov	r0, r3
 800af24:	f004 fad8 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10b      	bne.n	800af46 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800af2e:	4b0d      	ldr	r3, [pc, #52]	@ (800af64 <LmHandlerRequestClass+0x10c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00e      	beq.n	800af56 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800af38:	4b0a      	ldr	r3, [pc, #40]	@ (800af64 <LmHandlerRequestClass+0x10c>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3e:	79fa      	ldrb	r2, [r7, #7]
 800af40:	4610      	mov	r0, r2
 800af42:	4798      	blx	r3
                break;
 800af44:	e007      	b.n	800af56 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800af46:	23ff      	movs	r3, #255	@ 0xff
 800af48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800af4c:	e003      	b.n	800af56 <LmHandlerRequestClass+0xfe>
                break;
 800af4e:	bf00      	nop
 800af50:	e002      	b.n	800af58 <LmHandlerRequestClass+0x100>
                break;
 800af52:	bf00      	nop
 800af54:	e000      	b.n	800af58 <LmHandlerRequestClass+0x100>
                break;
 800af56:	bf00      	nop
        }
    }
    return errorStatus;
 800af58:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3738      	adds	r7, #56	@ 0x38
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	200009f4 	.word	0x200009f4

0800af68 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08c      	sub	sp, #48	@ 0x30
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d102      	bne.n	800af7c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800af76:	f04f 33ff 	mov.w	r3, #4294967295
 800af7a:	e010      	b.n	800af9e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800af7c:	2300      	movs	r3, #0
 800af7e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4618      	mov	r0, r3
 800af86:	f004 f8cf 	bl	800f128 <LoRaMacMibGetRequestConfirm>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800af90:	f04f 33ff 	mov.w	r3, #4294967295
 800af94:	e003      	b.n	800af9e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800af96:	7b3a      	ldrb	r2, [r7, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3730      	adds	r7, #48	@ 0x30
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08c      	sub	sp, #48	@ 0x30
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d102      	bne.n	800afbc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
 800afba:	e016      	b.n	800afea <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800afbc:	2320      	movs	r3, #32
 800afbe:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	4618      	mov	r0, r3
 800afc6:	f004 f8af 	bl	800f128 <LoRaMacMibGetRequestConfirm>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800afd0:	f04f 33ff 	mov.w	r3, #4294967295
 800afd4:	e009      	b.n	800afea <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800afd6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f993 2000 	ldrsb.w	r2, [r3]
 800afe4:	4b03      	ldr	r3, [pc, #12]	@ (800aff4 <LmHandlerGetTxDatarate+0x4c>)
 800afe6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3730      	adds	r7, #48	@ 0x30
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	200009dc 	.word	0x200009dc

0800aff8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08c      	sub	sp, #48	@ 0x30
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800b000:	2323      	movs	r3, #35	@ 0x23
 800b002:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b008:	f107 0308 	add.w	r3, r7, #8
 800b00c:	4618      	mov	r0, r3
 800b00e:	f004 fa63 	bl	800f4d8 <LoRaMacMibSetRequestConfirm>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800b018:	f04f 33ff 	mov.w	r3, #4294967295
 800b01c:	e000      	b.n	800b020 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3730      	adds	r7, #48	@ 0x30
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800b030:	4b18      	ldr	r3, [pc, #96]	@ (800b094 <McpsConfirm+0x6c>)
 800b032:	2201      	movs	r2, #1
 800b034:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	785a      	ldrb	r2, [r3, #1]
 800b03a:	4b16      	ldr	r3, [pc, #88]	@ (800b094 <McpsConfirm+0x6c>)
 800b03c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	789b      	ldrb	r3, [r3, #2]
 800b042:	b25a      	sxtb	r2, r3
 800b044:	4b13      	ldr	r3, [pc, #76]	@ (800b094 <McpsConfirm+0x6c>)
 800b046:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	4a11      	ldr	r2, [pc, #68]	@ (800b094 <McpsConfirm+0x6c>)
 800b04e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800b056:	4b0f      	ldr	r3, [pc, #60]	@ (800b094 <McpsConfirm+0x6c>)
 800b058:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	4b0c      	ldr	r3, [pc, #48]	@ (800b094 <McpsConfirm+0x6c>)
 800b062:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	791b      	ldrb	r3, [r3, #4]
 800b068:	461a      	mov	r2, r3
 800b06a:	4b0a      	ldr	r3, [pc, #40]	@ (800b094 <McpsConfirm+0x6c>)
 800b06c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800b06e:	4b0a      	ldr	r3, [pc, #40]	@ (800b098 <McpsConfirm+0x70>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	2b00      	cmp	r3, #0
 800b076:	d004      	beq.n	800b082 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b078:	4b07      	ldr	r3, [pc, #28]	@ (800b098 <McpsConfirm+0x70>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07e:	4805      	ldr	r0, [pc, #20]	@ (800b094 <McpsConfirm+0x6c>)
 800b080:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	2000      	movs	r0, #0
 800b086:	f000 f963 	bl	800b350 <LmHandlerPackagesNotify>
}
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000084 	.word	0x20000084
 800b098:	200009f4 	.word	0x200009f4

0800b09c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800b0aa:	4b2d      	ldr	r3, [pc, #180]	@ (800b160 <McpsIndication+0xc4>)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	785a      	ldrb	r2, [r3, #1]
 800b0b4:	4b2a      	ldr	r3, [pc, #168]	@ (800b160 <McpsIndication+0xc4>)
 800b0b6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800b0b8:	4b29      	ldr	r3, [pc, #164]	@ (800b160 <McpsIndication+0xc4>)
 800b0ba:	785b      	ldrb	r3, [r3, #1]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d14b      	bne.n	800b158 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	791b      	ldrb	r3, [r3, #4]
 800b0c4:	b25a      	sxtb	r2, r3
 800b0c6:	4b26      	ldr	r3, [pc, #152]	@ (800b160 <McpsIndication+0xc4>)
 800b0c8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0d0:	b25a      	sxtb	r2, r3
 800b0d2:	4b23      	ldr	r3, [pc, #140]	@ (800b160 <McpsIndication+0xc4>)
 800b0d4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800b0dc:	4b20      	ldr	r3, [pc, #128]	@ (800b160 <McpsIndication+0xc4>)
 800b0de:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	78da      	ldrb	r2, [r3, #3]
 800b0e4:	4b1e      	ldr	r3, [pc, #120]	@ (800b160 <McpsIndication+0xc4>)
 800b0e6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	4a1c      	ldr	r2, [pc, #112]	@ (800b160 <McpsIndication+0xc4>)
 800b0ee:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	78db      	ldrb	r3, [r3, #3]
 800b0f4:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	7b1b      	ldrb	r3, [r3, #12]
 800b0fa:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800b102:	4b18      	ldr	r3, [pc, #96]	@ (800b164 <McpsIndication+0xc8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d007      	beq.n	800b11c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800b10c:	4b15      	ldr	r3, [pc, #84]	@ (800b164 <McpsIndication+0xc8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b112:	f107 0210 	add.w	r2, r7, #16
 800b116:	4912      	ldr	r1, [pc, #72]	@ (800b160 <McpsIndication+0xc4>)
 800b118:	4610      	mov	r0, r2
 800b11a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800b11c:	4b11      	ldr	r3, [pc, #68]	@ (800b164 <McpsIndication+0xc8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b122:	2b00      	cmp	r3, #0
 800b124:	d007      	beq.n	800b136 <McpsIndication+0x9a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	7e1b      	ldrb	r3, [r3, #24]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d003      	beq.n	800b136 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800b12e:	4b0d      	ldr	r3, [pc, #52]	@ (800b164 <McpsIndication+0xc8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b134:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800b136:	6879      	ldr	r1, [r7, #4]
 800b138:	2001      	movs	r0, #1
 800b13a:	f000 f909 	bl	800b350 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800b13e:	f107 030f 	add.w	r3, r7, #15
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff ff10 	bl	800af68 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	795b      	ldrb	r3, [r3, #5]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d004      	beq.n	800b15a <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800b150:	4b05      	ldr	r3, [pc, #20]	@ (800b168 <McpsIndication+0xcc>)
 800b152:	2201      	movs	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	e000      	b.n	800b15a <McpsIndication+0xbe>
        return;
 800b158:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	200000a0 	.word	0x200000a0
 800b164:	200009f4 	.word	0x200009f4
 800b168:	20000a24 	.word	0x20000a24

0800b16c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08c      	sub	sp, #48	@ 0x30
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800b174:	4b49      	ldr	r3, [pc, #292]	@ (800b29c <MlmeConfirm+0x130>)
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	785a      	ldrb	r2, [r3, #1]
 800b17e:	4b47      	ldr	r3, [pc, #284]	@ (800b29c <MlmeConfirm+0x130>)
 800b180:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800b182:	4b47      	ldr	r3, [pc, #284]	@ (800b2a0 <MlmeConfirm+0x134>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d004      	beq.n	800b196 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b18c:	4b44      	ldr	r3, [pc, #272]	@ (800b2a0 <MlmeConfirm+0x134>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b192:	4842      	ldr	r0, [pc, #264]	@ (800b29c <MlmeConfirm+0x130>)
 800b194:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	2002      	movs	r0, #2
 800b19a:	f000 f8d9 	bl	800b350 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	2b0b      	cmp	r3, #11
 800b1a6:	d872      	bhi.n	800b28e <MlmeConfirm+0x122>
 800b1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b0 <MlmeConfirm+0x44>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1e1 	.word	0x0800b1e1
 800b1b4:	0800b28f 	.word	0x0800b28f
 800b1b8:	0800b28f 	.word	0x0800b28f
 800b1bc:	0800b28f 	.word	0x0800b28f
 800b1c0:	0800b25d 	.word	0x0800b25d
 800b1c4:	0800b28f 	.word	0x0800b28f
 800b1c8:	0800b28f 	.word	0x0800b28f
 800b1cc:	0800b28f 	.word	0x0800b28f
 800b1d0:	0800b28f 	.word	0x0800b28f
 800b1d4:	0800b28f 	.word	0x0800b28f
 800b1d8:	0800b275 	.word	0x0800b275
 800b1dc:	0800b28f 	.word	0x0800b28f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800b1e0:	2306      	movs	r3, #6
 800b1e2:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800b1e4:	f107 0308 	add.w	r3, r7, #8
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f003 ff9d 	bl	800f128 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800b1ee:	4b2d      	ldr	r3, [pc, #180]	@ (800b2a4 <MlmeConfirm+0x138>)
 800b1f0:	79db      	ldrb	r3, [r3, #7]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f00c fa98 	bl	801772c <SecureElementSetDevAddr>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d102      	bne.n	800b208 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4a28      	ldr	r2, [pc, #160]	@ (800b2a8 <MlmeConfirm+0x13c>)
 800b206:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800b208:	4828      	ldr	r0, [pc, #160]	@ (800b2ac <MlmeConfirm+0x140>)
 800b20a:	f7ff fecd 	bl	800afa8 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800b20e:	4828      	ldr	r0, [pc, #160]	@ (800b2b0 <MlmeConfirm+0x144>)
 800b210:	f000 f91a 	bl	800b448 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b214:	4b21      	ldr	r3, [pc, #132]	@ (800b29c <MlmeConfirm+0x130>)
 800b216:	785b      	ldrb	r3, [r3, #1]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d108      	bne.n	800b22e <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b21c:	4b21      	ldr	r3, [pc, #132]	@ (800b2a4 <MlmeConfirm+0x138>)
 800b21e:	2200      	movs	r2, #0
 800b220:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800b222:	4b24      	ldr	r3, [pc, #144]	@ (800b2b4 <MlmeConfirm+0x148>)
 800b224:	785b      	ldrb	r3, [r3, #1]
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff fe16 	bl	800ae58 <LmHandlerRequestClass>
 800b22c:	e002      	b.n	800b234 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800b22e:	4b1d      	ldr	r3, [pc, #116]	@ (800b2a4 <MlmeConfirm+0x138>)
 800b230:	22ff      	movs	r2, #255	@ 0xff
 800b232:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800b234:	4b1a      	ldr	r3, [pc, #104]	@ (800b2a0 <MlmeConfirm+0x134>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d004      	beq.n	800b248 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b23e:	4b18      	ldr	r3, [pc, #96]	@ (800b2a0 <MlmeConfirm+0x134>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	4817      	ldr	r0, [pc, #92]	@ (800b2a4 <MlmeConfirm+0x138>)
 800b246:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b248:	4b14      	ldr	r3, [pc, #80]	@ (800b29c <MlmeConfirm+0x130>)
 800b24a:	785b      	ldrb	r3, [r3, #1]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d120      	bne.n	800b292 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800b250:	4b14      	ldr	r3, [pc, #80]	@ (800b2a4 <MlmeConfirm+0x138>)
 800b252:	79db      	ldrb	r3, [r3, #7]
 800b254:	4618      	mov	r0, r3
 800b256:	f00c f82b 	bl	80172b0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800b25a:	e01a      	b.n	800b292 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800b25c:	4b16      	ldr	r3, [pc, #88]	@ (800b2b8 <MlmeConfirm+0x14c>)
 800b25e:	2201      	movs	r2, #1
 800b260:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7a1a      	ldrb	r2, [r3, #8]
 800b266:	4b14      	ldr	r3, [pc, #80]	@ (800b2b8 <MlmeConfirm+0x14c>)
 800b268:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	7a5a      	ldrb	r2, [r3, #9]
 800b26e:	4b12      	ldr	r3, [pc, #72]	@ (800b2b8 <MlmeConfirm+0x14c>)
 800b270:	74da      	strb	r2, [r3, #19]
            }
            break;
 800b272:	e00f      	b.n	800b294 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d105      	bne.n	800b288 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800b27c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b4 <MlmeConfirm+0x148>)
 800b27e:	7c1b      	ldrb	r3, [r3, #16]
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fddd 	bl	800ae40 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800b286:	e005      	b.n	800b294 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800b288:	f7ff fdbe 	bl	800ae08 <LmHandlerDeviceTimeReq>
            break;
 800b28c:	e002      	b.n	800b294 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800b28e:	bf00      	nop
 800b290:	e000      	b.n	800b294 <MlmeConfirm+0x128>
            break;
 800b292:	bf00      	nop
    }
}
 800b294:	bf00      	nop
 800b296:	3730      	adds	r7, #48	@ 0x30
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	20000084 	.word	0x20000084
 800b2a0:	200009f4 	.word	0x200009f4
 800b2a4:	20000078 	.word	0x20000078
 800b2a8:	200009b0 	.word	0x200009b0
 800b2ac:	2000007c 	.word	0x2000007c
 800b2b0:	2000007d 	.word	0x2000007d
 800b2b4:	200009dc 	.word	0x200009dc
 800b2b8:	200000a0 	.word	0x200000a0

0800b2bc <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800b2c6:	4b20      	ldr	r3, [pc, #128]	@ (800b348 <MlmeIndication+0x8c>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	785a      	ldrb	r2, [r3, #1]
 800b2d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b348 <MlmeIndication+0x8c>)
 800b2d2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	789b      	ldrb	r3, [r3, #2]
 800b2d8:	b25a      	sxtb	r2, r3
 800b2da:	4b1b      	ldr	r3, [pc, #108]	@ (800b348 <MlmeIndication+0x8c>)
 800b2dc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2e4:	b25a      	sxtb	r2, r3
 800b2e6:	4b18      	ldr	r3, [pc, #96]	@ (800b348 <MlmeIndication+0x8c>)
 800b2e8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800b2f0:	4b15      	ldr	r3, [pc, #84]	@ (800b348 <MlmeIndication+0x8c>)
 800b2f2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	78da      	ldrb	r2, [r3, #3]
 800b2f8:	4b13      	ldr	r3, [pc, #76]	@ (800b348 <MlmeIndication+0x8c>)
 800b2fa:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	4a11      	ldr	r2, [pc, #68]	@ (800b348 <MlmeIndication+0x8c>)
 800b302:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800b304:	4b11      	ldr	r3, [pc, #68]	@ (800b34c <MlmeIndication+0x90>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00d      	beq.n	800b32a <MlmeIndication+0x6e>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b0a      	cmp	r3, #10
 800b314:	d009      	beq.n	800b32a <MlmeIndication+0x6e>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b0e      	cmp	r3, #14
 800b31c:	d005      	beq.n	800b32a <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800b31e:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <MlmeIndication+0x90>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b324:	4908      	ldr	r1, [pc, #32]	@ (800b348 <MlmeIndication+0x8c>)
 800b326:	2000      	movs	r0, #0
 800b328:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	2003      	movs	r0, #3
 800b32e:	f000 f80f 	bl	800b350 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b0a      	cmp	r3, #10
 800b338:	d001      	beq.n	800b33e <MlmeIndication+0x82>
 800b33a:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800b33c:	e000      	b.n	800b340 <MlmeIndication+0x84>
            break;
 800b33e:	bf00      	nop
    }
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	200000a0 	.word	0x200000a0
 800b34c:	200009f4 	.word	0x200009f4

0800b350 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
 800b360:	e067      	b.n	800b432 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800b362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b366:	4a37      	ldr	r2, [pc, #220]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d05a      	beq.n	800b426 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	2b03      	cmp	r3, #3
 800b374:	d84e      	bhi.n	800b414 <LmHandlerPackagesNotify+0xc4>
 800b376:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <LmHandlerPackagesNotify+0x2c>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b3af 	.word	0x0800b3af
 800b384:	0800b3d1 	.word	0x0800b3d1
 800b388:	0800b3f3 	.word	0x0800b3f3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800b38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b390:	4a2c      	ldr	r2, [pc, #176]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d03d      	beq.n	800b418 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800b39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a0:	4a28      	ldr	r2, [pc, #160]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	6838      	ldr	r0, [r7, #0]
 800b3aa:	4798      	blx	r3
                        }
                        break;
 800b3ac:	e034      	b.n	800b418 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800b3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3b2:	4a24      	ldr	r2, [pc, #144]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d02e      	beq.n	800b41c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800b3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3c2:	4a20      	ldr	r2, [pc, #128]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	6838      	ldr	r0, [r7, #0]
 800b3cc:	4798      	blx	r3
                        }
                        break;
 800b3ce:	e025      	b.n	800b41c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800b3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d4:	4a1b      	ldr	r2, [pc, #108]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01f      	beq.n	800b420 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800b3e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3e4:	4a17      	ldr	r2, [pc, #92]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
 800b3ec:	6838      	ldr	r0, [r7, #0]
 800b3ee:	4798      	blx	r3
                        }
                        break;
 800b3f0:	e016      	b.n	800b420 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800b3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3f6:	4a13      	ldr	r2, [pc, #76]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d010      	beq.n	800b424 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800b402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b406:	4a0f      	ldr	r2, [pc, #60]	@ (800b444 <LmHandlerPackagesNotify+0xf4>)
 800b408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40e:	6838      	ldr	r0, [r7, #0]
 800b410:	4798      	blx	r3
                        }
                        break;
 800b412:	e007      	b.n	800b424 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800b414:	bf00      	nop
 800b416:	e006      	b.n	800b426 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b418:	bf00      	nop
 800b41a:	e004      	b.n	800b426 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b41c:	bf00      	nop
 800b41e:	e002      	b.n	800b426 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b420:	bf00      	nop
 800b422:	e000      	b.n	800b426 <LmHandlerPackagesNotify+0xd6>
                        break;
 800b424:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	3301      	adds	r3, #1
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	73fb      	strb	r3, [r7, #15]
 800b432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b436:	2b04      	cmp	r3, #4
 800b438:	dd93      	ble.n	800b362 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800b43a:	bf00      	nop
 800b43c:	bf00      	nop
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	200009c8 	.word	0x200009c8

0800b448 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08c      	sub	sp, #48	@ 0x30
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d102      	bne.n	800b45c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800b456:	f04f 33ff 	mov.w	r3, #4294967295
 800b45a:	e016      	b.n	800b48a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800b45c:	2321      	movs	r3, #33	@ 0x21
 800b45e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b460:	f107 0308 	add.w	r3, r7, #8
 800b464:	4618      	mov	r0, r3
 800b466:	f003 fe5f 	bl	800f128 <LoRaMacMibGetRequestConfirm>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800b470:	f04f 33ff 	mov.w	r3, #4294967295
 800b474:	e009      	b.n	800b48a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800b476:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f993 2000 	ldrsb.w	r2, [r3]
 800b484:	4b03      	ldr	r3, [pc, #12]	@ (800b494 <LmHandlerGetTxPower+0x4c>)
 800b486:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3730      	adds	r7, #48	@ 0x30
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	200009dc 	.word	0x200009dc

0800b498 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800b498:	b590      	push	{r4, r7, lr}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b49e:	f00f feb9 	bl	801b214 <UTIL_TIMER_GetCurrentTime>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800b4d8 <OnRadioTxDone+0x40>)
 800b4a6:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b4a8:	4c0c      	ldr	r4, [pc, #48]	@ (800b4dc <OnRadioTxDone+0x44>)
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f00f fca5 	bl	801adfc <SysTimeGet>
 800b4b2:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800b4b6:	463a      	mov	r2, r7
 800b4b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4bc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b4c0:	4a07      	ldr	r2, [pc, #28]	@ (800b4e0 <OnRadioTxDone+0x48>)
 800b4c2:	7813      	ldrb	r3, [r2, #0]
 800b4c4:	f043 0320 	orr.w	r3, r3, #32
 800b4c8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b4ca:	f003 fa89 	bl	800e9e0 <OnMacProcessNotify>
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );

}
 800b4ce:	bf00      	nop
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd90      	pop	{r4, r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000fd8 	.word	0x20000fd8
 800b4dc:	20000a28 	.word	0x20000a28
 800b4e0:	20000fd4 	.word	0x20000fd4

0800b4e4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	817b      	strh	r3, [r7, #10]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	813b      	strh	r3, [r7, #8]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b4fe:	f00f fe89 	bl	801b214 <UTIL_TIMER_GetCurrentTime>
 800b502:	4603      	mov	r3, r0
 800b504:	4a11      	ldr	r2, [pc, #68]	@ (800b54c <OnRadioRxDone+0x68>)
 800b506:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800b508:	4a10      	ldr	r2, [pc, #64]	@ (800b54c <OnRadioRxDone+0x68>)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800b50e:	4a0f      	ldr	r2, [pc, #60]	@ (800b54c <OnRadioRxDone+0x68>)
 800b510:	897b      	ldrh	r3, [r7, #10]
 800b512:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800b514:	4a0d      	ldr	r2, [pc, #52]	@ (800b54c <OnRadioRxDone+0x68>)
 800b516:	893b      	ldrh	r3, [r7, #8]
 800b518:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800b51a:	4a0c      	ldr	r2, [pc, #48]	@ (800b54c <OnRadioRxDone+0x68>)
 800b51c:	79fb      	ldrb	r3, [r7, #7]
 800b51e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800b520:	4a0b      	ldr	r2, [pc, #44]	@ (800b550 <OnRadioRxDone+0x6c>)
 800b522:	7813      	ldrb	r3, [r2, #0]
 800b524:	f043 0310 	orr.w	r3, r3, #16
 800b528:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800b52a:	4a09      	ldr	r2, [pc, #36]	@ (800b550 <OnRadioRxDone+0x6c>)
 800b52c:	7813      	ldrb	r3, [r2, #0]
 800b52e:	f043 0301 	orr.w	r3, r3, #1
 800b532:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800b534:	f003 fa54 	bl	800e9e0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b538:	4b06      	ldr	r3, [pc, #24]	@ (800b554 <OnRadioRxDone+0x70>)
 800b53a:	2201      	movs	r2, #1
 800b53c:	2100      	movs	r1, #0
 800b53e:	2002      	movs	r0, #2
 800b540:	f00e fef4 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
}
 800b544:	bf00      	nop
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	20000fdc 	.word	0x20000fdc
 800b550:	20000fd4 	.word	0x20000fd4
 800b554:	080215a4 	.word	0x080215a4

0800b558 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b55c:	4a07      	ldr	r2, [pc, #28]	@ (800b57c <OnRadioTxTimeout+0x24>)
 800b55e:	7813      	ldrb	r3, [r2, #0]
 800b560:	f043 0308 	orr.w	r3, r3, #8
 800b564:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b566:	f003 fa3b 	bl	800e9e0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b56a:	4b05      	ldr	r3, [pc, #20]	@ (800b580 <OnRadioTxTimeout+0x28>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	2100      	movs	r1, #0
 800b570:	2002      	movs	r0, #2
 800b572:	f00e fedb 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>

}
 800b576:	bf00      	nop
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	20000fd4 	.word	0x20000fd4
 800b580:	080215b4 	.word	0x080215b4

0800b584 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800b588:	4a04      	ldr	r2, [pc, #16]	@ (800b59c <OnRadioRxError+0x18>)
 800b58a:	7813      	ldrb	r3, [r2, #0]
 800b58c:	f043 0304 	orr.w	r3, r3, #4
 800b590:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b592:	f003 fa25 	bl	800e9e0 <OnMacProcessNotify>
}
 800b596:	bf00      	nop
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20000fd4 	.word	0x20000fd4

0800b5a0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b5a4:	4a07      	ldr	r2, [pc, #28]	@ (800b5c4 <OnRadioRxTimeout+0x24>)
 800b5a6:	7813      	ldrb	r3, [r2, #0]
 800b5a8:	f043 0302 	orr.w	r3, r3, #2
 800b5ac:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800b5ae:	f003 fa17 	bl	800e9e0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b5b2:	4b05      	ldr	r3, [pc, #20]	@ (800b5c8 <OnRadioRxTimeout+0x28>)
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	2002      	movs	r0, #2
 800b5ba:	f00e feb7 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
}
 800b5be:	bf00      	nop
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000fd4 	.word	0x20000fd4
 800b5c8:	080215c4 	.word	0x080215c4

0800b5cc <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b5d0:	4b08      	ldr	r3, [pc, #32]	@ (800b5f4 <UpdateRxSlotIdleState+0x28>)
 800b5d2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d004      	beq.n	800b5e4 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800b5da:	4b07      	ldr	r3, [pc, #28]	@ (800b5f8 <UpdateRxSlotIdleState+0x2c>)
 800b5dc:	2206      	movs	r2, #6
 800b5de:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800b5e2:	e003      	b.n	800b5ec <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b5e4:	4b04      	ldr	r3, [pc, #16]	@ (800b5f8 <UpdateRxSlotIdleState+0x2c>)
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800b5ec:	bf00      	nop
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bc80      	pop	{r7}
 800b5f2:	4770      	bx	lr
 800b5f4:	20008000 	.word	0x20008000
 800b5f8:	20000a28 	.word	0x20000a28

0800b5fc <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b092      	sub	sp, #72	@ 0x48
 800b600:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b602:	4b54      	ldr	r3, [pc, #336]	@ (800b754 <ProcessRadioTxDone+0x158>)
 800b604:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d002      	beq.n	800b612 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800b60c:	4b52      	ldr	r3, [pc, #328]	@ (800b758 <ProcessRadioTxDone+0x15c>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b610:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
    TimerStart( &MacCtx.RxWindowTimer2 );
    CRITICAL_SECTION_END( );
#else
    if (Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE)
 800b612:	4b50      	ldr	r3, [pc, #320]	@ (800b754 <ProcessRadioTxDone+0x158>)
 800b614:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d12b      	bne.n	800b674 <ProcessRadioTxDone+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b61c:	f3ef 8310 	mrs	r3, PRIMASK
 800b620:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    {
        // Setup timers
        CRITICAL_SECTION_BEGIN( );
 800b624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800b626:	b672      	cpsid	i
}
 800b628:	bf00      	nop
        uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800b62a:	f00f fdf3 	bl	801b214 <UTIL_TIMER_GetCurrentTime>
 800b62e:	4602      	mov	r2, r0
 800b630:	4b4a      	ldr	r3, [pc, #296]	@ (800b75c <ProcessRadioTxDone+0x160>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	63bb      	str	r3, [r7, #56]	@ 0x38
        TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800b638:	4b49      	ldr	r3, [pc, #292]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b63a:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800b63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	4619      	mov	r1, r3
 800b644:	4847      	ldr	r0, [pc, #284]	@ (800b764 <ProcessRadioTxDone+0x168>)
 800b646:	f00f fdbb 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer1 );
 800b64a:	4846      	ldr	r0, [pc, #280]	@ (800b764 <ProcessRadioTxDone+0x168>)
 800b64c:	f00f fcda 	bl	801b004 <UTIL_TIMER_Start>
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800b650:	4b43      	ldr	r3, [pc, #268]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b652:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	4619      	mov	r1, r3
 800b65c:	4842      	ldr	r0, [pc, #264]	@ (800b768 <ProcessRadioTxDone+0x16c>)
 800b65e:	f00f fdaf 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800b662:	4841      	ldr	r0, [pc, #260]	@ (800b768 <ProcessRadioTxDone+0x16c>)
 800b664:	f00f fcce 	bl	801b004 <UTIL_TIMER_Start>
 800b668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b66a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b66e:	f383 8810 	msr	PRIMASK, r3
}
 800b672:	e00e      	b.n	800b692 <ProcessRadioTxDone+0x96>
        CRITICAL_SECTION_END( );
    }
    else
    {
        MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b674:	4b3a      	ldr	r3, [pc, #232]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b676:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67e:	4a38      	ldr	r2, [pc, #224]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b680:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b684:	4a36      	ldr	r2, [pc, #216]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b686:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b68a:	f043 0310 	orr.w	r3, r3, #16
 800b68e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800b692:	4b33      	ldr	r3, [pc, #204]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b694:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d01a      	beq.n	800b6d2 <ProcessRadioTxDone+0xd6>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800b69c:	2315      	movs	r3, #21
 800b69e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b6a2:	4b2c      	ldr	r3, [pc, #176]	@ (800b754 <ProcessRadioTxDone+0x158>)
 800b6a4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b6a8:	f107 0220 	add.w	r2, r7, #32
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f006 fe39 	bl	8012326 <RegionGetPhyParam>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800b6b8:	4b29      	ldr	r3, [pc, #164]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b6ba:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4829      	ldr	r0, [pc, #164]	@ (800b76c <ProcessRadioTxDone+0x170>)
 800b6c6:	f00f fd7b 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800b6ca:	4828      	ldr	r0, [pc, #160]	@ (800b76c <ProcessRadioTxDone+0x170>)
 800b6cc:	f00f fc9a 	bl	801b004 <UTIL_TIMER_Start>
 800b6d0:	e003      	b.n	800b6da <ProcessRadioTxDone+0xde>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b6d2:	4b23      	ldr	r3, [pc, #140]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800b6da:	4b20      	ldr	r3, [pc, #128]	@ (800b75c <ProcessRadioTxDone+0x160>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a1d      	ldr	r2, [pc, #116]	@ (800b754 <ProcessRadioTxDone+0x158>)
 800b6e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

     //Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800b6e2:	4b1f      	ldr	r3, [pc, #124]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b6e4:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800b6e8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	@ (800b75c <ProcessRadioTxDone+0x160>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b6f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f00f fbb9 	bl	801ae6c <SysTimeGetMcuTime>
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	4b15      	ldr	r3, [pc, #84]	@ (800b754 <ProcessRadioTxDone+0x158>)
 800b6fe:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800b702:	9200      	str	r2, [sp, #0]
 800b704:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800b708:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b70c:	ca06      	ldmia	r2, {r1, r2}
 800b70e:	f00f fb0e 	bl	801ad2e <SysTimeSub>
 800b712:	f107 0314 	add.w	r3, r7, #20
 800b716:	463a      	mov	r2, r7
 800b718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b71c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800b720:	4b0f      	ldr	r3, [pc, #60]	@ (800b760 <ProcessRadioTxDone+0x164>)
 800b722:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800b726:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800b728:	2301      	movs	r3, #1
 800b72a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b72c:	4b09      	ldr	r3, [pc, #36]	@ (800b754 <ProcessRadioTxDone+0x158>)
 800b72e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <ProcessRadioTxDone+0x13e>
    {
        txDone.Joined  = false;
 800b736:	2300      	movs	r3, #0
 800b738:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800b73a:	4b06      	ldr	r3, [pc, #24]	@ (800b754 <ProcessRadioTxDone+0x158>)
 800b73c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b740:	f107 0208 	add.w	r2, r7, #8
 800b744:	4611      	mov	r1, r2
 800b746:	4618      	mov	r0, r3
 800b748:	f006 fe0e 	bl	8012368 <RegionSetBandTxDone>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

}
 800b74c:	bf00      	nop
 800b74e:	3740      	adds	r7, #64	@ 0x40
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20008000 	.word	0x20008000
 800b758:	08021f8c 	.word	0x08021f8c
 800b75c:	20000fd8 	.word	0x20000fd8
 800b760:	20000a28 	.word	0x20000a28
 800b764:	20000da8 	.word	0x20000da8
 800b768:	20000dc0 	.word	0x20000dc0
 800b76c:	20000e28 	.word	0x20000e28

0800b770 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b774:	4b10      	ldr	r3, [pc, #64]	@ (800b7b8 <PrepareRxDoneAbort+0x48>)
 800b776:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b77e:	4a0e      	ldr	r2, [pc, #56]	@ (800b7b8 <PrepareRxDoneAbort+0x48>)
 800b780:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800b784:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b8 <PrepareRxDoneAbort+0x48>)
 800b786:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800b78e:	2000      	movs	r0, #0
 800b790:	f001 f9fa 	bl	800cb88 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800b794:	4a08      	ldr	r2, [pc, #32]	@ (800b7b8 <PrepareRxDoneAbort+0x48>)
 800b796:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b79a:	f043 0302 	orr.w	r3, r3, #2
 800b79e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b7a2:	4a05      	ldr	r2, [pc, #20]	@ (800b7b8 <PrepareRxDoneAbort+0x48>)
 800b7a4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b7a8:	f043 0310 	orr.w	r3, r3, #16
 800b7ac:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800b7b0:	f7ff ff0c 	bl	800b5cc <UpdateRxSlotIdleState>
}
 800b7b4:	bf00      	nop
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	20000a28 	.word	0x20000a28

0800b7bc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800b7bc:	b590      	push	{r4, r7, lr}
 800b7be:	b0ab      	sub	sp, #172	@ 0xac
 800b7c0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800b7c2:	2312      	movs	r3, #18
 800b7c4:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800b7c8:	4b81      	ldr	r3, [pc, #516]	@ (800b9d0 <ProcessRadioRxDone+0x214>)
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint16_t size = RxDoneParams.Size;
 800b7d0:	4b7f      	ldr	r3, [pc, #508]	@ (800b9d0 <ProcessRadioRxDone+0x214>)
 800b7d2:	891b      	ldrh	r3, [r3, #8]
 800b7d4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800b7d8:	4b7d      	ldr	r3, [pc, #500]	@ (800b9d0 <ProcessRadioRxDone+0x214>)
 800b7da:	895b      	ldrh	r3, [r3, #10]
 800b7dc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    int8_t snr = RxDoneParams.Snr;
 800b7e0:	4b7b      	ldr	r3, [pc, #492]	@ (800b9d0 <ProcessRadioRxDone+0x214>)
 800b7e2:	7b1b      	ldrb	r3, [r3, #12]
 800b7e4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    uint8_t pktHeaderLen = 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    uint32_t downLinkCounter = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800b7f2:	4b78      	ldr	r3, [pc, #480]	@ (800b9d4 <ProcessRadioRxDone+0x218>)
 800b7f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint8_t multicast = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800b808:	2301      	movs	r3, #1
 800b80a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800b80e:	4a72      	ldr	r2, [pc, #456]	@ (800b9d8 <ProcessRadioRxDone+0x21c>)
 800b810:	7813      	ldrb	r3, [r2, #0]
 800b812:	f023 0301 	bic.w	r3, r3, #1
 800b816:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800b818:	4b70      	ldr	r3, [pc, #448]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800b820:	4a6e      	ldr	r2, [pc, #440]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b822:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800b826:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800b82a:	4a6c      	ldr	r2, [pc, #432]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b82c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b830:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800b834:	4b69      	ldr	r3, [pc, #420]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b836:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800b83a:	4b68      	ldr	r3, [pc, #416]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b83c:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800b840:	4b66      	ldr	r3, [pc, #408]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800b848:	4b64      	ldr	r3, [pc, #400]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800b850:	4b62      	ldr	r3, [pc, #392]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800b858:	4b60      	ldr	r3, [pc, #384]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800b860:	4b5e      	ldr	r3, [pc, #376]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b862:	2200      	movs	r2, #0
 800b864:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800b868:	4b5c      	ldr	r3, [pc, #368]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800b870:	4b5a      	ldr	r3, [pc, #360]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b872:	2200      	movs	r2, #0
 800b874:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800b878:	4b58      	ldr	r3, [pc, #352]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b880:	4b56      	ldr	r3, [pc, #344]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800b888:	4b54      	ldr	r3, [pc, #336]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800b890:	4b52      	ldr	r3, [pc, #328]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b892:	2200      	movs	r2, #0
 800b894:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800b898:	4b50      	ldr	r3, [pc, #320]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800b8a0:	4b4f      	ldr	r3, [pc, #316]	@ (800b9e0 <ProcessRadioRxDone+0x224>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a4:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800b8a6:	4b4d      	ldr	r3, [pc, #308]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b8a8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b8b0:	484c      	ldr	r0, [pc, #304]	@ (800b9e4 <ProcessRadioRxDone+0x228>)
 800b8b2:	f00f fc15 	bl	801b0e0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800b8b6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800b8c0:	f004 fdae 	bl	8010420 <LoRaMacClassBRxBeacon>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00b      	beq.n	800b8e2 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800b8ca:	4a44      	ldr	r2, [pc, #272]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b8cc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800b8d0:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800b8d4:	4a41      	ldr	r2, [pc, #260]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b8d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b8da:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800b8de:	f000 bc75 	b.w	800c1cc <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b8e2:	4b3c      	ldr	r3, [pc, #240]	@ (800b9d4 <ProcessRadioRxDone+0x218>)
 800b8e4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d11e      	bne.n	800b92a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b8ec:	f004 fdab 	bl	8010446 <LoRaMacClassBIsPingExpected>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	f004 fd5c 	bl	80103b4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	f004 fd7d 	bl	80103fc <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800b902:	4b36      	ldr	r3, [pc, #216]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b904:	2204      	movs	r2, #4
 800b906:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800b90a:	e00e      	b.n	800b92a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b90c:	f004 fda2 	bl	8010454 <LoRaMacClassBIsMulticastExpected>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d009      	beq.n	800b92a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b916:	2000      	movs	r0, #0
 800b918:	f004 fd56 	bl	80103c8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b91c:	2000      	movs	r0, #0
 800b91e:	f004 fd76 	bl	801040e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800b922:	4b2e      	ldr	r3, [pc, #184]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b924:	2205      	movs	r2, #5
 800b926:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800b92a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d107      	bne.n	800b942 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b932:	4b2a      	ldr	r3, [pc, #168]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b934:	2201      	movs	r2, #1
 800b936:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800b93a:	f7ff ff19 	bl	800b770 <PrepareRxDoneAbort>
        return;
 800b93e:	f000 bc45 	b.w	800c1cc <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800b942:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	f887 208e 	strb.w	r2, [r7, #142]	@ 0x8e
 800b94c:	461a      	mov	r2, r3
 800b94e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b952:	4413      	add	r3, r2
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800b95a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800b95e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800b962:	b2db      	uxtb	r3, r3
 800b964:	3b01      	subs	r3, #1
 800b966:	2b06      	cmp	r3, #6
 800b968:	f200 8403 	bhi.w	800c172 <ProcessRadioRxDone+0x9b6>
 800b96c:	a201      	add	r2, pc, #4	@ (adr r2, 800b974 <ProcessRadioRxDone+0x1b8>)
 800b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b972:	bf00      	nop
 800b974:	0800b991 	.word	0x0800b991
 800b978:	0800c173 	.word	0x0800c173
 800b97c:	0800bb8f 	.word	0x0800bb8f
 800b980:	0800c173 	.word	0x0800c173
 800b984:	0800bb87 	.word	0x0800bb87
 800b988:	0800c173 	.word	0x0800c173
 800b98c:	0800c117 	.word	0x0800c117
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800b990:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b994:	2b10      	cmp	r3, #16
 800b996:	d807      	bhi.n	800b9a8 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b998:	4b10      	ldr	r3, [pc, #64]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b9a0:	f7ff fee6 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800b9a4:	f000 bc12 	b.w	800c1cc <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800b9a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b9ac:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800b9ae:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800b9b6:	4b07      	ldr	r3, [pc, #28]	@ (800b9d4 <ProcessRadioRxDone+0x218>)
 800b9b8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d013      	beq.n	800b9e8 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b9c0:	4b06      	ldr	r3, [pc, #24]	@ (800b9dc <ProcessRadioRxDone+0x220>)
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b9c8:	f7ff fed2 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800b9cc:	e3fe      	b.n	800c1cc <ProcessRadioRxDone+0xa10>
 800b9ce:	bf00      	nop
 800b9d0:	20000fdc 	.word	0x20000fdc
 800b9d4:	20008000 	.word	0x20008000
 800b9d8:	20000fd4 	.word	0x20000fd4
 800b9dc:	20000a28 	.word	0x20000a28
 800b9e0:	08021f8c 	.word	0x08021f8c
 800b9e4:	20000dc0 	.word	0x20000dc0
            }

            SecureElementGetJoinEui( joinEui );
 800b9e8:	f107 0308 	add.w	r3, r7, #8
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f00b feb7 	bl	8017760 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800b9f2:	f107 0218 	add.w	r2, r7, #24
 800b9f6:	f107 0308 	add.w	r3, r7, #8
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	20ff      	movs	r0, #255	@ 0xff
 800b9fe:	f005 ff17 	bl	8011830 <LoRaMacCryptoHandleJoinAccept>
 800ba02:	4603      	mov	r3, r0
 800ba04:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ba0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ba12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	b25b      	sxtb	r3, r3
 800ba1a:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ba1c:	4bb1      	ldr	r3, [pc, #708]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba1e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ba22:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800ba24:	4baf      	ldr	r3, [pc, #700]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba26:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ba2a:	1d39      	adds	r1, r7, #4
 800ba2c:	2207      	movs	r2, #7
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f006 fcc7 	bl	80123c2 <RegionVerify>
 800ba34:	4603      	mov	r3, r0
 800ba36:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800ba3a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f040 8095 	bne.w	800bb6e <ProcessRadioRxDone+0x3b2>
 800ba44:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 8090 	beq.w	800bb6e <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ba4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ba52:	461a      	mov	r2, r3
 800ba54:	4ba3      	ldr	r3, [pc, #652]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba56:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ba5a:	4ba2      	ldr	r3, [pc, #648]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ba60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba64:	021b      	lsls	r3, r3, #8
 800ba66:	4313      	orrs	r3, r2
 800ba68:	4a9e      	ldr	r2, [pc, #632]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ba6e:	4b9d      	ldr	r3, [pc, #628]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ba74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba78:	041b      	lsls	r3, r3, #16
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	4a99      	ldr	r2, [pc, #612]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	4a97      	ldr	r2, [pc, #604]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800ba8a:	4b96      	ldr	r3, [pc, #600]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800ba8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba90:	4619      	mov	r1, r3
 800ba92:	2002      	movs	r0, #2
 800ba94:	f00b fe4a 	bl	801772c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ba98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ba9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	461a      	mov	r2, r3
 800baa4:	4b8f      	ldr	r3, [pc, #572]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800baa6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800baaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800baae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	461a      	mov	r2, r3
 800bab6:	4b8b      	ldr	r3, [pc, #556]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bab8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800babc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bac0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	461a      	mov	r2, r3
 800bac8:	4b86      	ldr	r3, [pc, #536]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800baca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800bace:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bad2:	461a      	mov	r2, r3
 800bad4:	4b83      	ldr	r3, [pc, #524]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bad6:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800bad8:	4b82      	ldr	r3, [pc, #520]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800bae0:	4b80      	ldr	r3, [pc, #512]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800bae6:	4b7f      	ldr	r3, [pc, #508]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800baee:	fb02 f303 	mul.w	r3, r2, r3
 800baf2:	4a7c      	ldr	r2, [pc, #496]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800baf4:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800baf6:	4b7b      	ldr	r3, [pc, #492]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800baf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bafa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bafe:	4a79      	ldr	r2, [pc, #484]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bb00:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800bb02:	4b78      	ldr	r3, [pc, #480]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800bb0a:	4b76      	ldr	r3, [pc, #472]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800bb12:	f107 0318 	add.w	r3, r7, #24
 800bb16:	3312      	adds	r3, #18
 800bb18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800bb1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	3b11      	subs	r3, #17
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800bb2a:	4b6f      	ldr	r3, [pc, #444]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bb2c:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800bb30:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800bb34:	4b6b      	ldr	r3, [pc, #428]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bb36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bb3a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800bb3e:	4611      	mov	r1, r2
 800bb40:	4618      	mov	r0, r3
 800bb42:	f006 fc5f 	bl	8012404 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bb46:	4b67      	ldr	r3, [pc, #412]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bb48:	2202      	movs	r2, #2
 800bb4a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800bb4e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800bb52:	4618      	mov	r0, r3
 800bb54:	f005 f97a 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 8311 	beq.w	800c182 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800bb60:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800bb64:	4619      	mov	r1, r3
 800bb66:	2000      	movs	r0, #0
 800bb68:	f005 f8e4 	bl	8010d34 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800bb6c:	e309      	b.n	800c182 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bb6e:	2001      	movs	r0, #1
 800bb70:	f005 f96c 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f000 8302 	beq.w	800c180 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	2007      	movs	r0, #7
 800bb80:	f005 f8d8 	bl	8010d34 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800bb84:	e2fc      	b.n	800c180 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bb86:	4b58      	ldr	r3, [pc, #352]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bb8e:	4b55      	ldr	r3, [pc, #340]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bb90:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bb94:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800bb98:	4b53      	ldr	r3, [pc, #332]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bb9a:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800bb9e:	b25b      	sxtb	r3, r3
 800bba0:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bba4:	230d      	movs	r3, #13
 800bba6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800bbaa:	4b4e      	ldr	r3, [pc, #312]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bbac:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bbb4:	230e      	movs	r3, #14
 800bbb6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbba:	4b4a      	ldr	r3, [pc, #296]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bbbc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bbc0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f006 fbad 	bl	8012326 <RegionGetPhyParam>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	673b      	str	r3, [r7, #112]	@ 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800bbd0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bbd4:	3b0d      	subs	r3, #13
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	b21b      	sxth	r3, r3
 800bbda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bbde:	b21a      	sxth	r2, r3
 800bbe0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	dc03      	bgt.n	800bbf0 <ProcessRadioRxDone+0x434>
 800bbe8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bbec:	2b0b      	cmp	r3, #11
 800bbee:	d806      	bhi.n	800bbfe <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bbf0:	4b3d      	ldr	r3, [pc, #244]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bbf8:	f7ff fdba 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800bbfc:	e2e6      	b.n	800c1cc <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800bbfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc02:	643b      	str	r3, [r7, #64]	@ 0x40
            macMsgData.BufSize = size;
 800bc04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800bc0e:	4b37      	ldr	r3, [pc, #220]	@ (800bcec <ProcessRadioRxDone+0x530>)
 800bc10:	667b      	str	r3, [r7, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800bc12:	23ff      	movs	r3, #255	@ 0xff
 800bc14:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800bc18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f006 f904 	bl	8011e2a <LoRaMacParserData>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d006      	beq.n	800bc36 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc28:	4b2f      	ldr	r3, [pc, #188]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bc30:	f7ff fd9e 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800bc34:	e2ca      	b.n	800c1cc <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bc36:	4b2b      	ldr	r3, [pc, #172]	@ (800bce4 <ProcessRadioRxDone+0x528>)
 800bc38:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d132      	bne.n	800bca6 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800bc40:	f004 fc01 	bl	8010446 <LoRaMacClassBIsPingExpected>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d014      	beq.n	800bc74 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	f004 fbb2 	bl	80103b4 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800bc50:	2000      	movs	r0, #0
 800bc52:	f004 fbd3 	bl	80103fc <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bc56:	4b24      	ldr	r3, [pc, #144]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bc58:	2204      	movs	r2, #4
 800bc5a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bc5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc60:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bc64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	f004 fc73 	bl	8010558 <LoRaMacClassBSetFPendingBit>
 800bc72:	e018      	b.n	800bca6 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bc74:	f004 fbee 	bl	8010454 <LoRaMacClassBIsMulticastExpected>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d013      	beq.n	800bca6 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bc7e:	2000      	movs	r0, #0
 800bc80:	f004 fba2 	bl	80103c8 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bc84:	2000      	movs	r0, #0
 800bc86:	f004 fbc2 	bl	801040e <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bc8a:	4b17      	ldr	r3, [pc, #92]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bc8c:	2205      	movs	r2, #5
 800bc8e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bc92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc94:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bc98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4610      	mov	r0, r2
 800bca2:	f004 fc59 	bl	8010558 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800bca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca8:	4a0f      	ldr	r2, [pc, #60]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bcaa:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800bcae:	f107 0212 	add.w	r2, r7, #18
 800bcb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f002 fd8d 	bl	800e7d8 <DetermineFrameType>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d006      	beq.n	800bcd2 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bcc4:	4b08      	ldr	r3, [pc, #32]	@ (800bce8 <ProcessRadioRxDone+0x52c>)
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bccc:	f7ff fd50 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800bcd0:	e27c      	b.n	800c1cc <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            downLinkCounter = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800bce2:	e055      	b.n	800bd90 <ProcessRadioRxDone+0x5d4>
 800bce4:	20008000 	.word	0x20008000
 800bce8:	20000a28 	.word	0x20000a28
 800bcec:	20000c60 	.word	0x20000c60
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bcf0:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bcf4:	499f      	ldr	r1, [pc, #636]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	440b      	add	r3, r1
 800bd00:	33ec      	adds	r3, #236	@ 0xec
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d13d      	bne.n	800bd86 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800bd0a:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd0e:	4999      	ldr	r1, [pc, #612]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bd10:	4613      	mov	r3, r2
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	4413      	add	r3, r2
 800bd16:	011b      	lsls	r3, r3, #4
 800bd18:	440b      	add	r3, r1
 800bd1a:	33e9      	adds	r3, #233	@ 0xe9
 800bd1c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d031      	beq.n	800bd86 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800bd22:	2301      	movs	r3, #1
 800bd24:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800bd28:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd2c:	4991      	ldr	r1, [pc, #580]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bd2e:	4613      	mov	r3, r2
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	4413      	add	r3, r2
 800bd34:	011b      	lsls	r3, r3, #4
 800bd36:	440b      	add	r3, r1
 800bd38:	33ea      	adds	r3, #234	@ 0xea
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800bd40:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd44:	498b      	ldr	r1, [pc, #556]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bd46:	4613      	mov	r3, r2
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	4413      	add	r3, r2
 800bd4c:	011b      	lsls	r3, r3, #4
 800bd4e:	440b      	add	r3, r1
 800bd50:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800bd5a:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800bd5e:	4985      	ldr	r1, [pc, #532]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bd60:	4613      	mov	r3, r2
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	4413      	add	r3, r2
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	440b      	add	r3, r1
 800bd6a:	33ec      	adds	r3, #236	@ 0xec
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800bd72:	4b80      	ldr	r3, [pc, #512]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bd74:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d10e      	bne.n	800bd9a <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800bd7c:	4b7e      	ldr	r3, [pc, #504]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bd7e:	2203      	movs	r2, #3
 800bd80:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800bd84:	e009      	b.n	800bd9a <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bd86:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800bd90:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d0ab      	beq.n	800bcf0 <ProcessRadioRxDone+0x534>
 800bd98:	e000      	b.n	800bd9c <ProcessRadioRxDone+0x5e0>
                    break;
 800bd9a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800bd9c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d117      	bne.n	800bdd4 <ProcessRadioRxDone+0x618>
 800bda4:	7cbb      	ldrb	r3, [r7, #18]
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d10d      	bne.n	800bdc6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800bdaa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bdae:	f003 0320 	and.w	r3, r3, #32
 800bdb2:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d106      	bne.n	800bdc6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800bdb8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bdbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdc0:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d006      	beq.n	800bdd4 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdc6:	4b6c      	ldr	r3, [pc, #432]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800bdce:	f7ff fccf 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800bdd2:	e1fb      	b.n	800c1cc <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800bdd4:	7cb9      	ldrb	r1, [r7, #18]
 800bdd6:	4c67      	ldr	r4, [pc, #412]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bdd8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800bddc:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800bde0:	f107 0314 	add.w	r3, r7, #20
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	f107 0313 	add.w	r3, r7, #19
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800bdf0:	f000 fee4 	bl	800cbbc <GetFCntDown>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bdfa:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d017      	beq.n	800be32 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800be02:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800be06:	2b07      	cmp	r3, #7
 800be08:	d104      	bne.n	800be14 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800be0a:	4b5b      	ldr	r3, [pc, #364]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be0c:	2208      	movs	r2, #8
 800be0e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800be12:	e003      	b.n	800be1c <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be14:	4b58      	ldr	r3, [pc, #352]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	4a56      	ldr	r2, [pc, #344]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be20:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	4a54      	ldr	r2, [pc, #336]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be28:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800be2c:	f7ff fca0 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800be30:	e1cc      	b.n	800c1cc <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800be32:	7cfa      	ldrb	r2, [r7, #19]
 800be34:	6979      	ldr	r1, [r7, #20]
 800be36:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800be3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	460b      	mov	r3, r1
 800be42:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800be46:	f005 fe53 	bl	8011af0 <LoRaMacCryptoUnsecureMessage>
 800be4a:	4603      	mov	r3, r0
 800be4c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be50:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00f      	beq.n	800be78 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800be58:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d104      	bne.n	800be6a <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800be60:	4b45      	ldr	r3, [pc, #276]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be62:	220a      	movs	r2, #10
 800be64:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800be68:	e003      	b.n	800be72 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800be6a:	4b43      	ldr	r3, [pc, #268]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be6c:	220b      	movs	r2, #11
 800be6e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800be72:	f7ff fc7d 	bl	800b770 <PrepareRxDoneAbort>
                return;
 800be76:	e1a9      	b.n	800c1cc <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800be78:	4b3f      	ldr	r3, [pc, #252]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800be80:	4a3d      	ldr	r2, [pc, #244]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be82:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800be86:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800be8a:	4b3b      	ldr	r3, [pc, #236]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800be92:	4b39      	ldr	r3, [pc, #228]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be94:	2200      	movs	r2, #0
 800be96:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	4a36      	ldr	r2, [pc, #216]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800be9e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	4a34      	ldr	r2, [pc, #208]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bea6:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800beaa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800beae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	bf14      	ite	ne
 800beb8:	2301      	movne	r3, #1
 800beba:	2300      	moveq	r3, #0
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	4b2e      	ldr	r3, [pc, #184]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bec0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bec4:	4b2c      	ldr	r3, [pc, #176]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800becc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bed0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	bf14      	ite	ne
 800beda:	2301      	movne	r3, #1
 800bedc:	2300      	moveq	r3, #0
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	4b25      	ldr	r3, [pc, #148]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bee2:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800bee6:	4b24      	ldr	r3, [pc, #144]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bee8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800beec:	2b00      	cmp	r3, #0
 800beee:	d004      	beq.n	800befa <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800bef0:	4b21      	ldr	r3, [pc, #132]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bef2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d106      	bne.n	800bf08 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800befa:	4b1e      	ldr	r3, [pc, #120]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800befc:	2200      	movs	r2, #0
 800befe:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800bf00:	4b1c      	ldr	r3, [pc, #112]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800bf08:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d104      	bne.n	800bf1a <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800bf10:	4b19      	ldr	r3, [pc, #100]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bf12:	2202      	movs	r2, #2
 800bf14:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800bf18:	e03a      	b.n	800bf90 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800bf1a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800bf1e:	f023 031f 	bic.w	r3, r3, #31
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2ba0      	cmp	r3, #160	@ 0xa0
 800bf26:	d12b      	bne.n	800bf80 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800bf28:	4b12      	ldr	r3, [pc, #72]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800bf30:	4b10      	ldr	r3, [pc, #64]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bf32:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d102      	bne.n	800bf40 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800bf3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf3c:	4a0d      	ldr	r2, [pc, #52]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bf3e:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bf40:	4b0d      	ldr	r3, [pc, #52]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bf48:	4b0b      	ldr	r3, [pc, #44]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bf4a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d01e      	beq.n	800bf90 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800bf52:	4b09      	ldr	r3, [pc, #36]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bf54:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d019      	beq.n	800bf90 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800bf5c:	4b05      	ldr	r3, [pc, #20]	@ (800bf74 <ProcessRadioRxDone+0x7b8>)
 800bf5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf62:	4a05      	ldr	r2, [pc, #20]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bf64:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800bf68:	4b04      	ldr	r3, [pc, #16]	@ (800bf7c <ProcessRadioRxDone+0x7c0>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a02      	ldr	r2, [pc, #8]	@ (800bf78 <ProcessRadioRxDone+0x7bc>)
 800bf6e:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800bf72:	e00d      	b.n	800bf90 <ProcessRadioRxDone+0x7d4>
 800bf74:	20008000 	.word	0x20008000
 800bf78:	20000a28 	.word	0x20000a28
 800bf7c:	20000fdc 	.word	0x20000fdc
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800bf80:	4b94      	ldr	r3, [pc, #592]	@ (800c1d4 <ProcessRadioRxDone+0xa18>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bf88:	4b93      	ldr	r3, [pc, #588]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800bf90:	4b90      	ldr	r3, [pc, #576]	@ (800c1d4 <ProcessRadioRxDone+0xa18>)
 800bf92:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d106      	bne.n	800bfa8 <ProcessRadioRxDone+0x7ec>
 800bf9a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bf9e:	f003 0310 	and.w	r3, r3, #16
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d008      	beq.n	800bfba <ProcessRadioRxDone+0x7fe>
 800bfa8:	4b8a      	ldr	r3, [pc, #552]	@ (800c1d4 <ProcessRadioRxDone+0xa18>)
 800bfaa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d103      	bne.n	800bfba <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800bfb2:	4b89      	ldr	r3, [pc, #548]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800bfba:	4b87      	ldr	r3, [pc, #540]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800bfbc:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800bfc0:	4a85      	ldr	r2, [pc, #532]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800bfc2:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800bfc6:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f001 ff98 	bl	800df00 <RemoveMacCommands>

            switch( fType )
 800bfd0:	7cbb      	ldrb	r3, [r7, #18]
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d873      	bhi.n	800c0be <ProcessRadioRxDone+0x902>
 800bfd6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfdc <ProcessRadioRxDone+0x820>)
 800bfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfdc:	0800bfed 	.word	0x0800bfed
 800bfe0:	0800c03d 	.word	0x0800c03d
 800bfe4:	0800c073 	.word	0x0800c073
 800bfe8:	0800c099 	.word	0x0800c099
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800bfec:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800bff0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	461c      	mov	r4, r3
 800bff8:	4b77      	ldr	r3, [pc, #476]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800bffa:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800bffe:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800c002:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800c006:	f102 0010 	add.w	r0, r2, #16
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	460b      	mov	r3, r1
 800c00e:	4622      	mov	r2, r4
 800c010:	2100      	movs	r1, #0
 800c012:	f000 ff4f 	bl	800ceb4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c016:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c01a:	4b6f      	ldr	r3, [pc, #444]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c01c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c022:	4a6d      	ldr	r2, [pc, #436]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c024:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c028:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800c02c:	4b6a      	ldr	r3, [pc, #424]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c02e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c032:	4b69      	ldr	r3, [pc, #420]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c034:	2201      	movs	r2, #1
 800c036:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800c03a:	e047      	b.n	800c0cc <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c03c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c040:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c044:	b2db      	uxtb	r3, r3
 800c046:	461c      	mov	r4, r3
 800c048:	4b63      	ldr	r3, [pc, #396]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c04a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c04e:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800c052:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800c056:	f102 0010 	add.w	r0, r2, #16
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	460b      	mov	r3, r1
 800c05e:	4622      	mov	r2, r4
 800c060:	2100      	movs	r1, #0
 800c062:	f000 ff27 	bl	800ceb4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c066:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c06a:	4b5b      	ldr	r3, [pc, #364]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c06c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800c070:	e02c      	b.n	800c0cc <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800c072:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800c074:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800c078:	4b57      	ldr	r3, [pc, #348]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c07a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c07e:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	460b      	mov	r3, r1
 800c086:	2100      	movs	r1, #0
 800c088:	f000 ff14 	bl	800ceb4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c08c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c090:	4b51      	ldr	r3, [pc, #324]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c092:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800c096:	e019      	b.n	800c0cc <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c098:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c09c:	4b4e      	ldr	r3, [pc, #312]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c09e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c0a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0a4:	4a4c      	ldr	r2, [pc, #304]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c0a6:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c0aa:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800c0ae:	4b4a      	ldr	r3, [pc, #296]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c0b0:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c0b4:	4b48      	ldr	r3, [pc, #288]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800c0bc:	e006      	b.n	800c0cc <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c0be:	4b46      	ldr	r3, [pc, #280]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800c0c6:	f7ff fb53 	bl	800b770 <PrepareRxDoneAbort>
                    break;
 800c0ca:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800c0cc:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800c0d0:	2be0      	cmp	r3, #224	@ 0xe0
 800c0d2:	d118      	bne.n	800c106 <ProcessRadioRxDone+0x94a>
 800c0d4:	4b3f      	ldr	r3, [pc, #252]	@ (800c1d4 <ProcessRadioRxDone+0xa18>)
 800c0d6:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800c0da:	f083 0301 	eor.w	r3, r3, #1
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d010      	beq.n	800c106 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c0e4:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c0e8:	4b3b      	ldr	r3, [pc, #236]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c0ea:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800c0ee:	4b3a      	ldr	r3, [pc, #232]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800c0f6:	4b38      	ldr	r3, [pc, #224]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800c0fe:	4b36      	ldr	r3, [pc, #216]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c100:	2200      	movs	r2, #0
 800c102:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c106:	4a34      	ldr	r2, [pc, #208]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c108:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c10c:	f043 0302 	orr.w	r3, r3, #2
 800c110:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800c114:	e035      	b.n	800c182 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c116:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800c11a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c11e:	18d1      	adds	r1, r2, r3
 800c120:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800c124:	b29b      	uxth	r3, r3
 800c126:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	461a      	mov	r2, r3
 800c130:	482a      	ldr	r0, [pc, #168]	@ (800c1dc <ProcessRadioRxDone+0xa20>)
 800c132:	f00b fb96 	bl	8017862 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c136:	4b28      	ldr	r3, [pc, #160]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c138:	2203      	movs	r2, #3
 800c13a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c13e:	4b26      	ldr	r3, [pc, #152]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c146:	4b24      	ldr	r3, [pc, #144]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c148:	4a24      	ldr	r2, [pc, #144]	@ (800c1dc <ProcessRadioRxDone+0xa20>)
 800c14a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c14e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c152:	b2da      	uxtb	r2, r3
 800c154:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	4b1e      	ldr	r3, [pc, #120]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c15e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c162:	4a1d      	ldr	r2, [pc, #116]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c164:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c168:	f043 0302 	orr.w	r3, r3, #2
 800c16c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800c170:	e007      	b.n	800c182 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c172:	4b19      	ldr	r3, [pc, #100]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800c17a:	f7ff faf9 	bl	800b770 <PrepareRxDoneAbort>
            break;
 800c17e:	e000      	b.n	800c182 <ProcessRadioRxDone+0x9c6>
            break;
 800c180:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c182:	4b15      	ldr	r3, [pc, #84]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c184:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d004      	beq.n	800c196 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800c18c:	4b12      	ldr	r3, [pc, #72]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c18e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c192:	2b01      	cmp	r3, #1
 800c194:	d10c      	bne.n	800c1b0 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800c196:	4b10      	ldr	r3, [pc, #64]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c198:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d007      	beq.n	800c1b0 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c1a2:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	f000 fcec 	bl	800cb88 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800c1b0:	4b09      	ldr	r3, [pc, #36]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c1b2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d006      	beq.n	800c1c8 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800c1ba:	4a07      	ldr	r2, [pc, #28]	@ (800c1d8 <ProcessRadioRxDone+0xa1c>)
 800c1bc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c1c0:	f043 0310 	orr.w	r3, r3, #16
 800c1c4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800c1c8:	f7ff fa00 	bl	800b5cc <UpdateRxSlotIdleState>
}
 800c1cc:	37a4      	adds	r7, #164	@ 0xa4
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd90      	pop	{r4, r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20008000 	.word	0x20008000
 800c1d8:	20000a28 	.word	0x20000a28
 800c1dc:	20000c60 	.word	0x20000c60

0800c1e0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c1e4:	4b11      	ldr	r3, [pc, #68]	@ (800c22c <ProcessRadioTxTimeout+0x4c>)
 800c1e6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d002      	beq.n	800c1f4 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800c1ee:	4b10      	ldr	r3, [pc, #64]	@ (800c230 <ProcessRadioTxTimeout+0x50>)
 800c1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f2:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800c1f4:	f7ff f9ea 	bl	800b5cc <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c1f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c234 <ProcessRadioTxTimeout+0x54>)
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c200:	2002      	movs	r0, #2
 800c202:	f004 fdef 	bl	8010de4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c206:	4b0b      	ldr	r3, [pc, #44]	@ (800c234 <ProcessRadioTxTimeout+0x54>)
 800c208:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800c210:	4b08      	ldr	r3, [pc, #32]	@ (800c234 <ProcessRadioTxTimeout+0x54>)
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c218:	4a06      	ldr	r2, [pc, #24]	@ (800c234 <ProcessRadioTxTimeout+0x54>)
 800c21a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c21e:	f043 0310 	orr.w	r3, r3, #16
 800c222:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800c226:	bf00      	nop
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20008000 	.word	0x20008000
 800c230:	08021f8c 	.word	0x08021f8c
 800c234:	20000a28 	.word	0x20000a28

0800c238 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	460a      	mov	r2, r1
 800c242:	71fb      	strb	r3, [r7, #7]
 800c244:	4613      	mov	r3, r2
 800c246:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800c248:	2300      	movs	r3, #0
 800c24a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c24c:	4b3d      	ldr	r3, [pc, #244]	@ (800c344 <HandleRadioRxErrorTimeout+0x10c>)
 800c24e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c252:	2b02      	cmp	r3, #2
 800c254:	d002      	beq.n	800c25c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800c256:	4b3c      	ldr	r3, [pc, #240]	@ (800c348 <HandleRadioRxErrorTimeout+0x110>)
 800c258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c25c:	f004 f8ec 	bl	8010438 <LoRaMacClassBIsBeaconExpected>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d007      	beq.n	800c276 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800c266:	2002      	movs	r0, #2
 800c268:	f004 f89a 	bl	80103a0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c26c:	2000      	movs	r0, #0
 800c26e:	f004 f8bc 	bl	80103ea <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800c272:	2301      	movs	r3, #1
 800c274:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c276:	4b33      	ldr	r3, [pc, #204]	@ (800c344 <HandleRadioRxErrorTimeout+0x10c>)
 800c278:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d119      	bne.n	800c2b4 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c280:	f004 f8e1 	bl	8010446 <LoRaMacClassBIsPingExpected>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d007      	beq.n	800c29a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c28a:	2000      	movs	r0, #0
 800c28c:	f004 f892 	bl	80103b4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c290:	2000      	movs	r0, #0
 800c292:	f004 f8b3 	bl	80103fc <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800c296:	2301      	movs	r3, #1
 800c298:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c29a:	f004 f8db 	bl	8010454 <LoRaMacClassBIsMulticastExpected>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d007      	beq.n	800c2b4 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f004 f88f 	bl	80103c8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	f004 f8af 	bl	801040e <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	f083 0301 	eor.w	r3, r3, #1
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d03b      	beq.n	800c338 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c2c0:	4b22      	ldr	r3, [pc, #136]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c2c2:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d122      	bne.n	800c310 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800c2ca:	4b20      	ldr	r3, [pc, #128]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c2cc:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d003      	beq.n	800c2dc <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800c2d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f004 fd80 	bl	8010de4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800c2e4:	4b17      	ldr	r3, [pc, #92]	@ (800c344 <HandleRadioRxErrorTimeout+0x10c>)
 800c2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f00e ffa5 	bl	801b238 <UTIL_TIMER_GetElapsedTime>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	4b16      	ldr	r3, [pc, #88]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c2f2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d31e      	bcc.n	800c338 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800c2fa:	4815      	ldr	r0, [pc, #84]	@ (800c350 <HandleRadioRxErrorTimeout+0x118>)
 800c2fc:	f00e fef0 	bl	801b0e0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c300:	4a12      	ldr	r2, [pc, #72]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c302:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c306:	f043 0310 	orr.w	r3, r3, #16
 800c30a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800c30e:	e013      	b.n	800c338 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800c310:	4b0e      	ldr	r3, [pc, #56]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c312:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800c31a:	4a0c      	ldr	r2, [pc, #48]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c31c:	79bb      	ldrb	r3, [r7, #6]
 800c31e:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800c322:	79bb      	ldrb	r3, [r7, #6]
 800c324:	4618      	mov	r0, r3
 800c326:	f004 fd5d 	bl	8010de4 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800c32a:	4a08      	ldr	r2, [pc, #32]	@ (800c34c <HandleRadioRxErrorTimeout+0x114>)
 800c32c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c330:	f043 0310 	orr.w	r3, r3, #16
 800c334:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800c338:	f7ff f948 	bl	800b5cc <UpdateRxSlotIdleState>
}
 800c33c:	bf00      	nop
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20008000 	.word	0x20008000
 800c348:	08021f8c 	.word	0x08021f8c
 800c34c:	20000a28 	.word	0x20000a28
 800c350:	20000dc0 	.word	0x20000dc0

0800c354 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c358:	2106      	movs	r1, #6
 800c35a:	2005      	movs	r0, #5
 800c35c:	f7ff ff6c 	bl	800c238 <HandleRadioRxErrorTimeout>
}
 800c360:	bf00      	nop
 800c362:	bd80      	pop	{r7, pc}

0800c364 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c368:	2104      	movs	r1, #4
 800c36a:	2003      	movs	r0, #3
 800c36c:	f7ff ff64 	bl	800c238 <HandleRadioRxErrorTimeout>
}
 800c370:	bf00      	nop
 800c372:	bd80      	pop	{r7, pc}

0800c374 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c37a:	f3ef 8310 	mrs	r3, PRIMASK
 800c37e:	607b      	str	r3, [r7, #4]
  return(result);
 800c380:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800c382:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c384:	b672      	cpsid	i
}
 800c386:	bf00      	nop
    events = LoRaMacRadioEvents;
 800c388:	4b1d      	ldr	r3, [pc, #116]	@ (800c400 <LoRaMacHandleIrqEvents+0x8c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800c38e:	4b1c      	ldr	r3, [pc, #112]	@ (800c400 <LoRaMacHandleIrqEvents+0x8c>)
 800c390:	2200      	movs	r2, #0
 800c392:	601a      	str	r2, [r3, #0]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	f383 8810 	msr	PRIMASK, r3
}
 800c39e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d027      	beq.n	800c3f6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800c3a6:	783b      	ldrb	r3, [r7, #0]
 800c3a8:	f003 0320 	and.w	r3, r3, #32
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800c3b2:	f7ff f923 	bl	800b5fc <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800c3b6:	783b      	ldrb	r3, [r7, #0]
 800c3b8:	f003 0310 	and.w	r3, r3, #16
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800c3c2:	f7ff f9fb 	bl	800b7bc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800c3c6:	783b      	ldrb	r3, [r7, #0]
 800c3c8:	f003 0308 	and.w	r3, r3, #8
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800c3d2:	f7ff ff05 	bl	800c1e0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800c3d6:	783b      	ldrb	r3, [r7, #0]
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800c3e2:	f7ff ffb7 	bl	800c354 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800c3e6:	783b      	ldrb	r3, [r7, #0]
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800c3f2:	f7ff ffb7 	bl	800c364 <ProcessRadioRxTimeout>
        }
    }
}
 800c3f6:	bf00      	nop
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20000fd4 	.word	0x20000fd4

0800c404 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800c408:	4b10      	ldr	r3, [pc, #64]	@ (800c44c <LoRaMacIsBusy+0x48>)
 800c40a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d101      	bne.n	800c416 <LoRaMacIsBusy+0x12>
    {
        return false;
 800c412:	2300      	movs	r3, #0
 800c414:	e015      	b.n	800c442 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800c416:	4b0e      	ldr	r3, [pc, #56]	@ (800c450 <LoRaMacIsBusy+0x4c>)
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <LoRaMacIsBusy+0x24>
    {
        return true;
 800c424:	2301      	movs	r3, #1
 800c426:	e00c      	b.n	800c442 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c428:	4b08      	ldr	r3, [pc, #32]	@ (800c44c <LoRaMacIsBusy+0x48>)
 800c42a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d106      	bne.n	800c440 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800c432:	4b06      	ldr	r3, [pc, #24]	@ (800c44c <LoRaMacIsBusy+0x48>)
 800c434:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d101      	bne.n	800c440 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e000      	b.n	800c442 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800c440:	2301      	movs	r3, #1
}
 800c442:	4618      	mov	r0, r3
 800c444:	46bd      	mov	sp, r7
 800c446:	bc80      	pop	{r7}
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20000a28 	.word	0x20000a28
 800c450:	20000fd4 	.word	0x20000fd4

0800c454 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800c454:	b480      	push	{r7}
 800c456:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800c458:	4b05      	ldr	r3, [pc, #20]	@ (800c470 <LoRaMacIsStopped+0x1c>)
 800c45a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d101      	bne.n	800c466 <LoRaMacIsStopped+0x12>
    {
        return true;
 800c462:	2301      	movs	r3, #1
 800c464:	e000      	b.n	800c468 <LoRaMacIsStopped+0x14>
    }
    return false;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bc80      	pop	{r7}
 800c46e:	4770      	bx	lr
 800c470:	20000a28 	.word	0x20000a28

0800c474 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800c47e:	4a04      	ldr	r2, [pc, #16]	@ (800c490 <LoRaMacEnableRequests+0x1c>)
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800c486:	bf00      	nop
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bc80      	pop	{r7}
 800c48e:	4770      	bx	lr
 800c490:	20000a28 	.word	0x20000a28

0800c494 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800c49a:	4b2c      	ldr	r3, [pc, #176]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c49c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c4a0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800c4a2:	4b2a      	ldr	r3, [pc, #168]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c4a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d14a      	bne.n	800c542 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c4ac:	4b27      	ldr	r3, [pc, #156]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c4ae:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d006      	beq.n	800c4ca <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800c4bc:	4a23      	ldr	r2, [pc, #140]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c4be:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c4c2:	f023 0301 	bic.w	r3, r3, #1
 800c4c6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c4ca:	4b20      	ldr	r3, [pc, #128]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c4cc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c4d0:	f003 0304 	and.w	r3, r3, #4
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d006      	beq.n	800c4e8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c4da:	4a1c      	ldr	r2, [pc, #112]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c4dc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c4e0:	f023 0304 	bic.w	r3, r3, #4
 800c4e4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	f7ff ffc3 	bl	800c474 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800c4ee:	793b      	ldrb	r3, [r7, #4]
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800c4fa:	4b14      	ldr	r3, [pc, #80]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c4fc:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4813      	ldr	r0, [pc, #76]	@ (800c550 <LoRaMacHandleRequestEvents+0xbc>)
 800c504:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800c506:	793b      	ldrb	r3, [r7, #4]
 800c508:	f003 0304 	and.w	r3, r3, #4
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00e      	beq.n	800c530 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800c512:	4810      	ldr	r0, [pc, #64]	@ (800c554 <LoRaMacHandleRequestEvents+0xc0>)
 800c514:	f004 fcb4 	bl	8010e80 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800c518:	f004 fd04 	bl	8010f24 <LoRaMacConfirmQueueGetCnt>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d006      	beq.n	800c530 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c522:	4a0a      	ldr	r2, [pc, #40]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c524:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c528:	f043 0304 	orr.w	r3, r3, #4
 800c52c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800c530:	f003 ffae 	bl	8010490 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800c534:	4a05      	ldr	r2, [pc, #20]	@ (800c54c <LoRaMacHandleRequestEvents+0xb8>)
 800c536:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c53a:	f023 0310 	bic.w	r3, r3, #16
 800c53e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000a28 	.word	0x20000a28
 800c550:	20000e68 	.word	0x20000e68
 800c554:	20000e7c 	.word	0x20000e7c

0800c558 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c55c:	4b16      	ldr	r3, [pc, #88]	@ (800c5b8 <LoRaMacHandleIndicationEvents+0x60>)
 800c55e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c562:	f003 0308 	and.w	r3, r3, #8
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00d      	beq.n	800c588 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c56c:	4a12      	ldr	r2, [pc, #72]	@ (800c5b8 <LoRaMacHandleIndicationEvents+0x60>)
 800c56e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c572:	f023 0308 	bic.w	r3, r3, #8
 800c576:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800c57a:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b8 <LoRaMacHandleIndicationEvents+0x60>)
 800c57c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	490e      	ldr	r1, [pc, #56]	@ (800c5bc <LoRaMacHandleIndicationEvents+0x64>)
 800c584:	480e      	ldr	r0, [pc, #56]	@ (800c5c0 <LoRaMacHandleIndicationEvents+0x68>)
 800c586:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c588:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b8 <LoRaMacHandleIndicationEvents+0x60>)
 800c58a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c58e:	f003 0302 	and.w	r3, r3, #2
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00d      	beq.n	800c5b4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c598:	4a07      	ldr	r2, [pc, #28]	@ (800c5b8 <LoRaMacHandleIndicationEvents+0x60>)
 800c59a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c59e:	f023 0302 	bic.w	r3, r3, #2
 800c5a2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800c5a6:	4b04      	ldr	r3, [pc, #16]	@ (800c5b8 <LoRaMacHandleIndicationEvents+0x60>)
 800c5a8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	4903      	ldr	r1, [pc, #12]	@ (800c5bc <LoRaMacHandleIndicationEvents+0x64>)
 800c5b0:	4804      	ldr	r0, [pc, #16]	@ (800c5c4 <LoRaMacHandleIndicationEvents+0x6c>)
 800c5b2:	4798      	blx	r3
    }
}
 800c5b4:	bf00      	nop
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	20000a28 	.word	0x20000a28
 800c5bc:	20000eb4 	.word	0x20000eb4
 800c5c0:	20000e90 	.word	0x20000e90
 800c5c4:	20000e48 	.word	0x20000e48

0800c5c8 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c5ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c5d0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c5d4:	f003 0301 	and.w	r3, r3, #1
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d048      	beq.n	800c670 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c5e6:	4b24      	ldr	r3, [pc, #144]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c5e8:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d004      	beq.n	800c5fa <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800c5f0:	4b21      	ldr	r3, [pc, #132]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c5f2:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c5f6:	2b03      	cmp	r3, #3
 800c5f8:	d104      	bne.n	800c604 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800c5fa:	f002 f94f 	bl	800e89c <CheckRetransUnconfirmedUplink>
 800c5fe:	4603      	mov	r3, r0
 800c600:	71fb      	strb	r3, [r7, #7]
 800c602:	e010      	b.n	800c626 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800c604:	4b1c      	ldr	r3, [pc, #112]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c606:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d10b      	bne.n	800c626 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800c60e:	4b1a      	ldr	r3, [pc, #104]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c610:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800c614:	2b00      	cmp	r3, #0
 800c616:	d004      	beq.n	800c622 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800c618:	f002 f96c 	bl	800e8f4 <CheckRetransConfirmedUplink>
 800c61c:	4603      	mov	r3, r0
 800c61e:	71fb      	strb	r3, [r7, #7]
 800c620:	e001      	b.n	800c626 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800c622:	2301      	movs	r3, #1
 800c624:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800c626:	79fb      	ldrb	r3, [r7, #7]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00d      	beq.n	800c648 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800c62c:	4813      	ldr	r0, [pc, #76]	@ (800c67c <LoRaMacHandleMcpsRequest+0xb4>)
 800c62e:	f00e fd57 	bl	801b0e0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c632:	4b11      	ldr	r3, [pc, #68]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c634:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c638:	f023 0320 	bic.w	r3, r3, #32
 800c63c:	4a0e      	ldr	r2, [pc, #56]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c63e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800c642:	f002 f991 	bl	800e968 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800c646:	e013      	b.n	800c670 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800c648:	79bb      	ldrb	r3, [r7, #6]
 800c64a:	f083 0301 	eor.w	r3, r3, #1
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00d      	beq.n	800c670 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800c654:	4a08      	ldr	r2, [pc, #32]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c656:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c65a:	f023 0310 	bic.w	r3, r3, #16
 800c65e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800c662:	4b05      	ldr	r3, [pc, #20]	@ (800c678 <LoRaMacHandleMcpsRequest+0xb0>)
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800c66a:	2000      	movs	r0, #0
 800c66c:	f000 f9c8 	bl	800ca00 <OnTxDelayedTimerEvent>
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20000a28 	.word	0x20000a28
 800c67c:	20000d90 	.word	0x20000d90

0800c680 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c684:	4b18      	ldr	r3, [pc, #96]	@ (800c6e8 <LoRaMacHandleMlmeRequest+0x68>)
 800c686:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c68a:	f003 0304 	and.w	r3, r3, #4
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b00      	cmp	r3, #0
 800c692:	d026      	beq.n	800c6e2 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c694:	2001      	movs	r0, #1
 800c696:	f004 fbd9 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d012      	beq.n	800c6c6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c6a0:	2001      	movs	r0, #1
 800c6a2:	f004 fb75 	bl	8010d90 <LoRaMacConfirmQueueGetStatus>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d103      	bne.n	800c6b4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800c6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e8 <LoRaMacHandleMlmeRequest+0x68>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e8 <LoRaMacHandleMlmeRequest+0x68>)
 800c6b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c6ba:	f023 0302 	bic.w	r3, r3, #2
 800c6be:	4a0a      	ldr	r2, [pc, #40]	@ (800c6e8 <LoRaMacHandleMlmeRequest+0x68>)
 800c6c0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800c6c4:	e00d      	b.n	800c6e2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800c6c6:	2006      	movs	r0, #6
 800c6c8:	f004 fbc0 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d007      	beq.n	800c6e2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c6d2:	4b05      	ldr	r3, [pc, #20]	@ (800c6e8 <LoRaMacHandleMlmeRequest+0x68>)
 800c6d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c6d8:	f023 0302 	bic.w	r3, r3, #2
 800c6dc:	4a02      	ldr	r2, [pc, #8]	@ (800c6e8 <LoRaMacHandleMlmeRequest+0x68>)
 800c6de:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800c6e2:	bf00      	nop
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000a28 	.word	0x20000a28

0800c6ec <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c6f0:	200b      	movs	r0, #11
 800c6f2:	f004 fbab 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d019      	beq.n	800c730 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c6fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c738 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c6fe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d111      	bne.n	800c730 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c70c:	4b0a      	ldr	r3, [pc, #40]	@ (800c738 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c70e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c712:	f003 0304 	and.w	r3, r3, #4
 800c716:	b2db      	uxtb	r3, r3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d009      	beq.n	800c730 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c71c:	4b06      	ldr	r3, [pc, #24]	@ (800c738 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c71e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c722:	f023 0302 	bic.w	r3, r3, #2
 800c726:	4a04      	ldr	r2, [pc, #16]	@ (800c738 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c728:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e000      	b.n	800c732 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000a28 	.word	0x20000a28

0800c73c <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	71fb      	strb	r3, [r7, #7]
 800c746:	460b      	mov	r3, r1
 800c748:	71bb      	strb	r3, [r7, #6]
 800c74a:	4613      	mov	r3, r2
 800c74c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800c74e:	79fb      	ldrb	r3, [r7, #7]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00a      	beq.n	800c76a <CheckForMinimumAbpDatarate+0x2e>
 800c754:	79bb      	ldrb	r3, [r7, #6]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d107      	bne.n	800c76a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800c75a:	797b      	ldrb	r3, [r7, #5]
 800c75c:	f083 0301 	eor.w	r3, r3, #1
 800c760:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800c766:	2301      	movs	r3, #1
 800c768:	e000      	b.n	800c76c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	bc80      	pop	{r7}
 800c774:	4770      	bx	lr
	...

0800c778 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800c778:	b480      	push	{r7}
 800c77a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800c77c:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b4 <LoRaMacCheckForRxAbort+0x3c>)
 800c77e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00f      	beq.n	800c7aa <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800c78a:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b4 <LoRaMacCheckForRxAbort+0x3c>)
 800c78c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c790:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c794:	4a07      	ldr	r2, [pc, #28]	@ (800c7b4 <LoRaMacCheckForRxAbort+0x3c>)
 800c796:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c79a:	4b06      	ldr	r3, [pc, #24]	@ (800c7b4 <LoRaMacCheckForRxAbort+0x3c>)
 800c79c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c7a0:	f023 0302 	bic.w	r3, r3, #2
 800c7a4:	4a03      	ldr	r2, [pc, #12]	@ (800c7b4 <LoRaMacCheckForRxAbort+0x3c>)
 800c7a6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800c7aa:	bf00      	nop
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bc80      	pop	{r7}
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	20000a28 	.word	0x20000a28

0800c7b8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800c7c8:	4b51      	ldr	r3, [pc, #324]	@ (800c910 <LoRaMacHandleNvm+0x158>)
 800c7ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f040 8099 	bne.w	800c906 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2124      	movs	r1, #36	@ 0x24
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f00b f897 	bl	801790c <Crc32>
 800c7de:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d006      	beq.n	800c7f8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800c7f0:	89fb      	ldrh	r3, [r7, #14]
 800c7f2:	f043 0301 	orr.w	r3, r3, #1
 800c7f6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3328      	adds	r3, #40	@ 0x28
 800c7fc:	211c      	movs	r1, #28
 800c7fe:	4618      	mov	r0, r3
 800c800:	f00b f884 	bl	801790c <Crc32>
 800c804:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d006      	beq.n	800c81e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800c816:	89fb      	ldrh	r3, [r7, #14]
 800c818:	f043 0302 	orr.w	r3, r3, #2
 800c81c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3348      	adds	r3, #72	@ 0x48
 800c822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c826:	4618      	mov	r0, r3
 800c828:	f00b f870 	bl	801790c <Crc32>
 800c82c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	429a      	cmp	r2, r3
 800c838:	d007      	beq.n	800c84a <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800c842:	89fb      	ldrh	r3, [r7, #14]
 800c844:	f043 0304 	orr.w	r3, r3, #4
 800c848:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800c850:	21d4      	movs	r1, #212	@ 0xd4
 800c852:	4618      	mov	r0, r3
 800c854:	f00b f85a 	bl	801790c <Crc32>
 800c858:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	429a      	cmp	r2, r3
 800c864:	d007      	beq.n	800c876 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800c86e:	89fb      	ldrh	r3, [r7, #14]
 800c870:	f043 0308 	orr.w	r3, r3, #8
 800c874:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800c87c:	2110      	movs	r1, #16
 800c87e:	4618      	mov	r0, r3
 800c880:	f00b f844 	bl	801790c <Crc32>
 800c884:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d007      	beq.n	800c8a2 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800c89a:	89fb      	ldrh	r3, [r7, #14]
 800c89c:	f043 0310 	orr.w	r3, r3, #16
 800c8a0:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800c8a8:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f00b f82d 	bl	801790c <Crc32>
 800c8b2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d007      	beq.n	800c8d0 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800c8c8:	89fb      	ldrh	r3, [r7, #14]
 800c8ca:	f043 0320 	orr.w	r3, r3, #32
 800c8ce:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 800c8d6:	2114      	movs	r1, #20
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f00b f817 	bl	801790c <Crc32>
 800c8de:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d007      	beq.n	800c8fc <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	f8c3 25c8 	str.w	r2, [r3, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800c8f4:	89fb      	ldrh	r3, [r7, #14]
 800c8f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8fa:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800c8fc:	89fb      	ldrh	r3, [r7, #14]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f002 f884 	bl	800ea0c <CallNvmDataChangeCallback>
 800c904:	e000      	b.n	800c908 <LoRaMacHandleNvm+0x150>
        return;
 800c906:	bf00      	nop
}
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20000a28 	.word	0x20000a28

0800c914 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d00d      	beq.n	800c940 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800c924:	6838      	ldr	r0, [r7, #0]
 800c926:	f00e fc87 	bl	801b238 <UTIL_TIMER_GetElapsedTime>
 800c92a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	429a      	cmp	r2, r3
 800c932:	d905      	bls.n	800c940 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800c934:	4b05      	ldr	r3, [pc, #20]	@ (800c94c <LoRaMacHandleResponseTimeout+0x38>)
 800c936:	2200      	movs	r2, #0
 800c938:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e000      	b.n	800c942 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20008000 	.word	0x20008000

0800c950 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800c956:	2300      	movs	r3, #0
 800c958:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800c95a:	f7ff fd0b 	bl	800c374 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800c95e:	f003 fe06 	bl	801056e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800c962:	4b25      	ldr	r3, [pc, #148]	@ (800c9f8 <LoRaMacProcess+0xa8>)
 800c964:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c968:	f003 0310 	and.w	r3, r3, #16
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d023      	beq.n	800c9ba <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800c972:	2000      	movs	r0, #0
 800c974:	f7ff fd7e 	bl	800c474 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800c978:	f7ff fefe 	bl	800c778 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800c97c:	f002 f864 	bl	800ea48 <IsRequestPending>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d006      	beq.n	800c994 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800c986:	f7ff feb1 	bl	800c6ec <LoRaMacCheckForBeaconAcquisition>
 800c98a:	4603      	mov	r3, r0
 800c98c:	461a      	mov	r2, r3
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	4313      	orrs	r3, r2
 800c992:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800c994:	79fb      	ldrb	r3, [r7, #7]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d103      	bne.n	800c9a2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800c99a:	f7ff fe71 	bl	800c680 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800c99e:	f7ff fe13 	bl	800c5c8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800c9a2:	f7ff fd77 	bl	800c494 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c9a6:	2001      	movs	r0, #1
 800c9a8:	f7ff fd64 	bl	800c474 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c9ac:	4a12      	ldr	r2, [pc, #72]	@ (800c9f8 <LoRaMacProcess+0xa8>)
 800c9ae:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c9b2:	f043 0320 	orr.w	r3, r3, #32
 800c9b6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800c9ba:	f7ff fdcd 	bl	800c558 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800c9be:	4b0e      	ldr	r3, [pc, #56]	@ (800c9f8 <LoRaMacProcess+0xa8>)
 800c9c0:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d101      	bne.n	800c9cc <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800c9c8:	f001 fc28 	bl	800e21c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <LoRaMacProcess+0xa8>)
 800c9ce:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800c9d2:	f003 0320 	and.w	r3, r3, #32
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d009      	beq.n	800c9f0 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800c9dc:	4a06      	ldr	r2, [pc, #24]	@ (800c9f8 <LoRaMacProcess+0xa8>)
 800c9de:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c9e2:	f023 0320 	bic.w	r3, r3, #32
 800c9e6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800c9ea:	4804      	ldr	r0, [pc, #16]	@ (800c9fc <LoRaMacProcess+0xac>)
 800c9ec:	f7ff fee4 	bl	800c7b8 <LoRaMacHandleNvm>
    }
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	20000a28 	.word	0x20000a28
 800c9fc:	20008000 	.word	0x20008000

0800ca00 <OnTxDelayedTimerEvent>:


static void OnTxDelayedTimerEvent( void* context )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ca08:	481e      	ldr	r0, [pc, #120]	@ (800ca84 <OnTxDelayedTimerEvent+0x84>)
 800ca0a:	f00e fb69 	bl	801b0e0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ca0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ca88 <OnTxDelayedTimerEvent+0x88>)
 800ca10:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ca14:	f023 0320 	bic.w	r3, r3, #32
 800ca18:	4a1b      	ldr	r2, [pc, #108]	@ (800ca88 <OnTxDelayedTimerEvent+0x88>)
 800ca1a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ca1e:	4b1b      	ldr	r3, [pc, #108]	@ (800ca8c <OnTxDelayedTimerEvent+0x8c>)
 800ca20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca24:	4a18      	ldr	r2, [pc, #96]	@ (800ca88 <OnTxDelayedTimerEvent+0x88>)
 800ca26:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800ca2a:	4611      	mov	r1, r2
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff ff71 	bl	800c914 <LoRaMacHandleResponseTimeout>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d11e      	bne.n	800ca76 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ca38:	2001      	movs	r0, #1
 800ca3a:	f001 f939 	bl	800dcb0 <ScheduleTx>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d01a      	beq.n	800ca7a <OnTxDelayedTimerEvent+0x7a>
 800ca44:	2b0b      	cmp	r3, #11
 800ca46:	d018      	beq.n	800ca7a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ca48:	4b10      	ldr	r3, [pc, #64]	@ (800ca8c <OnTxDelayedTimerEvent+0x8c>)
 800ca4a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	4b0d      	ldr	r3, [pc, #52]	@ (800ca88 <OnTxDelayedTimerEvent+0x88>)
 800ca52:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ca56:	4b0c      	ldr	r3, [pc, #48]	@ (800ca88 <OnTxDelayedTimerEvent+0x88>)
 800ca58:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca88 <OnTxDelayedTimerEvent+0x88>)
 800ca5e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ca62:	4b09      	ldr	r3, [pc, #36]	@ (800ca88 <OnTxDelayedTimerEvent+0x88>)
 800ca64:	2209      	movs	r2, #9
 800ca66:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ca6a:	2009      	movs	r0, #9
 800ca6c:	f004 f9ba 	bl	8010de4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ca70:	f001 ff7a 	bl	800e968 <StopRetransmission>
            break;
 800ca74:	e002      	b.n	800ca7c <OnTxDelayedTimerEvent+0x7c>
        return;
 800ca76:	bf00      	nop
 800ca78:	e000      	b.n	800ca7c <OnTxDelayedTimerEvent+0x7c>
            break;
 800ca7a:	bf00      	nop
        }
    }
}
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	20000d90 	.word	0x20000d90
 800ca88:	20000a28 	.word	0x20000a28
 800ca8c:	20008000 	.word	0x20008000

0800ca90 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ca98:	4b17      	ldr	r3, [pc, #92]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800ca9a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800ca9e:	4b16      	ldr	r3, [pc, #88]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800caa0:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800caa4:	4b15      	ldr	r3, [pc, #84]	@ (800cafc <OnRxWindow1TimerEvent+0x6c>)
 800caa6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800caaa:	b25a      	sxtb	r2, r3
 800caac:	4b12      	ldr	r3, [pc, #72]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800caae:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cab2:	4b12      	ldr	r3, [pc, #72]	@ (800cafc <OnRxWindow1TimerEvent+0x6c>)
 800cab4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cab8:	4b0f      	ldr	r3, [pc, #60]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800caba:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cabe:	4b0f      	ldr	r3, [pc, #60]	@ (800cafc <OnRxWindow1TimerEvent+0x6c>)
 800cac0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800cac4:	4b0c      	ldr	r3, [pc, #48]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800cac6:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800caca:	4b0b      	ldr	r3, [pc, #44]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800cad2:	4b09      	ldr	r3, [pc, #36]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cada:	4b08      	ldr	r3, [pc, #32]	@ (800cafc <OnRxWindow1TimerEvent+0x6c>)
 800cadc:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800cae0:	4b05      	ldr	r3, [pc, #20]	@ (800caf8 <OnRxWindow1TimerEvent+0x68>)
 800cae2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800cae6:	4906      	ldr	r1, [pc, #24]	@ (800cb00 <OnRxWindow1TimerEvent+0x70>)
 800cae8:	4806      	ldr	r0, [pc, #24]	@ (800cb04 <OnRxWindow1TimerEvent+0x74>)
 800caea:	f001 fb63 	bl	800e1b4 <RxWindowSetup>
}
 800caee:	bf00      	nop
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	20000a28 	.word	0x20000a28
 800cafc:	20008000 	.word	0x20008000
 800cb00:	20000de0 	.word	0x20000de0
 800cb04:	20000da8 	.word	0x20000da8

0800cb08 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800cb10:	4b19      	ldr	r3, [pc, #100]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb12:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d029      	beq.n	800cb6e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cb1a:	4b17      	ldr	r3, [pc, #92]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb1c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800cb20:	4b15      	ldr	r3, [pc, #84]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb22:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800cb26:	4b15      	ldr	r3, [pc, #84]	@ (800cb7c <OnRxWindow2TimerEvent+0x74>)
 800cb28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb2a:	4a13      	ldr	r2, [pc, #76]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb2c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cb30:	4b12      	ldr	r3, [pc, #72]	@ (800cb7c <OnRxWindow2TimerEvent+0x74>)
 800cb32:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cb36:	4b10      	ldr	r3, [pc, #64]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb38:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cb3c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb7c <OnRxWindow2TimerEvent+0x74>)
 800cb3e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800cb42:	4b0d      	ldr	r3, [pc, #52]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb44:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cb48:	4b0b      	ldr	r3, [pc, #44]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cb50:	4b09      	ldr	r3, [pc, #36]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cb58:	4b08      	ldr	r3, [pc, #32]	@ (800cb7c <OnRxWindow2TimerEvent+0x74>)
 800cb5a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800cb5e:	4b06      	ldr	r3, [pc, #24]	@ (800cb78 <OnRxWindow2TimerEvent+0x70>)
 800cb60:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800cb64:	4906      	ldr	r1, [pc, #24]	@ (800cb80 <OnRxWindow2TimerEvent+0x78>)
 800cb66:	4807      	ldr	r0, [pc, #28]	@ (800cb84 <OnRxWindow2TimerEvent+0x7c>)
 800cb68:	f001 fb24 	bl	800e1b4 <RxWindowSetup>
 800cb6c:	e000      	b.n	800cb70 <OnRxWindow2TimerEvent+0x68>
        return;
 800cb6e:	bf00      	nop
}
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	20000a28 	.word	0x20000a28
 800cb7c:	20008000 	.word	0x20008000
 800cb80:	20000df8 	.word	0x20000df8
 800cb84:	20000dc0 	.word	0x20000dc0

0800cb88 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800cb90:	4808      	ldr	r0, [pc, #32]	@ (800cbb4 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800cb92:	f00e faa5 	bl	801b0e0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800cb96:	4b08      	ldr	r3, [pc, #32]	@ (800cbb8 <OnRetransmitTimeoutTimerEvent+0x30>)
 800cb98:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800cba0:	4b05      	ldr	r3, [pc, #20]	@ (800cbb8 <OnRetransmitTimeoutTimerEvent+0x30>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800cba8:	f001 ff1a 	bl	800e9e0 <OnMacProcessNotify>
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	20000e28 	.word	0x20000e28
 800cbb8:	20000a28 	.word	0x20000a28

0800cbbc <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60ba      	str	r2, [r7, #8]
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	73fb      	strb	r3, [r7, #15]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <GetFCntDown+0x24>
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <GetFCntDown+0x24>
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cbe0:	2309      	movs	r3, #9
 800cbe2:	e028      	b.n	800cc36 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d016      	beq.n	800cc18 <GetFCntDown+0x5c>
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d118      	bne.n	800cc20 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800cbee:	79bb      	ldrb	r3, [r7, #6]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d10d      	bne.n	800cc10 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d002      	beq.n	800cc00 <GetFCntDown+0x44>
 800cbfa:	7bbb      	ldrb	r3, [r7, #14]
 800cbfc:	2b03      	cmp	r3, #3
 800cbfe:	d103      	bne.n	800cc08 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2202      	movs	r2, #2
 800cc04:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800cc06:	e00d      	b.n	800cc24 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	701a      	strb	r2, [r3, #0]
            break;
 800cc0e:	e009      	b.n	800cc24 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	2203      	movs	r2, #3
 800cc14:	701a      	strb	r2, [r3, #0]
            break;
 800cc16:	e005      	b.n	800cc24 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	2204      	movs	r2, #4
 800cc1c:	701a      	strb	r2, [r3, #0]
            break;
 800cc1e:	e001      	b.n	800cc24 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800cc20:	2305      	movs	r3, #5
 800cc22:	e008      	b.n	800cc36 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	7818      	ldrb	r0, [r3, #0]
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	89db      	ldrh	r3, [r3, #14]
 800cc2c:	69fa      	ldr	r2, [r7, #28]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f004 fd12 	bl	8011658 <LoRaMacCryptoGetFCntDown>
 800cc34:	4603      	mov	r3, r0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
	...

0800cc40 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800cc40:	b5b0      	push	{r4, r5, r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800cc4e:	4b6e      	ldr	r3, [pc, #440]	@ (800ce08 <SwitchClass+0x1c8>)
 800cc50:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	f000 80bb 	beq.w	800cdd0 <SwitchClass+0x190>
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	f300 80ce 	bgt.w	800cdfc <SwitchClass+0x1bc>
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d003      	beq.n	800cc6c <SwitchClass+0x2c>
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	f000 80a5 	beq.w	800cdb4 <SwitchClass+0x174>
 800cc6a:	e0c7      	b.n	800cdfc <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d109      	bne.n	800cc86 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800cc72:	4b65      	ldr	r3, [pc, #404]	@ (800ce08 <SwitchClass+0x1c8>)
 800cc74:	4a64      	ldr	r2, [pc, #400]	@ (800ce08 <SwitchClass+0x1c8>)
 800cc76:	3374      	adds	r3, #116	@ 0x74
 800cc78:	326c      	adds	r2, #108	@ 0x6c
 800cc7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc7e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d10c      	bne.n	800cca6 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f003 fc04 	bl	801049c <LoRaMacClassBSwitchClass>
 800cc94:	4603      	mov	r3, r0
 800cc96:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d103      	bne.n	800cca6 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800cc9e:	4a5a      	ldr	r2, [pc, #360]	@ (800ce08 <SwitchClass+0x1c8>)
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800cca6:	79fb      	ldrb	r3, [r7, #7]
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	f040 80a2 	bne.w	800cdf2 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ccae:	4a56      	ldr	r2, [pc, #344]	@ (800ce08 <SwitchClass+0x1c8>)
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ccb6:	4a55      	ldr	r2, [pc, #340]	@ (800ce0c <SwitchClass+0x1cc>)
 800ccb8:	4b54      	ldr	r3, [pc, #336]	@ (800ce0c <SwitchClass+0x1cc>)
 800ccba:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800ccbe:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800ccc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccca:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ccce:	4b4f      	ldr	r3, [pc, #316]	@ (800ce0c <SwitchClass+0x1cc>)
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	73bb      	strb	r3, [r7, #14]
 800ccda:	e05b      	b.n	800cd94 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800ccdc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cce0:	4949      	ldr	r1, [pc, #292]	@ (800ce08 <SwitchClass+0x1c8>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	011b      	lsls	r3, r3, #4
 800ccea:	440b      	add	r3, r1
 800ccec:	33e9      	adds	r3, #233	@ 0xe9
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d049      	beq.n	800cd88 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800ccf4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800ccf8:	4943      	ldr	r1, [pc, #268]	@ (800ce08 <SwitchClass+0x1c8>)
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	005b      	lsls	r3, r3, #1
 800ccfe:	4413      	add	r3, r2
 800cd00:	011b      	lsls	r3, r3, #4
 800cd02:	440b      	add	r3, r1
 800cd04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cd08:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d13c      	bne.n	800cd88 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800cd0e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd12:	493d      	ldr	r1, [pc, #244]	@ (800ce08 <SwitchClass+0x1c8>)
 800cd14:	4613      	mov	r3, r2
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	4413      	add	r3, r2
 800cd1a:	011b      	lsls	r3, r3, #4
 800cd1c:	440b      	add	r3, r1
 800cd1e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a38      	ldr	r2, [pc, #224]	@ (800ce08 <SwitchClass+0x1c8>)
 800cd26:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800cd28:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd2c:	4936      	ldr	r1, [pc, #216]	@ (800ce08 <SwitchClass+0x1c8>)
 800cd2e:	4613      	mov	r3, r2
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	011b      	lsls	r3, r3, #4
 800cd36:	440b      	add	r3, r1
 800cd38:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800cd3c:	f993 3000 	ldrsb.w	r3, [r3]
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	4b31      	ldr	r3, [pc, #196]	@ (800ce08 <SwitchClass+0x1c8>)
 800cd44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800cd48:	4b30      	ldr	r3, [pc, #192]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd4a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800cd4e:	4b2f      	ldr	r3, [pc, #188]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd50:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800cd54:	4b2c      	ldr	r3, [pc, #176]	@ (800ce08 <SwitchClass+0x1c8>)
 800cd56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd58:	4a2c      	ldr	r2, [pc, #176]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd5a:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd5e:	4b2a      	ldr	r3, [pc, #168]	@ (800ce08 <SwitchClass+0x1c8>)
 800cd60:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cd64:	4b29      	ldr	r3, [pc, #164]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd66:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cd6a:	4b27      	ldr	r3, [pc, #156]	@ (800ce08 <SwitchClass+0x1c8>)
 800cd6c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800cd70:	4b26      	ldr	r3, [pc, #152]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd72:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800cd76:	4b25      	ldr	r3, [pc, #148]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd78:	2203      	movs	r2, #3
 800cd7a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800cd7e:	4b23      	ldr	r3, [pc, #140]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800cd86:	e009      	b.n	800cd9c <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cd88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	3301      	adds	r3, #1
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	73bb      	strb	r3, [r7, #14]
 800cd94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	dd9f      	ble.n	800ccdc <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	@ (800ce0c <SwitchClass+0x1cc>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800cda4:	4b1a      	ldr	r3, [pc, #104]	@ (800ce10 <SwitchClass+0x1d0>)
 800cda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800cdaa:	f001 fa37 	bl	800e21c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800cdb2:	e01e      	b.n	800cdf2 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f003 fb70 	bl	801049c <LoRaMacClassBSwitchClass>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800cdc0:	7bfb      	ldrb	r3, [r7, #15]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d117      	bne.n	800cdf6 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cdc6:	4a10      	ldr	r2, [pc, #64]	@ (800ce08 <SwitchClass+0x1c8>)
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800cdce:	e012      	b.n	800cdf6 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d111      	bne.n	800cdfa <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800cdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce0c <SwitchClass+0x1cc>)
 800cdd8:	2206      	movs	r2, #6
 800cdda:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cdde:	4a0a      	ldr	r2, [pc, #40]	@ (800ce08 <SwitchClass+0x1c8>)
 800cde0:	79fb      	ldrb	r3, [r7, #7]
 800cde2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800cde6:	4b0a      	ldr	r3, [pc, #40]	@ (800ce10 <SwitchClass+0x1d0>)
 800cde8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdea:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800cdf0:	e003      	b.n	800cdfa <SwitchClass+0x1ba>
            break;
 800cdf2:	bf00      	nop
 800cdf4:	e002      	b.n	800cdfc <SwitchClass+0x1bc>
            break;
 800cdf6:	bf00      	nop
 800cdf8:	e000      	b.n	800cdfc <SwitchClass+0x1bc>
            break;
 800cdfa:	bf00      	nop
        }
    }

    return status;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bdb0      	pop	{r4, r5, r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20008000 	.word	0x20008000
 800ce0c:	20000a28 	.word	0x20000a28
 800ce10:	08021f8c 	.word	0x08021f8c

0800ce14 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ce1e:	4b10      	ldr	r3, [pc, #64]	@ (800ce60 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ce20:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ce24:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ce26:	79fb      	ldrb	r3, [r7, #7]
 800ce28:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ce2a:	230d      	movs	r3, #13
 800ce2c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ce2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ce60 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ce30:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ce38:	230e      	movs	r3, #14
 800ce3a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ce3c:	4b08      	ldr	r3, [pc, #32]	@ (800ce60 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ce3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ce42:	f107 0210 	add.w	r2, r7, #16
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f005 fa6c 	bl	8012326 <RegionGetPhyParam>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	b2db      	uxtb	r3, r3
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3718      	adds	r7, #24
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	20008000 	.word	0x20008000

0800ce64 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	71fb      	strb	r3, [r7, #7]
 800ce6e:	460b      	mov	r3, r1
 800ce70:	71bb      	strb	r3, [r7, #6]
 800ce72:	4613      	mov	r3, r2
 800ce74:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ce7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff ffc6 	bl	800ce14 <GetMaxAppPayloadWithoutFOptsLength>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	797b      	ldrb	r3, [r7, #5]
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	4413      	add	r3, r2
 800ce96:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ce98:	89ba      	ldrh	r2, [r7, #12]
 800ce9a:	89fb      	ldrh	r3, [r7, #14]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d804      	bhi.n	800ceaa <ValidatePayloadLength+0x46>
 800cea0:	89bb      	ldrh	r3, [r7, #12]
 800cea2:	2bff      	cmp	r3, #255	@ 0xff
 800cea4:	d801      	bhi.n	800ceaa <ValidatePayloadLength+0x46>
    {
        return true;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e000      	b.n	800ceac <ValidatePayloadLength+0x48>
    }
    return false;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b0a5      	sub	sp, #148	@ 0x94
 800ceb8:	af02      	add	r7, sp, #8
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	4608      	mov	r0, r1
 800cebe:	4611      	mov	r1, r2
 800cec0:	461a      	mov	r2, r3
 800cec2:	4603      	mov	r3, r0
 800cec4:	70fb      	strb	r3, [r7, #3]
 800cec6:	460b      	mov	r3, r1
 800cec8:	70bb      	strb	r3, [r7, #2]
 800ceca:	4613      	mov	r3, r2
 800cecc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ceda:	2300      	movs	r3, #0
 800cedc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800cee0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 84b9 	beq.w	800d85c <ProcessMacCommands+0x9a8>
 800ceea:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	f040 84ba 	bne.w	800d868 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800cef4:	f000 bcb2 	b.w	800d85c <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f003 fdcb 	bl	8010a9c <LoRaMacCommandsGetCmdSize>
 800cf06:	4603      	mov	r3, r0
 800cf08:	461a      	mov	r2, r3
 800cf0a:	78fb      	ldrb	r3, [r7, #3]
 800cf0c:	441a      	add	r2, r3
 800cf0e:	78bb      	ldrb	r3, [r7, #2]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	f300 84ab 	bgt.w	800d86c <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	70fa      	strb	r2, [r7, #3]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4413      	add	r3, r2
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	3b02      	subs	r3, #2
 800cf26:	2b11      	cmp	r3, #17
 800cf28:	f200 84a2 	bhi.w	800d870 <ProcessMacCommands+0x9bc>
 800cf2c:	a201      	add	r2, pc, #4	@ (adr r2, 800cf34 <ProcessMacCommands+0x80>)
 800cf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf32:	bf00      	nop
 800cf34:	0800cf7d 	.word	0x0800cf7d
 800cf38:	0800cfbf 	.word	0x0800cfbf
 800cf3c:	0800d13b 	.word	0x0800d13b
 800cf40:	0800d179 	.word	0x0800d179
 800cf44:	0800d271 	.word	0x0800d271
 800cf48:	0800d2c1 	.word	0x0800d2c1
 800cf4c:	0800d37d 	.word	0x0800d37d
 800cf50:	0800d3d3 	.word	0x0800d3d3
 800cf54:	0800d4b9 	.word	0x0800d4b9
 800cf58:	0800d871 	.word	0x0800d871
 800cf5c:	0800d871 	.word	0x0800d871
 800cf60:	0800d561 	.word	0x0800d561
 800cf64:	0800d871 	.word	0x0800d871
 800cf68:	0800d871 	.word	0x0800d871
 800cf6c:	0800d681 	.word	0x0800d681
 800cf70:	0800d6b5 	.word	0x0800d6b5
 800cf74:	0800d745 	.word	0x0800d745
 800cf78:	0800d7bd 	.word	0x0800d7bd
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800cf7c:	2005      	movs	r0, #5
 800cf7e:	f003 ff65 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 845c 	beq.w	800d842 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800cf8a:	2105      	movs	r1, #5
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	f003 fed1 	bl	8010d34 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800cf92:	78fb      	ldrb	r3, [r7, #3]
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	70fa      	strb	r2, [r7, #3]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	781a      	ldrb	r2, [r3, #0]
 800cfa0:	4bb0      	ldr	r3, [pc, #704]	@ (800d264 <ProcessMacCommands+0x3b0>)
 800cfa2:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800cfa6:	78fb      	ldrb	r3, [r7, #3]
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	70fa      	strb	r2, [r7, #3]
 800cfac:	461a      	mov	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	781a      	ldrb	r2, [r3, #0]
 800cfb4:	4bab      	ldr	r3, [pc, #684]	@ (800d264 <ProcessMacCommands+0x3b0>)
 800cfb6:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 800cfba:	f000 bc42 	b.w	800d842 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800cfd6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cfda:	f083 0301 	eor.w	r3, r3, #1
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f000 80a6 	beq.w	800d132 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	4413      	add	r3, r2
 800cff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800cff6:	4b9c      	ldr	r3, [pc, #624]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800cff8:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800cffc:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d000:	4b99      	ldr	r3, [pc, #612]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d002:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d006:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800d00a:	4b97      	ldr	r3, [pc, #604]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d00c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d010:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d014:	4b94      	ldr	r3, [pc, #592]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d016:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800d01a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d01e:	4b92      	ldr	r3, [pc, #584]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d020:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800d024:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800d028:	4b8f      	ldr	r3, [pc, #572]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d02a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800d02e:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800d030:	4b8d      	ldr	r3, [pc, #564]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d032:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800d036:	2b00      	cmp	r3, #0
 800d038:	d008      	beq.n	800d04c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800d03a:	78ba      	ldrb	r2, [r7, #2]
 800d03c:	78fb      	ldrb	r3, [r7, #3]
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	b2db      	uxtb	r3, r3
 800d042:	3301      	adds	r3, #1
 800d044:	b2db      	uxtb	r3, r3
 800d046:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800d04a:	e002      	b.n	800d052 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800d04c:	2305      	movs	r3, #5
 800d04e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800d052:	4b85      	ldr	r3, [pc, #532]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d054:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d058:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800d05c:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800d060:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800d064:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	4623      	mov	r3, r4
 800d072:	f005 fa5b 	bl	801252c <RegionLinkAdrReq>
 800d076:	4603      	mov	r3, r0
 800d078:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800d07c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d080:	f003 0307 	and.w	r3, r3, #7
 800d084:	2b07      	cmp	r3, #7
 800d086:	d119      	bne.n	800d0bc <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800d088:	4b77      	ldr	r3, [pc, #476]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d08a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800d08e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800d092:	429a      	cmp	r2, r3
 800d094:	da03      	bge.n	800d09e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800d096:	4b74      	ldr	r3, [pc, #464]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800d09e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800d0a2:	4b71      	ldr	r3, [pc, #452]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d0a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800d0a8:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800d0ac:	4b6e      	ldr	r3, [pc, #440]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d0ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800d0b2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800d0b6:	4b6c      	ldr	r3, [pc, #432]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d0b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800d0c2:	e00b      	b.n	800d0dc <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800d0c4:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	2003      	movs	r0, #3
 800d0ce:	f003 fb85 	bl	80107dc <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d0d2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800d0dc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800d0e0:	4a62      	ldr	r2, [pc, #392]	@ (800d26c <ProcessMacCommands+0x3b8>)
 800d0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e6:	089b      	lsrs	r3, r3, #2
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d3e8      	bcc.n	800d0c4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800d0f2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800d0f6:	78fb      	ldrb	r3, [r7, #3]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800d100:	78fa      	ldrb	r2, [r7, #3]
 800d102:	78bb      	ldrb	r3, [r7, #2]
 800d104:	429a      	cmp	r2, r3
 800d106:	d20a      	bcs.n	800d11e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800d108:	78fb      	ldrb	r3, [r7, #3]
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	70fa      	strb	r2, [r7, #3]
 800d10e:	461a      	mov	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4413      	add	r3, r2
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b03      	cmp	r3, #3
 800d118:	f43f af68 	beq.w	800cfec <ProcessMacCommands+0x138>
 800d11c:	e000      	b.n	800d120 <ProcessMacCommands+0x26c>
                            break;
 800d11e:	bf00      	nop

                    if( macIndex < commandsSize )
 800d120:	78fa      	ldrb	r2, [r7, #3]
 800d122:	78bb      	ldrb	r3, [r7, #2]
 800d124:	429a      	cmp	r2, r3
 800d126:	f080 838e 	bcs.w	800d846 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800d12a:	78fb      	ldrb	r3, [r7, #3]
 800d12c:	3b01      	subs	r3, #1
 800d12e:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800d130:	e389      	b.n	800d846 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	3304      	adds	r3, #4
 800d136:	70fb      	strb	r3, [r7, #3]
                break;
 800d138:	e385      	b.n	800d846 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800d13a:	78fb      	ldrb	r3, [r7, #3]
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	70fa      	strb	r2, [r7, #3]
 800d140:	461a      	mov	r2, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4413      	add	r3, r2
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	f003 030f 	and.w	r3, r3, #15
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	4b46      	ldr	r3, [pc, #280]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d150:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800d154:	4b44      	ldr	r3, [pc, #272]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d156:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800d15a:	461a      	mov	r2, r3
 800d15c:	2301      	movs	r3, #1
 800d15e:	4093      	lsls	r3, r2
 800d160:	b29a      	uxth	r2, r3
 800d162:	4b41      	ldr	r3, [pc, #260]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d164:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800d168:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d16c:	2200      	movs	r2, #0
 800d16e:	4619      	mov	r1, r3
 800d170:	2004      	movs	r0, #4
 800d172:	f003 fb33 	bl	80107dc <LoRaMacCommandsAddCmd>
                break;
 800d176:	e371      	b.n	800d85c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800d178:	2307      	movs	r3, #7
 800d17a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800d17e:	78fb      	ldrb	r3, [r7, #3]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	4413      	add	r3, r2
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	091b      	lsrs	r3, r3, #4
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	b25b      	sxtb	r3, r3
 800d18c:	f003 0307 	and.w	r3, r3, #7
 800d190:	b25b      	sxtb	r3, r3
 800d192:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800d196:	78fb      	ldrb	r3, [r7, #3]
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	4413      	add	r3, r2
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	b25b      	sxtb	r3, r3
 800d1a0:	f003 030f 	and.w	r3, r3, #15
 800d1a4:	b25b      	sxtb	r3, r3
 800d1a6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	70fa      	strb	r2, [r7, #3]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	1c5a      	adds	r2, r3, #1
 800d1c4:	70fa      	strb	r2, [r7, #3]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	021a      	lsls	r2, r3, #8
 800d1d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d1d6:	78fb      	ldrb	r3, [r7, #3]
 800d1d8:	1c5a      	adds	r2, r3, #1
 800d1da:	70fa      	strb	r2, [r7, #3]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	041a      	lsls	r2, r3, #16
 800d1e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800d1ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1ee:	2264      	movs	r2, #100	@ 0x64
 800d1f0:	fb02 f303 	mul.w	r3, r2, r3
 800d1f4:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800d1f6:	4b1c      	ldr	r3, [pc, #112]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d1f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d1fc:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d200:	4611      	mov	r1, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f005 f9b9 	bl	801257a <RegionRxParamSetupReq>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800d20e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b07      	cmp	r3, #7
 800d218:	d117      	bne.n	800d24a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800d21a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	4b11      	ldr	r3, [pc, #68]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d222:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800d226:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	4b0e      	ldr	r3, [pc, #56]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d22e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800d232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d234:	4a0c      	ldr	r2, [pc, #48]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d236:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800d238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d23a:	4a0b      	ldr	r2, [pc, #44]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d23c:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800d23e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800d242:	b2da      	uxtb	r2, r3
 800d244:	4b08      	ldr	r3, [pc, #32]	@ (800d268 <ProcessMacCommands+0x3b4>)
 800d246:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800d24a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d24e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800d252:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d256:	2201      	movs	r2, #1
 800d258:	4619      	mov	r1, r3
 800d25a:	2005      	movs	r0, #5
 800d25c:	f003 fabe 	bl	80107dc <LoRaMacCommandsAddCmd>
                break;
 800d260:	e2fc      	b.n	800d85c <ProcessMacCommands+0x9a8>
 800d262:	bf00      	nop
 800d264:	20000a28 	.word	0x20000a28
 800d268:	20008000 	.word	0x20008000
 800d26c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800d270:	23ff      	movs	r3, #255	@ 0xff
 800d272:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800d276:	4bb7      	ldr	r3, [pc, #732]	@ (800d554 <ProcessMacCommands+0x6a0>)
 800d278:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00d      	beq.n	800d29c <ProcessMacCommands+0x3e8>
 800d280:	4bb4      	ldr	r3, [pc, #720]	@ (800d554 <ProcessMacCommands+0x6a0>)
 800d282:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d007      	beq.n	800d29c <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800d28c:	4bb1      	ldr	r3, [pc, #708]	@ (800d554 <ProcessMacCommands+0x6a0>)
 800d28e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4798      	blx	r3
 800d296:	4603      	mov	r3, r0
 800d298:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800d29c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d2a0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800d2a4:	787b      	ldrb	r3, [r7, #1]
 800d2a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800d2b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	2006      	movs	r0, #6
 800d2ba:	f003 fa8f 	bl	80107dc <LoRaMacCommandsAddCmd>
                break;
 800d2be:	e2cd      	b.n	800d85c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800d2c6:	78fb      	ldrb	r3, [r7, #3]
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	70fa      	strb	r2, [r7, #3]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	b25b      	sxtb	r3, r3
 800d2d6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800d2da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800d2de:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	70fa      	strb	r2, [r7, #3]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	70fa      	strb	r2, [r7, #3]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	021a      	lsls	r2, r3, #8
 800d300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d302:	4313      	orrs	r3, r2
 800d304:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d306:	78fb      	ldrb	r3, [r7, #3]
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	70fa      	strb	r2, [r7, #3]
 800d30c:	461a      	mov	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	041a      	lsls	r2, r3, #16
 800d316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d318:	4313      	orrs	r3, r2
 800d31a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800d31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31e:	2264      	movs	r2, #100	@ 0x64
 800d320:	fb02 f303 	mul.w	r3, r2, r3
 800d324:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800d32a:	78fb      	ldrb	r3, [r7, #3]
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	70fa      	strb	r2, [r7, #3]
 800d330:	461a      	mov	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4413      	add	r3, r2
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	b25b      	sxtb	r3, r3
 800d33a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800d33e:	4b86      	ldr	r3, [pc, #536]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d340:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d344:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800d348:	4611      	mov	r1, r2
 800d34a:	4618      	mov	r0, r3
 800d34c:	f005 f930 	bl	80125b0 <RegionNewChannelReq>
 800d350:	4603      	mov	r3, r0
 800d352:	b2db      	uxtb	r3, r3
 800d354:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800d358:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d35c:	b25b      	sxtb	r3, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f2c0 8273 	blt.w	800d84a <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800d364:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d368:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800d36c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d370:	2201      	movs	r2, #1
 800d372:	4619      	mov	r1, r3
 800d374:	2007      	movs	r0, #7
 800d376:	f003 fa31 	bl	80107dc <LoRaMacCommandsAddCmd>
                }
                break;
 800d37a:	e266      	b.n	800d84a <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800d37c:	78fb      	ldrb	r3, [r7, #3]
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	70fa      	strb	r2, [r7, #3]
 800d382:	461a      	mov	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4413      	add	r3, r2
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	f003 030f 	and.w	r3, r3, #15
 800d38e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800d392:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d396:	2b00      	cmp	r3, #0
 800d398:	d104      	bne.n	800d3a4 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800d39a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d39e:	3301      	adds	r3, #1
 800d3a0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800d3a4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d3a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d3ac:	fb02 f303 	mul.w	r3, r2, r3
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	4b69      	ldr	r3, [pc, #420]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d3b4:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d3b6:	4b68      	ldr	r3, [pc, #416]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d3b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3ba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d3be:	4a66      	ldr	r2, [pc, #408]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d3c0:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800d3c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	2008      	movs	r0, #8
 800d3cc:	f003 fa06 	bl	80107dc <LoRaMacCommandsAddCmd>
                break;
 800d3d0:	e244      	b.n	800d85c <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800d3d2:	78fb      	ldrb	r3, [r7, #3]
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	70fa      	strb	r2, [r7, #3]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4413      	add	r3, r2
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800d3f0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d3f4:	f003 0320 	and.w	r3, r3, #32
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800d402:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d406:	f003 0310 	and.w	r3, r3, #16
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800d40e:	2301      	movs	r3, #1
 800d410:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800d414:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d418:	f003 030f 	and.w	r3, r3, #15
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800d422:	4b4d      	ldr	r3, [pc, #308]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d424:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d428:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f005 f8d9 	bl	80125e6 <RegionTxParamSetupReq>
 800d434:	4603      	mov	r3, r0
 800d436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43a:	f000 8208 	beq.w	800d84e <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800d43e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800d442:	4b45      	ldr	r3, [pc, #276]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d444:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800d448:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800d44c:	4b42      	ldr	r3, [pc, #264]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d44e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800d452:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d456:	461a      	mov	r2, r3
 800d458:	4b40      	ldr	r3, [pc, #256]	@ (800d55c <ProcessMacCommands+0x6a8>)
 800d45a:	5c9b      	ldrb	r3, [r3, r2]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f3 fa09 	bl	8000874 <__aeabi_ui2f>
 800d462:	4603      	mov	r3, r0
 800d464:	4a3c      	ldr	r2, [pc, #240]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d466:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800d46a:	2302      	movs	r3, #2
 800d46c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d470:	4b39      	ldr	r3, [pc, #228]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d472:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d476:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d47a:	4b37      	ldr	r3, [pc, #220]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d47c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d480:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d484:	4611      	mov	r1, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f004 ff4d 	bl	8012326 <RegionGetPhyParam>
 800d48c:	4603      	mov	r3, r0
 800d48e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800d490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d492:	b25a      	sxtb	r2, r3
 800d494:	4b30      	ldr	r3, [pc, #192]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d496:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d49a:	4293      	cmp	r3, r2
 800d49c:	bfb8      	it	lt
 800d49e:	4613      	movlt	r3, r2
 800d4a0:	b25a      	sxtb	r2, r3
 800d4a2:	4b2d      	ldr	r3, [pc, #180]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d4a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800d4a8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	2009      	movs	r0, #9
 800d4b2:	f003 f993 	bl	80107dc <LoRaMacCommandsAddCmd>
                }
                break;
 800d4b6:	e1ca      	b.n	800d84e <ProcessMacCommands+0x99a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800d4b8:	2303      	movs	r3, #3
 800d4ba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800d4be:	78fb      	ldrb	r3, [r7, #3]
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	70fa      	strb	r2, [r7, #3]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	70fa      	strb	r2, [r7, #3]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4413      	add	r3, r2
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d4e0:	78fb      	ldrb	r3, [r7, #3]
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	70fa      	strb	r2, [r7, #3]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	021a      	lsls	r2, r3, #8
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d4f6:	78fb      	ldrb	r3, [r7, #3]
 800d4f8:	1c5a      	adds	r2, r3, #1
 800d4fa:	70fa      	strb	r2, [r7, #3]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4413      	add	r3, r2
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	041a      	lsls	r2, r3, #16
 800d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d508:	4313      	orrs	r3, r2
 800d50a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800d50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d50e:	2264      	movs	r2, #100	@ 0x64
 800d510:	fb02 f303 	mul.w	r3, r2, r3
 800d514:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800d516:	4b10      	ldr	r3, [pc, #64]	@ (800d558 <ProcessMacCommands+0x6a4>)
 800d518:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d51c:	f107 0220 	add.w	r2, r7, #32
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f005 f87a 	bl	801261c <RegionDlChannelReq>
 800d528:	4603      	mov	r3, r0
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800d530:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d534:	b25b      	sxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	f2c0 818b 	blt.w	800d852 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800d53c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d540:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800d544:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d548:	2201      	movs	r2, #1
 800d54a:	4619      	mov	r1, r3
 800d54c:	200a      	movs	r0, #10
 800d54e:	f003 f945 	bl	80107dc <LoRaMacCommandsAddCmd>
                }
                break;
 800d552:	e17e      	b.n	800d852 <ProcessMacCommands+0x99e>
 800d554:	20000a28 	.word	0x20000a28
 800d558:	20008000 	.word	0x20008000
 800d55c:	08021b3c 	.word	0x08021b3c
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800d560:	2009      	movs	r0, #9
 800d562:	f003 fc73 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8084 	beq.w	800d676 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800d56e:	2109      	movs	r1, #9
 800d570:	2000      	movs	r0, #0
 800d572:	f003 fbdf 	bl	8010d34 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800d576:	f107 0318 	add.w	r3, r7, #24
 800d57a:	2200      	movs	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800d580:	f107 0310 	add.w	r3, r7, #16
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800d58a:	f107 0308 	add.w	r3, r7, #8
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]
 800d592:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800d594:	78fb      	ldrb	r3, [r7, #3]
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	70fa      	strb	r2, [r7, #3]
 800d59a:	461a      	mov	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4413      	add	r3, r2
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800d5a4:	78fb      	ldrb	r3, [r7, #3]
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	70fa      	strb	r2, [r7, #3]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	021a      	lsls	r2, r3, #8
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	70fa      	strb	r2, [r7, #3]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	041a      	lsls	r2, r3, #16
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800d5d0:	78fb      	ldrb	r3, [r7, #3]
 800d5d2:	1c5a      	adds	r2, r3, #1
 800d5d4:	70fa      	strb	r2, [r7, #3]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4413      	add	r3, r2
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	061a      	lsls	r2, r3, #24
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800d5e6:	78fb      	ldrb	r3, [r7, #3]
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	70fa      	strb	r2, [r7, #3]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	b21b      	sxth	r3, r3
 800d5f6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800d5f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d602:	fb02 f303 	mul.w	r3, r2, r3
 800d606:	121b      	asrs	r3, r3, #8
 800d608:	b21b      	sxth	r3, r3
 800d60a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800d60c:	f107 0310 	add.w	r3, r7, #16
 800d610:	f107 0218 	add.w	r2, r7, #24
 800d614:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d618:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	4b96      	ldr	r3, [pc, #600]	@ (800d878 <ProcessMacCommands+0x9c4>)
 800d620:	4413      	add	r3, r2
 800d622:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800d624:	f107 0308 	add.w	r3, r7, #8
 800d628:	4618      	mov	r0, r3
 800d62a:	f00d fbe7 	bl	801adfc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800d62e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800d632:	4b92      	ldr	r3, [pc, #584]	@ (800d87c <ProcessMacCommands+0x9c8>)
 800d634:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800d638:	9200      	str	r2, [sp, #0]
 800d63a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800d63e:	f107 0210 	add.w	r2, r7, #16
 800d642:	ca06      	ldmia	r2, {r1, r2}
 800d644:	f00d fb73 	bl	801ad2e <SysTimeSub>
 800d648:	f107 0010 	add.w	r0, r7, #16
 800d64c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d652:	f107 0208 	add.w	r2, r7, #8
 800d656:	ca06      	ldmia	r2, {r1, r2}
 800d658:	f00d fb30 	bl	801acbc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800d65c:	f107 0310 	add.w	r3, r7, #16
 800d660:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d664:	f00d fb9c 	bl	801ada0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800d668:	f002 ff56 	bl	8010518 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800d66c:	4b83      	ldr	r3, [pc, #524]	@ (800d87c <ProcessMacCommands+0x9c8>)
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800d674:	e0f2      	b.n	800d85c <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d676:	4b81      	ldr	r3, [pc, #516]	@ (800d87c <ProcessMacCommands+0x9c8>)
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 800d67e:	e0ed      	b.n	800d85c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800d680:	200c      	movs	r0, #12
 800d682:	f003 fbe3 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 80e4 	beq.w	800d856 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800d68e:	210c      	movs	r1, #12
 800d690:	2000      	movs	r0, #0
 800d692:	f003 fb4f 	bl	8010d34 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800d696:	4b79      	ldr	r3, [pc, #484]	@ (800d87c <ProcessMacCommands+0x9c8>)
 800d698:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800d69c:	2b04      	cmp	r3, #4
 800d69e:	f000 80da 	beq.w	800d856 <ProcessMacCommands+0x9a2>
 800d6a2:	4b76      	ldr	r3, [pc, #472]	@ (800d87c <ProcessMacCommands+0x9c8>)
 800d6a4:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800d6a8:	2b05      	cmp	r3, #5
 800d6aa:	f000 80d4 	beq.w	800d856 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800d6ae:	f002 ff14 	bl	80104da <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800d6b2:	e0d0      	b.n	800d856 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800d6be:	78fb      	ldrb	r3, [r7, #3]
 800d6c0:	1c5a      	adds	r2, r3, #1
 800d6c2:	70fa      	strb	r2, [r7, #3]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800d6ce:	78fb      	ldrb	r3, [r7, #3]
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	70fa      	strb	r2, [r7, #3]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4413      	add	r3, r2
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d6e4:	78fb      	ldrb	r3, [r7, #3]
 800d6e6:	1c5a      	adds	r2, r3, #1
 800d6e8:	70fa      	strb	r2, [r7, #3]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	041b      	lsls	r3, r3, #16
 800d6f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800d6fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6fc:	2264      	movs	r2, #100	@ 0x64
 800d6fe:	fb02 f303 	mul.w	r3, r2, r3
 800d702:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800d704:	78fb      	ldrb	r3, [r7, #3]
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	70fa      	strb	r2, [r7, #3]
 800d70a:	461a      	mov	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4413      	add	r3, r2
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	f003 030f 	and.w	r3, r3, #15
 800d716:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800d71a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d71e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d720:	4618      	mov	r0, r3
 800d722:	f002 fee0 	bl	80104e6 <LoRaMacClassBPingSlotChannelReq>
 800d726:	4603      	mov	r3, r0
 800d728:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800d72c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800d730:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800d734:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d738:	2201      	movs	r2, #1
 800d73a:	4619      	mov	r1, r3
 800d73c:	2011      	movs	r0, #17
 800d73e:	f003 f84d 	bl	80107dc <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 800d742:	e08b      	b.n	800d85c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800d744:	200d      	movs	r0, #13
 800d746:	f003 fb81 	bl	8010e4c <LoRaMacConfirmQueueIsCmdActive>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 8084 	beq.w	800d85a <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800d752:	210d      	movs	r1, #13
 800d754:	2000      	movs	r0, #0
 800d756:	f003 faed 	bl	8010d34 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800d766:	78fb      	ldrb	r3, [r7, #3]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	70fa      	strb	r2, [r7, #3]
 800d76c:	461a      	mov	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4413      	add	r3, r2
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800d778:	78fb      	ldrb	r3, [r7, #3]
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	70fa      	strb	r2, [r7, #3]
 800d77e:	461a      	mov	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4413      	add	r3, r2
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	021b      	lsls	r3, r3, #8
 800d788:	b21a      	sxth	r2, r3
 800d78a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800d78e:	4313      	orrs	r3, r2
 800d790:	b21b      	sxth	r3, r3
 800d792:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800d796:	78fb      	ldrb	r3, [r7, #3]
 800d798:	1c5a      	adds	r2, r3, #1
 800d79a:	70fa      	strb	r2, [r7, #3]
 800d79c:	461a      	mov	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800d7a8:	4b35      	ldr	r3, [pc, #212]	@ (800d880 <ProcessMacCommands+0x9cc>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800d7b0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f002 fea2 	bl	80104fe <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800d7ba:	e04e      	b.n	800d85a <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	1c5a      	adds	r2, r3, #1
 800d7c6:	70fa      	strb	r2, [r7, #3]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	70fa      	strb	r2, [r7, #3]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4413      	add	r3, r2
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	021b      	lsls	r3, r3, #8
 800d7e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d7ee:	78fb      	ldrb	r3, [r7, #3]
 800d7f0:	1c5a      	adds	r2, r3, #1
 800d7f2:	70fa      	strb	r2, [r7, #3]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	041b      	lsls	r3, r3, #16
 800d7fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d802:	4313      	orrs	r3, r2
 800d804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800d808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d80c:	2264      	movs	r2, #100	@ 0x64
 800d80e:	fb02 f303 	mul.w	r3, r2, r3
 800d812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800d816:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d81a:	f002 fe83 	bl	8010524 <LoRaMacClassBBeaconFreqReq>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d003      	beq.n	800d82c <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800d824:	2301      	movs	r3, #1
 800d826:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800d82a:	e002      	b.n	800d832 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800d832:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d836:	2201      	movs	r2, #1
 800d838:	4619      	mov	r1, r3
 800d83a:	2013      	movs	r0, #19
 800d83c:	f002 ffce 	bl	80107dc <LoRaMacCommandsAddCmd>
                }
                break;
 800d840:	e00c      	b.n	800d85c <ProcessMacCommands+0x9a8>
                break;
 800d842:	bf00      	nop
 800d844:	e00a      	b.n	800d85c <ProcessMacCommands+0x9a8>
                break;
 800d846:	bf00      	nop
 800d848:	e008      	b.n	800d85c <ProcessMacCommands+0x9a8>
                break;
 800d84a:	bf00      	nop
 800d84c:	e006      	b.n	800d85c <ProcessMacCommands+0x9a8>
                break;
 800d84e:	bf00      	nop
 800d850:	e004      	b.n	800d85c <ProcessMacCommands+0x9a8>
                break;
 800d852:	bf00      	nop
 800d854:	e002      	b.n	800d85c <ProcessMacCommands+0x9a8>
                break;
 800d856:	bf00      	nop
 800d858:	e000      	b.n	800d85c <ProcessMacCommands+0x9a8>
                break;
 800d85a:	bf00      	nop
    while( macIndex < commandsSize )
 800d85c:	78fa      	ldrb	r2, [r7, #3]
 800d85e:	78bb      	ldrb	r3, [r7, #2]
 800d860:	429a      	cmp	r2, r3
 800d862:	f4ff ab49 	bcc.w	800cef8 <ProcessMacCommands+0x44>
 800d866:	e004      	b.n	800d872 <ProcessMacCommands+0x9be>
        return;
 800d868:	bf00      	nop
 800d86a:	e002      	b.n	800d872 <ProcessMacCommands+0x9be>
            return;
 800d86c:	bf00      	nop
 800d86e:	e000      	b.n	800d872 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800d870:	bf00      	nop
        }
    }
}
 800d872:	378c      	adds	r7, #140	@ 0x8c
 800d874:	46bd      	mov	sp, r7
 800d876:	bd90      	pop	{r4, r7, pc}
 800d878:	12d53d80 	.word	0x12d53d80
 800d87c:	20000a28 	.word	0x20000a28
 800d880:	20000fdc 	.word	0x20000fdc

0800d884 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08e      	sub	sp, #56	@ 0x38
 800d888:	af02      	add	r7, sp, #8
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	607a      	str	r2, [r7, #4]
 800d88e:	461a      	mov	r2, r3
 800d890:	460b      	mov	r3, r1
 800d892:	72fb      	strb	r3, [r7, #11]
 800d894:	4613      	mov	r3, r2
 800d896:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d898:	2303      	movs	r3, #3
 800d89a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d89e:	4b66      	ldr	r3, [pc, #408]	@ (800da38 <Send+0x1b4>)
 800d8a0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800d8a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800d8a8:	4b63      	ldr	r3, [pc, #396]	@ (800da38 <Send+0x1b4>)
 800d8aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d8ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d8b2:	4b61      	ldr	r3, [pc, #388]	@ (800da38 <Send+0x1b4>)
 800d8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d8b8:	4b5f      	ldr	r3, [pc, #380]	@ (800da38 <Send+0x1b4>)
 800d8ba:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800d8c2:	2307      	movs	r3, #7
 800d8c4:	e0b4      	b.n	800da30 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800d8c6:	4b5c      	ldr	r3, [pc, #368]	@ (800da38 <Send+0x1b4>)
 800d8c8:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d102      	bne.n	800d8d6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d8d0:	4b59      	ldr	r3, [pc, #356]	@ (800da38 <Send+0x1b4>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800d8dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8e0:	f023 030f 	bic.w	r3, r3, #15
 800d8e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800d8e8:	4b53      	ldr	r3, [pc, #332]	@ (800da38 <Send+0x1b4>)
 800d8ea:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800d8ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8f2:	f362 13c7 	bfi	r3, r2, #7, #1
 800d8f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d8fa:	4b4f      	ldr	r3, [pc, #316]	@ (800da38 <Send+0x1b4>)
 800d8fc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d900:	2b01      	cmp	r3, #1
 800d902:	d106      	bne.n	800d912 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800d904:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d908:	f043 0310 	orr.w	r3, r3, #16
 800d90c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800d910:	e005      	b.n	800d91e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800d912:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d916:	f023 0310 	bic.w	r3, r3, #16
 800d91a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800d91e:	4b46      	ldr	r3, [pc, #280]	@ (800da38 <Send+0x1b4>)
 800d920:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d924:	2b00      	cmp	r3, #0
 800d926:	d005      	beq.n	800d934 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800d928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d92c:	f043 0320 	orr.w	r3, r3, #32
 800d930:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800d934:	2301      	movs	r3, #1
 800d936:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800d938:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d93c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	bf14      	ite	ne
 800d946:	2301      	movne	r3, #1
 800d948:	2300      	moveq	r3, #0
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d94e:	4b3a      	ldr	r3, [pc, #232]	@ (800da38 <Send+0x1b4>)
 800d950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d952:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800d954:	4b38      	ldr	r3, [pc, #224]	@ (800da38 <Send+0x1b4>)
 800d956:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800d95a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800d95c:	4b36      	ldr	r3, [pc, #216]	@ (800da38 <Send+0x1b4>)
 800d95e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800d962:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d964:	4b34      	ldr	r3, [pc, #208]	@ (800da38 <Send+0x1b4>)
 800d966:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d96a:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d96e:	4b32      	ldr	r3, [pc, #200]	@ (800da38 <Send+0x1b4>)
 800d970:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800d974:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d978:	4b2f      	ldr	r3, [pc, #188]	@ (800da38 <Send+0x1b4>)
 800d97a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d97e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800d982:	4b2d      	ldr	r3, [pc, #180]	@ (800da38 <Send+0x1b4>)
 800d984:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d988:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d98c:	4b2a      	ldr	r3, [pc, #168]	@ (800da38 <Send+0x1b4>)
 800d98e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800d992:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800d996:	f107 0014 	add.w	r0, r7, #20
 800d99a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	4b26      	ldr	r3, [pc, #152]	@ (800da3c <Send+0x1b8>)
 800d9a2:	4a27      	ldr	r2, [pc, #156]	@ (800da40 <Send+0x1bc>)
 800d9a4:	4927      	ldr	r1, [pc, #156]	@ (800da44 <Send+0x1c0>)
 800d9a6:	f002 fc37 	bl	8010218 <LoRaMacAdrCalcNext>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d9b2:	f362 1386 	bfi	r3, r2, #6, #1
 800d9b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800d9ba:	7afa      	ldrb	r2, [r7, #11]
 800d9bc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d9c0:	893b      	ldrh	r3, [r7, #8]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f000 fc72 	bl	800e2b0 <PrepareFrame>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800d9d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <Send+0x15e>
 800d9da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9de:	2b0a      	cmp	r3, #10
 800d9e0:	d107      	bne.n	800d9f2 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800d9e2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 f962 	bl	800dcb0 <ScheduleTx>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800d9f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00a      	beq.n	800da10 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800d9fa:	4a0f      	ldr	r2, [pc, #60]	@ (800da38 <Send+0x1b4>)
 800d9fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800da00:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800da04:	4a0c      	ldr	r2, [pc, #48]	@ (800da38 <Send+0x1b4>)
 800da06:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800da0a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800da0e:	e00d      	b.n	800da2c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800da10:	4b09      	ldr	r3, [pc, #36]	@ (800da38 <Send+0x1b4>)
 800da12:	2200      	movs	r2, #0
 800da14:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800da18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da1a:	4a07      	ldr	r2, [pc, #28]	@ (800da38 <Send+0x1b4>)
 800da1c:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800da1e:	f002 ff83 	bl	8010928 <LoRaMacCommandsRemoveNoneStickyCmds>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800da28:	2313      	movs	r3, #19
 800da2a:	e001      	b.n	800da30 <Send+0x1ac>
        }
    }
    return status;
 800da2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800da30:	4618      	mov	r0, r3
 800da32:	3730      	adds	r7, #48	@ 0x30
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20008000 	.word	0x20008000
 800da3c:	20008068 	.word	0x20008068
 800da40:	20008038 	.word	0x20008038
 800da44:	20008039 	.word	0x20008039

0800da48 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800da5a:	2301      	movs	r3, #1
 800da5c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800da5e:	79fb      	ldrb	r3, [r7, #7]
 800da60:	2bff      	cmp	r3, #255	@ 0xff
 800da62:	d11f      	bne.n	800daa4 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800da64:	2000      	movs	r0, #0
 800da66:	f7ff f8eb 	bl	800cc40 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800da6a:	4b15      	ldr	r3, [pc, #84]	@ (800dac0 <SendReJoinReq+0x78>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800da72:	4b13      	ldr	r3, [pc, #76]	@ (800dac0 <SendReJoinReq+0x78>)
 800da74:	4a13      	ldr	r2, [pc, #76]	@ (800dac4 <SendReJoinReq+0x7c>)
 800da76:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800da7a:	4b11      	ldr	r3, [pc, #68]	@ (800dac0 <SendReJoinReq+0x78>)
 800da7c:	22ff      	movs	r2, #255	@ 0xff
 800da7e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800da82:	7b3b      	ldrb	r3, [r7, #12]
 800da84:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800da88:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800da8a:	7b3a      	ldrb	r2, [r7, #12]
 800da8c:	4b0c      	ldr	r3, [pc, #48]	@ (800dac0 <SendReJoinReq+0x78>)
 800da8e:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800da92:	480d      	ldr	r0, [pc, #52]	@ (800dac8 <SendReJoinReq+0x80>)
 800da94:	f009 fe64 	bl	8017760 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800da98:	480c      	ldr	r0, [pc, #48]	@ (800dacc <SendReJoinReq+0x84>)
 800da9a:	f009 fe17 	bl	80176cc <SecureElementGetDevEui>

            allowDelayedTx = false;
 800da9e:	2300      	movs	r3, #0
 800daa0:	73fb      	strb	r3, [r7, #15]

            break;
 800daa2:	e002      	b.n	800daaa <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800daa4:	2302      	movs	r3, #2
 800daa6:	73bb      	strb	r3, [r7, #14]
            break;
 800daa8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800daaa:	7bfb      	ldrb	r3, [r7, #15]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f8ff 	bl	800dcb0 <ScheduleTx>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73bb      	strb	r3, [r7, #14]
    return status;
 800dab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20000a28 	.word	0x20000a28
 800dac4:	20000a2a 	.word	0x20000a2a
 800dac8:	20000b36 	.word	0x20000b36
 800dacc:	20000b3e 	.word	0x20000b3e

0800dad0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800dad4:	f002 fcb0 	bl	8010438 <LoRaMacClassBIsBeaconExpected>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d001      	beq.n	800dae2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800dade:	230e      	movs	r3, #14
 800dae0:	e013      	b.n	800db0a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dae2:	4b0b      	ldr	r3, [pc, #44]	@ (800db10 <CheckForClassBCollision+0x40>)
 800dae4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d10d      	bne.n	800db08 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800daec:	f002 fcab 	bl	8010446 <LoRaMacClassBIsPingExpected>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800daf6:	230f      	movs	r3, #15
 800daf8:	e007      	b.n	800db0a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dafa:	f002 fcab 	bl	8010454 <LoRaMacClassBIsMulticastExpected>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800db04:	230f      	movs	r3, #15
 800db06:	e000      	b.n	800db0a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20008000 	.word	0x20008000

0800db14 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800db14:	b590      	push	{r4, r7, lr}
 800db16:	b083      	sub	sp, #12
 800db18:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db1a:	4b2d      	ldr	r3, [pc, #180]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db1c:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800db20:	4b2b      	ldr	r3, [pc, #172]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db22:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800db26:	4b2a      	ldr	r3, [pc, #168]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db28:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800db2c:	4b28      	ldr	r3, [pc, #160]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db2e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800db32:	4b27      	ldr	r3, [pc, #156]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db34:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800db38:	b25b      	sxtb	r3, r3
 800db3a:	f004 fdd3 	bl	80126e4 <RegionApplyDrOffset>
 800db3e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db40:	b259      	sxtb	r1, r3
 800db42:	4b23      	ldr	r3, [pc, #140]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db44:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800db48:	4b21      	ldr	r3, [pc, #132]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db4c:	4821      	ldr	r0, [pc, #132]	@ (800dbd4 <ComputeRxWindowParameters+0xc0>)
 800db4e:	9000      	str	r0, [sp, #0]
 800db50:	4620      	mov	r0, r4
 800db52:	f004 fc89 	bl	8012468 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db56:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db58:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800db5c:	4b1c      	ldr	r3, [pc, #112]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db5e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800db62:	b259      	sxtb	r1, r3
 800db64:	4b1a      	ldr	r3, [pc, #104]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db66:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800db6a:	4b19      	ldr	r3, [pc, #100]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db6e:	4c1a      	ldr	r4, [pc, #104]	@ (800dbd8 <ComputeRxWindowParameters+0xc4>)
 800db70:	9400      	str	r4, [sp, #0]
 800db72:	f004 fc79 	bl	8012468 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800db76:	4b16      	ldr	r3, [pc, #88]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db7a:	4a18      	ldr	r2, [pc, #96]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800db7c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800db80:	4413      	add	r3, r2
 800db82:	4a16      	ldr	r2, [pc, #88]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800db84:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800db88:	4b11      	ldr	r3, [pc, #68]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800db8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db8c:	4a13      	ldr	r2, [pc, #76]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800db8e:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800db92:	4413      	add	r3, r2
 800db94:	4a11      	ldr	r2, [pc, #68]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800db96:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800db9a:	4b10      	ldr	r3, [pc, #64]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800db9c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dba0:	2b04      	cmp	r3, #4
 800dba2:	d011      	beq.n	800dbc8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800dba4:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800dba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dba8:	4a0c      	ldr	r2, [pc, #48]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800dbaa:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800dbae:	4413      	add	r3, r2
 800dbb0:	4a0a      	ldr	r2, [pc, #40]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800dbb2:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800dbb6:	4b06      	ldr	r3, [pc, #24]	@ (800dbd0 <ComputeRxWindowParameters+0xbc>)
 800dbb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbba:	4a08      	ldr	r2, [pc, #32]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800dbbc:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800dbc0:	4413      	add	r3, r2
 800dbc2:	4a06      	ldr	r2, [pc, #24]	@ (800dbdc <ComputeRxWindowParameters+0xc8>)
 800dbc4:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800dbc8:	bf00      	nop
 800dbca:	3704      	adds	r7, #4
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}
 800dbd0:	20008000 	.word	0x20008000
 800dbd4:	20000de0 	.word	0x20000de0
 800dbd8:	20000df8 	.word	0x20000df8
 800dbdc:	20000a28 	.word	0x20000a28

0800dbe0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dbea:	4b13      	ldr	r3, [pc, #76]	@ (800dc38 <VerifyTxFrame+0x58>)
 800dbec:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01b      	beq.n	800dc2c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800dbf4:	1d3b      	adds	r3, r7, #4
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f002 fee6 	bl	80109c8 <LoRaMacCommandsGetSizeSerializedCmds>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dc02:	2313      	movs	r3, #19
 800dc04:	e013      	b.n	800dc2e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800dc06:	4b0d      	ldr	r3, [pc, #52]	@ (800dc3c <VerifyTxFrame+0x5c>)
 800dc08:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800dc0c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc38 <VerifyTxFrame+0x58>)
 800dc0e:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	b2d2      	uxtb	r2, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff f924 	bl	800ce64 <ValidatePayloadLength>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	f083 0301 	eor.w	r3, r3, #1
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d001      	beq.n	800dc2c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800dc28:	2308      	movs	r3, #8
 800dc2a:	e000      	b.n	800dc2e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	20008000 	.word	0x20008000
 800dc3c:	20000a28 	.word	0x20000a28

0800dc40 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800dc46:	4b18      	ldr	r3, [pc, #96]	@ (800dca8 <SerializeTxFrame+0x68>)
 800dc48:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <SerializeTxFrame+0x16>
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d011      	beq.n	800dc78 <SerializeTxFrame+0x38>
 800dc54:	e021      	b.n	800dc9a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800dc56:	4815      	ldr	r0, [pc, #84]	@ (800dcac <SerializeTxFrame+0x6c>)
 800dc58:	f004 f9d9 	bl	801200e <LoRaMacSerializerJoinRequest>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800dc60:	79fb      	ldrb	r3, [r7, #7]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc66:	2311      	movs	r3, #17
 800dc68:	e01a      	b.n	800dca0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800dc6a:	4b0f      	ldr	r3, [pc, #60]	@ (800dca8 <SerializeTxFrame+0x68>)
 800dc6c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800dc70:	461a      	mov	r2, r3
 800dc72:	4b0d      	ldr	r3, [pc, #52]	@ (800dca8 <SerializeTxFrame+0x68>)
 800dc74:	801a      	strh	r2, [r3, #0]
            break;
 800dc76:	e012      	b.n	800dc9e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800dc78:	480c      	ldr	r0, [pc, #48]	@ (800dcac <SerializeTxFrame+0x6c>)
 800dc7a:	f004 fa4a 	bl	8012112 <LoRaMacSerializerData>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800dc82:	79fb      	ldrb	r3, [r7, #7]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc88:	2311      	movs	r3, #17
 800dc8a:	e009      	b.n	800dca0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800dc8c:	4b06      	ldr	r3, [pc, #24]	@ (800dca8 <SerializeTxFrame+0x68>)
 800dc8e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800dc92:	461a      	mov	r2, r3
 800dc94:	4b04      	ldr	r3, [pc, #16]	@ (800dca8 <SerializeTxFrame+0x68>)
 800dc96:	801a      	strh	r2, [r3, #0]
            break;
 800dc98:	e001      	b.n	800dc9e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	e000      	b.n	800dca0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	20000a28 	.word	0x20000a28
 800dcac:	20000b30 	.word	0x20000b30

0800dcb0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b090      	sub	sp, #64	@ 0x40
 800dcb4:	af02      	add	r7, sp, #8
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800dcc0:	f7ff ff06 	bl	800dad0 <CheckForClassBCollision>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800dcca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d002      	beq.n	800dcd8 <ScheduleTx+0x28>
    {
        return status;
 800dcd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcd6:	e092      	b.n	800ddfe <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800dcd8:	f000 f8f8 	bl	800decc <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800dcdc:	f7ff ffb0 	bl	800dc40 <SerializeTxFrame>
 800dce0:	4603      	mov	r3, r0
 800dce2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800dce6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <ScheduleTx+0x44>
    {
        return status;
 800dcee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcf2:	e084      	b.n	800ddfe <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800dcf4:	4b44      	ldr	r3, [pc, #272]	@ (800de08 <ScheduleTx+0x158>)
 800dcf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcf8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dcfa:	4b43      	ldr	r3, [pc, #268]	@ (800de08 <ScheduleTx+0x158>)
 800dcfc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800dd00:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800dd02:	4b41      	ldr	r3, [pc, #260]	@ (800de08 <ScheduleTx+0x158>)
 800dd04:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800dd08:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dd0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f00d f8ac 	bl	801ae6c <SysTimeGetMcuTime>
 800dd14:	4638      	mov	r0, r7
 800dd16:	4b3c      	ldr	r3, [pc, #240]	@ (800de08 <ScheduleTx+0x158>)
 800dd18:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800dd1c:	9200      	str	r2, [sp, #0]
 800dd1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd22:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dd26:	ca06      	ldmia	r2, {r1, r2}
 800dd28:	f00d f801 	bl	801ad2e <SysTimeSub>
 800dd2c:	f107 0320 	add.w	r3, r7, #32
 800dd30:	463a      	mov	r2, r7
 800dd32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd36:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800dd3a:	4b33      	ldr	r3, [pc, #204]	@ (800de08 <ScheduleTx+0x158>)
 800dd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800dd40:	2300      	movs	r3, #0
 800dd42:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800dd46:	2301      	movs	r3, #1
 800dd48:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800dd4a:	4b30      	ldr	r3, [pc, #192]	@ (800de0c <ScheduleTx+0x15c>)
 800dd4c:	881b      	ldrh	r3, [r3, #0]
 800dd4e:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dd50:	4b2d      	ldr	r3, [pc, #180]	@ (800de08 <ScheduleTx+0x158>)
 800dd52:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d104      	bne.n	800dd64 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800dd60:	2300      	movs	r3, #0
 800dd62:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800dd64:	4b28      	ldr	r3, [pc, #160]	@ (800de08 <ScheduleTx+0x158>)
 800dd66:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800dd6a:	f107 0114 	add.w	r1, r7, #20
 800dd6e:	4b28      	ldr	r3, [pc, #160]	@ (800de10 <ScheduleTx+0x160>)
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	4b28      	ldr	r3, [pc, #160]	@ (800de14 <ScheduleTx+0x164>)
 800dd74:	4a28      	ldr	r2, [pc, #160]	@ (800de18 <ScheduleTx+0x168>)
 800dd76:	f004 fc92 	bl	801269e <RegionNextChannel>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800dd80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d025      	beq.n	800ddd4 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800dd88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd8c:	2b0b      	cmp	r3, #11
 800dd8e:	d11e      	bne.n	800ddce <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800dd90:	4b1e      	ldr	r3, [pc, #120]	@ (800de0c <ScheduleTx+0x15c>)
 800dd92:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d01c      	beq.n	800ddd4 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d013      	beq.n	800ddc8 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800dda0:	4b1a      	ldr	r3, [pc, #104]	@ (800de0c <ScheduleTx+0x15c>)
 800dda2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dda6:	f043 0320 	orr.w	r3, r3, #32
 800ddaa:	4a18      	ldr	r2, [pc, #96]	@ (800de0c <ScheduleTx+0x15c>)
 800ddac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800ddb0:	4b16      	ldr	r3, [pc, #88]	@ (800de0c <ScheduleTx+0x15c>)
 800ddb2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4818      	ldr	r0, [pc, #96]	@ (800de1c <ScheduleTx+0x16c>)
 800ddba:	f00d fa01 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800ddbe:	4817      	ldr	r0, [pc, #92]	@ (800de1c <ScheduleTx+0x16c>)
 800ddc0:	f00d f920 	bl	801b004 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	e01a      	b.n	800ddfe <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800ddc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddcc:	e017      	b.n	800ddfe <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800ddce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddd2:	e014      	b.n	800ddfe <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800ddd4:	f7ff fe9e 	bl	800db14 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800ddd8:	f7ff ff02 	bl	800dbe0 <VerifyTxFrame>
 800dddc:	4603      	mov	r3, r0
 800ddde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800dde2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d002      	beq.n	800ddf0 <ScheduleTx+0x140>
    {
        return status;
 800ddea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddee:	e006      	b.n	800ddfe <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800ddf0:	4b06      	ldr	r3, [pc, #24]	@ (800de0c <ScheduleTx+0x15c>)
 800ddf2:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 fb74 	bl	800e4e4 <SendFrameOnChannel>
 800ddfc:	4603      	mov	r3, r0
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3738      	adds	r7, #56	@ 0x38
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	20008000 	.word	0x20008000
 800de0c:	20000a28 	.word	0x20000a28
 800de10:	20008030 	.word	0x20008030
 800de14:	20000ebc 	.word	0x20000ebc
 800de18:	20000e43 	.word	0x20000e43
 800de1c:	20000d90 	.word	0x20000d90

0800de20 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	460a      	mov	r2, r1
 800de2a:	71fb      	strb	r3, [r7, #7]
 800de2c:	4613      	mov	r3, r2
 800de2e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800de30:	2312      	movs	r3, #18
 800de32:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800de38:	4b22      	ldr	r3, [pc, #136]	@ (800dec4 <SecureFrame+0xa4>)
 800de3a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d002      	beq.n	800de48 <SecureFrame+0x28>
 800de42:	2b04      	cmp	r3, #4
 800de44:	d011      	beq.n	800de6a <SecureFrame+0x4a>
 800de46:	e036      	b.n	800deb6 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800de48:	481f      	ldr	r0, [pc, #124]	@ (800dec8 <SecureFrame+0xa8>)
 800de4a:	f003 fcb3 	bl	80117b4 <LoRaMacCryptoPrepareJoinRequest>
 800de4e:	4603      	mov	r3, r0
 800de50:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800de58:	2311      	movs	r3, #17
 800de5a:	e02f      	b.n	800debc <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800de5c:	4b19      	ldr	r3, [pc, #100]	@ (800dec4 <SecureFrame+0xa4>)
 800de5e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800de62:	461a      	mov	r2, r3
 800de64:	4b17      	ldr	r3, [pc, #92]	@ (800dec4 <SecureFrame+0xa4>)
 800de66:	801a      	strh	r2, [r3, #0]
            break;
 800de68:	e027      	b.n	800deba <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800de6a:	f107 0308 	add.w	r3, r7, #8
 800de6e:	4618      	mov	r0, r3
 800de70:	f003 fbda 	bl	8011628 <LoRaMacCryptoGetFCntUp>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800de7a:	2312      	movs	r3, #18
 800de7c:	e01e      	b.n	800debc <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800de7e:	4b11      	ldr	r3, [pc, #68]	@ (800dec4 <SecureFrame+0xa4>)
 800de80:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	3b01      	subs	r3, #1
 800de8c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800de8e:	68b8      	ldr	r0, [r7, #8]
 800de90:	79ba      	ldrb	r2, [r7, #6]
 800de92:	79f9      	ldrb	r1, [r7, #7]
 800de94:	4b0c      	ldr	r3, [pc, #48]	@ (800dec8 <SecureFrame+0xa8>)
 800de96:	f003 fdb3 	bl	8011a00 <LoRaMacCryptoSecureMessage>
 800de9a:	4603      	mov	r3, r0
 800de9c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800de9e:	7bfb      	ldrb	r3, [r7, #15]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800dea4:	2311      	movs	r3, #17
 800dea6:	e009      	b.n	800debc <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800dea8:	4b06      	ldr	r3, [pc, #24]	@ (800dec4 <SecureFrame+0xa4>)
 800deaa:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800deae:	461a      	mov	r2, r3
 800deb0:	4b04      	ldr	r3, [pc, #16]	@ (800dec4 <SecureFrame+0xa4>)
 800deb2:	801a      	strh	r2, [r3, #0]
            break;
 800deb4:	e001      	b.n	800deba <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800deb6:	2303      	movs	r3, #3
 800deb8:	e000      	b.n	800debc <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	20000a28 	.word	0x20000a28
 800dec8:	20000b30 	.word	0x20000b30

0800decc <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800decc:	b480      	push	{r7}
 800dece:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ded0:	4b09      	ldr	r3, [pc, #36]	@ (800def8 <CalculateBackOff+0x2c>)
 800ded2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d10a      	bne.n	800deee <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ded8:	4b07      	ldr	r3, [pc, #28]	@ (800def8 <CalculateBackOff+0x2c>)
 800deda:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800dede:	3b01      	subs	r3, #1
 800dee0:	4a06      	ldr	r2, [pc, #24]	@ (800defc <CalculateBackOff+0x30>)
 800dee2:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 800dee6:	fb02 f303 	mul.w	r3, r2, r3
 800deea:	4a03      	ldr	r2, [pc, #12]	@ (800def8 <CalculateBackOff+0x2c>)
 800deec:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800deee:	bf00      	nop
 800def0:	46bd      	mov	sp, r7
 800def2:	bc80      	pop	{r7}
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	20008000 	.word	0x20008000
 800defc:	20000a28 	.word	0x20000a28

0800df00 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	7139      	strb	r1, [r7, #4]
 800df0a:	71fb      	strb	r3, [r7, #7]
 800df0c:	4613      	mov	r3, r2
 800df0e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <RemoveMacCommands+0x1c>
 800df16:	79fb      	ldrb	r3, [r7, #7]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d10d      	bne.n	800df38 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800df1c:	79bb      	ldrb	r3, [r7, #6]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d108      	bne.n	800df34 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800df22:	793b      	ldrb	r3, [r7, #4]
 800df24:	f003 0320 	and.w	r3, r3, #32
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d004      	beq.n	800df38 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800df2e:	f002 fd1f 	bl	8010970 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800df32:	e001      	b.n	800df38 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800df34:	f002 fd1c 	bl	8010970 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800df38:	bf00      	nop
 800df3a:	3708      	adds	r7, #8
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800df40:	b5b0      	push	{r4, r5, r7, lr}
 800df42:	b092      	sub	sp, #72	@ 0x48
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	f083 0301 	eor.w	r3, r3, #1
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800df56:	4b88      	ldr	r3, [pc, #544]	@ (800e178 <ResetMacParameters+0x238>)
 800df58:	2200      	movs	r2, #0
 800df5a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800df5e:	4b86      	ldr	r3, [pc, #536]	@ (800e178 <ResetMacParameters+0x238>)
 800df60:	2200      	movs	r2, #0
 800df62:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800df64:	4b85      	ldr	r3, [pc, #532]	@ (800e17c <ResetMacParameters+0x23c>)
 800df66:	2200      	movs	r2, #0
 800df68:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800df6c:	4b83      	ldr	r3, [pc, #524]	@ (800e17c <ResetMacParameters+0x23c>)
 800df6e:	2200      	movs	r2, #0
 800df70:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800df74:	4b81      	ldr	r3, [pc, #516]	@ (800e17c <ResetMacParameters+0x23c>)
 800df76:	2200      	movs	r2, #0
 800df78:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800df7c:	4b7e      	ldr	r3, [pc, #504]	@ (800e178 <ResetMacParameters+0x238>)
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800df84:	4b7c      	ldr	r3, [pc, #496]	@ (800e178 <ResetMacParameters+0x238>)
 800df86:	2201      	movs	r2, #1
 800df88:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800df8c:	4b7a      	ldr	r3, [pc, #488]	@ (800e178 <ResetMacParameters+0x238>)
 800df8e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800df92:	4b79      	ldr	r3, [pc, #484]	@ (800e178 <ResetMacParameters+0x238>)
 800df94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800df98:	4b77      	ldr	r3, [pc, #476]	@ (800e178 <ResetMacParameters+0x238>)
 800df9a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800df9e:	4b76      	ldr	r3, [pc, #472]	@ (800e178 <ResetMacParameters+0x238>)
 800dfa0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800dfa4:	4b74      	ldr	r3, [pc, #464]	@ (800e178 <ResetMacParameters+0x238>)
 800dfa6:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800dfaa:	4b73      	ldr	r3, [pc, #460]	@ (800e178 <ResetMacParameters+0x238>)
 800dfac:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800dfb0:	4b71      	ldr	r3, [pc, #452]	@ (800e178 <ResetMacParameters+0x238>)
 800dfb2:	4a71      	ldr	r2, [pc, #452]	@ (800e178 <ResetMacParameters+0x238>)
 800dfb4:	336c      	adds	r3, #108	@ 0x6c
 800dfb6:	32b4      	adds	r2, #180	@ 0xb4
 800dfb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfbc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800dfc0:	4b6d      	ldr	r3, [pc, #436]	@ (800e178 <ResetMacParameters+0x238>)
 800dfc2:	4a6d      	ldr	r2, [pc, #436]	@ (800e178 <ResetMacParameters+0x238>)
 800dfc4:	3374      	adds	r3, #116	@ 0x74
 800dfc6:	32bc      	adds	r2, #188	@ 0xbc
 800dfc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfcc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800dfd0:	4b69      	ldr	r3, [pc, #420]	@ (800e178 <ResetMacParameters+0x238>)
 800dfd2:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800dfd6:	4b68      	ldr	r3, [pc, #416]	@ (800e178 <ResetMacParameters+0x238>)
 800dfd8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800dfdc:	4b66      	ldr	r3, [pc, #408]	@ (800e178 <ResetMacParameters+0x238>)
 800dfde:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800dfe2:	4b65      	ldr	r3, [pc, #404]	@ (800e178 <ResetMacParameters+0x238>)
 800dfe4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800dfe8:	4b63      	ldr	r3, [pc, #396]	@ (800e178 <ResetMacParameters+0x238>)
 800dfea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800dfee:	4a62      	ldr	r2, [pc, #392]	@ (800e178 <ResetMacParameters+0x238>)
 800dff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800dff4:	4b60      	ldr	r3, [pc, #384]	@ (800e178 <ResetMacParameters+0x238>)
 800dff6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800dffa:	4a5f      	ldr	r2, [pc, #380]	@ (800e178 <ResetMacParameters+0x238>)
 800dffc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e000:	4b5d      	ldr	r3, [pc, #372]	@ (800e178 <ResetMacParameters+0x238>)
 800e002:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800e006:	4b5c      	ldr	r3, [pc, #368]	@ (800e178 <ResetMacParameters+0x238>)
 800e008:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e00c:	4b5a      	ldr	r3, [pc, #360]	@ (800e178 <ResetMacParameters+0x238>)
 800e00e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800e012:	4b59      	ldr	r3, [pc, #356]	@ (800e178 <ResetMacParameters+0x238>)
 800e014:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800e018:	4b58      	ldr	r3, [pc, #352]	@ (800e17c <ResetMacParameters+0x23c>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800e020:	4b55      	ldr	r3, [pc, #340]	@ (800e178 <ResetMacParameters+0x238>)
 800e022:	2200      	movs	r2, #0
 800e024:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800e028:	4b53      	ldr	r3, [pc, #332]	@ (800e178 <ResetMacParameters+0x238>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800e030:	4b51      	ldr	r3, [pc, #324]	@ (800e178 <ResetMacParameters+0x238>)
 800e032:	2200      	movs	r2, #0
 800e034:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800e038:	4b4f      	ldr	r3, [pc, #316]	@ (800e178 <ResetMacParameters+0x238>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800e040:	4b4d      	ldr	r3, [pc, #308]	@ (800e178 <ResetMacParameters+0x238>)
 800e042:	2200      	movs	r2, #0
 800e044:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800e048:	4b4b      	ldr	r3, [pc, #300]	@ (800e178 <ResetMacParameters+0x238>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800e050:	4b49      	ldr	r3, [pc, #292]	@ (800e178 <ResetMacParameters+0x238>)
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800e058:	4b47      	ldr	r3, [pc, #284]	@ (800e178 <ResetMacParameters+0x238>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800e060:	4b45      	ldr	r3, [pc, #276]	@ (800e178 <ResetMacParameters+0x238>)
 800e062:	2200      	movs	r2, #0
 800e064:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800e068:	4b43      	ldr	r3, [pc, #268]	@ (800e178 <ResetMacParameters+0x238>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800e070:	4b41      	ldr	r3, [pc, #260]	@ (800e178 <ResetMacParameters+0x238>)
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800e078:	2301      	movs	r3, #1
 800e07a:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e07c:	4b40      	ldr	r3, [pc, #256]	@ (800e180 <ResetMacParameters+0x240>)
 800e07e:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e080:	4b40      	ldr	r3, [pc, #256]	@ (800e184 <ResetMacParameters+0x244>)
 800e082:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 800e084:	4b40      	ldr	r3, [pc, #256]	@ (800e188 <ResetMacParameters+0x248>)
 800e086:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e088:	4b3b      	ldr	r3, [pc, #236]	@ (800e178 <ResetMacParameters+0x238>)
 800e08a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e08e:	f107 020c 	add.w	r2, r7, #12
 800e092:	4611      	mov	r1, r2
 800e094:	4618      	mov	r0, r3
 800e096:	f004 f97d 	bl	8012394 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800e09a:	4b38      	ldr	r3, [pc, #224]	@ (800e17c <ResetMacParameters+0x23c>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e0a2:	4b36      	ldr	r3, [pc, #216]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0a4:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800e0a8:	4b34      	ldr	r3, [pc, #208]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0aa:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e0ae:	4b32      	ldr	r3, [pc, #200]	@ (800e178 <ResetMacParameters+0x238>)
 800e0b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0b2:	4a32      	ldr	r2, [pc, #200]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0b4:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e0b8:	4b2f      	ldr	r3, [pc, #188]	@ (800e178 <ResetMacParameters+0x238>)
 800e0ba:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e0be:	4b2f      	ldr	r3, [pc, #188]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0c0:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e0c4:	4b2c      	ldr	r3, [pc, #176]	@ (800e178 <ResetMacParameters+0x238>)
 800e0c6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e0ca:	4b2c      	ldr	r3, [pc, #176]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0cc:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e0d0:	4b2a      	ldr	r3, [pc, #168]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e0d8:	4b28      	ldr	r3, [pc, #160]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e0e0:	4b25      	ldr	r3, [pc, #148]	@ (800e178 <ResetMacParameters+0x238>)
 800e0e2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e0e6:	4b25      	ldr	r3, [pc, #148]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0e8:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e0ec:	4a23      	ldr	r2, [pc, #140]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0ee:	4b23      	ldr	r3, [pc, #140]	@ (800e17c <ResetMacParameters+0x23c>)
 800e0f0:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800e0f4:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800e0f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e100:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e104:	4b1d      	ldr	r3, [pc, #116]	@ (800e17c <ResetMacParameters+0x23c>)
 800e106:	2201      	movs	r2, #1
 800e108:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e10c:	4b1b      	ldr	r3, [pc, #108]	@ (800e17c <ResetMacParameters+0x23c>)
 800e10e:	2202      	movs	r2, #2
 800e110:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800e114:	2300      	movs	r3, #0
 800e116:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 800e118:	2300      	movs	r3, #0
 800e11a:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 800e11c:	4b17      	ldr	r3, [pc, #92]	@ (800e17c <ResetMacParameters+0x23c>)
 800e11e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e122:	2b00      	cmp	r3, #0
 800e124:	d009      	beq.n	800e13a <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800e126:	4b15      	ldr	r3, [pc, #84]	@ (800e17c <ResetMacParameters+0x23c>)
 800e128:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800e130:	4b12      	ldr	r3, [pc, #72]	@ (800e17c <ResetMacParameters+0x23c>)
 800e132:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e136:	695b      	ldr	r3, [r3, #20]
 800e138:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e13a:	4b14      	ldr	r3, [pc, #80]	@ (800e18c <ResetMacParameters+0x24c>)
 800e13c:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e13e:	4b14      	ldr	r3, [pc, #80]	@ (800e190 <ResetMacParameters+0x250>)
 800e140:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e142:	4b14      	ldr	r3, [pc, #80]	@ (800e194 <ResetMacParameters+0x254>)
 800e144:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e146:	4b14      	ldr	r3, [pc, #80]	@ (800e198 <ResetMacParameters+0x258>)
 800e148:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800e14a:	4b14      	ldr	r3, [pc, #80]	@ (800e19c <ResetMacParameters+0x25c>)
 800e14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800e14e:	4b14      	ldr	r3, [pc, #80]	@ (800e1a0 <ResetMacParameters+0x260>)
 800e150:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800e152:	4b14      	ldr	r3, [pc, #80]	@ (800e1a4 <ResetMacParameters+0x264>)
 800e154:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800e156:	4b14      	ldr	r3, [pc, #80]	@ (800e1a8 <ResetMacParameters+0x268>)
 800e158:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800e15a:	4b14      	ldr	r3, [pc, #80]	@ (800e1ac <ResetMacParameters+0x26c>)
 800e15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800e15e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800e162:	f107 031c 	add.w	r3, r7, #28
 800e166:	4a12      	ldr	r2, [pc, #72]	@ (800e1b0 <ResetMacParameters+0x270>)
 800e168:	4618      	mov	r0, r3
 800e16a:	f002 f90e 	bl	801038a <LoRaMacClassBInit>
}
 800e16e:	bf00      	nop
 800e170:	3748      	adds	r7, #72	@ 0x48
 800e172:	46bd      	mov	sp, r7
 800e174:	bdb0      	pop	{r4, r5, r7, pc}
 800e176:	bf00      	nop
 800e178:	20008000 	.word	0x20008000
 800e17c:	20000a28 	.word	0x20000a28
 800e180:	20008224 	.word	0x20008224
 800e184:	20008238 	.word	0x20008238
 800e188:	20000f44 	.word	0x20000f44
 800e18c:	20000e90 	.word	0x20000e90
 800e190:	20000e48 	.word	0x20000e48
 800e194:	20000e7c 	.word	0x20000e7c
 800e198:	20000eb9 	.word	0x20000eb9
 800e19c:	200080e4 	.word	0x200080e4
 800e1a0:	20008048 	.word	0x20008048
 800e1a4:	2000804c 	.word	0x2000804c
 800e1a8:	200080e8 	.word	0x200080e8
 800e1ac:	20008130 	.word	0x20008130
 800e1b0:	200085b4 	.word	0x200085b4

0800e1b4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f00c ff8e 	bl	801b0e0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800e1c4:	4b11      	ldr	r3, [pc, #68]	@ (800e20c <RxWindowSetup+0x58>)
 800e1c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1c8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e1ca:	4b11      	ldr	r3, [pc, #68]	@ (800e210 <RxWindowSetup+0x5c>)
 800e1cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e1d0:	4a10      	ldr	r2, [pc, #64]	@ (800e214 <RxWindowSetup+0x60>)
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f004 f96a 	bl	80124ae <RegionRxConfig>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d010      	beq.n	800e202 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800e1e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e218 <RxWindowSetup+0x64>)
 800e1e2:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800e1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e218 <RxWindowSetup+0x64>)
 800e1e8:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800e1ec:	4b07      	ldr	r3, [pc, #28]	@ (800e20c <RxWindowSetup+0x58>)
 800e1ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1f0:	4a07      	ldr	r2, [pc, #28]	@ (800e210 <RxWindowSetup+0x5c>)
 800e1f2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800e1f4:	4610      	mov	r0, r2
 800e1f6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	7cda      	ldrb	r2, [r3, #19]
 800e1fc:	4b06      	ldr	r3, [pc, #24]	@ (800e218 <RxWindowSetup+0x64>)
 800e1fe:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800e202:	bf00      	nop
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	08021f8c 	.word	0x08021f8c
 800e210:	20008000 	.word	0x20008000
 800e214:	20000e4c 	.word	0x20000e4c
 800e218:	20000a28 	.word	0x20000a28

0800e21c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800e21c:	b590      	push	{r4, r7, lr}
 800e21e:	b083      	sub	sp, #12
 800e220:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800e222:	4b1e      	ldr	r3, [pc, #120]	@ (800e29c <OpenContinuousRxCWindow+0x80>)
 800e224:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800e228:	4b1c      	ldr	r3, [pc, #112]	@ (800e29c <OpenContinuousRxCWindow+0x80>)
 800e22a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800e22e:	b259      	sxtb	r1, r3
 800e230:	4b1a      	ldr	r3, [pc, #104]	@ (800e29c <OpenContinuousRxCWindow+0x80>)
 800e232:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800e236:	4b19      	ldr	r3, [pc, #100]	@ (800e29c <OpenContinuousRxCWindow+0x80>)
 800e238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e23a:	4c19      	ldr	r4, [pc, #100]	@ (800e2a0 <OpenContinuousRxCWindow+0x84>)
 800e23c:	9400      	str	r4, [sp, #0]
 800e23e:	f004 f913 	bl	8012468 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e242:	4b18      	ldr	r3, [pc, #96]	@ (800e2a4 <OpenContinuousRxCWindow+0x88>)
 800e244:	2202      	movs	r2, #2
 800e246:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e24a:	4b14      	ldr	r3, [pc, #80]	@ (800e29c <OpenContinuousRxCWindow+0x80>)
 800e24c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e250:	4b14      	ldr	r3, [pc, #80]	@ (800e2a4 <OpenContinuousRxCWindow+0x88>)
 800e252:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e256:	4b13      	ldr	r3, [pc, #76]	@ (800e2a4 <OpenContinuousRxCWindow+0x88>)
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e25e:	4b0f      	ldr	r3, [pc, #60]	@ (800e29c <OpenContinuousRxCWindow+0x80>)
 800e260:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e264:	4a10      	ldr	r2, [pc, #64]	@ (800e2a8 <OpenContinuousRxCWindow+0x8c>)
 800e266:	490e      	ldr	r1, [pc, #56]	@ (800e2a0 <OpenContinuousRxCWindow+0x84>)
 800e268:	4618      	mov	r0, r3
 800e26a:	f004 f920 	bl	80124ae <RegionRxConfig>
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00f      	beq.n	800e294 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800e274:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a4 <OpenContinuousRxCWindow+0x88>)
 800e276:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800e27a:	4b0a      	ldr	r3, [pc, #40]	@ (800e2a4 <OpenContinuousRxCWindow+0x88>)
 800e27c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800e280:	4b0a      	ldr	r3, [pc, #40]	@ (800e2ac <OpenContinuousRxCWindow+0x90>)
 800e282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e284:	2000      	movs	r0, #0
 800e286:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800e288:	4b06      	ldr	r3, [pc, #24]	@ (800e2a4 <OpenContinuousRxCWindow+0x88>)
 800e28a:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 800e28e:	4b05      	ldr	r3, [pc, #20]	@ (800e2a4 <OpenContinuousRxCWindow+0x88>)
 800e290:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800e294:	bf00      	nop
 800e296:	3704      	adds	r7, #4
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd90      	pop	{r4, r7, pc}
 800e29c:	20008000 	.word	0x20008000
 800e2a0:	20000e10 	.word	0x20000e10
 800e2a4:	20000a28 	.word	0x20000a28
 800e2a8:	20000e4c 	.word	0x20000e4c
 800e2ac:	08021f8c 	.word	0x08021f8c

0800e2b0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	603b      	str	r3, [r7, #0]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800e2c0:	4b81      	ldr	r3, [pc, #516]	@ (800e4c8 <PrepareFrame+0x218>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800e2c6:	4b80      	ldr	r3, [pc, #512]	@ (800e4c8 <PrepareFrame+0x218>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d101      	bne.n	800e2e4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e2e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	4878      	ldr	r0, [pc, #480]	@ (800e4cc <PrepareFrame+0x21c>)
 800e2ec:	f009 fab9 	bl	8017862 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e2f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	4b74      	ldr	r3, [pc, #464]	@ (800e4c8 <PrepareFrame+0x218>)
 800e2f6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	781a      	ldrb	r2, [r3, #0]
 800e2fe:	4b72      	ldr	r3, [pc, #456]	@ (800e4c8 <PrepareFrame+0x218>)
 800e300:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b07      	cmp	r3, #7
 800e30e:	f000 80b9 	beq.w	800e484 <PrepareFrame+0x1d4>
 800e312:	2b07      	cmp	r3, #7
 800e314:	f300 80ce 	bgt.w	800e4b4 <PrepareFrame+0x204>
 800e318:	2b02      	cmp	r3, #2
 800e31a:	d006      	beq.n	800e32a <PrepareFrame+0x7a>
 800e31c:	2b04      	cmp	r3, #4
 800e31e:	f040 80c9 	bne.w	800e4b4 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800e322:	4b69      	ldr	r3, [pc, #420]	@ (800e4c8 <PrepareFrame+0x218>)
 800e324:	2201      	movs	r2, #1
 800e326:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e32a:	4b67      	ldr	r3, [pc, #412]	@ (800e4c8 <PrepareFrame+0x218>)
 800e32c:	2204      	movs	r2, #4
 800e32e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e332:	4b65      	ldr	r3, [pc, #404]	@ (800e4c8 <PrepareFrame+0x218>)
 800e334:	4a66      	ldr	r2, [pc, #408]	@ (800e4d0 <PrepareFrame+0x220>)
 800e336:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e33a:	4b63      	ldr	r3, [pc, #396]	@ (800e4c8 <PrepareFrame+0x218>)
 800e33c:	22ff      	movs	r2, #255	@ 0xff
 800e33e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	781a      	ldrb	r2, [r3, #0]
 800e346:	4b60      	ldr	r3, [pc, #384]	@ (800e4c8 <PrepareFrame+0x218>)
 800e348:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e34c:	4a5e      	ldr	r2, [pc, #376]	@ (800e4c8 <PrepareFrame+0x218>)
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800e354:	4b5f      	ldr	r3, [pc, #380]	@ (800e4d4 <PrepareFrame+0x224>)
 800e356:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e35a:	4a5b      	ldr	r2, [pc, #364]	@ (800e4c8 <PrepareFrame+0x218>)
 800e35c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	781a      	ldrb	r2, [r3, #0]
 800e364:	4b58      	ldr	r3, [pc, #352]	@ (800e4c8 <PrepareFrame+0x218>)
 800e366:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e36a:	4b57      	ldr	r3, [pc, #348]	@ (800e4c8 <PrepareFrame+0x218>)
 800e36c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800e370:	4b55      	ldr	r3, [pc, #340]	@ (800e4c8 <PrepareFrame+0x218>)
 800e372:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e376:	4b54      	ldr	r3, [pc, #336]	@ (800e4c8 <PrepareFrame+0x218>)
 800e378:	4a54      	ldr	r2, [pc, #336]	@ (800e4cc <PrepareFrame+0x21c>)
 800e37a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e37e:	f107 0318 	add.w	r3, r7, #24
 800e382:	4618      	mov	r0, r3
 800e384:	f003 f950 	bl	8011628 <LoRaMacCryptoGetFCntUp>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d001      	beq.n	800e392 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e38e:	2312      	movs	r3, #18
 800e390:	e096      	b.n	800e4c0 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	b29a      	uxth	r2, r3
 800e396:	4b4c      	ldr	r3, [pc, #304]	@ (800e4c8 <PrepareFrame+0x218>)
 800e398:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 800e39c:	4b4a      	ldr	r3, [pc, #296]	@ (800e4c8 <PrepareFrame+0x218>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800e3a4:	4b48      	ldr	r3, [pc, #288]	@ (800e4c8 <PrepareFrame+0x218>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	4a46      	ldr	r2, [pc, #280]	@ (800e4c8 <PrepareFrame+0x218>)
 800e3b0:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e3b4:	f107 0314 	add.w	r3, r7, #20
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f002 fb05 	bl	80109c8 <LoRaMacCommandsGetSizeSerializedCmds>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d001      	beq.n	800e3c8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e3c4:	2313      	movs	r3, #19
 800e3c6:	e07b      	b.n	800e4c0 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d074      	beq.n	800e4b8 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800e3ce:	4b41      	ldr	r3, [pc, #260]	@ (800e4d4 <PrepareFrame+0x224>)
 800e3d0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fe fd1d 	bl	800ce14 <GetMaxAppPayloadWithoutFOptsLength>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e3de:	4b3a      	ldr	r3, [pc, #232]	@ (800e4c8 <PrepareFrame+0x218>)
 800e3e0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d01d      	beq.n	800e424 <PrepareFrame+0x174>
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	2b0f      	cmp	r3, #15
 800e3ec:	d81a      	bhi.n	800e424 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e3ee:	f107 0314 	add.w	r3, r7, #20
 800e3f2:	4a39      	ldr	r2, [pc, #228]	@ (800e4d8 <PrepareFrame+0x228>)
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	200f      	movs	r0, #15
 800e3f8:	f002 fafc 	bl	80109f4 <LoRaMacCommandsSerializeCmds>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e402:	2313      	movs	r3, #19
 800e404:	e05c      	b.n	800e4c0 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f003 030f 	and.w	r3, r3, #15
 800e40c:	b2d9      	uxtb	r1, r3
 800e40e:	68ba      	ldr	r2, [r7, #8]
 800e410:	7813      	ldrb	r3, [r2, #0]
 800e412:	f361 0303 	bfi	r3, r1, #0, #4
 800e416:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	781a      	ldrb	r2, [r3, #0]
 800e41c:	4b2a      	ldr	r3, [pc, #168]	@ (800e4c8 <PrepareFrame+0x218>)
 800e41e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800e422:	e049      	b.n	800e4b8 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e424:	4b28      	ldr	r3, [pc, #160]	@ (800e4c8 <PrepareFrame+0x218>)
 800e426:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d010      	beq.n	800e450 <PrepareFrame+0x1a0>
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	2b0f      	cmp	r3, #15
 800e432:	d90d      	bls.n	800e450 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e434:	7ffb      	ldrb	r3, [r7, #31]
 800e436:	f107 0114 	add.w	r1, r7, #20
 800e43a:	4a28      	ldr	r2, [pc, #160]	@ (800e4dc <PrepareFrame+0x22c>)
 800e43c:	4618      	mov	r0, r3
 800e43e:	f002 fad9 	bl	80109f4 <LoRaMacCommandsSerializeCmds>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e448:	2313      	movs	r3, #19
 800e44a:	e039      	b.n	800e4c0 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800e44c:	230a      	movs	r3, #10
 800e44e:	e037      	b.n	800e4c0 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e450:	7ffb      	ldrb	r3, [r7, #31]
 800e452:	f107 0114 	add.w	r1, r7, #20
 800e456:	4a21      	ldr	r2, [pc, #132]	@ (800e4dc <PrepareFrame+0x22c>)
 800e458:	4618      	mov	r0, r3
 800e45a:	f002 facb 	bl	80109f4 <LoRaMacCommandsSerializeCmds>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d001      	beq.n	800e468 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e464:	2313      	movs	r3, #19
 800e466:	e02b      	b.n	800e4c0 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e468:	4b17      	ldr	r3, [pc, #92]	@ (800e4c8 <PrepareFrame+0x218>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800e470:	4b15      	ldr	r3, [pc, #84]	@ (800e4c8 <PrepareFrame+0x218>)
 800e472:	4a1a      	ldr	r2, [pc, #104]	@ (800e4dc <PrepareFrame+0x22c>)
 800e474:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	4b12      	ldr	r3, [pc, #72]	@ (800e4c8 <PrepareFrame+0x218>)
 800e47e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800e482:	e019      	b.n	800e4b8 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d018      	beq.n	800e4bc <PrepareFrame+0x20c>
 800e48a:	4b0f      	ldr	r3, [pc, #60]	@ (800e4c8 <PrepareFrame+0x218>)
 800e48c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e490:	2b00      	cmp	r3, #0
 800e492:	d013      	beq.n	800e4bc <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e494:	4812      	ldr	r0, [pc, #72]	@ (800e4e0 <PrepareFrame+0x230>)
 800e496:	4b0c      	ldr	r3, [pc, #48]	@ (800e4c8 <PrepareFrame+0x218>)
 800e498:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e49c:	461a      	mov	r2, r3
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	f009 f9df 	bl	8017862 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e4a4:	4b08      	ldr	r3, [pc, #32]	@ (800e4c8 <PrepareFrame+0x218>)
 800e4a6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <PrepareFrame+0x218>)
 800e4b0:	801a      	strh	r2, [r3, #0]
            }
            break;
 800e4b2:	e003      	b.n	800e4bc <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	e003      	b.n	800e4c0 <PrepareFrame+0x210>
            break;
 800e4b8:	bf00      	nop
 800e4ba:	e000      	b.n	800e4be <PrepareFrame+0x20e>
            break;
 800e4bc:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3720      	adds	r7, #32
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	20000a28 	.word	0x20000a28
 800e4cc:	20000b60 	.word	0x20000b60
 800e4d0:	20000a2a 	.word	0x20000a2a
 800e4d4:	20008000 	.word	0x20008000
 800e4d8:	20000b40 	.word	0x20000b40
 800e4dc:	20000ec4 	.word	0x20000ec4
 800e4e0:	20000a2b 	.word	0x20000a2b

0800e4e4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b08a      	sub	sp, #40	@ 0x28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e4fc:	4b4b      	ldr	r3, [pc, #300]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e4fe:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e502:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e504:	4b49      	ldr	r3, [pc, #292]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e506:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800e50a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800e50c:	4b47      	ldr	r3, [pc, #284]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e512:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e514:	4b45      	ldr	r3, [pc, #276]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e51a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800e51c:	4b44      	ldr	r3, [pc, #272]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e522:	4b42      	ldr	r3, [pc, #264]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e524:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800e528:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800e52a:	4b40      	ldr	r3, [pc, #256]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e52c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800e530:	f107 020f 	add.w	r2, r7, #15
 800e534:	f107 0110 	add.w	r1, r7, #16
 800e538:	4b3e      	ldr	r3, [pc, #248]	@ (800e634 <SendFrameOnChannel+0x150>)
 800e53a:	f003 ffd6 	bl	80124ea <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e53e:	4b3c      	ldr	r3, [pc, #240]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e540:	2201      	movs	r2, #1
 800e542:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e546:	4b39      	ldr	r3, [pc, #228]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e548:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e54c:	b2da      	uxtb	r2, r3
 800e54e:	4b38      	ldr	r3, [pc, #224]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e550:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800e554:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e558:	4b35      	ldr	r3, [pc, #212]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e55a:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	4a33      	ldr	r2, [pc, #204]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e562:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e566:	4b32      	ldr	r3, [pc, #200]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e568:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e56c:	4a30      	ldr	r2, [pc, #192]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e56e:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e572:	4b2f      	ldr	r3, [pc, #188]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e574:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e578:	4a2d      	ldr	r2, [pc, #180]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e57a:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800e57e:	f001 ff70 	bl	8010462 <LoRaMacClassBIsBeaconModeActive>
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00b      	beq.n	800e5a0 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800e588:	4b29      	ldr	r3, [pc, #164]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e58a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e58e:	4618      	mov	r0, r3
 800e590:	f001 ffd2 	bl	8010538 <LoRaMacClassBIsUplinkCollision>
 800e594:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800e59c:	2310      	movs	r3, #16
 800e59e:	e040      	b.n	800e622 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e5a0:	4b22      	ldr	r3, [pc, #136]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e5a2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d101      	bne.n	800e5ae <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800e5aa:	f001 ffcf 	bl	801054c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800e5ae:	f001 ff69 	bl	8010484 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800e5b2:	4b1e      	ldr	r3, [pc, #120]	@ (800e62c <SendFrameOnChannel+0x148>)
 800e5b4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	4a1d      	ldr	r2, [pc, #116]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e5bc:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff fc2c 	bl	800de20 <SecureFrame>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800e5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d002      	beq.n	800e5dc <SendFrameOnChannel+0xf8>
    {
        return status;
 800e5d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5da:	e022      	b.n	800e622 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e5dc:	4b14      	ldr	r3, [pc, #80]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e5de:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e5e2:	f043 0302 	orr.w	r3, r3, #2
 800e5e6:	4a12      	ldr	r2, [pc, #72]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e5e8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 800e5ec:	4b10      	ldr	r3, [pc, #64]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e5ee:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	b2da      	uxtb	r2, r3
 800e5f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e5f8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800e5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e5fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800e602:	4b0b      	ldr	r3, [pc, #44]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e604:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800e608:	4b09      	ldr	r3, [pc, #36]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800e610:	4b09      	ldr	r3, [pc, #36]	@ (800e638 <SendFrameOnChannel+0x154>)
 800e612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e614:	4a06      	ldr	r2, [pc, #24]	@ (800e630 <SendFrameOnChannel+0x14c>)
 800e616:	8812      	ldrh	r2, [r2, #0]
 800e618:	b2d2      	uxtb	r2, r2
 800e61a:	4611      	mov	r1, r2
 800e61c:	4807      	ldr	r0, [pc, #28]	@ (800e63c <SendFrameOnChannel+0x158>)
 800e61e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3728      	adds	r7, #40	@ 0x28
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20008000 	.word	0x20008000
 800e630:	20000a28 	.word	0x20000a28
 800e634:	20000e44 	.word	0x20000e44
 800e638:	08021f8c 	.word	0x08021f8c
 800e63c:	20000a2a 	.word	0x20000a2a

0800e640 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	4603      	mov	r3, r0
 800e648:	6039      	str	r1, [r7, #0]
 800e64a:	80fb      	strh	r3, [r7, #6]
 800e64c:	4613      	mov	r3, r2
 800e64e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800e650:	4b09      	ldr	r3, [pc, #36]	@ (800e678 <SetTxContinuousWave+0x38>)
 800e652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e654:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800e658:	88fa      	ldrh	r2, [r7, #6]
 800e65a:	6838      	ldr	r0, [r7, #0]
 800e65c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e65e:	4b07      	ldr	r3, [pc, #28]	@ (800e67c <SetTxContinuousWave+0x3c>)
 800e660:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e664:	f043 0302 	orr.w	r3, r3, #2
 800e668:	4a04      	ldr	r2, [pc, #16]	@ (800e67c <SetTxContinuousWave+0x3c>)
 800e66a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	08021f8c 	.word	0x08021f8c
 800e67c:	20000a28 	.word	0x20000a28

0800e680 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800e68a:	4b49      	ldr	r3, [pc, #292]	@ (800e7b0 <RestoreNvmData+0x130>)
 800e68c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e690:	2b01      	cmp	r3, #1
 800e692:	d001      	beq.n	800e698 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800e694:	2301      	movs	r3, #1
 800e696:	e087      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800e698:	2124      	movs	r1, #36	@ 0x24
 800e69a:	4846      	ldr	r0, [pc, #280]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e69c:	f009 f936 	bl	801790c <Crc32>
 800e6a0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800e6a2:	4b44      	ldr	r3, [pc, #272]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d001      	beq.n	800e6b0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e6ac:	2317      	movs	r3, #23
 800e6ae:	e07b      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800e6b0:	211c      	movs	r1, #28
 800e6b2:	4841      	ldr	r0, [pc, #260]	@ (800e7b8 <RestoreNvmData+0x138>)
 800e6b4:	f009 f92a 	bl	801790c <Crc32>
 800e6b8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800e6ba:	4b3e      	ldr	r3, [pc, #248]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e6bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d001      	beq.n	800e6c8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e6c4:	2317      	movs	r3, #23
 800e6c6:	e06f      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800e6c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e6cc:	483b      	ldr	r0, [pc, #236]	@ (800e7bc <RestoreNvmData+0x13c>)
 800e6ce:	f009 f91d 	bl	801790c <Crc32>
 800e6d2:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800e6d4:	4b37      	ldr	r3, [pc, #220]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e6d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d001      	beq.n	800e6e4 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e6e0:	2317      	movs	r3, #23
 800e6e2:	e061      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800e6e4:	21d4      	movs	r1, #212	@ 0xd4
 800e6e6:	4836      	ldr	r0, [pc, #216]	@ (800e7c0 <RestoreNvmData+0x140>)
 800e6e8:	f009 f910 	bl	801790c <Crc32>
 800e6ec:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800e6ee:	4b31      	ldr	r3, [pc, #196]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e6f0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d001      	beq.n	800e6fe <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e6fa:	2317      	movs	r3, #23
 800e6fc:	e054      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800e6fe:	2110      	movs	r1, #16
 800e700:	4830      	ldr	r0, [pc, #192]	@ (800e7c4 <RestoreNvmData+0x144>)
 800e702:	f009 f903 	bl	801790c <Crc32>
 800e706:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800e708:	4b2a      	ldr	r3, [pc, #168]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e70a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	429a      	cmp	r2, r3
 800e712:	d001      	beq.n	800e718 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e714:	2317      	movs	r3, #23
 800e716:	e047      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800e718:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800e71c:	482a      	ldr	r0, [pc, #168]	@ (800e7c8 <RestoreNvmData+0x148>)
 800e71e:	f009 f8f5 	bl	801790c <Crc32>
 800e722:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800e724:	4b23      	ldr	r3, [pc, #140]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e726:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d001      	beq.n	800e734 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e730:	2317      	movs	r3, #23
 800e732:	e039      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800e734:	2114      	movs	r1, #20
 800e736:	4825      	ldr	r0, [pc, #148]	@ (800e7cc <RestoreNvmData+0x14c>)
 800e738:	f009 f8e8 	bl	801790c <Crc32>
 800e73c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800e73e:	4b1d      	ldr	r3, [pc, #116]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e740:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	429a      	cmp	r2, r3
 800e748:	d001      	beq.n	800e74e <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e74a:	2317      	movs	r3, #23
 800e74c:	e02c      	b.n	800e7a8 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800e74e:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800e752:	4918      	ldr	r1, [pc, #96]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e754:	481e      	ldr	r0, [pc, #120]	@ (800e7d0 <RestoreNvmData+0x150>)
 800e756:	f009 f884 	bl	8017862 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800e75a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800e75e:	2100      	movs	r1, #0
 800e760:	4814      	ldr	r0, [pc, #80]	@ (800e7b4 <RestoreNvmData+0x134>)
 800e762:	f009 f8b9 	bl	80178d8 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e766:	4b12      	ldr	r3, [pc, #72]	@ (800e7b0 <RestoreNvmData+0x130>)
 800e768:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800e76c:	4b10      	ldr	r3, [pc, #64]	@ (800e7b0 <RestoreNvmData+0x130>)
 800e76e:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e772:	4b17      	ldr	r3, [pc, #92]	@ (800e7d0 <RestoreNvmData+0x150>)
 800e774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e776:	4a0e      	ldr	r2, [pc, #56]	@ (800e7b0 <RestoreNvmData+0x130>)
 800e778:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e77c:	4b14      	ldr	r3, [pc, #80]	@ (800e7d0 <RestoreNvmData+0x150>)
 800e77e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e782:	4b0b      	ldr	r3, [pc, #44]	@ (800e7b0 <RestoreNvmData+0x130>)
 800e784:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e788:	4b09      	ldr	r3, [pc, #36]	@ (800e7b0 <RestoreNvmData+0x130>)
 800e78a:	2201      	movs	r2, #1
 800e78c:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e790:	4b07      	ldr	r3, [pc, #28]	@ (800e7b0 <RestoreNvmData+0x130>)
 800e792:	2202      	movs	r2, #2
 800e794:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e798:	4b0e      	ldr	r3, [pc, #56]	@ (800e7d4 <RestoreNvmData+0x154>)
 800e79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e79c:	4a0c      	ldr	r2, [pc, #48]	@ (800e7d0 <RestoreNvmData+0x150>)
 800e79e:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800e7a6:	2300      	movs	r3, #0
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	20000a28 	.word	0x20000a28
 800e7b4:	200085cc 	.word	0x200085cc
 800e7b8:	200085f4 	.word	0x200085f4
 800e7bc:	20008614 	.word	0x20008614
 800e7c0:	20008718 	.word	0x20008718
 800e7c4:	200087f0 	.word	0x200087f0
 800e7c8:	20008804 	.word	0x20008804
 800e7cc:	20008b80 	.word	0x20008b80
 800e7d0:	20008000 	.word	0x20008000
 800e7d4:	08021f8c 	.word	0x08021f8c

0800e7d8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <DetermineFrameType+0x16>
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d101      	bne.n	800e7f2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	e03b      	b.n	800e86a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	7b1b      	ldrb	r3, [r3, #12]
 800e7f6:	f003 030f 	and.w	r3, r3, #15
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d008      	beq.n	800e812 <DetermineFrameType+0x3a>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d003      	beq.n	800e812 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2200      	movs	r2, #0
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	e02a      	b.n	800e868 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d103      	bne.n	800e824 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	2201      	movs	r2, #1
 800e820:	701a      	strb	r2, [r3, #0]
 800e822:	e021      	b.n	800e868 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	7b1b      	ldrb	r3, [r3, #12]
 800e828:	f003 030f 	and.w	r3, r3, #15
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d108      	bne.n	800e844 <DetermineFrameType+0x6c>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d103      	bne.n	800e844 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2202      	movs	r2, #2
 800e840:	701a      	strb	r2, [r3, #0]
 800e842:	e011      	b.n	800e868 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7b1b      	ldrb	r3, [r3, #12]
 800e848:	f003 030f 	and.w	r3, r3, #15
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d108      	bne.n	800e864 <DetermineFrameType+0x8c>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d003      	beq.n	800e864 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2203      	movs	r2, #3
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	e001      	b.n	800e868 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800e864:	2318      	movs	r3, #24
 800e866:	e000      	b.n	800e86a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	bc80      	pop	{r7}
 800e872:	4770      	bx	lr

0800e874 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	460a      	mov	r2, r1
 800e87e:	71fb      	strb	r3, [r7, #7]
 800e880:	4613      	mov	r3, r2
 800e882:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 800e884:	79fa      	ldrb	r2, [r7, #7]
 800e886:	79bb      	ldrb	r3, [r7, #6]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d301      	bcc.n	800e890 <CheckRetrans+0x1c>
    {
        return true;
 800e88c:	2301      	movs	r3, #1
 800e88e:	e000      	b.n	800e892 <CheckRetrans+0x1e>
    }
    return false;
 800e890:	2300      	movs	r3, #0
}
 800e892:	4618      	mov	r0, r3
 800e894:	370c      	adds	r7, #12
 800e896:	46bd      	mov	sp, r7
 800e898:	bc80      	pop	{r7}
 800e89a:	4770      	bx	lr

0800e89c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800e8a0:	4b12      	ldr	r3, [pc, #72]	@ (800e8ec <CheckRetransUnconfirmedUplink+0x50>)
 800e8a2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e8a6:	4a12      	ldr	r2, [pc, #72]	@ (800e8f0 <CheckRetransUnconfirmedUplink+0x54>)
 800e8a8:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7ff ffe0 	bl	800e874 <CheckRetrans>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d001      	beq.n	800e8be <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e014      	b.n	800e8e8 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e8be:	4b0b      	ldr	r3, [pc, #44]	@ (800e8ec <CheckRetransUnconfirmedUplink+0x50>)
 800e8c0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e8c4:	f003 0302 	and.w	r3, r3, #2
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00b      	beq.n	800e8e6 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8ce:	4b07      	ldr	r3, [pc, #28]	@ (800e8ec <CheckRetransUnconfirmedUplink+0x50>)
 800e8d0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d004      	beq.n	800e8e2 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e8d8:	4b04      	ldr	r3, [pc, #16]	@ (800e8ec <CheckRetransUnconfirmedUplink+0x50>)
 800e8da:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d101      	bne.n	800e8e6 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e000      	b.n	800e8e8 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 800e8e6:	2300      	movs	r3, #0
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	20000a28 	.word	0x20000a28
 800e8f0:	20008000 	.word	0x20008000

0800e8f4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800e8f8:	4b10      	ldr	r3, [pc, #64]	@ (800e93c <CheckRetransConfirmedUplink+0x48>)
 800e8fa:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e8fe:	4a10      	ldr	r2, [pc, #64]	@ (800e940 <CheckRetransConfirmedUplink+0x4c>)
 800e900:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800e904:	4611      	mov	r1, r2
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff ffb4 	bl	800e874 <CheckRetrans>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800e912:	2301      	movs	r3, #1
 800e914:	e00f      	b.n	800e936 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e916:	4b09      	ldr	r3, [pc, #36]	@ (800e93c <CheckRetransConfirmedUplink+0x48>)
 800e918:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e91c:	f003 0302 	and.w	r3, r3, #2
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b00      	cmp	r3, #0
 800e924:	d006      	beq.n	800e934 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e926:	4b05      	ldr	r3, [pc, #20]	@ (800e93c <CheckRetransConfirmedUplink+0x48>)
 800e928:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 800e930:	2301      	movs	r3, #1
 800e932:	e000      	b.n	800e936 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	20000a28 	.word	0x20000a28
 800e940:	20008000 	.word	0x20008000

0800e944 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e952:	d002      	beq.n	800e95a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3301      	adds	r3, #1
 800e958:	607b      	str	r3, [r7, #4]
    }
    return counter;
 800e95a:	687b      	ldr	r3, [r7, #4]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	bc80      	pop	{r7}
 800e964:	4770      	bx	lr
	...

0800e968 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e96c:	4b1a      	ldr	r3, [pc, #104]	@ (800e9d8 <StopRetransmission+0x70>)
 800e96e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e972:	f003 0302 	and.w	r3, r3, #2
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d009      	beq.n	800e990 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e97c:	4b16      	ldr	r3, [pc, #88]	@ (800e9d8 <StopRetransmission+0x70>)
 800e97e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e982:	2b00      	cmp	r3, #0
 800e984:	d011      	beq.n	800e9aa <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800e986:	4b14      	ldr	r3, [pc, #80]	@ (800e9d8 <StopRetransmission+0x70>)
 800e988:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d00c      	beq.n	800e9aa <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800e990:	4b12      	ldr	r3, [pc, #72]	@ (800e9dc <StopRetransmission+0x74>)
 800e992:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e996:	2b00      	cmp	r3, #0
 800e998:	d007      	beq.n	800e9aa <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800e99a:	4b10      	ldr	r3, [pc, #64]	@ (800e9dc <StopRetransmission+0x74>)
 800e99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff ffd0 	bl	800e944 <IncreaseAdrAckCounter>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e9dc <StopRetransmission+0x74>)
 800e9a8:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800e9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e9d8 <StopRetransmission+0x70>)
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 800e9b2:	4b09      	ldr	r3, [pc, #36]	@ (800e9d8 <StopRetransmission+0x70>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800e9ba:	4b07      	ldr	r3, [pc, #28]	@ (800e9d8 <StopRetransmission+0x70>)
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e9c2:	4b05      	ldr	r3, [pc, #20]	@ (800e9d8 <StopRetransmission+0x70>)
 800e9c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9c8:	f023 0302 	bic.w	r3, r3, #2
 800e9cc:	4a02      	ldr	r2, [pc, #8]	@ (800e9d8 <StopRetransmission+0x70>)
 800e9ce:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800e9d2:	2301      	movs	r3, #1
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20000a28 	.word	0x20000a28
 800e9dc:	20008000 	.word	0x20008000

0800e9e0 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e9e4:	4b08      	ldr	r3, [pc, #32]	@ (800ea08 <OnMacProcessNotify+0x28>)
 800e9e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00a      	beq.n	800ea04 <OnMacProcessNotify+0x24>
 800e9ee:	4b06      	ldr	r3, [pc, #24]	@ (800ea08 <OnMacProcessNotify+0x28>)
 800e9f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d004      	beq.n	800ea04 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e9fa:	4b03      	ldr	r3, [pc, #12]	@ (800ea08 <OnMacProcessNotify+0x28>)
 800e9fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea00:	695b      	ldr	r3, [r3, #20]
 800ea02:	4798      	blx	r3
    }
}
 800ea04:	bf00      	nop
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	20000a28 	.word	0x20000a28

0800ea0c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800ea16:	4b0b      	ldr	r3, [pc, #44]	@ (800ea44 <CallNvmDataChangeCallback+0x38>)
 800ea18:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00c      	beq.n	800ea3a <CallNvmDataChangeCallback+0x2e>
 800ea20:	4b08      	ldr	r3, [pc, #32]	@ (800ea44 <CallNvmDataChangeCallback+0x38>)
 800ea22:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d006      	beq.n	800ea3a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800ea2c:	4b05      	ldr	r3, [pc, #20]	@ (800ea44 <CallNvmDataChangeCallback+0x38>)
 800ea2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	88fa      	ldrh	r2, [r7, #6]
 800ea36:	4610      	mov	r0, r2
 800ea38:	4798      	blx	r3
    }
}
 800ea3a:	bf00      	nop
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20000a28 	.word	0x20000a28

0800ea48 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 800ea48:	b480      	push	{r7}
 800ea4a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ea4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea7c <IsRequestPending+0x34>)
 800ea4e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ea52:	f003 0304 	and.w	r3, r3, #4
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d107      	bne.n	800ea6c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800ea5c:	4b07      	ldr	r3, [pc, #28]	@ (800ea7c <IsRequestPending+0x34>)
 800ea5e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d001      	beq.n	800ea70 <IsRequestPending+0x28>
    {
        return 1;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e000      	b.n	800ea72 <IsRequestPending+0x2a>
    }
    return 0;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bc80      	pop	{r7}
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	20000a28 	.word	0x20000a28

0800ea80 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800ea80:	b590      	push	{r4, r7, lr}
 800ea82:	b091      	sub	sp, #68	@ 0x44
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	6178      	str	r0, [r7, #20]
 800ea88:	6139      	str	r1, [r7, #16]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <LoRaMacInitialization+0x1a>
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d101      	bne.n	800ea9e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ea9a:	2303      	movs	r3, #3
 800ea9c:	e27a      	b.n	800ef94 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d00b      	beq.n	800eabe <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d007      	beq.n	800eabe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eabe:	2303      	movs	r3, #3
 800eac0:	e268      	b.n	800ef94 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f003 fc19 	bl	80122fc <RegionIsActive>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f083 0301 	eor.w	r3, r3, #1
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d001      	beq.n	800eada <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ead6:	2309      	movs	r3, #9
 800ead8:	e25c      	b.n	800ef94 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800eada:	6978      	ldr	r0, [r7, #20]
 800eadc:	f002 f8ac 	bl	8010c38 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800eae0:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800eae4:	2100      	movs	r1, #0
 800eae6:	48c7      	ldr	r0, [pc, #796]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eae8:	f008 fef6 	bl	80178d8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800eaec:	f240 521c 	movw	r2, #1308	@ 0x51c
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	48c5      	ldr	r0, [pc, #788]	@ (800ee08 <LoRaMacInitialization+0x388>)
 800eaf4:	f008 fef0 	bl	80178d8 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800eaf8:	4ac2      	ldr	r2, [pc, #776]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eafa:	7bfb      	ldrb	r3, [r7, #15]
 800eafc:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800eb00:	4bc0      	ldr	r3, [pc, #768]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb02:	2200      	movs	r2, #0
 800eb04:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800eb08:	4bbe      	ldr	r3, [pc, #760]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800eb10:	4bbc      	ldr	r3, [pc, #752]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb12:	4abe      	ldr	r2, [pc, #760]	@ (800ee0c <LoRaMacInitialization+0x38c>)
 800eb14:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800eb1e:	4bbc      	ldr	r3, [pc, #752]	@ (800ee10 <LoRaMacInitialization+0x390>)
 800eb20:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800eb22:	4bbc      	ldr	r3, [pc, #752]	@ (800ee14 <LoRaMacInitialization+0x394>)
 800eb24:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 800eb26:	4bbc      	ldr	r3, [pc, #752]	@ (800ee18 <LoRaMacInitialization+0x398>)
 800eb28:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800eb2a:	4bb6      	ldr	r3, [pc, #728]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb2c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb30:	f107 021c 	add.w	r2, r7, #28
 800eb34:	4611      	mov	r1, r2
 800eb36:	4618      	mov	r0, r3
 800eb38:	f003 fc2c 	bl	8012394 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800eb3c:	230f      	movs	r3, #15
 800eb3e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb42:	4bb0      	ldr	r3, [pc, #704]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb44:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb48:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f003 fbe9 	bl	8012326 <RegionGetPhyParam>
 800eb54:	4603      	mov	r3, r0
 800eb56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800eb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	bf14      	ite	ne
 800eb5e:	2301      	movne	r3, #1
 800eb60:	2300      	moveq	r3, #0
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	4ba7      	ldr	r3, [pc, #668]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb66:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800eb6a:	230a      	movs	r3, #10
 800eb6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb70:	4ba4      	ldr	r3, [pc, #656]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb72:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb76:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f003 fbd2 	bl	8012326 <RegionGetPhyParam>
 800eb82:	4603      	mov	r3, r0
 800eb84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800eb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb88:	b25a      	sxtb	r2, r3
 800eb8a:	4b9e      	ldr	r3, [pc, #632]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb8c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800eb90:	2306      	movs	r3, #6
 800eb92:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb96:	4b9b      	ldr	r3, [pc, #620]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eb98:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb9c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f003 fbbf 	bl	8012326 <RegionGetPhyParam>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800ebac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebae:	b25a      	sxtb	r2, r3
 800ebb0:	4b94      	ldr	r3, [pc, #592]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ebb2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800ebb6:	2310      	movs	r3, #16
 800ebb8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebbc:	4b91      	ldr	r3, [pc, #580]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ebbe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ebc2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f003 fbac 	bl	8012326 <RegionGetPhyParam>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ebd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd4:	4a8b      	ldr	r2, [pc, #556]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ebd6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ebda:	2311      	movs	r3, #17
 800ebdc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebe0:	4b88      	ldr	r3, [pc, #544]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ebe2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ebe6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ebea:	4611      	mov	r1, r2
 800ebec:	4618      	mov	r0, r3
 800ebee:	f003 fb9a 	bl	8012326 <RegionGetPhyParam>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ebf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf8:	4a82      	ldr	r2, [pc, #520]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ebfa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ebfe:	2312      	movs	r3, #18
 800ec00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec04:	4b7f      	ldr	r3, [pc, #508]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec06:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec0a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f003 fb88 	bl	8012326 <RegionGetPhyParam>
 800ec16:	4603      	mov	r3, r0
 800ec18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800ec1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec1c:	4a79      	ldr	r2, [pc, #484]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec1e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800ec22:	2313      	movs	r3, #19
 800ec24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec28:	4b76      	ldr	r3, [pc, #472]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec2a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec2e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec32:	4611      	mov	r1, r2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f003 fb76 	bl	8012326 <RegionGetPhyParam>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800ec3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec40:	4a70      	ldr	r2, [pc, #448]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec42:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ec46:	2314      	movs	r3, #20
 800ec48:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec4c:	4b6d      	ldr	r3, [pc, #436]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec4e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec52:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec56:	4611      	mov	r1, r2
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f003 fb64 	bl	8012326 <RegionGetPhyParam>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ec62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec64:	4a67      	ldr	r2, [pc, #412]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec66:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ec6a:	2316      	movs	r3, #22
 800ec6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec70:	4b64      	ldr	r3, [pc, #400]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec72:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec76:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f003 fb52 	bl	8012326 <RegionGetPhyParam>
 800ec82:	4603      	mov	r3, r0
 800ec84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ec86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	4b5e      	ldr	r3, [pc, #376]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec8c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ec90:	2317      	movs	r3, #23
 800ec92:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec96:	4b5b      	ldr	r3, [pc, #364]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ec98:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec9c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eca0:	4611      	mov	r1, r2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f003 fb3f 	bl	8012326 <RegionGetPhyParam>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ecac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecae:	4a55      	ldr	r2, [pc, #340]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ecb0:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb6:	4a53      	ldr	r2, [pc, #332]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ecb8:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ecbc:	2318      	movs	r3, #24
 800ecbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ecc2:	4b50      	ldr	r3, [pc, #320]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ecc4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ecc8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eccc:	4611      	mov	r1, r2
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f003 fb29 	bl	8012326 <RegionGetPhyParam>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ecd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecda:	b2da      	uxtb	r2, r3
 800ecdc:	4b49      	ldr	r3, [pc, #292]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ecde:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ece2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	4b47      	ldr	r3, [pc, #284]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ece8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800ecec:	231d      	movs	r3, #29
 800ecee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ecf2:	4b44      	ldr	r3, [pc, #272]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ecf4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ecf8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f003 fb11 	bl	8012326 <RegionGetPhyParam>
 800ed04:	4603      	mov	r3, r0
 800ed06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800ed08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed0a:	b2da      	uxtb	r2, r3
 800ed0c:	4b3d      	ldr	r3, [pc, #244]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed0e:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800ed12:	231e      	movs	r3, #30
 800ed14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed18:	4b3a      	ldr	r3, [pc, #232]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed1a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed1e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed22:	4611      	mov	r1, r2
 800ed24:	4618      	mov	r0, r3
 800ed26:	f003 fafe 	bl	8012326 <RegionGetPhyParam>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800ed2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	4b34      	ldr	r3, [pc, #208]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed34:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800ed38:	231f      	movs	r3, #31
 800ed3a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed3e:	4b31      	ldr	r3, [pc, #196]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed40:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed44:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed48:	4611      	mov	r1, r2
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f003 faeb 	bl	8012326 <RegionGetPhyParam>
 800ed50:	4603      	mov	r3, r0
 800ed52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800ed54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed56:	4a2b      	ldr	r2, [pc, #172]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed58:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800ed5c:	2320      	movs	r3, #32
 800ed5e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed62:	4b28      	ldr	r3, [pc, #160]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed68:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed6c:	4611      	mov	r1, r2
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f003 fad9 	bl	8012326 <RegionGetPhyParam>
 800ed74:	4603      	mov	r3, r0
 800ed76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800ed78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed7a:	4a22      	ldr	r2, [pc, #136]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed7c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800ed80:	230b      	movs	r3, #11
 800ed82:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed86:	4b1f      	ldr	r3, [pc, #124]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ed88:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed8c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ed90:	4611      	mov	r1, r2
 800ed92:	4618      	mov	r0, r3
 800ed94:	f003 fac7 	bl	8012326 <RegionGetPhyParam>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800ed9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	4b18      	ldr	r3, [pc, #96]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800eda2:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800eda6:	230c      	movs	r3, #12
 800eda8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800edac:	4b15      	ldr	r3, [pc, #84]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800edb2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800edb6:	4611      	mov	r1, r2
 800edb8:	4618      	mov	r0, r3
 800edba:	f003 fab4 	bl	8012326 <RegionGetPhyParam>
 800edbe:	4603      	mov	r3, r0
 800edc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800edc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edc8:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800edcc:	4b0d      	ldr	r3, [pc, #52]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edce:	2201      	movs	r2, #1
 800edd0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800edd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edd6:	220a      	movs	r2, #10
 800edd8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800eddc:	4b09      	ldr	r3, [pc, #36]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edde:	2206      	movs	r2, #6
 800ede0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800ede4:	4b07      	ldr	r3, [pc, #28]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800ede6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800edea:	4a06      	ldr	r2, [pc, #24]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edec:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800edee:	4b05      	ldr	r3, [pc, #20]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edf0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800edf4:	4b03      	ldr	r3, [pc, #12]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800edfa:	4b02      	ldr	r3, [pc, #8]	@ (800ee04 <LoRaMacInitialization+0x384>)
 800edfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee00:	e00c      	b.n	800ee1c <LoRaMacInitialization+0x39c>
 800ee02:	bf00      	nop
 800ee04:	20008000 	.word	0x20008000
 800ee08:	20000a28 	.word	0x20000a28
 800ee0c:	01000400 	.word	0x01000400
 800ee10:	20008224 	.word	0x20008224
 800ee14:	20008238 	.word	0x20008238
 800ee18:	20000f44 	.word	0x20000f44
 800ee1c:	4a5f      	ldr	r2, [pc, #380]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee1e:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800ee20:	4b5e      	ldr	r3, [pc, #376]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee26:	4a5d      	ldr	r2, [pc, #372]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee28:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800ee2a:	4b5c      	ldr	r3, [pc, #368]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee30:	4a5a      	ldr	r2, [pc, #360]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee32:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800ee34:	4b59      	ldr	r3, [pc, #356]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ee3a:	4a58      	ldr	r2, [pc, #352]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee3c:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800ee3e:	4b57      	ldr	r3, [pc, #348]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ee44:	4a55      	ldr	r2, [pc, #340]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee46:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800ee48:	4b54      	ldr	r3, [pc, #336]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee4a:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 800ee4e:	4b53      	ldr	r3, [pc, #332]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee50:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800ee54:	4b51      	ldr	r3, [pc, #324]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee56:	2201      	movs	r2, #1
 800ee58:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800ee5c:	4a50      	ldr	r2, [pc, #320]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 800ee64:	2000      	movs	r0, #0
 800ee66:	f7ff f86b 	bl	800df40 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800ee6a:	4b4c      	ldr	r3, [pc, #304]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800ee72:	4a4b      	ldr	r2, [pc, #300]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800ee7a:	4b49      	ldr	r3, [pc, #292]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800ee82:	4b47      	ldr	r3, [pc, #284]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ee84:	2201      	movs	r2, #1
 800ee86:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800ee8a:	4b44      	ldr	r3, [pc, #272]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ee90:	4b42      	ldr	r3, [pc, #264]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800ee96:	2300      	movs	r3, #0
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	4b42      	ldr	r3, [pc, #264]	@ (800efa4 <LoRaMacInitialization+0x524>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f04f 31ff 	mov.w	r1, #4294967295
 800eea2:	4841      	ldr	r0, [pc, #260]	@ (800efa8 <LoRaMacInitialization+0x528>)
 800eea4:	f00c f878 	bl	801af98 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800eea8:	2300      	movs	r3, #0
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	4b3f      	ldr	r3, [pc, #252]	@ (800efac <LoRaMacInitialization+0x52c>)
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f04f 31ff 	mov.w	r1, #4294967295
 800eeb4:	483e      	ldr	r0, [pc, #248]	@ (800efb0 <LoRaMacInitialization+0x530>)
 800eeb6:	f00c f86f 	bl	801af98 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800eeba:	2300      	movs	r3, #0
 800eebc:	9300      	str	r3, [sp, #0]
 800eebe:	4b3d      	ldr	r3, [pc, #244]	@ (800efb4 <LoRaMacInitialization+0x534>)
 800eec0:	2200      	movs	r2, #0
 800eec2:	f04f 31ff 	mov.w	r1, #4294967295
 800eec6:	483c      	ldr	r0, [pc, #240]	@ (800efb8 <LoRaMacInitialization+0x538>)
 800eec8:	f00c f866 	bl	801af98 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800eecc:	2300      	movs	r3, #0
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	4b3a      	ldr	r3, [pc, #232]	@ (800efbc <LoRaMacInitialization+0x53c>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	f04f 31ff 	mov.w	r1, #4294967295
 800eed8:	4839      	ldr	r0, [pc, #228]	@ (800efc0 <LoRaMacInitialization+0x540>)
 800eeda:	f00c f85d 	bl	801af98 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800eede:	4c2f      	ldr	r4, [pc, #188]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800eee0:	463b      	mov	r3, r7
 800eee2:	4618      	mov	r0, r3
 800eee4:	f00b ffc2 	bl	801ae6c <SysTimeGetMcuTime>
 800eee8:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800eeec:	463a      	mov	r2, r7
 800eeee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eef2:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800eef6:	4b33      	ldr	r3, [pc, #204]	@ (800efc4 <LoRaMacInitialization+0x544>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800eefc:	4b28      	ldr	r3, [pc, #160]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800eefe:	4a32      	ldr	r2, [pc, #200]	@ (800efc8 <LoRaMacInitialization+0x548>)
 800ef00:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800ef04:	4b26      	ldr	r3, [pc, #152]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ef06:	4a31      	ldr	r2, [pc, #196]	@ (800efcc <LoRaMacInitialization+0x54c>)
 800ef08:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800ef0c:	4b24      	ldr	r3, [pc, #144]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ef0e:	4a30      	ldr	r2, [pc, #192]	@ (800efd0 <LoRaMacInitialization+0x550>)
 800ef10:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800ef14:	4b22      	ldr	r3, [pc, #136]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ef16:	4a2f      	ldr	r2, [pc, #188]	@ (800efd4 <LoRaMacInitialization+0x554>)
 800ef18:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800ef1c:	4b20      	ldr	r3, [pc, #128]	@ (800efa0 <LoRaMacInitialization+0x520>)
 800ef1e:	4a2e      	ldr	r2, [pc, #184]	@ (800efd8 <LoRaMacInitialization+0x558>)
 800ef20:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800ef24:	4b2d      	ldr	r3, [pc, #180]	@ (800efdc <LoRaMacInitialization+0x55c>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	482d      	ldr	r0, [pc, #180]	@ (800efe0 <LoRaMacInitialization+0x560>)
 800ef2a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800ef2c:	482d      	ldr	r0, [pc, #180]	@ (800efe4 <LoRaMacInitialization+0x564>)
 800ef2e:	f008 f90f 	bl	8017150 <SecureElementInit>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef38:	2311      	movs	r3, #17
 800ef3a:	e02b      	b.n	800ef94 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800ef3c:	4817      	ldr	r0, [pc, #92]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ef3e:	f002 fb37 	bl	80115b0 <LoRaMacCryptoInit>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef48:	2311      	movs	r3, #17
 800ef4a:	e023      	b.n	800ef94 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800ef4c:	f001 fc36 	bl	80107bc <LoRaMacCommandsInit>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ef56:	2313      	movs	r3, #19
 800ef58:	e01c      	b.n	800ef94 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800ef5a:	4823      	ldr	r0, [pc, #140]	@ (800efe8 <LoRaMacInitialization+0x568>)
 800ef5c:	f002 fbc8 	bl	80116f0 <LoRaMacCryptoSetMulticastReference>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef66:	2311      	movs	r3, #17
 800ef68:	e014      	b.n	800ef94 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800ef6a:	4b1c      	ldr	r3, [pc, #112]	@ (800efdc <LoRaMacInitialization+0x55c>)
 800ef6c:	695b      	ldr	r3, [r3, #20]
 800ef6e:	4798      	blx	r3
 800ef70:	4603      	mov	r3, r0
 800ef72:	4618      	mov	r0, r3
 800ef74:	f008 fc50 	bl	8017818 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ef78:	4b18      	ldr	r3, [pc, #96]	@ (800efdc <LoRaMacInitialization+0x55c>)
 800ef7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef7c:	4a07      	ldr	r2, [pc, #28]	@ (800ef9c <LoRaMacInitialization+0x51c>)
 800ef7e:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800ef82:	4610      	mov	r0, r2
 800ef84:	4798      	blx	r3
    Radio.Sleep( );
 800ef86:	4b15      	ldr	r3, [pc, #84]	@ (800efdc <LoRaMacInitialization+0x55c>)
 800ef88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef8a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ef8c:	2001      	movs	r0, #1
 800ef8e:	f7fd fa71 	bl	800c474 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	373c      	adds	r7, #60	@ 0x3c
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd90      	pop	{r4, r7, pc}
 800ef9c:	20008000 	.word	0x20008000
 800efa0:	20000a28 	.word	0x20000a28
 800efa4:	0800ca01 	.word	0x0800ca01
 800efa8:	20000d90 	.word	0x20000d90
 800efac:	0800ca91 	.word	0x0800ca91
 800efb0:	20000da8 	.word	0x20000da8
 800efb4:	0800cb09 	.word	0x0800cb09
 800efb8:	20000dc0 	.word	0x20000dc0
 800efbc:	0800cb89 	.word	0x0800cb89
 800efc0:	20000e28 	.word	0x20000e28
 800efc4:	20000fd4 	.word	0x20000fd4
 800efc8:	0800b499 	.word	0x0800b499
 800efcc:	0800b4e5 	.word	0x0800b4e5
 800efd0:	0800b585 	.word	0x0800b585
 800efd4:	0800b559 	.word	0x0800b559
 800efd8:	0800b5a1 	.word	0x0800b5a1
 800efdc:	08021f8c 	.word	0x08021f8c
 800efe0:	20000d74 	.word	0x20000d74
 800efe4:	2000814c 	.word	0x2000814c
 800efe8:	200080e8 	.word	0x200080e8

0800efec <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800eff0:	4b04      	ldr	r3, [pc, #16]	@ (800f004 <LoRaMacStart+0x18>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800eff8:	f7fc fae8 	bl	800b5cc <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	20000a28 	.word	0x20000a28

0800f008 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800f008:	b590      	push	{r4, r7, lr}
 800f00a:	b08d      	sub	sp, #52	@ 0x34
 800f00c:	af02      	add	r7, sp, #8
 800f00e:	4603      	mov	r3, r0
 800f010:	6039      	str	r1, [r7, #0]
 800f012:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f014:	4b42      	ldr	r3, [pc, #264]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f018:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f01a:	4b41      	ldr	r3, [pc, #260]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f01c:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800f020:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f022:	4b3f      	ldr	r3, [pc, #252]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f024:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800f028:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800f02a:	4b3e      	ldr	r3, [pc, #248]	@ (800f124 <LoRaMacQueryTxPossible+0x11c>)
 800f02c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f030:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800f032:	2300      	movs	r3, #0
 800f034:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f03c:	2303      	movs	r3, #3
 800f03e:	e06b      	b.n	800f118 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800f040:	2300      	movs	r3, #0
 800f042:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f044:	4b36      	ldr	r3, [pc, #216]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f046:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f04a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f04c:	4b34      	ldr	r3, [pc, #208]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f050:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f052:	4b33      	ldr	r3, [pc, #204]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f054:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f058:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f05a:	4b31      	ldr	r3, [pc, #196]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f05c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800f060:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f062:	4b2f      	ldr	r3, [pc, #188]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f064:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f068:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f06c:	4b2c      	ldr	r3, [pc, #176]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f06e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f072:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f076:	4b2b      	ldr	r3, [pc, #172]	@ (800f124 <LoRaMacQueryTxPossible+0x11c>)
 800f078:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f07c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f080:	4b27      	ldr	r3, [pc, #156]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f082:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800f08a:	4b25      	ldr	r3, [pc, #148]	@ (800f120 <LoRaMacQueryTxPossible+0x118>)
 800f08c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f090:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800f094:	f107 040d 	add.w	r4, r7, #13
 800f098:	f107 020e 	add.w	r2, r7, #14
 800f09c:	f107 010f 	add.w	r1, r7, #15
 800f0a0:	f107 0014 	add.w	r0, r7, #20
 800f0a4:	f107 0310 	add.w	r3, r7, #16
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	4623      	mov	r3, r4
 800f0ac:	f001 f8b4 	bl	8010218 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f0b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7fd fead 	bl	800ce14 <GetMaxAppPayloadWithoutFOptsLength>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	461a      	mov	r2, r3
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f0c2:	f107 0308 	add.w	r3, r7, #8
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f001 fc7e 	bl	80109c8 <LoRaMacCommandsGetSizeSerializedCmds>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f0d2:	2313      	movs	r3, #19
 800f0d4:	e020      	b.n	800f118 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	2b0f      	cmp	r3, #15
 800f0da:	d819      	bhi.n	800f110 <LoRaMacQueryTxPossible+0x108>
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	785b      	ldrb	r3, [r3, #1]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d313      	bcc.n	800f110 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	785a      	ldrb	r2, [r3, #1]
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	785b      	ldrb	r3, [r3, #1]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	79fa      	ldrb	r2, [r7, #7]
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	4413      	add	r3, r2
 800f104:	4299      	cmp	r1, r3
 800f106:	d301      	bcc.n	800f10c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 800f108:	2300      	movs	r3, #0
 800f10a:	e005      	b.n	800f118 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800f10c:	2308      	movs	r3, #8
 800f10e:	e003      	b.n	800f118 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	2200      	movs	r2, #0
 800f114:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800f116:	2308      	movs	r3, #8
    }
}
 800f118:	4618      	mov	r0, r3
 800f11a:	372c      	adds	r7, #44	@ 0x2c
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd90      	pop	{r4, r7, pc}
 800f120:	20008000 	.word	0x20008000
 800f124:	20000a28 	.word	0x20000a28

0800f128 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800f128:	b590      	push	{r4, r7, lr}
 800f12a:	b087      	sub	sp, #28
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d101      	bne.n	800f13e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f13a:	2303      	movs	r3, #3
 800f13c:	e1c4      	b.n	800f4c8 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	2b41      	cmp	r3, #65	@ 0x41
 800f144:	f200 81b9 	bhi.w	800f4ba <LoRaMacMibGetRequestConfirm+0x392>
 800f148:	a201      	add	r2, pc, #4	@ (adr r2, 800f150 <LoRaMacMibGetRequestConfirm+0x28>)
 800f14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f14e:	bf00      	nop
 800f150:	0800f259 	.word	0x0800f259
 800f154:	0800f265 	.word	0x0800f265
 800f158:	0800f271 	.word	0x0800f271
 800f15c:	0800f27d 	.word	0x0800f27d
 800f160:	0800f289 	.word	0x0800f289
 800f164:	0800f295 	.word	0x0800f295
 800f168:	0800f2a1 	.word	0x0800f2a1
 800f16c:	0800f4bb 	.word	0x0800f4bb
 800f170:	0800f4bb 	.word	0x0800f4bb
 800f174:	0800f4bb 	.word	0x0800f4bb
 800f178:	0800f4bb 	.word	0x0800f4bb
 800f17c:	0800f4bb 	.word	0x0800f4bb
 800f180:	0800f4bb 	.word	0x0800f4bb
 800f184:	0800f4bb 	.word	0x0800f4bb
 800f188:	0800f4bb 	.word	0x0800f4bb
 800f18c:	0800f2b5 	.word	0x0800f2b5
 800f190:	0800f2c1 	.word	0x0800f2c1
 800f194:	0800f2cd 	.word	0x0800f2cd
 800f198:	0800f2ef 	.word	0x0800f2ef
 800f19c:	0800f301 	.word	0x0800f301
 800f1a0:	0800f313 	.word	0x0800f313
 800f1a4:	0800f325 	.word	0x0800f325
 800f1a8:	0800f359 	.word	0x0800f359
 800f1ac:	0800f337 	.word	0x0800f337
 800f1b0:	0800f37b 	.word	0x0800f37b
 800f1b4:	0800f387 	.word	0x0800f387
 800f1b8:	0800f391 	.word	0x0800f391
 800f1bc:	0800f39b 	.word	0x0800f39b
 800f1c0:	0800f3a5 	.word	0x0800f3a5
 800f1c4:	0800f3af 	.word	0x0800f3af
 800f1c8:	0800f3b9 	.word	0x0800f3b9
 800f1cc:	0800f3e5 	.word	0x0800f3e5
 800f1d0:	0800f3f1 	.word	0x0800f3f1
 800f1d4:	0800f409 	.word	0x0800f409
 800f1d8:	0800f3fd 	.word	0x0800f3fd
 800f1dc:	0800f415 	.word	0x0800f415
 800f1e0:	0800f41f 	.word	0x0800f41f
 800f1e4:	0800f42b 	.word	0x0800f42b
 800f1e8:	0800f447 	.word	0x0800f447
 800f1ec:	0800f437 	.word	0x0800f437
 800f1f0:	0800f43f 	.word	0x0800f43f
 800f1f4:	0800f4bb 	.word	0x0800f4bb
 800f1f8:	0800f453 	.word	0x0800f453
 800f1fc:	0800f4bb 	.word	0x0800f4bb
 800f200:	0800f4bb 	.word	0x0800f4bb
 800f204:	0800f4bb 	.word	0x0800f4bb
 800f208:	0800f4bb 	.word	0x0800f4bb
 800f20c:	0800f4bb 	.word	0x0800f4bb
 800f210:	0800f4bb 	.word	0x0800f4bb
 800f214:	0800f4bb 	.word	0x0800f4bb
 800f218:	0800f4bb 	.word	0x0800f4bb
 800f21c:	0800f4bb 	.word	0x0800f4bb
 800f220:	0800f4bb 	.word	0x0800f4bb
 800f224:	0800f4bb 	.word	0x0800f4bb
 800f228:	0800f4bb 	.word	0x0800f4bb
 800f22c:	0800f4bb 	.word	0x0800f4bb
 800f230:	0800f4bb 	.word	0x0800f4bb
 800f234:	0800f4bb 	.word	0x0800f4bb
 800f238:	0800f467 	.word	0x0800f467
 800f23c:	0800f473 	.word	0x0800f473
 800f240:	0800f47f 	.word	0x0800f47f
 800f244:	0800f48b 	.word	0x0800f48b
 800f248:	0800f497 	.word	0x0800f497
 800f24c:	0800f4a3 	.word	0x0800f4a3
 800f250:	0800f4af 	.word	0x0800f4af
 800f254:	0800f4b5 	.word	0x0800f4b5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800f258:	4b9d      	ldr	r3, [pc, #628]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f25a:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	711a      	strb	r2, [r3, #4]
            break;
 800f262:	e130      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f264:	4b9a      	ldr	r3, [pc, #616]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f266:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	711a      	strb	r2, [r3, #4]
            break;
 800f26e:	e12a      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	f008 fa29 	bl	80176cc <SecureElementGetDevEui>
            break;
 800f27a:	e124      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	4618      	mov	r0, r3
 800f282:	f008 fa6d 	bl	8017760 <SecureElementGetJoinEui>
            break;
 800f286:	e11e      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800f288:	4b91      	ldr	r3, [pc, #580]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f28a:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	711a      	strb	r2, [r3, #4]
            break;
 800f292:	e118      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800f294:	4b8e      	ldr	r3, [pc, #568]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f296:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	605a      	str	r2, [r3, #4]
            break;
 800f29e:	e112      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800f2a0:	4b8b      	ldr	r3, [pc, #556]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2a2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3304      	adds	r3, #4
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	4610      	mov	r0, r2
 800f2ae:	f008 fa6f 	bl	8017790 <SecureElementGetDevAddr>
            break;
 800f2b2:	e108      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800f2b4:	4b86      	ldr	r3, [pc, #536]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2b6:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	711a      	strb	r2, [r3, #4]
            break;
 800f2be:	e102      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f2c0:	4b83      	ldr	r3, [pc, #524]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2c2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	711a      	strb	r2, [r3, #4]
            break;
 800f2ca:	e0fc      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800f2cc:	231c      	movs	r3, #28
 800f2ce:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f2d0:	4b7f      	ldr	r3, [pc, #508]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f2d6:	f107 0210 	add.w	r2, r7, #16
 800f2da:	4611      	mov	r1, r2
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f003 f822 	bl	8012326 <RegionGetPhyParam>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	605a      	str	r2, [r3, #4]
            break;
 800f2ec:	e0eb      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a77      	ldr	r2, [pc, #476]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	326c      	adds	r2, #108	@ 0x6c
 800f2f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2fa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f2fe:	e0e2      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a73      	ldr	r2, [pc, #460]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f304:	3304      	adds	r3, #4
 800f306:	32b4      	adds	r2, #180	@ 0xb4
 800f308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f30c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f310:	e0d9      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4a6e      	ldr	r2, [pc, #440]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f316:	3304      	adds	r3, #4
 800f318:	3274      	adds	r2, #116	@ 0x74
 800f31a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f31e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f322:	e0d0      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a6a      	ldr	r2, [pc, #424]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f328:	3304      	adds	r3, #4
 800f32a:	32bc      	adds	r2, #188	@ 0xbc
 800f32c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f330:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f334:	e0c7      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800f336:	231a      	movs	r3, #26
 800f338:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f33a:	4b65      	ldr	r3, [pc, #404]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f33c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f340:	f107 0210 	add.w	r2, r7, #16
 800f344:	4611      	mov	r1, r2
 800f346:	4618      	mov	r0, r3
 800f348:	f002 ffed 	bl	8012326 <RegionGetPhyParam>
 800f34c:	4603      	mov	r3, r0
 800f34e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	605a      	str	r2, [r3, #4]
            break;
 800f356:	e0b6      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800f358:	2319      	movs	r3, #25
 800f35a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f35c:	4b5c      	ldr	r3, [pc, #368]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f35e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f362:	f107 0210 	add.w	r2, r7, #16
 800f366:	4611      	mov	r1, r2
 800f368:	4618      	mov	r0, r3
 800f36a:	f002 ffdc 	bl	8012326 <RegionGetPhyParam>
 800f36e:	4603      	mov	r3, r0
 800f370:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	605a      	str	r2, [r3, #4]
            break;
 800f378:	e0a5      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f37a:	4b55      	ldr	r3, [pc, #340]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f37c:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	711a      	strb	r2, [r3, #4]
            break;
 800f384:	e09f      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800f386:	4b52      	ldr	r3, [pc, #328]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	605a      	str	r2, [r3, #4]
            break;
 800f38e:	e09a      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800f390:	4b4f      	ldr	r3, [pc, #316]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f392:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	605a      	str	r2, [r3, #4]
            break;
 800f398:	e095      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800f39a:	4b4d      	ldr	r3, [pc, #308]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f39c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	605a      	str	r2, [r3, #4]
            break;
 800f3a2:	e090      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800f3a4:	4b4a      	ldr	r3, [pc, #296]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	605a      	str	r2, [r3, #4]
            break;
 800f3ac:	e08b      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800f3ae:	4b48      	ldr	r3, [pc, #288]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	605a      	str	r2, [r3, #4]
            break;
 800f3b6:	e086      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f3bc:	4b44      	ldr	r3, [pc, #272]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f3c2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f3c4:	4b42      	ldr	r3, [pc, #264]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3c6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f3ca:	f107 0210 	add.w	r2, r7, #16
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f002 ffa8 	bl	8012326 <RegionGetPhyParam>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	b25a      	sxtb	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	711a      	strb	r2, [r3, #4]
            break;
 800f3e2:	e070      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f3e4:	4b3a      	ldr	r3, [pc, #232]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3e6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	711a      	strb	r2, [r3, #4]
            break;
 800f3ee:	e06a      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f3f0:	4b37      	ldr	r3, [pc, #220]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3f2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	711a      	strb	r2, [r3, #4]
            break;
 800f3fa:	e064      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f3fc:	4b34      	ldr	r3, [pc, #208]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f3fe:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	711a      	strb	r2, [r3, #4]
            break;
 800f406:	e05e      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f408:	4b31      	ldr	r3, [pc, #196]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f40a:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	711a      	strb	r2, [r3, #4]
            break;
 800f412:	e058      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800f414:	4b2e      	ldr	r3, [pc, #184]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	605a      	str	r2, [r3, #4]
            break;
 800f41c:	e053      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800f41e:	4b2c      	ldr	r3, [pc, #176]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f420:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	711a      	strb	r2, [r3, #4]
            break;
 800f428:	e04d      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f42a:	4b29      	ldr	r3, [pc, #164]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f42c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	605a      	str	r2, [r3, #4]
            break;
 800f434:	e047      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a25      	ldr	r2, [pc, #148]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f43a:	605a      	str	r2, [r3, #4]
            break;
 800f43c:	e043      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a24      	ldr	r2, [pc, #144]	@ (800f4d4 <LoRaMacMibGetRequestConfirm+0x3ac>)
 800f442:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800f444:	e03f      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f446:	4b22      	ldr	r3, [pc, #136]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f448:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	605a      	str	r2, [r3, #4]
            break;
 800f450:	e039      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4a1e      	ldr	r2, [pc, #120]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f456:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 800f45a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800f45c:	687c      	ldr	r4, [r7, #4]
 800f45e:	f003 f96f 	bl	8012740 <RegionGetVersion>
 800f462:	60a0      	str	r0, [r4, #8]
            break;
 800f464:	e02f      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f466:	4b1a      	ldr	r3, [pc, #104]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f468:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	605a      	str	r2, [r3, #4]
            break;
 800f470:	e029      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800f472:	4b17      	ldr	r3, [pc, #92]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f474:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	711a      	strb	r2, [r3, #4]
            break;
 800f47c:	e023      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f47e:	4b14      	ldr	r3, [pc, #80]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f480:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	809a      	strh	r2, [r3, #4]
            break;
 800f488:	e01d      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f48a:	4b11      	ldr	r3, [pc, #68]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f48c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	809a      	strh	r2, [r3, #4]
            break;
 800f494:	e017      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800f496:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f498:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	809a      	strh	r2, [r3, #4]
            break;
 800f4a0:	e011      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800f4a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f4d0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800f4a4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	809a      	strh	r2, [r3, #4]
            break;
 800f4ac:	e00b      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800f4ae:	2318      	movs	r3, #24
 800f4b0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800f4b2:	e008      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800f4b4:	2318      	movs	r3, #24
 800f4b6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800f4b8:	e005      	b.n	800f4c6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fff9 	bl	80104b2 <LoRaMacClassBMibGetRequestConfirm>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	75fb      	strb	r3, [r7, #23]
            break;
 800f4c4:	bf00      	nop
        }
    }
    return status;
 800f4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	371c      	adds	r7, #28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd90      	pop	{r4, r7, pc}
 800f4d0:	20008000 	.word	0x20008000
 800f4d4:	200085cc 	.word	0x200085cc

0800f4d8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b086      	sub	sp, #24
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d101      	bne.n	800f4ee <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e396      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f4ee:	4bbd      	ldr	r3, [pc, #756]	@ (800f7e4 <LoRaMacMibSetRequestConfirm+0x30c>)
 800f4f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f4f4:	f003 0302 	and.w	r3, r3, #2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d001      	beq.n	800f500 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e38d      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	2b41      	cmp	r3, #65	@ 0x41
 800f506:	f200 835d 	bhi.w	800fbc4 <LoRaMacMibSetRequestConfirm+0x6ec>
 800f50a:	a201      	add	r2, pc, #4	@ (adr r2, 800f510 <LoRaMacMibSetRequestConfirm+0x38>)
 800f50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f510:	0800f619 	.word	0x0800f619
 800f514:	0800f629 	.word	0x0800f629
 800f518:	0800f643 	.word	0x0800f643
 800f51c:	0800f65b 	.word	0x0800f65b
 800f520:	0800f673 	.word	0x0800f673
 800f524:	0800f67f 	.word	0x0800f67f
 800f528:	0800f68b 	.word	0x0800f68b
 800f52c:	0800f6b5 	.word	0x0800f6b5
 800f530:	0800f6db 	.word	0x0800f6db
 800f534:	0800f701 	.word	0x0800f701
 800f538:	0800f727 	.word	0x0800f727
 800f53c:	0800f74d 	.word	0x0800f74d
 800f540:	0800f773 	.word	0x0800f773
 800f544:	0800f799 	.word	0x0800f799
 800f548:	0800f7bf 	.word	0x0800f7bf
 800f54c:	0800f7ed 	.word	0x0800f7ed
 800f550:	0800f80d 	.word	0x0800f80d
 800f554:	0800fbc5 	.word	0x0800fbc5
 800f558:	0800f819 	.word	0x0800f819
 800f55c:	0800f889 	.word	0x0800f889
 800f560:	0800f8c9 	.word	0x0800f8c9
 800f564:	0800f92b 	.word	0x0800f92b
 800f568:	0800f99b 	.word	0x0800f99b
 800f56c:	0800f96b 	.word	0x0800f96b
 800f570:	0800f9cb 	.word	0x0800f9cb
 800f574:	0800f9ed 	.word	0x0800f9ed
 800f578:	0800f9f7 	.word	0x0800f9f7
 800f57c:	0800fa01 	.word	0x0800fa01
 800f580:	0800fa0b 	.word	0x0800fa0b
 800f584:	0800fa15 	.word	0x0800fa15
 800f588:	0800fbc5 	.word	0x0800fbc5
 800f58c:	0800fa1f 	.word	0x0800fa1f
 800f590:	0800fa51 	.word	0x0800fa51
 800f594:	0800fac5 	.word	0x0800fac5
 800f598:	0800fa8b 	.word	0x0800fa8b
 800f59c:	0800faf7 	.word	0x0800faf7
 800f5a0:	0800fb0d 	.word	0x0800fb0d
 800f5a4:	0800fb25 	.word	0x0800fb25
 800f5a8:	0800fb31 	.word	0x0800fb31
 800f5ac:	0800fb3d 	.word	0x0800fb3d
 800f5b0:	0800fbc5 	.word	0x0800fbc5
 800f5b4:	0800fb47 	.word	0x0800fb47
 800f5b8:	0800fbc5 	.word	0x0800fbc5
 800f5bc:	0800fbc5 	.word	0x0800fbc5
 800f5c0:	0800fbc5 	.word	0x0800fbc5
 800f5c4:	0800fbc5 	.word	0x0800fbc5
 800f5c8:	0800fbc5 	.word	0x0800fbc5
 800f5cc:	0800fbc5 	.word	0x0800fbc5
 800f5d0:	0800fbc5 	.word	0x0800fbc5
 800f5d4:	0800fbc5 	.word	0x0800fbc5
 800f5d8:	0800fbc5 	.word	0x0800fbc5
 800f5dc:	0800fbc5 	.word	0x0800fbc5
 800f5e0:	0800fbc5 	.word	0x0800fbc5
 800f5e4:	0800fbc5 	.word	0x0800fbc5
 800f5e8:	0800fbc5 	.word	0x0800fbc5
 800f5ec:	0800fbc5 	.word	0x0800fbc5
 800f5f0:	0800fbc5 	.word	0x0800fbc5
 800f5f4:	0800fbc5 	.word	0x0800fbc5
 800f5f8:	0800fb71 	.word	0x0800fb71
 800f5fc:	0800fb7d 	.word	0x0800fb7d
 800f600:	0800fb89 	.word	0x0800fb89
 800f604:	0800fb95 	.word	0x0800fb95
 800f608:	0800fba1 	.word	0x0800fba1
 800f60c:	0800fbad 	.word	0x0800fbad
 800f610:	0800fbb9 	.word	0x0800fbb9
 800f614:	0800fbbf 	.word	0x0800fbbf
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	791b      	ldrb	r3, [r3, #4]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fd fb0f 	bl	800cc40 <SwitchClass>
 800f622:	4603      	mov	r3, r0
 800f624:	75fb      	strb	r3, [r7, #23]
            break;
 800f626:	e2ee      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	791b      	ldrb	r3, [r3, #4]
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d005      	beq.n	800f63c <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	791a      	ldrb	r2, [r3, #4]
 800f634:	4b6c      	ldr	r3, [pc, #432]	@ (800f7e8 <LoRaMacMibSetRequestConfirm+0x310>)
 800f636:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f63a:	e2e4      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f63c:	2303      	movs	r3, #3
 800f63e:	75fb      	strb	r3, [r7, #23]
            break;
 800f640:	e2e1      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	f008 f828 	bl	801769c <SecureElementSetDevEui>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f000 82be 	beq.w	800fbd0 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f654:	2303      	movs	r3, #3
 800f656:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f658:	e2ba      	b.n	800fbd0 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	4618      	mov	r0, r3
 800f660:	f008 f84c 	bl	80176fc <SecureElementSetJoinEui>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	f000 82b4 	beq.w	800fbd4 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f66c:	2303      	movs	r3, #3
 800f66e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f670:	e2b0      	b.n	800fbd4 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	791a      	ldrb	r2, [r3, #4]
 800f676:	4b5c      	ldr	r3, [pc, #368]	@ (800f7e8 <LoRaMacMibSetRequestConfirm+0x310>)
 800f678:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 800f67c:	e2c3      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	4a59      	ldr	r2, [pc, #356]	@ (800f7e8 <LoRaMacMibSetRequestConfirm+0x310>)
 800f684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 800f688:	e2bd      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800f68a:	4b57      	ldr	r3, [pc, #348]	@ (800f7e8 <LoRaMacMibSetRequestConfirm+0x310>)
 800f68c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	4619      	mov	r1, r3
 800f696:	4610      	mov	r0, r2
 800f698:	f008 f848 	bl	801772c <SecureElementSetDevAddr>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d002      	beq.n	800f6a8 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6a2:	2303      	movs	r3, #3
 800f6a4:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 800f6a6:	e2ae      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	4a4e      	ldr	r2, [pc, #312]	@ (800f7e8 <LoRaMacMibSetRequestConfirm+0x310>)
 800f6ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 800f6b2:	e2a8      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00b      	beq.n	800f6d4 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	f002 f83e 	bl	8011744 <LoRaMacCryptoSetKey>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f000 8284 	beq.w	800fbd8 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f6d0:	2311      	movs	r3, #17
 800f6d2:	e2a3      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6d4:	2303      	movs	r3, #3
 800f6d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f6d8:	e27e      	b.n	800fbd8 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00b      	beq.n	800f6fa <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	2001      	movs	r0, #1
 800f6ea:	f002 f82b 	bl	8011744 <LoRaMacCryptoSetKey>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f000 8273 	beq.w	800fbdc <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f6f6:	2311      	movs	r3, #17
 800f6f8:	e290      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6fa:	2303      	movs	r3, #3
 800f6fc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f6fe:	e26d      	b.n	800fbdc <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00b      	beq.n	800f720 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	4619      	mov	r1, r3
 800f70e:	2008      	movs	r0, #8
 800f710:	f002 f818 	bl	8011744 <LoRaMacCryptoSetKey>
 800f714:	4603      	mov	r3, r0
 800f716:	2b00      	cmp	r3, #0
 800f718:	f000 8262 	beq.w	800fbe0 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f71c:	2311      	movs	r3, #17
 800f71e:	e27d      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f720:	2303      	movs	r3, #3
 800f722:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f724:	e25c      	b.n	800fbe0 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00b      	beq.n	800f746 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	4619      	mov	r1, r3
 800f734:	2009      	movs	r0, #9
 800f736:	f002 f805 	bl	8011744 <LoRaMacCryptoSetKey>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 8251 	beq.w	800fbe4 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f742:	2311      	movs	r3, #17
 800f744:	e26a      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f746:	2303      	movs	r3, #3
 800f748:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f74a:	e24b      	b.n	800fbe4 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00b      	beq.n	800f76c <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	4619      	mov	r1, r3
 800f75a:	200c      	movs	r0, #12
 800f75c:	f001 fff2 	bl	8011744 <LoRaMacCryptoSetKey>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 8240 	beq.w	800fbe8 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f768:	2311      	movs	r3, #17
 800f76a:	e257      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f76c:	2303      	movs	r3, #3
 800f76e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f770:	e23a      	b.n	800fbe8 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00b      	beq.n	800f792 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	4619      	mov	r1, r3
 800f780:	200d      	movs	r0, #13
 800f782:	f001 ffdf 	bl	8011744 <LoRaMacCryptoSetKey>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f000 822f 	beq.w	800fbec <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f78e:	2311      	movs	r3, #17
 800f790:	e244      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f792:	2303      	movs	r3, #3
 800f794:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f796:	e229      	b.n	800fbec <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00b      	beq.n	800f7b8 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	200e      	movs	r0, #14
 800f7a8:	f001 ffcc 	bl	8011744 <LoRaMacCryptoSetKey>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 821e 	beq.w	800fbf0 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f7b4:	2311      	movs	r3, #17
 800f7b6:	e231      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f7b8:	2303      	movs	r3, #3
 800f7ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f7bc:	e218      	b.n	800fbf0 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d00b      	beq.n	800f7de <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	200f      	movs	r0, #15
 800f7ce:	f001 ffb9 	bl	8011744 <LoRaMacCryptoSetKey>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f000 820d 	beq.w	800fbf4 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f7da:	2311      	movs	r3, #17
 800f7dc:	e21e      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f7de:	2303      	movs	r3, #3
 800f7e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f7e2:	e207      	b.n	800fbf4 <LoRaMacMibSetRequestConfirm+0x71c>
 800f7e4:	20000a28 	.word	0x20000a28
 800f7e8:	20008000 	.word	0x20008000
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	791a      	ldrb	r2, [r3, #4]
 800f7f0:	4bb2      	ldr	r3, [pc, #712]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f7f2:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800f7f6:	4bb2      	ldr	r3, [pc, #712]	@ (800fac0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800f7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7fa:	4ab0      	ldr	r2, [pc, #704]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f7fc:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800f800:	4610      	mov	r0, r2
 800f802:	4798      	blx	r3
            Radio.Sleep( );
 800f804:	4bae      	ldr	r3, [pc, #696]	@ (800fac0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800f806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f808:	4798      	blx	r3
            break;
 800f80a:	e1fc      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	791a      	ldrb	r2, [r3, #4]
 800f810:	4baa      	ldr	r3, [pc, #680]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f812:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 800f816:	e1f6      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	7a1b      	ldrb	r3, [r3, #8]
 800f81c:	b25b      	sxtb	r3, r3
 800f81e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f820:	4ba6      	ldr	r3, [pc, #664]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f822:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f826:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800f828:	4ba4      	ldr	r3, [pc, #656]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f82a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f82e:	f107 0108 	add.w	r1, r7, #8
 800f832:	2207      	movs	r2, #7
 800f834:	4618      	mov	r0, r3
 800f836:	f002 fdc4 	bl	80123c2 <RegionVerify>
 800f83a:	4603      	mov	r3, r0
 800f83c:	f083 0301 	eor.w	r3, r3, #1
 800f840:	b2db      	uxtb	r3, r3
 800f842:	2b00      	cmp	r3, #0
 800f844:	d002      	beq.n	800f84c <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f846:	2303      	movs	r3, #3
 800f848:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 800f84a:	e1dc      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800f852:	4b9a      	ldr	r3, [pc, #616]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f854:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f858:	f107 0108 	add.w	r1, r7, #8
 800f85c:	2200      	movs	r2, #0
 800f85e:	4618      	mov	r0, r3
 800f860:	f002 fdaf 	bl	80123c2 <RegionVerify>
 800f864:	4603      	mov	r3, r0
 800f866:	f083 0301 	eor.w	r3, r3, #1
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f870:	2303      	movs	r3, #3
 800f872:	75fb      	strb	r3, [r7, #23]
            break;
 800f874:	e1c7      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800f876:	4b91      	ldr	r3, [pc, #580]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	336c      	adds	r3, #108	@ 0x6c
 800f87c:	3204      	adds	r2, #4
 800f87e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f882:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f886:	e1be      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	7a1b      	ldrb	r3, [r3, #8]
 800f88c:	b25b      	sxtb	r3, r3
 800f88e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f890:	4b8a      	ldr	r3, [pc, #552]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f892:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f896:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f898:	4b88      	ldr	r3, [pc, #544]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f89a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f89e:	f107 0108 	add.w	r1, r7, #8
 800f8a2:	2207      	movs	r2, #7
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f002 fd8c 	bl	80123c2 <RegionVerify>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d008      	beq.n	800f8c2 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800f8b0:	4b82      	ldr	r3, [pc, #520]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	33b4      	adds	r3, #180	@ 0xb4
 800f8b6:	3204      	adds	r2, #4
 800f8b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8bc:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f8c0:	e1a1      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	75fb      	strb	r3, [r7, #23]
            break;
 800f8c6:	e19e      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	7a1b      	ldrb	r3, [r3, #8]
 800f8cc:	b25b      	sxtb	r3, r3
 800f8ce:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f8d0:	4b7a      	ldr	r3, [pc, #488]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8d2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f8d6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f8d8:	4b78      	ldr	r3, [pc, #480]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8da:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f8de:	f107 0108 	add.w	r1, r7, #8
 800f8e2:	2207      	movs	r2, #7
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f002 fd6c 	bl	80123c2 <RegionVerify>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d019      	beq.n	800f924 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800f8f0:	4b72      	ldr	r3, [pc, #456]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	3374      	adds	r3, #116	@ 0x74
 800f8f6:	3204      	adds	r2, #4
 800f8f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8fc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800f900:	4b6e      	ldr	r3, [pc, #440]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f902:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f906:	2b02      	cmp	r3, #2
 800f908:	f040 8176 	bne.w	800fbf8 <LoRaMacMibSetRequestConfirm+0x720>
 800f90c:	4b6b      	ldr	r3, [pc, #428]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f90e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f912:	2b00      	cmp	r3, #0
 800f914:	f000 8170 	beq.w	800fbf8 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800f918:	4b69      	ldr	r3, [pc, #420]	@ (800fac0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800f91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f91c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800f91e:	f7fe fc7d 	bl	800e21c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f922:	e169      	b.n	800fbf8 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f924:	2303      	movs	r3, #3
 800f926:	75fb      	strb	r3, [r7, #23]
            break;
 800f928:	e166      	b.n	800fbf8 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	7a1b      	ldrb	r3, [r3, #8]
 800f92e:	b25b      	sxtb	r3, r3
 800f930:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f932:	4b62      	ldr	r3, [pc, #392]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f934:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f938:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f93a:	4b60      	ldr	r3, [pc, #384]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f93c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f940:	f107 0108 	add.w	r1, r7, #8
 800f944:	2207      	movs	r2, #7
 800f946:	4618      	mov	r0, r3
 800f948:	f002 fd3b 	bl	80123c2 <RegionVerify>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d008      	beq.n	800f964 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800f952:	4b5a      	ldr	r3, [pc, #360]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	33bc      	adds	r3, #188	@ 0xbc
 800f958:	3204      	adds	r2, #4
 800f95a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f95e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f962:	e150      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f964:	2303      	movs	r3, #3
 800f966:	75fb      	strb	r3, [r7, #23]
            break;
 800f968:	e14d      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800f970:	2301      	movs	r3, #1
 800f972:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800f974:	4b51      	ldr	r3, [pc, #324]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f976:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f97a:	f107 020c 	add.w	r2, r7, #12
 800f97e:	4611      	mov	r1, r2
 800f980:	4618      	mov	r0, r3
 800f982:	f002 fd56 	bl	8012432 <RegionChanMaskSet>
 800f986:	4603      	mov	r3, r0
 800f988:	f083 0301 	eor.w	r3, r3, #1
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 8134 	beq.w	800fbfc <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f994:	2303      	movs	r3, #3
 800f996:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f998:	e130      	b.n	800fbfc <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800f9a4:	4b45      	ldr	r3, [pc, #276]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f9a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f9aa:	f107 020c 	add.w	r2, r7, #12
 800f9ae:	4611      	mov	r1, r2
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f002 fd3e 	bl	8012432 <RegionChanMaskSet>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	f083 0301 	eor.w	r3, r3, #1
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f000 811e 	beq.w	800fc00 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f9c8:	e11a      	b.n	800fc00 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	791b      	ldrb	r3, [r3, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d009      	beq.n	800f9e6 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f9d6:	2b0f      	cmp	r3, #15
 800f9d8:	d805      	bhi.n	800f9e6 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	791a      	ldrb	r2, [r3, #4]
 800f9de:	4b37      	ldr	r3, [pc, #220]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f9e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f9e4:	e10f      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	75fb      	strb	r3, [r7, #23]
            break;
 800f9ea:	e10c      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	4a32      	ldr	r2, [pc, #200]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f9f2:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 800f9f4:	e107      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	4a30      	ldr	r2, [pc, #192]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f9fc:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 800f9fe:	e102      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	4a2d      	ldr	r2, [pc, #180]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa06:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 800fa08:	e0fd      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	4a2b      	ldr	r2, [pc, #172]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa10:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 800fa12:	e0f8      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	4a28      	ldr	r2, [pc, #160]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa1a:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 800fa1c:	e0f3      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa24:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800fa26:	4b25      	ldr	r3, [pc, #148]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa28:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fa2c:	f107 0108 	add.w	r1, r7, #8
 800fa30:	2206      	movs	r2, #6
 800fa32:	4618      	mov	r0, r3
 800fa34:	f002 fcc5 	bl	80123c2 <RegionVerify>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d005      	beq.n	800fa4a <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800fa3e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fa42:	4b1e      	ldr	r3, [pc, #120]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa44:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fa48:	e0dd      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	75fb      	strb	r3, [r7, #23]
            break;
 800fa4e:	e0da      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa56:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa58:	4b18      	ldr	r3, [pc, #96]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa5a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fa5e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800fa60:	4b16      	ldr	r3, [pc, #88]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fa66:	f107 0108 	add.w	r1, r7, #8
 800fa6a:	2205      	movs	r2, #5
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f002 fca8 	bl	80123c2 <RegionVerify>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d005      	beq.n	800fa84 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800fa78:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fa7c:	4b0f      	ldr	r3, [pc, #60]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fa82:	e0c0      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa84:	2303      	movs	r3, #3
 800fa86:	75fb      	strb	r3, [r7, #23]
            break;
 800fa88:	e0bd      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa90:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800fa92:	4b0a      	ldr	r3, [pc, #40]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fa94:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fa98:	f107 0108 	add.w	r1, r7, #8
 800fa9c:	220a      	movs	r2, #10
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f002 fc8f 	bl	80123c2 <RegionVerify>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d005      	beq.n	800fab6 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800faaa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800faae:	4b03      	ldr	r3, [pc, #12]	@ (800fabc <LoRaMacMibSetRequestConfirm+0x5e4>)
 800fab0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fab4:	e0a7      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fab6:	2303      	movs	r3, #3
 800fab8:	75fb      	strb	r3, [r7, #23]
            break;
 800faba:	e0a4      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
 800fabc:	20008000 	.word	0x20008000
 800fac0:	08021f8c 	.word	0x08021f8c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800faca:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800facc:	4b55      	ldr	r3, [pc, #340]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800face:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fad2:	f107 0108 	add.w	r1, r7, #8
 800fad6:	2209      	movs	r2, #9
 800fad8:	4618      	mov	r0, r3
 800fada:	f002 fc72 	bl	80123c2 <RegionVerify>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d005      	beq.n	800faf0 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800fae4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800fae8:	4b4e      	ldr	r3, [pc, #312]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800faea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800faee:	e08a      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800faf0:	2303      	movs	r3, #3
 800faf2:	75fb      	strb	r3, [r7, #23]
            break;
 800faf4:	e087      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	4a4a      	ldr	r2, [pc, #296]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fafc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800fb00:	4b48      	ldr	r3, [pc, #288]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fb06:	4a47      	ldr	r2, [pc, #284]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb08:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 800fb0a:	e07c      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	791a      	ldrb	r2, [r3, #4]
 800fb10:	4b44      	ldr	r3, [pc, #272]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb12:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800fb16:	4b43      	ldr	r3, [pc, #268]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb18:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800fb1c:	4b41      	ldr	r3, [pc, #260]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 800fb22:	e070      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	4a3e      	ldr	r2, [pc, #248]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 800fb2e:	e06a      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	4a3b      	ldr	r2, [pc, #236]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb36:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 800fb3a:	e064      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800fb3c:	f7fe fda0 	bl	800e680 <RestoreNvmData>
 800fb40:	4603      	mov	r3, r0
 800fb42:	75fb      	strb	r3, [r7, #23]
            break;
 800fb44:	e05f      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	799b      	ldrb	r3, [r3, #6]
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d80d      	bhi.n	800fb6a <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800fb4e:	4a35      	ldr	r2, [pc, #212]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6858      	ldr	r0, [r3, #4]
 800fb5c:	f001 fd54 	bl	8011608 <LoRaMacCryptoSetLrWanVersion>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d04e      	beq.n	800fc04 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb66:	2311      	movs	r3, #17
 800fb68:	e058      	b.n	800fc1c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fb6e:	e049      	b.n	800fc04 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	4a2b      	ldr	r2, [pc, #172]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 800fb7a:	e044      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	791a      	ldrb	r2, [r3, #4]
 800fb80:	4b28      	ldr	r3, [pc, #160]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb82:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 800fb86:	e03e      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	889a      	ldrh	r2, [r3, #4]
 800fb8c:	4b25      	ldr	r3, [pc, #148]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb8e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 800fb92:	e038      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	889a      	ldrh	r2, [r3, #4]
 800fb98:	4b22      	ldr	r3, [pc, #136]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fb9a:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 800fb9e:	e032      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	889a      	ldrh	r2, [r3, #4]
 800fba4:	4b1f      	ldr	r3, [pc, #124]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fba6:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 800fbaa:	e02c      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	889a      	ldrh	r2, [r3, #4]
 800fbb0:	4b1c      	ldr	r3, [pc, #112]	@ (800fc24 <LoRaMacMibSetRequestConfirm+0x74c>)
 800fbb2:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 800fbb6:	e026      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800fbb8:	2318      	movs	r3, #24
 800fbba:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800fbbc:	e023      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800fbbe:	2318      	movs	r3, #24
 800fbc0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800fbc2:	e020      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 fc7e 	bl	80104c6 <LoRaMacMibClassBSetRequestConfirm>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	75fb      	strb	r3, [r7, #23]
            break;
 800fbce:	e01a      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbd0:	bf00      	nop
 800fbd2:	e018      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbd4:	bf00      	nop
 800fbd6:	e016      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbd8:	bf00      	nop
 800fbda:	e014      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbdc:	bf00      	nop
 800fbde:	e012      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbe0:	bf00      	nop
 800fbe2:	e010      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbe4:	bf00      	nop
 800fbe6:	e00e      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbe8:	bf00      	nop
 800fbea:	e00c      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbec:	bf00      	nop
 800fbee:	e00a      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbf0:	bf00      	nop
 800fbf2:	e008      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbf4:	bf00      	nop
 800fbf6:	e006      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbf8:	bf00      	nop
 800fbfa:	e004      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fbfc:	bf00      	nop
 800fbfe:	e002      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc00:	bf00      	nop
 800fc02:	e000      	b.n	800fc06 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800fc04:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800fc06:	7dfb      	ldrb	r3, [r7, #23]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d106      	bne.n	800fc1a <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fc0c:	4a06      	ldr	r2, [pc, #24]	@ (800fc28 <LoRaMacMibSetRequestConfirm+0x750>)
 800fc0e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fc12:	f043 0320 	orr.w	r3, r3, #32
 800fc16:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 800fc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3718      	adds	r7, #24
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20008000 	.word	0x20008000
 800fc28:	20000a28 	.word	0x20000a28

0800fc2c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b08a      	sub	sp, #40	@ 0x28
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fc34:	2302      	movs	r3, #2
 800fc36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d101      	bne.n	800fc48 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fc44:	2303      	movs	r3, #3
 800fc46:	e17e      	b.n	800ff46 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800fc4e:	f7fc fbd9 	bl	800c404 <LoRaMacIsBusy>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e174      	b.n	800ff46 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800fc5c:	f001 f96e 	bl	8010f3c <LoRaMacConfirmQueueIsFull>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e16d      	b.n	800ff46 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800fc6a:	f001 f95b 	bl	8010f24 <LoRaMacConfirmQueueGetCnt>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d104      	bne.n	800fc7e <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800fc74:	2214      	movs	r2, #20
 800fc76:	2100      	movs	r1, #0
 800fc78:	48b5      	ldr	r0, [pc, #724]	@ (800ff50 <LoRaMacMlmeRequest+0x324>)
 800fc7a:	f007 fe2d 	bl	80178d8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc7e:	4bb5      	ldr	r3, [pc, #724]	@ (800ff54 <LoRaMacMlmeRequest+0x328>)
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800fc86:	4ab3      	ldr	r2, [pc, #716]	@ (800ff54 <LoRaMacMlmeRequest+0x328>)
 800fc88:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fc8c:	f043 0304 	orr.w	r3, r3, #4
 800fc90:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 800fca2:	2300      	movs	r3, #0
 800fca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	2b0c      	cmp	r3, #12
 800fcb6:	f200 811a 	bhi.w	800feee <LoRaMacMlmeRequest+0x2c2>
 800fcba:	a201      	add	r2, pc, #4	@ (adr r2, 800fcc0 <LoRaMacMlmeRequest+0x94>)
 800fcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc0:	0800fcf5 	.word	0x0800fcf5
 800fcc4:	0800feef 	.word	0x0800feef
 800fcc8:	0800feef 	.word	0x0800feef
 800fccc:	0800feef 	.word	0x0800feef
 800fcd0:	0800fdd3 	.word	0x0800fdd3
 800fcd4:	0800fdf7 	.word	0x0800fdf7
 800fcd8:	0800feef 	.word	0x0800feef
 800fcdc:	0800feef 	.word	0x0800feef
 800fce0:	0800fe15 	.word	0x0800fe15
 800fce4:	0800feef 	.word	0x0800feef
 800fce8:	0800febd 	.word	0x0800febd
 800fcec:	0800fe51 	.word	0x0800fe51
 800fcf0:	0800fe9b 	.word	0x0800fe9b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800fcf4:	4b97      	ldr	r3, [pc, #604]	@ (800ff54 <LoRaMacMlmeRequest+0x328>)
 800fcf6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fcfa:	f003 0320 	and.w	r3, r3, #32
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 800fd02:	2301      	movs	r3, #1
 800fd04:	e11f      	b.n	800ff46 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	791b      	ldrb	r3, [r3, #4]
 800fd0a:	2b02      	cmp	r3, #2
 800fd0c:	d135      	bne.n	800fd7a <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 800fd0e:	2000      	movs	r0, #0
 800fd10:	f7fe f916 	bl	800df40 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800fd14:	4b90      	ldr	r3, [pc, #576]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fd16:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	795b      	ldrb	r3, [r3, #5]
 800fd1e:	b25b      	sxtb	r3, r3
 800fd20:	2200      	movs	r2, #0
 800fd22:	4619      	mov	r1, r3
 800fd24:	f002 fc95 	bl	8012652 <RegionAlternateDr>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	4b8a      	ldr	r3, [pc, #552]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fd2e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800fd38:	4b87      	ldr	r3, [pc, #540]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fd3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800fd3e:	2307      	movs	r3, #7
 800fd40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 800fd44:	20ff      	movs	r0, #255	@ 0xff
 800fd46:	f7fd fe7f 	bl	800da48 <SendReJoinReq>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 800fd50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f000 80cc 	beq.w	800fef2 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800fd5a:	4b7f      	ldr	r3, [pc, #508]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fd5c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	795b      	ldrb	r3, [r3, #5]
 800fd64:	b25b      	sxtb	r3, r3
 800fd66:	2201      	movs	r2, #1
 800fd68:	4619      	mov	r1, r3
 800fd6a:	f002 fc72 	bl	8012652 <RegionAlternateDr>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	461a      	mov	r2, r3
 800fd72:	4b79      	ldr	r3, [pc, #484]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fd74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 800fd78:	e0bb      	b.n	800fef2 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	791b      	ldrb	r3, [r3, #4]
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	f040 80b7 	bne.w	800fef2 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800fd84:	4b74      	ldr	r3, [pc, #464]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800fd8c:	2302      	movs	r3, #2
 800fd8e:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fd90:	4b71      	ldr	r3, [pc, #452]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fd92:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fd96:	f107 020c 	add.w	r2, r7, #12
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f002 faf9 	bl	8012394 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	791a      	ldrb	r2, [r3, #4]
 800fda6:	4b6c      	ldr	r3, [pc, #432]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fda8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fdac:	2300      	movs	r3, #0
 800fdae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 800fdb8:	f7fe fe12 	bl	800e9e0 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fdbc:	4a65      	ldr	r2, [pc, #404]	@ (800ff54 <LoRaMacMlmeRequest+0x328>)
 800fdbe:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fdc2:	f043 0310 	orr.w	r3, r3, #16
 800fdc6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800fdd0:	e08f      	b.n	800fef2 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fdd8:	f107 031c 	add.w	r3, r7, #28
 800fddc:	2200      	movs	r2, #0
 800fdde:	4619      	mov	r1, r3
 800fde0:	2002      	movs	r0, #2
 800fde2:	f000 fcfb 	bl	80107dc <LoRaMacCommandsAddCmd>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 8084 	beq.w	800fef6 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fdee:	2313      	movs	r3, #19
 800fdf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800fdf4:	e07f      	b.n	800fef6 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8898      	ldrh	r0, [r3, #4]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6899      	ldr	r1, [r3, #8]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fe04:	b2db      	uxtb	r3, r3
 800fe06:	461a      	mov	r2, r3
 800fe08:	f7fe fc1a 	bl	800e640 <SetTxContinuousWave>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800fe12:	e077      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800fe1a:	f107 0308 	add.w	r3, r7, #8
 800fe1e:	4619      	mov	r1, r3
 800fe20:	200d      	movs	r0, #13
 800fe22:	f000 fd5b 	bl	80108dc <LoRaMacCommandsGetCmd>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d103      	bne.n	800fe34 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 800fe32:	e062      	b.n	800fefa <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fe34:	f107 031c 	add.w	r3, r7, #28
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	200d      	movs	r0, #13
 800fe3e:	f000 fccd 	bl	80107dc <LoRaMacCommandsAddCmd>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d058      	beq.n	800fefa <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe48:	2313      	movs	r3, #19
 800fe4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800fe4e:	e054      	b.n	800fefa <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800fe50:	4b41      	ldr	r3, [pc, #260]	@ (800ff58 <LoRaMacMlmeRequest+0x32c>)
 800fe52:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d151      	bne.n	800fefe <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	791b      	ldrb	r3, [r3, #4]
 800fe5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	791b      	ldrb	r3, [r3, #4]
 800fe66:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f000 faff 	bl	8010470 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800fe72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe76:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800fe7e:	f107 031c 	add.w	r3, r7, #28
 800fe82:	2201      	movs	r2, #1
 800fe84:	4619      	mov	r1, r3
 800fe86:	2010      	movs	r0, #16
 800fe88:	f000 fca8 	bl	80107dc <LoRaMacCommandsAddCmd>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d035      	beq.n	800fefe <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe92:	2313      	movs	r3, #19
 800fe94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 800fe98:	e031      	b.n	800fefe <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800fea0:	f107 031c 	add.w	r3, r7, #28
 800fea4:	2200      	movs	r2, #0
 800fea6:	4619      	mov	r1, r3
 800fea8:	2012      	movs	r0, #18
 800feaa:	f000 fc97 	bl	80107dc <LoRaMacCommandsAddCmd>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d026      	beq.n	800ff02 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800feb4:	2313      	movs	r3, #19
 800feb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800feba:	e022      	b.n	800ff02 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800febc:	2301      	movs	r3, #1
 800febe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800fec2:	f000 fa8b 	bl	80103dc <LoRaMacClassBIsAcquisitionInProgress>
 800fec6:	4603      	mov	r3, r0
 800fec8:	f083 0301 	eor.w	r3, r3, #1
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d009      	beq.n	800fee6 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800fed2:	2000      	movs	r0, #0
 800fed4:	f000 fa64 	bl	80103a0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800fed8:	2000      	movs	r0, #0
 800feda:	f000 fa86 	bl	80103ea <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800fede:	2300      	movs	r3, #0
 800fee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800fee4:	e00e      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 800fee6:	2301      	movs	r3, #1
 800fee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800feec:	e00a      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 800feee:	bf00      	nop
 800fef0:	e008      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
            break;
 800fef2:	bf00      	nop
 800fef4:	e006      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
            break;
 800fef6:	bf00      	nop
 800fef8:	e004      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
            break;
 800fefa:	bf00      	nop
 800fefc:	e002      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
            break;
 800fefe:	bf00      	nop
 800ff00:	e000      	b.n	800ff04 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ff02:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ff04:	4b13      	ldr	r3, [pc, #76]	@ (800ff54 <LoRaMacMlmeRequest+0x328>)
 800ff06:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800ff0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d010      	beq.n	800ff38 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ff16:	f001 f805 	bl	8010f24 <LoRaMacConfirmQueueGetCnt>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d110      	bne.n	800ff42 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 800ff20:	4b0c      	ldr	r3, [pc, #48]	@ (800ff54 <LoRaMacMlmeRequest+0x328>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ff28:	4a0a      	ldr	r2, [pc, #40]	@ (800ff54 <LoRaMacMlmeRequest+0x328>)
 800ff2a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ff2e:	f023 0304 	bic.w	r3, r3, #4
 800ff32:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800ff36:	e004      	b.n	800ff42 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800ff38:	f107 0320 	add.w	r3, r7, #32
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f000 fe9d 	bl	8010c7c <LoRaMacConfirmQueueAdd>
    }
    return status;
 800ff42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3728      	adds	r7, #40	@ 0x28
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20000e7c 	.word	0x20000e7c
 800ff54:	20000a28 	.word	0x20000a28
 800ff58:	20008000 	.word	0x20008000

0800ff5c <LoRaMacMcpsRequest>:
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800ff5c:	b5b0      	push	{r4, r5, r7, lr}
 800ff5e:	b092      	sub	sp, #72	@ 0x48
 800ff60:	af02      	add	r7, sp, #8
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	460b      	mov	r3, r1
 800ff66:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ff68:	2302      	movs	r3, #2
 800ff6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 800ff74:	2300      	movs	r3, #0
 800ff76:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d101      	bne.n	800ff8e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff8a:	2303      	movs	r3, #3
 800ff8c:	e113      	b.n	80101b6 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 800ff94:	f7fc fa36 	bl	800c404 <LoRaMacIsBusy>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d001      	beq.n	800ffa2 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e109      	b.n	80101b6 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f107 040c 	add.w	r4, r7, #12
 800ffa8:	461d      	mov	r5, r3
 800ffaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffae:	682b      	ldr	r3, [r5, #0]
 800ffb0:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ffb8:	2214      	movs	r2, #20
 800ffba:	2100      	movs	r1, #0
 800ffbc:	4880      	ldr	r0, [pc, #512]	@ (80101c0 <LoRaMacMcpsRequest+0x264>)
 800ffbe:	f007 fc8b 	bl	80178d8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ffc2:	4b80      	ldr	r3, [pc, #512]	@ (80101c4 <LoRaMacMcpsRequest+0x268>)
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ffca:	4b7f      	ldr	r3, [pc, #508]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 800ffcc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d111      	bne.n	800fff8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ffd4:	4b7c      	ldr	r3, [pc, #496]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 800ffd6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d10c      	bne.n	800fff8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ffde:	4b7a      	ldr	r3, [pc, #488]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 800ffe0:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 800ffe4:	f083 0301 	eor.w	r3, r3, #1
 800ffe8:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d004      	beq.n	800fff8 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800ffee:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 800fff4:	2301      	movs	r3, #1
 800fff6:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 800fff8:	7b3b      	ldrb	r3, [r7, #12]
 800fffa:	2b03      	cmp	r3, #3
 800fffc:	d030      	beq.n	8010060 <LoRaMacMcpsRequest+0x104>
 800fffe:	2b03      	cmp	r3, #3
 8010000:	dc3f      	bgt.n	8010082 <LoRaMacMcpsRequest+0x126>
 8010002:	2b00      	cmp	r3, #0
 8010004:	d002      	beq.n	801000c <LoRaMacMcpsRequest+0xb0>
 8010006:	2b01      	cmp	r3, #1
 8010008:	d015      	beq.n	8010036 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801000a:	e03a      	b.n	8010082 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 801000c:	2301      	movs	r3, #1
 801000e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8010012:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010016:	2202      	movs	r2, #2
 8010018:	f362 1347 	bfi	r3, r2, #5, #3
 801001c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8010020:	7c3b      	ldrb	r3, [r7, #16]
 8010022:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801002a:	8b3b      	ldrh	r3, [r7, #24]
 801002c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801002e:	7ebb      	ldrb	r3, [r7, #26]
 8010030:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8010034:	e026      	b.n	8010084 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8010036:	2301      	movs	r3, #1
 8010038:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801003c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010040:	2204      	movs	r2, #4
 8010042:	f362 1347 	bfi	r3, r2, #5, #3
 8010046:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 801004a:	7c3b      	ldrb	r3, [r7, #16]
 801004c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8010054:	8b3b      	ldrh	r3, [r7, #24]
 8010056:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8010058:	7ebb      	ldrb	r3, [r7, #26]
 801005a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801005e:	e011      	b.n	8010084 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8010060:	2301      	movs	r3, #1
 8010062:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8010066:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801006a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 801006e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8010076:	8abb      	ldrh	r3, [r7, #20]
 8010078:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 801007a:	7dbb      	ldrb	r3, [r7, #22]
 801007c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8010080:	e000      	b.n	8010084 <LoRaMacMcpsRequest+0x128>
            break;
 8010082:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010084:	2302      	movs	r3, #2
 8010086:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801008a:	4b4f      	ldr	r3, [pc, #316]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 801008c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010090:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010094:	4b4c      	ldr	r3, [pc, #304]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 8010096:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801009a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f002 f940 	bl	8012326 <RegionGetPhyParam>
 80100a6:	4603      	mov	r3, r0
 80100a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80100aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ac:	b25b      	sxtb	r3, r3
 80100ae:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80100b2:	4293      	cmp	r3, r2
 80100b4:	bfb8      	it	lt
 80100b6:	4613      	movlt	r3, r2
 80100b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80100bc:	4b42      	ldr	r3, [pc, #264]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 80100be:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80100c2:	4a41      	ldr	r2, [pc, #260]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 80100c4:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 80100c8:	4a3f      	ldr	r2, [pc, #252]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 80100ca:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fc fb34 	bl	800c73c <CheckForMinimumAbpDatarate>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d002      	beq.n	80100e0 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80100da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 80100e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d05f      	beq.n	80101a8 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80100e8:	4b37      	ldr	r3, [pc, #220]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 80100ea:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80100ee:	f083 0301 	eor.w	r3, r3, #1
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d10e      	bne.n	8010116 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80100f8:	4b33      	ldr	r3, [pc, #204]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 80100fa:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80100fe:	4a32      	ldr	r2, [pc, #200]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 8010100:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8010104:	4a30      	ldr	r2, [pc, #192]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 8010106:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801010a:	4618      	mov	r0, r3
 801010c:	f7fc fb16 	bl	800c73c <CheckForMinimumAbpDatarate>
 8010110:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8010112:	2b00      	cmp	r3, #0
 8010114:	d01c      	beq.n	8010150 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8010116:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801011a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801011e:	4b2a      	ldr	r3, [pc, #168]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 8010120:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010128:	4b27      	ldr	r3, [pc, #156]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 801012a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801012e:	f107 0120 	add.w	r1, r7, #32
 8010132:	2205      	movs	r2, #5
 8010134:	4618      	mov	r0, r3
 8010136:	f002 f944 	bl	80123c2 <RegionVerify>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d005      	beq.n	801014c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010140:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8010144:	4b20      	ldr	r3, [pc, #128]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 8010146:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801014a:	e001      	b.n	8010150 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801014c:	2303      	movs	r3, #3
 801014e:	e032      	b.n	80101b6 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010150:	4b1d      	ldr	r3, [pc, #116]	@ (80101c8 <LoRaMacMcpsRequest+0x26c>)
 8010152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010156:	4a1b      	ldr	r2, [pc, #108]	@ (80101c4 <LoRaMacMcpsRequest+0x268>)
 8010158:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 801015c:	4611      	mov	r1, r2
 801015e:	4618      	mov	r0, r3
 8010160:	f7fc fbd8 	bl	800c914 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8010164:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010166:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 801016a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801016e:	78fb      	ldrb	r3, [r7, #3]
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	4613      	mov	r3, r2
 8010174:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010176:	f7fd fb85 	bl	800d884 <Send>
 801017a:	4603      	mov	r3, r0
 801017c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( status == LORAMAC_STATUS_OK )
 8010180:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10b      	bne.n	80101a0 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8010188:	7b3a      	ldrb	r2, [r7, #12]
 801018a:	4b0e      	ldr	r3, [pc, #56]	@ (80101c4 <LoRaMacMcpsRequest+0x268>)
 801018c:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8010190:	4a0c      	ldr	r2, [pc, #48]	@ (80101c4 <LoRaMacMcpsRequest+0x268>)
 8010192:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010196:	f043 0301 	orr.w	r3, r3, #1
 801019a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 801019e:	e003      	b.n	80101a8 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80101a0:	4b08      	ldr	r3, [pc, #32]	@ (80101c4 <LoRaMacMcpsRequest+0x268>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

     // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80101a8:	4b06      	ldr	r3, [pc, #24]	@ (80101c4 <LoRaMacMcpsRequest+0x268>)
 80101aa:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	611a      	str	r2, [r3, #16]

    return status;
 80101b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3740      	adds	r7, #64	@ 0x40
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bdb0      	pop	{r4, r5, r7, pc}
 80101be:	bf00      	nop
 80101c0:	20000e68 	.word	0x20000e68
 80101c4:	20000a28 	.word	0x20000a28
 80101c8:	20008000 	.word	0x20008000

080101cc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	4603      	mov	r3, r0
 80101d4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80101d6:	79fb      	ldrb	r3, [r7, #7]
 80101d8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80101da:	4b0d      	ldr	r3, [pc, #52]	@ (8010210 <LoRaMacTestSetDutyCycleOn+0x44>)
 80101dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80101e0:	f107 010c 	add.w	r1, r7, #12
 80101e4:	220f      	movs	r2, #15
 80101e6:	4618      	mov	r0, r3
 80101e8:	f002 f8eb 	bl	80123c2 <RegionVerify>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00a      	beq.n	8010208 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80101f2:	4a07      	ldr	r2, [pc, #28]	@ (8010210 <LoRaMacTestSetDutyCycleOn+0x44>)
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80101fa:	4a06      	ldr	r2, [pc, #24]	@ (8010214 <LoRaMacTestSetDutyCycleOn+0x48>)
 80101fc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010200:	f043 0320 	orr.w	r3, r3, #32
 8010204:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8010208:	bf00      	nop
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	20008000 	.word	0x20008000
 8010214:	20000a28 	.word	0x20000a28

08010218 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b08c      	sub	sp, #48	@ 0x30
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
 8010224:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8010226:	2300      	movs	r3, #0
 8010228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	7b1b      	ldrb	r3, [r3, #12]
 8010230:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	7b5b      	ldrb	r3, [r3, #13]
 8010238:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	7b9b      	ldrb	r3, [r3, #14]
 8010240:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	685a      	ldr	r2, [r3, #4]
 8010248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801024a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	785b      	ldrb	r3, [r3, #1]
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 8088 	beq.w	8010366 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8010256:	2302      	movs	r3, #2
 8010258:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	7bdb      	ldrb	r3, [r3, #15]
 8010260:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	7c1b      	ldrb	r3, [r3, #16]
 8010268:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801026c:	4611      	mov	r1, r2
 801026e:	4618      	mov	r0, r3
 8010270:	f002 f859 	bl	8012326 <RegionGetPhyParam>
 8010274:	4603      	mov	r3, r0
 8010276:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8010278:	6a3b      	ldr	r3, [r7, #32]
 801027a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801027e:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8010282:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8010286:	4293      	cmp	r3, r2
 8010288:	bfb8      	it	lt
 801028a:	4613      	movlt	r3, r2
 801028c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	68fa      	ldr	r2, [r7, #12]
 8010296:	8912      	ldrh	r2, [r2, #8]
 8010298:	4293      	cmp	r3, r2
 801029a:	d302      	bcc.n	80102a2 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 801029c:	2301      	movs	r3, #1
 801029e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	8912      	ldrh	r2, [r2, #8]
 80102aa:	4611      	mov	r1, r2
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	8952      	ldrh	r2, [r2, #10]
 80102b0:	440a      	add	r2, r1
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d30f      	bcc.n	80102d6 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80102b6:	230a      	movs	r3, #10
 80102b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	7c1b      	ldrb	r3, [r3, #16]
 80102c0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f002 f82d 	bl	8012326 <RegionGetPhyParam>
 80102cc:	4603      	mov	r3, r0
 80102ce:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80102d0:	6a3b      	ldr	r3, [r7, #32]
 80102d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	8912      	ldrh	r2, [r2, #8]
 80102de:	4611      	mov	r1, r2
 80102e0:	68fa      	ldr	r2, [r7, #12]
 80102e2:	8952      	ldrh	r2, [r2, #10]
 80102e4:	0052      	lsls	r2, r2, #1
 80102e6:	440a      	add	r2, r1
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d33c      	bcc.n	8010366 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	8912      	ldrh	r2, [r2, #8]
 80102f4:	1a9b      	subs	r3, r3, r2
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	8952      	ldrh	r2, [r2, #10]
 80102fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80102fe:	fb01 f202 	mul.w	r2, r1, r2
 8010302:	1a9b      	subs	r3, r3, r2
 8010304:	2b00      	cmp	r3, #0
 8010306:	d12e      	bne.n	8010366 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8010308:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 801030c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010310:	429a      	cmp	r2, r3
 8010312:	d110      	bne.n	8010336 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d009      	beq.n	8010330 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801031c:	2302      	movs	r3, #2
 801031e:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	7c1b      	ldrb	r3, [r3, #16]
 8010324:	f107 0210 	add.w	r2, r7, #16
 8010328:	4611      	mov	r1, r2
 801032a:	4618      	mov	r0, r3
 801032c:	f002 f832 	bl	8012394 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8010330:	2301      	movs	r3, #1
 8010332:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010336:	2321      	movs	r3, #33	@ 0x21
 8010338:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 801033c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010340:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	7bdb      	ldrb	r3, [r3, #15]
 8010348:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	7c1b      	ldrb	r3, [r3, #16]
 8010350:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010354:	4611      	mov	r1, r2
 8010356:	4618      	mov	r0, r3
 8010358:	f001 ffe5 	bl	8012326 <RegionGetPhyParam>
 801035c:	4603      	mov	r3, r0
 801035e:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 801036c:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010374:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801037c:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801037e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010382:	4618      	mov	r0, r3
 8010384:	3730      	adds	r7, #48	@ 0x30
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}

0801038a <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801038a:	b480      	push	{r7}
 801038c:	b085      	sub	sp, #20
 801038e:	af00      	add	r7, sp, #0
 8010390:	60f8      	str	r0, [r7, #12]
 8010392:	60b9      	str	r1, [r7, #8]
 8010394:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010396:	bf00      	nop
 8010398:	3714      	adds	r7, #20
 801039a:	46bd      	mov	sp, r7
 801039c:	bc80      	pop	{r7}
 801039e:	4770      	bx	lr

080103a0 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	4603      	mov	r3, r0
 80103a8:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103aa:	bf00      	nop
 80103ac:	370c      	adds	r7, #12
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bc80      	pop	{r7}
 80103b2:	4770      	bx	lr

080103b4 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103be:	bf00      	nop
 80103c0:	370c      	adds	r7, #12
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bc80      	pop	{r7}
 80103c6:	4770      	bx	lr

080103c8 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	4603      	mov	r3, r0
 80103d0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103d2:	bf00      	nop
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bc80      	pop	{r7}
 80103da:	4770      	bx	lr

080103dc <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80103e0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bc80      	pop	{r7}
 80103e8:	4770      	bx	lr

080103ea <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80103ea:	b480      	push	{r7}
 80103ec:	b083      	sub	sp, #12
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80103f2:	bf00      	nop
 80103f4:	370c      	adds	r7, #12
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bc80      	pop	{r7}
 80103fa:	4770      	bx	lr

080103fc <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010404:	bf00      	nop
 8010406:	370c      	adds	r7, #12
 8010408:	46bd      	mov	sp, r7
 801040a:	bc80      	pop	{r7}
 801040c:	4770      	bx	lr

0801040e <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801040e:	b480      	push	{r7}
 8010410:	b083      	sub	sp, #12
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010416:	bf00      	nop
 8010418:	370c      	adds	r7, #12
 801041a:	46bd      	mov	sp, r7
 801041c:	bc80      	pop	{r7}
 801041e:	4770      	bx	lr

08010420 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	460b      	mov	r3, r1
 801042a:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801042c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801042e:	4618      	mov	r0, r3
 8010430:	370c      	adds	r7, #12
 8010432:	46bd      	mov	sp, r7
 8010434:	bc80      	pop	{r7}
 8010436:	4770      	bx	lr

08010438 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8010438:	b480      	push	{r7}
 801043a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801043c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801043e:	4618      	mov	r0, r3
 8010440:	46bd      	mov	sp, r7
 8010442:	bc80      	pop	{r7}
 8010444:	4770      	bx	lr

08010446 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8010446:	b480      	push	{r7}
 8010448:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801044a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801044c:	4618      	mov	r0, r3
 801044e:	46bd      	mov	sp, r7
 8010450:	bc80      	pop	{r7}
 8010452:	4770      	bx	lr

08010454 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8010454:	b480      	push	{r7}
 8010456:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010458:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801045a:	4618      	mov	r0, r3
 801045c:	46bd      	mov	sp, r7
 801045e:	bc80      	pop	{r7}
 8010460:	4770      	bx	lr

08010462 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8010462:	b480      	push	{r7}
 8010464:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010466:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010468:	4618      	mov	r0, r3
 801046a:	46bd      	mov	sp, r7
 801046c:	bc80      	pop	{r7}
 801046e:	4770      	bx	lr

08010470 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	4603      	mov	r3, r0
 8010478:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801047a:	bf00      	nop
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	bc80      	pop	{r7}
 8010482:	4770      	bx	lr

08010484 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8010484:	b480      	push	{r7}
 8010486:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010488:	bf00      	nop
 801048a:	46bd      	mov	sp, r7
 801048c:	bc80      	pop	{r7}
 801048e:	4770      	bx	lr

08010490 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8010490:	b480      	push	{r7}
 8010492:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010494:	bf00      	nop
 8010496:	46bd      	mov	sp, r7
 8010498:	bc80      	pop	{r7}
 801049a:	4770      	bx	lr

0801049c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	4603      	mov	r3, r0
 80104a4:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104a6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bc80      	pop	{r7}
 80104b0:	4770      	bx	lr

080104b2 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80104b2:	b480      	push	{r7}
 80104b4:	b083      	sub	sp, #12
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104ba:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104bc:	4618      	mov	r0, r3
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bc80      	pop	{r7}
 80104c4:	4770      	bx	lr

080104c6 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80104c6:	b480      	push	{r7}
 80104c8:	b083      	sub	sp, #12
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104ce:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	370c      	adds	r7, #12
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bc80      	pop	{r7}
 80104d8:	4770      	bx	lr

080104da <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80104da:	b480      	push	{r7}
 80104dc:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104de:	bf00      	nop
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bc80      	pop	{r7}
 80104e4:	4770      	bx	lr

080104e6 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80104e6:	b480      	push	{r7}
 80104e8:	b083      	sub	sp, #12
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	4603      	mov	r3, r0
 80104ee:	6039      	str	r1, [r7, #0]
 80104f0:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80104f2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bc80      	pop	{r7}
 80104fc:	4770      	bx	lr

080104fe <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80104fe:	b480      	push	{r7}
 8010500:	b083      	sub	sp, #12
 8010502:	af00      	add	r7, sp, #0
 8010504:	4603      	mov	r3, r0
 8010506:	603a      	str	r2, [r7, #0]
 8010508:	80fb      	strh	r3, [r7, #6]
 801050a:	460b      	mov	r3, r1
 801050c:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801050e:	bf00      	nop
 8010510:	370c      	adds	r7, #12
 8010512:	46bd      	mov	sp, r7
 8010514:	bc80      	pop	{r7}
 8010516:	4770      	bx	lr

08010518 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8010518:	b480      	push	{r7}
 801051a:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801051c:	bf00      	nop
 801051e:	46bd      	mov	sp, r7
 8010520:	bc80      	pop	{r7}
 8010522:	4770      	bx	lr

08010524 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801052c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801052e:	4618      	mov	r0, r3
 8010530:	370c      	adds	r7, #12
 8010532:	46bd      	mov	sp, r7
 8010534:	bc80      	pop	{r7}
 8010536:	4770      	bx	lr

08010538 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8010540:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010542:	4618      	mov	r0, r3
 8010544:	370c      	adds	r7, #12
 8010546:	46bd      	mov	sp, r7
 8010548:	bc80      	pop	{r7}
 801054a:	4770      	bx	lr

0801054c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010550:	bf00      	nop
 8010552:	46bd      	mov	sp, r7
 8010554:	bc80      	pop	{r7}
 8010556:	4770      	bx	lr

08010558 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	460b      	mov	r3, r1
 8010562:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010564:	bf00      	nop
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	bc80      	pop	{r7}
 801056c:	4770      	bx	lr

0801056e <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801056e:	b480      	push	{r7}
 8010570:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010572:	bf00      	nop
 8010574:	46bd      	mov	sp, r7
 8010576:	bc80      	pop	{r7}
 8010578:	4770      	bx	lr

0801057a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801057a:	b480      	push	{r7}
 801057c:	b085      	sub	sp, #20
 801057e:	af00      	add	r7, sp, #0
 8010580:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8010586:	2300      	movs	r3, #0
 8010588:	81fb      	strh	r3, [r7, #14]
 801058a:	e00a      	b.n	80105a2 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801058c:	89fb      	ldrh	r3, [r7, #14]
 801058e:	68ba      	ldr	r2, [r7, #8]
 8010590:	4413      	add	r3, r2
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <IsSlotFree+0x22>
        {
            return false;
 8010598:	2300      	movs	r3, #0
 801059a:	e006      	b.n	80105aa <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801059c:	89fb      	ldrh	r3, [r7, #14]
 801059e:	3301      	adds	r3, #1
 80105a0:	81fb      	strh	r3, [r7, #14]
 80105a2:	89fb      	ldrh	r3, [r7, #14]
 80105a4:	2b0f      	cmp	r3, #15
 80105a6:	d9f1      	bls.n	801058c <IsSlotFree+0x12>
        }
    }
    return true;
 80105a8:	2301      	movs	r3, #1
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3714      	adds	r7, #20
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bc80      	pop	{r7}
 80105b2:	4770      	bx	lr

080105b4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80105be:	e007      	b.n	80105d0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80105c0:	79fb      	ldrb	r3, [r7, #7]
 80105c2:	3301      	adds	r3, #1
 80105c4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80105c6:	79fb      	ldrb	r3, [r7, #7]
 80105c8:	2b20      	cmp	r3, #32
 80105ca:	d101      	bne.n	80105d0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80105cc:	2300      	movs	r3, #0
 80105ce:	e012      	b.n	80105f6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80105d0:	79fb      	ldrb	r3, [r7, #7]
 80105d2:	011b      	lsls	r3, r3, #4
 80105d4:	3308      	adds	r3, #8
 80105d6:	4a0a      	ldr	r2, [pc, #40]	@ (8010600 <MallocNewMacCommandSlot+0x4c>)
 80105d8:	4413      	add	r3, r2
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff ffcd 	bl	801057a <IsSlotFree>
 80105e0:	4603      	mov	r3, r0
 80105e2:	f083 0301 	eor.w	r3, r3, #1
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1e9      	bne.n	80105c0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80105ec:	79fb      	ldrb	r3, [r7, #7]
 80105ee:	011b      	lsls	r3, r3, #4
 80105f0:	3308      	adds	r3, #8
 80105f2:	4a03      	ldr	r2, [pc, #12]	@ (8010600 <MallocNewMacCommandSlot+0x4c>)
 80105f4:	4413      	add	r3, r2
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3708      	adds	r7, #8
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	20000fec 	.word	0x20000fec

08010604 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d101      	bne.n	8010616 <FreeMacCommandSlot+0x12>
    {
        return false;
 8010612:	2300      	movs	r3, #0
 8010614:	e005      	b.n	8010622 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8010616:	2210      	movs	r2, #16
 8010618:	2100      	movs	r1, #0
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f007 f95c 	bl	80178d8 <memset1>

    return true;
 8010620:	2301      	movs	r3, #1
}
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801062a:	b480      	push	{r7}
 801062c:	b083      	sub	sp, #12
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d101      	bne.n	801063c <LinkedListInit+0x12>
    {
        return false;
 8010638:	2300      	movs	r3, #0
 801063a:	e006      	b.n	801064a <LinkedListInit+0x20>
    }

    list->First = NULL;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	605a      	str	r2, [r3, #4]

    return true;
 8010648:	2301      	movs	r3, #1
}
 801064a:	4618      	mov	r0, r3
 801064c:	370c      	adds	r7, #12
 801064e:	46bd      	mov	sp, r7
 8010650:	bc80      	pop	{r7}
 8010652:	4770      	bx	lr

08010654 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8010654:	b480      	push	{r7}
 8010656:	b083      	sub	sp, #12
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d002      	beq.n	801066a <LinkedListAdd+0x16>
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d101      	bne.n	801066e <LinkedListAdd+0x1a>
    {
        return false;
 801066a:	2300      	movs	r3, #0
 801066c:	e015      	b.n	801069a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d102      	bne.n	801067c <LinkedListAdd+0x28>
    {
        list->First = element;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	683a      	ldr	r2, [r7, #0]
 801067a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d003      	beq.n	801068c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	683a      	ldr	r2, [r7, #0]
 801068a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	2200      	movs	r2, #0
 8010690:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	683a      	ldr	r2, [r7, #0]
 8010696:	605a      	str	r2, [r3, #4]

    return true;
 8010698:	2301      	movs	r3, #1
}
 801069a:	4618      	mov	r0, r3
 801069c:	370c      	adds	r7, #12
 801069e:	46bd      	mov	sp, r7
 80106a0:	bc80      	pop	{r7}
 80106a2:	4770      	bx	lr

080106a4 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d002      	beq.n	80106ba <LinkedListGetPrevious+0x16>
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d101      	bne.n	80106be <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80106ba:	2300      	movs	r3, #0
 80106bc:	e016      	b.n	80106ec <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d00c      	beq.n	80106e6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80106cc:	e002      	b.n	80106d4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d007      	beq.n	80106ea <LinkedListGetPrevious+0x46>
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	683a      	ldr	r2, [r7, #0]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d1f4      	bne.n	80106ce <LinkedListGetPrevious+0x2a>
 80106e4:	e001      	b.n	80106ea <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80106e6:	2300      	movs	r3, #0
 80106e8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80106ea:	68fb      	ldr	r3, [r7, #12]
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3714      	adds	r7, #20
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bc80      	pop	{r7}
 80106f4:	4770      	bx	lr

080106f6 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <LinkedListRemove+0x16>
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d101      	bne.n	8010710 <LinkedListRemove+0x1a>
    {
        return false;
 801070c:	2300      	movs	r3, #0
 801070e:	e020      	b.n	8010752 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8010710:	6839      	ldr	r1, [r7, #0]
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f7ff ffc6 	bl	80106a4 <LinkedListGetPrevious>
 8010718:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	429a      	cmp	r2, r3
 8010722:	d103      	bne.n	801072c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	683a      	ldr	r2, [r7, #0]
 8010732:	429a      	cmp	r2, r3
 8010734:	d102      	bne.n	801073c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	68fa      	ldr	r2, [r7, #12]
 801073a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d003      	beq.n	801074a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]

    return true;
 8010750:	2301      	movs	r3, #1
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
	...

0801075c <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
 8010762:	4603      	mov	r3, r0
 8010764:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8010766:	79fb      	ldrb	r3, [r7, #7]
 8010768:	2b11      	cmp	r3, #17
 801076a:	bf8c      	ite	hi
 801076c:	2201      	movhi	r2, #1
 801076e:	2200      	movls	r2, #0
 8010770:	b2d2      	uxtb	r2, r2
 8010772:	2a00      	cmp	r2, #0
 8010774:	d10d      	bne.n	8010792 <IsSticky+0x36>
 8010776:	4a0a      	ldr	r2, [pc, #40]	@ (80107a0 <IsSticky+0x44>)
 8010778:	fa22 f303 	lsr.w	r3, r2, r3
 801077c:	f003 0301 	and.w	r3, r3, #1
 8010780:	2b00      	cmp	r3, #0
 8010782:	bf14      	ite	ne
 8010784:	2301      	movne	r3, #1
 8010786:	2300      	moveq	r3, #0
 8010788:	b2db      	uxtb	r3, r3
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801078e:	2301      	movs	r3, #1
 8010790:	e000      	b.n	8010794 <IsSticky+0x38>
        default:
            return false;
 8010792:	2300      	movs	r3, #0
    }
}
 8010794:	4618      	mov	r0, r3
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	bc80      	pop	{r7}
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop
 80107a0:	00020720 	.word	0x00020720

080107a4 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	4603      	mov	r3, r0
 80107ac:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80107ae:	2300      	movs	r3, #0
    }
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	370c      	adds	r7, #12
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bc80      	pop	{r7}
 80107b8:	4770      	bx	lr
	...

080107bc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80107c0:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80107c4:	2100      	movs	r1, #0
 80107c6:	4804      	ldr	r0, [pc, #16]	@ (80107d8 <LoRaMacCommandsInit+0x1c>)
 80107c8:	f007 f886 	bl	80178d8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80107cc:	4802      	ldr	r0, [pc, #8]	@ (80107d8 <LoRaMacCommandsInit+0x1c>)
 80107ce:	f7ff ff2c 	bl	801062a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	20000fec 	.word	0x20000fec

080107dc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b086      	sub	sp, #24
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	4603      	mov	r3, r0
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	607a      	str	r2, [r7, #4]
 80107e8:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d101      	bne.n	80107f4 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80107f0:	2301      	movs	r3, #1
 80107f2:	e03b      	b.n	801086c <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80107f4:	f7ff fede 	bl	80105b4 <MallocNewMacCommandSlot>
 80107f8:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d101      	bne.n	8010804 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8010800:	2302      	movs	r3, #2
 8010802:	e033      	b.n	801086c <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8010804:	6979      	ldr	r1, [r7, #20]
 8010806:	481b      	ldr	r0, [pc, #108]	@ (8010874 <LoRaMacCommandsAddCmd+0x98>)
 8010808:	f7ff ff24 	bl	8010654 <LinkedListAdd>
 801080c:	4603      	mov	r3, r0
 801080e:	f083 0301 	eor.w	r3, r3, #1
 8010812:	b2db      	uxtb	r3, r3
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8010818:	2305      	movs	r3, #5
 801081a:	e027      	b.n	801086c <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	7bfa      	ldrb	r2, [r7, #15]
 8010820:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	3305      	adds	r3, #5
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	b292      	uxth	r2, r2
 8010830:	68b9      	ldr	r1, [r7, #8]
 8010832:	4618      	mov	r0, r3
 8010834:	f007 f815 	bl	8017862 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8010838:	7bfb      	ldrb	r3, [r7, #15]
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff ff8e 	bl	801075c <IsSticky>
 8010840:	4603      	mov	r3, r0
 8010842:	461a      	mov	r2, r3
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff ffaa 	bl	80107a4 <IsConfirmationRequired>
 8010850:	4603      	mov	r3, r0
 8010852:	461a      	mov	r2, r3
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8010858:	4b06      	ldr	r3, [pc, #24]	@ (8010874 <LoRaMacCommandsAddCmd+0x98>)
 801085a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4413      	add	r3, r2
 8010862:	3301      	adds	r3, #1
 8010864:	4a03      	ldr	r2, [pc, #12]	@ (8010874 <LoRaMacCommandsAddCmd+0x98>)
 8010866:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	3718      	adds	r7, #24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	20000fec 	.word	0x20000fec

08010878 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d101      	bne.n	801088a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010886:	2301      	movs	r3, #1
 8010888:	e021      	b.n	80108ce <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801088a:	6879      	ldr	r1, [r7, #4]
 801088c:	4812      	ldr	r0, [pc, #72]	@ (80108d8 <LoRaMacCommandsRemoveCmd+0x60>)
 801088e:	f7ff ff32 	bl	80106f6 <LinkedListRemove>
 8010892:	4603      	mov	r3, r0
 8010894:	f083 0301 	eor.w	r3, r3, #1
 8010898:	b2db      	uxtb	r3, r3
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801089e:	2303      	movs	r3, #3
 80108a0:	e015      	b.n	80108ce <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80108a2:	4b0d      	ldr	r3, [pc, #52]	@ (80108d8 <LoRaMacCommandsRemoveCmd+0x60>)
 80108a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	689b      	ldr	r3, [r3, #8]
 80108ac:	1ad3      	subs	r3, r2, r3
 80108ae:	3b01      	subs	r3, #1
 80108b0:	4a09      	ldr	r2, [pc, #36]	@ (80108d8 <LoRaMacCommandsRemoveCmd+0x60>)
 80108b2:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f7ff fea4 	bl	8010604 <FreeMacCommandSlot>
 80108bc:	4603      	mov	r3, r0
 80108be:	f083 0301 	eor.w	r3, r3, #1
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d001      	beq.n	80108cc <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80108c8:	2305      	movs	r3, #5
 80108ca:	e000      	b.n	80108ce <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	20000fec 	.word	0x20000fec

080108dc <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80108dc:	b480      	push	{r7}
 80108de:	b085      	sub	sp, #20
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	4603      	mov	r3, r0
 80108e4:	6039      	str	r1, [r7, #0]
 80108e6:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80108e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010924 <LoRaMacCommandsGetCmd+0x48>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80108ee:	e002      	b.n	80108f6 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d004      	beq.n	8010906 <LoRaMacCommandsGetCmd+0x2a>
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	791b      	ldrb	r3, [r3, #4]
 8010900:	79fa      	ldrb	r2, [r7, #7]
 8010902:	429a      	cmp	r2, r3
 8010904:	d1f4      	bne.n	80108f0 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8010912:	2303      	movs	r3, #3
 8010914:	e000      	b.n	8010918 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	bc80      	pop	{r7}
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	20000fec 	.word	0x20000fec

08010928 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801092e:	4b0f      	ldr	r3, [pc, #60]	@ (801096c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8010934:	e012      	b.n	801095c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	7b1b      	ldrb	r3, [r3, #12]
 801093a:	f083 0301 	eor.w	r3, r3, #1
 801093e:	b2db      	uxtb	r3, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d008      	beq.n	8010956 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff ff94 	bl	8010878 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	607b      	str	r3, [r7, #4]
 8010954:	e002      	b.n	801095c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d1e9      	bne.n	8010936 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	20000fec 	.word	0x20000fec

08010970 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8010976:	4b13      	ldr	r3, [pc, #76]	@ (80109c4 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801097c:	e01a      	b.n	80109b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	791b      	ldrb	r3, [r3, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	f7ff fee7 	bl	801075c <IsSticky>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00d      	beq.n	80109b0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	791b      	ldrb	r3, [r3, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	f7ff ff03 	bl	80107a4 <IsConfirmationRequired>
 801099e:	4603      	mov	r3, r0
 80109a0:	f083 0301 	eor.w	r3, r3, #1
 80109a4:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d002      	beq.n	80109b0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7ff ff64 	bl	8010878 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1e1      	bne.n	801097e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80109ba:	2300      	movs	r3, #0
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	20000fec 	.word	0x20000fec

080109c8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d101      	bne.n	80109da <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80109d6:	2301      	movs	r3, #1
 80109d8:	e005      	b.n	80109e6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80109da:	4b05      	ldr	r3, [pc, #20]	@ (80109f0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80109dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	370c      	adds	r7, #12
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bc80      	pop	{r7}
 80109ee:	4770      	bx	lr
 80109f0:	20000fec 	.word	0x20000fec

080109f4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b088      	sub	sp, #32
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8010a00:	4b25      	ldr	r3, [pc, #148]	@ (8010a98 <LoRaMacCommandsSerializeCmds+0xa4>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d002      	beq.n	8010a16 <LoRaMacCommandsSerializeCmds+0x22>
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d126      	bne.n	8010a64 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010a16:	2301      	movs	r3, #1
 8010a18:	e039      	b.n	8010a8e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8010a1a:	7efb      	ldrb	r3, [r7, #27]
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	1ad2      	subs	r2, r2, r3
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	3301      	adds	r3, #1
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d320      	bcc.n	8010a6c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8010a2a:	7efb      	ldrb	r3, [r7, #27]
 8010a2c:	1c5a      	adds	r2, r3, #1
 8010a2e:	76fa      	strb	r2, [r7, #27]
 8010a30:	461a      	mov	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4413      	add	r3, r2
 8010a36:	69fa      	ldr	r2, [r7, #28]
 8010a38:	7912      	ldrb	r2, [r2, #4]
 8010a3a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8010a3c:	7efb      	ldrb	r3, [r7, #27]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	18d0      	adds	r0, r2, r3
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	1d59      	adds	r1, r3, #5
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	f006 ff08 	bl	8017862 <memcpy1>
            itr += curElement->PayloadSize;
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	b2da      	uxtb	r2, r3
 8010a58:	7efb      	ldrb	r3, [r7, #27]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1d7      	bne.n	8010a1a <LoRaMacCommandsSerializeCmds+0x26>
 8010a6a:	e009      	b.n	8010a80 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8010a6c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8010a6e:	e007      	b.n	8010a80 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8010a76:	69f8      	ldr	r0, [r7, #28]
 8010a78:	f7ff fefe 	bl	8010878 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d1f4      	bne.n	8010a70 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8010a86:	68b8      	ldr	r0, [r7, #8]
 8010a88:	f7ff ff9e 	bl	80109c8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8010a8c:	2300      	movs	r3, #0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3720      	adds	r7, #32
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	20000fec 	.word	0x20000fec

08010a9c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	3b02      	subs	r3, #2
 8010aae:	2b11      	cmp	r3, #17
 8010ab0:	d850      	bhi.n	8010b54 <LoRaMacCommandsGetCmdSize+0xb8>
 8010ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8010ab8 <LoRaMacCommandsGetCmdSize+0x1c>)
 8010ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab8:	08010b01 	.word	0x08010b01
 8010abc:	08010b07 	.word	0x08010b07
 8010ac0:	08010b0d 	.word	0x08010b0d
 8010ac4:	08010b13 	.word	0x08010b13
 8010ac8:	08010b19 	.word	0x08010b19
 8010acc:	08010b1f 	.word	0x08010b1f
 8010ad0:	08010b25 	.word	0x08010b25
 8010ad4:	08010b2b 	.word	0x08010b2b
 8010ad8:	08010b31 	.word	0x08010b31
 8010adc:	08010b55 	.word	0x08010b55
 8010ae0:	08010b55 	.word	0x08010b55
 8010ae4:	08010b37 	.word	0x08010b37
 8010ae8:	08010b55 	.word	0x08010b55
 8010aec:	08010b55 	.word	0x08010b55
 8010af0:	08010b3d 	.word	0x08010b3d
 8010af4:	08010b43 	.word	0x08010b43
 8010af8:	08010b49 	.word	0x08010b49
 8010afc:	08010b4f 	.word	0x08010b4f
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8010b00:	2303      	movs	r3, #3
 8010b02:	73fb      	strb	r3, [r7, #15]
            break;
 8010b04:	e027      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8010b06:	2305      	movs	r3, #5
 8010b08:	73fb      	strb	r3, [r7, #15]
            break;
 8010b0a:	e024      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	73fb      	strb	r3, [r7, #15]
            break;
 8010b10:	e021      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8010b12:	2305      	movs	r3, #5
 8010b14:	73fb      	strb	r3, [r7, #15]
            break;
 8010b16:	e01e      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	73fb      	strb	r3, [r7, #15]
            break;
 8010b1c:	e01b      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8010b1e:	2306      	movs	r3, #6
 8010b20:	73fb      	strb	r3, [r7, #15]
            break;
 8010b22:	e018      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8010b24:	2302      	movs	r3, #2
 8010b26:	73fb      	strb	r3, [r7, #15]
            break;
 8010b28:	e015      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8010b2a:	2302      	movs	r3, #2
 8010b2c:	73fb      	strb	r3, [r7, #15]
            break;
 8010b2e:	e012      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8010b30:	2305      	movs	r3, #5
 8010b32:	73fb      	strb	r3, [r7, #15]
            break;
 8010b34:	e00f      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8010b36:	2306      	movs	r3, #6
 8010b38:	73fb      	strb	r3, [r7, #15]
            break;
 8010b3a:	e00c      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	73fb      	strb	r3, [r7, #15]
            break;
 8010b40:	e009      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8010b42:	2305      	movs	r3, #5
 8010b44:	73fb      	strb	r3, [r7, #15]
            break;
 8010b46:	e006      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8010b48:	2304      	movs	r3, #4
 8010b4a:	73fb      	strb	r3, [r7, #15]
            break;
 8010b4c:	e003      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8010b4e:	2304      	movs	r3, #4
 8010b50:	73fb      	strb	r3, [r7, #15]
            break;
 8010b52:	e000      	b.n	8010b56 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8010b54:	bf00      	nop
        }
    }
    return cidSize;
 8010b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3714      	adds	r7, #20
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bc80      	pop	{r7}
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop

08010b64 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	4a07      	ldr	r2, [pc, #28]	@ (8010b8c <IncreaseBufferPointer+0x28>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d102      	bne.n	8010b7a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010b74:	4b06      	ldr	r3, [pc, #24]	@ (8010b90 <IncreaseBufferPointer+0x2c>)
 8010b76:	607b      	str	r3, [r7, #4]
 8010b78:	e002      	b.n	8010b80 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8010b80:	687b      	ldr	r3, [r7, #4]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bc80      	pop	{r7}
 8010b8a:	4770      	bx	lr
 8010b8c:	20001214 	.word	0x20001214
 8010b90:	20001204 	.word	0x20001204

08010b94 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8010b9e:	79fb      	ldrb	r3, [r7, #7]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d101      	bne.n	8010ba8 <IsListEmpty+0x14>
    {
        return true;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e000      	b.n	8010baa <IsListEmpty+0x16>
    }
    return false;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bc80      	pop	{r7}
 8010bb2:	4770      	bx	lr

08010bb4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	4603      	mov	r3, r0
 8010bbc:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8010bbe:	79fb      	ldrb	r3, [r7, #7]
 8010bc0:	2b04      	cmp	r3, #4
 8010bc2:	d901      	bls.n	8010bc8 <IsListFull+0x14>
    {
        return true;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e000      	b.n	8010bca <IsListFull+0x16>
    }
    return false;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	370c      	adds	r7, #12
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bc80      	pop	{r7}
 8010bd2:	4770      	bx	lr

08010bd4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	4603      	mov	r3, r0
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010be6:	4b13      	ldr	r3, [pc, #76]	@ (8010c34 <GetElement+0x60>)
 8010be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff ffd1 	bl	8010b94 <IsListEmpty>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d001      	beq.n	8010bfc <GetElement+0x28>
    {
        return NULL;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	e017      	b.n	8010c2c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	74fb      	strb	r3, [r7, #19]
 8010c00:	e00d      	b.n	8010c1e <GetElement+0x4a>
    {
        if( element->Request == request )
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	7bfa      	ldrb	r2, [r7, #15]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d101      	bne.n	8010c10 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	e00d      	b.n	8010c2c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8010c10:	6978      	ldr	r0, [r7, #20]
 8010c12:	f7ff ffa7 	bl	8010b64 <IncreaseBufferPointer>
 8010c16:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010c18:	7cfb      	ldrb	r3, [r7, #19]
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	74fb      	strb	r3, [r7, #19]
 8010c1e:	4b05      	ldr	r3, [pc, #20]	@ (8010c34 <GetElement+0x60>)
 8010c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c24:	7cfa      	ldrb	r2, [r7, #19]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d3eb      	bcc.n	8010c02 <GetElement+0x2e>
    }

    return NULL;
 8010c2a:	2300      	movs	r3, #0
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3718      	adds	r7, #24
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	200011f8 	.word	0x200011f8

08010c38 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8010c40:	4a0c      	ldr	r2, [pc, #48]	@ (8010c74 <LoRaMacConfirmQueueInit+0x3c>)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8010c46:	4b0b      	ldr	r3, [pc, #44]	@ (8010c74 <LoRaMacConfirmQueueInit+0x3c>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010c4e:	4b09      	ldr	r3, [pc, #36]	@ (8010c74 <LoRaMacConfirmQueueInit+0x3c>)
 8010c50:	4a09      	ldr	r2, [pc, #36]	@ (8010c78 <LoRaMacConfirmQueueInit+0x40>)
 8010c52:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010c54:	4b07      	ldr	r3, [pc, #28]	@ (8010c74 <LoRaMacConfirmQueueInit+0x3c>)
 8010c56:	4a08      	ldr	r2, [pc, #32]	@ (8010c78 <LoRaMacConfirmQueueInit+0x40>)
 8010c58:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8010c5a:	2214      	movs	r2, #20
 8010c5c:	21ff      	movs	r1, #255	@ 0xff
 8010c5e:	4806      	ldr	r0, [pc, #24]	@ (8010c78 <LoRaMacConfirmQueueInit+0x40>)
 8010c60:	f006 fe3a 	bl	80178d8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c64:	4b03      	ldr	r3, [pc, #12]	@ (8010c74 <LoRaMacConfirmQueueInit+0x3c>)
 8010c66:	2201      	movs	r2, #1
 8010c68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8010c6c:	bf00      	nop
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	200011f8 	.word	0x200011f8
 8010c78:	20001204 	.word	0x20001204

08010c7c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010c84:	4b19      	ldr	r3, [pc, #100]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7ff ff92 	bl	8010bb4 <IsListFull>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d001      	beq.n	8010c9a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8010c96:	2300      	movs	r3, #0
 8010c98:	e024      	b.n	8010ce4 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8010c9a:	4b14      	ldr	r3, [pc, #80]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	7812      	ldrb	r2, [r2, #0]
 8010ca2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8010ca4:	4b11      	ldr	r3, [pc, #68]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	7852      	ldrb	r2, [r2, #1]
 8010cac:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8010cae:	4b0f      	ldr	r3, [pc, #60]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010cb0:	689b      	ldr	r3, [r3, #8]
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	78d2      	ldrb	r2, [r2, #3]
 8010cb6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8010cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010cba:	689b      	ldr	r3, [r3, #8]
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	7892      	ldrb	r2, [r2, #2]
 8010cc0:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8010cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	4b07      	ldr	r3, [pc, #28]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010cce:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8010cd2:	4b06      	ldr	r3, [pc, #24]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010cd4:	689b      	ldr	r3, [r3, #8]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7ff ff44 	bl	8010b64 <IncreaseBufferPointer>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	4a03      	ldr	r2, [pc, #12]	@ (8010cec <LoRaMacConfirmQueueAdd+0x70>)
 8010ce0:	6093      	str	r3, [r2, #8]

    return true;
 8010ce2:	2301      	movs	r3, #1
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	200011f8 	.word	0x200011f8

08010cf0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8010d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7ff ff4a 	bl	8010b94 <IsListEmpty>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d001      	beq.n	8010d0a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8010d06:	2300      	movs	r3, #0
 8010d08:	e010      	b.n	8010d2c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8010d0a:	4b09      	ldr	r3, [pc, #36]	@ (8010d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	4b06      	ldr	r3, [pc, #24]	@ (8010d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d16:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8010d1a:	4b05      	ldr	r3, [pc, #20]	@ (8010d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7ff ff20 	bl	8010b64 <IncreaseBufferPointer>
 8010d24:	4603      	mov	r3, r0
 8010d26:	4a02      	ldr	r2, [pc, #8]	@ (8010d30 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8010d28:	6053      	str	r3, [r2, #4]

    return true;
 8010d2a:	2301      	movs	r3, #1
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	200011f8 	.word	0x200011f8

08010d34 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	460a      	mov	r2, r1
 8010d3e:	71fb      	strb	r3, [r7, #7]
 8010d40:	4613      	mov	r3, r2
 8010d42:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8010d44:	2300      	movs	r3, #0
 8010d46:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010d48:	4b10      	ldr	r3, [pc, #64]	@ (8010d8c <LoRaMacConfirmQueueSetStatus+0x58>)
 8010d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ff ff20 	bl	8010b94 <IsListEmpty>
 8010d54:	4603      	mov	r3, r0
 8010d56:	f083 0301 	eor.w	r3, r3, #1
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d011      	beq.n	8010d84 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010d60:	4b0a      	ldr	r3, [pc, #40]	@ (8010d8c <LoRaMacConfirmQueueSetStatus+0x58>)
 8010d62:	6859      	ldr	r1, [r3, #4]
 8010d64:	4b09      	ldr	r3, [pc, #36]	@ (8010d8c <LoRaMacConfirmQueueSetStatus+0x58>)
 8010d66:	689a      	ldr	r2, [r3, #8]
 8010d68:	79bb      	ldrb	r3, [r7, #6]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff ff32 	bl	8010bd4 <GetElement>
 8010d70:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d005      	beq.n	8010d84 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	79fa      	ldrb	r2, [r7, #7]
 8010d7c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2201      	movs	r2, #1
 8010d82:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8010d84:	bf00      	nop
 8010d86:	3710      	adds	r7, #16
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	200011f8 	.word	0x200011f8

08010d90 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4603      	mov	r3, r0
 8010d98:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010d9e:	4b10      	ldr	r3, [pc, #64]	@ (8010de0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8010da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7ff fef5 	bl	8010b94 <IsListEmpty>
 8010daa:	4603      	mov	r3, r0
 8010dac:	f083 0301 	eor.w	r3, r3, #1
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00e      	beq.n	8010dd4 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010db6:	4b0a      	ldr	r3, [pc, #40]	@ (8010de0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8010db8:	6859      	ldr	r1, [r3, #4]
 8010dba:	4b09      	ldr	r3, [pc, #36]	@ (8010de0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8010dbc:	689a      	ldr	r2, [r3, #8]
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ff ff07 	bl	8010bd4 <GetElement>
 8010dc6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d002      	beq.n	8010dd4 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	785b      	ldrb	r3, [r3, #1]
 8010dd2:	e000      	b.n	8010dd6 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010dd4:	2301      	movs	r3, #1
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	200011f8 	.word	0x200011f8

08010de4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010dee:	4b16      	ldr	r3, [pc, #88]	@ (8010e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8010df4:	4a14      	ldr	r2, [pc, #80]	@ (8010e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010df6:	79fb      	ldrb	r3, [r7, #7]
 8010df8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010dfc:	4b12      	ldr	r3, [pc, #72]	@ (8010e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7ff fec6 	bl	8010b94 <IsListEmpty>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	f083 0301 	eor.w	r3, r3, #1
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d015      	beq.n	8010e40 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	79fa      	ldrb	r2, [r7, #7]
 8010e18:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	78db      	ldrb	r3, [r3, #3]
 8010e1e:	f083 0301 	eor.w	r3, r3, #1
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	f7ff fe98 	bl	8010b64 <IncreaseBufferPointer>
 8010e34:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8010e36:	4b04      	ldr	r3, [pc, #16]	@ (8010e48 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010e38:	689b      	ldr	r3, [r3, #8]
 8010e3a:	68fa      	ldr	r2, [r7, #12]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d1e9      	bne.n	8010e14 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8010e40:	bf00      	nop
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	200011f8 	.word	0x200011f8

08010e4c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8010e56:	4b09      	ldr	r3, [pc, #36]	@ (8010e7c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010e58:	6859      	ldr	r1, [r3, #4]
 8010e5a:	4b08      	ldr	r3, [pc, #32]	@ (8010e7c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010e5c:	689a      	ldr	r2, [r3, #8]
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff feb7 	bl	8010bd4 <GetElement>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d001      	beq.n	8010e70 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	e000      	b.n	8010e72 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8010e70:	2300      	movs	r3, #0
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3708      	adds	r7, #8
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	200011f8 	.word	0x200011f8

08010e80 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010e88:	4b25      	ldr	r3, [pc, #148]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e8e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8010e90:	2300      	movs	r3, #0
 8010e92:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8010e94:	f107 0308 	add.w	r3, r7, #8
 8010e98:	2204      	movs	r2, #4
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f006 fd1b 	bl	80178d8 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	73fb      	strb	r3, [r7, #15]
 8010ea6:	e032      	b.n	8010f0e <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8010ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	781a      	ldrb	r2, [r3, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8010eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	785a      	ldrb	r2, [r3, #1]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8010ebc:	4b18      	ldr	r3, [pc, #96]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	789b      	ldrb	r3, [r3, #2]
 8010ec2:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8010ec4:	7b7b      	ldrb	r3, [r7, #13]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d005      	beq.n	8010ed6 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8010eca:	4b15      	ldr	r3, [pc, #84]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	689b      	ldr	r3, [r3, #8]
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	4798      	blx	r3
 8010ed4:	e00b      	b.n	8010eee <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8010ed6:	4b12      	ldr	r3, [pc, #72]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8010ede:	4b10      	ldr	r3, [pc, #64]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	785b      	ldrb	r3, [r3, #1]
 8010ee4:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8010ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8010f20 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	78db      	ldrb	r3, [r3, #3]
 8010eec:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8010eee:	f7ff feff 	bl	8010cf0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8010ef2:	7b7b      	ldrb	r3, [r7, #13]
 8010ef4:	f083 0301 	eor.w	r3, r3, #1
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d004      	beq.n	8010f08 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8010efe:	f107 0308 	add.w	r3, r7, #8
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7ff feba 	bl	8010c7c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	73fb      	strb	r3, [r7, #15]
 8010f0e:	7bfa      	ldrb	r2, [r7, #15]
 8010f10:	7bbb      	ldrb	r3, [r7, #14]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d3c8      	bcc.n	8010ea8 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8010f16:	bf00      	nop
 8010f18:	bf00      	nop
 8010f1a:	3710      	adds	r7, #16
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	200011f8 	.word	0x200011f8

08010f24 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8010f24:	b480      	push	{r7}
 8010f26:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010f28:	4b03      	ldr	r3, [pc, #12]	@ (8010f38 <LoRaMacConfirmQueueGetCnt+0x14>)
 8010f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bc80      	pop	{r7}
 8010f34:	4770      	bx	lr
 8010f36:	bf00      	nop
 8010f38:	200011f8 	.word	0x200011f8

08010f3c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010f40:	4b06      	ldr	r3, [pc, #24]	@ (8010f5c <LoRaMacConfirmQueueIsFull+0x20>)
 8010f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff fe34 	bl	8010bb4 <IsListFull>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d001      	beq.n	8010f56 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8010f52:	2301      	movs	r3, #1
 8010f54:	e000      	b.n	8010f58 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8010f56:	2300      	movs	r3, #0
    }
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	200011f8 	.word	0x200011f8

08010f60 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b08e      	sub	sp, #56	@ 0x38
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	607b      	str	r3, [r7, #4]
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	817b      	strh	r3, [r7, #10]
 8010f6e:	4613      	mov	r3, r2
 8010f70:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010f78:	2309      	movs	r3, #9
 8010f7a:	e084      	b.n	8011086 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8010f82:	2301      	movs	r3, #1
 8010f84:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8010f86:	f107 0320 	add.w	r3, r7, #32
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	601a      	str	r2, [r3, #0]
 8010f8e:	605a      	str	r2, [r3, #4]
 8010f90:	609a      	str	r2, [r3, #8]
 8010f92:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8010f94:	f107 0310 	add.w	r3, r7, #16
 8010f98:	2200      	movs	r2, #0
 8010f9a:	601a      	str	r2, [r3, #0]
 8010f9c:	605a      	str	r2, [r3, #4]
 8010f9e:	609a      	str	r2, [r3, #8]
 8010fa0:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8010fa6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8010faa:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	0a1b      	lsrs	r3, r3, #8
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	0c1b      	lsrs	r3, r3, #16
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	0e1b      	lsrs	r3, r3, #24
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8010fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fd2:	0a1b      	lsrs	r3, r3, #8
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fda:	0c1b      	lsrs	r3, r3, #16
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fe2:	0e1b      	lsrs	r3, r3, #24
 8010fe4:	b2db      	uxtb	r3, r3
 8010fe6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8010fe8:	e048      	b.n	801107c <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8010fea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8010ff0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010ff6:	f107 0320 	add.w	r3, r7, #32
 8010ffa:	7a7a      	ldrb	r2, [r7, #9]
 8010ffc:	f107 0010 	add.w	r0, r7, #16
 8011000:	2110      	movs	r1, #16
 8011002:	f006 fa17 	bl	8017434 <SecureElementAesEncrypt>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801100c:	230e      	movs	r3, #14
 801100e:	e03a      	b.n	8011086 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011010:	2300      	movs	r3, #0
 8011012:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8011016:	e01e      	b.n	8011056 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011018:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801101c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011020:	4413      	add	r3, r2
 8011022:	461a      	mov	r2, r3
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	4413      	add	r3, r2
 8011028:	7819      	ldrb	r1, [r3, #0]
 801102a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801102e:	3338      	adds	r3, #56	@ 0x38
 8011030:	443b      	add	r3, r7
 8011032:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8011036:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801103a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801103e:	4403      	add	r3, r0
 8011040:	4618      	mov	r0, r3
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	4403      	add	r3, r0
 8011046:	404a      	eors	r2, r1
 8011048:	b2d2      	uxtb	r2, r2
 801104a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801104c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011050:	3301      	adds	r3, #1
 8011052:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8011056:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801105a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801105e:	2a10      	cmp	r2, #16
 8011060:	bfa8      	it	ge
 8011062:	2210      	movge	r2, #16
 8011064:	b212      	sxth	r2, r2
 8011066:	4293      	cmp	r3, r2
 8011068:	dbd6      	blt.n	8011018 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 801106a:	897b      	ldrh	r3, [r7, #10]
 801106c:	3b10      	subs	r3, #16
 801106e:	b29b      	uxth	r3, r3
 8011070:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8011072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011076:	3310      	adds	r3, #16
 8011078:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 801107c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011080:	2b00      	cmp	r3, #0
 8011082:	dcb2      	bgt.n	8010fea <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011084:	2300      	movs	r3, #0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3738      	adds	r7, #56	@ 0x38
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}

0801108e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801108e:	b490      	push	{r4, r7}
 8011090:	b082      	sub	sp, #8
 8011092:	af00      	add	r7, sp, #0
 8011094:	4604      	mov	r4, r0
 8011096:	4608      	mov	r0, r1
 8011098:	4611      	mov	r1, r2
 801109a:	461a      	mov	r2, r3
 801109c:	4623      	mov	r3, r4
 801109e:	80fb      	strh	r3, [r7, #6]
 80110a0:	4603      	mov	r3, r0
 80110a2:	717b      	strb	r3, [r7, #5]
 80110a4:	460b      	mov	r3, r1
 80110a6:	713b      	strb	r3, [r7, #4]
 80110a8:	4613      	mov	r3, r2
 80110aa:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80110b2:	2309      	movs	r3, #9
 80110b4:	e04e      	b.n	8011154 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	2249      	movs	r2, #73	@ 0x49
 80110ba:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80110bc:	69bb      	ldr	r3, [r7, #24]
 80110be:	3301      	adds	r3, #1
 80110c0:	2200      	movs	r2, #0
 80110c2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	3302      	adds	r3, #2
 80110c8:	2200      	movs	r2, #0
 80110ca:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	3303      	adds	r3, #3
 80110d0:	2200      	movs	r2, #0
 80110d2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	3304      	adds	r3, #4
 80110d8:	2200      	movs	r2, #0
 80110da:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	3305      	adds	r3, #5
 80110e0:	78fa      	ldrb	r2, [r7, #3]
 80110e2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	3306      	adds	r3, #6
 80110e8:	693a      	ldr	r2, [r7, #16]
 80110ea:	b2d2      	uxtb	r2, r2
 80110ec:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	0a1a      	lsrs	r2, r3, #8
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	3307      	adds	r3, #7
 80110f6:	b2d2      	uxtb	r2, r2
 80110f8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	0c1a      	lsrs	r2, r3, #16
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	3308      	adds	r3, #8
 8011102:	b2d2      	uxtb	r2, r2
 8011104:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	0e1a      	lsrs	r2, r3, #24
 801110a:	69bb      	ldr	r3, [r7, #24]
 801110c:	3309      	adds	r3, #9
 801110e:	b2d2      	uxtb	r2, r2
 8011110:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	330a      	adds	r3, #10
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	b2d2      	uxtb	r2, r2
 801111a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	0a1a      	lsrs	r2, r3, #8
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	330b      	adds	r3, #11
 8011124:	b2d2      	uxtb	r2, r2
 8011126:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	0c1a      	lsrs	r2, r3, #16
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	330c      	adds	r3, #12
 8011130:	b2d2      	uxtb	r2, r2
 8011132:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	0e1a      	lsrs	r2, r3, #24
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	330d      	adds	r3, #13
 801113c:	b2d2      	uxtb	r2, r2
 801113e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	330e      	adds	r3, #14
 8011144:	2200      	movs	r2, #0
 8011146:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8011148:	69bb      	ldr	r3, [r7, #24]
 801114a:	330f      	adds	r3, #15
 801114c:	88fa      	ldrh	r2, [r7, #6]
 801114e:	b2d2      	uxtb	r2, r2
 8011150:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011152:	2300      	movs	r3, #0
}
 8011154:	4618      	mov	r0, r3
 8011156:	3708      	adds	r7, #8
 8011158:	46bd      	mov	sp, r7
 801115a:	bc90      	pop	{r4, r7}
 801115c:	4770      	bx	lr

0801115e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801115e:	b590      	push	{r4, r7, lr}
 8011160:	b08b      	sub	sp, #44	@ 0x2c
 8011162:	af04      	add	r7, sp, #16
 8011164:	6078      	str	r0, [r7, #4]
 8011166:	4608      	mov	r0, r1
 8011168:	4611      	mov	r1, r2
 801116a:	461a      	mov	r2, r3
 801116c:	4603      	mov	r3, r0
 801116e:	807b      	strh	r3, [r7, #2]
 8011170:	460b      	mov	r3, r1
 8011172:	707b      	strb	r3, [r7, #1]
 8011174:	4613      	mov	r3, r2
 8011176:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d002      	beq.n	8011184 <ComputeCmacB0+0x26>
 801117e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011184:	2309      	movs	r3, #9
 8011186:	e024      	b.n	80111d2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011188:	887b      	ldrh	r3, [r7, #2]
 801118a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801118e:	d901      	bls.n	8011194 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011190:	230d      	movs	r3, #13
 8011192:	e01e      	b.n	80111d2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011194:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8011198:	783a      	ldrb	r2, [r7, #0]
 801119a:	7879      	ldrb	r1, [r7, #1]
 801119c:	8878      	ldrh	r0, [r7, #2]
 801119e:	f107 0308 	add.w	r3, r7, #8
 80111a2:	9302      	str	r3, [sp, #8]
 80111a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a6:	9301      	str	r3, [sp, #4]
 80111a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	4623      	mov	r3, r4
 80111ae:	f7ff ff6e 	bl	801108e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80111b2:	887a      	ldrh	r2, [r7, #2]
 80111b4:	7879      	ldrb	r1, [r7, #1]
 80111b6:	f107 0008 	add.w	r0, r7, #8
 80111ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	460b      	mov	r3, r1
 80111c0:	6879      	ldr	r1, [r7, #4]
 80111c2:	f006 f8f1 	bl	80173a8 <SecureElementComputeAesCmac>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80111cc:	230e      	movs	r3, #14
 80111ce:	e000      	b.n	80111d2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	371c      	adds	r7, #28
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd90      	pop	{r4, r7, pc}

080111da <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80111da:	b590      	push	{r4, r7, lr}
 80111dc:	b0cd      	sub	sp, #308	@ 0x134
 80111de:	af04      	add	r7, sp, #16
 80111e0:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80111e4:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80111e8:	6020      	str	r0, [r4, #0]
 80111ea:	460c      	mov	r4, r1
 80111ec:	4610      	mov	r0, r2
 80111ee:	4619      	mov	r1, r3
 80111f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111f4:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80111f8:	4622      	mov	r2, r4
 80111fa:	801a      	strh	r2, [r3, #0]
 80111fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011200:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8011204:	4602      	mov	r2, r0
 8011206:	701a      	strb	r2, [r3, #0]
 8011208:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801120c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011210:	460a      	mov	r2, r1
 8011212:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8011214:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011218:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d101      	bne.n	8011226 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011222:	2309      	movs	r3, #9
 8011224:	e063      	b.n	80112ee <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011226:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801122a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801122e:	881b      	ldrh	r3, [r3, #0]
 8011230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011234:	d901      	bls.n	801123a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011236:	230d      	movs	r3, #13
 8011238:	e059      	b.n	80112ee <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801123a:	f107 030c 	add.w	r3, r7, #12
 801123e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8011242:	2100      	movs	r1, #0
 8011244:	4618      	mov	r0, r3
 8011246:	f006 fb47 	bl	80178d8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801124a:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801124e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011252:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011256:	781a      	ldrb	r2, [r3, #0]
 8011258:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801125c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8011260:	7819      	ldrb	r1, [r3, #0]
 8011262:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011266:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801126a:	8818      	ldrh	r0, [r3, #0]
 801126c:	f107 030c 	add.w	r3, r7, #12
 8011270:	9302      	str	r3, [sp, #8]
 8011272:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8011276:	9301      	str	r3, [sp, #4]
 8011278:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801127c:	9300      	str	r3, [sp, #0]
 801127e:	4623      	mov	r3, r4
 8011280:	f7ff ff05 	bl	801108e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011284:	f107 030c 	add.w	r3, r7, #12
 8011288:	3310      	adds	r3, #16
 801128a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801128e:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8011292:	8812      	ldrh	r2, [r2, #0]
 8011294:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8011298:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801129c:	6809      	ldr	r1, [r1, #0]
 801129e:	4618      	mov	r0, r3
 80112a0:	f006 fadf 	bl	8017862 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80112a4:	2306      	movs	r3, #6
 80112a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80112aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112ae:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	3310      	adds	r3, #16
 80112b6:	4619      	mov	r1, r3
 80112b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112bc:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	f107 000c 	add.w	r0, r7, #12
 80112c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80112ca:	f006 f887 	bl	80173dc <SecureElementVerifyAesCmac>
 80112ce:	4603      	mov	r3, r0
 80112d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80112d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d101      	bne.n	80112e0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80112dc:	2300      	movs	r3, #0
 80112de:	e006      	b.n	80112ee <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80112e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d101      	bne.n	80112ec <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80112e8:	2301      	movs	r3, #1
 80112ea:	e000      	b.n	80112ee <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80112ec:	230e      	movs	r3, #14
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd90      	pop	{r4, r7, pc}

080112f8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80112f8:	b480      	push	{r7}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	4603      	mov	r3, r0
 8011300:	6039      	str	r1, [r7, #0]
 8011302:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011304:	2300      	movs	r3, #0
 8011306:	73fb      	strb	r3, [r7, #15]
 8011308:	e011      	b.n	801132e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801130a:	7bfb      	ldrb	r3, [r7, #15]
 801130c:	4a0c      	ldr	r2, [pc, #48]	@ (8011340 <GetKeyAddrItem+0x48>)
 801130e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8011312:	79fa      	ldrb	r2, [r7, #7]
 8011314:	429a      	cmp	r2, r3
 8011316:	d107      	bne.n	8011328 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	009b      	lsls	r3, r3, #2
 801131c:	4a08      	ldr	r2, [pc, #32]	@ (8011340 <GetKeyAddrItem+0x48>)
 801131e:	441a      	add	r2, r3
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011324:	2300      	movs	r3, #0
 8011326:	e006      	b.n	8011336 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011328:	7bfb      	ldrb	r3, [r7, #15]
 801132a:	3301      	adds	r3, #1
 801132c:	73fb      	strb	r3, [r7, #15]
 801132e:	7bfb      	ldrb	r3, [r7, #15]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d9ea      	bls.n	801130a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8011334:	230b      	movs	r3, #11
}
 8011336:	4618      	mov	r0, r3
 8011338:	3714      	adds	r7, #20
 801133a:	46bd      	mov	sp, r7
 801133c:	bc80      	pop	{r7}
 801133e:	4770      	bx	lr
 8011340:	200000b4 	.word	0x200000b4

08011344 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b088      	sub	sp, #32
 8011348:	af00      	add	r7, sp, #0
 801134a:	60b9      	str	r1, [r7, #8]
 801134c:	607a      	str	r2, [r7, #4]
 801134e:	461a      	mov	r2, r3
 8011350:	4603      	mov	r3, r0
 8011352:	73fb      	strb	r3, [r7, #15]
 8011354:	4613      	mov	r3, r2
 8011356:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8011358:	f107 0310 	add.w	r3, r7, #16
 801135c:	2200      	movs	r2, #0
 801135e:	601a      	str	r2, [r3, #0]
 8011360:	605a      	str	r2, [r3, #4]
 8011362:	609a      	str	r2, [r3, #8]
 8011364:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8011366:	7bfb      	ldrb	r3, [r7, #15]
 8011368:	2b08      	cmp	r3, #8
 801136a:	d002      	beq.n	8011372 <DeriveSessionKey10x+0x2e>
 801136c:	2b09      	cmp	r3, #9
 801136e:	d003      	beq.n	8011378 <DeriveSessionKey10x+0x34>
 8011370:	e005      	b.n	801137e <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8011372:	2301      	movs	r3, #1
 8011374:	743b      	strb	r3, [r7, #16]
            break;
 8011376:	e004      	b.n	8011382 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8011378:	2302      	movs	r3, #2
 801137a:	743b      	strb	r3, [r7, #16]
            break;
 801137c:	e001      	b.n	8011382 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801137e:	230a      	movs	r3, #10
 8011380:	e02a      	b.n	80113d8 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	b2db      	uxtb	r3, r3
 8011386:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	0a1b      	lsrs	r3, r3, #8
 801138c:	b2db      	uxtb	r3, r3
 801138e:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	0c1b      	lsrs	r3, r3, #16
 8011394:	b2db      	uxtb	r3, r3
 8011396:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	b2db      	uxtb	r3, r3
 801139c:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	0a1b      	lsrs	r3, r3, #8
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	0c1b      	lsrs	r3, r3, #16
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80113ae:	89bb      	ldrh	r3, [r7, #12]
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80113b4:	89bb      	ldrh	r3, [r7, #12]
 80113b6:	0a1b      	lsrs	r3, r3, #8
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80113be:	7bfa      	ldrb	r2, [r7, #15]
 80113c0:	f107 0310 	add.w	r3, r7, #16
 80113c4:	2101      	movs	r1, #1
 80113c6:	4618      	mov	r0, r3
 80113c8:	f006 f8b4 	bl	8017534 <SecureElementDeriveAndStoreKey>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d001      	beq.n	80113d6 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80113d2:	230e      	movs	r3, #14
 80113d4:	e000      	b.n	80113d8 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3720      	adds	r7, #32
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	6039      	str	r1, [r7, #0]
 80113ea:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d101      	bne.n	80113f6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80113f2:	2309      	movs	r3, #9
 80113f4:	e029      	b.n	801144a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80113f6:	79fb      	ldrb	r3, [r7, #7]
 80113f8:	3b01      	subs	r3, #1
 80113fa:	2b03      	cmp	r3, #3
 80113fc:	d822      	bhi.n	8011444 <GetLastFcntDown+0x64>
 80113fe:	a201      	add	r2, pc, #4	@ (adr r2, 8011404 <GetLastFcntDown+0x24>)
 8011400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011404:	08011415 	.word	0x08011415
 8011408:	08011421 	.word	0x08011421
 801140c:	0801142d 	.word	0x0801142d
 8011410:	08011439 	.word	0x08011439
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8011414:	4b0f      	ldr	r3, [pc, #60]	@ (8011454 <GetLastFcntDown+0x74>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	691a      	ldr	r2, [r3, #16]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	601a      	str	r2, [r3, #0]
            break;
 801141e:	e013      	b.n	8011448 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8011420:	4b0c      	ldr	r3, [pc, #48]	@ (8011454 <GetLastFcntDown+0x74>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	695a      	ldr	r2, [r3, #20]
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	601a      	str	r2, [r3, #0]
            break;
 801142a:	e00d      	b.n	8011448 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801142c:	4b09      	ldr	r3, [pc, #36]	@ (8011454 <GetLastFcntDown+0x74>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	699a      	ldr	r2, [r3, #24]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	601a      	str	r2, [r3, #0]
            break;
 8011436:	e007      	b.n	8011448 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8011438:	4b06      	ldr	r3, [pc, #24]	@ (8011454 <GetLastFcntDown+0x74>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	69da      	ldr	r2, [r3, #28]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	601a      	str	r2, [r3, #0]
            break;
 8011442:	e001      	b.n	8011448 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011444:	2305      	movs	r3, #5
 8011446:	e000      	b.n	801144a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011448:	2300      	movs	r3, #0
}
 801144a:	4618      	mov	r0, r3
 801144c:	370c      	adds	r7, #12
 801144e:	46bd      	mov	sp, r7
 8011450:	bc80      	pop	{r7}
 8011452:	4770      	bx	lr
 8011454:	2000121c 	.word	0x2000121c

08011458 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	4603      	mov	r3, r0
 8011460:	6039      	str	r1, [r7, #0]
 8011462:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8011468:	f107 020c 	add.w	r2, r7, #12
 801146c:	79fb      	ldrb	r3, [r7, #7]
 801146e:	4611      	mov	r1, r2
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff ffb5 	bl	80113e0 <GetLastFcntDown>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d001      	beq.n	8011480 <CheckFCntDown+0x28>
    {
        return false;
 801147c:	2300      	movs	r3, #0
 801147e:	e00a      	b.n	8011496 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	683a      	ldr	r2, [r7, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d803      	bhi.n	8011490 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8011488:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801148a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801148e:	d101      	bne.n	8011494 <CheckFCntDown+0x3c>
    {
        return true;
 8011490:	2301      	movs	r3, #1
 8011492:	e000      	b.n	8011496 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8011494:	2300      	movs	r3, #0
    }
}
 8011496:	4618      	mov	r0, r3
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
	...

080114a0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	6039      	str	r1, [r7, #0]
 80114aa:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80114ac:	79fb      	ldrb	r3, [r7, #7]
 80114ae:	3b01      	subs	r3, #1
 80114b0:	2b03      	cmp	r3, #3
 80114b2:	d82b      	bhi.n	801150c <UpdateFCntDown+0x6c>
 80114b4:	a201      	add	r2, pc, #4	@ (adr r2, 80114bc <UpdateFCntDown+0x1c>)
 80114b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ba:	bf00      	nop
 80114bc:	080114cd 	.word	0x080114cd
 80114c0:	080114df 	.word	0x080114df
 80114c4:	080114f1 	.word	0x080114f1
 80114c8:	08011503 	.word	0x08011503
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80114cc:	4b12      	ldr	r3, [pc, #72]	@ (8011518 <UpdateFCntDown+0x78>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	683a      	ldr	r2, [r7, #0]
 80114d2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80114d4:	4b10      	ldr	r3, [pc, #64]	@ (8011518 <UpdateFCntDown+0x78>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	683a      	ldr	r2, [r7, #0]
 80114da:	621a      	str	r2, [r3, #32]
            break;
 80114dc:	e017      	b.n	801150e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80114de:	4b0e      	ldr	r3, [pc, #56]	@ (8011518 <UpdateFCntDown+0x78>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	683a      	ldr	r2, [r7, #0]
 80114e4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80114e6:	4b0c      	ldr	r3, [pc, #48]	@ (8011518 <UpdateFCntDown+0x78>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	683a      	ldr	r2, [r7, #0]
 80114ec:	621a      	str	r2, [r3, #32]
            break;
 80114ee:	e00e      	b.n	801150e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80114f0:	4b09      	ldr	r3, [pc, #36]	@ (8011518 <UpdateFCntDown+0x78>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80114f8:	4b07      	ldr	r3, [pc, #28]	@ (8011518 <UpdateFCntDown+0x78>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	621a      	str	r2, [r3, #32]
            break;
 8011500:	e005      	b.n	801150e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8011502:	4b05      	ldr	r3, [pc, #20]	@ (8011518 <UpdateFCntDown+0x78>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	683a      	ldr	r2, [r7, #0]
 8011508:	61da      	str	r2, [r3, #28]
            break;
 801150a:	e000      	b.n	801150e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801150c:	bf00      	nop
    }
}
 801150e:	bf00      	nop
 8011510:	370c      	adds	r7, #12
 8011512:	46bd      	mov	sp, r7
 8011514:	bc80      	pop	{r7}
 8011516:	4770      	bx	lr
 8011518:	2000121c 	.word	0x2000121c

0801151c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8011522:	4b18      	ldr	r3, [pc, #96]	@ (8011584 <ResetFCnts+0x68>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2200      	movs	r2, #0
 8011528:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801152a:	4b16      	ldr	r3, [pc, #88]	@ (8011584 <ResetFCnts+0x68>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f04f 32ff 	mov.w	r2, #4294967295
 8011532:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011534:	4b13      	ldr	r3, [pc, #76]	@ (8011584 <ResetFCnts+0x68>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f04f 32ff 	mov.w	r2, #4294967295
 801153c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801153e:	4b11      	ldr	r3, [pc, #68]	@ (8011584 <ResetFCnts+0x68>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f04f 32ff 	mov.w	r2, #4294967295
 8011546:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8011548:	4b0e      	ldr	r3, [pc, #56]	@ (8011584 <ResetFCnts+0x68>)
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	4b0d      	ldr	r3, [pc, #52]	@ (8011584 <ResetFCnts+0x68>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	6992      	ldr	r2, [r2, #24]
 8011552:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011554:	2300      	movs	r3, #0
 8011556:	607b      	str	r3, [r7, #4]
 8011558:	e00b      	b.n	8011572 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801155a:	4b0a      	ldr	r3, [pc, #40]	@ (8011584 <ResetFCnts+0x68>)
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3306      	adds	r3, #6
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4413      	add	r3, r2
 8011566:	f04f 32ff 	mov.w	r2, #4294967295
 801156a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3301      	adds	r3, #1
 8011570:	607b      	str	r3, [r7, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	ddf0      	ble.n	801155a <ResetFCnts+0x3e>
    }
}
 8011578:	bf00      	nop
 801157a:	bf00      	nop
 801157c:	370c      	adds	r7, #12
 801157e:	46bd      	mov	sp, r7
 8011580:	bc80      	pop	{r7}
 8011582:	4770      	bx	lr
 8011584:	2000121c 	.word	0x2000121c

08011588 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8011588:	b480      	push	{r7}
 801158a:	b083      	sub	sp, #12
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8011590:	4b06      	ldr	r3, [pc, #24]	@ (80115ac <IsJoinNonce10xOk+0x24>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	689b      	ldr	r3, [r3, #8]
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	429a      	cmp	r2, r3
 801159a:	bf8c      	ite	hi
 801159c:	2301      	movhi	r3, #1
 801159e:	2300      	movls	r3, #0
 80115a0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	370c      	adds	r7, #12
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bc80      	pop	{r7}
 80115aa:	4770      	bx	lr
 80115ac:	2000121c 	.word	0x2000121c

080115b0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80115be:	2308      	movs	r3, #8
 80115c0:	e01c      	b.n	80115fc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80115c2:	4a10      	ldr	r2, [pc, #64]	@ (8011604 <LoRaMacCryptoInit+0x54>)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80115c8:	4b0e      	ldr	r3, [pc, #56]	@ (8011604 <LoRaMacCryptoInit+0x54>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2228      	movs	r2, #40	@ 0x28
 80115ce:	2100      	movs	r1, #0
 80115d0:	4618      	mov	r0, r3
 80115d2:	f006 f981 	bl	80178d8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80115d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011604 <LoRaMacCryptoInit+0x54>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	2201      	movs	r2, #1
 80115dc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80115de:	4b09      	ldr	r3, [pc, #36]	@ (8011604 <LoRaMacCryptoInit+0x54>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2201      	movs	r2, #1
 80115e4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80115e6:	4b07      	ldr	r3, [pc, #28]	@ (8011604 <LoRaMacCryptoInit+0x54>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2201      	movs	r2, #1
 80115ec:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80115ee:	4b05      	ldr	r3, [pc, #20]	@ (8011604 <LoRaMacCryptoInit+0x54>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2200      	movs	r2, #0
 80115f4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80115f6:	f7ff ff91 	bl	801151c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80115fa:	2300      	movs	r3, #0
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3708      	adds	r7, #8
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	2000121c 	.word	0x2000121c

08011608 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8011610:	4b04      	ldr	r3, [pc, #16]	@ (8011624 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011618:	2300      	movs	r3, #0
}
 801161a:	4618      	mov	r0, r3
 801161c:	370c      	adds	r7, #12
 801161e:	46bd      	mov	sp, r7
 8011620:	bc80      	pop	{r7}
 8011622:	4770      	bx	lr
 8011624:	2000121c 	.word	0x2000121c

08011628 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011636:	2309      	movs	r3, #9
 8011638:	e006      	b.n	8011648 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801163a:	4b06      	ldr	r3, [pc, #24]	@ (8011654 <LoRaMacCryptoGetFCntUp+0x2c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	1c5a      	adds	r2, r3, #1
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	bc80      	pop	{r7}
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	2000121c 	.word	0x2000121c

08011658 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b088      	sub	sp, #32
 801165c:	af00      	add	r7, sp, #0
 801165e:	4603      	mov	r3, r0
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	607a      	str	r2, [r7, #4]
 8011664:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801166a:	2300      	movs	r3, #0
 801166c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801166e:	2312      	movs	r3, #18
 8011670:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d101      	bne.n	801167c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011678:	2309      	movs	r3, #9
 801167a:	e035      	b.n	80116e8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801167c:	f107 0214 	add.w	r2, r7, #20
 8011680:	7bfb      	ldrb	r3, [r7, #15]
 8011682:	4611      	mov	r1, r2
 8011684:	4618      	mov	r0, r3
 8011686:	f7ff feab 	bl	80113e0 <GetLastFcntDown>
 801168a:	4603      	mov	r3, r0
 801168c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801168e:	7efb      	ldrb	r3, [r7, #27]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d001      	beq.n	8011698 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8011694:	7efb      	ldrb	r3, [r7, #27]
 8011696:	e027      	b.n	80116e8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801169e:	d103      	bne.n	80116a8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	601a      	str	r2, [r3, #0]
 80116a6:	e01e      	b.n	80116e6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	dd05      	ble.n	80116c4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	441a      	add	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	e010      	b.n	80116e6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d104      	bne.n	80116d4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80116d0:	2307      	movs	r3, #7
 80116d2:	e009      	b.n	80116e8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	0c1b      	lsrs	r3, r3, #16
 80116d8:	041b      	lsls	r3, r3, #16
 80116da:	68ba      	ldr	r2, [r7, #8]
 80116dc:	4413      	add	r3, r2
 80116de:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80116e6:	2300      	movs	r3, #0
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3720      	adds	r7, #32
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d101      	bne.n	8011702 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80116fe:	2309      	movs	r3, #9
 8011700:	e019      	b.n	8011736 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011702:	2300      	movs	r3, #0
 8011704:	60fb      	str	r3, [r7, #12]
 8011706:	e012      	b.n	801172e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8011708:	4b0d      	ldr	r3, [pc, #52]	@ (8011740 <LoRaMacCryptoSetMulticastReference+0x50>)
 801170a:	6819      	ldr	r1, [r3, #0]
 801170c:	68fa      	ldr	r2, [r7, #12]
 801170e:	4613      	mov	r3, r2
 8011710:	005b      	lsls	r3, r3, #1
 8011712:	4413      	add	r3, r2
 8011714:	011b      	lsls	r3, r3, #4
 8011716:	461a      	mov	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	4413      	add	r3, r2
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	3206      	adds	r2, #6
 8011720:	0092      	lsls	r2, r2, #2
 8011722:	440a      	add	r2, r1
 8011724:	3204      	adds	r2, #4
 8011726:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	3301      	adds	r3, #1
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b00      	cmp	r3, #0
 8011732:	dde9      	ble.n	8011708 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3714      	adds	r7, #20
 801173a:	46bd      	mov	sp, r7
 801173c:	bc80      	pop	{r7}
 801173e:	4770      	bx	lr
 8011740:	2000121c 	.word	0x2000121c

08011744 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	4603      	mov	r3, r0
 801174c:	6039      	str	r1, [r7, #0]
 801174e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8011750:	79fb      	ldrb	r3, [r7, #7]
 8011752:	6839      	ldr	r1, [r7, #0]
 8011754:	4618      	mov	r0, r3
 8011756:	f005 fdc9 	bl	80172ec <SecureElementSetKey>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011760:	230e      	movs	r3, #14
 8011762:	e021      	b.n	80117a8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8011764:	79fb      	ldrb	r3, [r7, #7]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d11d      	bne.n	80117a6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801176a:	4b11      	ldr	r3, [pc, #68]	@ (80117b0 <LoRaMacCryptoSetKey+0x6c>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	789b      	ldrb	r3, [r3, #2]
 8011770:	210b      	movs	r1, #11
 8011772:	4618      	mov	r0, r3
 8011774:	f000 fa54 	bl	8011c20 <LoRaMacCryptoDeriveLifeTimeKey>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d001      	beq.n	8011782 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801177e:	230e      	movs	r3, #14
 8011780:	e012      	b.n	80117a8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8011782:	210c      	movs	r1, #12
 8011784:	2000      	movs	r0, #0
 8011786:	f000 fa4b 	bl	8011c20 <LoRaMacCryptoDeriveLifeTimeKey>
 801178a:	4603      	mov	r3, r0
 801178c:	2b00      	cmp	r3, #0
 801178e:	d001      	beq.n	8011794 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011790:	230e      	movs	r3, #14
 8011792:	e009      	b.n	80117a8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8011794:	210a      	movs	r1, #10
 8011796:	2000      	movs	r0, #0
 8011798:	f000 fa42 	bl	8011c20 <LoRaMacCryptoDeriveLifeTimeKey>
 801179c:	4603      	mov	r3, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d001      	beq.n	80117a6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80117a2:	230e      	movs	r3, #14
 80117a4:	e000      	b.n	80117a8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80117a6:	2300      	movs	r3, #0
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	2000121c 	.word	0x2000121c

080117b4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b086      	sub	sp, #24
 80117b8:	af02      	add	r7, sp, #8
 80117ba:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d101      	bne.n	80117c6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80117c2:	2309      	movs	r3, #9
 80117c4:	e02d      	b.n	8011822 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80117c6:	2301      	movs	r3, #1
 80117c8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80117ca:	4b18      	ldr	r3, [pc, #96]	@ (801182c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	889a      	ldrh	r2, [r3, #4]
 80117d0:	3201      	adds	r2, #1
 80117d2:	b292      	uxth	r2, r2
 80117d4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80117d6:	4b15      	ldr	r3, [pc, #84]	@ (801182c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	889a      	ldrh	r2, [r3, #4]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f000 fc14 	bl	801200e <LoRaMacSerializerJoinRequest>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80117ec:	2310      	movs	r3, #16
 80117ee:	e018      	b.n	8011822 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6819      	ldr	r1, [r3, #0]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	3318      	adds	r3, #24
 80117f8:	7bfa      	ldrb	r2, [r7, #15]
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	4613      	mov	r3, r2
 80117fe:	2213      	movs	r2, #19
 8011800:	2000      	movs	r0, #0
 8011802:	f005 fdd1 	bl	80173a8 <SecureElementComputeAesCmac>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d001      	beq.n	8011810 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801180c:	230e      	movs	r3, #14
 801180e:	e008      	b.n	8011822 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f000 fbfc 	bl	801200e <LoRaMacSerializerJoinRequest>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d001      	beq.n	8011820 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801181c:	2310      	movs	r3, #16
 801181e:	e000      	b.n	8011822 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011820:	2300      	movs	r3, #0
}
 8011822:	4618      	mov	r0, r3
 8011824:	3710      	adds	r7, #16
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	2000121c 	.word	0x2000121c

08011830 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8011830:	b590      	push	{r4, r7, lr}
 8011832:	b097      	sub	sp, #92	@ 0x5c
 8011834:	af04      	add	r7, sp, #16
 8011836:	4603      	mov	r3, r0
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d002      	beq.n	801184a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d101      	bne.n	801184e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801184a:	2309      	movs	r3, #9
 801184c:	e0d1      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801184e:	2312      	movs	r3, #18
 8011850:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8011854:	f107 0314 	add.w	r3, r7, #20
 8011858:	2221      	movs	r2, #33	@ 0x21
 801185a:	2100      	movs	r1, #0
 801185c:	4618      	mov	r0, r3
 801185e:	f00e ff99 	bl	8020794 <memset>
    uint8_t versionMinor         = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8011866:	4b65      	ldr	r3, [pc, #404]	@ (80119fc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	889b      	ldrh	r3, [r3, #4]
 801186c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681c      	ldr	r4, [r3, #0]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	791b      	ldrb	r3, [r3, #4]
 8011878:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 801187c:	7bf8      	ldrb	r0, [r7, #15]
 801187e:	f107 0213 	add.w	r2, r7, #19
 8011882:	9202      	str	r2, [sp, #8]
 8011884:	f107 0214 	add.w	r2, r7, #20
 8011888:	9201      	str	r2, [sp, #4]
 801188a:	9300      	str	r3, [sp, #0]
 801188c:	4623      	mov	r3, r4
 801188e:	460a      	mov	r2, r1
 8011890:	68b9      	ldr	r1, [r7, #8]
 8011892:	f005 fe8e 	bl	80175b2 <SecureElementProcessJoinAccept>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d001      	beq.n	80118a0 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801189c:	230e      	movs	r3, #14
 801189e:	e0a8      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6818      	ldr	r0, [r3, #0]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	791b      	ldrb	r3, [r3, #4]
 80118a8:	461a      	mov	r2, r3
 80118aa:	f107 0314 	add.w	r3, r7, #20
 80118ae:	4619      	mov	r1, r3
 80118b0:	f005 ffd7 	bl	8017862 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 f9ed 	bl	8011c94 <LoRaMacParserJoinAccept>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d001      	beq.n	80118c4 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80118c0:	230f      	movs	r3, #15
 80118c2:	e096      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80118c4:	2300      	movs	r3, #0
 80118c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	799b      	ldrb	r3, [r3, #6]
 80118ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	79db      	ldrb	r3, [r3, #7]
 80118d4:	021b      	lsls	r3, r3, #8
 80118d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80118d8:	4313      	orrs	r3, r2
 80118da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	7a1b      	ldrb	r3, [r3, #8]
 80118e0:	041b      	lsls	r3, r3, #16
 80118e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80118e4:	4313      	orrs	r3, r2
 80118e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80118e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80118ea:	f7ff fe4d 	bl	8011588 <IsJoinNonce10xOk>
 80118ee:	4603      	mov	r3, r0
 80118f0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 80118f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d010      	beq.n	801191e <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80118fc:	4b3f      	ldr	r3, [pc, #252]	@ (80119fc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011902:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8011904:	7cfb      	ldrb	r3, [r7, #19]
 8011906:	210b      	movs	r1, #11
 8011908:	4618      	mov	r0, r3
 801190a:	f000 f989 	bl	8011c20 <LoRaMacCryptoDeriveLifeTimeKey>
 801190e:	4603      	mov	r3, r0
 8011910:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011914:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011918:	2b00      	cmp	r3, #0
 801191a:	d005      	beq.n	8011928 <LoRaMacCryptoHandleJoinAccept+0xf8>
 801191c:	e001      	b.n	8011922 <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801191e:	2303      	movs	r3, #3
 8011920:	e067      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8011922:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011926:	e064      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8011928:	210c      	movs	r1, #12
 801192a:	2000      	movs	r0, #0
 801192c:	f000 f978 	bl	8011c20 <LoRaMacCryptoDeriveLifeTimeKey>
 8011930:	4603      	mov	r3, r0
 8011932:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011936:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801193a:	2b00      	cmp	r3, #0
 801193c:	d002      	beq.n	8011944 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 801193e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011942:	e056      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8011944:	210a      	movs	r1, #10
 8011946:	2000      	movs	r0, #0
 8011948:	f000 f96a 	bl	8011c20 <LoRaMacCryptoDeriveLifeTimeKey>
 801194c:	4603      	mov	r3, r0
 801194e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011952:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011956:	2b00      	cmp	r3, #0
 8011958:	d002      	beq.n	8011960 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 801195a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801195e:	e048      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	7a5b      	ldrb	r3, [r3, #9]
 8011964:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	7a9b      	ldrb	r3, [r3, #10]
 801196a:	021b      	lsls	r3, r3, #8
 801196c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801196e:	4313      	orrs	r3, r2
 8011970:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	7adb      	ldrb	r3, [r3, #11]
 8011976:	041b      	lsls	r3, r3, #16
 8011978:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801197a:	4313      	orrs	r3, r2
 801197c:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801197e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011982:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011986:	2009      	movs	r0, #9
 8011988:	f7ff fcdc 	bl	8011344 <DeriveSessionKey10x>
 801198c:	4603      	mov	r3, r0
 801198e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011992:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011996:	2b00      	cmp	r3, #0
 8011998:	d002      	beq.n	80119a0 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 801199a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801199e:	e028      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80119a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80119a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80119a8:	2008      	movs	r0, #8
 80119aa:	f7ff fccb 	bl	8011344 <DeriveSessionKey10x>
 80119ae:	4603      	mov	r3, r0
 80119b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80119b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d002      	beq.n	80119c2 <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 80119bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80119c0:	e017      	b.n	80119f2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80119c2:	4b0e      	ldr	r3, [pc, #56]	@ (80119fc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	7cfa      	ldrb	r2, [r7, #19]
 80119c8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80119ca:	4b0c      	ldr	r3, [pc, #48]	@ (80119fc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2200      	movs	r2, #0
 80119d0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80119d2:	4b0a      	ldr	r3, [pc, #40]	@ (80119fc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	f04f 32ff 	mov.w	r2, #4294967295
 80119da:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80119dc:	4b07      	ldr	r3, [pc, #28]	@ (80119fc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f04f 32ff 	mov.w	r2, #4294967295
 80119e4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80119e6:	4b05      	ldr	r3, [pc, #20]	@ (80119fc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f04f 32ff 	mov.w	r2, #4294967295
 80119ee:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	374c      	adds	r7, #76	@ 0x4c
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd90      	pop	{r4, r7, pc}
 80119fa:	bf00      	nop
 80119fc:	2000121c 	.word	0x2000121c

08011a00 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8011a00:	b590      	push	{r4, r7, lr}
 8011a02:	b08b      	sub	sp, #44	@ 0x2c
 8011a04:	af04      	add	r7, sp, #16
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	607b      	str	r3, [r7, #4]
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	72fb      	strb	r3, [r7, #11]
 8011a0e:	4613      	mov	r3, r2
 8011a10:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011a12:	2312      	movs	r3, #18
 8011a14:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8011a16:	2309      	movs	r3, #9
 8011a18:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d101      	bne.n	8011a24 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011a20:	2309      	movs	r3, #9
 8011a22:	e05e      	b.n	8011ae2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8011a24:	4b31      	ldr	r3, [pc, #196]	@ (8011aec <LoRaMacCryptoSecureMessage+0xec>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	68db      	ldr	r3, [r3, #12]
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d201      	bcs.n	8011a34 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8011a30:	2306      	movs	r3, #6
 8011a32:	e056      	b.n	8011ae2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d101      	bne.n	8011a42 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011a3e:	2308      	movs	r3, #8
 8011a40:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8011a42:	4b2a      	ldr	r3, [pc, #168]	@ (8011aec <LoRaMacCryptoSecureMessage+0xec>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	68db      	ldr	r3, [r3, #12]
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d916      	bls.n	8011a7c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a58:	b219      	sxth	r1, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	689c      	ldr	r4, [r3, #8]
 8011a5e:	7dfa      	ldrb	r2, [r7, #23]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	9301      	str	r3, [sp, #4]
 8011a64:	2300      	movs	r3, #0
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	4623      	mov	r3, r4
 8011a6a:	f7ff fa79 	bl	8010f60 <PayloadEncrypt>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a72:	7dbb      	ldrb	r3, [r7, #22]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d001      	beq.n	8011a7c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8011a78:	7dbb      	ldrb	r3, [r7, #22]
 8011a7a:	e032      	b.n	8011ae2 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 fb48 	bl	8012112 <LoRaMacSerializerData>
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d001      	beq.n	8011a8c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011a88:	2310      	movs	r3, #16
 8011a8a:	e02a      	b.n	8011ae2 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011a8c:	2308      	movs	r3, #8
 8011a8e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6818      	ldr	r0, [r3, #0]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	791b      	ldrb	r3, [r3, #4]
 8011a98:	3b04      	subs	r3, #4
 8011a9a:	b299      	uxth	r1, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	687a      	ldr	r2, [r7, #4]
 8011aa2:	322c      	adds	r2, #44	@ 0x2c
 8011aa4:	7dfc      	ldrb	r4, [r7, #23]
 8011aa6:	9203      	str	r2, [sp, #12]
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	9202      	str	r2, [sp, #8]
 8011aac:	9301      	str	r3, [sp, #4]
 8011aae:	2300      	movs	r3, #0
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	4622      	mov	r2, r4
 8011ab6:	f7ff fb52 	bl	801115e <ComputeCmacB0>
 8011aba:	4603      	mov	r3, r0
 8011abc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011abe:	7dbb      	ldrb	r3, [r7, #22]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d001      	beq.n	8011ac8 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8011ac4:	7dbb      	ldrb	r3, [r7, #22]
 8011ac6:	e00c      	b.n	8011ae2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fb22 	bl	8012112 <LoRaMacSerializerData>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011ad4:	2310      	movs	r3, #16
 8011ad6:	e004      	b.n	8011ae2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8011ad8:	4b04      	ldr	r3, [pc, #16]	@ (8011aec <LoRaMacCryptoSecureMessage+0xec>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8011ae0:	2300      	movs	r3, #0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	371c      	adds	r7, #28
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd90      	pop	{r4, r7, pc}
 8011aea:	bf00      	nop
 8011aec:	2000121c 	.word	0x2000121c

08011af0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8011af0:	b590      	push	{r4, r7, lr}
 8011af2:	b08b      	sub	sp, #44	@ 0x2c
 8011af4:	af04      	add	r7, sp, #16
 8011af6:	60b9      	str	r1, [r7, #8]
 8011af8:	607b      	str	r3, [r7, #4]
 8011afa:	4603      	mov	r3, r0
 8011afc:	73fb      	strb	r3, [r7, #15]
 8011afe:	4613      	mov	r3, r2
 8011b00:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8011b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d101      	bne.n	8011b0c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011b08:	2309      	movs	r3, #9
 8011b0a:	e083      	b.n	8011c14 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8011b0c:	7bbb      	ldrb	r3, [r7, #14]
 8011b0e:	6879      	ldr	r1, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff fca1 	bl	8011458 <CheckFCntDown>
 8011b16:	4603      	mov	r3, r0
 8011b18:	f083 0301 	eor.w	r3, r3, #1
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d001      	beq.n	8011b26 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8011b22:	2306      	movs	r3, #6
 8011b24:	e076      	b.n	8011c14 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011b26:	2312      	movs	r3, #18
 8011b28:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8011b2a:	2309      	movs	r3, #9
 8011b2c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8011b2e:	2308      	movs	r3, #8
 8011b30:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b34:	f000 f979 	bl	8011e2a <LoRaMacParserData>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d001      	beq.n	8011b42 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011b3e:	230f      	movs	r3, #15
 8011b40:	e068      	b.n	8011c14 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8011b42:	f107 0210 	add.w	r2, r7, #16
 8011b46:	7bfb      	ldrb	r3, [r7, #15]
 8011b48:	4611      	mov	r1, r2
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7ff fbd4 	bl	80112f8 <GetKeyAddrItem>
 8011b50:	4603      	mov	r3, r0
 8011b52:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011b54:	7d7b      	ldrb	r3, [r7, #21]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8011b5a:	7d7b      	ldrb	r3, [r7, #21]
 8011b5c:	e05a      	b.n	8011c14 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	785b      	ldrb	r3, [r3, #1]
 8011b62:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	789b      	ldrb	r3, [r3, #2]
 8011b68:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8011b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b6c:	689b      	ldr	r3, [r3, #8]
 8011b6e:	68ba      	ldr	r2, [r7, #8]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d001      	beq.n	8011b78 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8011b74:	2302      	movs	r3, #2
 8011b76:	e04d      	b.n	8011c14 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8011b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b7a:	7b1b      	ldrb	r3, [r3, #12]
 8011b7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bf14      	ite	ne
 8011b86:	2301      	movne	r3, #1
 8011b88:	2300      	moveq	r3, #0
 8011b8a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8011b8c:	4b23      	ldr	r3, [pc, #140]	@ (8011c1c <LoRaMacCryptoUnsecureMessage+0x12c>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	789b      	ldrb	r3, [r3, #2]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d101      	bne.n	8011b9a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8011b96:	2300      	movs	r3, #0
 8011b98:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8011b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b9c:	6818      	ldr	r0, [r3, #0]
 8011b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba0:	791b      	ldrb	r3, [r3, #4]
 8011ba2:	3b04      	subs	r3, #4
 8011ba4:	b299      	uxth	r1, r3
 8011ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011baa:	7dbc      	ldrb	r4, [r7, #22]
 8011bac:	7d3a      	ldrb	r2, [r7, #20]
 8011bae:	9303      	str	r3, [sp, #12]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	9302      	str	r3, [sp, #8]
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	9301      	str	r3, [sp, #4]
 8011bb8:	2301      	movs	r3, #1
 8011bba:	9300      	str	r3, [sp, #0]
 8011bbc:	4623      	mov	r3, r4
 8011bbe:	f7ff fb0c 	bl	80111da <VerifyCmacB0>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011bc6:	7d7b      	ldrb	r3, [r7, #21]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d001      	beq.n	8011bd0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8011bcc:	7d7b      	ldrb	r3, [r7, #21]
 8011bce:	e021      	b.n	8011c14 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8011bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d101      	bne.n	8011bde <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011bda:	2308      	movs	r3, #8
 8011bdc:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8011bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011be8:	b219      	sxth	r1, r3
 8011bea:	7dfa      	ldrb	r2, [r7, #23]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	f7ff f9b3 	bl	8010f60 <PayloadEncrypt>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011bfe:	7d7b      	ldrb	r3, [r7, #21]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d001      	beq.n	8011c08 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8011c04:	7d7b      	ldrb	r3, [r7, #21]
 8011c06:	e005      	b.n	8011c14 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8011c08:	7bbb      	ldrb	r3, [r7, #14]
 8011c0a:	6879      	ldr	r1, [r7, #4]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7ff fc47 	bl	80114a0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	371c      	adds	r7, #28
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd90      	pop	{r4, r7, pc}
 8011c1c:	2000121c 	.word	0x2000121c

08011c20 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b088      	sub	sp, #32
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	4603      	mov	r3, r0
 8011c28:	460a      	mov	r2, r1
 8011c2a:	71fb      	strb	r3, [r7, #7]
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8011c30:	f107 030c 	add.w	r3, r7, #12
 8011c34:	2200      	movs	r2, #0
 8011c36:	601a      	str	r2, [r3, #0]
 8011c38:	605a      	str	r2, [r3, #4]
 8011c3a:	609a      	str	r2, [r3, #8]
 8011c3c:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8011c42:	79bb      	ldrb	r3, [r7, #6]
 8011c44:	2b0c      	cmp	r3, #12
 8011c46:	d00b      	beq.n	8011c60 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8011c48:	2b0c      	cmp	r3, #12
 8011c4a:	dc0f      	bgt.n	8011c6c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8011c4c:	2b0a      	cmp	r3, #10
 8011c4e:	d00a      	beq.n	8011c66 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8011c50:	2b0b      	cmp	r3, #11
 8011c52:	d10b      	bne.n	8011c6c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8011c54:	79fb      	ldrb	r3, [r7, #7]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d10a      	bne.n	8011c70 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8011c5a:	2320      	movs	r3, #32
 8011c5c:	733b      	strb	r3, [r7, #12]
            }
            break;
 8011c5e:	e007      	b.n	8011c70 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8011c60:	230b      	movs	r3, #11
 8011c62:	77fb      	strb	r3, [r7, #31]
            break;
 8011c64:	e005      	b.n	8011c72 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8011c66:	2330      	movs	r3, #48	@ 0x30
 8011c68:	733b      	strb	r3, [r7, #12]
            break;
 8011c6a:	e002      	b.n	8011c72 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011c6c:	230a      	movs	r3, #10
 8011c6e:	e00d      	b.n	8011c8c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8011c70:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011c72:	79ba      	ldrb	r2, [r7, #6]
 8011c74:	7ff9      	ldrb	r1, [r7, #31]
 8011c76:	f107 030c 	add.w	r3, r7, #12
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f005 fc5a 	bl	8017534 <SecureElementDeriveAndStoreKey>
 8011c80:	4603      	mov	r3, r0
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d001      	beq.n	8011c8a <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011c86:	230e      	movs	r3, #14
 8011c88:	e000      	b.n	8011c8c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3720      	adds	r7, #32
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d003      	beq.n	8011caa <LoRaMacParserJoinAccept+0x16>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d101      	bne.n	8011cae <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011caa:	2302      	movs	r3, #2
 8011cac:	e0b9      	b.n	8011e22 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	89fb      	ldrh	r3, [r7, #14]
 8011cb8:	1c59      	adds	r1, r3, #1
 8011cba:	81f9      	strh	r1, [r7, #14]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	781a      	ldrb	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	1d98      	adds	r0, r3, #6
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	89fb      	ldrh	r3, [r7, #14]
 8011cce:	4413      	add	r3, r2
 8011cd0:	2203      	movs	r2, #3
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	f005 fdc5 	bl	8017862 <memcpy1>
    bufItr = bufItr + 3;
 8011cd8:	89fb      	ldrh	r3, [r7, #14]
 8011cda:	3303      	adds	r3, #3
 8011cdc:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f103 0009 	add.w	r0, r3, #9
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	89fb      	ldrh	r3, [r7, #14]
 8011cea:	4413      	add	r3, r2
 8011cec:	2203      	movs	r2, #3
 8011cee:	4619      	mov	r1, r3
 8011cf0:	f005 fdb7 	bl	8017862 <memcpy1>
    bufItr = bufItr + 3;
 8011cf4:	89fb      	ldrh	r3, [r7, #14]
 8011cf6:	3303      	adds	r3, #3
 8011cf8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	89fb      	ldrh	r3, [r7, #14]
 8011d00:	1c59      	adds	r1, r3, #1
 8011d02:	81f9      	strh	r1, [r7, #14]
 8011d04:	4413      	add	r3, r2
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	461a      	mov	r2, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	89fb      	ldrh	r3, [r7, #14]
 8011d14:	1c59      	adds	r1, r3, #1
 8011d16:	81f9      	strh	r1, [r7, #14]
 8011d18:	4413      	add	r3, r2
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	021a      	lsls	r2, r3, #8
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	68db      	ldr	r3, [r3, #12]
 8011d22:	431a      	orrs	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	89fb      	ldrh	r3, [r7, #14]
 8011d2e:	1c59      	adds	r1, r3, #1
 8011d30:	81f9      	strh	r1, [r7, #14]
 8011d32:	4413      	add	r3, r2
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	041a      	lsls	r2, r3, #16
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	431a      	orrs	r2, r3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	89fb      	ldrh	r3, [r7, #14]
 8011d48:	1c59      	adds	r1, r3, #1
 8011d4a:	81f9      	strh	r1, [r7, #14]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	061a      	lsls	r2, r3, #24
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	431a      	orrs	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	89fb      	ldrh	r3, [r7, #14]
 8011d62:	1c59      	adds	r1, r3, #1
 8011d64:	81f9      	strh	r1, [r7, #14]
 8011d66:	4413      	add	r3, r2
 8011d68:	781a      	ldrb	r2, [r3, #0]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	89fb      	ldrh	r3, [r7, #14]
 8011d74:	1c59      	adds	r1, r3, #1
 8011d76:	81f9      	strh	r1, [r7, #14]
 8011d78:	4413      	add	r3, r2
 8011d7a:	781a      	ldrb	r2, [r3, #0]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	791b      	ldrb	r3, [r3, #4]
 8011d84:	1f1a      	subs	r2, r3, #4
 8011d86:	89fb      	ldrh	r3, [r7, #14]
 8011d88:	1ad3      	subs	r3, r2, r3
 8011d8a:	2b10      	cmp	r3, #16
 8011d8c:	d10e      	bne.n	8011dac <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f103 0012 	add.w	r0, r3, #18
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	89fb      	ldrh	r3, [r7, #14]
 8011d9a:	4413      	add	r3, r2
 8011d9c:	2210      	movs	r2, #16
 8011d9e:	4619      	mov	r1, r3
 8011da0:	f005 fd5f 	bl	8017862 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8011da4:	89fb      	ldrh	r3, [r7, #14]
 8011da6:	3310      	adds	r3, #16
 8011da8:	81fb      	strh	r3, [r7, #14]
 8011daa:	e008      	b.n	8011dbe <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	791b      	ldrb	r3, [r3, #4]
 8011db0:	1f1a      	subs	r2, r3, #4
 8011db2:	89fb      	ldrh	r3, [r7, #14]
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	dd01      	ble.n	8011dbe <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	e031      	b.n	8011e22 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	89fb      	ldrh	r3, [r7, #14]
 8011dc4:	1c59      	adds	r1, r3, #1
 8011dc6:	81f9      	strh	r1, [r7, #14]
 8011dc8:	4413      	add	r3, r2
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	461a      	mov	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	89fb      	ldrh	r3, [r7, #14]
 8011dd8:	1c59      	adds	r1, r3, #1
 8011dda:	81f9      	strh	r1, [r7, #14]
 8011ddc:	4413      	add	r3, r2
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	021a      	lsls	r2, r3, #8
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011de6:	431a      	orrs	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	89fb      	ldrh	r3, [r7, #14]
 8011df2:	1c59      	adds	r1, r3, #1
 8011df4:	81f9      	strh	r1, [r7, #14]
 8011df6:	4413      	add	r3, r2
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	041a      	lsls	r2, r3, #16
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e00:	431a      	orrs	r2, r3
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	89fb      	ldrh	r3, [r7, #14]
 8011e0c:	1c59      	adds	r1, r3, #1
 8011e0e:	81f9      	strh	r1, [r7, #14]
 8011e10:	4413      	add	r3, r2
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	061a      	lsls	r2, r3, #24
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e1a:	431a      	orrs	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3710      	adds	r7, #16
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b084      	sub	sp, #16
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d003      	beq.n	8011e40 <LoRaMacParserData+0x16>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d101      	bne.n	8011e44 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011e40:	2302      	movs	r3, #2
 8011e42:	e0e0      	b.n	8012006 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	89fb      	ldrh	r3, [r7, #14]
 8011e4e:	1c59      	adds	r1, r3, #1
 8011e50:	81f9      	strh	r1, [r7, #14]
 8011e52:	4413      	add	r3, r2
 8011e54:	781a      	ldrb	r2, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	89fb      	ldrh	r3, [r7, #14]
 8011e60:	1c59      	adds	r1, r3, #1
 8011e62:	81f9      	strh	r1, [r7, #14]
 8011e64:	4413      	add	r3, r2
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	461a      	mov	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	89fb      	ldrh	r3, [r7, #14]
 8011e74:	1c59      	adds	r1, r3, #1
 8011e76:	81f9      	strh	r1, [r7, #14]
 8011e78:	4413      	add	r3, r2
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	021a      	lsls	r2, r3, #8
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	431a      	orrs	r2, r3
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	89fb      	ldrh	r3, [r7, #14]
 8011e8e:	1c59      	adds	r1, r3, #1
 8011e90:	81f9      	strh	r1, [r7, #14]
 8011e92:	4413      	add	r3, r2
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	041a      	lsls	r2, r3, #16
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	689b      	ldr	r3, [r3, #8]
 8011e9c:	431a      	orrs	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	89fb      	ldrh	r3, [r7, #14]
 8011ea8:	1c59      	adds	r1, r3, #1
 8011eaa:	81f9      	strh	r1, [r7, #14]
 8011eac:	4413      	add	r3, r2
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	061a      	lsls	r2, r3, #24
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	431a      	orrs	r2, r3
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	89fb      	ldrh	r3, [r7, #14]
 8011ec2:	1c59      	adds	r1, r3, #1
 8011ec4:	81f9      	strh	r1, [r7, #14]
 8011ec6:	4413      	add	r3, r2
 8011ec8:	781a      	ldrb	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	89fb      	ldrh	r3, [r7, #14]
 8011ed4:	1c59      	adds	r1, r3, #1
 8011ed6:	81f9      	strh	r1, [r7, #14]
 8011ed8:	4413      	add	r3, r2
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	461a      	mov	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	89fb      	ldrh	r3, [r7, #14]
 8011ee8:	1c59      	adds	r1, r3, #1
 8011eea:	81f9      	strh	r1, [r7, #14]
 8011eec:	4413      	add	r3, r2
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	0219      	lsls	r1, r3, #8
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	89db      	ldrh	r3, [r3, #14]
 8011ef6:	b21a      	sxth	r2, r3
 8011ef8:	b20b      	sxth	r3, r1
 8011efa:	4313      	orrs	r3, r2
 8011efc:	b21b      	sxth	r3, r3
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f103 0010 	add.w	r0, r3, #16
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	89fb      	ldrh	r3, [r7, #14]
 8011f10:	18d1      	adds	r1, r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	7b1b      	ldrb	r3, [r3, #12]
 8011f16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	f005 fca0 	bl	8017862 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	7b1b      	ldrb	r3, [r3, #12]
 8011f26:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	89fb      	ldrh	r3, [r7, #14]
 8011f30:	4413      	add	r3, r2
 8011f32:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2200      	movs	r2, #0
 8011f38:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	791b      	ldrb	r3, [r3, #4]
 8011f48:	461a      	mov	r2, r3
 8011f4a:	89fb      	ldrh	r3, [r7, #14]
 8011f4c:	1ad3      	subs	r3, r2, r3
 8011f4e:	2b04      	cmp	r3, #4
 8011f50:	dd27      	ble.n	8011fa2 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	89fb      	ldrh	r3, [r7, #14]
 8011f58:	1c59      	adds	r1, r3, #1
 8011f5a:	81f9      	strh	r1, [r7, #14]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	781a      	ldrb	r2, [r3, #0]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	791a      	ldrb	r2, [r3, #4]
 8011f6a:	89fb      	ldrh	r3, [r7, #14]
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	1ad3      	subs	r3, r2, r3
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	3b04      	subs	r3, #4
 8011f74:	b2da      	uxtb	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681a      	ldr	r2, [r3, #0]
 8011f84:	89fb      	ldrh	r3, [r7, #14]
 8011f86:	18d1      	adds	r1, r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f8e:	461a      	mov	r2, r3
 8011f90:	f005 fc67 	bl	8017862 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	89fb      	ldrh	r3, [r7, #14]
 8011f9e:	4413      	add	r3, r2
 8011fa0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	791b      	ldrb	r3, [r3, #4]
 8011faa:	3b04      	subs	r3, #4
 8011fac:	4413      	add	r3, r2
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6819      	ldr	r1, [r3, #0]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	791b      	ldrb	r3, [r3, #4]
 8011fc2:	3b03      	subs	r3, #3
 8011fc4:	440b      	add	r3, r1
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	021b      	lsls	r3, r3, #8
 8011fca:	431a      	orrs	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6819      	ldr	r1, [r3, #0]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	791b      	ldrb	r3, [r3, #4]
 8011fdc:	3b02      	subs	r3, #2
 8011fde:	440b      	add	r3, r1
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	041b      	lsls	r3, r3, #16
 8011fe4:	431a      	orrs	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6819      	ldr	r1, [r3, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	791b      	ldrb	r3, [r3, #4]
 8011ff6:	3b01      	subs	r3, #1
 8011ff8:	440b      	add	r3, r1
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	061b      	lsls	r3, r3, #24
 8011ffe:	431a      	orrs	r2, r3
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012004:	2300      	movs	r3, #0
}
 8012006:	4618      	mov	r0, r3
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b084      	sub	sp, #16
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d003      	beq.n	8012024 <LoRaMacSerializerJoinRequest+0x16>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d101      	bne.n	8012028 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012024:	2301      	movs	r3, #1
 8012026:	e070      	b.n	801210a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	791b      	ldrb	r3, [r3, #4]
 8012030:	2b16      	cmp	r3, #22
 8012032:	d801      	bhi.n	8012038 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012034:	2302      	movs	r3, #2
 8012036:	e068      	b.n	801210a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	89fb      	ldrh	r3, [r7, #14]
 801203e:	1c59      	adds	r1, r3, #1
 8012040:	81f9      	strh	r1, [r7, #14]
 8012042:	4413      	add	r3, r2
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	7952      	ldrb	r2, [r2, #5]
 8012048:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	89fb      	ldrh	r3, [r7, #14]
 8012050:	18d0      	adds	r0, r2, r3
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	3306      	adds	r3, #6
 8012056:	2208      	movs	r2, #8
 8012058:	4619      	mov	r1, r3
 801205a:	f005 fc1d 	bl	8017898 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801205e:	89fb      	ldrh	r3, [r7, #14]
 8012060:	3308      	adds	r3, #8
 8012062:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	89fb      	ldrh	r3, [r7, #14]
 801206a:	18d0      	adds	r0, r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	330e      	adds	r3, #14
 8012070:	2208      	movs	r2, #8
 8012072:	4619      	mov	r1, r3
 8012074:	f005 fc10 	bl	8017898 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8012078:	89fb      	ldrh	r3, [r7, #14]
 801207a:	3308      	adds	r3, #8
 801207c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	8ad9      	ldrh	r1, [r3, #22]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	89fb      	ldrh	r3, [r7, #14]
 8012088:	1c58      	adds	r0, r3, #1
 801208a:	81f8      	strh	r0, [r7, #14]
 801208c:	4413      	add	r3, r2
 801208e:	b2ca      	uxtb	r2, r1
 8012090:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	8adb      	ldrh	r3, [r3, #22]
 8012096:	0a1b      	lsrs	r3, r3, #8
 8012098:	b299      	uxth	r1, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	89fb      	ldrh	r3, [r7, #14]
 80120a0:	1c58      	adds	r0, r3, #1
 80120a2:	81f8      	strh	r0, [r7, #14]
 80120a4:	4413      	add	r3, r2
 80120a6:	b2ca      	uxtb	r2, r1
 80120a8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6999      	ldr	r1, [r3, #24]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	89fb      	ldrh	r3, [r7, #14]
 80120b4:	1c58      	adds	r0, r3, #1
 80120b6:	81f8      	strh	r0, [r7, #14]
 80120b8:	4413      	add	r3, r2
 80120ba:	b2ca      	uxtb	r2, r1
 80120bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	699b      	ldr	r3, [r3, #24]
 80120c2:	0a19      	lsrs	r1, r3, #8
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681a      	ldr	r2, [r3, #0]
 80120c8:	89fb      	ldrh	r3, [r7, #14]
 80120ca:	1c58      	adds	r0, r3, #1
 80120cc:	81f8      	strh	r0, [r7, #14]
 80120ce:	4413      	add	r3, r2
 80120d0:	b2ca      	uxtb	r2, r1
 80120d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	0c19      	lsrs	r1, r3, #16
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	89fb      	ldrh	r3, [r7, #14]
 80120e0:	1c58      	adds	r0, r3, #1
 80120e2:	81f8      	strh	r0, [r7, #14]
 80120e4:	4413      	add	r3, r2
 80120e6:	b2ca      	uxtb	r2, r1
 80120e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	699b      	ldr	r3, [r3, #24]
 80120ee:	0e19      	lsrs	r1, r3, #24
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	89fb      	ldrh	r3, [r7, #14]
 80120f6:	1c58      	adds	r0, r3, #1
 80120f8:	81f8      	strh	r0, [r7, #14]
 80120fa:	4413      	add	r3, r2
 80120fc:	b2ca      	uxtb	r2, r1
 80120fe:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012100:	89fb      	ldrh	r3, [r7, #14]
 8012102:	b2da      	uxtb	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b084      	sub	sp, #16
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d003      	beq.n	8012128 <LoRaMacSerializerData+0x16>
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d101      	bne.n	801212c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012128:	2301      	movs	r3, #1
 801212a:	e0e3      	b.n	80122f4 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801212c:	2300      	movs	r3, #0
 801212e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8012130:	2308      	movs	r3, #8
 8012132:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	7b1b      	ldrb	r3, [r3, #12]
 8012138:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801213c:	b2db      	uxtb	r3, r3
 801213e:	461a      	mov	r2, r3
 8012140:	89bb      	ldrh	r3, [r7, #12]
 8012142:	4413      	add	r3, r2
 8012144:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801214c:	2b00      	cmp	r3, #0
 801214e:	d002      	beq.n	8012156 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8012150:	89bb      	ldrh	r3, [r7, #12]
 8012152:	3301      	adds	r3, #1
 8012154:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801215c:	461a      	mov	r2, r3
 801215e:	89bb      	ldrh	r3, [r7, #12]
 8012160:	4413      	add	r3, r2
 8012162:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8012164:	89bb      	ldrh	r3, [r7, #12]
 8012166:	3304      	adds	r3, #4
 8012168:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	791b      	ldrb	r3, [r3, #4]
 801216e:	461a      	mov	r2, r3
 8012170:	89bb      	ldrh	r3, [r7, #12]
 8012172:	4293      	cmp	r3, r2
 8012174:	d901      	bls.n	801217a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012176:	2302      	movs	r3, #2
 8012178:	e0bc      	b.n	80122f4 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	89fb      	ldrh	r3, [r7, #14]
 8012180:	1c59      	adds	r1, r3, #1
 8012182:	81f9      	strh	r1, [r7, #14]
 8012184:	4413      	add	r3, r2
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	7952      	ldrb	r2, [r2, #5]
 801218a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6899      	ldr	r1, [r3, #8]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	89fb      	ldrh	r3, [r7, #14]
 8012196:	1c58      	adds	r0, r3, #1
 8012198:	81f8      	strh	r0, [r7, #14]
 801219a:	4413      	add	r3, r2
 801219c:	b2ca      	uxtb	r2, r1
 801219e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	0a19      	lsrs	r1, r3, #8
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681a      	ldr	r2, [r3, #0]
 80121aa:	89fb      	ldrh	r3, [r7, #14]
 80121ac:	1c58      	adds	r0, r3, #1
 80121ae:	81f8      	strh	r0, [r7, #14]
 80121b0:	4413      	add	r3, r2
 80121b2:	b2ca      	uxtb	r2, r1
 80121b4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	689b      	ldr	r3, [r3, #8]
 80121ba:	0c19      	lsrs	r1, r3, #16
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	89fb      	ldrh	r3, [r7, #14]
 80121c2:	1c58      	adds	r0, r3, #1
 80121c4:	81f8      	strh	r0, [r7, #14]
 80121c6:	4413      	add	r3, r2
 80121c8:	b2ca      	uxtb	r2, r1
 80121ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	0e19      	lsrs	r1, r3, #24
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	89fb      	ldrh	r3, [r7, #14]
 80121d8:	1c58      	adds	r0, r3, #1
 80121da:	81f8      	strh	r0, [r7, #14]
 80121dc:	4413      	add	r3, r2
 80121de:	b2ca      	uxtb	r2, r1
 80121e0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	89fb      	ldrh	r3, [r7, #14]
 80121e8:	1c59      	adds	r1, r3, #1
 80121ea:	81f9      	strh	r1, [r7, #14]
 80121ec:	4413      	add	r3, r2
 80121ee:	687a      	ldr	r2, [r7, #4]
 80121f0:	7b12      	ldrb	r2, [r2, #12]
 80121f2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	89d9      	ldrh	r1, [r3, #14]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	89fb      	ldrh	r3, [r7, #14]
 80121fe:	1c58      	adds	r0, r3, #1
 8012200:	81f8      	strh	r0, [r7, #14]
 8012202:	4413      	add	r3, r2
 8012204:	b2ca      	uxtb	r2, r1
 8012206:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	89db      	ldrh	r3, [r3, #14]
 801220c:	0a1b      	lsrs	r3, r3, #8
 801220e:	b299      	uxth	r1, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	89fb      	ldrh	r3, [r7, #14]
 8012216:	1c58      	adds	r0, r3, #1
 8012218:	81f8      	strh	r0, [r7, #14]
 801221a:	4413      	add	r3, r2
 801221c:	b2ca      	uxtb	r2, r1
 801221e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681a      	ldr	r2, [r3, #0]
 8012224:	89fb      	ldrh	r3, [r7, #14]
 8012226:	18d0      	adds	r0, r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f103 0110 	add.w	r1, r3, #16
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	7b1b      	ldrb	r3, [r3, #12]
 8012232:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012236:	b2db      	uxtb	r3, r3
 8012238:	461a      	mov	r2, r3
 801223a:	f005 fb12 	bl	8017862 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	7b1b      	ldrb	r3, [r3, #12]
 8012242:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012246:	b2db      	uxtb	r3, r3
 8012248:	461a      	mov	r2, r3
 801224a:	89fb      	ldrh	r3, [r7, #14]
 801224c:	4413      	add	r3, r2
 801224e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012256:	2b00      	cmp	r3, #0
 8012258:	d009      	beq.n	801226e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681a      	ldr	r2, [r3, #0]
 801225e:	89fb      	ldrh	r3, [r7, #14]
 8012260:	1c59      	adds	r1, r3, #1
 8012262:	81f9      	strh	r1, [r7, #14]
 8012264:	4413      	add	r3, r2
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	f892 2020 	ldrb.w	r2, [r2, #32]
 801226c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	89fb      	ldrh	r3, [r7, #14]
 8012274:	18d0      	adds	r0, r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012280:	461a      	mov	r2, r3
 8012282:	f005 faee 	bl	8017862 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801228c:	461a      	mov	r2, r3
 801228e:	89fb      	ldrh	r3, [r7, #14]
 8012290:	4413      	add	r3, r2
 8012292:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	89fb      	ldrh	r3, [r7, #14]
 801229e:	1c58      	adds	r0, r3, #1
 80122a0:	81f8      	strh	r0, [r7, #14]
 80122a2:	4413      	add	r3, r2
 80122a4:	b2ca      	uxtb	r2, r1
 80122a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122ac:	0a19      	lsrs	r1, r3, #8
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	89fb      	ldrh	r3, [r7, #14]
 80122b4:	1c58      	adds	r0, r3, #1
 80122b6:	81f8      	strh	r0, [r7, #14]
 80122b8:	4413      	add	r3, r2
 80122ba:	b2ca      	uxtb	r2, r1
 80122bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c2:	0c19      	lsrs	r1, r3, #16
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	89fb      	ldrh	r3, [r7, #14]
 80122ca:	1c58      	adds	r0, r3, #1
 80122cc:	81f8      	strh	r0, [r7, #14]
 80122ce:	4413      	add	r3, r2
 80122d0:	b2ca      	uxtb	r2, r1
 80122d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122d8:	0e19      	lsrs	r1, r3, #24
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	89fb      	ldrh	r3, [r7, #14]
 80122e0:	1c58      	adds	r0, r3, #1
 80122e2:	81f8      	strh	r0, [r7, #14]
 80122e4:	4413      	add	r3, r2
 80122e6:	b2ca      	uxtb	r2, r1
 80122e8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80122ea:	89fb      	ldrh	r3, [r7, #14]
 80122ec:	b2da      	uxtb	r2, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80122f2:	2300      	movs	r3, #0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	4603      	mov	r3, r0
 8012304:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	2b05      	cmp	r3, #5
 801230a:	d002      	beq.n	8012312 <RegionIsActive+0x16>
 801230c:	2b08      	cmp	r3, #8
 801230e:	d002      	beq.n	8012316 <RegionIsActive+0x1a>
 8012310:	e003      	b.n	801231a <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8012312:	2301      	movs	r3, #1
 8012314:	e002      	b.n	801231c <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8012316:	2301      	movs	r3, #1
 8012318:	e000      	b.n	801231c <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801231a:	2300      	movs	r3, #0
        }
    }
}
 801231c:	4618      	mov	r0, r3
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	bc80      	pop	{r7}
 8012324:	4770      	bx	lr

08012326 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012326:	b580      	push	{r7, lr}
 8012328:	b084      	sub	sp, #16
 801232a:	af00      	add	r7, sp, #0
 801232c:	4603      	mov	r3, r0
 801232e:	6039      	str	r1, [r7, #0]
 8012330:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8012332:	2300      	movs	r3, #0
 8012334:	60bb      	str	r3, [r7, #8]
    switch( region )
 8012336:	79fb      	ldrb	r3, [r7, #7]
 8012338:	2b05      	cmp	r3, #5
 801233a:	d002      	beq.n	8012342 <RegionGetPhyParam+0x1c>
 801233c:	2b08      	cmp	r3, #8
 801233e:	d006      	beq.n	801234e <RegionGetPhyParam+0x28>
 8012340:	e00b      	b.n	801235a <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8012342:	6838      	ldr	r0, [r7, #0]
 8012344:	f001 fad0 	bl	80138e8 <RegionEU868GetPhyParam>
 8012348:	4603      	mov	r3, r0
 801234a:	60fb      	str	r3, [r7, #12]
 801234c:	e007      	b.n	801235e <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801234e:	6838      	ldr	r0, [r7, #0]
 8012350:	f002 fc50 	bl	8014bf4 <RegionUS915GetPhyParam>
 8012354:	4603      	mov	r3, r0
 8012356:	60fb      	str	r3, [r7, #12]
 8012358:	e001      	b.n	801235e <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	4618      	mov	r0, r3
 8012362:	3710      	adds	r7, #16
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	4603      	mov	r3, r0
 8012370:	6039      	str	r1, [r7, #0]
 8012372:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012374:	79fb      	ldrb	r3, [r7, #7]
 8012376:	2b05      	cmp	r3, #5
 8012378:	d002      	beq.n	8012380 <RegionSetBandTxDone+0x18>
 801237a:	2b08      	cmp	r3, #8
 801237c:	d004      	beq.n	8012388 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801237e:	e006      	b.n	801238e <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8012380:	6838      	ldr	r0, [r7, #0]
 8012382:	f001 fbf7 	bl	8013b74 <RegionEU868SetBandTxDone>
 8012386:	e002      	b.n	801238e <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8012388:	6838      	ldr	r0, [r7, #0]
 801238a:	f002 fd8f 	bl	8014eac <RegionUS915SetBandTxDone>
        }
    }
}
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	4603      	mov	r3, r0
 801239c:	6039      	str	r1, [r7, #0]
 801239e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80123a0:	79fb      	ldrb	r3, [r7, #7]
 80123a2:	2b05      	cmp	r3, #5
 80123a4:	d002      	beq.n	80123ac <RegionInitDefaults+0x18>
 80123a6:	2b08      	cmp	r3, #8
 80123a8:	d004      	beq.n	80123b4 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80123aa:	e006      	b.n	80123ba <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 80123ac:	6838      	ldr	r0, [r7, #0]
 80123ae:	f001 fc0d 	bl	8013bcc <RegionEU868InitDefaults>
 80123b2:	e002      	b.n	80123ba <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80123b4:	6838      	ldr	r0, [r7, #0]
 80123b6:	f002 fda5 	bl	8014f04 <RegionUS915InitDefaults>
        }
    }
}
 80123ba:	bf00      	nop
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b082      	sub	sp, #8
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	4603      	mov	r3, r0
 80123ca:	6039      	str	r1, [r7, #0]
 80123cc:	71fb      	strb	r3, [r7, #7]
 80123ce:	4613      	mov	r3, r2
 80123d0:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80123d2:	79fb      	ldrb	r3, [r7, #7]
 80123d4:	2b05      	cmp	r3, #5
 80123d6:	d002      	beq.n	80123de <RegionVerify+0x1c>
 80123d8:	2b08      	cmp	r3, #8
 80123da:	d007      	beq.n	80123ec <RegionVerify+0x2a>
 80123dc:	e00d      	b.n	80123fa <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80123de:	79bb      	ldrb	r3, [r7, #6]
 80123e0:	4619      	mov	r1, r3
 80123e2:	6838      	ldr	r0, [r7, #0]
 80123e4:	f001 fc90 	bl	8013d08 <RegionEU868Verify>
 80123e8:	4603      	mov	r3, r0
 80123ea:	e007      	b.n	80123fc <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80123ec:	79bb      	ldrb	r3, [r7, #6]
 80123ee:	4619      	mov	r1, r3
 80123f0:	6838      	ldr	r0, [r7, #0]
 80123f2:	f002 feb9 	bl	8015168 <RegionUS915Verify>
 80123f6:	4603      	mov	r3, r0
 80123f8:	e000      	b.n	80123fc <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80123fa:	2300      	movs	r3, #0
        }
    }
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3708      	adds	r7, #8
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	4603      	mov	r3, r0
 801240c:	6039      	str	r1, [r7, #0]
 801240e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	2b05      	cmp	r3, #5
 8012414:	d002      	beq.n	801241c <RegionApplyCFList+0x18>
 8012416:	2b08      	cmp	r3, #8
 8012418:	d004      	beq.n	8012424 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801241a:	e006      	b.n	801242a <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 801241c:	6838      	ldr	r0, [r7, #0]
 801241e:	f001 fcef 	bl	8013e00 <RegionEU868ApplyCFList>
 8012422:	e002      	b.n	801242a <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8012424:	6838      	ldr	r0, [r7, #0]
 8012426:	f002 ff15 	bl	8015254 <RegionUS915ApplyCFList>
        }
    }
}
 801242a:	bf00      	nop
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b082      	sub	sp, #8
 8012436:	af00      	add	r7, sp, #0
 8012438:	4603      	mov	r3, r0
 801243a:	6039      	str	r1, [r7, #0]
 801243c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801243e:	79fb      	ldrb	r3, [r7, #7]
 8012440:	2b05      	cmp	r3, #5
 8012442:	d002      	beq.n	801244a <RegionChanMaskSet+0x18>
 8012444:	2b08      	cmp	r3, #8
 8012446:	d005      	beq.n	8012454 <RegionChanMaskSet+0x22>
 8012448:	e009      	b.n	801245e <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801244a:	6838      	ldr	r0, [r7, #0]
 801244c:	f001 fd4c 	bl	8013ee8 <RegionEU868ChanMaskSet>
 8012450:	4603      	mov	r3, r0
 8012452:	e005      	b.n	8012460 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8012454:	6838      	ldr	r0, [r7, #0]
 8012456:	f002 ff6f 	bl	8015338 <RegionUS915ChanMaskSet>
 801245a:	4603      	mov	r3, r0
 801245c:	e000      	b.n	8012460 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801245e:	2300      	movs	r3, #0
        }
    }
}
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
 801246e:	603b      	str	r3, [r7, #0]
 8012470:	4603      	mov	r3, r0
 8012472:	71fb      	strb	r3, [r7, #7]
 8012474:	460b      	mov	r3, r1
 8012476:	71bb      	strb	r3, [r7, #6]
 8012478:	4613      	mov	r3, r2
 801247a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801247c:	79fb      	ldrb	r3, [r7, #7]
 801247e:	2b05      	cmp	r3, #5
 8012480:	d002      	beq.n	8012488 <RegionComputeRxWindowParameters+0x20>
 8012482:	2b08      	cmp	r3, #8
 8012484:	d008      	beq.n	8012498 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8012486:	e00e      	b.n	80124a6 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012488:	7979      	ldrb	r1, [r7, #5]
 801248a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	f001 fd53 	bl	8013f3c <RegionEU868ComputeRxWindowParameters>
 8012496:	e006      	b.n	80124a6 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012498:	7979      	ldrb	r1, [r7, #5]
 801249a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	683a      	ldr	r2, [r7, #0]
 80124a2:	f002 ffb1 	bl	8015408 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 80124a6:	bf00      	nop
 80124a8:	3708      	adds	r7, #8
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b084      	sub	sp, #16
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	4603      	mov	r3, r0
 80124b6:	60b9      	str	r1, [r7, #8]
 80124b8:	607a      	str	r2, [r7, #4]
 80124ba:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80124bc:	7bfb      	ldrb	r3, [r7, #15]
 80124be:	2b05      	cmp	r3, #5
 80124c0:	d002      	beq.n	80124c8 <RegionRxConfig+0x1a>
 80124c2:	2b08      	cmp	r3, #8
 80124c4:	d006      	beq.n	80124d4 <RegionRxConfig+0x26>
 80124c6:	e00b      	b.n	80124e0 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80124c8:	6879      	ldr	r1, [r7, #4]
 80124ca:	68b8      	ldr	r0, [r7, #8]
 80124cc:	f001 fd90 	bl	8013ff0 <RegionEU868RxConfig>
 80124d0:	4603      	mov	r3, r0
 80124d2:	e006      	b.n	80124e2 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	68b8      	ldr	r0, [r7, #8]
 80124d8:	f002 ffe0 	bl	801549c <RegionUS915RxConfig>
 80124dc:	4603      	mov	r3, r0
 80124de:	e000      	b.n	80124e2 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80124e0:	2300      	movs	r3, #0
        }
    }
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}

080124ea <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80124ea:	b580      	push	{r7, lr}
 80124ec:	b084      	sub	sp, #16
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
 80124f4:	603b      	str	r3, [r7, #0]
 80124f6:	4603      	mov	r3, r0
 80124f8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80124fa:	7bfb      	ldrb	r3, [r7, #15]
 80124fc:	2b05      	cmp	r3, #5
 80124fe:	d002      	beq.n	8012506 <RegionTxConfig+0x1c>
 8012500:	2b08      	cmp	r3, #8
 8012502:	d007      	beq.n	8012514 <RegionTxConfig+0x2a>
 8012504:	e00d      	b.n	8012522 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8012506:	683a      	ldr	r2, [r7, #0]
 8012508:	6879      	ldr	r1, [r7, #4]
 801250a:	68b8      	ldr	r0, [r7, #8]
 801250c:	f001 fe40 	bl	8014190 <RegionEU868TxConfig>
 8012510:	4603      	mov	r3, r0
 8012512:	e007      	b.n	8012524 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8012514:	683a      	ldr	r2, [r7, #0]
 8012516:	6879      	ldr	r1, [r7, #4]
 8012518:	68b8      	ldr	r0, [r7, #8]
 801251a:	f003 f843 	bl	80155a4 <RegionUS915TxConfig>
 801251e:	4603      	mov	r3, r0
 8012520:	e000      	b.n	8012524 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8012522:	2300      	movs	r3, #0
        }
    }
}
 8012524:	4618      	mov	r0, r3
 8012526:	3710      	adds	r7, #16
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b086      	sub	sp, #24
 8012530:	af02      	add	r7, sp, #8
 8012532:	60b9      	str	r1, [r7, #8]
 8012534:	607a      	str	r2, [r7, #4]
 8012536:	603b      	str	r3, [r7, #0]
 8012538:	4603      	mov	r3, r0
 801253a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801253c:	7bfb      	ldrb	r3, [r7, #15]
 801253e:	2b05      	cmp	r3, #5
 8012540:	d002      	beq.n	8012548 <RegionLinkAdrReq+0x1c>
 8012542:	2b08      	cmp	r3, #8
 8012544:	d00a      	beq.n	801255c <RegionLinkAdrReq+0x30>
 8012546:	e013      	b.n	8012570 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	683a      	ldr	r2, [r7, #0]
 8012550:	6879      	ldr	r1, [r7, #4]
 8012552:	68b8      	ldr	r0, [r7, #8]
 8012554:	f001 feec 	bl	8014330 <RegionEU868LinkAdrReq>
 8012558:	4603      	mov	r3, r0
 801255a:	e00a      	b.n	8012572 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	6879      	ldr	r1, [r7, #4]
 8012566:	68b8      	ldr	r0, [r7, #8]
 8012568:	f003 f8c6 	bl	80156f8 <RegionUS915LinkAdrReq>
 801256c:	4603      	mov	r3, r0
 801256e:	e000      	b.n	8012572 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8012570:	2300      	movs	r3, #0
        }
    }
}
 8012572:	4618      	mov	r0, r3
 8012574:	3710      	adds	r7, #16
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b082      	sub	sp, #8
 801257e:	af00      	add	r7, sp, #0
 8012580:	4603      	mov	r3, r0
 8012582:	6039      	str	r1, [r7, #0]
 8012584:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012586:	79fb      	ldrb	r3, [r7, #7]
 8012588:	2b05      	cmp	r3, #5
 801258a:	d002      	beq.n	8012592 <RegionRxParamSetupReq+0x18>
 801258c:	2b08      	cmp	r3, #8
 801258e:	d005      	beq.n	801259c <RegionRxParamSetupReq+0x22>
 8012590:	e009      	b.n	80125a6 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8012592:	6838      	ldr	r0, [r7, #0]
 8012594:	f001 ffee 	bl	8014574 <RegionEU868RxParamSetupReq>
 8012598:	4603      	mov	r3, r0
 801259a:	e005      	b.n	80125a8 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801259c:	6838      	ldr	r0, [r7, #0]
 801259e:	f003 fac5 	bl	8015b2c <RegionUS915RxParamSetupReq>
 80125a2:	4603      	mov	r3, r0
 80125a4:	e000      	b.n	80125a8 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80125a6:	2300      	movs	r3, #0
        }
    }
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	4603      	mov	r3, r0
 80125b8:	6039      	str	r1, [r7, #0]
 80125ba:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	2b05      	cmp	r3, #5
 80125c0:	d002      	beq.n	80125c8 <RegionNewChannelReq+0x18>
 80125c2:	2b08      	cmp	r3, #8
 80125c4:	d005      	beq.n	80125d2 <RegionNewChannelReq+0x22>
 80125c6:	e009      	b.n	80125dc <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80125c8:	6838      	ldr	r0, [r7, #0]
 80125ca:	f002 f811 	bl	80145f0 <RegionEU868NewChannelReq>
 80125ce:	4603      	mov	r3, r0
 80125d0:	e005      	b.n	80125de <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80125d2:	6838      	ldr	r0, [r7, #0]
 80125d4:	f003 faf6 	bl	8015bc4 <RegionUS915NewChannelReq>
 80125d8:	4603      	mov	r3, r0
 80125da:	e000      	b.n	80125de <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80125dc:	2300      	movs	r3, #0
        }
    }
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3708      	adds	r7, #8
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b082      	sub	sp, #8
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	4603      	mov	r3, r0
 80125ee:	6039      	str	r1, [r7, #0]
 80125f0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	2b05      	cmp	r3, #5
 80125f6:	d002      	beq.n	80125fe <RegionTxParamSetupReq+0x18>
 80125f8:	2b08      	cmp	r3, #8
 80125fa:	d005      	beq.n	8012608 <RegionTxParamSetupReq+0x22>
 80125fc:	e009      	b.n	8012612 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80125fe:	6838      	ldr	r0, [r7, #0]
 8012600:	f002 f854 	bl	80146ac <RegionEU868TxParamSetupReq>
 8012604:	4603      	mov	r3, r0
 8012606:	e005      	b.n	8012614 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8012608:	6838      	ldr	r0, [r7, #0]
 801260a:	f003 fae6 	bl	8015bda <RegionUS915TxParamSetupReq>
 801260e:	4603      	mov	r3, r0
 8012610:	e000      	b.n	8012614 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012612:	2300      	movs	r3, #0
        }
    }
}
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	4603      	mov	r3, r0
 8012624:	6039      	str	r1, [r7, #0]
 8012626:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012628:	79fb      	ldrb	r3, [r7, #7]
 801262a:	2b05      	cmp	r3, #5
 801262c:	d002      	beq.n	8012634 <RegionDlChannelReq+0x18>
 801262e:	2b08      	cmp	r3, #8
 8012630:	d005      	beq.n	801263e <RegionDlChannelReq+0x22>
 8012632:	e009      	b.n	8012648 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8012634:	6838      	ldr	r0, [r7, #0]
 8012636:	f002 f845 	bl	80146c4 <RegionEU868DlChannelReq>
 801263a:	4603      	mov	r3, r0
 801263c:	e005      	b.n	801264a <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801263e:	6838      	ldr	r0, [r7, #0]
 8012640:	f003 fad6 	bl	8015bf0 <RegionUS915DlChannelReq>
 8012644:	4603      	mov	r3, r0
 8012646:	e000      	b.n	801264a <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012648:	2300      	movs	r3, #0
        }
    }
}
 801264a:	4618      	mov	r0, r3
 801264c:	3708      	adds	r7, #8
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b082      	sub	sp, #8
 8012656:	af00      	add	r7, sp, #0
 8012658:	4603      	mov	r3, r0
 801265a:	71fb      	strb	r3, [r7, #7]
 801265c:	460b      	mov	r3, r1
 801265e:	71bb      	strb	r3, [r7, #6]
 8012660:	4613      	mov	r3, r2
 8012662:	717b      	strb	r3, [r7, #5]
    switch( region )
 8012664:	79fb      	ldrb	r3, [r7, #7]
 8012666:	2b05      	cmp	r3, #5
 8012668:	d002      	beq.n	8012670 <RegionAlternateDr+0x1e>
 801266a:	2b08      	cmp	r3, #8
 801266c:	d009      	beq.n	8012682 <RegionAlternateDr+0x30>
 801266e:	e011      	b.n	8012694 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8012670:	797a      	ldrb	r2, [r7, #5]
 8012672:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012676:	4611      	mov	r1, r2
 8012678:	4618      	mov	r0, r3
 801267a:	f002 f86d 	bl	8014758 <RegionEU868AlternateDr>
 801267e:	4603      	mov	r3, r0
 8012680:	e009      	b.n	8012696 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8012682:	797a      	ldrb	r2, [r7, #5]
 8012684:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012688:	4611      	mov	r1, r2
 801268a:	4618      	mov	r0, r3
 801268c:	f003 fabc 	bl	8015c08 <RegionUS915AlternateDr>
 8012690:	4603      	mov	r3, r0
 8012692:	e000      	b.n	8012696 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8012694:	2300      	movs	r3, #0
        }
    }
}
 8012696:	4618      	mov	r0, r3
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}

0801269e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801269e:	b580      	push	{r7, lr}
 80126a0:	b084      	sub	sp, #16
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
 80126a8:	603b      	str	r3, [r7, #0]
 80126aa:	4603      	mov	r3, r0
 80126ac:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80126ae:	7bfb      	ldrb	r3, [r7, #15]
 80126b0:	2b05      	cmp	r3, #5
 80126b2:	d002      	beq.n	80126ba <RegionNextChannel+0x1c>
 80126b4:	2b08      	cmp	r3, #8
 80126b6:	d008      	beq.n	80126ca <RegionNextChannel+0x2c>
 80126b8:	e00f      	b.n	80126da <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	683a      	ldr	r2, [r7, #0]
 80126be:	6879      	ldr	r1, [r7, #4]
 80126c0:	68b8      	ldr	r0, [r7, #8]
 80126c2:	f002 f859 	bl	8014778 <RegionEU868NextChannel>
 80126c6:	4603      	mov	r3, r0
 80126c8:	e008      	b.n	80126dc <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 80126ca:	69bb      	ldr	r3, [r7, #24]
 80126cc:	683a      	ldr	r2, [r7, #0]
 80126ce:	6879      	ldr	r1, [r7, #4]
 80126d0:	68b8      	ldr	r0, [r7, #8]
 80126d2:	f003 facf 	bl	8015c74 <RegionUS915NextChannel>
 80126d6:	4603      	mov	r3, r0
 80126d8:	e000      	b.n	80126dc <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80126da:	2309      	movs	r3, #9
        }
    }
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3710      	adds	r7, #16
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80126e4:	b590      	push	{r4, r7, lr}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	4604      	mov	r4, r0
 80126ec:	4608      	mov	r0, r1
 80126ee:	4611      	mov	r1, r2
 80126f0:	461a      	mov	r2, r3
 80126f2:	4623      	mov	r3, r4
 80126f4:	71fb      	strb	r3, [r7, #7]
 80126f6:	4603      	mov	r3, r0
 80126f8:	71bb      	strb	r3, [r7, #6]
 80126fa:	460b      	mov	r3, r1
 80126fc:	717b      	strb	r3, [r7, #5]
 80126fe:	4613      	mov	r3, r2
 8012700:	713b      	strb	r3, [r7, #4]
    switch( region )
 8012702:	79fb      	ldrb	r3, [r7, #7]
 8012704:	2b05      	cmp	r3, #5
 8012706:	d002      	beq.n	801270e <RegionApplyDrOffset+0x2a>
 8012708:	2b08      	cmp	r3, #8
 801270a:	d00a      	beq.n	8012722 <RegionApplyDrOffset+0x3e>
 801270c:	e013      	b.n	8012736 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801270e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8012712:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012716:	79bb      	ldrb	r3, [r7, #6]
 8012718:	4618      	mov	r0, r3
 801271a:	f002 f9a7 	bl	8014a6c <RegionEU868ApplyDrOffset>
 801271e:	4603      	mov	r3, r0
 8012720:	e00a      	b.n	8012738 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8012722:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8012726:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801272a:	79bb      	ldrb	r3, [r7, #6]
 801272c:	4618      	mov	r0, r3
 801272e:	f003 fb8d 	bl	8015e4c <RegionUS915ApplyDrOffset>
 8012732:	4603      	mov	r3, r0
 8012734:	e000      	b.n	8012738 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8012736:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8012738:	4618      	mov	r0, r3
 801273a:	370c      	adds	r7, #12
 801273c:	46bd      	mov	sp, r7
 801273e:	bd90      	pop	{r4, r7, pc}

08012740 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8012746:	4b04      	ldr	r3, [pc, #16]	@ (8012758 <RegionGetVersion+0x18>)
 8012748:	607b      	str	r3, [r7, #4]

    return version;
 801274a:	687b      	ldr	r3, [r7, #4]
}
 801274c:	4618      	mov	r0, r3
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	bc80      	pop	{r7}
 8012754:	4770      	bx	lr
 8012756:	bf00      	nop
 8012758:	02010001 	.word	0x02010001

0801275c <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 801275c:	b480      	push	{r7}
 801275e:	b087      	sub	sp, #28
 8012760:	af00      	add	r7, sp, #0
 8012762:	4603      	mov	r3, r0
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
 8012768:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d002      	beq.n	8012776 <FindAvailable125kHzChannels+0x1a>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d101      	bne.n	801277a <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012776:	2303      	movs	r3, #3
 8012778:	e021      	b.n	80127be <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2200      	movs	r2, #0
 801277e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8012780:	2300      	movs	r3, #0
 8012782:	75fb      	strb	r3, [r7, #23]
 8012784:	e017      	b.n	80127b6 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8012786:	89fa      	ldrh	r2, [r7, #14]
 8012788:	7dfb      	ldrb	r3, [r7, #23]
 801278a:	fa42 f303 	asr.w	r3, r2, r3
 801278e:	f003 0301 	and.w	r3, r3, #1
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00c      	beq.n	80127b0 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	4413      	add	r3, r2
 80127a0:	7dfa      	ldrb	r2, [r7, #23]
 80127a2:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	3301      	adds	r3, #1
 80127aa:	b2da      	uxtb	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80127b0:	7dfb      	ldrb	r3, [r7, #23]
 80127b2:	3301      	adds	r3, #1
 80127b4:	75fb      	strb	r3, [r7, #23]
 80127b6:	7dfb      	ldrb	r3, [r7, #23]
 80127b8:	2b07      	cmp	r3, #7
 80127ba:	d9e4      	bls.n	8012786 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80127bc:	2300      	movs	r3, #0
}
 80127be:	4618      	mov	r0, r3
 80127c0:	371c      	adds	r7, #28
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bc80      	pop	{r7}
 80127c6:	4770      	bx	lr

080127c8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80127c8:	b590      	push	{r4, r7, lr}
 80127ca:	b089      	sub	sp, #36	@ 0x24
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80127d4:	f107 0314 	add.w	r3, r7, #20
 80127d8:	2200      	movs	r2, #0
 80127da:	601a      	str	r2, [r3, #0]
 80127dc:	605a      	str	r2, [r3, #4]
    uint8_t availableChannels = 0;
 80127de:	2300      	movs	r3, #0
 80127e0:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d005      	beq.n	80127f4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d002      	beq.n	80127f4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d101      	bne.n	80127f8 <RegionBaseUSComputeNext125kHzJoinChannel+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80127f4:	2303      	movs	r3, #3
 80127f6:	e055      	b.n	80128a4 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80127fe:	7f7b      	ldrb	r3, [r7, #29]
 8012800:	085b      	lsrs	r3, r3, #1
 8012802:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8012804:	7f7b      	ldrb	r3, [r7, #29]
 8012806:	f003 0301 	and.w	r3, r3, #1
 801280a:	b2db      	uxtb	r3, r3
 801280c:	2b00      	cmp	r3, #0
 801280e:	d107      	bne.n	8012820 <RegionBaseUSComputeNext125kHzJoinChannel+0x58>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8012810:	7f3b      	ldrb	r3, [r7, #28]
 8012812:	005b      	lsls	r3, r3, #1
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	4413      	add	r3, r2
 8012818:	881b      	ldrh	r3, [r3, #0]
 801281a:	b2db      	uxtb	r3, r3
 801281c:	83fb      	strh	r3, [r7, #30]
 801281e:	e006      	b.n	801282e <RegionBaseUSComputeNext125kHzJoinChannel+0x66>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8012820:	7f3b      	ldrb	r3, [r7, #28]
 8012822:	005b      	lsls	r3, r3, #1
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	4413      	add	r3, r2
 8012828:	881b      	ldrh	r3, [r3, #0]
 801282a:	0a1b      	lsrs	r3, r3, #8
 801282c:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801282e:	f107 0213 	add.w	r2, r7, #19
 8012832:	f107 0114 	add.w	r1, r7, #20
 8012836:	8bfb      	ldrh	r3, [r7, #30]
 8012838:	4618      	mov	r0, r3
 801283a:	f7ff ff8f 	bl	801275c <FindAvailable125kHzChannels>
 801283e:	4603      	mov	r3, r0
 8012840:	2b03      	cmp	r3, #3
 8012842:	d101      	bne.n	8012848 <RegionBaseUSComputeNext125kHzJoinChannel+0x80>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012844:	2303      	movs	r3, #3
 8012846:	e02d      	b.n	80128a4 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 8012848:	7cfb      	ldrb	r3, [r7, #19]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d011      	beq.n	8012872 <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801284e:	7f7b      	ldrb	r3, [r7, #29]
 8012850:	00db      	lsls	r3, r3, #3
 8012852:	b2dc      	uxtb	r4, r3
 8012854:	7cfb      	ldrb	r3, [r7, #19]
 8012856:	3b01      	subs	r3, #1
 8012858:	4619      	mov	r1, r3
 801285a:	2000      	movs	r0, #0
 801285c:	f004 ffea 	bl	8017834 <randr>
 8012860:	4603      	mov	r3, r0
 8012862:	3320      	adds	r3, #32
 8012864:	443b      	add	r3, r7
 8012866:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801286a:	4423      	add	r3, r4
 801286c:	b2da      	uxtb	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8012872:	7f7b      	ldrb	r3, [r7, #29]
 8012874:	3301      	adds	r3, #1
 8012876:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8012878:	7f7b      	ldrb	r3, [r7, #29]
 801287a:	2b07      	cmp	r3, #7
 801287c:	d901      	bls.n	8012882 <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 801287e:	2300      	movs	r3, #0
 8012880:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8012882:	7cfb      	ldrb	r3, [r7, #19]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d104      	bne.n	8012892 <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	7f7a      	ldrb	r2, [r7, #29]
 801288e:	429a      	cmp	r2, r3
 8012890:	d1b5      	bne.n	80127fe <RegionBaseUSComputeNext125kHzJoinChannel+0x36>

    if ( availableChannels > 0 )
 8012892:	7cfb      	ldrb	r3, [r7, #19]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d004      	beq.n	80128a2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	7f7a      	ldrb	r2, [r7, #29]
 801289c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801289e:	2300      	movs	r3, #0
 80128a0:	e000      	b.n	80128a4 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80128a2:	2303      	movs	r3, #3
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3724      	adds	r7, #36	@ 0x24
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd90      	pop	{r4, r7, pc}

080128ac <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80128ac:	b480      	push	{r7}
 80128ae:	b085      	sub	sp, #20
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	4603      	mov	r3, r0
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
 80128b8:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 80128ba:	7bfb      	ldrb	r3, [r7, #15]
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	fb03 f202 	mul.w	r2, r3, r2
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	4413      	add	r3, r2
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bc80      	pop	{r7}
 80128ce:	4770      	bx	lr

080128d0 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80128d0:	b480      	push	{r7}
 80128d2:	b087      	sub	sp, #28
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	4608      	mov	r0, r1
 80128da:	4639      	mov	r1, r7
 80128dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80128e0:	4603      	mov	r3, r0
 80128e2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	881b      	ldrh	r3, [r3, #0]
 80128e8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80128ea:	7afb      	ldrb	r3, [r7, #11]
 80128ec:	f083 0301 	eor.w	r3, r3, #1
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d01b      	beq.n	801292e <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80128f6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80128fa:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8012902:	d202      	bcs.n	801290a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8012904:	2364      	movs	r3, #100	@ 0x64
 8012906:	82bb      	strh	r3, [r7, #20]
 8012908:	e00b      	b.n	8012922 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8012910:	4293      	cmp	r3, r2
 8012912:	d803      	bhi.n	801291c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8012914:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012918:	82bb      	strh	r3, [r7, #20]
 801291a:	e002      	b.n	8012922 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801291c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012920:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8012922:	8aba      	ldrh	r2, [r7, #20]
 8012924:	8afb      	ldrh	r3, [r7, #22]
 8012926:	4293      	cmp	r3, r2
 8012928:	bf38      	it	cc
 801292a:	4613      	movcc	r3, r2
 801292c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801292e:	8afb      	ldrh	r3, [r7, #22]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d101      	bne.n	8012938 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8012934:	2301      	movs	r3, #1
 8012936:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8012938:	8afb      	ldrh	r3, [r7, #22]
}
 801293a:	4618      	mov	r0, r3
 801293c:	371c      	adds	r7, #28
 801293e:	46bd      	mov	sp, r7
 8012940:	bc80      	pop	{r7}
 8012942:	4770      	bx	lr

08012944 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b08e      	sub	sp, #56	@ 0x38
 8012948:	af02      	add	r7, sp, #8
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	4608      	mov	r0, r1
 801294e:	4639      	mov	r1, r7
 8012950:	e881 000c 	stmia.w	r1, {r2, r3}
 8012954:	4603      	mov	r3, r0
 8012956:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	881b      	ldrh	r3, [r3, #0]
 801295c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801295e:	4b4b      	ldr	r3, [pc, #300]	@ (8012a8c <SetMaxTimeCredits+0x148>)
 8012960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8012962:	463b      	mov	r3, r7
 8012964:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012968:	f008 faa0 	bl	801aeac <SysTimeToMs>
 801296c:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 801296e:	f107 0314 	add.w	r3, r7, #20
 8012972:	2200      	movs	r2, #0
 8012974:	601a      	str	r2, [r3, #0]
 8012976:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8012978:	7af9      	ldrb	r1, [r7, #11]
 801297a:	463b      	mov	r3, r7
 801297c:	cb0c      	ldmia	r3, {r2, r3}
 801297e:	68f8      	ldr	r0, [r7, #12]
 8012980:	f7ff ffa6 	bl	80128d0 <GetDutyCycle>
 8012984:	4603      	mov	r3, r0
 8012986:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8012988:	7afb      	ldrb	r3, [r7, #11]
 801298a:	f083 0301 	eor.w	r3, r3, #1
 801298e:	b2db      	uxtb	r3, r3
 8012990:	2b00      	cmp	r3, #0
 8012992:	d062      	beq.n	8012a5a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8012994:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012996:	2b64      	cmp	r3, #100	@ 0x64
 8012998:	d105      	bne.n	80129a6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801299a:	4b3c      	ldr	r3, [pc, #240]	@ (8012a8c <SetMaxTimeCredits+0x148>)
 801299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129a2:	609a      	str	r2, [r3, #8]
 80129a4:	e00b      	b.n	80129be <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80129a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80129a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80129ac:	d105      	bne.n	80129ba <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80129ae:	4b38      	ldr	r3, [pc, #224]	@ (8012a90 <SetMaxTimeCredits+0x14c>)
 80129b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129b6:	609a      	str	r2, [r3, #8]
 80129b8:	e001      	b.n	80129be <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80129ba:	4b36      	ldr	r3, [pc, #216]	@ (8012a94 <SetMaxTimeCredits+0x150>)
 80129bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	689a      	ldr	r2, [r3, #8]
 80129c2:	f107 031c 	add.w	r3, r7, #28
 80129c6:	4611      	mov	r1, r2
 80129c8:	4618      	mov	r0, r3
 80129ca:	f008 fa97 	bl	801aefc <SysTimeFromMs>
 80129ce:	f107 0014 	add.w	r0, r7, #20
 80129d2:	6a3b      	ldr	r3, [r7, #32]
 80129d4:	9300      	str	r3, [sp, #0]
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	463a      	mov	r2, r7
 80129da:	ca06      	ldmia	r2, {r1, r2}
 80129dc:	f008 f9a7 	bl	801ad2e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80129e0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80129e4:	f083 0301 	eor.w	r3, r3, #1
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d006      	beq.n	80129fc <SetMaxTimeCredits+0xb8>
 80129ee:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80129f2:	f083 0301 	eor.w	r3, r3, #1
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d108      	bne.n	8012a0e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8012a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d103      	bne.n	8012a0e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8012a06:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8012a08:	4a23      	ldr	r2, [pc, #140]	@ (8012a98 <SetMaxTimeCredits+0x154>)
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d92f      	bls.n	8012a6e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a12:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	4a21      	ldr	r2, [pc, #132]	@ (8012a9c <SetMaxTimeCredits+0x158>)
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d928      	bls.n	8012a6e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8012a22:	3b30      	subs	r3, #48	@ 0x30
 8012a24:	4a1e      	ldr	r2, [pc, #120]	@ (8012aa0 <SetMaxTimeCredits+0x15c>)
 8012a26:	fba2 2303 	umull	r2, r3, r2, r3
 8012a2a:	0c1b      	lsrs	r3, r3, #16
 8012a2c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	4a1c      	ldr	r2, [pc, #112]	@ (8012aa4 <SetMaxTimeCredits+0x160>)
 8012a32:	fb02 f303 	mul.w	r3, r2, r3
 8012a36:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8012a3e:	3330      	adds	r3, #48	@ 0x30
 8012a40:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8012a46:	f107 0314 	add.w	r3, r7, #20
 8012a4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a4e:	f008 fa2d 	bl	801aeac <SysTimeToMs>
 8012a52:	4602      	mov	r2, r0
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	609a      	str	r2, [r3, #8]
 8012a58:	e009      	b.n	8012a6e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8012a5a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8012a5e:	f083 0301 	eor.w	r3, r3, #1
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d002      	beq.n	8012a6e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a6c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d102      	bne.n	8012a7c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a7a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a80:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8012a82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3730      	adds	r7, #48	@ 0x30
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	001b7740 	.word	0x001b7740
 8012a90:	0112a880 	.word	0x0112a880
 8012a94:	02932e00 	.word	0x02932e00
 8012a98:	0001517f 	.word	0x0001517f
 8012a9c:	0001ec2f 	.word	0x0001ec2f
 8012aa0:	c22e4507 	.word	0xc22e4507
 8012aa4:	00015180 	.word	0x00015180

08012aa8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af02      	add	r7, sp, #8
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	4608      	mov	r0, r1
 8012ab2:	4611      	mov	r1, r2
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	70fb      	strb	r3, [r7, #3]
 8012aba:	460b      	mov	r3, r1
 8012abc:	70bb      	strb	r3, [r7, #2]
 8012abe:	4613      	mov	r3, r2
 8012ac0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8012ac2:	78f9      	ldrb	r1, [r7, #3]
 8012ac4:	787b      	ldrb	r3, [r7, #1]
 8012ac6:	9301      	str	r3, [sp, #4]
 8012ac8:	78bb      	ldrb	r3, [r7, #2]
 8012aca:	9300      	str	r3, [sp, #0]
 8012acc:	f107 0318 	add.w	r3, r7, #24
 8012ad0:	cb0c      	ldmia	r3, {r2, r3}
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7ff ff36 	bl	8012944 <SetMaxTimeCredits>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8012adc:	78fb      	ldrb	r3, [r7, #3]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d00a      	beq.n	8012af8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f008 fba6 	bl	801b238 <UTIL_TIMER_GetElapsedTime>
 8012aec:	4602      	mov	r2, r0
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	68db      	ldr	r3, [r3, #12]
 8012af2:	441a      	add	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	68da      	ldr	r2, [r3, #12]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	691b      	ldr	r3, [r3, #16]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d903      	bls.n	8012b0c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	691a      	ldr	r2, [r3, #16]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6a3a      	ldr	r2, [r7, #32]
 8012b10:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8012b12:	89fb      	ldrh	r3, [r7, #14]
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3710      	adds	r7, #16
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b085      	sub	sp, #20
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	4603      	mov	r3, r0
 8012b24:	460a      	mov	r2, r1
 8012b26:	80fb      	strh	r3, [r7, #6]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8012b30:	2300      	movs	r3, #0
 8012b32:	73bb      	strb	r3, [r7, #14]
 8012b34:	e011      	b.n	8012b5a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012b36:	88fa      	ldrh	r2, [r7, #6]
 8012b38:	7bbb      	ldrb	r3, [r7, #14]
 8012b3a:	2101      	movs	r1, #1
 8012b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8012b40:	401a      	ands	r2, r3
 8012b42:	7bbb      	ldrb	r3, [r7, #14]
 8012b44:	2101      	movs	r1, #1
 8012b46:	fa01 f303 	lsl.w	r3, r1, r3
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d102      	bne.n	8012b54 <CountChannels+0x38>
        {
            nbActiveBits++;
 8012b4e:	7bfb      	ldrb	r3, [r7, #15]
 8012b50:	3301      	adds	r3, #1
 8012b52:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8012b54:	7bbb      	ldrb	r3, [r7, #14]
 8012b56:	3301      	adds	r3, #1
 8012b58:	73bb      	strb	r3, [r7, #14]
 8012b5a:	7bba      	ldrb	r2, [r7, #14]
 8012b5c:	797b      	ldrb	r3, [r7, #5]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d3e9      	bcc.n	8012b36 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8012b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3714      	adds	r7, #20
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bc80      	pop	{r7}
 8012b6c:	4770      	bx	lr

08012b6e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8012b6e:	b580      	push	{r7, lr}
 8012b70:	b084      	sub	sp, #16
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6039      	str	r1, [r7, #0]
 8012b76:	4611      	mov	r1, r2
 8012b78:	461a      	mov	r2, r3
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	71fb      	strb	r3, [r7, #7]
 8012b7e:	460b      	mov	r3, r1
 8012b80:	71bb      	strb	r3, [r7, #6]
 8012b82:	4613      	mov	r3, r2
 8012b84:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8012b86:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8012b8a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012b8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012b92:	4618      	mov	r0, r3
 8012b94:	f000 f85d 	bl	8012c52 <RegionCommonValueInRange>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d101      	bne.n	8012ba2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	e053      	b.n	8012c4a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	73fb      	strb	r3, [r7, #15]
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	73bb      	strb	r3, [r7, #14]
 8012baa:	e049      	b.n	8012c40 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012bac:	2300      	movs	r3, #0
 8012bae:	737b      	strb	r3, [r7, #13]
 8012bb0:	e03d      	b.n	8012c2e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8012bb2:	7bbb      	ldrb	r3, [r7, #14]
 8012bb4:	005b      	lsls	r3, r3, #1
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	4413      	add	r3, r2
 8012bba:	881b      	ldrh	r3, [r3, #0]
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	7b7b      	ldrb	r3, [r7, #13]
 8012bc0:	fa42 f303 	asr.w	r3, r2, r3
 8012bc4:	f003 0301 	and.w	r3, r3, #1
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d02d      	beq.n	8012c28 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012bcc:	7bfa      	ldrb	r2, [r7, #15]
 8012bce:	7b7b      	ldrb	r3, [r7, #13]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	005b      	lsls	r3, r3, #1
 8012bd8:	4413      	add	r3, r2
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	461a      	mov	r2, r3
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	4413      	add	r3, r2
 8012be2:	7a1b      	ldrb	r3, [r3, #8]
 8012be4:	f343 0303 	sbfx	r3, r3, #0, #4
 8012be8:	b25b      	sxtb	r3, r3
 8012bea:	f003 030f 	and.w	r3, r3, #15
 8012bee:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012bf0:	7bfa      	ldrb	r2, [r7, #15]
 8012bf2:	7b7b      	ldrb	r3, [r7, #13]
 8012bf4:	4413      	add	r3, r2
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	005b      	lsls	r3, r3, #1
 8012bfc:	4413      	add	r3, r2
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	461a      	mov	r2, r3
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	4413      	add	r3, r2
 8012c06:	7a1b      	ldrb	r3, [r3, #8]
 8012c08:	f343 1303 	sbfx	r3, r3, #4, #4
 8012c0c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012c0e:	f003 030f 	and.w	r3, r3, #15
 8012c12:	b25a      	sxtb	r2, r3
 8012c14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f000 f81a 	bl	8012c52 <RegionCommonValueInRange>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d101      	bne.n	8012c28 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8012c24:	2301      	movs	r3, #1
 8012c26:	e010      	b.n	8012c4a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8012c28:	7b7b      	ldrb	r3, [r7, #13]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	737b      	strb	r3, [r7, #13]
 8012c2e:	7b7b      	ldrb	r3, [r7, #13]
 8012c30:	2b0f      	cmp	r3, #15
 8012c32:	d9be      	bls.n	8012bb2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012c34:	7bfb      	ldrb	r3, [r7, #15]
 8012c36:	3310      	adds	r3, #16
 8012c38:	73fb      	strb	r3, [r7, #15]
 8012c3a:	7bbb      	ldrb	r3, [r7, #14]
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	73bb      	strb	r3, [r7, #14]
 8012c40:	7bfa      	ldrb	r2, [r7, #15]
 8012c42:	79fb      	ldrb	r3, [r7, #7]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d3b1      	bcc.n	8012bac <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3710      	adds	r7, #16
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}

08012c52 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8012c52:	b480      	push	{r7}
 8012c54:	b083      	sub	sp, #12
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	4603      	mov	r3, r0
 8012c5a:	71fb      	strb	r3, [r7, #7]
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	71bb      	strb	r3, [r7, #6]
 8012c60:	4613      	mov	r3, r2
 8012c62:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8012c64:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012c68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	db07      	blt.n	8012c80 <RegionCommonValueInRange+0x2e>
 8012c70:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012c74:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	dc01      	bgt.n	8012c80 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	e000      	b.n	8012c82 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	370c      	adds	r7, #12
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bc80      	pop	{r7}
 8012c8a:	4770      	bx	lr

08012c8c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	460b      	mov	r3, r1
 8012c96:	70fb      	strb	r3, [r7, #3]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8012c9c:	78fb      	ldrb	r3, [r7, #3]
 8012c9e:	091b      	lsrs	r3, r3, #4
 8012ca0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8012ca2:	78bb      	ldrb	r3, [r7, #2]
 8012ca4:	091b      	lsrs	r3, r3, #4
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	7bfa      	ldrb	r2, [r7, #15]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d803      	bhi.n	8012cb6 <RegionCommonChanDisable+0x2a>
 8012cae:	78fa      	ldrb	r2, [r7, #3]
 8012cb0:	78bb      	ldrb	r3, [r7, #2]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d301      	bcc.n	8012cba <RegionCommonChanDisable+0x2e>
    {
        return false;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	e017      	b.n	8012cea <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012cba:	7bfb      	ldrb	r3, [r7, #15]
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	687a      	ldr	r2, [r7, #4]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	881b      	ldrh	r3, [r3, #0]
 8012cc4:	b21a      	sxth	r2, r3
 8012cc6:	78fb      	ldrb	r3, [r7, #3]
 8012cc8:	f003 030f 	and.w	r3, r3, #15
 8012ccc:	2101      	movs	r1, #1
 8012cce:	fa01 f303 	lsl.w	r3, r1, r3
 8012cd2:	b21b      	sxth	r3, r3
 8012cd4:	43db      	mvns	r3, r3
 8012cd6:	b21b      	sxth	r3, r3
 8012cd8:	4013      	ands	r3, r2
 8012cda:	b219      	sxth	r1, r3
 8012cdc:	7bfb      	ldrb	r3, [r7, #15]
 8012cde:	005b      	lsls	r3, r3, #1
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	b28a      	uxth	r2, r1
 8012ce6:	801a      	strh	r2, [r3, #0]

    return true;
 8012ce8:	2301      	movs	r3, #1
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3714      	adds	r7, #20
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bc80      	pop	{r7}
 8012cf2:	4770      	bx	lr

08012cf4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	70fb      	strb	r3, [r7, #3]
 8012d00:	4613      	mov	r3, r2
 8012d02:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8012d04:	2300      	movs	r3, #0
 8012d06:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d101      	bne.n	8012d12 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	e018      	b.n	8012d44 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012d12:	78fb      	ldrb	r3, [r7, #3]
 8012d14:	73bb      	strb	r3, [r7, #14]
 8012d16:	e010      	b.n	8012d3a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8012d18:	7bbb      	ldrb	r3, [r7, #14]
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	4413      	add	r3, r2
 8012d20:	881b      	ldrh	r3, [r3, #0]
 8012d22:	2110      	movs	r1, #16
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7ff fef9 	bl	8012b1c <CountChannels>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	7bfb      	ldrb	r3, [r7, #15]
 8012d30:	4413      	add	r3, r2
 8012d32:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012d34:	7bbb      	ldrb	r3, [r7, #14]
 8012d36:	3301      	adds	r3, #1
 8012d38:	73bb      	strb	r3, [r7, #14]
 8012d3a:	7bba      	ldrb	r2, [r7, #14]
 8012d3c:	78bb      	ldrb	r3, [r7, #2]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d3ea      	bcc.n	8012d18 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8012d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	3710      	adds	r7, #16
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}

08012d4c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b087      	sub	sp, #28
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	60f8      	str	r0, [r7, #12]
 8012d54:	60b9      	str	r1, [r7, #8]
 8012d56:	4613      	mov	r3, r2
 8012d58:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d016      	beq.n	8012d8e <RegionCommonChanMaskCopy+0x42>
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d013      	beq.n	8012d8e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8012d66:	2300      	movs	r3, #0
 8012d68:	75fb      	strb	r3, [r7, #23]
 8012d6a:	e00c      	b.n	8012d86 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8012d6c:	7dfb      	ldrb	r3, [r7, #23]
 8012d6e:	005b      	lsls	r3, r3, #1
 8012d70:	68ba      	ldr	r2, [r7, #8]
 8012d72:	441a      	add	r2, r3
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	005b      	lsls	r3, r3, #1
 8012d78:	68f9      	ldr	r1, [r7, #12]
 8012d7a:	440b      	add	r3, r1
 8012d7c:	8812      	ldrh	r2, [r2, #0]
 8012d7e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8012d80:	7dfb      	ldrb	r3, [r7, #23]
 8012d82:	3301      	adds	r3, #1
 8012d84:	75fb      	strb	r3, [r7, #23]
 8012d86:	7dfa      	ldrb	r2, [r7, #23]
 8012d88:	79fb      	ldrb	r3, [r7, #7]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d3ee      	bcc.n	8012d6c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8012d8e:	bf00      	nop
 8012d90:	371c      	adds	r7, #28
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bc80      	pop	{r7}
 8012d96:	4770      	bx	lr

08012d98 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8012d98:	b082      	sub	sp, #8
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b086      	sub	sp, #24
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	60f8      	str	r0, [r7, #12]
 8012da2:	60b9      	str	r1, [r7, #8]
 8012da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012da6:	4613      	mov	r3, r2
 8012da8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8012daa:	79f9      	ldrb	r1, [r7, #7]
 8012dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012db0:	cb0c      	ldmia	r3, {r2, r3}
 8012db2:	68f8      	ldr	r0, [r7, #12]
 8012db4:	f7ff fd8c 	bl	80128d0 <GetDutyCycle>
 8012db8:	4603      	mov	r3, r0
 8012dba:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	68da      	ldr	r2, [r3, #12]
 8012dc0:	8afb      	ldrh	r3, [r7, #22]
 8012dc2:	68b9      	ldr	r1, [r7, #8]
 8012dc4:	fb01 f303 	mul.w	r3, r1, r3
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d909      	bls.n	8012de0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	68da      	ldr	r2, [r3, #12]
 8012dd0:	8afb      	ldrh	r3, [r7, #22]
 8012dd2:	68b9      	ldr	r1, [r7, #8]
 8012dd4:	fb01 f303 	mul.w	r3, r1, r3
 8012dd8:	1ad2      	subs	r2, r2, r3
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8012dde:	e002      	b.n	8012de6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2200      	movs	r2, #0
 8012de4:	60da      	str	r2, [r3, #12]
}
 8012de6:	bf00      	nop
 8012de8:	3718      	adds	r7, #24
 8012dea:	46bd      	mov	sp, r7
 8012dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012df0:	b002      	add	sp, #8
 8012df2:	4770      	bx	lr

08012df4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8012df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012df6:	b08f      	sub	sp, #60	@ 0x3c
 8012df8:	af04      	add	r7, sp, #16
 8012dfa:	6039      	str	r1, [r7, #0]
 8012dfc:	4611      	mov	r1, r2
 8012dfe:	461a      	mov	r2, r3
 8012e00:	4603      	mov	r3, r0
 8012e02:	71fb      	strb	r3, [r7, #7]
 8012e04:	460b      	mov	r3, r1
 8012e06:	71bb      	strb	r3, [r7, #6]
 8012e08:	4613      	mov	r3, r2
 8012e0a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8012e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e10:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8012e12:	f008 f9ff 	bl	801b214 <UTIL_TIMER_GetCurrentTime>
 8012e16:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8012e20:	2300      	movs	r3, #0
 8012e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8012e26:	2300      	movs	r3, #0
 8012e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012e2c:	e0ba      	b.n	8012fa4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8012e2e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012e32:	4613      	mov	r3, r2
 8012e34:	005b      	lsls	r3, r3, #1
 8012e36:	4413      	add	r3, r2
 8012e38:	00db      	lsls	r3, r3, #3
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	189c      	adds	r4, r3, r2
 8012e40:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8012e44:	797a      	ldrb	r2, [r7, #5]
 8012e46:	79fd      	ldrb	r5, [r7, #7]
 8012e48:	69fb      	ldr	r3, [r7, #28]
 8012e4a:	9302      	str	r3, [sp, #8]
 8012e4c:	46ec      	mov	ip, sp
 8012e4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012e52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e56:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012e5a:	4633      	mov	r3, r6
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f7ff fe22 	bl	8012aa8 <UpdateTimeCredits>
 8012e64:	4603      	mov	r3, r0
 8012e66:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8012e68:	8afa      	ldrh	r2, [r7, #22]
 8012e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e6c:	fb02 f303 	mul.w	r3, r2, r3
 8012e70:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8012e72:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012e76:	4613      	mov	r3, r2
 8012e78:	005b      	lsls	r3, r3, #1
 8012e7a:	4413      	add	r3, r2
 8012e7c:	00db      	lsls	r3, r3, #3
 8012e7e:	461a      	mov	r2, r3
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	4413      	add	r3, r2
 8012e84:	68db      	ldr	r3, [r3, #12]
 8012e86:	69ba      	ldr	r2, [r7, #24]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d908      	bls.n	8012e9e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012e8c:	797b      	ldrb	r3, [r7, #5]
 8012e8e:	f083 0301 	eor.w	r3, r3, #1
 8012e92:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d013      	beq.n	8012ec0 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d010      	beq.n	8012ec0 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8012e9e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	005b      	lsls	r3, r3, #1
 8012ea6:	4413      	add	r3, r2
 8012ea8:	00db      	lsls	r3, r3, #3
 8012eaa:	461a      	mov	r2, r3
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	4413      	add	r3, r2
 8012eb0:	2201      	movs	r2, #1
 8012eb2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8012eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012eb8:	3301      	adds	r3, #1
 8012eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012ebe:	e06c      	b.n	8012f9a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8012ec0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	005b      	lsls	r3, r3, #1
 8012ec8:	4413      	add	r3, r2
 8012eca:	00db      	lsls	r3, r3, #3
 8012ecc:	461a      	mov	r2, r3
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8012ed6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012eda:	4613      	mov	r3, r2
 8012edc:	005b      	lsls	r3, r3, #1
 8012ede:	4413      	add	r3, r2
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	69ba      	ldr	r2, [r7, #24]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d815      	bhi.n	8012f1c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8012ef0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	005b      	lsls	r3, r3, #1
 8012ef8:	4413      	add	r3, r2
 8012efa:	00db      	lsls	r3, r3, #3
 8012efc:	461a      	mov	r2, r3
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	4413      	add	r3, r2
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	69ba      	ldr	r2, [r7, #24]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	bf28      	it	cs
 8012f0e:	4613      	movcs	r3, r2
 8012f10:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8012f12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012f16:	3301      	adds	r3, #1
 8012f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8012f1c:	79fb      	ldrb	r3, [r7, #7]
 8012f1e:	f083 0301 	eor.w	r3, r3, #1
 8012f22:	b2db      	uxtb	r3, r3
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d038      	beq.n	8012f9a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8012f28:	2300      	movs	r3, #0
 8012f2a:	60fb      	str	r3, [r7, #12]
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8012f30:	8afb      	ldrh	r3, [r7, #22]
 8012f32:	2b64      	cmp	r3, #100	@ 0x64
 8012f34:	d103      	bne.n	8012f3e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8012f36:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8012f3a:	60fb      	str	r3, [r7, #12]
 8012f3c:	e009      	b.n	8012f52 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8012f3e:	8afb      	ldrh	r3, [r7, #22]
 8012f40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012f44:	d103      	bne.n	8012f4e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8012f46:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8012f4a:	60fb      	str	r3, [r7, #12]
 8012f4c:	e001      	b.n	8012f52 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8012f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8012fc8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012f50:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f54:	4a1c      	ldr	r2, [pc, #112]	@ (8012fc8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d90e      	bls.n	8012f78 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8012f5a:	68fa      	ldr	r2, [r7, #12]
 8012f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f5e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8012f62:	3b30      	subs	r3, #48	@ 0x30
 8012f64:	4919      	ldr	r1, [pc, #100]	@ (8012fcc <RegionCommonUpdateBandTimeOff+0x1d8>)
 8012f66:	fba1 1303 	umull	r1, r3, r1, r3
 8012f6a:	0c1b      	lsrs	r3, r3, #16
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	4918      	ldr	r1, [pc, #96]	@ (8012fd0 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8012f70:	fb01 f303 	mul.w	r3, r1, r3
 8012f74:	4413      	add	r3, r2
 8012f76:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8012f78:	f107 000c 	add.w	r0, r7, #12
 8012f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f7e:	9300      	str	r3, [sp, #0]
 8012f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f82:	f107 020c 	add.w	r2, r7, #12
 8012f86:	ca06      	ldmia	r2, {r1, r2}
 8012f88:	f007 fed1 	bl	801ad2e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8012f8c:	f107 030c 	add.w	r3, r7, #12
 8012f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012f94:	f007 ff8a 	bl	801aeac <SysTimeToMs>
 8012f98:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8012f9a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012fa4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012fa8:	79bb      	ldrb	r3, [r7, #6]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	f4ff af3f 	bcc.w	8012e2e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8012fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d102      	bne.n	8012fbe <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8012fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8012fbc:	e000      	b.n	8012fc0 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8012fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	372c      	adds	r7, #44	@ 0x2c
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fc8:	0001ec30 	.word	0x0001ec30
 8012fcc:	c22e4507 	.word	0xc22e4507
 8012fd0:	00015180 	.word	0x00015180

08012fd4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b085      	sub	sp, #20
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	2b03      	cmp	r3, #3
 8012fe8:	d140      	bne.n	801306c <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	3301      	adds	r3, #1
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	b25a      	sxtb	r2, r3
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012ffc:	f003 030f 	and.w	r3, r3, #15
 8013000:	b25a      	sxtb	r2, r3
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801300c:	b2db      	uxtb	r3, r3
 801300e:	091b      	lsrs	r3, r3, #4
 8013010:	b2db      	uxtb	r3, r3
 8013012:	b25a      	sxtb	r2, r3
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	3302      	adds	r3, #2
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	461a      	mov	r2, r3
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	889b      	ldrh	r3, [r3, #4]
 8013028:	b21a      	sxth	r2, r3
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	3303      	adds	r3, #3
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	b21b      	sxth	r3, r3
 8013032:	021b      	lsls	r3, r3, #8
 8013034:	b21b      	sxth	r3, r3
 8013036:	4313      	orrs	r3, r2
 8013038:	b21b      	sxth	r3, r3
 801303a:	b29a      	uxth	r2, r3
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	791a      	ldrb	r2, [r3, #4]
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	091b      	lsrs	r3, r3, #4
 801304e:	b2db      	uxtb	r3, r3
 8013050:	f003 0307 	and.w	r3, r3, #7
 8013054:	b2da      	uxtb	r2, r3
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	f003 030f 	and.w	r3, r3, #15
 8013062:	b2da      	uxtb	r2, r3
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8013068:	2305      	movs	r3, #5
 801306a:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801306c:	7bfb      	ldrb	r3, [r7, #15]
}
 801306e:	4618      	mov	r0, r3
 8013070:	3714      	adds	r7, #20
 8013072:	46bd      	mov	sp, r7
 8013074:	bc80      	pop	{r7}
 8013076:	4770      	bx	lr

08013078 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013078:	b5b0      	push	{r4, r5, r7, lr}
 801307a:	b088      	sub	sp, #32
 801307c:	af02      	add	r7, sp, #8
 801307e:	60f8      	str	r0, [r7, #12]
 8013080:	60b9      	str	r1, [r7, #8]
 8013082:	607a      	str	r2, [r7, #4]
 8013084:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	791b      	ldrb	r3, [r3, #4]
 801308a:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	799b      	ldrb	r3, [r3, #6]
 8013090:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	79db      	ldrb	r3, [r3, #7]
 8013096:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	7a1b      	ldrb	r3, [r3, #8]
 801309c:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	795b      	ldrb	r3, [r3, #5]
 80130a2:	f083 0301 	eor.w	r3, r3, #1
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d008      	beq.n	80130be <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	7adb      	ldrb	r3, [r3, #11]
 80130b0:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	7a5b      	ldrb	r3, [r3, #9]
 80130b6:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	7a9b      	ldrb	r3, [r3, #10]
 80130bc:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80130be:	7dfb      	ldrb	r3, [r7, #23]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d04a      	beq.n	801315a <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80130c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80130c8:	2b0f      	cmp	r3, #15
 80130ca:	d103      	bne.n	80130d4 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	7a5b      	ldrb	r3, [r3, #9]
 80130d0:	75bb      	strb	r3, [r7, #22]
 80130d2:	e01d      	b.n	8013110 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	7b18      	ldrb	r0, [r3, #12]
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	6919      	ldr	r1, [r3, #16]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80130e8:	68fa      	ldr	r2, [r7, #12]
 80130ea:	6992      	ldr	r2, [r2, #24]
 80130ec:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80130f0:	9201      	str	r2, [sp, #4]
 80130f2:	9300      	str	r3, [sp, #0]
 80130f4:	462b      	mov	r3, r5
 80130f6:	4622      	mov	r2, r4
 80130f8:	f7ff fd39 	bl	8012b6e <RegionCommonChanVerifyDr>
 80130fc:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80130fe:	f083 0301 	eor.w	r3, r3, #1
 8013102:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013104:	2b00      	cmp	r3, #0
 8013106:	d003      	beq.n	8013110 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8013108:	7dfb      	ldrb	r3, [r7, #23]
 801310a:	f023 0302 	bic.w	r3, r3, #2
 801310e:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8013110:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013114:	2b0f      	cmp	r3, #15
 8013116:	d103      	bne.n	8013120 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	7a9b      	ldrb	r3, [r3, #10]
 801311c:	757b      	strb	r3, [r7, #21]
 801311e:	e01c      	b.n	801315a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801312c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013130:	4618      	mov	r0, r3
 8013132:	f7ff fd8e 	bl	8012c52 <RegionCommonValueInRange>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d10e      	bne.n	801315a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8013142:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8013146:	429a      	cmp	r2, r3
 8013148:	da03      	bge.n	8013152 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	7f5b      	ldrb	r3, [r3, #29]
 801314e:	757b      	strb	r3, [r7, #21]
 8013150:	e003      	b.n	801315a <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013152:	7dfb      	ldrb	r3, [r7, #23]
 8013154:	f023 0304 	bic.w	r3, r3, #4
 8013158:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801315a:	7dfb      	ldrb	r3, [r7, #23]
 801315c:	2b07      	cmp	r3, #7
 801315e:	d105      	bne.n	801316c <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8013160:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d101      	bne.n	801316c <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8013168:	2301      	movs	r3, #1
 801316a:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	7dba      	ldrb	r2, [r7, #22]
 8013170:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	7d7a      	ldrb	r2, [r7, #21]
 8013176:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8013178:	7d3a      	ldrb	r2, [r7, #20]
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	701a      	strb	r2, [r3, #0]

    return status;
 801317e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013180:	4618      	mov	r0, r3
 8013182:	3718      	adds	r7, #24
 8013184:	46bd      	mov	sp, r7
 8013186:	bdb0      	pop	{r4, r5, r7, pc}

08013188 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	4603      	mov	r3, r0
 8013190:	6039      	str	r1, [r7, #0]
 8013192:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8013194:	79fb      	ldrb	r3, [r7, #7]
 8013196:	4a06      	ldr	r2, [pc, #24]	@ (80131b0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8013198:	fa02 f303 	lsl.w	r3, r2, r3
 801319c:	461a      	mov	r2, r3
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	370c      	adds	r7, #12
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bc80      	pop	{r7}
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop
 80131b0:	000f4240 	.word	0x000f4240

080131b4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80131b4:	b480      	push	{r7}
 80131b6:	b083      	sub	sp, #12
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80131be:	79fb      	ldrb	r3, [r7, #7]
 80131c0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80131c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bc80      	pop	{r7}
 80131d0:	4770      	bx	lr
	...

080131d4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80131d4:	b480      	push	{r7}
 80131d6:	b085      	sub	sp, #20
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	607a      	str	r2, [r7, #4]
 80131de:	603b      	str	r3, [r7, #0]
 80131e0:	460b      	mov	r3, r1
 80131e2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80131e4:	7afa      	ldrb	r2, [r7, #11]
 80131e6:	7afb      	ldrb	r3, [r7, #11]
 80131e8:	3b04      	subs	r3, #4
 80131ea:	4619      	mov	r1, r3
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	fb03 f101 	mul.w	r1, r3, r1
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80131f8:	fb00 f303 	mul.w	r3, r0, r3
 80131fc:	440b      	add	r3, r1
 80131fe:	005b      	lsls	r3, r3, #1
 8013200:	2b00      	cmp	r3, #0
 8013202:	d013      	beq.n	801322c <RegionCommonComputeRxWindowParameters+0x58>
 8013204:	7afb      	ldrb	r3, [r7, #11]
 8013206:	3b04      	subs	r3, #4
 8013208:	4619      	mov	r1, r3
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	fb03 f101 	mul.w	r1, r3, r1
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013216:	fb00 f303 	mul.w	r3, r0, r3
 801321a:	440b      	add	r3, r1
 801321c:	0059      	lsls	r1, r3, #1
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	440b      	add	r3, r1
 8013222:	1e59      	subs	r1, r3, #1
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	fbb1 f3f3 	udiv	r3, r1, r3
 801322a:	e00f      	b.n	801324c <RegionCommonComputeRxWindowParameters+0x78>
 801322c:	7afb      	ldrb	r3, [r7, #11]
 801322e:	3b04      	subs	r3, #4
 8013230:	4619      	mov	r1, r3
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	fb03 f101 	mul.w	r1, r3, r1
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801323e:	fb00 f303 	mul.w	r3, r0, r3
 8013242:	440b      	add	r3, r1
 8013244:	0059      	lsls	r1, r3, #1
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	fbb1 f3f3 	udiv	r3, r1, r3
 801324c:	429a      	cmp	r2, r3
 801324e:	bf38      	it	cc
 8013250:	461a      	movcc	r2, r3
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	4619      	mov	r1, r3
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	fb02 f303 	mul.w	r3, r2, r3
 8013266:	2b00      	cmp	r3, #0
 8013268:	d007      	beq.n	801327a <RegionCommonComputeRxWindowParameters+0xa6>
 801326a:	69bb      	ldr	r3, [r7, #24]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	68fa      	ldr	r2, [r7, #12]
 8013270:	fb02 f303 	mul.w	r3, r2, r3
 8013274:	3301      	adds	r3, #1
 8013276:	085b      	lsrs	r3, r3, #1
 8013278:	e005      	b.n	8013286 <RegionCommonComputeRxWindowParameters+0xb2>
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	fb02 f303 	mul.w	r3, r2, r3
 8013284:	085b      	lsrs	r3, r3, #1
 8013286:	1acb      	subs	r3, r1, r3
 8013288:	683a      	ldr	r2, [r7, #0]
 801328a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801328e:	fb01 f202 	mul.w	r2, r1, r2
 8013292:	1a9b      	subs	r3, r3, r2
 8013294:	2b00      	cmp	r3, #0
 8013296:	dd27      	ble.n	80132e8 <RegionCommonComputeRxWindowParameters+0x114>
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	4619      	mov	r1, r3
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	68fa      	ldr	r2, [r7, #12]
 80132a4:	fb02 f303 	mul.w	r3, r2, r3
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d007      	beq.n	80132bc <RegionCommonComputeRxWindowParameters+0xe8>
 80132ac:	69bb      	ldr	r3, [r7, #24]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	68fa      	ldr	r2, [r7, #12]
 80132b2:	fb02 f303 	mul.w	r3, r2, r3
 80132b6:	3301      	adds	r3, #1
 80132b8:	085b      	lsrs	r3, r3, #1
 80132ba:	e005      	b.n	80132c8 <RegionCommonComputeRxWindowParameters+0xf4>
 80132bc:	69bb      	ldr	r3, [r7, #24]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	fb02 f303 	mul.w	r3, r2, r3
 80132c6:	085b      	lsrs	r3, r3, #1
 80132c8:	1acb      	subs	r3, r1, r3
 80132ca:	683a      	ldr	r2, [r7, #0]
 80132cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80132d0:	fb01 f202 	mul.w	r2, r1, r2
 80132d4:	1a9b      	subs	r3, r3, r2
 80132d6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80132da:	4a19      	ldr	r2, [pc, #100]	@ (8013340 <RegionCommonComputeRxWindowParameters+0x16c>)
 80132dc:	fb82 1203 	smull	r1, r2, r2, r3
 80132e0:	1192      	asrs	r2, r2, #6
 80132e2:	17db      	asrs	r3, r3, #31
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	e024      	b.n	8013332 <RegionCommonComputeRxWindowParameters+0x15e>
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	4619      	mov	r1, r3
 80132ee:	69bb      	ldr	r3, [r7, #24]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	68fa      	ldr	r2, [r7, #12]
 80132f4:	fb02 f303 	mul.w	r3, r2, r3
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d007      	beq.n	801330c <RegionCommonComputeRxWindowParameters+0x138>
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	68fa      	ldr	r2, [r7, #12]
 8013302:	fb02 f303 	mul.w	r3, r2, r3
 8013306:	3301      	adds	r3, #1
 8013308:	085b      	lsrs	r3, r3, #1
 801330a:	e005      	b.n	8013318 <RegionCommonComputeRxWindowParameters+0x144>
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	68fa      	ldr	r2, [r7, #12]
 8013312:	fb02 f303 	mul.w	r3, r2, r3
 8013316:	085b      	lsrs	r3, r3, #1
 8013318:	1acb      	subs	r3, r1, r3
 801331a:	683a      	ldr	r2, [r7, #0]
 801331c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013320:	fb01 f202 	mul.w	r2, r1, r2
 8013324:	1a9b      	subs	r3, r3, r2
 8013326:	4a06      	ldr	r2, [pc, #24]	@ (8013340 <RegionCommonComputeRxWindowParameters+0x16c>)
 8013328:	fb82 1203 	smull	r1, r2, r2, r3
 801332c:	1192      	asrs	r2, r2, #6
 801332e:	17db      	asrs	r3, r3, #31
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	69fa      	ldr	r2, [r7, #28]
 8013334:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8013336:	bf00      	nop
 8013338:	3714      	adds	r7, #20
 801333a:	46bd      	mov	sp, r7
 801333c:	bc80      	pop	{r7}
 801333e:	4770      	bx	lr
 8013340:	10624dd3 	.word	0x10624dd3

08013344 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b086      	sub	sp, #24
 8013348:	af00      	add	r7, sp, #0
 801334a:	4603      	mov	r3, r0
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
 8013350:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8013352:	2300      	movs	r3, #0
 8013354:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	4618      	mov	r0, r3
 801335e:	f7ed fa89 	bl	8000874 <__aeabi_ui2f>
 8013362:	4603      	mov	r3, r0
 8013364:	4619      	mov	r1, r3
 8013366:	68b8      	ldr	r0, [r7, #8]
 8013368:	f7ed f9d2 	bl	8000710 <__aeabi_fsub>
 801336c:	4603      	mov	r3, r0
 801336e:	6879      	ldr	r1, [r7, #4]
 8013370:	4618      	mov	r0, r3
 8013372:	f7ed f9cd 	bl	8000710 <__aeabi_fsub>
 8013376:	4603      	mov	r3, r0
 8013378:	4618      	mov	r0, r3
 801337a:	f7ed f8bd 	bl	80004f8 <__aeabi_f2d>
 801337e:	4602      	mov	r2, r0
 8013380:	460b      	mov	r3, r1
 8013382:	4610      	mov	r0, r2
 8013384:	4619      	mov	r1, r3
 8013386:	f00d ff1f 	bl	80211c8 <floor>
 801338a:	4602      	mov	r2, r0
 801338c:	460b      	mov	r3, r1
 801338e:	4610      	mov	r0, r2
 8013390:	4619      	mov	r1, r3
 8013392:	f7ed f991 	bl	80006b8 <__aeabi_d2iz>
 8013396:	4603      	mov	r3, r0
 8013398:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801339a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3718      	adds	r7, #24
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80133a6:	b590      	push	{r4, r7, lr}
 80133a8:	b087      	sub	sp, #28
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	60f8      	str	r0, [r7, #12]
 80133ae:	60b9      	str	r1, [r7, #8]
 80133b0:	607a      	str	r2, [r7, #4]
 80133b2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80133b8:	2300      	movs	r3, #0
 80133ba:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80133bc:	2300      	movs	r3, #0
 80133be:	757b      	strb	r3, [r7, #21]
 80133c0:	2300      	movs	r3, #0
 80133c2:	753b      	strb	r3, [r7, #20]
 80133c4:	e09c      	b.n	8013500 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80133c6:	2300      	movs	r3, #0
 80133c8:	74fb      	strb	r3, [r7, #19]
 80133ca:	e08f      	b.n	80134ec <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	685a      	ldr	r2, [r3, #4]
 80133d0:	7d3b      	ldrb	r3, [r7, #20]
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	4413      	add	r3, r2
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	461a      	mov	r2, r3
 80133da:	7cfb      	ldrb	r3, [r7, #19]
 80133dc:	fa42 f303 	asr.w	r3, r2, r3
 80133e0:	f003 0301 	and.w	r3, r3, #1
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d07e      	beq.n	80134e6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	689a      	ldr	r2, [r3, #8]
 80133ec:	7d79      	ldrb	r1, [r7, #21]
 80133ee:	7cfb      	ldrb	r3, [r7, #19]
 80133f0:	440b      	add	r3, r1
 80133f2:	4619      	mov	r1, r3
 80133f4:	460b      	mov	r3, r1
 80133f6:	005b      	lsls	r3, r3, #1
 80133f8:	440b      	add	r3, r1
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	4413      	add	r3, r2
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d06b      	beq.n	80134dc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	f083 0301 	eor.w	r3, r3, #1
 801340c:	b2db      	uxtb	r3, r3
 801340e:	2b00      	cmp	r3, #0
 8013410:	d011      	beq.n	8013436 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013416:	2b00      	cmp	r3, #0
 8013418:	d00d      	beq.n	8013436 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	695a      	ldr	r2, [r3, #20]
 801341e:	7d3b      	ldrb	r3, [r7, #20]
 8013420:	005b      	lsls	r3, r3, #1
 8013422:	4413      	add	r3, r2
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	461a      	mov	r2, r3
 8013428:	7cfb      	ldrb	r3, [r7, #19]
 801342a:	fa42 f303 	asr.w	r3, r2, r3
 801342e:	f003 0301 	and.w	r3, r3, #1
 8013432:	2b00      	cmp	r3, #0
 8013434:	d054      	beq.n	80134e0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	785b      	ldrb	r3, [r3, #1]
 801343a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	689a      	ldr	r2, [r3, #8]
 8013440:	7d79      	ldrb	r1, [r7, #21]
 8013442:	7cfb      	ldrb	r3, [r7, #19]
 8013444:	440b      	add	r3, r1
 8013446:	4619      	mov	r1, r3
 8013448:	460b      	mov	r3, r1
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	440b      	add	r3, r1
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	4413      	add	r3, r2
 8013452:	7a1b      	ldrb	r3, [r3, #8]
 8013454:	f343 0303 	sbfx	r3, r3, #0, #4
 8013458:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801345a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	689a      	ldr	r2, [r3, #8]
 8013460:	7d79      	ldrb	r1, [r7, #21]
 8013462:	7cfb      	ldrb	r3, [r7, #19]
 8013464:	440b      	add	r3, r1
 8013466:	4619      	mov	r1, r3
 8013468:	460b      	mov	r3, r1
 801346a:	005b      	lsls	r3, r3, #1
 801346c:	440b      	add	r3, r1
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	4413      	add	r3, r2
 8013472:	7a1b      	ldrb	r3, [r3, #8]
 8013474:	f343 1303 	sbfx	r3, r3, #4, #4
 8013478:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801347a:	461a      	mov	r2, r3
 801347c:	4621      	mov	r1, r4
 801347e:	f7ff fbe8 	bl	8012c52 <RegionCommonValueInRange>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d02d      	beq.n	80134e4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	68da      	ldr	r2, [r3, #12]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	6899      	ldr	r1, [r3, #8]
 8013490:	7d78      	ldrb	r0, [r7, #21]
 8013492:	7cfb      	ldrb	r3, [r7, #19]
 8013494:	4403      	add	r3, r0
 8013496:	4618      	mov	r0, r3
 8013498:	4603      	mov	r3, r0
 801349a:	005b      	lsls	r3, r3, #1
 801349c:	4403      	add	r3, r0
 801349e:	009b      	lsls	r3, r3, #2
 80134a0:	440b      	add	r3, r1
 80134a2:	7a5b      	ldrb	r3, [r3, #9]
 80134a4:	4619      	mov	r1, r3
 80134a6:	460b      	mov	r3, r1
 80134a8:	005b      	lsls	r3, r3, #1
 80134aa:	440b      	add	r3, r1
 80134ac:	00db      	lsls	r3, r3, #3
 80134ae:	4413      	add	r3, r2
 80134b0:	7d1b      	ldrb	r3, [r3, #20]
 80134b2:	f083 0301 	eor.w	r3, r3, #1
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d003      	beq.n	80134c4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80134bc:	7dbb      	ldrb	r3, [r7, #22]
 80134be:	3301      	adds	r3, #1
 80134c0:	75bb      	strb	r3, [r7, #22]
                    continue;
 80134c2:	e010      	b.n	80134e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80134c4:	7dfb      	ldrb	r3, [r7, #23]
 80134c6:	1c5a      	adds	r2, r3, #1
 80134c8:	75fa      	strb	r2, [r7, #23]
 80134ca:	461a      	mov	r2, r3
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	4413      	add	r3, r2
 80134d0:	7d79      	ldrb	r1, [r7, #21]
 80134d2:	7cfa      	ldrb	r2, [r7, #19]
 80134d4:	440a      	add	r2, r1
 80134d6:	b2d2      	uxtb	r2, r2
 80134d8:	701a      	strb	r2, [r3, #0]
 80134da:	e004      	b.n	80134e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80134dc:	bf00      	nop
 80134de:	e002      	b.n	80134e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80134e0:	bf00      	nop
 80134e2:	e000      	b.n	80134e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80134e4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80134e6:	7cfb      	ldrb	r3, [r7, #19]
 80134e8:	3301      	adds	r3, #1
 80134ea:	74fb      	strb	r3, [r7, #19]
 80134ec:	7cfb      	ldrb	r3, [r7, #19]
 80134ee:	2b0f      	cmp	r3, #15
 80134f0:	f67f af6c 	bls.w	80133cc <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80134f4:	7d7b      	ldrb	r3, [r7, #21]
 80134f6:	3310      	adds	r3, #16
 80134f8:	757b      	strb	r3, [r7, #21]
 80134fa:	7d3b      	ldrb	r3, [r7, #20]
 80134fc:	3301      	adds	r3, #1
 80134fe:	753b      	strb	r3, [r7, #20]
 8013500:	7d7b      	ldrb	r3, [r7, #21]
 8013502:	b29a      	uxth	r2, r3
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	8a1b      	ldrh	r3, [r3, #16]
 8013508:	429a      	cmp	r2, r3
 801350a:	f4ff af5c 	bcc.w	80133c6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	7dfa      	ldrb	r2, [r7, #23]
 8013512:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	7dba      	ldrb	r2, [r7, #22]
 8013518:	701a      	strb	r2, [r3, #0]
}
 801351a:	bf00      	nop
 801351c:	371c      	adds	r7, #28
 801351e:	46bd      	mov	sp, r7
 8013520:	bd90      	pop	{r4, r7, pc}

08013522 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8013522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013524:	b08b      	sub	sp, #44	@ 0x2c
 8013526:	af04      	add	r7, sp, #16
 8013528:	60f8      	str	r0, [r7, #12]
 801352a:	60b9      	str	r1, [r7, #8]
 801352c:	607a      	str	r2, [r7, #4]
 801352e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	f007 fe7f 	bl	801b238 <UTIL_TIMER_GetElapsedTime>
 801353a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	1ad2      	subs	r2, r2, r3
 8013544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013546:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8013548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354a:	2201      	movs	r2, #1
 801354c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	2200      	movs	r2, #0
 8013552:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	685b      	ldr	r3, [r3, #4]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d004      	beq.n	8013566 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013560:	697a      	ldr	r2, [r7, #20]
 8013562:	429a      	cmp	r2, r3
 8013564:	d32b      	bcc.n	80135be <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	2200      	movs	r2, #0
 801356a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	69db      	ldr	r3, [r3, #28]
 8013570:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8013576:	68dd      	ldr	r5, [r3, #12]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	7a5e      	ldrb	r6, [r3, #9]
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	7d1b      	ldrb	r3, [r3, #20]
 8013586:	68fa      	ldr	r2, [r7, #12]
 8013588:	6992      	ldr	r2, [r2, #24]
 801358a:	9203      	str	r2, [sp, #12]
 801358c:	68fa      	ldr	r2, [r7, #12]
 801358e:	f10d 0e04 	add.w	lr, sp, #4
 8013592:	320c      	adds	r2, #12
 8013594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013598:	e88e 0003 	stmia.w	lr, {r0, r1}
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	4663      	mov	r3, ip
 80135a0:	4632      	mov	r2, r6
 80135a2:	4629      	mov	r1, r5
 80135a4:	4620      	mov	r0, r4
 80135a6:	f7ff fc25 	bl	8012df4 <RegionCommonUpdateBandTimeOff>
 80135aa:	4602      	mov	r2, r0
 80135ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ae:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	69d8      	ldr	r0, [r3, #28]
 80135b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b6:	683a      	ldr	r2, [r7, #0]
 80135b8:	6879      	ldr	r1, [r7, #4]
 80135ba:	f7ff fef4 	bl	80133a6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d004      	beq.n	80135d0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80135c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135c8:	2200      	movs	r2, #0
 80135ca:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80135cc:	2300      	movs	r3, #0
 80135ce:	e006      	b.n	80135de <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80135d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d001      	beq.n	80135dc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80135d8:	230b      	movs	r3, #11
 80135da:	e000      	b.n	80135de <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80135dc:	230c      	movs	r3, #12
    }
}
 80135de:	4618      	mov	r0, r3
 80135e0:	371c      	adds	r7, #28
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080135e6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80135e6:	b5b0      	push	{r4, r5, r7, lr}
 80135e8:	b086      	sub	sp, #24
 80135ea:	af02      	add	r7, sp, #8
 80135ec:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f993 2000 	ldrsb.w	r2, [r3]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013600:	429a      	cmp	r2, r3
 8013602:	d103      	bne.n	801360c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801360a:	e026      	b.n	801365a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801360c:	7bfb      	ldrb	r3, [r7, #15]
 801360e:	3b01      	subs	r3, #1
 8013610:	b2db      	uxtb	r3, r3
 8013612:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801361a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801361e:	429a      	cmp	r2, r3
 8013620:	d019      	beq.n	8013656 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	78d8      	ldrb	r0, [r3, #3]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6859      	ldr	r1, [r3, #4]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	6892      	ldr	r2, [r2, #8]
 801363a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801363e:	9201      	str	r2, [sp, #4]
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	462b      	mov	r3, r5
 8013644:	4622      	mov	r2, r4
 8013646:	f7ff fa92 	bl	8012b6e <RegionCommonChanVerifyDr>
 801364a:	4603      	mov	r3, r0
 801364c:	f083 0301 	eor.w	r3, r3, #1
 8013650:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8013652:	2b00      	cmp	r3, #0
 8013654:	d1da      	bne.n	801360c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8013656:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801365a:	4618      	mov	r0, r3
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bdb0      	pop	{r4, r5, r7, pc}

08013662 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8013662:	b480      	push	{r7}
 8013664:	b083      	sub	sp, #12
 8013666:	af00      	add	r7, sp, #0
 8013668:	4603      	mov	r3, r0
 801366a:	460a      	mov	r2, r1
 801366c:	71fb      	strb	r3, [r7, #7]
 801366e:	4613      	mov	r3, r2
 8013670:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8013672:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8013676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801367a:	4293      	cmp	r3, r2
 801367c:	bfb8      	it	lt
 801367e:	4613      	movlt	r3, r2
 8013680:	b25b      	sxtb	r3, r3
}
 8013682:	4618      	mov	r0, r3
 8013684:	370c      	adds	r7, #12
 8013686:	46bd      	mov	sp, r7
 8013688:	bc80      	pop	{r7}
 801368a:	4770      	bx	lr

0801368c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	683a      	ldr	r2, [r7, #0]
 801369c:	4413      	add	r3, r2
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	4a07      	ldr	r2, [pc, #28]	@ (80136c0 <RegionCommonGetBandwidth+0x34>)
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d004      	beq.n	80136b0 <RegionCommonGetBandwidth+0x24>
 80136a6:	4a07      	ldr	r2, [pc, #28]	@ (80136c4 <RegionCommonGetBandwidth+0x38>)
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d003      	beq.n	80136b4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	e002      	b.n	80136b6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80136b0:	2301      	movs	r3, #1
 80136b2:	e000      	b.n	80136b6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80136b4:	2302      	movs	r3, #2
    }
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	370c      	adds	r7, #12
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bc80      	pop	{r7}
 80136be:	4770      	bx	lr
 80136c0:	0003d090 	.word	0x0003d090
 80136c4:	0007a120 	.word	0x0007a120

080136c8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b086      	sub	sp, #24
 80136cc:	af04      	add	r7, sp, #16
 80136ce:	4603      	mov	r3, r0
 80136d0:	6039      	str	r1, [r7, #0]
 80136d2:	71fb      	strb	r3, [r7, #7]
 80136d4:	4613      	mov	r3, r2
 80136d6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80136d8:	79fb      	ldrb	r3, [r7, #7]
 80136da:	2b05      	cmp	r3, #5
 80136dc:	d810      	bhi.n	8013700 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80136de:	79fb      	ldrb	r3, [r7, #7]
 80136e0:	4a0f      	ldr	r2, [pc, #60]	@ (8013720 <RegionCommonRxConfigPrint+0x58>)
 80136e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80136ea:	9202      	str	r2, [sp, #8]
 80136ec:	683a      	ldr	r2, [r7, #0]
 80136ee:	9201      	str	r2, [sp, #4]
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013724 <RegionCommonRxConfigPrint+0x5c>)
 80136f4:	2201      	movs	r2, #1
 80136f6:	2100      	movs	r1, #0
 80136f8:	2002      	movs	r0, #2
 80136fa:	f006 fe17 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80136fe:	e00a      	b.n	8013716 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8013700:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	4b07      	ldr	r3, [pc, #28]	@ (8013728 <RegionCommonRxConfigPrint+0x60>)
 801370c:	2201      	movs	r2, #1
 801370e:	2100      	movs	r1, #0
 8013710:	2002      	movs	r0, #2
 8013712:	f006 fe0b 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
}
 8013716:	bf00      	nop
 8013718:	3708      	adds	r7, #8
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	200000bc 	.word	0x200000bc
 8013724:	08021614 	.word	0x08021614
 8013728:	08021634 	.word	0x08021634

0801372c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b084      	sub	sp, #16
 8013730:	af02      	add	r7, sp, #8
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	460b      	mov	r3, r1
 8013736:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8013738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801373c:	9301      	str	r3, [sp, #4]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	9300      	str	r3, [sp, #0]
 8013742:	4b05      	ldr	r3, [pc, #20]	@ (8013758 <RegionCommonTxConfigPrint+0x2c>)
 8013744:	2201      	movs	r2, #1
 8013746:	2100      	movs	r1, #0
 8013748:	2002      	movs	r0, #2
 801374a:	f006 fdef 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
}
 801374e:	bf00      	nop
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	08021650 	.word	0x08021650

0801375c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013766:	4b2d      	ldr	r3, [pc, #180]	@ (801381c <VerifyRfFreq+0xc0>)
 8013768:	6a1b      	ldr	r3, [r3, #32]
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	4798      	blx	r3
 801376e:	4603      	mov	r3, r0
 8013770:	f083 0301 	eor.w	r3, r3, #1
 8013774:	b2db      	uxtb	r3, r3
 8013776:	2b00      	cmp	r3, #0
 8013778:	d001      	beq.n	801377e <VerifyRfFreq+0x22>
    {
        return false;
 801377a:	2300      	movs	r3, #0
 801377c:	e04a      	b.n	8013814 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4a27      	ldr	r2, [pc, #156]	@ (8013820 <VerifyRfFreq+0xc4>)
 8013782:	4293      	cmp	r3, r2
 8013784:	d307      	bcc.n	8013796 <VerifyRfFreq+0x3a>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4a26      	ldr	r2, [pc, #152]	@ (8013824 <VerifyRfFreq+0xc8>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d803      	bhi.n	8013796 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	2202      	movs	r2, #2
 8013792:	701a      	strb	r2, [r3, #0]
 8013794:	e03d      	b.n	8013812 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	4a22      	ldr	r2, [pc, #136]	@ (8013824 <VerifyRfFreq+0xc8>)
 801379a:	4293      	cmp	r3, r2
 801379c:	d907      	bls.n	80137ae <VerifyRfFreq+0x52>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4a21      	ldr	r2, [pc, #132]	@ (8013828 <VerifyRfFreq+0xcc>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d803      	bhi.n	80137ae <VerifyRfFreq+0x52>
    {
        *band = 0;
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	2200      	movs	r2, #0
 80137aa:	701a      	strb	r2, [r3, #0]
 80137ac:	e031      	b.n	8013812 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	4a1d      	ldr	r2, [pc, #116]	@ (8013828 <VerifyRfFreq+0xcc>)
 80137b2:	4293      	cmp	r3, r2
 80137b4:	d907      	bls.n	80137c6 <VerifyRfFreq+0x6a>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4a1c      	ldr	r2, [pc, #112]	@ (801382c <VerifyRfFreq+0xd0>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d803      	bhi.n	80137c6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	2201      	movs	r2, #1
 80137c2:	701a      	strb	r2, [r3, #0]
 80137c4:	e025      	b.n	8013812 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	4a19      	ldr	r2, [pc, #100]	@ (8013830 <VerifyRfFreq+0xd4>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d907      	bls.n	80137de <VerifyRfFreq+0x82>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	4a18      	ldr	r2, [pc, #96]	@ (8013834 <VerifyRfFreq+0xd8>)
 80137d2:	4293      	cmp	r3, r2
 80137d4:	d803      	bhi.n	80137de <VerifyRfFreq+0x82>
    {
        *band = 5;
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	2205      	movs	r2, #5
 80137da:	701a      	strb	r2, [r3, #0]
 80137dc:	e019      	b.n	8013812 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	4a15      	ldr	r2, [pc, #84]	@ (8013838 <VerifyRfFreq+0xdc>)
 80137e2:	4293      	cmp	r3, r2
 80137e4:	d907      	bls.n	80137f6 <VerifyRfFreq+0x9a>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4a14      	ldr	r2, [pc, #80]	@ (801383c <VerifyRfFreq+0xe0>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d803      	bhi.n	80137f6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	2203      	movs	r2, #3
 80137f2:	701a      	strb	r2, [r3, #0]
 80137f4:	e00d      	b.n	8013812 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4a11      	ldr	r2, [pc, #68]	@ (8013840 <VerifyRfFreq+0xe4>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d307      	bcc.n	801380e <VerifyRfFreq+0xb2>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	4a10      	ldr	r2, [pc, #64]	@ (8013844 <VerifyRfFreq+0xe8>)
 8013802:	4293      	cmp	r3, r2
 8013804:	d803      	bhi.n	801380e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	2204      	movs	r2, #4
 801380a:	701a      	strb	r2, [r3, #0]
 801380c:	e001      	b.n	8013812 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801380e:	2300      	movs	r3, #0
 8013810:	e000      	b.n	8013814 <VerifyRfFreq+0xb8>
    }
    return true;
 8013812:	2301      	movs	r3, #1
}
 8013814:	4618      	mov	r0, r3
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	08021f8c 	.word	0x08021f8c
 8013820:	337055c0 	.word	0x337055c0
 8013824:	338eda3f 	.word	0x338eda3f
 8013828:	33bca100 	.word	0x33bca100
 801382c:	33c5c8c0 	.word	0x33c5c8c0
 8013830:	33c74f5f 	.word	0x33c74f5f
 8013834:	33cef080 	.word	0x33cef080
 8013838:	33d1fdbf 	.word	0x33d1fdbf
 801383c:	33d5ce50 	.word	0x33d5ce50
 8013840:	33d691a0 	.word	0x33d691a0
 8013844:	33db2580 	.word	0x33db2580

08013848 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8013848:	b590      	push	{r4, r7, lr}
 801384a:	b08b      	sub	sp, #44	@ 0x2c
 801384c:	af04      	add	r7, sp, #16
 801384e:	4603      	mov	r3, r0
 8013850:	460a      	mov	r2, r1
 8013852:	71fb      	strb	r3, [r7, #7]
 8013854:	4613      	mov	r3, r2
 8013856:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8013858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801385c:	4a1f      	ldr	r2, [pc, #124]	@ (80138dc <GetTimeOnAir+0x94>)
 801385e:	5cd3      	ldrb	r3, [r2, r3]
 8013860:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8013862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013866:	491e      	ldr	r1, [pc, #120]	@ (80138e0 <GetTimeOnAir+0x98>)
 8013868:	4618      	mov	r0, r3
 801386a:	f7ff ff0f 	bl	801368c <RegionCommonGetBandwidth>
 801386e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8013870:	2300      	movs	r3, #0
 8013872:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8013874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013878:	2b07      	cmp	r3, #7
 801387a:	d118      	bne.n	80138ae <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801387c:	4b19      	ldr	r3, [pc, #100]	@ (80138e4 <GetTimeOnAir+0x9c>)
 801387e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013880:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013884:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013888:	fb02 f303 	mul.w	r3, r2, r3
 801388c:	4619      	mov	r1, r3
 801388e:	88bb      	ldrh	r3, [r7, #4]
 8013890:	b2db      	uxtb	r3, r3
 8013892:	2201      	movs	r2, #1
 8013894:	9203      	str	r2, [sp, #12]
 8013896:	9302      	str	r3, [sp, #8]
 8013898:	2300      	movs	r3, #0
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	2305      	movs	r3, #5
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	2300      	movs	r3, #0
 80138a2:	460a      	mov	r2, r1
 80138a4:	68f9      	ldr	r1, [r7, #12]
 80138a6:	2000      	movs	r0, #0
 80138a8:	47a0      	blx	r4
 80138aa:	6178      	str	r0, [r7, #20]
 80138ac:	e011      	b.n	80138d2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80138ae:	4b0d      	ldr	r3, [pc, #52]	@ (80138e4 <GetTimeOnAir+0x9c>)
 80138b0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80138b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80138b6:	88bb      	ldrh	r3, [r7, #4]
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	2101      	movs	r1, #1
 80138bc:	9103      	str	r1, [sp, #12]
 80138be:	9302      	str	r3, [sp, #8]
 80138c0:	2300      	movs	r3, #0
 80138c2:	9301      	str	r3, [sp, #4]
 80138c4:	2308      	movs	r3, #8
 80138c6:	9300      	str	r3, [sp, #0]
 80138c8:	2301      	movs	r3, #1
 80138ca:	68f9      	ldr	r1, [r7, #12]
 80138cc:	2001      	movs	r0, #1
 80138ce:	47a0      	blx	r4
 80138d0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80138d2:	697b      	ldr	r3, [r7, #20]
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	371c      	adds	r7, #28
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd90      	pop	{r4, r7, pc}
 80138dc:	08021b4c 	.word	0x08021b4c
 80138e0:	08021b54 	.word	0x08021b54
 80138e4:	08021f8c 	.word	0x08021f8c

080138e8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b088      	sub	sp, #32
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80138f0:	2300      	movs	r3, #0
 80138f2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	3b01      	subs	r3, #1
 80138fa:	2b37      	cmp	r3, #55	@ 0x37
 80138fc:	f200 8122 	bhi.w	8013b44 <RegionEU868GetPhyParam+0x25c>
 8013900:	a201      	add	r2, pc, #4	@ (adr r2, 8013908 <RegionEU868GetPhyParam+0x20>)
 8013902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013906:	bf00      	nop
 8013908:	080139e9 	.word	0x080139e9
 801390c:	080139ef 	.word	0x080139ef
 8013910:	08013b45 	.word	0x08013b45
 8013914:	08013b45 	.word	0x08013b45
 8013918:	08013b45 	.word	0x08013b45
 801391c:	080139f5 	.word	0x080139f5
 8013920:	08013b45 	.word	0x08013b45
 8013924:	08013a2f 	.word	0x08013a2f
 8013928:	08013b45 	.word	0x08013b45
 801392c:	08013a35 	.word	0x08013a35
 8013930:	08013a3b 	.word	0x08013a3b
 8013934:	08013a41 	.word	0x08013a41
 8013938:	08013a47 	.word	0x08013a47
 801393c:	08013a57 	.word	0x08013a57
 8013940:	08013a67 	.word	0x08013a67
 8013944:	08013a6d 	.word	0x08013a6d
 8013948:	08013a75 	.word	0x08013a75
 801394c:	08013a7d 	.word	0x08013a7d
 8013950:	08013a85 	.word	0x08013a85
 8013954:	08013a8d 	.word	0x08013a8d
 8013958:	08013a95 	.word	0x08013a95
 801395c:	08013aa9 	.word	0x08013aa9
 8013960:	08013aaf 	.word	0x08013aaf
 8013964:	08013ab5 	.word	0x08013ab5
 8013968:	08013abb 	.word	0x08013abb
 801396c:	08013ac7 	.word	0x08013ac7
 8013970:	08013ad3 	.word	0x08013ad3
 8013974:	08013ad9 	.word	0x08013ad9
 8013978:	08013ae1 	.word	0x08013ae1
 801397c:	08013ae7 	.word	0x08013ae7
 8013980:	08013aed 	.word	0x08013aed
 8013984:	08013af5 	.word	0x08013af5
 8013988:	080139fb 	.word	0x080139fb
 801398c:	08013b45 	.word	0x08013b45
 8013990:	08013b45 	.word	0x08013b45
 8013994:	08013b45 	.word	0x08013b45
 8013998:	08013b45 	.word	0x08013b45
 801399c:	08013b45 	.word	0x08013b45
 80139a0:	08013b45 	.word	0x08013b45
 80139a4:	08013b45 	.word	0x08013b45
 80139a8:	08013b45 	.word	0x08013b45
 80139ac:	08013b45 	.word	0x08013b45
 80139b0:	08013b45 	.word	0x08013b45
 80139b4:	08013b45 	.word	0x08013b45
 80139b8:	08013b45 	.word	0x08013b45
 80139bc:	08013b45 	.word	0x08013b45
 80139c0:	08013afb 	.word	0x08013afb
 80139c4:	08013b01 	.word	0x08013b01
 80139c8:	08013b0f 	.word	0x08013b0f
 80139cc:	08013b45 	.word	0x08013b45
 80139d0:	08013b45 	.word	0x08013b45
 80139d4:	08013b15 	.word	0x08013b15
 80139d8:	08013b1b 	.word	0x08013b1b
 80139dc:	08013b45 	.word	0x08013b45
 80139e0:	08013b21 	.word	0x08013b21
 80139e4:	08013b31 	.word	0x08013b31
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80139e8:	2300      	movs	r3, #0
 80139ea:	61bb      	str	r3, [r7, #24]
            break;
 80139ec:	e0ab      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80139ee:	2300      	movs	r3, #0
 80139f0:	61bb      	str	r3, [r7, #24]
            break;
 80139f2:	e0a8      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80139f4:	2300      	movs	r3, #0
 80139f6:	61bb      	str	r3, [r7, #24]
            break;
 80139f8:	e0a5      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013a00:	733b      	strb	r3, [r7, #12]
 8013a02:	2307      	movs	r3, #7
 8013a04:	737b      	strb	r3, [r7, #13]
 8013a06:	2300      	movs	r3, #0
 8013a08:	73bb      	strb	r3, [r7, #14]
 8013a0a:	2310      	movs	r3, #16
 8013a0c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8013a0e:	4b51      	ldr	r3, [pc, #324]	@ (8013b54 <RegionEU868GetPhyParam+0x26c>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013a16:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8013a18:	4b4e      	ldr	r3, [pc, #312]	@ (8013b54 <RegionEU868GetPhyParam+0x26c>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013a1c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8013a1e:	f107 030c 	add.w	r3, r7, #12
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7ff fddf 	bl	80135e6 <RegionCommonGetNextLowerTxDr>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	61bb      	str	r3, [r7, #24]
            break;
 8013a2c:	e08b      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	61bb      	str	r3, [r7, #24]
            break;
 8013a32:	e088      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8013a34:	2300      	movs	r3, #0
 8013a36:	61bb      	str	r3, [r7, #24]
            break;
 8013a38:	e085      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8013a3a:	2340      	movs	r3, #64	@ 0x40
 8013a3c:	61bb      	str	r3, [r7, #24]
            break;
 8013a3e:	e082      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8013a40:	2320      	movs	r3, #32
 8013a42:	61bb      	str	r3, [r7, #24]
            break;
 8013a44:	e07f      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	4b42      	ldr	r3, [pc, #264]	@ (8013b58 <RegionEU868GetPhyParam+0x270>)
 8013a50:	5c9b      	ldrb	r3, [r3, r2]
 8013a52:	61bb      	str	r3, [r7, #24]
            break;
 8013a54:	e077      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8013b5c <RegionEU868GetPhyParam+0x274>)
 8013a60:	5c9b      	ldrb	r3, [r3, r2]
 8013a62:	61bb      	str	r3, [r7, #24]
            break;
 8013a64:	e06f      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8013a66:	2301      	movs	r3, #1
 8013a68:	61bb      	str	r3, [r7, #24]
            break;
 8013a6a:	e06c      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8013a6c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013a70:	61bb      	str	r3, [r7, #24]
            break;
 8013a72:	e068      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8013a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013a78:	61bb      	str	r3, [r7, #24]
            break;
 8013a7a:	e064      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8013a7c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8013a80:	61bb      	str	r3, [r7, #24]
            break;
 8013a82:	e060      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8013a84:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013a88:	61bb      	str	r3, [r7, #24]
            break;
 8013a8a:	e05c      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8013a8c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8013a90:	61bb      	str	r3, [r7, #24]
            break;
 8013a92:	e058      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8013a94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013a98:	4831      	ldr	r0, [pc, #196]	@ (8013b60 <RegionEU868GetPhyParam+0x278>)
 8013a9a:	f003 fecb 	bl	8017834 <randr>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8013aa4:	61bb      	str	r3, [r7, #24]
            break;
 8013aa6:	e04e      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	61bb      	str	r3, [r7, #24]
            break;
 8013aac:	e04b      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8013aae:	4b2d      	ldr	r3, [pc, #180]	@ (8013b64 <RegionEU868GetPhyParam+0x27c>)
 8013ab0:	61bb      	str	r3, [r7, #24]
            break;
 8013ab2:	e048      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	61bb      	str	r3, [r7, #24]
            break;
 8013ab8:	e045      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013aba:	4b26      	ldr	r3, [pc, #152]	@ (8013b54 <RegionEU868GetPhyParam+0x26c>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013ac2:	61bb      	str	r3, [r7, #24]
            break;
 8013ac4:	e03f      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8013ac6:	4b23      	ldr	r3, [pc, #140]	@ (8013b54 <RegionEU868GetPhyParam+0x26c>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013ace:	61bb      	str	r3, [r7, #24]
            break;
 8013ad0:	e039      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8013ad2:	2310      	movs	r3, #16
 8013ad4:	61bb      	str	r3, [r7, #24]
            break;
 8013ad6:	e036      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8013ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8013b54 <RegionEU868GetPhyParam+0x26c>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	61bb      	str	r3, [r7, #24]
            break;
 8013ade:	e032      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	61bb      	str	r3, [r7, #24]
            break;
 8013ae4:	e02f      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	61bb      	str	r3, [r7, #24]
            break;
 8013aea:	e02c      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8013aec:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8013af0:	61bb      	str	r3, [r7, #24]
            break;
 8013af2:	e028      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8013af4:	4b1c      	ldr	r3, [pc, #112]	@ (8013b68 <RegionEU868GetPhyParam+0x280>)
 8013af6:	61bb      	str	r3, [r7, #24]
            break;
 8013af8:	e025      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8013afa:	4b1a      	ldr	r3, [pc, #104]	@ (8013b64 <RegionEU868GetPhyParam+0x27c>)
 8013afc:	61bb      	str	r3, [r7, #24]
            break;
 8013afe:	e022      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8013b00:	2311      	movs	r3, #17
 8013b02:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8013b04:	2301      	movs	r3, #1
 8013b06:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	76bb      	strb	r3, [r7, #26]
            break;
 8013b0c:	e01b      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8013b0e:	2303      	movs	r3, #3
 8013b10:	61bb      	str	r3, [r7, #24]
            break;
 8013b12:	e018      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8013b14:	4b13      	ldr	r3, [pc, #76]	@ (8013b64 <RegionEU868GetPhyParam+0x27c>)
 8013b16:	61bb      	str	r3, [r7, #24]
            break;
 8013b18:	e015      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8013b1a:	2303      	movs	r3, #3
 8013b1c:	61bb      	str	r3, [r7, #24]
            break;
 8013b1e:	e012      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b26:	461a      	mov	r2, r3
 8013b28:	4b10      	ldr	r3, [pc, #64]	@ (8013b6c <RegionEU868GetPhyParam+0x284>)
 8013b2a:	5c9b      	ldrb	r3, [r3, r2]
 8013b2c:	61bb      	str	r3, [r7, #24]
            break;
 8013b2e:	e00a      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b36:	490e      	ldr	r1, [pc, #56]	@ (8013b70 <RegionEU868GetPhyParam+0x288>)
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7ff fda7 	bl	801368c <RegionCommonGetBandwidth>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	61bb      	str	r3, [r7, #24]
            break;
 8013b42:	e000      	b.n	8013b46 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8013b44:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	61fb      	str	r3, [r7, #28]
 8013b4a:	69fb      	ldr	r3, [r7, #28]
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3720      	adds	r7, #32
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	20001220 	.word	0x20001220
 8013b58:	08021b74 	.word	0x08021b74
 8013b5c:	08021b7c 	.word	0x08021b7c
 8013b60:	fffffc18 	.word	0xfffffc18
 8013b64:	33d3e608 	.word	0x33d3e608
 8013b68:	4009999a 	.word	0x4009999a
 8013b6c:	08021b4c 	.word	0x08021b4c
 8013b70:	08021b54 	.word	0x08021b54

08013b74 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013b74:	b590      	push	{r4, r7, lr}
 8013b76:	b085      	sub	sp, #20
 8013b78:	af02      	add	r7, sp, #8
 8013b7a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8013b7c:	4b11      	ldr	r3, [pc, #68]	@ (8013bc4 <RegionEU868SetBandTxDone+0x50>)
 8013b7e:	681a      	ldr	r2, [r3, #0]
 8013b80:	4b11      	ldr	r3, [pc, #68]	@ (8013bc8 <RegionEU868SetBandTxDone+0x54>)
 8013b82:	6819      	ldr	r1, [r3, #0]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	005b      	lsls	r3, r3, #1
 8013b8e:	4403      	add	r3, r0
 8013b90:	009b      	lsls	r3, r3, #2
 8013b92:	440b      	add	r3, r1
 8013b94:	3309      	adds	r3, #9
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	4619      	mov	r1, r3
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	005b      	lsls	r3, r3, #1
 8013b9e:	440b      	add	r3, r1
 8013ba0:	00db      	lsls	r3, r3, #3
 8013ba2:	18d0      	adds	r0, r2, r3
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6899      	ldr	r1, [r3, #8]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	785c      	ldrb	r4, [r3, #1]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	691a      	ldr	r2, [r3, #16]
 8013bb0:	9200      	str	r2, [sp, #0]
 8013bb2:	68db      	ldr	r3, [r3, #12]
 8013bb4:	4622      	mov	r2, r4
 8013bb6:	f7ff f8ef 	bl	8012d98 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8013bba:	bf00      	nop
 8013bbc:	370c      	adds	r7, #12
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd90      	pop	{r4, r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	20001224 	.word	0x20001224
 8013bc8:	20001220 	.word	0x20001220

08013bcc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b0b0      	sub	sp, #192	@ 0xc0
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8013bd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013bd8:	2290      	movs	r2, #144	@ 0x90
 8013bda:	2100      	movs	r1, #0
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f00c fdd9 	bl	8020794 <memset>
 8013be2:	2364      	movs	r3, #100	@ 0x64
 8013be4:	863b      	strh	r3, [r7, #48]	@ 0x30
 8013be6:	2364      	movs	r3, #100	@ 0x64
 8013be8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8013bec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013bf0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8013bf4:	230a      	movs	r3, #10
 8013bf6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8013bfa:	2364      	movs	r3, #100	@ 0x64
 8013bfc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8013c00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013c04:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	7b1b      	ldrb	r3, [r3, #12]
 8013c0c:	2b02      	cmp	r3, #2
 8013c0e:	d05d      	beq.n	8013ccc <RegionEU868InitDefaults+0x100>
 8013c10:	2b02      	cmp	r3, #2
 8013c12:	dc6a      	bgt.n	8013cea <RegionEU868InitDefaults+0x11e>
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d002      	beq.n	8013c1e <RegionEU868InitDefaults+0x52>
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d03e      	beq.n	8013c9a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8013c1c:	e065      	b.n	8013cea <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d062      	beq.n	8013cec <RegionEU868InitDefaults+0x120>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d05e      	beq.n	8013cec <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	4a30      	ldr	r2, [pc, #192]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c34:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8013cf8 <RegionEU868InitDefaults+0x12c>)
 8013c3c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8013c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8013cf8 <RegionEU868InitDefaults+0x12c>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8013c46:	2290      	movs	r2, #144	@ 0x90
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f003 fe0a 	bl	8017862 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8013c4e:	4b29      	ldr	r3, [pc, #164]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	4a2a      	ldr	r2, [pc, #168]	@ (8013cfc <RegionEU868InitDefaults+0x130>)
 8013c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8013c5a:	4b26      	ldr	r3, [pc, #152]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4a28      	ldr	r2, [pc, #160]	@ (8013d00 <RegionEU868InitDefaults+0x134>)
 8013c60:	330c      	adds	r3, #12
 8013c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8013c68:	4b22      	ldr	r3, [pc, #136]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	4a25      	ldr	r2, [pc, #148]	@ (8013d04 <RegionEU868InitDefaults+0x138>)
 8013c6e:	3318      	adds	r3, #24
 8013c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8013c76:	4b1f      	ldr	r3, [pc, #124]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	2207      	movs	r2, #7
 8013c7c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013c80:	4b1c      	ldr	r3, [pc, #112]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013c88:	4b1a      	ldr	r3, [pc, #104]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013c90:	2201      	movs	r2, #1
 8013c92:	4619      	mov	r1, r3
 8013c94:	f7ff f85a 	bl	8012d4c <RegionCommonChanMaskCopy>
 8013c98:	e028      	b.n	8013cec <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8013c9a:	4b16      	ldr	r3, [pc, #88]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8013ca2:	4b14      	ldr	r3, [pc, #80]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8013caa:	4b12      	ldr	r3, [pc, #72]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013cb2:	4b10      	ldr	r3, [pc, #64]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013cba:	4b0e      	ldr	r3, [pc, #56]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	f7ff f841 	bl	8012d4c <RegionCommonChanMaskCopy>
            break;
 8013cca:	e00f      	b.n	8013cec <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8013ccc:	4b09      	ldr	r3, [pc, #36]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8013cd4:	4b07      	ldr	r3, [pc, #28]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8013cdc:	4b05      	ldr	r3, [pc, #20]	@ (8013cf4 <RegionEU868InitDefaults+0x128>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	430a      	orrs	r2, r1
 8013ce2:	b292      	uxth	r2, r2
 8013ce4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8013ce8:	e000      	b.n	8013cec <RegionEU868InitDefaults+0x120>
            break;
 8013cea:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8013cec:	37c0      	adds	r7, #192	@ 0xc0
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20001220 	.word	0x20001220
 8013cf8:	20001224 	.word	0x20001224
 8013cfc:	0802166c 	.word	0x0802166c
 8013d00:	08021678 	.word	0x08021678
 8013d04:	08021684 	.word	0x08021684

08013d08 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	460b      	mov	r3, r1
 8013d12:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8013d14:	78fb      	ldrb	r3, [r7, #3]
 8013d16:	2b0f      	cmp	r3, #15
 8013d18:	d86c      	bhi.n	8013df4 <RegionEU868Verify+0xec>
 8013d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8013d20 <RegionEU868Verify+0x18>)
 8013d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d20:	08013d61 	.word	0x08013d61
 8013d24:	08013df5 	.word	0x08013df5
 8013d28:	08013df5 	.word	0x08013df5
 8013d2c:	08013df5 	.word	0x08013df5
 8013d30:	08013df5 	.word	0x08013df5
 8013d34:	08013d79 	.word	0x08013d79
 8013d38:	08013d97 	.word	0x08013d97
 8013d3c:	08013db5 	.word	0x08013db5
 8013d40:	08013df5 	.word	0x08013df5
 8013d44:	08013dd3 	.word	0x08013dd3
 8013d48:	08013dd3 	.word	0x08013dd3
 8013d4c:	08013df5 	.word	0x08013df5
 8013d50:	08013df5 	.word	0x08013df5
 8013d54:	08013df5 	.word	0x08013df5
 8013d58:	08013df5 	.word	0x08013df5
 8013d5c:	08013df1 	.word	0x08013df1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8013d60:	2300      	movs	r3, #0
 8013d62:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f107 020f 	add.w	r2, r7, #15
 8013d6c:	4611      	mov	r1, r2
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7ff fcf4 	bl	801375c <VerifyRfFreq>
 8013d74:	4603      	mov	r3, r0
 8013d76:	e03e      	b.n	8013df6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8013d7e:	2207      	movs	r2, #7
 8013d80:	2100      	movs	r1, #0
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fe ff65 	bl	8012c52 <RegionCommonValueInRange>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	bf14      	ite	ne
 8013d8e:	2301      	movne	r3, #1
 8013d90:	2300      	moveq	r3, #0
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	e02f      	b.n	8013df6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f993 3000 	ldrsb.w	r3, [r3]
 8013d9c:	2205      	movs	r2, #5
 8013d9e:	2100      	movs	r1, #0
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fe ff56 	bl	8012c52 <RegionCommonValueInRange>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	bf14      	ite	ne
 8013dac:	2301      	movne	r3, #1
 8013dae:	2300      	moveq	r3, #0
 8013db0:	b2db      	uxtb	r3, r3
 8013db2:	e020      	b.n	8013df6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f993 3000 	ldrsb.w	r3, [r3]
 8013dba:	2207      	movs	r2, #7
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7fe ff47 	bl	8012c52 <RegionCommonValueInRange>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	bf14      	ite	ne
 8013dca:	2301      	movne	r3, #1
 8013dcc:	2300      	moveq	r3, #0
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	e011      	b.n	8013df6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8013dd8:	2207      	movs	r2, #7
 8013dda:	2100      	movs	r1, #0
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fe ff38 	bl	8012c52 <RegionCommonValueInRange>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	bf14      	ite	ne
 8013de8:	2301      	movne	r3, #1
 8013dea:	2300      	moveq	r3, #0
 8013dec:	b2db      	uxtb	r3, r3
 8013dee:	e002      	b.n	8013df6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8013df0:	2301      	movs	r3, #1
 8013df2:	e000      	b.n	8013df6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8013df4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3710      	adds	r7, #16
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop

08013e00 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b08a      	sub	sp, #40	@ 0x28
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8013e08:	2350      	movs	r3, #80	@ 0x50
 8013e0a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	7a1b      	ldrb	r3, [r3, #8]
 8013e12:	2b10      	cmp	r3, #16
 8013e14:	d162      	bne.n	8013edc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	330f      	adds	r3, #15
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d15e      	bne.n	8013ee0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013e22:	2300      	movs	r3, #0
 8013e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e28:	2303      	movs	r3, #3
 8013e2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013e2e:	e050      	b.n	8013ed2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8013e30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013e34:	2b07      	cmp	r3, #7
 8013e36:	d824      	bhi.n	8013e82 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	685a      	ldr	r2, [r3, #4]
 8013e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e40:	4413      	add	r3, r2
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8013e46:	69ba      	ldr	r2, [r7, #24]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6859      	ldr	r1, [r3, #4]
 8013e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e50:	3301      	adds	r3, #1
 8013e52:	440b      	add	r3, r1
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	021b      	lsls	r3, r3, #8
 8013e58:	4313      	orrs	r3, r2
 8013e5a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8013e5c:	69ba      	ldr	r2, [r7, #24]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6859      	ldr	r1, [r3, #4]
 8013e62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e66:	3302      	adds	r3, #2
 8013e68:	440b      	add	r3, r1
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	041b      	lsls	r3, r3, #16
 8013e6e:	4313      	orrs	r3, r2
 8013e70:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8013e72:	69bb      	ldr	r3, [r7, #24]
 8013e74:	2264      	movs	r2, #100	@ 0x64
 8013e76:	fb02 f303 	mul.w	r3, r2, r3
 8013e7a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	61fb      	str	r3, [r7, #28]
 8013e80:	e006      	b.n	8013e90 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8013e82:	2300      	movs	r3, #0
 8013e84:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8013e86:	2300      	movs	r3, #0
 8013e88:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d00b      	beq.n	8013eae <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8013e96:	f107 0318 	add.w	r3, r7, #24
 8013e9a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8013e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ea0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8013ea2:	f107 0310 	add.w	r3, r7, #16
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f000 fd14 	bl	80148d4 <RegionEU868ChannelAdd>
 8013eac:	e007      	b.n	8013ebe <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8013eae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013eb2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8013eb4:	f107 030c 	add.w	r3, r7, #12
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f000 fdad 	bl	8014a18 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ec2:	3303      	adds	r3, #3
 8013ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ecc:	3301      	adds	r3, #1
 8013ece:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ed6:	2b0f      	cmp	r3, #15
 8013ed8:	d9aa      	bls.n	8013e30 <RegionEU868ApplyCFList+0x30>
 8013eda:	e002      	b.n	8013ee2 <RegionEU868ApplyCFList+0xe2>
        return;
 8013edc:	bf00      	nop
 8013ede:	e000      	b.n	8013ee2 <RegionEU868ApplyCFList+0xe2>
        return;
 8013ee0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8013ee2:	3728      	adds	r7, #40	@ 0x28
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}

08013ee8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	791b      	ldrb	r3, [r3, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d002      	beq.n	8013efe <RegionEU868ChanMaskSet+0x16>
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	d00b      	beq.n	8013f14 <RegionEU868ChanMaskSet+0x2c>
 8013efc:	e015      	b.n	8013f2a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8013efe:	4b0e      	ldr	r3, [pc, #56]	@ (8013f38 <RegionEU868ChanMaskSet+0x50>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2201      	movs	r2, #1
 8013f0c:	4619      	mov	r1, r3
 8013f0e:	f7fe ff1d 	bl	8012d4c <RegionCommonChanMaskCopy>
            break;
 8013f12:	e00c      	b.n	8013f2e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8013f14:	4b08      	ldr	r3, [pc, #32]	@ (8013f38 <RegionEU868ChanMaskSet+0x50>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2201      	movs	r2, #1
 8013f22:	4619      	mov	r1, r3
 8013f24:	f7fe ff12 	bl	8012d4c <RegionCommonChanMaskCopy>
            break;
 8013f28:	e001      	b.n	8013f2e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	e000      	b.n	8013f30 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8013f2e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3708      	adds	r7, #8
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	20001220 	.word	0x20001220

08013f3c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b088      	sub	sp, #32
 8013f40:	af02      	add	r7, sp, #8
 8013f42:	60ba      	str	r2, [r7, #8]
 8013f44:	607b      	str	r3, [r7, #4]
 8013f46:	4603      	mov	r3, r0
 8013f48:	73fb      	strb	r3, [r7, #15]
 8013f4a:	460b      	mov	r3, r1
 8013f4c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8013f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f56:	2b07      	cmp	r3, #7
 8013f58:	bfa8      	it	ge
 8013f5a:	2307      	movge	r3, #7
 8013f5c:	b25a      	sxtb	r2, r3
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f68:	491e      	ldr	r1, [pc, #120]	@ (8013fe4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7ff fb8e 	bl	801368c <RegionCommonGetBandwidth>
 8013f70:	4603      	mov	r3, r0
 8013f72:	b2da      	uxtb	r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f7e:	2b07      	cmp	r3, #7
 8013f80:	d10a      	bne.n	8013f98 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f88:	461a      	mov	r2, r3
 8013f8a:	4b17      	ldr	r3, [pc, #92]	@ (8013fe8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8013f8c:	5c9b      	ldrb	r3, [r3, r2]
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7ff f910 	bl	80131b4 <RegionCommonComputeSymbolTimeFsk>
 8013f94:	6178      	str	r0, [r7, #20]
 8013f96:	e011      	b.n	8013fbc <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	4b11      	ldr	r3, [pc, #68]	@ (8013fe8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8013fa2:	5c9a      	ldrb	r2, [r3, r2]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013faa:	4619      	mov	r1, r3
 8013fac:	4b0d      	ldr	r3, [pc, #52]	@ (8013fe4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8013fae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	4610      	mov	r0, r2
 8013fb6:	f7ff f8e7 	bl	8013188 <RegionCommonComputeSymbolTimeLoRa>
 8013fba:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8013fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8013fec <RegionEU868ComputeRxWindowParameters+0xb0>)
 8013fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fc0:	4798      	blx	r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	3308      	adds	r3, #8
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	320c      	adds	r2, #12
 8013fca:	7bb9      	ldrb	r1, [r7, #14]
 8013fcc:	9201      	str	r2, [sp, #4]
 8013fce:	9300      	str	r3, [sp, #0]
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	68ba      	ldr	r2, [r7, #8]
 8013fd4:	6978      	ldr	r0, [r7, #20]
 8013fd6:	f7ff f8fd 	bl	80131d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8013fda:	bf00      	nop
 8013fdc:	3718      	adds	r7, #24
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	08021b54 	.word	0x08021b54
 8013fe8:	08021b4c 	.word	0x08021b4c
 8013fec:	08021f8c 	.word	0x08021f8c

08013ff0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013ff0:	b5b0      	push	{r4, r5, r7, lr}
 8013ff2:	b090      	sub	sp, #64	@ 0x40
 8013ff4:	af0a      	add	r7, sp, #40	@ 0x28
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	785b      	ldrb	r3, [r3, #1]
 8013ffe:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014004:	2300      	movs	r3, #0
 8014006:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801400e:	4b5a      	ldr	r3, [pc, #360]	@ (8014178 <RegionEU868RxConfig+0x188>)
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	4798      	blx	r3
 8014014:	4603      	mov	r3, r0
 8014016:	2b00      	cmp	r3, #0
 8014018:	d001      	beq.n	801401e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801401a:	2300      	movs	r3, #0
 801401c:	e0a8      	b.n	8014170 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	7cdb      	ldrb	r3, [r3, #19]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d126      	bne.n	8014074 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014026:	4b55      	ldr	r3, [pc, #340]	@ (801417c <RegionEU868RxConfig+0x18c>)
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	4619      	mov	r1, r3
 8014030:	460b      	mov	r3, r1
 8014032:	005b      	lsls	r3, r3, #1
 8014034:	440b      	add	r3, r1
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4413      	add	r3, r2
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801403e:	4b4f      	ldr	r3, [pc, #316]	@ (801417c <RegionEU868RxConfig+0x18c>)
 8014040:	681a      	ldr	r2, [r3, #0]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	4619      	mov	r1, r3
 8014048:	460b      	mov	r3, r1
 801404a:	005b      	lsls	r3, r3, #1
 801404c:	440b      	add	r3, r1
 801404e:	009b      	lsls	r3, r3, #2
 8014050:	4413      	add	r3, r2
 8014052:	3304      	adds	r3, #4
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00c      	beq.n	8014074 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801405a:	4b48      	ldr	r3, [pc, #288]	@ (801417c <RegionEU868RxConfig+0x18c>)
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	4619      	mov	r1, r3
 8014064:	460b      	mov	r3, r1
 8014066:	005b      	lsls	r3, r3, #1
 8014068:	440b      	add	r3, r1
 801406a:	009b      	lsls	r3, r3, #2
 801406c:	4413      	add	r3, r2
 801406e:	3304      	adds	r3, #4
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8014074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014078:	4a41      	ldr	r2, [pc, #260]	@ (8014180 <RegionEU868RxConfig+0x190>)
 801407a:	5cd3      	ldrb	r3, [r2, r3]
 801407c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801407e:	4b3e      	ldr	r3, [pc, #248]	@ (8014178 <RegionEU868RxConfig+0x188>)
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	6938      	ldr	r0, [r7, #16]
 8014084:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801408a:	2b07      	cmp	r3, #7
 801408c:	d128      	bne.n	80140e0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801408e:	2300      	movs	r3, #0
 8014090:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014092:	4b39      	ldr	r3, [pc, #228]	@ (8014178 <RegionEU868RxConfig+0x188>)
 8014094:	699c      	ldr	r4, [r3, #24]
 8014096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801409a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801409e:	fb02 f303 	mul.w	r3, r2, r3
 80140a2:	4619      	mov	r1, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	689b      	ldr	r3, [r3, #8]
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	7c92      	ldrb	r2, [r2, #18]
 80140ae:	7df8      	ldrb	r0, [r7, #23]
 80140b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80140b2:	2200      	movs	r2, #0
 80140b4:	9208      	str	r2, [sp, #32]
 80140b6:	2200      	movs	r2, #0
 80140b8:	9207      	str	r2, [sp, #28]
 80140ba:	2200      	movs	r2, #0
 80140bc:	9206      	str	r2, [sp, #24]
 80140be:	2201      	movs	r2, #1
 80140c0:	9205      	str	r2, [sp, #20]
 80140c2:	2200      	movs	r2, #0
 80140c4:	9204      	str	r2, [sp, #16]
 80140c6:	2200      	movs	r2, #0
 80140c8:	9203      	str	r2, [sp, #12]
 80140ca:	9302      	str	r3, [sp, #8]
 80140cc:	2305      	movs	r3, #5
 80140ce:	9301      	str	r3, [sp, #4]
 80140d0:	4b2c      	ldr	r3, [pc, #176]	@ (8014184 <RegionEU868RxConfig+0x194>)
 80140d2:	9300      	str	r3, [sp, #0]
 80140d4:	2300      	movs	r3, #0
 80140d6:	460a      	mov	r2, r1
 80140d8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80140dc:	47a0      	blx	r4
 80140de:	e024      	b.n	801412a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80140e0:	2301      	movs	r3, #1
 80140e2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80140e4:	4b24      	ldr	r3, [pc, #144]	@ (8014178 <RegionEU868RxConfig+0x188>)
 80140e6:	699c      	ldr	r4, [r3, #24]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	789b      	ldrb	r3, [r3, #2]
 80140ec:	461d      	mov	r5, r3
 80140ee:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	689b      	ldr	r3, [r3, #8]
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	7c92      	ldrb	r2, [r2, #18]
 80140fc:	7df8      	ldrb	r0, [r7, #23]
 80140fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8014100:	2201      	movs	r2, #1
 8014102:	9208      	str	r2, [sp, #32]
 8014104:	2200      	movs	r2, #0
 8014106:	9207      	str	r2, [sp, #28]
 8014108:	2200      	movs	r2, #0
 801410a:	9206      	str	r2, [sp, #24]
 801410c:	2200      	movs	r2, #0
 801410e:	9205      	str	r2, [sp, #20]
 8014110:	2200      	movs	r2, #0
 8014112:	9204      	str	r2, [sp, #16]
 8014114:	2200      	movs	r2, #0
 8014116:	9203      	str	r2, [sp, #12]
 8014118:	9302      	str	r3, [sp, #8]
 801411a:	2308      	movs	r3, #8
 801411c:	9301      	str	r3, [sp, #4]
 801411e:	2300      	movs	r3, #0
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	2301      	movs	r3, #1
 8014124:	460a      	mov	r2, r1
 8014126:	4629      	mov	r1, r5
 8014128:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	7c5b      	ldrb	r3, [r3, #17]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d005      	beq.n	801413e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8014132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014136:	4a14      	ldr	r2, [pc, #80]	@ (8014188 <RegionEU868RxConfig+0x198>)
 8014138:	5cd3      	ldrb	r3, [r2, r3]
 801413a:	75bb      	strb	r3, [r7, #22]
 801413c:	e004      	b.n	8014148 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801413e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014142:	4a12      	ldr	r2, [pc, #72]	@ (801418c <RegionEU868RxConfig+0x19c>)
 8014144:	5cd3      	ldrb	r3, [r2, r3]
 8014146:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014148:	4b0b      	ldr	r3, [pc, #44]	@ (8014178 <RegionEU868RxConfig+0x188>)
 801414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801414c:	7dba      	ldrb	r2, [r7, #22]
 801414e:	320d      	adds	r2, #13
 8014150:	b2d1      	uxtb	r1, r2
 8014152:	7dfa      	ldrb	r2, [r7, #23]
 8014154:	4610      	mov	r0, r2
 8014156:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	7cdb      	ldrb	r3, [r3, #19]
 801415c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014160:	6939      	ldr	r1, [r7, #16]
 8014162:	4618      	mov	r0, r3
 8014164:	f7ff fab0 	bl	80136c8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	7bfa      	ldrb	r2, [r7, #15]
 801416c:	701a      	strb	r2, [r3, #0]
    return true;
 801416e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014170:	4618      	mov	r0, r3
 8014172:	3718      	adds	r7, #24
 8014174:	46bd      	mov	sp, r7
 8014176:	bdb0      	pop	{r4, r5, r7, pc}
 8014178:	08021f8c 	.word	0x08021f8c
 801417c:	20001220 	.word	0x20001220
 8014180:	08021b4c 	.word	0x08021b4c
 8014184:	00014585 	.word	0x00014585
 8014188:	08021b7c 	.word	0x08021b7c
 801418c:	08021b74 	.word	0x08021b74

08014190 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014190:	b590      	push	{r4, r7, lr}
 8014192:	b093      	sub	sp, #76	@ 0x4c
 8014194:	af0a      	add	r7, sp, #40	@ 0x28
 8014196:	60f8      	str	r0, [r7, #12]
 8014198:	60b9      	str	r1, [r7, #8]
 801419a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80141a2:	461a      	mov	r2, r3
 80141a4:	4b5d      	ldr	r3, [pc, #372]	@ (801431c <RegionEU868TxConfig+0x18c>)
 80141a6:	5c9b      	ldrb	r3, [r3, r2]
 80141a8:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80141b0:	4b5b      	ldr	r3, [pc, #364]	@ (8014320 <RegionEU868TxConfig+0x190>)
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	4b5b      	ldr	r3, [pc, #364]	@ (8014324 <RegionEU868TxConfig+0x194>)
 80141b6:	6819      	ldr	r1, [r3, #0]
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	461c      	mov	r4, r3
 80141be:	4623      	mov	r3, r4
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	4423      	add	r3, r4
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	440b      	add	r3, r1
 80141c8:	3309      	adds	r3, #9
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	4619      	mov	r1, r3
 80141ce:	460b      	mov	r3, r1
 80141d0:	005b      	lsls	r3, r3, #1
 80141d2:	440b      	add	r3, r1
 80141d4:	00db      	lsls	r3, r3, #3
 80141d6:	4413      	add	r3, r2
 80141d8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80141dc:	4619      	mov	r1, r3
 80141de:	f7ff fa40 	bl	8013662 <RegionCommonLimitTxPower>
 80141e2:	4603      	mov	r3, r0
 80141e4:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80141ec:	494e      	ldr	r1, [pc, #312]	@ (8014328 <RegionEU868TxConfig+0x198>)
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7ff fa4c 	bl	801368c <RegionCommonGetBandwidth>
 80141f4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80141f6:	2300      	movs	r3, #0
 80141f8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	6859      	ldr	r1, [r3, #4]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	689a      	ldr	r2, [r3, #8]
 8014202:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014206:	4618      	mov	r0, r3
 8014208:	f7ff f89c 	bl	8013344 <RegionCommonComputeTxPower>
 801420c:	4603      	mov	r3, r0
 801420e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8014210:	4b46      	ldr	r3, [pc, #280]	@ (801432c <RegionEU868TxConfig+0x19c>)
 8014212:	68da      	ldr	r2, [r3, #12]
 8014214:	4b43      	ldr	r3, [pc, #268]	@ (8014324 <RegionEU868TxConfig+0x194>)
 8014216:	6819      	ldr	r1, [r3, #0]
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	781b      	ldrb	r3, [r3, #0]
 801421c:	4618      	mov	r0, r3
 801421e:	4603      	mov	r3, r0
 8014220:	005b      	lsls	r3, r3, #1
 8014222:	4403      	add	r3, r0
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	440b      	add	r3, r1
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	4618      	mov	r0, r3
 801422c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014234:	2b07      	cmp	r3, #7
 8014236:	d124      	bne.n	8014282 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014238:	2300      	movs	r3, #0
 801423a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801423c:	4b3b      	ldr	r3, [pc, #236]	@ (801432c <RegionEU868TxConfig+0x19c>)
 801423e:	69dc      	ldr	r4, [r3, #28]
 8014240:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014244:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014248:	fb02 f303 	mul.w	r3, r2, r3
 801424c:	461a      	mov	r2, r3
 801424e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014252:	7ff8      	ldrb	r0, [r7, #31]
 8014254:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8014258:	9308      	str	r3, [sp, #32]
 801425a:	2300      	movs	r3, #0
 801425c:	9307      	str	r3, [sp, #28]
 801425e:	2300      	movs	r3, #0
 8014260:	9306      	str	r3, [sp, #24]
 8014262:	2300      	movs	r3, #0
 8014264:	9305      	str	r3, [sp, #20]
 8014266:	2301      	movs	r3, #1
 8014268:	9304      	str	r3, [sp, #16]
 801426a:	2300      	movs	r3, #0
 801426c:	9303      	str	r3, [sp, #12]
 801426e:	2305      	movs	r3, #5
 8014270:	9302      	str	r3, [sp, #8]
 8014272:	2300      	movs	r3, #0
 8014274:	9301      	str	r3, [sp, #4]
 8014276:	9200      	str	r2, [sp, #0]
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801427e:	47a0      	blx	r4
 8014280:	e01d      	b.n	80142be <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8014282:	2301      	movs	r3, #1
 8014284:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8014286:	4b29      	ldr	r3, [pc, #164]	@ (801432c <RegionEU868TxConfig+0x19c>)
 8014288:	69dc      	ldr	r4, [r3, #28]
 801428a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801428e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014292:	7ff8      	ldrb	r0, [r7, #31]
 8014294:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8014298:	9208      	str	r2, [sp, #32]
 801429a:	2200      	movs	r2, #0
 801429c:	9207      	str	r2, [sp, #28]
 801429e:	2200      	movs	r2, #0
 80142a0:	9206      	str	r2, [sp, #24]
 80142a2:	2200      	movs	r2, #0
 80142a4:	9205      	str	r2, [sp, #20]
 80142a6:	2201      	movs	r2, #1
 80142a8:	9204      	str	r2, [sp, #16]
 80142aa:	2200      	movs	r2, #0
 80142ac:	9203      	str	r2, [sp, #12]
 80142ae:	2208      	movs	r2, #8
 80142b0:	9202      	str	r2, [sp, #8]
 80142b2:	2201      	movs	r2, #1
 80142b4:	9201      	str	r2, [sp, #4]
 80142b6:	9300      	str	r3, [sp, #0]
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	2200      	movs	r2, #0
 80142bc:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80142be:	4b19      	ldr	r3, [pc, #100]	@ (8014324 <RegionEU868TxConfig+0x194>)
 80142c0:	681a      	ldr	r2, [r3, #0]
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	4619      	mov	r1, r3
 80142c8:	460b      	mov	r3, r1
 80142ca:	005b      	lsls	r3, r3, #1
 80142cc:	440b      	add	r3, r1
 80142ce:	009b      	lsls	r3, r3, #2
 80142d0:	4413      	add	r3, r2
 80142d2:	681a      	ldr	r2, [r3, #0]
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80142da:	4619      	mov	r1, r3
 80142dc:	4610      	mov	r0, r2
 80142de:	f7ff fa25 	bl	801372c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	899b      	ldrh	r3, [r3, #12]
 80142ec:	4619      	mov	r1, r3
 80142ee:	4610      	mov	r0, r2
 80142f0:	f7ff faaa 	bl	8013848 <GetTimeOnAir>
 80142f4:	4602      	mov	r2, r0
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80142fa:	4b0c      	ldr	r3, [pc, #48]	@ (801432c <RegionEU868TxConfig+0x19c>)
 80142fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142fe:	68fa      	ldr	r2, [r7, #12]
 8014300:	8992      	ldrh	r2, [r2, #12]
 8014302:	b2d1      	uxtb	r1, r2
 8014304:	7ffa      	ldrb	r2, [r7, #31]
 8014306:	4610      	mov	r0, r2
 8014308:	4798      	blx	r3

    *txPower = txPowerLimited;
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	7f7a      	ldrb	r2, [r7, #29]
 801430e:	701a      	strb	r2, [r3, #0]
    return true;
 8014310:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014312:	4618      	mov	r0, r3
 8014314:	3724      	adds	r7, #36	@ 0x24
 8014316:	46bd      	mov	sp, r7
 8014318:	bd90      	pop	{r4, r7, pc}
 801431a:	bf00      	nop
 801431c:	08021b4c 	.word	0x08021b4c
 8014320:	20001224 	.word	0x20001224
 8014324:	20001220 	.word	0x20001220
 8014328:	08021b54 	.word	0x08021b54
 801432c:	08021f8c 	.word	0x08021f8c

08014330 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014330:	b590      	push	{r4, r7, lr}
 8014332:	b093      	sub	sp, #76	@ 0x4c
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
 801433c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801433e:	2307      	movs	r3, #7
 8014340:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8014344:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8014348:	2200      	movs	r2, #0
 801434a:	601a      	str	r2, [r3, #0]
 801434c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801434e:	2300      	movs	r3, #0
 8014350:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8014354:	2300      	movs	r3, #0
 8014356:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801435a:	2300      	movs	r3, #0
 801435c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801435e:	e085      	b.n	801446c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	685a      	ldr	r2, [r3, #4]
 8014364:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8014368:	4413      	add	r3, r2
 801436a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801436e:	4611      	mov	r1, r2
 8014370:	4618      	mov	r0, r3
 8014372:	f7fe fe2f 	bl	8012fd4 <RegionCommonParseLinkAdrReq>
 8014376:	4603      	mov	r3, r0
 8014378:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801437c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8014380:	2b00      	cmp	r3, #0
 8014382:	d07b      	beq.n	801447c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8014384:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8014388:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801438c:	4413      	add	r3, r2
 801438e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014392:	2307      	movs	r3, #7
 8014394:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8014398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801439c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801439e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d109      	bne.n	80143ba <RegionEU868LinkAdrReq+0x8a>
 80143a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d106      	bne.n	80143ba <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80143ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80143b0:	f023 0301 	bic.w	r3, r3, #1
 80143b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80143b8:	e058      	b.n	801446c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80143ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d003      	beq.n	80143ca <RegionEU868LinkAdrReq+0x9a>
 80143c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143c6:	2b05      	cmp	r3, #5
 80143c8:	d903      	bls.n	80143d2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80143ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80143ce:	2b06      	cmp	r3, #6
 80143d0:	d906      	bls.n	80143e0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80143d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80143d6:	f023 0301 	bic.w	r3, r3, #1
 80143da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80143de:	e045      	b.n	801446c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80143e0:	2300      	movs	r3, #0
 80143e2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80143e6:	e03d      	b.n	8014464 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80143e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143ec:	2b06      	cmp	r3, #6
 80143ee:	d118      	bne.n	8014422 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80143f0:	4b5f      	ldr	r3, [pc, #380]	@ (8014570 <RegionEU868LinkAdrReq+0x240>)
 80143f2:	6819      	ldr	r1, [r3, #0]
 80143f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80143f8:	4613      	mov	r3, r2
 80143fa:	005b      	lsls	r3, r3, #1
 80143fc:	4413      	add	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	440b      	add	r3, r1
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d028      	beq.n	801445a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8014408:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801440c:	2201      	movs	r2, #1
 801440e:	fa02 f303 	lsl.w	r3, r2, r3
 8014412:	b21a      	sxth	r2, r3
 8014414:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014416:	b21b      	sxth	r3, r3
 8014418:	4313      	orrs	r3, r2
 801441a:	b21b      	sxth	r3, r3
 801441c:	b29b      	uxth	r3, r3
 801441e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8014420:	e01b      	b.n	801445a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014422:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014424:	461a      	mov	r2, r3
 8014426:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801442a:	fa42 f303 	asr.w	r3, r2, r3
 801442e:	f003 0301 	and.w	r3, r3, #1
 8014432:	2b00      	cmp	r3, #0
 8014434:	d011      	beq.n	801445a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8014436:	4b4e      	ldr	r3, [pc, #312]	@ (8014570 <RegionEU868LinkAdrReq+0x240>)
 8014438:	6819      	ldr	r1, [r3, #0]
 801443a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801443e:	4613      	mov	r3, r2
 8014440:	005b      	lsls	r3, r3, #1
 8014442:	4413      	add	r3, r2
 8014444:	009b      	lsls	r3, r3, #2
 8014446:	440b      	add	r3, r1
 8014448:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801444a:	2b00      	cmp	r3, #0
 801444c:	d105      	bne.n	801445a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801444e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014452:	f023 0301 	bic.w	r3, r3, #1
 8014456:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801445a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801445e:	3301      	adds	r3, #1
 8014460:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8014464:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8014468:	2b0f      	cmp	r3, #15
 801446a:	d9bd      	bls.n	80143e8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	7a1b      	ldrb	r3, [r3, #8]
 8014470:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8014474:	429a      	cmp	r2, r3
 8014476:	f4ff af73 	bcc.w	8014360 <RegionEU868LinkAdrReq+0x30>
 801447a:	e000      	b.n	801447e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801447c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801447e:	2302      	movs	r3, #2
 8014480:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	7a5b      	ldrb	r3, [r3, #9]
 8014488:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801448c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014490:	4618      	mov	r0, r3
 8014492:	f7ff fa29 	bl	80138e8 <RegionEU868GetPhyParam>
 8014496:	4603      	mov	r3, r0
 8014498:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801449a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801449e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	7a9b      	ldrb	r3, [r3, #10]
 80144a4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80144a6:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80144aa:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80144ac:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80144b0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80144b2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80144b6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80144be:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80144c6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	7b5b      	ldrb	r3, [r3, #13]
 80144cc:	b25b      	sxtb	r3, r3
 80144ce:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80144d0:	2310      	movs	r3, #16
 80144d2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80144d4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80144d8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80144da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144dc:	b25b      	sxtb	r3, r3
 80144de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80144e2:	2307      	movs	r3, #7
 80144e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80144e8:	4b21      	ldr	r3, [pc, #132]	@ (8014570 <RegionEU868LinkAdrReq+0x240>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80144ee:	2307      	movs	r3, #7
 80144f0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80144f4:	2300      	movs	r3, #0
 80144f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8014500:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8014504:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8014508:	1c9a      	adds	r2, r3, #2
 801450a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801450e:	1c59      	adds	r1, r3, #1
 8014510:	f107 0010 	add.w	r0, r7, #16
 8014514:	4623      	mov	r3, r4
 8014516:	f7fe fdaf 	bl	8013078 <RegionCommonLinkAdrReqVerifyParams>
 801451a:	4603      	mov	r3, r0
 801451c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014520:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014524:	2b07      	cmp	r3, #7
 8014526:	d10d      	bne.n	8014544 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8014528:	4b11      	ldr	r3, [pc, #68]	@ (8014570 <RegionEU868LinkAdrReq+0x240>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014530:	220c      	movs	r2, #12
 8014532:	2100      	movs	r1, #0
 8014534:	4618      	mov	r0, r3
 8014536:	f003 f9cf 	bl	80178d8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801453a:	4b0d      	ldr	r3, [pc, #52]	@ (8014570 <RegionEU868LinkAdrReq+0x240>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014540:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014544:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801454c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014554:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801455c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801455e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8014562:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8014564:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8014568:	4618      	mov	r0, r3
 801456a:	374c      	adds	r7, #76	@ 0x4c
 801456c:	46bd      	mov	sp, r7
 801456e:	bd90      	pop	{r4, r7, pc}
 8014570:	20001220 	.word	0x20001220

08014574 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801457c:	2307      	movs	r3, #7
 801457e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8014580:	2300      	movs	r3, #0
 8014582:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	685b      	ldr	r3, [r3, #4]
 8014588:	f107 020e 	add.w	r2, r7, #14
 801458c:	4611      	mov	r1, r2
 801458e:	4618      	mov	r0, r3
 8014590:	f7ff f8e4 	bl	801375c <VerifyRfFreq>
 8014594:	4603      	mov	r3, r0
 8014596:	f083 0301 	eor.w	r3, r3, #1
 801459a:	b2db      	uxtb	r3, r3
 801459c:	2b00      	cmp	r3, #0
 801459e:	d003      	beq.n	80145a8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80145a0:	7bfb      	ldrb	r3, [r7, #15]
 80145a2:	f023 0301 	bic.w	r3, r3, #1
 80145a6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f993 3000 	ldrsb.w	r3, [r3]
 80145ae:	2207      	movs	r2, #7
 80145b0:	2100      	movs	r1, #0
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fe fb4d 	bl	8012c52 <RegionCommonValueInRange>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d103      	bne.n	80145c6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80145be:	7bfb      	ldrb	r3, [r7, #15]
 80145c0:	f023 0302 	bic.w	r3, r3, #2
 80145c4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80145cc:	2205      	movs	r2, #5
 80145ce:	2100      	movs	r1, #0
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7fe fb3e 	bl	8012c52 <RegionCommonValueInRange>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d103      	bne.n	80145e4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80145dc:	7bfb      	ldrb	r3, [r7, #15]
 80145de:	f023 0304 	bic.w	r3, r3, #4
 80145e2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80145e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3710      	adds	r7, #16
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
	...

080145f0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b086      	sub	sp, #24
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80145f8:	2303      	movs	r3, #3
 80145fa:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d114      	bne.n	8014630 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801460c:	b2db      	uxtb	r3, r3
 801460e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8014610:	f107 0308 	add.w	r3, r7, #8
 8014614:	4618      	mov	r0, r3
 8014616:	f000 f9ff 	bl	8014a18 <RegionEU868ChannelsRemove>
 801461a:	4603      	mov	r3, r0
 801461c:	f083 0301 	eor.w	r3, r3, #1
 8014620:	b2db      	uxtb	r3, r3
 8014622:	2b00      	cmp	r3, #0
 8014624:	d03b      	beq.n	801469e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8014626:	7dfb      	ldrb	r3, [r7, #23]
 8014628:	f023 0303 	bic.w	r3, r3, #3
 801462c:	75fb      	strb	r3, [r7, #23]
 801462e:	e036      	b.n	801469e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801463c:	b2db      	uxtb	r3, r3
 801463e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8014640:	f107 030c 	add.w	r3, r7, #12
 8014644:	4618      	mov	r0, r3
 8014646:	f000 f945 	bl	80148d4 <RegionEU868ChannelAdd>
 801464a:	4603      	mov	r3, r0
 801464c:	2b06      	cmp	r3, #6
 801464e:	d820      	bhi.n	8014692 <RegionEU868NewChannelReq+0xa2>
 8014650:	a201      	add	r2, pc, #4	@ (adr r2, 8014658 <RegionEU868NewChannelReq+0x68>)
 8014652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014656:	bf00      	nop
 8014658:	0801469d 	.word	0x0801469d
 801465c:	08014693 	.word	0x08014693
 8014660:	08014693 	.word	0x08014693
 8014664:	08014693 	.word	0x08014693
 8014668:	08014675 	.word	0x08014675
 801466c:	0801467f 	.word	0x0801467f
 8014670:	08014689 	.word	0x08014689
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8014674:	7dfb      	ldrb	r3, [r7, #23]
 8014676:	f023 0301 	bic.w	r3, r3, #1
 801467a:	75fb      	strb	r3, [r7, #23]
                break;
 801467c:	e00f      	b.n	801469e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801467e:	7dfb      	ldrb	r3, [r7, #23]
 8014680:	f023 0302 	bic.w	r3, r3, #2
 8014684:	75fb      	strb	r3, [r7, #23]
                break;
 8014686:	e00a      	b.n	801469e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8014688:	7dfb      	ldrb	r3, [r7, #23]
 801468a:	f023 0303 	bic.w	r3, r3, #3
 801468e:	75fb      	strb	r3, [r7, #23]
                break;
 8014690:	e005      	b.n	801469e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8014692:	7dfb      	ldrb	r3, [r7, #23]
 8014694:	f023 0303 	bic.w	r3, r3, #3
 8014698:	75fb      	strb	r3, [r7, #23]
                break;
 801469a:	e000      	b.n	801469e <RegionEU868NewChannelReq+0xae>
                break;
 801469c:	bf00      	nop
            }
        }
    }

    return status;
 801469e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3718      	adds	r7, #24
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop

080146ac <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80146b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	370c      	adds	r7, #12
 80146bc:	46bd      	mov	sp, r7
 80146be:	bc80      	pop	{r7}
 80146c0:	4770      	bx	lr
	...

080146c4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80146cc:	2303      	movs	r3, #3
 80146ce:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80146d0:	2300      	movs	r3, #0
 80146d2:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	2b0f      	cmp	r3, #15
 80146da:	d901      	bls.n	80146e0 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	e035      	b.n	801474c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	f107 020e 	add.w	r2, r7, #14
 80146e8:	4611      	mov	r1, r2
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7ff f836 	bl	801375c <VerifyRfFreq>
 80146f0:	4603      	mov	r3, r0
 80146f2:	f083 0301 	eor.w	r3, r3, #1
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d003      	beq.n	8014704 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80146fc:	7bfb      	ldrb	r3, [r7, #15]
 80146fe:	f023 0301 	bic.w	r3, r3, #1
 8014702:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8014704:	4b13      	ldr	r3, [pc, #76]	@ (8014754 <RegionEU868DlChannelReq+0x90>)
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	4619      	mov	r1, r3
 801470e:	460b      	mov	r3, r1
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	440b      	add	r3, r1
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	4413      	add	r3, r2
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d103      	bne.n	8014726 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801471e:	7bfb      	ldrb	r3, [r7, #15]
 8014720:	f023 0302 	bic.w	r3, r3, #2
 8014724:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8014726:	7bfb      	ldrb	r3, [r7, #15]
 8014728:	2b03      	cmp	r3, #3
 801472a:	d10d      	bne.n	8014748 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801472c:	4b09      	ldr	r3, [pc, #36]	@ (8014754 <RegionEU868DlChannelReq+0x90>)
 801472e:	6819      	ldr	r1, [r3, #0]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	4618      	mov	r0, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	685a      	ldr	r2, [r3, #4]
 801473a:	4603      	mov	r3, r0
 801473c:	005b      	lsls	r3, r3, #1
 801473e:	4403      	add	r3, r0
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	440b      	add	r3, r1
 8014744:	3304      	adds	r3, #4
 8014746:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8014748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801474c:	4618      	mov	r0, r3
 801474e:	3710      	adds	r7, #16
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	20001220 	.word	0x20001220

08014758 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	460a      	mov	r2, r1
 8014762:	71fb      	strb	r3, [r7, #7]
 8014764:	4613      	mov	r3, r2
 8014766:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8014768:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801476c:	4618      	mov	r0, r3
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	bc80      	pop	{r7}
 8014774:	4770      	bx	lr
	...

08014778 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b09a      	sub	sp, #104	@ 0x68
 801477c:	af02      	add	r7, sp, #8
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
 8014784:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8014786:	2300      	movs	r3, #0
 8014788:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8014792:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014796:	2200      	movs	r2, #0
 8014798:	601a      	str	r2, [r3, #0]
 801479a:	605a      	str	r2, [r3, #4]
 801479c:	609a      	str	r2, [r3, #8]
 801479e:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80147a0:	230c      	movs	r3, #12
 80147a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80147a6:	2307      	movs	r3, #7
 80147a8:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80147aa:	4b48      	ldr	r3, [pc, #288]	@ (80148cc <RegionEU868NextChannel+0x154>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80147b2:	2201      	movs	r2, #1
 80147b4:	2100      	movs	r1, #0
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7fe fa9c 	bl	8012cf4 <RegionCommonCountChannels>
 80147bc:	4603      	mov	r3, r0
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d10a      	bne.n	80147d8 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80147c2:	4b42      	ldr	r3, [pc, #264]	@ (80148cc <RegionEU868NextChannel+0x154>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80147ca:	4b40      	ldr	r3, [pc, #256]	@ (80148cc <RegionEU868NextChannel+0x154>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	f042 0207 	orr.w	r2, r2, #7
 80147d2:	b292      	uxth	r2, r2
 80147d4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	7a5b      	ldrb	r3, [r3, #9]
 80147dc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80147e8:	4b38      	ldr	r3, [pc, #224]	@ (80148cc <RegionEU868NextChannel+0x154>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80147f0:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80147f2:	4b36      	ldr	r3, [pc, #216]	@ (80148cc <RegionEU868NextChannel+0x154>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80147f8:	4b35      	ldr	r3, [pc, #212]	@ (80148d0 <RegionEU868NextChannel+0x158>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80147fe:	2310      	movs	r3, #16
 8014800:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8014802:	f107 0312 	add.w	r3, r7, #18
 8014806:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	7a9b      	ldrb	r3, [r3, #10]
 8014818:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801481c:	2306      	movs	r3, #6
 801481e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8014822:	68fa      	ldr	r2, [r7, #12]
 8014824:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014828:	320c      	adds	r2, #12
 801482a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801482e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	7d1b      	ldrb	r3, [r3, #20]
 8014836:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	8adb      	ldrh	r3, [r3, #22]
 8014844:	4619      	mov	r1, r3
 8014846:	4610      	mov	r0, r2
 8014848:	f7fe fffe 	bl	8013848 <GetTimeOnAir>
 801484c:	4603      	mov	r3, r0
 801484e:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8014850:	f107 0314 	add.w	r3, r7, #20
 8014854:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8014856:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801485a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801485e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	9301      	str	r3, [sp, #4]
 8014866:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	460b      	mov	r3, r1
 801486e:	6839      	ldr	r1, [r7, #0]
 8014870:	f7fe fe57 	bl	8013522 <RegionCommonIdentifyChannels>
 8014874:	4603      	mov	r3, r0
 8014876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801487a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801487e:	2b00      	cmp	r3, #0
 8014880:	d10e      	bne.n	80148a0 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8014882:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8014886:	3b01      	subs	r3, #1
 8014888:	4619      	mov	r1, r3
 801488a:	2000      	movs	r0, #0
 801488c:	f002 ffd2 	bl	8017834 <randr>
 8014890:	4603      	mov	r3, r0
 8014892:	3360      	adds	r3, #96	@ 0x60
 8014894:	443b      	add	r3, r7
 8014896:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	701a      	strb	r2, [r3, #0]
 801489e:	e00e      	b.n	80148be <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80148a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80148a4:	2b0c      	cmp	r3, #12
 80148a6:	d10a      	bne.n	80148be <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80148a8:	4b08      	ldr	r3, [pc, #32]	@ (80148cc <RegionEU868NextChannel+0x154>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80148b0:	4b06      	ldr	r3, [pc, #24]	@ (80148cc <RegionEU868NextChannel+0x154>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	f042 0207 	orr.w	r2, r2, #7
 80148b8:	b292      	uxth	r2, r2
 80148ba:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 80148be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3760      	adds	r7, #96	@ 0x60
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	20001220 	.word	0x20001220
 80148d0:	20001224 	.word	0x20001224

080148d4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80148dc:	2300      	movs	r3, #0
 80148de:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80148e0:	2300      	movs	r3, #0
 80148e2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80148e4:	2300      	movs	r3, #0
 80148e6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	791b      	ldrb	r3, [r3, #4]
 80148ec:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80148ee:	7b7b      	ldrb	r3, [r7, #13]
 80148f0:	2b02      	cmp	r3, #2
 80148f2:	d801      	bhi.n	80148f8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80148f4:	2306      	movs	r3, #6
 80148f6:	e089      	b.n	8014a0c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80148f8:	7b7b      	ldrb	r3, [r7, #13]
 80148fa:	2b0f      	cmp	r3, #15
 80148fc:	d901      	bls.n	8014902 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80148fe:	2303      	movs	r3, #3
 8014900:	e084      	b.n	8014a0c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	7a1b      	ldrb	r3, [r3, #8]
 8014908:	f343 0303 	sbfx	r3, r3, #0, #4
 801490c:	b25b      	sxtb	r3, r3
 801490e:	2207      	movs	r2, #7
 8014910:	2100      	movs	r1, #0
 8014912:	4618      	mov	r0, r3
 8014914:	f7fe f99d 	bl	8012c52 <RegionCommonValueInRange>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d101      	bne.n	8014922 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801491e:	2301      	movs	r3, #1
 8014920:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	7a1b      	ldrb	r3, [r3, #8]
 8014928:	f343 1303 	sbfx	r3, r3, #4, #4
 801492c:	b25b      	sxtb	r3, r3
 801492e:	2207      	movs	r2, #7
 8014930:	2100      	movs	r1, #0
 8014932:	4618      	mov	r0, r3
 8014934:	f7fe f98d 	bl	8012c52 <RegionCommonValueInRange>
 8014938:	4603      	mov	r3, r0
 801493a:	2b00      	cmp	r3, #0
 801493c:	d101      	bne.n	8014942 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801493e:	2301      	movs	r3, #1
 8014940:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	7a1b      	ldrb	r3, [r3, #8]
 8014948:	f343 0303 	sbfx	r3, r3, #0, #4
 801494c:	b25a      	sxtb	r2, r3
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	7a1b      	ldrb	r3, [r3, #8]
 8014954:	f343 1303 	sbfx	r3, r3, #4, #4
 8014958:	b25b      	sxtb	r3, r3
 801495a:	429a      	cmp	r2, r3
 801495c:	dd01      	ble.n	8014962 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801495e:	2301      	movs	r3, #1
 8014960:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8014962:	7bbb      	ldrb	r3, [r7, #14]
 8014964:	f083 0301 	eor.w	r3, r3, #1
 8014968:	b2db      	uxtb	r3, r3
 801496a:	2b00      	cmp	r3, #0
 801496c:	d010      	beq.n	8014990 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f107 020c 	add.w	r2, r7, #12
 8014978:	4611      	mov	r1, r2
 801497a:	4618      	mov	r0, r3
 801497c:	f7fe feee 	bl	801375c <VerifyRfFreq>
 8014980:	4603      	mov	r3, r0
 8014982:	f083 0301 	eor.w	r3, r3, #1
 8014986:	b2db      	uxtb	r3, r3
 8014988:	2b00      	cmp	r3, #0
 801498a:	d001      	beq.n	8014990 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801498c:	2301      	movs	r3, #1
 801498e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8014990:	7bfb      	ldrb	r3, [r7, #15]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d004      	beq.n	80149a0 <RegionEU868ChannelAdd+0xcc>
 8014996:	7bbb      	ldrb	r3, [r7, #14]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d001      	beq.n	80149a0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801499c:	2306      	movs	r3, #6
 801499e:	e035      	b.n	8014a0c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80149a0:	7bfb      	ldrb	r3, [r7, #15]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d001      	beq.n	80149aa <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80149a6:	2305      	movs	r3, #5
 80149a8:	e030      	b.n	8014a0c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80149aa:	7bbb      	ldrb	r3, [r7, #14]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d001      	beq.n	80149b4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80149b0:	2304      	movs	r3, #4
 80149b2:	e02b      	b.n	8014a0c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80149b4:	4b17      	ldr	r3, [pc, #92]	@ (8014a14 <RegionEU868ChannelAdd+0x140>)
 80149b6:	6819      	ldr	r1, [r3, #0]
 80149b8:	7b7a      	ldrb	r2, [r7, #13]
 80149ba:	4613      	mov	r3, r2
 80149bc:	005b      	lsls	r3, r3, #1
 80149be:	4413      	add	r3, r2
 80149c0:	009b      	lsls	r3, r3, #2
 80149c2:	18c8      	adds	r0, r1, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	220c      	movs	r2, #12
 80149ca:	4619      	mov	r1, r3
 80149cc:	f002 ff49 	bl	8017862 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80149d0:	4b10      	ldr	r3, [pc, #64]	@ (8014a14 <RegionEU868ChannelAdd+0x140>)
 80149d2:	6819      	ldr	r1, [r3, #0]
 80149d4:	7b7a      	ldrb	r2, [r7, #13]
 80149d6:	7b38      	ldrb	r0, [r7, #12]
 80149d8:	4613      	mov	r3, r2
 80149da:	005b      	lsls	r3, r3, #1
 80149dc:	4413      	add	r3, r2
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	440b      	add	r3, r1
 80149e2:	3309      	adds	r3, #9
 80149e4:	4602      	mov	r2, r0
 80149e6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80149e8:	4b0a      	ldr	r3, [pc, #40]	@ (8014a14 <RegionEU868ChannelAdd+0x140>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80149f0:	b21a      	sxth	r2, r3
 80149f2:	7b7b      	ldrb	r3, [r7, #13]
 80149f4:	2101      	movs	r1, #1
 80149f6:	fa01 f303 	lsl.w	r3, r1, r3
 80149fa:	b21b      	sxth	r3, r3
 80149fc:	4313      	orrs	r3, r2
 80149fe:	b21a      	sxth	r2, r3
 8014a00:	4b04      	ldr	r3, [pc, #16]	@ (8014a14 <RegionEU868ChannelAdd+0x140>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	b292      	uxth	r2, r2
 8014a06:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8014a0a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3710      	adds	r7, #16
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	20001220 	.word	0x20001220

08014a18 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	2b02      	cmp	r3, #2
 8014a2a:	d801      	bhi.n	8014a30 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	e016      	b.n	8014a5e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8014a30:	4b0d      	ldr	r3, [pc, #52]	@ (8014a68 <RegionEU868ChannelsRemove+0x50>)
 8014a32:	6819      	ldr	r1, [r3, #0]
 8014a34:	7dfa      	ldrb	r2, [r7, #23]
 8014a36:	4613      	mov	r3, r2
 8014a38:	005b      	lsls	r3, r3, #1
 8014a3a:	4413      	add	r3, r2
 8014a3c:	009b      	lsls	r3, r3, #2
 8014a3e:	440b      	add	r3, r1
 8014a40:	461a      	mov	r2, r3
 8014a42:	2300      	movs	r3, #0
 8014a44:	6013      	str	r3, [r2, #0]
 8014a46:	6053      	str	r3, [r2, #4]
 8014a48:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8014a4a:	4b07      	ldr	r3, [pc, #28]	@ (8014a68 <RegionEU868ChannelsRemove+0x50>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014a52:	7df9      	ldrb	r1, [r7, #23]
 8014a54:	2210      	movs	r2, #16
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fe f918 	bl	8012c8c <RegionCommonChanDisable>
 8014a5c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	20001220 	.word	0x20001220

08014a6c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	4603      	mov	r3, r0
 8014a74:	71fb      	strb	r3, [r7, #7]
 8014a76:	460b      	mov	r3, r1
 8014a78:	71bb      	strb	r3, [r7, #6]
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8014a7e:	79ba      	ldrb	r2, [r7, #6]
 8014a80:	797b      	ldrb	r3, [r7, #5]
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8014a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	da01      	bge.n	8014a94 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8014a90:	2300      	movs	r3, #0
 8014a92:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8014a94:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3714      	adds	r7, #20
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bc80      	pop	{r7}
 8014a9e:	4770      	bx	lr

08014aa0 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	603b      	str	r3, [r7, #0]
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	71fb      	strb	r3, [r7, #7]
 8014aac:	460b      	mov	r3, r1
 8014aae:	71bb      	strb	r3, [r7, #6]
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8014ab4:	79fb      	ldrb	r3, [r7, #7]
 8014ab6:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8014ab8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fe fdcd 	bl	8013662 <RegionCommonLimitTxPower>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8014acc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014ad0:	2b04      	cmp	r3, #4
 8014ad2:	d106      	bne.n	8014ae2 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8014ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	bfb8      	it	lt
 8014adc:	2302      	movlt	r3, #2
 8014ade:	73fb      	strb	r3, [r7, #15]
 8014ae0:	e00d      	b.n	8014afe <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8014ae2:	2204      	movs	r2, #4
 8014ae4:	2100      	movs	r1, #0
 8014ae6:	6838      	ldr	r0, [r7, #0]
 8014ae8:	f7fe f904 	bl	8012cf4 <RegionCommonCountChannels>
 8014aec:	4603      	mov	r3, r0
 8014aee:	2b31      	cmp	r3, #49	@ 0x31
 8014af0:	d805      	bhi.n	8014afe <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8014af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014af6:	2b05      	cmp	r3, #5
 8014af8:	bfb8      	it	lt
 8014afa:	2305      	movlt	r3, #5
 8014afc:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8014afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
	...

08014b0c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014b14:	4b18      	ldr	r3, [pc, #96]	@ (8014b78 <VerifyRfFreq+0x6c>)
 8014b16:	6a1b      	ldr	r3, [r3, #32]
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	4798      	blx	r3
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	f083 0301 	eor.w	r3, r3, #1
 8014b22:	b2db      	uxtb	r3, r3
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d001      	beq.n	8014b2c <VerifyRfFreq+0x20>
    {
        return false;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	e021      	b.n	8014b70 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	4a13      	ldr	r2, [pc, #76]	@ (8014b7c <VerifyRfFreq+0x70>)
 8014b30:	4293      	cmp	r3, r2
 8014b32:	d910      	bls.n	8014b56 <VerifyRfFreq+0x4a>
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	4a12      	ldr	r2, [pc, #72]	@ (8014b80 <VerifyRfFreq+0x74>)
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	d80c      	bhi.n	8014b56 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	4b11      	ldr	r3, [pc, #68]	@ (8014b84 <VerifyRfFreq+0x78>)
 8014b40:	4413      	add	r3, r2
 8014b42:	4a11      	ldr	r2, [pc, #68]	@ (8014b88 <VerifyRfFreq+0x7c>)
 8014b44:	fba2 1203 	umull	r1, r2, r2, r3
 8014b48:	0c92      	lsrs	r2, r2, #18
 8014b4a:	4910      	ldr	r1, [pc, #64]	@ (8014b8c <VerifyRfFreq+0x80>)
 8014b4c:	fb01 f202 	mul.w	r2, r1, r2
 8014b50:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	d001      	beq.n	8014b5a <VerifyRfFreq+0x4e>
    {
        return false;
 8014b56:	2300      	movs	r3, #0
 8014b58:	e00a      	b.n	8014b70 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8014b90 <VerifyRfFreq+0x84>)
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d903      	bls.n	8014b6a <VerifyRfFreq+0x5e>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	4a06      	ldr	r2, [pc, #24]	@ (8014b80 <VerifyRfFreq+0x74>)
 8014b66:	4293      	cmp	r3, r2
 8014b68:	d901      	bls.n	8014b6e <VerifyRfFreq+0x62>
    {
        return false;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	e000      	b.n	8014b70 <VerifyRfFreq+0x64>
    }
    return true;
 8014b6e:	2301      	movs	r3, #1
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	08021f8c 	.word	0x08021f8c
 8014b7c:	3708709f 	.word	0x3708709f
 8014b80:	374886e0 	.word	0x374886e0
 8014b84:	c8f78f60 	.word	0xc8f78f60
 8014b88:	6fd91d85 	.word	0x6fd91d85
 8014b8c:	000927c0 	.word	0x000927c0
 8014b90:	35c8015f 	.word	0x35c8015f

08014b94 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014b94:	b590      	push	{r4, r7, lr}
 8014b96:	b089      	sub	sp, #36	@ 0x24
 8014b98:	af04      	add	r7, sp, #16
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	460a      	mov	r2, r1
 8014b9e:	71fb      	strb	r3, [r7, #7]
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8014ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8014be8 <GetTimeOnAir+0x54>)
 8014baa:	5cd3      	ldrb	r3, [r2, r3]
 8014bac:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8014bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014bb2:	490e      	ldr	r1, [pc, #56]	@ (8014bec <GetTimeOnAir+0x58>)
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7fe fd69 	bl	801368c <RegionCommonGetBandwidth>
 8014bba:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8014bf0 <GetTimeOnAir+0x5c>)
 8014bbe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014bc0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014bc4:	88bb      	ldrh	r3, [r7, #4]
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2101      	movs	r1, #1
 8014bca:	9103      	str	r1, [sp, #12]
 8014bcc:	9302      	str	r3, [sp, #8]
 8014bce:	2300      	movs	r3, #0
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	2308      	movs	r3, #8
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	68b9      	ldr	r1, [r7, #8]
 8014bda:	2001      	movs	r0, #1
 8014bdc:	47a0      	blx	r4
 8014bde:	4603      	mov	r3, r0
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3714      	adds	r7, #20
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd90      	pop	{r4, r7, pc}
 8014be8:	08021b84 	.word	0x08021b84
 8014bec:	08021b94 	.word	0x08021b94
 8014bf0:	08021f8c 	.word	0x08021f8c

08014bf4 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b088      	sub	sp, #32
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	781b      	ldrb	r3, [r3, #0]
 8014c04:	3b01      	subs	r3, #1
 8014c06:	2b37      	cmp	r3, #55	@ 0x37
 8014c08:	f200 8136 	bhi.w	8014e78 <RegionUS915GetPhyParam+0x284>
 8014c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8014c14 <RegionUS915GetPhyParam+0x20>)
 8014c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c12:	bf00      	nop
 8014c14:	08014cf5 	.word	0x08014cf5
 8014c18:	08014cfb 	.word	0x08014cfb
 8014c1c:	08014e79 	.word	0x08014e79
 8014c20:	08014e79 	.word	0x08014e79
 8014c24:	08014e79 	.word	0x08014e79
 8014c28:	08014d01 	.word	0x08014d01
 8014c2c:	08014e79 	.word	0x08014e79
 8014c30:	08014d3b 	.word	0x08014d3b
 8014c34:	08014e79 	.word	0x08014e79
 8014c38:	08014d41 	.word	0x08014d41
 8014c3c:	08014d47 	.word	0x08014d47
 8014c40:	08014d4d 	.word	0x08014d4d
 8014c44:	08014d53 	.word	0x08014d53
 8014c48:	08014d63 	.word	0x08014d63
 8014c4c:	08014d73 	.word	0x08014d73
 8014c50:	08014d79 	.word	0x08014d79
 8014c54:	08014d81 	.word	0x08014d81
 8014c58:	08014d89 	.word	0x08014d89
 8014c5c:	08014d91 	.word	0x08014d91
 8014c60:	08014d99 	.word	0x08014d99
 8014c64:	08014da1 	.word	0x08014da1
 8014c68:	08014db5 	.word	0x08014db5
 8014c6c:	08014dbb 	.word	0x08014dbb
 8014c70:	08014dc1 	.word	0x08014dc1
 8014c74:	08014dc7 	.word	0x08014dc7
 8014c78:	08014dd3 	.word	0x08014dd3
 8014c7c:	08014ddf 	.word	0x08014ddf
 8014c80:	08014de5 	.word	0x08014de5
 8014c84:	08014ded 	.word	0x08014ded
 8014c88:	08014df3 	.word	0x08014df3
 8014c8c:	08014df9 	.word	0x08014df9
 8014c90:	08014dff 	.word	0x08014dff
 8014c94:	08014d07 	.word	0x08014d07
 8014c98:	08014e79 	.word	0x08014e79
 8014c9c:	08014e79 	.word	0x08014e79
 8014ca0:	08014e79 	.word	0x08014e79
 8014ca4:	08014e79 	.word	0x08014e79
 8014ca8:	08014e79 	.word	0x08014e79
 8014cac:	08014e79 	.word	0x08014e79
 8014cb0:	08014e79 	.word	0x08014e79
 8014cb4:	08014e79 	.word	0x08014e79
 8014cb8:	08014e79 	.word	0x08014e79
 8014cbc:	08014e79 	.word	0x08014e79
 8014cc0:	08014e79 	.word	0x08014e79
 8014cc4:	08014e79 	.word	0x08014e79
 8014cc8:	08014e79 	.word	0x08014e79
 8014ccc:	08014e07 	.word	0x08014e07
 8014cd0:	08014e1b 	.word	0x08014e1b
 8014cd4:	08014e29 	.word	0x08014e29
 8014cd8:	08014e2f 	.word	0x08014e2f
 8014cdc:	08014e79 	.word	0x08014e79
 8014ce0:	08014e35 	.word	0x08014e35
 8014ce4:	08014e49 	.word	0x08014e49
 8014ce8:	08014e4f 	.word	0x08014e4f
 8014cec:	08014e55 	.word	0x08014e55
 8014cf0:	08014e65 	.word	0x08014e65
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8014cf4:	2308      	movs	r3, #8
 8014cf6:	61bb      	str	r3, [r7, #24]
            break;
 8014cf8:	e0bf      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	61bb      	str	r3, [r7, #24]
            break;
 8014cfe:	e0bc      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8014d00:	2300      	movs	r3, #0
 8014d02:	61bb      	str	r3, [r7, #24]
            break;
 8014d04:	e0b9      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014d0c:	733b      	strb	r3, [r7, #12]
 8014d0e:	2304      	movs	r3, #4
 8014d10:	737b      	strb	r3, [r7, #13]
 8014d12:	2300      	movs	r3, #0
 8014d14:	73bb      	strb	r3, [r7, #14]
 8014d16:	2348      	movs	r3, #72	@ 0x48
 8014d18:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8014d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8014e88 <RegionUS915GetPhyParam+0x294>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014d22:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014d24:	4b58      	ldr	r3, [pc, #352]	@ (8014e88 <RegionUS915GetPhyParam+0x294>)
 8014d26:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014d28:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8014d2a:	f107 030c 	add.w	r3, r7, #12
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7fe fc59 	bl	80135e6 <RegionCommonGetNextLowerTxDr>
 8014d34:	4603      	mov	r3, r0
 8014d36:	61bb      	str	r3, [r7, #24]
            break;
 8014d38:	e09f      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	61bb      	str	r3, [r7, #24]
            break;
 8014d3e:	e09c      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8014d40:	2300      	movs	r3, #0
 8014d42:	61bb      	str	r3, [r7, #24]
            break;
 8014d44:	e099      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014d46:	2340      	movs	r3, #64	@ 0x40
 8014d48:	61bb      	str	r3, [r7, #24]
            break;
 8014d4a:	e096      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8014d4c:	2320      	movs	r3, #32
 8014d4e:	61bb      	str	r3, [r7, #24]
            break;
 8014d50:	e093      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d58:	461a      	mov	r2, r3
 8014d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8014e8c <RegionUS915GetPhyParam+0x298>)
 8014d5c:	5c9b      	ldrb	r3, [r3, r2]
 8014d5e:	61bb      	str	r3, [r7, #24]
            break;
 8014d60:	e08b      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d68:	461a      	mov	r2, r3
 8014d6a:	4b49      	ldr	r3, [pc, #292]	@ (8014e90 <RegionUS915GetPhyParam+0x29c>)
 8014d6c:	5c9b      	ldrb	r3, [r3, r2]
 8014d6e:	61bb      	str	r3, [r7, #24]
            break;
 8014d70:	e083      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8014d72:	2300      	movs	r3, #0
 8014d74:	61bb      	str	r3, [r7, #24]
            break;
 8014d76:	e080      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8014d78:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014d7c:	61bb      	str	r3, [r7, #24]
            break;
 8014d7e:	e07c      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014d84:	61bb      	str	r3, [r7, #24]
            break;
 8014d86:	e078      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014d88:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014d8c:	61bb      	str	r3, [r7, #24]
            break;
 8014d8e:	e074      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014d90:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014d94:	61bb      	str	r3, [r7, #24]
            break;
 8014d96:	e070      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014d98:	f241 7370 	movw	r3, #6000	@ 0x1770
 8014d9c:	61bb      	str	r3, [r7, #24]
            break;
 8014d9e:	e06c      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8014da0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014da4:	483b      	ldr	r0, [pc, #236]	@ (8014e94 <RegionUS915GetPhyParam+0x2a0>)
 8014da6:	f002 fd45 	bl	8017834 <randr>
 8014daa:	4603      	mov	r3, r0
 8014dac:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014db0:	61bb      	str	r3, [r7, #24]
            break;
 8014db2:	e062      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014db4:	2300      	movs	r3, #0
 8014db6:	61bb      	str	r3, [r7, #24]
            break;
 8014db8:	e05f      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8014dba:	4b37      	ldr	r3, [pc, #220]	@ (8014e98 <RegionUS915GetPhyParam+0x2a4>)
 8014dbc:	61bb      	str	r3, [r7, #24]
            break;
 8014dbe:	e05c      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8014dc0:	2308      	movs	r3, #8
 8014dc2:	61bb      	str	r3, [r7, #24]
            break;
 8014dc4:	e059      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014dc6:	4b30      	ldr	r3, [pc, #192]	@ (8014e88 <RegionUS915GetPhyParam+0x294>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014dce:	61bb      	str	r3, [r7, #24]
            break;
 8014dd0:	e053      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8014dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8014e88 <RegionUS915GetPhyParam+0x294>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014dda:	61bb      	str	r3, [r7, #24]
            break;
 8014ddc:	e04d      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8014dde:	2348      	movs	r3, #72	@ 0x48
 8014de0:	61bb      	str	r3, [r7, #24]
            break;
 8014de2:	e04a      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8014de4:	4b28      	ldr	r3, [pc, #160]	@ (8014e88 <RegionUS915GetPhyParam+0x294>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	61bb      	str	r3, [r7, #24]
            break;
 8014dea:	e046      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8014dec:	2300      	movs	r3, #0
 8014dee:	61bb      	str	r3, [r7, #24]
            break;
 8014df0:	e043      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8014df2:	2300      	movs	r3, #0
 8014df4:	61bb      	str	r3, [r7, #24]
            break;
 8014df6:	e040      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8014df8:	4b28      	ldr	r3, [pc, #160]	@ (8014e9c <RegionUS915GetPhyParam+0x2a8>)
 8014dfa:	61bb      	str	r3, [r7, #24]
            break;
 8014dfc:	e03d      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8014dfe:	f04f 0300 	mov.w	r3, #0
 8014e02:	61bb      	str	r3, [r7, #24]
            break;
 8014e04:	e039      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	791b      	ldrb	r3, [r3, #4]
 8014e0a:	4a25      	ldr	r2, [pc, #148]	@ (8014ea0 <RegionUS915GetPhyParam+0x2ac>)
 8014e0c:	4922      	ldr	r1, [pc, #136]	@ (8014e98 <RegionUS915GetPhyParam+0x2a4>)
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7fd fd4c 	bl	80128ac <RegionBaseUSCalcDownlinkFrequency>
 8014e14:	4603      	mov	r3, r0
 8014e16:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8014e18:	e02f      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8014e1a:	2317      	movs	r3, #23
 8014e1c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8014e1e:	2304      	movs	r3, #4
 8014e20:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8014e22:	2303      	movs	r3, #3
 8014e24:	76bb      	strb	r3, [r7, #26]
            break;
 8014e26:	e028      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8014e28:	2308      	movs	r3, #8
 8014e2a:	61bb      	str	r3, [r7, #24]
            break;
 8014e2c:	e025      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8014e2e:	2308      	movs	r3, #8
 8014e30:	61bb      	str	r3, [r7, #24]
            break;
 8014e32:	e022      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	791b      	ldrb	r3, [r3, #4]
 8014e38:	4a19      	ldr	r2, [pc, #100]	@ (8014ea0 <RegionUS915GetPhyParam+0x2ac>)
 8014e3a:	4917      	ldr	r1, [pc, #92]	@ (8014e98 <RegionUS915GetPhyParam+0x2a4>)
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7fd fd35 	bl	80128ac <RegionBaseUSCalcDownlinkFrequency>
 8014e42:	4603      	mov	r3, r0
 8014e44:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8014e46:	e018      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8014e48:	2308      	movs	r3, #8
 8014e4a:	61bb      	str	r3, [r7, #24]
            break;
 8014e4c:	e015      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8014e4e:	2308      	movs	r3, #8
 8014e50:	61bb      	str	r3, [r7, #24]
            break;
 8014e52:	e012      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	4b11      	ldr	r3, [pc, #68]	@ (8014ea4 <RegionUS915GetPhyParam+0x2b0>)
 8014e5e:	5c9b      	ldrb	r3, [r3, r2]
 8014e60:	61bb      	str	r3, [r7, #24]
            break;
 8014e62:	e00a      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e6a:	490f      	ldr	r1, [pc, #60]	@ (8014ea8 <RegionUS915GetPhyParam+0x2b4>)
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7fe fc0d 	bl	801368c <RegionCommonGetBandwidth>
 8014e72:	4603      	mov	r3, r0
 8014e74:	61bb      	str	r3, [r7, #24]
            break;
 8014e76:	e000      	b.n	8014e7a <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8014e78:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8014e7a:	69bb      	ldr	r3, [r7, #24]
 8014e7c:	61fb      	str	r3, [r7, #28]
 8014e7e:	69fb      	ldr	r3, [r7, #28]
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3720      	adds	r7, #32
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	2000122c 	.word	0x2000122c
 8014e8c:	08021be8 	.word	0x08021be8
 8014e90:	08021bf8 	.word	0x08021bf8
 8014e94:	fffffc18 	.word	0xfffffc18
 8014e98:	370870a0 	.word	0x370870a0
 8014e9c:	4200999a 	.word	0x4200999a
 8014ea0:	000927c0 	.word	0x000927c0
 8014ea4:	08021b84 	.word	0x08021b84
 8014ea8:	08021b94 	.word	0x08021b94

08014eac <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014eac:	b590      	push	{r4, r7, lr}
 8014eae:	b085      	sub	sp, #20
 8014eb0:	af02      	add	r7, sp, #8
 8014eb2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014eb4:	4b11      	ldr	r3, [pc, #68]	@ (8014efc <RegionUS915SetBandTxDone+0x50>)
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	4b11      	ldr	r3, [pc, #68]	@ (8014f00 <RegionUS915SetBandTxDone+0x54>)
 8014eba:	6819      	ldr	r1, [r3, #0]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	005b      	lsls	r3, r3, #1
 8014ec6:	4403      	add	r3, r0
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	440b      	add	r3, r1
 8014ecc:	3309      	adds	r3, #9
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	460b      	mov	r3, r1
 8014ed4:	005b      	lsls	r3, r3, #1
 8014ed6:	440b      	add	r3, r1
 8014ed8:	00db      	lsls	r3, r3, #3
 8014eda:	18d0      	adds	r0, r2, r3
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6899      	ldr	r1, [r3, #8]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	785c      	ldrb	r4, [r3, #1]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	691a      	ldr	r2, [r3, #16]
 8014ee8:	9200      	str	r2, [sp, #0]
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	4622      	mov	r2, r4
 8014eee:	f7fd ff53 	bl	8012d98 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8014ef2:	bf00      	nop
 8014ef4:	370c      	adds	r7, #12
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd90      	pop	{r4, r7, pc}
 8014efa:	bf00      	nop
 8014efc:	20001230 	.word	0x20001230
 8014f00:	2000122c 	.word	0x2000122c

08014f04 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b08a      	sub	sp, #40	@ 0x28
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	81bb      	strh	r3, [r7, #12]
 8014f10:	2300      	movs	r3, #0
 8014f12:	73bb      	strb	r3, [r7, #14]
 8014f14:	2300      	movs	r3, #0
 8014f16:	613b      	str	r3, [r7, #16]
 8014f18:	2300      	movs	r3, #0
 8014f1a:	617b      	str	r3, [r7, #20]
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	61bb      	str	r3, [r7, #24]
 8014f20:	2300      	movs	r3, #0
 8014f22:	61fb      	str	r3, [r7, #28]
 8014f24:	2300      	movs	r3, #0
 8014f26:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	7b1b      	ldrb	r3, [r3, #12]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d007      	beq.n	8014f42 <RegionUS915InitDefaults+0x3e>
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	f2c0 8104 	blt.w	8015140 <RegionUS915InitDefaults+0x23c>
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	f200 8100 	bhi.w	8015140 <RegionUS915InitDefaults+0x23c>
 8014f40:	e0ce      	b.n	80150e0 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	f000 80fc 	beq.w	8015144 <RegionUS915InitDefaults+0x240>
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	f000 80f7 	beq.w	8015144 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	4a7c      	ldr	r2, [pc, #496]	@ (801514c <RegionUS915InitDefaults+0x248>)
 8014f5c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	4a7b      	ldr	r2, [pc, #492]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8014f64:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	689b      	ldr	r3, [r3, #8]
 8014f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8015154 <RegionUS915InitDefaults+0x250>)
 8014f6c:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8014f6e:	4b77      	ldr	r3, [pc, #476]	@ (801514c <RegionUS915InitDefaults+0x248>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2200      	movs	r2, #0
 8014f74:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8014f76:	4b75      	ldr	r3, [pc, #468]	@ (801514c <RegionUS915InitDefaults+0x248>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8014f7e:	4b75      	ldr	r3, [pc, #468]	@ (8015154 <RegionUS915InitDefaults+0x250>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f107 010c 	add.w	r1, r7, #12
 8014f86:	2218      	movs	r2, #24
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f002 fc6a 	bl	8017862 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8014f8e:	2300      	movs	r3, #0
 8014f90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014f94:	e02e      	b.n	8014ff4 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8014f96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f9a:	4a6f      	ldr	r2, [pc, #444]	@ (8015158 <RegionUS915InitDefaults+0x254>)
 8014f9c:	fb03 f202 	mul.w	r2, r3, r2
 8014fa0:	4b6e      	ldr	r3, [pc, #440]	@ (801515c <RegionUS915InitDefaults+0x258>)
 8014fa2:	4413      	add	r3, r2
 8014fa4:	4a6a      	ldr	r2, [pc, #424]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8014fa6:	6811      	ldr	r1, [r2, #0]
 8014fa8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014fac:	4618      	mov	r0, r3
 8014fae:	4613      	mov	r3, r2
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	4413      	add	r3, r2
 8014fb4:	009b      	lsls	r3, r3, #2
 8014fb6:	440b      	add	r3, r1
 8014fb8:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8014fba:	4b65      	ldr	r3, [pc, #404]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8014fbc:	6819      	ldr	r1, [r3, #0]
 8014fbe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	005b      	lsls	r3, r3, #1
 8014fc6:	4413      	add	r3, r2
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	440b      	add	r3, r1
 8014fcc:	3308      	adds	r3, #8
 8014fce:	2230      	movs	r2, #48	@ 0x30
 8014fd0:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8014fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8014fd4:	6819      	ldr	r1, [r3, #0]
 8014fd6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014fda:	4613      	mov	r3, r2
 8014fdc:	005b      	lsls	r3, r3, #1
 8014fde:	4413      	add	r3, r2
 8014fe0:	009b      	lsls	r3, r3, #2
 8014fe2:	440b      	add	r3, r1
 8014fe4:	3309      	adds	r3, #9
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8014fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fee:	3301      	adds	r3, #1
 8014ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ff8:	2b3f      	cmp	r3, #63	@ 0x3f
 8014ffa:	d9cc      	bls.n	8014f96 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8014ffc:	2340      	movs	r3, #64	@ 0x40
 8014ffe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015002:	e02f      	b.n	8015064 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8015004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015008:	3b40      	subs	r3, #64	@ 0x40
 801500a:	4a55      	ldr	r2, [pc, #340]	@ (8015160 <RegionUS915InitDefaults+0x25c>)
 801500c:	fb03 f202 	mul.w	r2, r3, r2
 8015010:	4b54      	ldr	r3, [pc, #336]	@ (8015164 <RegionUS915InitDefaults+0x260>)
 8015012:	4413      	add	r3, r2
 8015014:	4a4e      	ldr	r2, [pc, #312]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8015016:	6811      	ldr	r1, [r2, #0]
 8015018:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801501c:	4618      	mov	r0, r3
 801501e:	4613      	mov	r3, r2
 8015020:	005b      	lsls	r3, r3, #1
 8015022:	4413      	add	r3, r2
 8015024:	009b      	lsls	r3, r3, #2
 8015026:	440b      	add	r3, r1
 8015028:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801502a:	4b49      	ldr	r3, [pc, #292]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 801502c:	6819      	ldr	r1, [r3, #0]
 801502e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8015032:	4613      	mov	r3, r2
 8015034:	005b      	lsls	r3, r3, #1
 8015036:	4413      	add	r3, r2
 8015038:	009b      	lsls	r3, r3, #2
 801503a:	440b      	add	r3, r1
 801503c:	3308      	adds	r3, #8
 801503e:	2244      	movs	r2, #68	@ 0x44
 8015040:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8015042:	4b43      	ldr	r3, [pc, #268]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8015044:	6819      	ldr	r1, [r3, #0]
 8015046:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801504a:	4613      	mov	r3, r2
 801504c:	005b      	lsls	r3, r3, #1
 801504e:	4413      	add	r3, r2
 8015050:	009b      	lsls	r3, r3, #2
 8015052:	440b      	add	r3, r1
 8015054:	3309      	adds	r3, #9
 8015056:	2200      	movs	r2, #0
 8015058:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801505a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801505e:	3301      	adds	r3, #1
 8015060:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015064:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015068:	2b47      	cmp	r3, #71	@ 0x47
 801506a:	d9cb      	bls.n	8015004 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801506c:	4b38      	ldr	r3, [pc, #224]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015074:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8015078:	4b35      	ldr	r3, [pc, #212]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015080:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8015084:	4b32      	ldr	r3, [pc, #200]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801508c:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8015090:	4b2f      	ldr	r3, [pc, #188]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015098:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801509c:	4b2c      	ldr	r3, [pc, #176]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	22ff      	movs	r2, #255	@ 0xff
 80150a2:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80150a6:	4b2a      	ldr	r3, [pc, #168]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2200      	movs	r2, #0
 80150ac:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80150b0:	4b27      	ldr	r3, [pc, #156]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80150b8:	4b25      	ldr	r3, [pc, #148]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80150c0:	2206      	movs	r2, #6
 80150c2:	4619      	mov	r1, r3
 80150c4:	f7fd fe42 	bl	8012d4c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80150c8:	4b20      	ldr	r3, [pc, #128]	@ (801514c <RegionUS915InitDefaults+0x248>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	4618      	mov	r0, r3
 80150ce:	4b20      	ldr	r3, [pc, #128]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80150d6:	2206      	movs	r2, #6
 80150d8:	4619      	mov	r1, r3
 80150da:	f7fd fe37 	bl	8012d4c <RegionCommonChanMaskCopy>
            break;
 80150de:	e032      	b.n	8015146 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80150e0:	4b1b      	ldr	r3, [pc, #108]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80150e8:	4b19      	ldr	r3, [pc, #100]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80150f0:	2206      	movs	r2, #6
 80150f2:	4619      	mov	r1, r3
 80150f4:	f7fd fe2a 	bl	8012d4c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80150f8:	2300      	movs	r3, #0
 80150fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80150fe:	e01a      	b.n	8015136 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8015100:	4b12      	ldr	r3, [pc, #72]	@ (801514c <RegionUS915InitDefaults+0x248>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8015108:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801510c:	4b10      	ldr	r3, [pc, #64]	@ (8015150 <RegionUS915InitDefaults+0x24c>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8015114:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8015118:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801511c:	4b0b      	ldr	r3, [pc, #44]	@ (801514c <RegionUS915InitDefaults+0x248>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8015124:	4001      	ands	r1, r0
 8015126:	b289      	uxth	r1, r1
 8015128:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801512c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8015130:	3301      	adds	r3, #1
 8015132:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015136:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801513a:	2b05      	cmp	r3, #5
 801513c:	d9e0      	bls.n	8015100 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801513e:	e002      	b.n	8015146 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8015140:	bf00      	nop
 8015142:	e000      	b.n	8015146 <RegionUS915InitDefaults+0x242>
                return;
 8015144:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8015146:	3728      	adds	r7, #40	@ 0x28
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	20001228 	.word	0x20001228
 8015150:	2000122c 	.word	0x2000122c
 8015154:	20001230 	.word	0x20001230
 8015158:	00030d40 	.word	0x00030d40
 801515c:	35c80160 	.word	0x35c80160
 8015160:	00186a00 	.word	0x00186a00
 8015164:	35d2afc0 	.word	0x35d2afc0

08015168 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	460b      	mov	r3, r1
 8015172:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8015174:	78fb      	ldrb	r3, [r7, #3]
 8015176:	2b0f      	cmp	r3, #15
 8015178:	d867      	bhi.n	801524a <RegionUS915Verify+0xe2>
 801517a:	a201      	add	r2, pc, #4	@ (adr r2, 8015180 <RegionUS915Verify+0x18>)
 801517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015180:	080151c1 	.word	0x080151c1
 8015184:	0801524b 	.word	0x0801524b
 8015188:	0801524b 	.word	0x0801524b
 801518c:	0801524b 	.word	0x0801524b
 8015190:	0801524b 	.word	0x0801524b
 8015194:	080151cf 	.word	0x080151cf
 8015198:	080151ed 	.word	0x080151ed
 801519c:	0801520b 	.word	0x0801520b
 80151a0:	0801524b 	.word	0x0801524b
 80151a4:	08015229 	.word	0x08015229
 80151a8:	08015229 	.word	0x08015229
 80151ac:	0801524b 	.word	0x0801524b
 80151b0:	0801524b 	.word	0x0801524b
 80151b4:	0801524b 	.word	0x0801524b
 80151b8:	0801524b 	.word	0x0801524b
 80151bc:	08015247 	.word	0x08015247
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7ff fca1 	bl	8014b0c <VerifyRfFreq>
 80151ca:	4603      	mov	r3, r0
 80151cc:	e03e      	b.n	801524c <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f993 3000 	ldrsb.w	r3, [r3]
 80151d4:	2204      	movs	r2, #4
 80151d6:	2100      	movs	r1, #0
 80151d8:	4618      	mov	r0, r3
 80151da:	f7fd fd3a 	bl	8012c52 <RegionCommonValueInRange>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	bf14      	ite	ne
 80151e4:	2301      	movne	r3, #1
 80151e6:	2300      	moveq	r3, #0
 80151e8:	b2db      	uxtb	r3, r3
 80151ea:	e02f      	b.n	801524c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f993 3000 	ldrsb.w	r3, [r3]
 80151f2:	2205      	movs	r2, #5
 80151f4:	2100      	movs	r1, #0
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7fd fd2b 	bl	8012c52 <RegionCommonValueInRange>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b00      	cmp	r3, #0
 8015200:	bf14      	ite	ne
 8015202:	2301      	movne	r3, #1
 8015204:	2300      	moveq	r3, #0
 8015206:	b2db      	uxtb	r3, r3
 8015208:	e020      	b.n	801524c <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f993 3000 	ldrsb.w	r3, [r3]
 8015210:	220d      	movs	r2, #13
 8015212:	2108      	movs	r1, #8
 8015214:	4618      	mov	r0, r3
 8015216:	f7fd fd1c 	bl	8012c52 <RegionCommonValueInRange>
 801521a:	4603      	mov	r3, r0
 801521c:	2b00      	cmp	r3, #0
 801521e:	bf14      	ite	ne
 8015220:	2301      	movne	r3, #1
 8015222:	2300      	moveq	r3, #0
 8015224:	b2db      	uxtb	r3, r3
 8015226:	e011      	b.n	801524c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f993 3000 	ldrsb.w	r3, [r3]
 801522e:	220e      	movs	r2, #14
 8015230:	2100      	movs	r1, #0
 8015232:	4618      	mov	r0, r3
 8015234:	f7fd fd0d 	bl	8012c52 <RegionCommonValueInRange>
 8015238:	4603      	mov	r3, r0
 801523a:	2b00      	cmp	r3, #0
 801523c:	bf14      	ite	ne
 801523e:	2301      	movne	r3, #1
 8015240:	2300      	moveq	r3, #0
 8015242:	b2db      	uxtb	r3, r3
 8015244:	e002      	b.n	801524c <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8015246:	2300      	movs	r3, #0
 8015248:	e000      	b.n	801524c <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801524a:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801524c:	4618      	mov	r0, r3
 801524e:	3708      	adds	r7, #8
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015254:	b480      	push	{r7}
 8015256:	b085      	sub	sp, #20
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	7a1b      	ldrb	r3, [r3, #8]
 8015260:	2b10      	cmp	r3, #16
 8015262:	d15e      	bne.n	8015322 <RegionUS915ApplyCFList+0xce>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	685b      	ldr	r3, [r3, #4]
 8015268:	330f      	adds	r3, #15
 801526a:	781b      	ldrb	r3, [r3, #0]
 801526c:	2b01      	cmp	r3, #1
 801526e:	d15a      	bne.n	8015326 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8015270:	2300      	movs	r3, #0
 8015272:	73fb      	strb	r3, [r7, #15]
 8015274:	2300      	movs	r3, #0
 8015276:	73bb      	strb	r3, [r7, #14]
 8015278:	e04f      	b.n	801531a <RegionUS915ApplyCFList+0xc6>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	685a      	ldr	r2, [r3, #4]
 801527e:	7bbb      	ldrb	r3, [r7, #14]
 8015280:	4413      	add	r3, r2
 8015282:	7819      	ldrb	r1, [r3, #0]
 8015284:	4b2a      	ldr	r3, [pc, #168]	@ (8015330 <RegionUS915ApplyCFList+0xdc>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	7bfa      	ldrb	r2, [r7, #15]
 801528a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801528e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8015292:	4b27      	ldr	r3, [pc, #156]	@ (8015330 <RegionUS915ApplyCFList+0xdc>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	7bfa      	ldrb	r2, [r7, #15]
 8015298:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801529c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	685a      	ldr	r2, [r3, #4]
 80152a4:	7bbb      	ldrb	r3, [r7, #14]
 80152a6:	3301      	adds	r3, #1
 80152a8:	4413      	add	r3, r2
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	021b      	lsls	r3, r3, #8
 80152ae:	b299      	uxth	r1, r3
 80152b0:	4b1f      	ldr	r3, [pc, #124]	@ (8015330 <RegionUS915ApplyCFList+0xdc>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	7bfa      	ldrb	r2, [r7, #15]
 80152b6:	4301      	orrs	r1, r0
 80152b8:	b289      	uxth	r1, r1
 80152ba:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80152c2:	7bfb      	ldrb	r3, [r7, #15]
 80152c4:	2b04      	cmp	r3, #4
 80152c6:	d10f      	bne.n	80152e8 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80152c8:	4b19      	ldr	r3, [pc, #100]	@ (8015330 <RegionUS915ApplyCFList+0xdc>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	7bfa      	ldrb	r2, [r7, #15]
 80152ce:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152d2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80152d6:	4b16      	ldr	r3, [pc, #88]	@ (8015330 <RegionUS915ApplyCFList+0xdc>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	7bfa      	ldrb	r2, [r7, #15]
 80152dc:	b2c9      	uxtb	r1, r1
 80152de:	b289      	uxth	r1, r1
 80152e0:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80152e8:	4b12      	ldr	r3, [pc, #72]	@ (8015334 <RegionUS915ApplyCFList+0xe0>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	7bfa      	ldrb	r2, [r7, #15]
 80152ee:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80152f2:	4b0f      	ldr	r3, [pc, #60]	@ (8015330 <RegionUS915ApplyCFList+0xdc>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	7bfa      	ldrb	r2, [r7, #15]
 80152f8:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80152fc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8015300:	4b0c      	ldr	r3, [pc, #48]	@ (8015334 <RegionUS915ApplyCFList+0xe0>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	7bfa      	ldrb	r2, [r7, #15]
 8015306:	4001      	ands	r1, r0
 8015308:	b289      	uxth	r1, r1
 801530a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801530e:	7bfb      	ldrb	r3, [r7, #15]
 8015310:	3301      	adds	r3, #1
 8015312:	73fb      	strb	r3, [r7, #15]
 8015314:	7bbb      	ldrb	r3, [r7, #14]
 8015316:	3302      	adds	r3, #2
 8015318:	73bb      	strb	r3, [r7, #14]
 801531a:	7bfb      	ldrb	r3, [r7, #15]
 801531c:	2b04      	cmp	r3, #4
 801531e:	d9ac      	bls.n	801527a <RegionUS915ApplyCFList+0x26>
 8015320:	e002      	b.n	8015328 <RegionUS915ApplyCFList+0xd4>
        return;
 8015322:	bf00      	nop
 8015324:	e000      	b.n	8015328 <RegionUS915ApplyCFList+0xd4>
        return;
 8015326:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8015328:	3714      	adds	r7, #20
 801532a:	46bd      	mov	sp, r7
 801532c:	bc80      	pop	{r7}
 801532e:	4770      	bx	lr
 8015330:	2000122c 	.word	0x2000122c
 8015334:	20001228 	.word	0x20001228

08015338 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2204      	movs	r2, #4
 8015346:	2100      	movs	r1, #0
 8015348:	4618      	mov	r0, r3
 801534a:	f7fd fcd3 	bl	8012cf4 <RegionCommonCountChannels>
 801534e:	4603      	mov	r3, r0
 8015350:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8015352:	7bbb      	ldrb	r3, [r7, #14]
 8015354:	2b01      	cmp	r3, #1
 8015356:	d804      	bhi.n	8015362 <RegionUS915ChanMaskSet+0x2a>
 8015358:	7bbb      	ldrb	r3, [r7, #14]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d001      	beq.n	8015362 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801535e:	2300      	movs	r3, #0
 8015360:	e04a      	b.n	80153f8 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	791b      	ldrb	r3, [r3, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d002      	beq.n	8015370 <RegionUS915ChanMaskSet+0x38>
 801536a:	2b01      	cmp	r3, #1
 801536c:	d036      	beq.n	80153dc <RegionUS915ChanMaskSet+0xa4>
 801536e:	e040      	b.n	80153f2 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015370:	4b23      	ldr	r3, [pc, #140]	@ (8015400 <RegionUS915ChanMaskSet+0xc8>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	2206      	movs	r2, #6
 801537e:	4619      	mov	r1, r3
 8015380:	f7fd fce4 	bl	8012d4c <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8015384:	4b1e      	ldr	r3, [pc, #120]	@ (8015400 <RegionUS915ChanMaskSet+0xc8>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 801538c:	4b1c      	ldr	r3, [pc, #112]	@ (8015400 <RegionUS915ChanMaskSet+0xc8>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	b2d2      	uxtb	r2, r2
 8015392:	b292      	uxth	r2, r2
 8015394:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8015398:	4b19      	ldr	r3, [pc, #100]	@ (8015400 <RegionUS915ChanMaskSet+0xc8>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	2200      	movs	r2, #0
 801539e:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80153a2:	2300      	movs	r3, #0
 80153a4:	73fb      	strb	r3, [r7, #15]
 80153a6:	e015      	b.n	80153d4 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80153a8:	4b16      	ldr	r3, [pc, #88]	@ (8015404 <RegionUS915ChanMaskSet+0xcc>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	7bfa      	ldrb	r2, [r7, #15]
 80153ae:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80153b2:	4b13      	ldr	r3, [pc, #76]	@ (8015400 <RegionUS915ChanMaskSet+0xc8>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	7bfa      	ldrb	r2, [r7, #15]
 80153b8:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80153bc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80153c0:	4b10      	ldr	r3, [pc, #64]	@ (8015404 <RegionUS915ChanMaskSet+0xcc>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	7bfa      	ldrb	r2, [r7, #15]
 80153c6:	4001      	ands	r1, r0
 80153c8:	b289      	uxth	r1, r1
 80153ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80153ce:	7bfb      	ldrb	r3, [r7, #15]
 80153d0:	3301      	adds	r3, #1
 80153d2:	73fb      	strb	r3, [r7, #15]
 80153d4:	7bfb      	ldrb	r3, [r7, #15]
 80153d6:	2b05      	cmp	r3, #5
 80153d8:	d9e6      	bls.n	80153a8 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 80153da:	e00c      	b.n	80153f6 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80153dc:	4b08      	ldr	r3, [pc, #32]	@ (8015400 <RegionUS915ChanMaskSet+0xc8>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	2206      	movs	r2, #6
 80153ea:	4619      	mov	r1, r3
 80153ec:	f7fd fcae 	bl	8012d4c <RegionCommonChanMaskCopy>
            break;
 80153f0:	e001      	b.n	80153f6 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 80153f2:	2300      	movs	r3, #0
 80153f4:	e000      	b.n	80153f8 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80153f6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3710      	adds	r7, #16
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	2000122c 	.word	0x2000122c
 8015404:	20001228 	.word	0x20001228

08015408 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b088      	sub	sp, #32
 801540c:	af02      	add	r7, sp, #8
 801540e:	60ba      	str	r2, [r7, #8]
 8015410:	607b      	str	r3, [r7, #4]
 8015412:	4603      	mov	r3, r0
 8015414:	73fb      	strb	r3, [r7, #15]
 8015416:	460b      	mov	r3, r1
 8015418:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801541a:	2300      	movs	r3, #0
 801541c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801541e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015422:	2b0d      	cmp	r3, #13
 8015424:	bfa8      	it	ge
 8015426:	230d      	movge	r3, #13
 8015428:	b25a      	sxtb	r2, r3
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015434:	4916      	ldr	r1, [pc, #88]	@ (8015490 <RegionUS915ComputeRxWindowParameters+0x88>)
 8015436:	4618      	mov	r0, r3
 8015438:	f7fe f928 	bl	801368c <RegionCommonGetBandwidth>
 801543c:	4603      	mov	r3, r0
 801543e:	b2da      	uxtb	r2, r3
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801544a:	461a      	mov	r2, r3
 801544c:	4b11      	ldr	r3, [pc, #68]	@ (8015494 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801544e:	5c9a      	ldrb	r2, [r3, r2]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015456:	4619      	mov	r1, r3
 8015458:	4b0d      	ldr	r3, [pc, #52]	@ (8015490 <RegionUS915ComputeRxWindowParameters+0x88>)
 801545a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801545e:	4619      	mov	r1, r3
 8015460:	4610      	mov	r0, r2
 8015462:	f7fd fe91 	bl	8013188 <RegionCommonComputeSymbolTimeLoRa>
 8015466:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015468:	4b0b      	ldr	r3, [pc, #44]	@ (8015498 <RegionUS915ComputeRxWindowParameters+0x90>)
 801546a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801546c:	4798      	blx	r3
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	3308      	adds	r3, #8
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	320c      	adds	r2, #12
 8015476:	7bb9      	ldrb	r1, [r7, #14]
 8015478:	9201      	str	r2, [sp, #4]
 801547a:	9300      	str	r3, [sp, #0]
 801547c:	4603      	mov	r3, r0
 801547e:	68ba      	ldr	r2, [r7, #8]
 8015480:	6978      	ldr	r0, [r7, #20]
 8015482:	f7fd fea7 	bl	80131d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8015486:	bf00      	nop
 8015488:	3718      	adds	r7, #24
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	08021b94 	.word	0x08021b94
 8015494:	08021b84 	.word	0x08021b84
 8015498:	08021f8c 	.word	0x08021f8c

0801549c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801549c:	b590      	push	{r4, r7, lr}
 801549e:	b091      	sub	sp, #68	@ 0x44
 80154a0:	af0a      	add	r7, sp, #40	@ 0x28
 80154a2:	6078      	str	r0, [r7, #4]
 80154a4:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	785b      	ldrb	r3, [r3, #1]
 80154aa:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80154ac:	2300      	movs	r3, #0
 80154ae:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80154b0:	2300      	movs	r3, #0
 80154b2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80154ba:	4b34      	ldr	r3, [pc, #208]	@ (801558c <RegionUS915RxConfig+0xf0>)
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	4798      	blx	r3
 80154c0:	4603      	mov	r3, r0
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d001      	beq.n	80154ca <RegionUS915RxConfig+0x2e>
    {
        return false;
 80154c6:	2300      	movs	r3, #0
 80154c8:	e05c      	b.n	8015584 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	7cdb      	ldrb	r3, [r3, #19]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d109      	bne.n	80154e6 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	781b      	ldrb	r3, [r3, #0]
 80154d6:	f003 0307 	and.w	r3, r3, #7
 80154da:	4a2d      	ldr	r2, [pc, #180]	@ (8015590 <RegionUS915RxConfig+0xf4>)
 80154dc:	fb03 f202 	mul.w	r2, r3, r2
 80154e0:	4b2c      	ldr	r3, [pc, #176]	@ (8015594 <RegionUS915RxConfig+0xf8>)
 80154e2:	4413      	add	r3, r2
 80154e4:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80154e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ea:	4a2b      	ldr	r2, [pc, #172]	@ (8015598 <RegionUS915RxConfig+0xfc>)
 80154ec:	5cd3      	ldrb	r3, [r2, r3]
 80154ee:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80154f0:	4b26      	ldr	r3, [pc, #152]	@ (801558c <RegionUS915RxConfig+0xf0>)
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	6938      	ldr	r0, [r7, #16]
 80154f6:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80154f8:	4b24      	ldr	r3, [pc, #144]	@ (801558c <RegionUS915RxConfig+0xf0>)
 80154fa:	699c      	ldr	r4, [r3, #24]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	789b      	ldrb	r3, [r3, #2]
 8015500:	4618      	mov	r0, r3
 8015502:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	689b      	ldr	r3, [r3, #8]
 801550a:	b29b      	uxth	r3, r3
 801550c:	687a      	ldr	r2, [r7, #4]
 801550e:	7c92      	ldrb	r2, [r2, #18]
 8015510:	9209      	str	r2, [sp, #36]	@ 0x24
 8015512:	2201      	movs	r2, #1
 8015514:	9208      	str	r2, [sp, #32]
 8015516:	2200      	movs	r2, #0
 8015518:	9207      	str	r2, [sp, #28]
 801551a:	2200      	movs	r2, #0
 801551c:	9206      	str	r2, [sp, #24]
 801551e:	2200      	movs	r2, #0
 8015520:	9205      	str	r2, [sp, #20]
 8015522:	2200      	movs	r2, #0
 8015524:	9204      	str	r2, [sp, #16]
 8015526:	2200      	movs	r2, #0
 8015528:	9203      	str	r2, [sp, #12]
 801552a:	9302      	str	r3, [sp, #8]
 801552c:	2308      	movs	r3, #8
 801552e:	9301      	str	r3, [sp, #4]
 8015530:	2300      	movs	r3, #0
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	2301      	movs	r3, #1
 8015536:	460a      	mov	r2, r1
 8015538:	4601      	mov	r1, r0
 801553a:	2001      	movs	r0, #1
 801553c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	7c5b      	ldrb	r3, [r3, #17]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d005      	beq.n	8015552 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8015546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801554a:	4a14      	ldr	r2, [pc, #80]	@ (801559c <RegionUS915RxConfig+0x100>)
 801554c:	5cd3      	ldrb	r3, [r2, r3]
 801554e:	75fb      	strb	r3, [r7, #23]
 8015550:	e004      	b.n	801555c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8015552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015556:	4a12      	ldr	r2, [pc, #72]	@ (80155a0 <RegionUS915RxConfig+0x104>)
 8015558:	5cd3      	ldrb	r3, [r2, r3]
 801555a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801555c:	4b0b      	ldr	r3, [pc, #44]	@ (801558c <RegionUS915RxConfig+0xf0>)
 801555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015560:	7dfa      	ldrb	r2, [r7, #23]
 8015562:	320d      	adds	r2, #13
 8015564:	b2d2      	uxtb	r2, r2
 8015566:	4611      	mov	r1, r2
 8015568:	2001      	movs	r0, #1
 801556a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	7cdb      	ldrb	r3, [r3, #19]
 8015570:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015574:	6939      	ldr	r1, [r7, #16]
 8015576:	4618      	mov	r0, r3
 8015578:	f7fe f8a6 	bl	80136c8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	7bfa      	ldrb	r2, [r7, #15]
 8015580:	701a      	strb	r2, [r3, #0]
    return true;
 8015582:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8015584:	4618      	mov	r0, r3
 8015586:	371c      	adds	r7, #28
 8015588:	46bd      	mov	sp, r7
 801558a:	bd90      	pop	{r4, r7, pc}
 801558c:	08021f8c 	.word	0x08021f8c
 8015590:	000927c0 	.word	0x000927c0
 8015594:	370870a0 	.word	0x370870a0
 8015598:	08021b84 	.word	0x08021b84
 801559c:	08021bf8 	.word	0x08021bf8
 80155a0:	08021be8 	.word	0x08021be8

080155a4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80155a4:	b590      	push	{r4, r7, lr}
 80155a6:	b093      	sub	sp, #76	@ 0x4c
 80155a8:	af0a      	add	r7, sp, #40	@ 0x28
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80155b6:	461a      	mov	r2, r3
 80155b8:	4b49      	ldr	r3, [pc, #292]	@ (80156e0 <RegionUS915TxConfig+0x13c>)
 80155ba:	5c9b      	ldrb	r3, [r3, r2]
 80155bc:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80155c4:	4b47      	ldr	r3, [pc, #284]	@ (80156e4 <RegionUS915TxConfig+0x140>)
 80155c6:	681a      	ldr	r2, [r3, #0]
 80155c8:	4b47      	ldr	r3, [pc, #284]	@ (80156e8 <RegionUS915TxConfig+0x144>)
 80155ca:	6819      	ldr	r1, [r3, #0]
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	781b      	ldrb	r3, [r3, #0]
 80155d0:	461c      	mov	r4, r3
 80155d2:	4623      	mov	r3, r4
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	4423      	add	r3, r4
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	440b      	add	r3, r1
 80155dc:	3309      	adds	r3, #9
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	4619      	mov	r1, r3
 80155e2:	460b      	mov	r3, r1
 80155e4:	005b      	lsls	r3, r3, #1
 80155e6:	440b      	add	r3, r1
 80155e8:	00db      	lsls	r3, r3, #3
 80155ea:	4413      	add	r3, r2
 80155ec:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80155f6:	4b3c      	ldr	r3, [pc, #240]	@ (80156e8 <RegionUS915TxConfig+0x144>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80155fe:	f7ff fa4f 	bl	8014aa0 <LimitTxPower>
 8015602:	4603      	mov	r3, r0
 8015604:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801560c:	4937      	ldr	r1, [pc, #220]	@ (80156ec <RegionUS915TxConfig+0x148>)
 801560e:	4618      	mov	r0, r3
 8015610:	f7fe f83c 	bl	801368c <RegionCommonGetBandwidth>
 8015614:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015616:	2300      	movs	r3, #0
 8015618:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801561a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801561e:	f04f 0200 	mov.w	r2, #0
 8015622:	4933      	ldr	r1, [pc, #204]	@ (80156f0 <RegionUS915TxConfig+0x14c>)
 8015624:	4618      	mov	r0, r3
 8015626:	f7fd fe8d 	bl	8013344 <RegionCommonComputeTxPower>
 801562a:	4603      	mov	r3, r0
 801562c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801562e:	4b31      	ldr	r3, [pc, #196]	@ (80156f4 <RegionUS915TxConfig+0x150>)
 8015630:	68da      	ldr	r2, [r3, #12]
 8015632:	4b2d      	ldr	r3, [pc, #180]	@ (80156e8 <RegionUS915TxConfig+0x144>)
 8015634:	6819      	ldr	r1, [r3, #0]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	4618      	mov	r0, r3
 801563c:	4603      	mov	r3, r0
 801563e:	005b      	lsls	r3, r3, #1
 8015640:	4403      	add	r3, r0
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	440b      	add	r3, r1
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	4618      	mov	r0, r3
 801564a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801564c:	4b29      	ldr	r3, [pc, #164]	@ (80156f4 <RegionUS915TxConfig+0x150>)
 801564e:	69dc      	ldr	r4, [r3, #28]
 8015650:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015654:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015658:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801565c:	9208      	str	r2, [sp, #32]
 801565e:	2200      	movs	r2, #0
 8015660:	9207      	str	r2, [sp, #28]
 8015662:	2200      	movs	r2, #0
 8015664:	9206      	str	r2, [sp, #24]
 8015666:	2200      	movs	r2, #0
 8015668:	9205      	str	r2, [sp, #20]
 801566a:	2201      	movs	r2, #1
 801566c:	9204      	str	r2, [sp, #16]
 801566e:	2200      	movs	r2, #0
 8015670:	9203      	str	r2, [sp, #12]
 8015672:	2208      	movs	r2, #8
 8015674:	9202      	str	r2, [sp, #8]
 8015676:	2201      	movs	r2, #1
 8015678:	9201      	str	r2, [sp, #4]
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	69bb      	ldr	r3, [r7, #24]
 801567e:	2200      	movs	r2, #0
 8015680:	2001      	movs	r0, #1
 8015682:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015684:	4b18      	ldr	r3, [pc, #96]	@ (80156e8 <RegionUS915TxConfig+0x144>)
 8015686:	681a      	ldr	r2, [r3, #0]
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	4619      	mov	r1, r3
 801568e:	460b      	mov	r3, r1
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	440b      	add	r3, r1
 8015694:	009b      	lsls	r3, r3, #2
 8015696:	4413      	add	r3, r2
 8015698:	681a      	ldr	r2, [r3, #0]
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156a0:	4619      	mov	r1, r3
 80156a2:	4610      	mov	r0, r2
 80156a4:	f7fe f842 	bl	801372c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80156a8:	4b12      	ldr	r3, [pc, #72]	@ (80156f4 <RegionUS915TxConfig+0x150>)
 80156aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80156ac:	68fa      	ldr	r2, [r7, #12]
 80156ae:	8992      	ldrh	r2, [r2, #12]
 80156b0:	b2d2      	uxtb	r2, r2
 80156b2:	4611      	mov	r1, r2
 80156b4:	2001      	movs	r0, #1
 80156b6:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	899b      	ldrh	r3, [r3, #12]
 80156c2:	4619      	mov	r1, r3
 80156c4:	4610      	mov	r0, r2
 80156c6:	f7ff fa65 	bl	8014b94 <GetTimeOnAir>
 80156ca:	4602      	mov	r2, r0
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	7fba      	ldrb	r2, [r7, #30]
 80156d4:	701a      	strb	r2, [r3, #0]
    return true;
 80156d6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3724      	adds	r7, #36	@ 0x24
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd90      	pop	{r4, r7, pc}
 80156e0:	08021b84 	.word	0x08021b84
 80156e4:	20001230 	.word	0x20001230
 80156e8:	2000122c 	.word	0x2000122c
 80156ec:	08021b94 	.word	0x08021b94
 80156f0:	41f00000 	.word	0x41f00000
 80156f4:	08021f8c 	.word	0x08021f8c

080156f8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80156f8:	b590      	push	{r4, r7, lr}
 80156fa:	b097      	sub	sp, #92	@ 0x5c
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
 8015704:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015706:	2307      	movs	r3, #7
 8015708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801570c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015710:	2200      	movs	r2, #0
 8015712:	601a      	str	r2, [r3, #0]
 8015714:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015716:	2300      	movs	r3, #0
 8015718:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 801571c:	2300      	movs	r3, #0
 801571e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8015722:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8015726:	2200      	movs	r2, #0
 8015728:	601a      	str	r2, [r3, #0]
 801572a:	605a      	str	r2, [r3, #4]
 801572c:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801572e:	4b97      	ldr	r3, [pc, #604]	@ (801598c <RegionUS915LinkAdrReq+0x294>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8015736:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801573a:	2206      	movs	r2, #6
 801573c:	4618      	mov	r0, r3
 801573e:	f7fd fb05 	bl	8012d4c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015742:	e11b      	b.n	801597c <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	685a      	ldr	r2, [r3, #4]
 8015748:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801574c:	4413      	add	r3, r2
 801574e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015752:	4611      	mov	r1, r2
 8015754:	4618      	mov	r0, r3
 8015756:	f7fd fc3d 	bl	8012fd4 <RegionCommonParseLinkAdrReq>
 801575a:	4603      	mov	r3, r0
 801575c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8015760:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8015764:	2b00      	cmp	r3, #0
 8015766:	f000 8113 	beq.w	8015990 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801576a:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801576e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8015772:	4413      	add	r3, r2
 8015774:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015778:	2307      	movs	r3, #7
 801577a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801577e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8015782:	2b06      	cmp	r3, #6
 8015784:	d116      	bne.n	80157b4 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8015786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801578a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 801578e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015792:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8015796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801579a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 801579e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80157a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80157aa:	b2db      	uxtb	r3, r3
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80157b2:	e0e3      	b.n	801597c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80157b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80157b8:	2b07      	cmp	r3, #7
 80157ba:	d112      	bne.n	80157e2 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80157bc:	2300      	movs	r3, #0
 80157be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 80157c2:	2300      	movs	r3, #0
 80157c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 80157c8:	2300      	movs	r3, #0
 80157ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 80157ce:	2300      	movs	r3, #0
 80157d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80157d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	b29b      	uxth	r3, r3
 80157dc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80157e0:	e0cc      	b.n	801597c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80157e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80157e6:	2b05      	cmp	r3, #5
 80157e8:	f040 80bf 	bne.w	801596a <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 80157ec:	2301      	movs	r3, #1
 80157ee:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80157f2:	2300      	movs	r3, #0
 80157f4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80157f8:	2300      	movs	r3, #0
 80157fa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80157fe:	e0ae      	b.n	801595e <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8015800:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8015804:	b2da      	uxtb	r2, r3
 8015806:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801580a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801580e:	fa01 f303 	lsl.w	r3, r1, r3
 8015812:	4013      	ands	r3, r2
 8015814:	2b00      	cmp	r3, #0
 8015816:	d04d      	beq.n	80158b4 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8015818:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801581c:	f003 0301 	and.w	r3, r3, #1
 8015820:	b2db      	uxtb	r3, r3
 8015822:	2b00      	cmp	r3, #0
 8015824:	d120      	bne.n	8015868 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8015826:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	3358      	adds	r3, #88	@ 0x58
 801582e:	443b      	add	r3, r7
 8015830:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8015834:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015838:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 801583c:	b292      	uxth	r2, r2
 801583e:	005b      	lsls	r3, r3, #1
 8015840:	3358      	adds	r3, #88	@ 0x58
 8015842:	443b      	add	r3, r7
 8015844:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8015848:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801584c:	b21a      	sxth	r2, r3
 801584e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8015852:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015856:	fa01 f303 	lsl.w	r3, r1, r3
 801585a:	b21b      	sxth	r3, r3
 801585c:	4313      	orrs	r3, r2
 801585e:	b21b      	sxth	r3, r3
 8015860:	b29b      	uxth	r3, r3
 8015862:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015866:	e075      	b.n	8015954 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8015868:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801586c:	005b      	lsls	r3, r3, #1
 801586e:	3358      	adds	r3, #88	@ 0x58
 8015870:	443b      	add	r3, r7
 8015872:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8015876:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801587a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 801587e:	b292      	uxth	r2, r2
 8015880:	005b      	lsls	r3, r3, #1
 8015882:	3358      	adds	r3, #88	@ 0x58
 8015884:	443b      	add	r3, r7
 8015886:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801588a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801588e:	b21a      	sxth	r2, r3
 8015890:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8015894:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015898:	fa01 f303 	lsl.w	r3, r1, r3
 801589c:	b21b      	sxth	r3, r3
 801589e:	4313      	orrs	r3, r2
 80158a0:	b21b      	sxth	r3, r3
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80158a8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80158ac:	3301      	adds	r3, #1
 80158ae:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80158b2:	e04f      	b.n	8015954 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80158b4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80158b8:	f003 0301 	and.w	r3, r3, #1
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d122      	bne.n	8015908 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80158c2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	3358      	adds	r3, #88	@ 0x58
 80158ca:	443b      	add	r3, r7
 80158cc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80158d0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80158d4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80158d8:	b292      	uxth	r2, r2
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	3358      	adds	r3, #88	@ 0x58
 80158de:	443b      	add	r3, r7
 80158e0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80158e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80158e8:	b21a      	sxth	r2, r3
 80158ea:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80158ee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80158f2:	fa01 f303 	lsl.w	r3, r1, r3
 80158f6:	b21b      	sxth	r3, r3
 80158f8:	43db      	mvns	r3, r3
 80158fa:	b21b      	sxth	r3, r3
 80158fc:	4013      	ands	r3, r2
 80158fe:	b21b      	sxth	r3, r3
 8015900:	b29b      	uxth	r3, r3
 8015902:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015906:	e025      	b.n	8015954 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8015908:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801590c:	005b      	lsls	r3, r3, #1
 801590e:	3358      	adds	r3, #88	@ 0x58
 8015910:	443b      	add	r3, r7
 8015912:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8015916:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801591a:	b2d2      	uxtb	r2, r2
 801591c:	b292      	uxth	r2, r2
 801591e:	005b      	lsls	r3, r3, #1
 8015920:	3358      	adds	r3, #88	@ 0x58
 8015922:	443b      	add	r3, r7
 8015924:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8015928:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801592c:	b21a      	sxth	r2, r3
 801592e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8015932:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015936:	fa01 f303 	lsl.w	r3, r1, r3
 801593a:	b21b      	sxth	r3, r3
 801593c:	43db      	mvns	r3, r3
 801593e:	b21b      	sxth	r3, r3
 8015940:	4013      	ands	r3, r2
 8015942:	b21b      	sxth	r3, r3
 8015944:	b29b      	uxth	r3, r3
 8015946:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801594a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801594e:	3301      	adds	r3, #1
 8015950:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8015954:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015958:	3301      	adds	r3, #1
 801595a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 801595e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015962:	2b07      	cmp	r3, #7
 8015964:	f67f af4c 	bls.w	8015800 <RegionUS915LinkAdrReq+0x108>
 8015968:	e008      	b.n	801597c <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801596a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801596e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015972:	005b      	lsls	r3, r3, #1
 8015974:	3358      	adds	r3, #88	@ 0x58
 8015976:	443b      	add	r3, r7
 8015978:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	7a1b      	ldrb	r3, [r3, #8]
 8015980:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8015984:	429a      	cmp	r2, r3
 8015986:	f4ff aedd 	bcc.w	8015744 <RegionUS915LinkAdrReq+0x4c>
 801598a:	e002      	b.n	8015992 <RegionUS915LinkAdrReq+0x29a>
 801598c:	2000122c 	.word	0x2000122c
            break; // break loop, since no more request has been found
 8015990:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8015992:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8015996:	2b03      	cmp	r3, #3
 8015998:	dc0f      	bgt.n	80159ba <RegionUS915LinkAdrReq+0x2c2>
 801599a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801599e:	2204      	movs	r2, #4
 80159a0:	2100      	movs	r1, #0
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7fd f9a6 	bl	8012cf4 <RegionCommonCountChannels>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d805      	bhi.n	80159ba <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 80159ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80159b2:	f023 0301 	bic.w	r3, r3, #1
 80159b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80159ba:	2302      	movs	r3, #2
 80159bc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	7a5b      	ldrb	r3, [r3, #9]
 80159c4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80159c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7ff f911 	bl	8014bf4 <RegionUS915GetPhyParam>
 80159d2:	4603      	mov	r3, r0
 80159d4:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 80159d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80159da:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	7a9b      	ldrb	r3, [r3, #10]
 80159e0:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80159e2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80159e6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80159e8:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80159ec:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80159ee:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80159f2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80159fa:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015a02:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	7b5b      	ldrb	r3, [r3, #13]
 8015a08:	b25b      	sxtb	r3, r3
 8015a0a:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8015a0c:	2348      	movs	r3, #72	@ 0x48
 8015a0e:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8015a12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8015a16:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a1a:	b25b      	sxtb	r3, r3
 8015a1c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8015a20:	2304      	movs	r3, #4
 8015a22:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015a26:	4b3f      	ldr	r3, [pc, #252]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8015a2c:	230e      	movs	r3, #14
 8015a2e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8015a32:	2300      	movs	r3, #0
 8015a34:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015a3e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8015a42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015a46:	1c9a      	adds	r2, r3, #2
 8015a48:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015a4c:	1c59      	adds	r1, r3, #1
 8015a4e:	f107 0014 	add.w	r0, r7, #20
 8015a52:	4623      	mov	r3, r4
 8015a54:	f7fd fb10 	bl	8013078 <RegionCommonLinkAdrReqVerifyParams>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015a5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015a62:	2b07      	cmp	r3, #7
 8015a64:	d147      	bne.n	8015af6 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8015a66:	4b2f      	ldr	r3, [pc, #188]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015a6e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8015a72:	2206      	movs	r2, #6
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7fd f969 	bl	8012d4c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8015a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	8819      	ldrh	r1, [r3, #0]
 8015a80:	4b28      	ldr	r3, [pc, #160]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015a88:	4b27      	ldr	r3, [pc, #156]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	400a      	ands	r2, r1
 8015a8e:	b292      	uxth	r2, r2
 8015a90:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8015a92:	4b25      	ldr	r3, [pc, #148]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	8859      	ldrh	r1, [r3, #2]
 8015a98:	4b22      	ldr	r3, [pc, #136]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 8015aa0:	4b21      	ldr	r3, [pc, #132]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	400a      	ands	r2, r1
 8015aa6:	b292      	uxth	r2, r2
 8015aa8:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8015aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	8899      	ldrh	r1, [r3, #4]
 8015ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 8015ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	400a      	ands	r2, r1
 8015abe:	b292      	uxth	r2, r2
 8015ac0:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8015ac2:	4b19      	ldr	r3, [pc, #100]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	88d9      	ldrh	r1, [r3, #6]
 8015ac8:	4b16      	ldr	r3, [pc, #88]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 8015ad0:	4b15      	ldr	r3, [pc, #84]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	400a      	ands	r2, r1
 8015ad6:	b292      	uxth	r2, r2
 8015ad8:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8015ada:	4b12      	ldr	r3, [pc, #72]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	4b12      	ldr	r3, [pc, #72]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8015ae6:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8015ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8015b24 <RegionUS915LinkAdrReq+0x42c>)
 8015aea:	681a      	ldr	r2, [r3, #0]
 8015aec:	4b0e      	ldr	r3, [pc, #56]	@ (8015b28 <RegionUS915LinkAdrReq+0x430>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 8015af4:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015af6:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015afe:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015b06:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015b0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015b10:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8015b14:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8015b16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	375c      	adds	r7, #92	@ 0x5c
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd90      	pop	{r4, r7, pc}
 8015b22:	bf00      	nop
 8015b24:	2000122c 	.word	0x2000122c
 8015b28:	20001228 	.word	0x20001228

08015b2c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015b34:	2307      	movs	r3, #7
 8015b36:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	685b      	ldr	r3, [r3, #4]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7fe ffe5 	bl	8014b0c <VerifyRfFreq>
 8015b42:	4603      	mov	r3, r0
 8015b44:	f083 0301 	eor.w	r3, r3, #1
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d003      	beq.n	8015b56 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015b4e:	7bfb      	ldrb	r3, [r7, #15]
 8015b50:	f023 0301 	bic.w	r3, r3, #1
 8015b54:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f993 3000 	ldrsb.w	r3, [r3]
 8015b5c:	220d      	movs	r2, #13
 8015b5e:	2108      	movs	r1, #8
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fd f876 	bl	8012c52 <RegionCommonValueInRange>
 8015b66:	4603      	mov	r3, r0
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d103      	bne.n	8015b74 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015b6c:	7bfb      	ldrb	r3, [r7, #15]
 8015b6e:	f023 0302 	bic.w	r3, r3, #2
 8015b72:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f993 3000 	ldrsb.w	r3, [r3]
 8015b7a:	2207      	movs	r2, #7
 8015b7c:	2105      	movs	r1, #5
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7fd f867 	bl	8012c52 <RegionCommonValueInRange>
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d004      	beq.n	8015b94 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8015b90:	2b0d      	cmp	r3, #13
 8015b92:	dd03      	ble.n	8015b9c <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8015b94:	7bfb      	ldrb	r3, [r7, #15]
 8015b96:	f023 0302 	bic.w	r3, r3, #2
 8015b9a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ba2:	2203      	movs	r2, #3
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7fd f853 	bl	8012c52 <RegionCommonValueInRange>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d103      	bne.n	8015bba <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015bb2:	7bfb      	ldrb	r3, [r7, #15]
 8015bb4:	f023 0304 	bic.w	r3, r3, #4
 8015bb8:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8015bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b083      	sub	sp, #12
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	370c      	adds	r7, #12
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bc80      	pop	{r7}
 8015bd8:	4770      	bx	lr

08015bda <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015bda:	b480      	push	{r7}
 8015bdc:	b083      	sub	sp, #12
 8015bde:	af00      	add	r7, sp, #0
 8015be0:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	370c      	adds	r7, #12
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bc80      	pop	{r7}
 8015bee:	4770      	bx	lr

08015bf0 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bc80      	pop	{r7}
 8015c04:	4770      	bx	lr
	...

08015c08 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015c08:	b480      	push	{r7}
 8015c0a:	b083      	sub	sp, #12
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	4603      	mov	r3, r0
 8015c10:	460a      	mov	r2, r1
 8015c12:	71fb      	strb	r3, [r7, #7]
 8015c14:	4613      	mov	r3, r2
 8015c16:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8015c18:	79bb      	ldrb	r3, [r7, #6]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d106      	bne.n	8015c2c <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8015c1e:	4b13      	ldr	r3, [pc, #76]	@ (8015c6c <RegionUS915AlternateDr+0x64>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	7b5a      	ldrb	r2, [r3, #13]
 8015c24:	3201      	adds	r2, #1
 8015c26:	b2d2      	uxtb	r2, r2
 8015c28:	735a      	strb	r2, [r3, #13]
 8015c2a:	e005      	b.n	8015c38 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8015c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8015c6c <RegionUS915AlternateDr+0x64>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	7b5a      	ldrb	r2, [r3, #13]
 8015c32:	3a01      	subs	r2, #1
 8015c34:	b2d2      	uxtb	r2, r2
 8015c36:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8015c38:	4b0c      	ldr	r3, [pc, #48]	@ (8015c6c <RegionUS915AlternateDr+0x64>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	7b5a      	ldrb	r2, [r3, #13]
 8015c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8015c70 <RegionUS915AlternateDr+0x68>)
 8015c40:	fba3 1302 	umull	r1, r3, r3, r2
 8015c44:	0859      	lsrs	r1, r3, #1
 8015c46:	460b      	mov	r3, r1
 8015c48:	00db      	lsls	r3, r3, #3
 8015c4a:	440b      	add	r3, r1
 8015c4c:	1ad3      	subs	r3, r2, r3
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d102      	bne.n	8015c5a <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8015c54:	2304      	movs	r3, #4
 8015c56:	71fb      	strb	r3, [r7, #7]
 8015c58:	e001      	b.n	8015c5e <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8015c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	370c      	adds	r7, #12
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bc80      	pop	{r7}
 8015c6a:	4770      	bx	lr
 8015c6c:	20001228 	.word	0x20001228
 8015c70:	38e38e39 	.word	0x38e38e39

08015c74 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b0a8      	sub	sp, #160	@ 0xa0
 8015c78:	af02      	add	r7, sp, #8
 8015c7a:	60f8      	str	r0, [r7, #12]
 8015c7c:	60b9      	str	r1, [r7, #8]
 8015c7e:	607a      	str	r2, [r7, #4]
 8015c80:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8015c82:	2300      	movs	r3, #0
 8015c84:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8015c8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015c92:	2248      	movs	r2, #72	@ 0x48
 8015c94:	2100      	movs	r1, #0
 8015c96:	4618      	mov	r0, r3
 8015c98:	f00a fd7c 	bl	8020794 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015c9c:	230c      	movs	r3, #12
 8015c9e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8015ca2:	4b67      	ldr	r3, [pc, #412]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2204      	movs	r2, #4
 8015ca8:	2100      	movs	r1, #0
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7fd f822 	bl	8012cf4 <RegionCommonCountChannels>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d10e      	bne.n	8015cd4 <RegionUS915NextChannel+0x60>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8015cb6:	4b62      	ldr	r3, [pc, #392]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	4618      	mov	r0, r3
 8015cbc:	4b61      	ldr	r3, [pc, #388]	@ (8015e44 <RegionUS915NextChannel+0x1d0>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015cc4:	2204      	movs	r2, #4
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	f7fd f840 	bl	8012d4c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8015ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015cda:	2b03      	cmp	r3, #3
 8015cdc:	dd0c      	ble.n	8015cf8 <RegionUS915NextChannel+0x84>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8015cde:	4b58      	ldr	r3, [pc, #352]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	891b      	ldrh	r3, [r3, #8]
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d106      	bne.n	8015cf8 <RegionUS915NextChannel+0x84>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8015cea:	4b56      	ldr	r3, [pc, #344]	@ (8015e44 <RegionUS915NextChannel+0x1d0>)
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	4b54      	ldr	r3, [pc, #336]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8015cf6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	7a5b      	ldrb	r3, [r3, #9]
 8015cfc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015d04:	b2db      	uxtb	r3, r3
 8015d06:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8015d08:	4b4d      	ldr	r3, [pc, #308]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8015e44 <RegionUS915NextChannel+0x1d0>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8015d14:	4b4c      	ldr	r3, [pc, #304]	@ (8015e48 <RegionUS915NextChannel+0x1d4>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8015d1a:	2348      	movs	r3, #72	@ 0x48
 8015d1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	7a9b      	ldrb	r3, [r3, #10]
 8015d32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8015d36:	2301      	movs	r3, #1
 8015d38:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015d3c:	f107 0314 	add.w	r3, r7, #20
 8015d40:	64bb      	str	r3, [r7, #72]	@ 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015d42:	68fa      	ldr	r2, [r7, #12]
 8015d44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015d48:	320c      	adds	r2, #12
 8015d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d4e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	7d1b      	ldrb	r3, [r3, #20]
 8015d56:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	8adb      	ldrh	r3, [r3, #22]
 8015d64:	4619      	mov	r1, r3
 8015d66:	4610      	mov	r0, r2
 8015d68:	f7fe ff14 	bl	8014b94 <GetTimeOnAir>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015d70:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 8015d74:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015d78:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	9301      	str	r3, [sp, #4]
 8015d80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8015d84:	9300      	str	r3, [sp, #0]
 8015d86:	460b      	mov	r3, r1
 8015d88:	6839      	ldr	r1, [r7, #0]
 8015d8a:	f7fd fbca 	bl	8013522 <RegionCommonIdentifyChannels>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015d94:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d14a      	bne.n	8015e32 <RegionUS915NextChannel+0x1be>
    {
        if( nextChanParams->Joined == true )
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	7a5b      	ldrb	r3, [r3, #9]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d00e      	beq.n	8015dc2 <RegionUS915NextChannel+0x14e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015da4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8015da8:	3b01      	subs	r3, #1
 8015daa:	4619      	mov	r1, r3
 8015dac:	2000      	movs	r0, #0
 8015dae:	f001 fd41 	bl	8017834 <randr>
 8015db2:	4603      	mov	r3, r0
 8015db4:	3398      	adds	r3, #152	@ 0x98
 8015db6:	443b      	add	r3, r7
 8015db8:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	701a      	strb	r2, [r3, #0]
 8015dc0:	e02e      	b.n	8015e20 <RegionUS915NextChannel+0x1ac>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d10e      	bne.n	8015dea <RegionUS915NextChannel+0x176>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8015dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8015dd6:	330c      	adds	r3, #12
 8015dd8:	68ba      	ldr	r2, [r7, #8]
 8015dda:	4619      	mov	r1, r3
 8015ddc:	f7fc fcf4 	bl	80127c8 <RegionBaseUSComputeNext125kHzJoinChannel>
 8015de0:	4603      	mov	r3, r0
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	d11c      	bne.n	8015e20 <RegionUS915NextChannel+0x1ac>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015de6:	2303      	movs	r3, #3
 8015de8:	e025      	b.n	8015e36 <RegionUS915NextChannel+0x1c2>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8015dea:	2300      	movs	r3, #0
 8015dec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8015df0:	e004      	b.n	8015dfc <RegionUS915NextChannel+0x188>
                {
                    i++;
 8015df2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015df6:	3301      	adds	r3, #1
 8015df8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8015dfc:	4b10      	ldr	r3, [pc, #64]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	891b      	ldrh	r3, [r3, #8]
 8015e02:	b2da      	uxtb	r2, r3
 8015e04:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e08:	fa42 f303 	asr.w	r3, r2, r3
 8015e0c:	f003 0301 	and.w	r3, r3, #1
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d0ee      	beq.n	8015df2 <RegionUS915NextChannel+0x17e>
                }
                *channel = 64 + i;
 8015e14:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015e18:	3340      	adds	r3, #64	@ 0x40
 8015e1a:	b2da      	uxtb	r2, r3
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8015e20:	4b07      	ldr	r3, [pc, #28]	@ (8015e40 <RegionUS915NextChannel+0x1cc>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	4618      	mov	r0, r3
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	781b      	ldrb	r3, [r3, #0]
 8015e2a:	2248      	movs	r2, #72	@ 0x48
 8015e2c:	4619      	mov	r1, r3
 8015e2e:	f7fc ff2d 	bl	8012c8c <RegionCommonChanDisable>
    }
    return status;
 8015e32:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	3798      	adds	r7, #152	@ 0x98
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	20001228 	.word	0x20001228
 8015e44:	2000122c 	.word	0x2000122c
 8015e48:	20001230 	.word	0x20001230

08015e4c <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b085      	sub	sp, #20
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	4603      	mov	r3, r0
 8015e54:	71fb      	strb	r3, [r7, #7]
 8015e56:	460b      	mov	r3, r1
 8015e58:	71bb      	strb	r3, [r7, #6]
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8015e5e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015e62:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015e66:	4909      	ldr	r1, [pc, #36]	@ (8015e8c <RegionUS915ApplyDrOffset+0x40>)
 8015e68:	0092      	lsls	r2, r2, #2
 8015e6a:	440a      	add	r2, r1
 8015e6c:	4413      	add	r3, r2
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8015e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	da01      	bge.n	8015e7e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8015e7e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3714      	adds	r7, #20
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bc80      	pop	{r7}
 8015e88:	4770      	bx	lr
 8015e8a:	bf00      	nop
 8015e8c:	08021bd4 	.word	0x08021bd4

08015e90 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b082      	sub	sp, #8
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	33f1      	adds	r3, #241	@ 0xf1
 8015e9c:	2210      	movs	r2, #16
 8015e9e:	2100      	movs	r1, #0
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f001 fd19 	bl	80178d8 <memset1>
    ctx->M_n = 0;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	22f0      	movs	r2, #240	@ 0xf0
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f001 fd0f 	bl	80178d8 <memset1>
}
 8015eba:	bf00      	nop
 8015ebc:	3708      	adds	r7, #8
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}

08015ec2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8015ec2:	b580      	push	{r7, lr}
 8015ec4:	b082      	sub	sp, #8
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	6078      	str	r0, [r7, #4]
 8015eca:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	461a      	mov	r2, r3
 8015ed0:	2110      	movs	r1, #16
 8015ed2:	6838      	ldr	r0, [r7, #0]
 8015ed4:	f000 fe60 	bl	8016b98 <lorawan_aes_set_key>
}
 8015ed8:	bf00      	nop
 8015eda:	3708      	adds	r7, #8
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}

08015ee0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b08c      	sub	sp, #48	@ 0x30
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	f000 80a1 	beq.w	801603a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015efe:	f1c3 0310 	rsb	r3, r3, #16
 8015f02:	687a      	ldr	r2, [r7, #4]
 8015f04:	4293      	cmp	r3, r2
 8015f06:	bf28      	it	cs
 8015f08:	4613      	movcs	r3, r2
 8015f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015f18:	4413      	add	r3, r2
 8015f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f1c:	b292      	uxth	r2, r2
 8015f1e:	68b9      	ldr	r1, [r7, #8]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f001 fc9e 	bl	8017862 <memcpy1>
        ctx->M_n += mlen;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8015f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f2e:	441a      	add	r2, r3
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015f3c:	2b0f      	cmp	r3, #15
 8015f3e:	f240 808d 	bls.w	801605c <AES_CMAC_Update+0x17c>
 8015f42:	687a      	ldr	r2, [r7, #4]
 8015f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f46:	429a      	cmp	r2, r3
 8015f48:	f000 8088 	beq.w	801605c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015f50:	e015      	b.n	8015f7e <AES_CMAC_Update+0x9e>
 8015f52:	68fa      	ldr	r2, [r7, #12]
 8015f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f56:	4413      	add	r3, r2
 8015f58:	33f1      	adds	r3, #241	@ 0xf1
 8015f5a:	781a      	ldrb	r2, [r3, #0]
 8015f5c:	68f9      	ldr	r1, [r7, #12]
 8015f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f60:	440b      	add	r3, r1
 8015f62:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	4053      	eors	r3, r2
 8015f6a:	b2d9      	uxtb	r1, r3
 8015f6c:	68fa      	ldr	r2, [r7, #12]
 8015f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f70:	4413      	add	r3, r2
 8015f72:	33f1      	adds	r3, #241	@ 0xf1
 8015f74:	460a      	mov	r2, r1
 8015f76:	701a      	strb	r2, [r3, #0]
 8015f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f7a:	3301      	adds	r3, #1
 8015f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f80:	2b0f      	cmp	r3, #15
 8015f82:	dde6      	ble.n	8015f52 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8015f8a:	f107 0314 	add.w	r3, r7, #20
 8015f8e:	2210      	movs	r2, #16
 8015f90:	4618      	mov	r0, r3
 8015f92:	f001 fc66 	bl	8017862 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8015f96:	68fa      	ldr	r2, [r7, #12]
 8015f98:	f107 0114 	add.w	r1, r7, #20
 8015f9c:	f107 0314 	add.w	r3, r7, #20
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f000 fed7 	bl	8016d54 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	33f1      	adds	r3, #241	@ 0xf1
 8015faa:	f107 0114 	add.w	r1, r7, #20
 8015fae:	2210      	movs	r2, #16
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f001 fc56 	bl	8017862 <memcpy1>

        data += mlen;
 8015fb6:	68ba      	ldr	r2, [r7, #8]
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fba:	4413      	add	r3, r2
 8015fbc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc2:	1ad3      	subs	r3, r2, r3
 8015fc4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8015fc6:	e038      	b.n	801603a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8015fc8:	2300      	movs	r3, #0
 8015fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015fcc:	e013      	b.n	8015ff6 <AES_CMAC_Update+0x116>
 8015fce:	68fa      	ldr	r2, [r7, #12]
 8015fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fd2:	4413      	add	r3, r2
 8015fd4:	33f1      	adds	r3, #241	@ 0xf1
 8015fd6:	781a      	ldrb	r2, [r3, #0]
 8015fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fda:	68b9      	ldr	r1, [r7, #8]
 8015fdc:	440b      	add	r3, r1
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	4053      	eors	r3, r2
 8015fe2:	b2d9      	uxtb	r1, r3
 8015fe4:	68fa      	ldr	r2, [r7, #12]
 8015fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fe8:	4413      	add	r3, r2
 8015fea:	33f1      	adds	r3, #241	@ 0xf1
 8015fec:	460a      	mov	r2, r1
 8015fee:	701a      	strb	r2, [r3, #0]
 8015ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff8:	2b0f      	cmp	r3, #15
 8015ffa:	dde8      	ble.n	8015fce <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8016002:	f107 0314 	add.w	r3, r7, #20
 8016006:	2210      	movs	r2, #16
 8016008:	4618      	mov	r0, r3
 801600a:	f001 fc2a 	bl	8017862 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801600e:	68fa      	ldr	r2, [r7, #12]
 8016010:	f107 0114 	add.w	r1, r7, #20
 8016014:	f107 0314 	add.w	r3, r7, #20
 8016018:	4618      	mov	r0, r3
 801601a:	f000 fe9b 	bl	8016d54 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	33f1      	adds	r3, #241	@ 0xf1
 8016022:	f107 0114 	add.w	r1, r7, #20
 8016026:	2210      	movs	r2, #16
 8016028:	4618      	mov	r0, r3
 801602a:	f001 fc1a 	bl	8017862 <memcpy1>

        data += 16;
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	3310      	adds	r3, #16
 8016032:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	3b10      	subs	r3, #16
 8016038:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2b10      	cmp	r3, #16
 801603e:	d8c3      	bhi.n	8015fc8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8016046:	687a      	ldr	r2, [r7, #4]
 8016048:	b292      	uxth	r2, r2
 801604a:	68b9      	ldr	r1, [r7, #8]
 801604c:	4618      	mov	r0, r3
 801604e:	f001 fc08 	bl	8017862 <memcpy1>
    ctx->M_n = len;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	687a      	ldr	r2, [r7, #4]
 8016056:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 801605a:	e000      	b.n	801605e <AES_CMAC_Update+0x17e>
            return;
 801605c:	bf00      	nop
}
 801605e:	3730      	adds	r7, #48	@ 0x30
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b092      	sub	sp, #72	@ 0x48
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801606e:	f107 031c 	add.w	r3, r7, #28
 8016072:	2210      	movs	r2, #16
 8016074:	2100      	movs	r1, #0
 8016076:	4618      	mov	r0, r3
 8016078:	f001 fc2e 	bl	80178d8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 801607c:	683a      	ldr	r2, [r7, #0]
 801607e:	f107 011c 	add.w	r1, r7, #28
 8016082:	f107 031c 	add.w	r3, r7, #28
 8016086:	4618      	mov	r0, r3
 8016088:	f000 fe64 	bl	8016d54 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801608c:	7f3b      	ldrb	r3, [r7, #28]
 801608e:	b25b      	sxtb	r3, r3
 8016090:	2b00      	cmp	r3, #0
 8016092:	da31      	bge.n	80160f8 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 8016094:	2300      	movs	r3, #0
 8016096:	647b      	str	r3, [r7, #68]	@ 0x44
 8016098:	e01c      	b.n	80160d4 <AES_CMAC_Final+0x70>
 801609a:	f107 021c 	add.w	r2, r7, #28
 801609e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160a0:	4413      	add	r3, r2
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	b25b      	sxtb	r3, r3
 80160a6:	005b      	lsls	r3, r3, #1
 80160a8:	b25a      	sxtb	r2, r3
 80160aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160ac:	3301      	adds	r3, #1
 80160ae:	3348      	adds	r3, #72	@ 0x48
 80160b0:	443b      	add	r3, r7
 80160b2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80160b6:	09db      	lsrs	r3, r3, #7
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	b25b      	sxtb	r3, r3
 80160bc:	4313      	orrs	r3, r2
 80160be:	b25b      	sxtb	r3, r3
 80160c0:	b2d9      	uxtb	r1, r3
 80160c2:	f107 021c 	add.w	r2, r7, #28
 80160c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160c8:	4413      	add	r3, r2
 80160ca:	460a      	mov	r2, r1
 80160cc:	701a      	strb	r2, [r3, #0]
 80160ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160d0:	3301      	adds	r3, #1
 80160d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80160d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160d6:	2b0e      	cmp	r3, #14
 80160d8:	dddf      	ble.n	801609a <AES_CMAC_Final+0x36>
 80160da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80160de:	005b      	lsls	r3, r3, #1
 80160e0:	b2db      	uxtb	r3, r3
 80160e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 80160e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80160ea:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 80160ee:	43db      	mvns	r3, r3
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80160f6:	e028      	b.n	801614a <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 80160f8:	2300      	movs	r3, #0
 80160fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80160fc:	e01c      	b.n	8016138 <AES_CMAC_Final+0xd4>
 80160fe:	f107 021c 	add.w	r2, r7, #28
 8016102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016104:	4413      	add	r3, r2
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	b25b      	sxtb	r3, r3
 801610a:	005b      	lsls	r3, r3, #1
 801610c:	b25a      	sxtb	r2, r3
 801610e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016110:	3301      	adds	r3, #1
 8016112:	3348      	adds	r3, #72	@ 0x48
 8016114:	443b      	add	r3, r7
 8016116:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801611a:	09db      	lsrs	r3, r3, #7
 801611c:	b2db      	uxtb	r3, r3
 801611e:	b25b      	sxtb	r3, r3
 8016120:	4313      	orrs	r3, r2
 8016122:	b25b      	sxtb	r3, r3
 8016124:	b2d9      	uxtb	r1, r3
 8016126:	f107 021c 	add.w	r2, r7, #28
 801612a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801612c:	4413      	add	r3, r2
 801612e:	460a      	mov	r2, r1
 8016130:	701a      	strb	r2, [r3, #0]
 8016132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016134:	3301      	adds	r3, #1
 8016136:	643b      	str	r3, [r7, #64]	@ 0x40
 8016138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801613a:	2b0e      	cmp	r3, #14
 801613c:	dddf      	ble.n	80160fe <AES_CMAC_Final+0x9a>
 801613e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016142:	005b      	lsls	r3, r3, #1
 8016144:	b2db      	uxtb	r3, r3
 8016146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016150:	2b10      	cmp	r3, #16
 8016152:	d11d      	bne.n	8016190 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8016154:	2300      	movs	r3, #0
 8016156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016158:	e016      	b.n	8016188 <AES_CMAC_Final+0x124>
 801615a:	683a      	ldr	r2, [r7, #0]
 801615c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801615e:	4413      	add	r3, r2
 8016160:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8016164:	781a      	ldrb	r2, [r3, #0]
 8016166:	f107 011c 	add.w	r1, r7, #28
 801616a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801616c:	440b      	add	r3, r1
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	4053      	eors	r3, r2
 8016172:	b2d9      	uxtb	r1, r3
 8016174:	683a      	ldr	r2, [r7, #0]
 8016176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016178:	4413      	add	r3, r2
 801617a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 801617e:	460a      	mov	r2, r1
 8016180:	701a      	strb	r2, [r3, #0]
 8016182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016184:	3301      	adds	r3, #1
 8016186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801618a:	2b0f      	cmp	r3, #15
 801618c:	dde5      	ble.n	801615a <AES_CMAC_Final+0xf6>
 801618e:	e098      	b.n	80162c2 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8016190:	7f3b      	ldrb	r3, [r7, #28]
 8016192:	b25b      	sxtb	r3, r3
 8016194:	2b00      	cmp	r3, #0
 8016196:	da31      	bge.n	80161fc <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 8016198:	2300      	movs	r3, #0
 801619a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801619c:	e01c      	b.n	80161d8 <AES_CMAC_Final+0x174>
 801619e:	f107 021c 	add.w	r2, r7, #28
 80161a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161a4:	4413      	add	r3, r2
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	b25b      	sxtb	r3, r3
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	b25a      	sxtb	r2, r3
 80161ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161b0:	3301      	adds	r3, #1
 80161b2:	3348      	adds	r3, #72	@ 0x48
 80161b4:	443b      	add	r3, r7
 80161b6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80161ba:	09db      	lsrs	r3, r3, #7
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	b25b      	sxtb	r3, r3
 80161c0:	4313      	orrs	r3, r2
 80161c2:	b25b      	sxtb	r3, r3
 80161c4:	b2d9      	uxtb	r1, r3
 80161c6:	f107 021c 	add.w	r2, r7, #28
 80161ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161cc:	4413      	add	r3, r2
 80161ce:	460a      	mov	r2, r1
 80161d0:	701a      	strb	r2, [r3, #0]
 80161d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161d4:	3301      	adds	r3, #1
 80161d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80161d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161da:	2b0e      	cmp	r3, #14
 80161dc:	dddf      	ble.n	801619e <AES_CMAC_Final+0x13a>
 80161de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	b2db      	uxtb	r3, r3
 80161e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 80161ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80161ee:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 80161f2:	43db      	mvns	r3, r3
 80161f4:	b2db      	uxtb	r3, r3
 80161f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80161fa:	e028      	b.n	801624e <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 80161fc:	2300      	movs	r3, #0
 80161fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8016200:	e01c      	b.n	801623c <AES_CMAC_Final+0x1d8>
 8016202:	f107 021c 	add.w	r2, r7, #28
 8016206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016208:	4413      	add	r3, r2
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	b25b      	sxtb	r3, r3
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	b25a      	sxtb	r2, r3
 8016212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016214:	3301      	adds	r3, #1
 8016216:	3348      	adds	r3, #72	@ 0x48
 8016218:	443b      	add	r3, r7
 801621a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801621e:	09db      	lsrs	r3, r3, #7
 8016220:	b2db      	uxtb	r3, r3
 8016222:	b25b      	sxtb	r3, r3
 8016224:	4313      	orrs	r3, r2
 8016226:	b25b      	sxtb	r3, r3
 8016228:	b2d9      	uxtb	r1, r3
 801622a:	f107 021c 	add.w	r2, r7, #28
 801622e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016230:	4413      	add	r3, r2
 8016232:	460a      	mov	r2, r1
 8016234:	701a      	strb	r2, [r3, #0]
 8016236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016238:	3301      	adds	r3, #1
 801623a:	637b      	str	r3, [r7, #52]	@ 0x34
 801623c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801623e:	2b0e      	cmp	r3, #14
 8016240:	dddf      	ble.n	8016202 <AES_CMAC_Final+0x19e>
 8016242:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016246:	005b      	lsls	r3, r3, #1
 8016248:	b2db      	uxtb	r3, r3
 801624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016254:	683a      	ldr	r2, [r7, #0]
 8016256:	4413      	add	r3, r2
 8016258:	2280      	movs	r2, #128	@ 0x80
 801625a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 801625e:	e007      	b.n	8016270 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016266:	683a      	ldr	r2, [r7, #0]
 8016268:	4413      	add	r3, r2
 801626a:	2200      	movs	r2, #0
 801626c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016276:	1c5a      	adds	r2, r3, #1
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016284:	2b0f      	cmp	r3, #15
 8016286:	d9eb      	bls.n	8016260 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 8016288:	2300      	movs	r3, #0
 801628a:	633b      	str	r3, [r7, #48]	@ 0x30
 801628c:	e016      	b.n	80162bc <AES_CMAC_Final+0x258>
 801628e:	683a      	ldr	r2, [r7, #0]
 8016290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016292:	4413      	add	r3, r2
 8016294:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8016298:	781a      	ldrb	r2, [r3, #0]
 801629a:	f107 011c 	add.w	r1, r7, #28
 801629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162a0:	440b      	add	r3, r1
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	4053      	eors	r3, r2
 80162a6:	b2d9      	uxtb	r1, r3
 80162a8:	683a      	ldr	r2, [r7, #0]
 80162aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ac:	4413      	add	r3, r2
 80162ae:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80162b2:	460a      	mov	r2, r1
 80162b4:	701a      	strb	r2, [r3, #0]
 80162b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162b8:	3301      	adds	r3, #1
 80162ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80162bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162be:	2b0f      	cmp	r3, #15
 80162c0:	dde5      	ble.n	801628e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 80162c2:	2300      	movs	r3, #0
 80162c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162c6:	e015      	b.n	80162f4 <AES_CMAC_Final+0x290>
 80162c8:	683a      	ldr	r2, [r7, #0]
 80162ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162cc:	4413      	add	r3, r2
 80162ce:	33f1      	adds	r3, #241	@ 0xf1
 80162d0:	781a      	ldrb	r2, [r3, #0]
 80162d2:	6839      	ldr	r1, [r7, #0]
 80162d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d6:	440b      	add	r3, r1
 80162d8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	4053      	eors	r3, r2
 80162e0:	b2d9      	uxtb	r1, r3
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e6:	4413      	add	r3, r2
 80162e8:	33f1      	adds	r3, #241	@ 0xf1
 80162ea:	460a      	mov	r2, r1
 80162ec:	701a      	strb	r2, [r3, #0]
 80162ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162f0:	3301      	adds	r3, #1
 80162f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162f6:	2b0f      	cmp	r3, #15
 80162f8:	dde6      	ble.n	80162c8 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8016300:	f107 030c 	add.w	r3, r7, #12
 8016304:	2210      	movs	r2, #16
 8016306:	4618      	mov	r0, r3
 8016308:	f001 faab 	bl	8017862 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 801630c:	683a      	ldr	r2, [r7, #0]
 801630e:	f107 030c 	add.w	r3, r7, #12
 8016312:	6879      	ldr	r1, [r7, #4]
 8016314:	4618      	mov	r0, r3
 8016316:	f000 fd1d 	bl	8016d54 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801631a:	f107 031c 	add.w	r3, r7, #28
 801631e:	2210      	movs	r2, #16
 8016320:	2100      	movs	r1, #0
 8016322:	4618      	mov	r0, r3
 8016324:	f001 fad8 	bl	80178d8 <memset1>
}
 8016328:	bf00      	nop
 801632a:	3748      	adds	r7, #72	@ 0x48
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8016330:	b480      	push	{r7}
 8016332:	b083      	sub	sp, #12
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	781a      	ldrb	r2, [r3, #0]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	3301      	adds	r3, #1
 8016346:	683a      	ldr	r2, [r7, #0]
 8016348:	7852      	ldrb	r2, [r2, #1]
 801634a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	3302      	adds	r3, #2
 8016350:	683a      	ldr	r2, [r7, #0]
 8016352:	7892      	ldrb	r2, [r2, #2]
 8016354:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	3303      	adds	r3, #3
 801635a:	683a      	ldr	r2, [r7, #0]
 801635c:	78d2      	ldrb	r2, [r2, #3]
 801635e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	3304      	adds	r3, #4
 8016364:	683a      	ldr	r2, [r7, #0]
 8016366:	7912      	ldrb	r2, [r2, #4]
 8016368:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	3305      	adds	r3, #5
 801636e:	683a      	ldr	r2, [r7, #0]
 8016370:	7952      	ldrb	r2, [r2, #5]
 8016372:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	3306      	adds	r3, #6
 8016378:	683a      	ldr	r2, [r7, #0]
 801637a:	7992      	ldrb	r2, [r2, #6]
 801637c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	3307      	adds	r3, #7
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	79d2      	ldrb	r2, [r2, #7]
 8016386:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	3308      	adds	r3, #8
 801638c:	683a      	ldr	r2, [r7, #0]
 801638e:	7a12      	ldrb	r2, [r2, #8]
 8016390:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	3309      	adds	r3, #9
 8016396:	683a      	ldr	r2, [r7, #0]
 8016398:	7a52      	ldrb	r2, [r2, #9]
 801639a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	330a      	adds	r3, #10
 80163a0:	683a      	ldr	r2, [r7, #0]
 80163a2:	7a92      	ldrb	r2, [r2, #10]
 80163a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	330b      	adds	r3, #11
 80163aa:	683a      	ldr	r2, [r7, #0]
 80163ac:	7ad2      	ldrb	r2, [r2, #11]
 80163ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	330c      	adds	r3, #12
 80163b4:	683a      	ldr	r2, [r7, #0]
 80163b6:	7b12      	ldrb	r2, [r2, #12]
 80163b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	330d      	adds	r3, #13
 80163be:	683a      	ldr	r2, [r7, #0]
 80163c0:	7b52      	ldrb	r2, [r2, #13]
 80163c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	330e      	adds	r3, #14
 80163c8:	683a      	ldr	r2, [r7, #0]
 80163ca:	7b92      	ldrb	r2, [r2, #14]
 80163cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	330f      	adds	r3, #15
 80163d2:	683a      	ldr	r2, [r7, #0]
 80163d4:	7bd2      	ldrb	r2, [r2, #15]
 80163d6:	701a      	strb	r2, [r3, #0]
#endif
}
 80163d8:	bf00      	nop
 80163da:	370c      	adds	r7, #12
 80163dc:	46bd      	mov	sp, r7
 80163de:	bc80      	pop	{r7}
 80163e0:	4770      	bx	lr

080163e2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 80163e2:	b480      	push	{r7}
 80163e4:	b085      	sub	sp, #20
 80163e6:	af00      	add	r7, sp, #0
 80163e8:	60f8      	str	r0, [r7, #12]
 80163ea:	60b9      	str	r1, [r7, #8]
 80163ec:	4613      	mov	r3, r2
 80163ee:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 80163f0:	e007      	b.n	8016402 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80163f2:	68ba      	ldr	r2, [r7, #8]
 80163f4:	1c53      	adds	r3, r2, #1
 80163f6:	60bb      	str	r3, [r7, #8]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	1c59      	adds	r1, r3, #1
 80163fc:	60f9      	str	r1, [r7, #12]
 80163fe:	7812      	ldrb	r2, [r2, #0]
 8016400:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8016402:	79fb      	ldrb	r3, [r7, #7]
 8016404:	1e5a      	subs	r2, r3, #1
 8016406:	71fa      	strb	r2, [r7, #7]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d1f2      	bne.n	80163f2 <copy_block_nn+0x10>
}
 801640c:	bf00      	nop
 801640e:	bf00      	nop
 8016410:	3714      	adds	r7, #20
 8016412:	46bd      	mov	sp, r7
 8016414:	bc80      	pop	{r7}
 8016416:	4770      	bx	lr

08016418 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8016418:	b480      	push	{r7}
 801641a:	b083      	sub	sp, #12
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	781a      	ldrb	r2, [r3, #0]
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	781b      	ldrb	r3, [r3, #0]
 801642a:	4053      	eors	r3, r2
 801642c:	b2da      	uxtb	r2, r3
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	3301      	adds	r3, #1
 8016436:	7819      	ldrb	r1, [r3, #0]
 8016438:	683b      	ldr	r3, [r7, #0]
 801643a:	3301      	adds	r3, #1
 801643c:	781a      	ldrb	r2, [r3, #0]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	3301      	adds	r3, #1
 8016442:	404a      	eors	r2, r1
 8016444:	b2d2      	uxtb	r2, r2
 8016446:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	3302      	adds	r3, #2
 801644c:	7819      	ldrb	r1, [r3, #0]
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	3302      	adds	r3, #2
 8016452:	781a      	ldrb	r2, [r3, #0]
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	3302      	adds	r3, #2
 8016458:	404a      	eors	r2, r1
 801645a:	b2d2      	uxtb	r2, r2
 801645c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	3303      	adds	r3, #3
 8016462:	7819      	ldrb	r1, [r3, #0]
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	3303      	adds	r3, #3
 8016468:	781a      	ldrb	r2, [r3, #0]
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	3303      	adds	r3, #3
 801646e:	404a      	eors	r2, r1
 8016470:	b2d2      	uxtb	r2, r2
 8016472:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	3304      	adds	r3, #4
 8016478:	7819      	ldrb	r1, [r3, #0]
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	3304      	adds	r3, #4
 801647e:	781a      	ldrb	r2, [r3, #0]
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	3304      	adds	r3, #4
 8016484:	404a      	eors	r2, r1
 8016486:	b2d2      	uxtb	r2, r2
 8016488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	3305      	adds	r3, #5
 801648e:	7819      	ldrb	r1, [r3, #0]
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	3305      	adds	r3, #5
 8016494:	781a      	ldrb	r2, [r3, #0]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	3305      	adds	r3, #5
 801649a:	404a      	eors	r2, r1
 801649c:	b2d2      	uxtb	r2, r2
 801649e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	3306      	adds	r3, #6
 80164a4:	7819      	ldrb	r1, [r3, #0]
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	3306      	adds	r3, #6
 80164aa:	781a      	ldrb	r2, [r3, #0]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	3306      	adds	r3, #6
 80164b0:	404a      	eors	r2, r1
 80164b2:	b2d2      	uxtb	r2, r2
 80164b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	3307      	adds	r3, #7
 80164ba:	7819      	ldrb	r1, [r3, #0]
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	3307      	adds	r3, #7
 80164c0:	781a      	ldrb	r2, [r3, #0]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	3307      	adds	r3, #7
 80164c6:	404a      	eors	r2, r1
 80164c8:	b2d2      	uxtb	r2, r2
 80164ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	3308      	adds	r3, #8
 80164d0:	7819      	ldrb	r1, [r3, #0]
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	3308      	adds	r3, #8
 80164d6:	781a      	ldrb	r2, [r3, #0]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	3308      	adds	r3, #8
 80164dc:	404a      	eors	r2, r1
 80164de:	b2d2      	uxtb	r2, r2
 80164e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	3309      	adds	r3, #9
 80164e6:	7819      	ldrb	r1, [r3, #0]
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	3309      	adds	r3, #9
 80164ec:	781a      	ldrb	r2, [r3, #0]
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	3309      	adds	r3, #9
 80164f2:	404a      	eors	r2, r1
 80164f4:	b2d2      	uxtb	r2, r2
 80164f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	330a      	adds	r3, #10
 80164fc:	7819      	ldrb	r1, [r3, #0]
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	330a      	adds	r3, #10
 8016502:	781a      	ldrb	r2, [r3, #0]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	330a      	adds	r3, #10
 8016508:	404a      	eors	r2, r1
 801650a:	b2d2      	uxtb	r2, r2
 801650c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	330b      	adds	r3, #11
 8016512:	7819      	ldrb	r1, [r3, #0]
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	330b      	adds	r3, #11
 8016518:	781a      	ldrb	r2, [r3, #0]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	330b      	adds	r3, #11
 801651e:	404a      	eors	r2, r1
 8016520:	b2d2      	uxtb	r2, r2
 8016522:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	330c      	adds	r3, #12
 8016528:	7819      	ldrb	r1, [r3, #0]
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	330c      	adds	r3, #12
 801652e:	781a      	ldrb	r2, [r3, #0]
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	330c      	adds	r3, #12
 8016534:	404a      	eors	r2, r1
 8016536:	b2d2      	uxtb	r2, r2
 8016538:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	330d      	adds	r3, #13
 801653e:	7819      	ldrb	r1, [r3, #0]
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	330d      	adds	r3, #13
 8016544:	781a      	ldrb	r2, [r3, #0]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	330d      	adds	r3, #13
 801654a:	404a      	eors	r2, r1
 801654c:	b2d2      	uxtb	r2, r2
 801654e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	330e      	adds	r3, #14
 8016554:	7819      	ldrb	r1, [r3, #0]
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	330e      	adds	r3, #14
 801655a:	781a      	ldrb	r2, [r3, #0]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	330e      	adds	r3, #14
 8016560:	404a      	eors	r2, r1
 8016562:	b2d2      	uxtb	r2, r2
 8016564:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	330f      	adds	r3, #15
 801656a:	7819      	ldrb	r1, [r3, #0]
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	330f      	adds	r3, #15
 8016570:	781a      	ldrb	r2, [r3, #0]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	330f      	adds	r3, #15
 8016576:	404a      	eors	r2, r1
 8016578:	b2d2      	uxtb	r2, r2
 801657a:	701a      	strb	r2, [r3, #0]
#endif
}
 801657c:	bf00      	nop
 801657e:	370c      	adds	r7, #12
 8016580:	46bd      	mov	sp, r7
 8016582:	bc80      	pop	{r7}
 8016584:	4770      	bx	lr

08016586 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8016586:	b480      	push	{r7}
 8016588:	b085      	sub	sp, #20
 801658a:	af00      	add	r7, sp, #0
 801658c:	60f8      	str	r0, [r7, #12]
 801658e:	60b9      	str	r1, [r7, #8]
 8016590:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	781a      	ldrb	r2, [r3, #0]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	4053      	eors	r3, r2
 801659c:	b2da      	uxtb	r2, r3
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80165a2:	68bb      	ldr	r3, [r7, #8]
 80165a4:	3301      	adds	r3, #1
 80165a6:	7819      	ldrb	r1, [r3, #0]
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	3301      	adds	r3, #1
 80165ac:	781a      	ldrb	r2, [r3, #0]
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	3301      	adds	r3, #1
 80165b2:	404a      	eors	r2, r1
 80165b4:	b2d2      	uxtb	r2, r2
 80165b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	3302      	adds	r3, #2
 80165bc:	7819      	ldrb	r1, [r3, #0]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	3302      	adds	r3, #2
 80165c2:	781a      	ldrb	r2, [r3, #0]
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	3302      	adds	r3, #2
 80165c8:	404a      	eors	r2, r1
 80165ca:	b2d2      	uxtb	r2, r2
 80165cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	3303      	adds	r3, #3
 80165d2:	7819      	ldrb	r1, [r3, #0]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	3303      	adds	r3, #3
 80165d8:	781a      	ldrb	r2, [r3, #0]
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	3303      	adds	r3, #3
 80165de:	404a      	eors	r2, r1
 80165e0:	b2d2      	uxtb	r2, r2
 80165e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	3304      	adds	r3, #4
 80165e8:	7819      	ldrb	r1, [r3, #0]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	3304      	adds	r3, #4
 80165ee:	781a      	ldrb	r2, [r3, #0]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	3304      	adds	r3, #4
 80165f4:	404a      	eors	r2, r1
 80165f6:	b2d2      	uxtb	r2, r2
 80165f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	3305      	adds	r3, #5
 80165fe:	7819      	ldrb	r1, [r3, #0]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	3305      	adds	r3, #5
 8016604:	781a      	ldrb	r2, [r3, #0]
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	3305      	adds	r3, #5
 801660a:	404a      	eors	r2, r1
 801660c:	b2d2      	uxtb	r2, r2
 801660e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	3306      	adds	r3, #6
 8016614:	7819      	ldrb	r1, [r3, #0]
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	3306      	adds	r3, #6
 801661a:	781a      	ldrb	r2, [r3, #0]
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	3306      	adds	r3, #6
 8016620:	404a      	eors	r2, r1
 8016622:	b2d2      	uxtb	r2, r2
 8016624:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	3307      	adds	r3, #7
 801662a:	7819      	ldrb	r1, [r3, #0]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	3307      	adds	r3, #7
 8016630:	781a      	ldrb	r2, [r3, #0]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	3307      	adds	r3, #7
 8016636:	404a      	eors	r2, r1
 8016638:	b2d2      	uxtb	r2, r2
 801663a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	3308      	adds	r3, #8
 8016640:	7819      	ldrb	r1, [r3, #0]
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	3308      	adds	r3, #8
 8016646:	781a      	ldrb	r2, [r3, #0]
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	3308      	adds	r3, #8
 801664c:	404a      	eors	r2, r1
 801664e:	b2d2      	uxtb	r2, r2
 8016650:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	3309      	adds	r3, #9
 8016656:	7819      	ldrb	r1, [r3, #0]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	3309      	adds	r3, #9
 801665c:	781a      	ldrb	r2, [r3, #0]
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	3309      	adds	r3, #9
 8016662:	404a      	eors	r2, r1
 8016664:	b2d2      	uxtb	r2, r2
 8016666:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	330a      	adds	r3, #10
 801666c:	7819      	ldrb	r1, [r3, #0]
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	330a      	adds	r3, #10
 8016672:	781a      	ldrb	r2, [r3, #0]
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	330a      	adds	r3, #10
 8016678:	404a      	eors	r2, r1
 801667a:	b2d2      	uxtb	r2, r2
 801667c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	330b      	adds	r3, #11
 8016682:	7819      	ldrb	r1, [r3, #0]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	330b      	adds	r3, #11
 8016688:	781a      	ldrb	r2, [r3, #0]
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	330b      	adds	r3, #11
 801668e:	404a      	eors	r2, r1
 8016690:	b2d2      	uxtb	r2, r2
 8016692:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	330c      	adds	r3, #12
 8016698:	7819      	ldrb	r1, [r3, #0]
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	330c      	adds	r3, #12
 801669e:	781a      	ldrb	r2, [r3, #0]
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	330c      	adds	r3, #12
 80166a4:	404a      	eors	r2, r1
 80166a6:	b2d2      	uxtb	r2, r2
 80166a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	330d      	adds	r3, #13
 80166ae:	7819      	ldrb	r1, [r3, #0]
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	330d      	adds	r3, #13
 80166b4:	781a      	ldrb	r2, [r3, #0]
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	330d      	adds	r3, #13
 80166ba:	404a      	eors	r2, r1
 80166bc:	b2d2      	uxtb	r2, r2
 80166be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	330e      	adds	r3, #14
 80166c4:	7819      	ldrb	r1, [r3, #0]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	330e      	adds	r3, #14
 80166ca:	781a      	ldrb	r2, [r3, #0]
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	330e      	adds	r3, #14
 80166d0:	404a      	eors	r2, r1
 80166d2:	b2d2      	uxtb	r2, r2
 80166d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	330f      	adds	r3, #15
 80166da:	7819      	ldrb	r1, [r3, #0]
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	330f      	adds	r3, #15
 80166e0:	781a      	ldrb	r2, [r3, #0]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	330f      	adds	r3, #15
 80166e6:	404a      	eors	r2, r1
 80166e8:	b2d2      	uxtb	r2, r2
 80166ea:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80166ec:	bf00      	nop
 80166ee:	3714      	adds	r7, #20
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bc80      	pop	{r7}
 80166f4:	4770      	bx	lr

080166f6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b082      	sub	sp, #8
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
 80166fe:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8016700:	6839      	ldr	r1, [r7, #0]
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f7ff fe88 	bl	8016418 <xor_block>
}
 8016708:	bf00      	nop
 801670a:	3708      	adds	r7, #8
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8016710:	b480      	push	{r7}
 8016712:	b085      	sub	sp, #20
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	461a      	mov	r2, r3
 801671e:	4b48      	ldr	r3, [pc, #288]	@ (8016840 <shift_sub_rows+0x130>)
 8016720:	5c9a      	ldrb	r2, [r3, r2]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	701a      	strb	r2, [r3, #0]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	3304      	adds	r3, #4
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	4619      	mov	r1, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	3304      	adds	r3, #4
 8016732:	4a43      	ldr	r2, [pc, #268]	@ (8016840 <shift_sub_rows+0x130>)
 8016734:	5c52      	ldrb	r2, [r2, r1]
 8016736:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	3308      	adds	r3, #8
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	4619      	mov	r1, r3
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	3308      	adds	r3, #8
 8016744:	4a3e      	ldr	r2, [pc, #248]	@ (8016840 <shift_sub_rows+0x130>)
 8016746:	5c52      	ldrb	r2, [r2, r1]
 8016748:	701a      	strb	r2, [r3, #0]
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	330c      	adds	r3, #12
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	4619      	mov	r1, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	330c      	adds	r3, #12
 8016756:	4a3a      	ldr	r2, [pc, #232]	@ (8016840 <shift_sub_rows+0x130>)
 8016758:	5c52      	ldrb	r2, [r2, r1]
 801675a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	785b      	ldrb	r3, [r3, #1]
 8016760:	73fb      	strb	r3, [r7, #15]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	3305      	adds	r3, #5
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	4619      	mov	r1, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	3301      	adds	r3, #1
 801676e:	4a34      	ldr	r2, [pc, #208]	@ (8016840 <shift_sub_rows+0x130>)
 8016770:	5c52      	ldrb	r2, [r2, r1]
 8016772:	701a      	strb	r2, [r3, #0]
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	3309      	adds	r3, #9
 8016778:	781b      	ldrb	r3, [r3, #0]
 801677a:	4619      	mov	r1, r3
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	3305      	adds	r3, #5
 8016780:	4a2f      	ldr	r2, [pc, #188]	@ (8016840 <shift_sub_rows+0x130>)
 8016782:	5c52      	ldrb	r2, [r2, r1]
 8016784:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	330d      	adds	r3, #13
 801678a:	781b      	ldrb	r3, [r3, #0]
 801678c:	4619      	mov	r1, r3
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	3309      	adds	r3, #9
 8016792:	4a2b      	ldr	r2, [pc, #172]	@ (8016840 <shift_sub_rows+0x130>)
 8016794:	5c52      	ldrb	r2, [r2, r1]
 8016796:	701a      	strb	r2, [r3, #0]
 8016798:	7bfa      	ldrb	r2, [r7, #15]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	330d      	adds	r3, #13
 801679e:	4928      	ldr	r1, [pc, #160]	@ (8016840 <shift_sub_rows+0x130>)
 80167a0:	5c8a      	ldrb	r2, [r1, r2]
 80167a2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	789b      	ldrb	r3, [r3, #2]
 80167a8:	73fb      	strb	r3, [r7, #15]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	330a      	adds	r3, #10
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	4619      	mov	r1, r3
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	3302      	adds	r3, #2
 80167b6:	4a22      	ldr	r2, [pc, #136]	@ (8016840 <shift_sub_rows+0x130>)
 80167b8:	5c52      	ldrb	r2, [r2, r1]
 80167ba:	701a      	strb	r2, [r3, #0]
 80167bc:	7bfa      	ldrb	r2, [r7, #15]
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	330a      	adds	r3, #10
 80167c2:	491f      	ldr	r1, [pc, #124]	@ (8016840 <shift_sub_rows+0x130>)
 80167c4:	5c8a      	ldrb	r2, [r1, r2]
 80167c6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	799b      	ldrb	r3, [r3, #6]
 80167cc:	73fb      	strb	r3, [r7, #15]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	330e      	adds	r3, #14
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	4619      	mov	r1, r3
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	3306      	adds	r3, #6
 80167da:	4a19      	ldr	r2, [pc, #100]	@ (8016840 <shift_sub_rows+0x130>)
 80167dc:	5c52      	ldrb	r2, [r2, r1]
 80167de:	701a      	strb	r2, [r3, #0]
 80167e0:	7bfa      	ldrb	r2, [r7, #15]
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	330e      	adds	r3, #14
 80167e6:	4916      	ldr	r1, [pc, #88]	@ (8016840 <shift_sub_rows+0x130>)
 80167e8:	5c8a      	ldrb	r2, [r1, r2]
 80167ea:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	7bdb      	ldrb	r3, [r3, #15]
 80167f0:	73fb      	strb	r3, [r7, #15]
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	330b      	adds	r3, #11
 80167f6:	781b      	ldrb	r3, [r3, #0]
 80167f8:	4619      	mov	r1, r3
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	330f      	adds	r3, #15
 80167fe:	4a10      	ldr	r2, [pc, #64]	@ (8016840 <shift_sub_rows+0x130>)
 8016800:	5c52      	ldrb	r2, [r2, r1]
 8016802:	701a      	strb	r2, [r3, #0]
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	3307      	adds	r3, #7
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	4619      	mov	r1, r3
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	330b      	adds	r3, #11
 8016810:	4a0b      	ldr	r2, [pc, #44]	@ (8016840 <shift_sub_rows+0x130>)
 8016812:	5c52      	ldrb	r2, [r2, r1]
 8016814:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	3303      	adds	r3, #3
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	4619      	mov	r1, r3
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	3307      	adds	r3, #7
 8016822:	4a07      	ldr	r2, [pc, #28]	@ (8016840 <shift_sub_rows+0x130>)
 8016824:	5c52      	ldrb	r2, [r2, r1]
 8016826:	701a      	strb	r2, [r3, #0]
 8016828:	7bfa      	ldrb	r2, [r7, #15]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	3303      	adds	r3, #3
 801682e:	4904      	ldr	r1, [pc, #16]	@ (8016840 <shift_sub_rows+0x130>)
 8016830:	5c8a      	ldrb	r2, [r1, r2]
 8016832:	701a      	strb	r2, [r3, #0]
}
 8016834:	bf00      	nop
 8016836:	3714      	adds	r7, #20
 8016838:	46bd      	mov	sp, r7
 801683a:	bc80      	pop	{r7}
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	08021c08 	.word	0x08021c08

08016844 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8016844:	b580      	push	{r7, lr}
 8016846:	b086      	sub	sp, #24
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 801684c:	f107 0308 	add.w	r3, r7, #8
 8016850:	6879      	ldr	r1, [r7, #4]
 8016852:	4618      	mov	r0, r3
 8016854:	f7ff fd6c 	bl	8016330 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8016858:	7a3b      	ldrb	r3, [r7, #8]
 801685a:	461a      	mov	r2, r3
 801685c:	4b9a      	ldr	r3, [pc, #616]	@ (8016ac8 <mix_sub_columns+0x284>)
 801685e:	5c9a      	ldrb	r2, [r3, r2]
 8016860:	7b7b      	ldrb	r3, [r7, #13]
 8016862:	4619      	mov	r1, r3
 8016864:	4b99      	ldr	r3, [pc, #612]	@ (8016acc <mix_sub_columns+0x288>)
 8016866:	5c5b      	ldrb	r3, [r3, r1]
 8016868:	4053      	eors	r3, r2
 801686a:	b2da      	uxtb	r2, r3
 801686c:	7cbb      	ldrb	r3, [r7, #18]
 801686e:	4619      	mov	r1, r3
 8016870:	4b97      	ldr	r3, [pc, #604]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016872:	5c5b      	ldrb	r3, [r3, r1]
 8016874:	4053      	eors	r3, r2
 8016876:	b2da      	uxtb	r2, r3
 8016878:	7dfb      	ldrb	r3, [r7, #23]
 801687a:	4619      	mov	r1, r3
 801687c:	4b94      	ldr	r3, [pc, #592]	@ (8016ad0 <mix_sub_columns+0x28c>)
 801687e:	5c5b      	ldrb	r3, [r3, r1]
 8016880:	4053      	eors	r3, r2
 8016882:	b2da      	uxtb	r2, r3
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8016888:	7a3b      	ldrb	r3, [r7, #8]
 801688a:	461a      	mov	r2, r3
 801688c:	4b90      	ldr	r3, [pc, #576]	@ (8016ad0 <mix_sub_columns+0x28c>)
 801688e:	5c9a      	ldrb	r2, [r3, r2]
 8016890:	7b7b      	ldrb	r3, [r7, #13]
 8016892:	4619      	mov	r1, r3
 8016894:	4b8c      	ldr	r3, [pc, #560]	@ (8016ac8 <mix_sub_columns+0x284>)
 8016896:	5c5b      	ldrb	r3, [r3, r1]
 8016898:	4053      	eors	r3, r2
 801689a:	b2da      	uxtb	r2, r3
 801689c:	7cbb      	ldrb	r3, [r7, #18]
 801689e:	4619      	mov	r1, r3
 80168a0:	4b8a      	ldr	r3, [pc, #552]	@ (8016acc <mix_sub_columns+0x288>)
 80168a2:	5c5b      	ldrb	r3, [r3, r1]
 80168a4:	4053      	eors	r3, r2
 80168a6:	b2d9      	uxtb	r1, r3
 80168a8:	7dfb      	ldrb	r3, [r7, #23]
 80168aa:	461a      	mov	r2, r3
 80168ac:	4b88      	ldr	r3, [pc, #544]	@ (8016ad0 <mix_sub_columns+0x28c>)
 80168ae:	5c9a      	ldrb	r2, [r3, r2]
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	3301      	adds	r3, #1
 80168b4:	404a      	eors	r2, r1
 80168b6:	b2d2      	uxtb	r2, r2
 80168b8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80168ba:	7a3b      	ldrb	r3, [r7, #8]
 80168bc:	461a      	mov	r2, r3
 80168be:	4b84      	ldr	r3, [pc, #528]	@ (8016ad0 <mix_sub_columns+0x28c>)
 80168c0:	5c9a      	ldrb	r2, [r3, r2]
 80168c2:	7b7b      	ldrb	r3, [r7, #13]
 80168c4:	4619      	mov	r1, r3
 80168c6:	4b82      	ldr	r3, [pc, #520]	@ (8016ad0 <mix_sub_columns+0x28c>)
 80168c8:	5c5b      	ldrb	r3, [r3, r1]
 80168ca:	4053      	eors	r3, r2
 80168cc:	b2da      	uxtb	r2, r3
 80168ce:	7cbb      	ldrb	r3, [r7, #18]
 80168d0:	4619      	mov	r1, r3
 80168d2:	4b7d      	ldr	r3, [pc, #500]	@ (8016ac8 <mix_sub_columns+0x284>)
 80168d4:	5c5b      	ldrb	r3, [r3, r1]
 80168d6:	4053      	eors	r3, r2
 80168d8:	b2d9      	uxtb	r1, r3
 80168da:	7dfb      	ldrb	r3, [r7, #23]
 80168dc:	461a      	mov	r2, r3
 80168de:	4b7b      	ldr	r3, [pc, #492]	@ (8016acc <mix_sub_columns+0x288>)
 80168e0:	5c9a      	ldrb	r2, [r3, r2]
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	3302      	adds	r3, #2
 80168e6:	404a      	eors	r2, r1
 80168e8:	b2d2      	uxtb	r2, r2
 80168ea:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80168ec:	7a3b      	ldrb	r3, [r7, #8]
 80168ee:	461a      	mov	r2, r3
 80168f0:	4b76      	ldr	r3, [pc, #472]	@ (8016acc <mix_sub_columns+0x288>)
 80168f2:	5c9a      	ldrb	r2, [r3, r2]
 80168f4:	7b7b      	ldrb	r3, [r7, #13]
 80168f6:	4619      	mov	r1, r3
 80168f8:	4b75      	ldr	r3, [pc, #468]	@ (8016ad0 <mix_sub_columns+0x28c>)
 80168fa:	5c5b      	ldrb	r3, [r3, r1]
 80168fc:	4053      	eors	r3, r2
 80168fe:	b2da      	uxtb	r2, r3
 8016900:	7cbb      	ldrb	r3, [r7, #18]
 8016902:	4619      	mov	r1, r3
 8016904:	4b72      	ldr	r3, [pc, #456]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016906:	5c5b      	ldrb	r3, [r3, r1]
 8016908:	4053      	eors	r3, r2
 801690a:	b2d9      	uxtb	r1, r3
 801690c:	7dfb      	ldrb	r3, [r7, #23]
 801690e:	461a      	mov	r2, r3
 8016910:	4b6d      	ldr	r3, [pc, #436]	@ (8016ac8 <mix_sub_columns+0x284>)
 8016912:	5c9a      	ldrb	r2, [r3, r2]
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	3303      	adds	r3, #3
 8016918:	404a      	eors	r2, r1
 801691a:	b2d2      	uxtb	r2, r2
 801691c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801691e:	7b3b      	ldrb	r3, [r7, #12]
 8016920:	461a      	mov	r2, r3
 8016922:	4b69      	ldr	r3, [pc, #420]	@ (8016ac8 <mix_sub_columns+0x284>)
 8016924:	5c9a      	ldrb	r2, [r3, r2]
 8016926:	7c7b      	ldrb	r3, [r7, #17]
 8016928:	4619      	mov	r1, r3
 801692a:	4b68      	ldr	r3, [pc, #416]	@ (8016acc <mix_sub_columns+0x288>)
 801692c:	5c5b      	ldrb	r3, [r3, r1]
 801692e:	4053      	eors	r3, r2
 8016930:	b2da      	uxtb	r2, r3
 8016932:	7dbb      	ldrb	r3, [r7, #22]
 8016934:	4619      	mov	r1, r3
 8016936:	4b66      	ldr	r3, [pc, #408]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016938:	5c5b      	ldrb	r3, [r3, r1]
 801693a:	4053      	eors	r3, r2
 801693c:	b2d9      	uxtb	r1, r3
 801693e:	7afb      	ldrb	r3, [r7, #11]
 8016940:	461a      	mov	r2, r3
 8016942:	4b63      	ldr	r3, [pc, #396]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016944:	5c9a      	ldrb	r2, [r3, r2]
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	3304      	adds	r3, #4
 801694a:	404a      	eors	r2, r1
 801694c:	b2d2      	uxtb	r2, r2
 801694e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8016950:	7b3b      	ldrb	r3, [r7, #12]
 8016952:	461a      	mov	r2, r3
 8016954:	4b5e      	ldr	r3, [pc, #376]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016956:	5c9a      	ldrb	r2, [r3, r2]
 8016958:	7c7b      	ldrb	r3, [r7, #17]
 801695a:	4619      	mov	r1, r3
 801695c:	4b5a      	ldr	r3, [pc, #360]	@ (8016ac8 <mix_sub_columns+0x284>)
 801695e:	5c5b      	ldrb	r3, [r3, r1]
 8016960:	4053      	eors	r3, r2
 8016962:	b2da      	uxtb	r2, r3
 8016964:	7dbb      	ldrb	r3, [r7, #22]
 8016966:	4619      	mov	r1, r3
 8016968:	4b58      	ldr	r3, [pc, #352]	@ (8016acc <mix_sub_columns+0x288>)
 801696a:	5c5b      	ldrb	r3, [r3, r1]
 801696c:	4053      	eors	r3, r2
 801696e:	b2d9      	uxtb	r1, r3
 8016970:	7afb      	ldrb	r3, [r7, #11]
 8016972:	461a      	mov	r2, r3
 8016974:	4b56      	ldr	r3, [pc, #344]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016976:	5c9a      	ldrb	r2, [r3, r2]
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	3305      	adds	r3, #5
 801697c:	404a      	eors	r2, r1
 801697e:	b2d2      	uxtb	r2, r2
 8016980:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8016982:	7b3b      	ldrb	r3, [r7, #12]
 8016984:	461a      	mov	r2, r3
 8016986:	4b52      	ldr	r3, [pc, #328]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016988:	5c9a      	ldrb	r2, [r3, r2]
 801698a:	7c7b      	ldrb	r3, [r7, #17]
 801698c:	4619      	mov	r1, r3
 801698e:	4b50      	ldr	r3, [pc, #320]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016990:	5c5b      	ldrb	r3, [r3, r1]
 8016992:	4053      	eors	r3, r2
 8016994:	b2da      	uxtb	r2, r3
 8016996:	7dbb      	ldrb	r3, [r7, #22]
 8016998:	4619      	mov	r1, r3
 801699a:	4b4b      	ldr	r3, [pc, #300]	@ (8016ac8 <mix_sub_columns+0x284>)
 801699c:	5c5b      	ldrb	r3, [r3, r1]
 801699e:	4053      	eors	r3, r2
 80169a0:	b2d9      	uxtb	r1, r3
 80169a2:	7afb      	ldrb	r3, [r7, #11]
 80169a4:	461a      	mov	r2, r3
 80169a6:	4b49      	ldr	r3, [pc, #292]	@ (8016acc <mix_sub_columns+0x288>)
 80169a8:	5c9a      	ldrb	r2, [r3, r2]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	3306      	adds	r3, #6
 80169ae:	404a      	eors	r2, r1
 80169b0:	b2d2      	uxtb	r2, r2
 80169b2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80169b4:	7b3b      	ldrb	r3, [r7, #12]
 80169b6:	461a      	mov	r2, r3
 80169b8:	4b44      	ldr	r3, [pc, #272]	@ (8016acc <mix_sub_columns+0x288>)
 80169ba:	5c9a      	ldrb	r2, [r3, r2]
 80169bc:	7c7b      	ldrb	r3, [r7, #17]
 80169be:	4619      	mov	r1, r3
 80169c0:	4b43      	ldr	r3, [pc, #268]	@ (8016ad0 <mix_sub_columns+0x28c>)
 80169c2:	5c5b      	ldrb	r3, [r3, r1]
 80169c4:	4053      	eors	r3, r2
 80169c6:	b2da      	uxtb	r2, r3
 80169c8:	7dbb      	ldrb	r3, [r7, #22]
 80169ca:	4619      	mov	r1, r3
 80169cc:	4b40      	ldr	r3, [pc, #256]	@ (8016ad0 <mix_sub_columns+0x28c>)
 80169ce:	5c5b      	ldrb	r3, [r3, r1]
 80169d0:	4053      	eors	r3, r2
 80169d2:	b2d9      	uxtb	r1, r3
 80169d4:	7afb      	ldrb	r3, [r7, #11]
 80169d6:	461a      	mov	r2, r3
 80169d8:	4b3b      	ldr	r3, [pc, #236]	@ (8016ac8 <mix_sub_columns+0x284>)
 80169da:	5c9a      	ldrb	r2, [r3, r2]
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	3307      	adds	r3, #7
 80169e0:	404a      	eors	r2, r1
 80169e2:	b2d2      	uxtb	r2, r2
 80169e4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80169e6:	7c3b      	ldrb	r3, [r7, #16]
 80169e8:	461a      	mov	r2, r3
 80169ea:	4b37      	ldr	r3, [pc, #220]	@ (8016ac8 <mix_sub_columns+0x284>)
 80169ec:	5c9a      	ldrb	r2, [r3, r2]
 80169ee:	7d7b      	ldrb	r3, [r7, #21]
 80169f0:	4619      	mov	r1, r3
 80169f2:	4b36      	ldr	r3, [pc, #216]	@ (8016acc <mix_sub_columns+0x288>)
 80169f4:	5c5b      	ldrb	r3, [r3, r1]
 80169f6:	4053      	eors	r3, r2
 80169f8:	b2da      	uxtb	r2, r3
 80169fa:	7abb      	ldrb	r3, [r7, #10]
 80169fc:	4619      	mov	r1, r3
 80169fe:	4b34      	ldr	r3, [pc, #208]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a00:	5c5b      	ldrb	r3, [r3, r1]
 8016a02:	4053      	eors	r3, r2
 8016a04:	b2d9      	uxtb	r1, r3
 8016a06:	7bfb      	ldrb	r3, [r7, #15]
 8016a08:	461a      	mov	r2, r3
 8016a0a:	4b31      	ldr	r3, [pc, #196]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a0c:	5c9a      	ldrb	r2, [r3, r2]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	3308      	adds	r3, #8
 8016a12:	404a      	eors	r2, r1
 8016a14:	b2d2      	uxtb	r2, r2
 8016a16:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8016a18:	7c3b      	ldrb	r3, [r7, #16]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a1e:	5c9a      	ldrb	r2, [r3, r2]
 8016a20:	7d7b      	ldrb	r3, [r7, #21]
 8016a22:	4619      	mov	r1, r3
 8016a24:	4b28      	ldr	r3, [pc, #160]	@ (8016ac8 <mix_sub_columns+0x284>)
 8016a26:	5c5b      	ldrb	r3, [r3, r1]
 8016a28:	4053      	eors	r3, r2
 8016a2a:	b2da      	uxtb	r2, r3
 8016a2c:	7abb      	ldrb	r3, [r7, #10]
 8016a2e:	4619      	mov	r1, r3
 8016a30:	4b26      	ldr	r3, [pc, #152]	@ (8016acc <mix_sub_columns+0x288>)
 8016a32:	5c5b      	ldrb	r3, [r3, r1]
 8016a34:	4053      	eors	r3, r2
 8016a36:	b2d9      	uxtb	r1, r3
 8016a38:	7bfb      	ldrb	r3, [r7, #15]
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	4b24      	ldr	r3, [pc, #144]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a3e:	5c9a      	ldrb	r2, [r3, r2]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	3309      	adds	r3, #9
 8016a44:	404a      	eors	r2, r1
 8016a46:	b2d2      	uxtb	r2, r2
 8016a48:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8016a4a:	7c3b      	ldrb	r3, [r7, #16]
 8016a4c:	461a      	mov	r2, r3
 8016a4e:	4b20      	ldr	r3, [pc, #128]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a50:	5c9a      	ldrb	r2, [r3, r2]
 8016a52:	7d7b      	ldrb	r3, [r7, #21]
 8016a54:	4619      	mov	r1, r3
 8016a56:	4b1e      	ldr	r3, [pc, #120]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a58:	5c5b      	ldrb	r3, [r3, r1]
 8016a5a:	4053      	eors	r3, r2
 8016a5c:	b2da      	uxtb	r2, r3
 8016a5e:	7abb      	ldrb	r3, [r7, #10]
 8016a60:	4619      	mov	r1, r3
 8016a62:	4b19      	ldr	r3, [pc, #100]	@ (8016ac8 <mix_sub_columns+0x284>)
 8016a64:	5c5b      	ldrb	r3, [r3, r1]
 8016a66:	4053      	eors	r3, r2
 8016a68:	b2d9      	uxtb	r1, r3
 8016a6a:	7bfb      	ldrb	r3, [r7, #15]
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	4b17      	ldr	r3, [pc, #92]	@ (8016acc <mix_sub_columns+0x288>)
 8016a70:	5c9a      	ldrb	r2, [r3, r2]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	330a      	adds	r3, #10
 8016a76:	404a      	eors	r2, r1
 8016a78:	b2d2      	uxtb	r2, r2
 8016a7a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8016a7c:	7c3b      	ldrb	r3, [r7, #16]
 8016a7e:	461a      	mov	r2, r3
 8016a80:	4b12      	ldr	r3, [pc, #72]	@ (8016acc <mix_sub_columns+0x288>)
 8016a82:	5c9a      	ldrb	r2, [r3, r2]
 8016a84:	7d7b      	ldrb	r3, [r7, #21]
 8016a86:	4619      	mov	r1, r3
 8016a88:	4b11      	ldr	r3, [pc, #68]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a8a:	5c5b      	ldrb	r3, [r3, r1]
 8016a8c:	4053      	eors	r3, r2
 8016a8e:	b2da      	uxtb	r2, r3
 8016a90:	7abb      	ldrb	r3, [r7, #10]
 8016a92:	4619      	mov	r1, r3
 8016a94:	4b0e      	ldr	r3, [pc, #56]	@ (8016ad0 <mix_sub_columns+0x28c>)
 8016a96:	5c5b      	ldrb	r3, [r3, r1]
 8016a98:	4053      	eors	r3, r2
 8016a9a:	b2d9      	uxtb	r1, r3
 8016a9c:	7bfb      	ldrb	r3, [r7, #15]
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	4b09      	ldr	r3, [pc, #36]	@ (8016ac8 <mix_sub_columns+0x284>)
 8016aa2:	5c9a      	ldrb	r2, [r3, r2]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	330b      	adds	r3, #11
 8016aa8:	404a      	eors	r2, r1
 8016aaa:	b2d2      	uxtb	r2, r2
 8016aac:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8016aae:	7d3b      	ldrb	r3, [r7, #20]
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	4b05      	ldr	r3, [pc, #20]	@ (8016ac8 <mix_sub_columns+0x284>)
 8016ab4:	5c9a      	ldrb	r2, [r3, r2]
 8016ab6:	7a7b      	ldrb	r3, [r7, #9]
 8016ab8:	4619      	mov	r1, r3
 8016aba:	4b04      	ldr	r3, [pc, #16]	@ (8016acc <mix_sub_columns+0x288>)
 8016abc:	5c5b      	ldrb	r3, [r3, r1]
 8016abe:	4053      	eors	r3, r2
 8016ac0:	b2da      	uxtb	r2, r3
 8016ac2:	7bbb      	ldrb	r3, [r7, #14]
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	e005      	b.n	8016ad4 <mix_sub_columns+0x290>
 8016ac8:	08021d08 	.word	0x08021d08
 8016acc:	08021e08 	.word	0x08021e08
 8016ad0:	08021c08 	.word	0x08021c08
 8016ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8016b8c <mix_sub_columns+0x348>)
 8016ad6:	5c5b      	ldrb	r3, [r3, r1]
 8016ad8:	4053      	eors	r3, r2
 8016ada:	b2d9      	uxtb	r1, r3
 8016adc:	7cfb      	ldrb	r3, [r7, #19]
 8016ade:	461a      	mov	r2, r3
 8016ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8016b8c <mix_sub_columns+0x348>)
 8016ae2:	5c9a      	ldrb	r2, [r3, r2]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	330c      	adds	r3, #12
 8016ae8:	404a      	eors	r2, r1
 8016aea:	b2d2      	uxtb	r2, r2
 8016aec:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8016aee:	7d3b      	ldrb	r3, [r7, #20]
 8016af0:	461a      	mov	r2, r3
 8016af2:	4b26      	ldr	r3, [pc, #152]	@ (8016b8c <mix_sub_columns+0x348>)
 8016af4:	5c9a      	ldrb	r2, [r3, r2]
 8016af6:	7a7b      	ldrb	r3, [r7, #9]
 8016af8:	4619      	mov	r1, r3
 8016afa:	4b25      	ldr	r3, [pc, #148]	@ (8016b90 <mix_sub_columns+0x34c>)
 8016afc:	5c5b      	ldrb	r3, [r3, r1]
 8016afe:	4053      	eors	r3, r2
 8016b00:	b2da      	uxtb	r2, r3
 8016b02:	7bbb      	ldrb	r3, [r7, #14]
 8016b04:	4619      	mov	r1, r3
 8016b06:	4b23      	ldr	r3, [pc, #140]	@ (8016b94 <mix_sub_columns+0x350>)
 8016b08:	5c5b      	ldrb	r3, [r3, r1]
 8016b0a:	4053      	eors	r3, r2
 8016b0c:	b2d9      	uxtb	r1, r3
 8016b0e:	7cfb      	ldrb	r3, [r7, #19]
 8016b10:	461a      	mov	r2, r3
 8016b12:	4b1e      	ldr	r3, [pc, #120]	@ (8016b8c <mix_sub_columns+0x348>)
 8016b14:	5c9a      	ldrb	r2, [r3, r2]
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	330d      	adds	r3, #13
 8016b1a:	404a      	eors	r2, r1
 8016b1c:	b2d2      	uxtb	r2, r2
 8016b1e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8016b20:	7d3b      	ldrb	r3, [r7, #20]
 8016b22:	461a      	mov	r2, r3
 8016b24:	4b19      	ldr	r3, [pc, #100]	@ (8016b8c <mix_sub_columns+0x348>)
 8016b26:	5c9a      	ldrb	r2, [r3, r2]
 8016b28:	7a7b      	ldrb	r3, [r7, #9]
 8016b2a:	4619      	mov	r1, r3
 8016b2c:	4b17      	ldr	r3, [pc, #92]	@ (8016b8c <mix_sub_columns+0x348>)
 8016b2e:	5c5b      	ldrb	r3, [r3, r1]
 8016b30:	4053      	eors	r3, r2
 8016b32:	b2da      	uxtb	r2, r3
 8016b34:	7bbb      	ldrb	r3, [r7, #14]
 8016b36:	4619      	mov	r1, r3
 8016b38:	4b15      	ldr	r3, [pc, #84]	@ (8016b90 <mix_sub_columns+0x34c>)
 8016b3a:	5c5b      	ldrb	r3, [r3, r1]
 8016b3c:	4053      	eors	r3, r2
 8016b3e:	b2d9      	uxtb	r1, r3
 8016b40:	7cfb      	ldrb	r3, [r7, #19]
 8016b42:	461a      	mov	r2, r3
 8016b44:	4b13      	ldr	r3, [pc, #76]	@ (8016b94 <mix_sub_columns+0x350>)
 8016b46:	5c9a      	ldrb	r2, [r3, r2]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	330e      	adds	r3, #14
 8016b4c:	404a      	eors	r2, r1
 8016b4e:	b2d2      	uxtb	r2, r2
 8016b50:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8016b52:	7d3b      	ldrb	r3, [r7, #20]
 8016b54:	461a      	mov	r2, r3
 8016b56:	4b0f      	ldr	r3, [pc, #60]	@ (8016b94 <mix_sub_columns+0x350>)
 8016b58:	5c9a      	ldrb	r2, [r3, r2]
 8016b5a:	7a7b      	ldrb	r3, [r7, #9]
 8016b5c:	4619      	mov	r1, r3
 8016b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8016b8c <mix_sub_columns+0x348>)
 8016b60:	5c5b      	ldrb	r3, [r3, r1]
 8016b62:	4053      	eors	r3, r2
 8016b64:	b2da      	uxtb	r2, r3
 8016b66:	7bbb      	ldrb	r3, [r7, #14]
 8016b68:	4619      	mov	r1, r3
 8016b6a:	4b08      	ldr	r3, [pc, #32]	@ (8016b8c <mix_sub_columns+0x348>)
 8016b6c:	5c5b      	ldrb	r3, [r3, r1]
 8016b6e:	4053      	eors	r3, r2
 8016b70:	b2d9      	uxtb	r1, r3
 8016b72:	7cfb      	ldrb	r3, [r7, #19]
 8016b74:	461a      	mov	r2, r3
 8016b76:	4b06      	ldr	r3, [pc, #24]	@ (8016b90 <mix_sub_columns+0x34c>)
 8016b78:	5c9a      	ldrb	r2, [r3, r2]
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	330f      	adds	r3, #15
 8016b7e:	404a      	eors	r2, r1
 8016b80:	b2d2      	uxtb	r2, r2
 8016b82:	701a      	strb	r2, [r3, #0]
  }
 8016b84:	bf00      	nop
 8016b86:	3718      	adds	r7, #24
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}
 8016b8c:	08021c08 	.word	0x08021c08
 8016b90:	08021d08 	.word	0x08021d08
 8016b94:	08021e08 	.word	0x08021e08

08016b98 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b086      	sub	sp, #24
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	60f8      	str	r0, [r7, #12]
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	607a      	str	r2, [r7, #4]
 8016ba4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 8016ba6:	7afb      	ldrb	r3, [r7, #11]
 8016ba8:	3b10      	subs	r3, #16
 8016baa:	2b10      	cmp	r3, #16
 8016bac:	bf8c      	ite	hi
 8016bae:	2201      	movhi	r2, #1
 8016bb0:	2200      	movls	r2, #0
 8016bb2:	b2d2      	uxtb	r2, r2
 8016bb4:	2a00      	cmp	r2, #0
 8016bb6:	d10b      	bne.n	8016bd0 <lorawan_aes_set_key+0x38>
 8016bb8:	4a64      	ldr	r2, [pc, #400]	@ (8016d4c <lorawan_aes_set_key+0x1b4>)
 8016bba:	fa22 f303 	lsr.w	r3, r2, r3
 8016bbe:	f003 0301 	and.w	r3, r3, #1
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	bf14      	ite	ne
 8016bc6:	2301      	movne	r3, #1
 8016bc8:	2300      	moveq	r3, #0
 8016bca:	b2db      	uxtb	r3, r3
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d105      	bne.n	8016bdc <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 8016bd8:	23ff      	movs	r3, #255	@ 0xff
 8016bda:	e0b3      	b.n	8016d44 <lorawan_aes_set_key+0x1ac>
        break;
 8016bdc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	7afa      	ldrb	r2, [r7, #11]
 8016be2:	68f9      	ldr	r1, [r7, #12]
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7ff fbfc 	bl	80163e2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8016bea:	7afb      	ldrb	r3, [r7, #11]
 8016bec:	331c      	adds	r3, #28
 8016bee:	b2db      	uxtb	r3, r3
 8016bf0:	009b      	lsls	r3, r3, #2
 8016bf2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 8016bf4:	7c7b      	ldrb	r3, [r7, #17]
 8016bf6:	091b      	lsrs	r3, r3, #4
 8016bf8:	b2db      	uxtb	r3, r3
 8016bfa:	3b01      	subs	r3, #1
 8016bfc:	b2da      	uxtb	r2, r3
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8016c04:	7afb      	ldrb	r3, [r7, #11]
 8016c06:	75fb      	strb	r3, [r7, #23]
 8016c08:	2301      	movs	r3, #1
 8016c0a:	75bb      	strb	r3, [r7, #22]
 8016c0c:	e094      	b.n	8016d38 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8016c0e:	7dfb      	ldrb	r3, [r7, #23]
 8016c10:	3b04      	subs	r3, #4
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	5cd3      	ldrb	r3, [r2, r3]
 8016c16:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8016c18:	7dfb      	ldrb	r3, [r7, #23]
 8016c1a:	3b03      	subs	r3, #3
 8016c1c:	687a      	ldr	r2, [r7, #4]
 8016c1e:	5cd3      	ldrb	r3, [r2, r3]
 8016c20:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 8016c22:	7dfb      	ldrb	r3, [r7, #23]
 8016c24:	3b02      	subs	r3, #2
 8016c26:	687a      	ldr	r2, [r7, #4]
 8016c28:	5cd3      	ldrb	r3, [r2, r3]
 8016c2a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8016c2c:	7dfb      	ldrb	r3, [r7, #23]
 8016c2e:	3b01      	subs	r3, #1
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	5cd3      	ldrb	r3, [r2, r3]
 8016c34:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 8016c36:	7dfb      	ldrb	r3, [r7, #23]
 8016c38:	7afa      	ldrb	r2, [r7, #11]
 8016c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8016c3e:	fb01 f202 	mul.w	r2, r1, r2
 8016c42:	1a9b      	subs	r3, r3, r2
 8016c44:	b2db      	uxtb	r3, r3
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d128      	bne.n	8016c9c <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 8016c4a:	7d7b      	ldrb	r3, [r7, #21]
 8016c4c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 8016c4e:	7d3b      	ldrb	r3, [r7, #20]
 8016c50:	4a3f      	ldr	r2, [pc, #252]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016c52:	5cd2      	ldrb	r2, [r2, r3]
 8016c54:	7dbb      	ldrb	r3, [r7, #22]
 8016c56:	4053      	eors	r3, r2
 8016c58:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 8016c5a:	7cfb      	ldrb	r3, [r7, #19]
 8016c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016c5e:	5cd3      	ldrb	r3, [r2, r3]
 8016c60:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 8016c62:	7cbb      	ldrb	r3, [r7, #18]
 8016c64:	4a3a      	ldr	r2, [pc, #232]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016c66:	5cd3      	ldrb	r3, [r2, r3]
 8016c68:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8016c6a:	7c3b      	ldrb	r3, [r7, #16]
 8016c6c:	4a38      	ldr	r2, [pc, #224]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016c6e:	5cd3      	ldrb	r3, [r2, r3]
 8016c70:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 8016c72:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016c76:	005b      	lsls	r3, r3, #1
 8016c78:	b25a      	sxtb	r2, r3
 8016c7a:	7dbb      	ldrb	r3, [r7, #22]
 8016c7c:	09db      	lsrs	r3, r3, #7
 8016c7e:	b2db      	uxtb	r3, r3
 8016c80:	b25b      	sxtb	r3, r3
 8016c82:	4619      	mov	r1, r3
 8016c84:	0049      	lsls	r1, r1, #1
 8016c86:	440b      	add	r3, r1
 8016c88:	4619      	mov	r1, r3
 8016c8a:	00c8      	lsls	r0, r1, #3
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	4603      	mov	r3, r0
 8016c90:	440b      	add	r3, r1
 8016c92:	b25b      	sxtb	r3, r3
 8016c94:	4053      	eors	r3, r2
 8016c96:	b25b      	sxtb	r3, r3
 8016c98:	75bb      	strb	r3, [r7, #22]
 8016c9a:	e01c      	b.n	8016cd6 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8016c9c:	7afb      	ldrb	r3, [r7, #11]
 8016c9e:	2b18      	cmp	r3, #24
 8016ca0:	d919      	bls.n	8016cd6 <lorawan_aes_set_key+0x13e>
 8016ca2:	7dfb      	ldrb	r3, [r7, #23]
 8016ca4:	7afa      	ldrb	r2, [r7, #11]
 8016ca6:	fbb3 f1f2 	udiv	r1, r3, r2
 8016caa:	fb01 f202 	mul.w	r2, r1, r2
 8016cae:	1a9b      	subs	r3, r3, r2
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	2b10      	cmp	r3, #16
 8016cb4:	d10f      	bne.n	8016cd6 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 8016cb6:	7d7b      	ldrb	r3, [r7, #21]
 8016cb8:	4a25      	ldr	r2, [pc, #148]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016cba:	5cd3      	ldrb	r3, [r2, r3]
 8016cbc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 8016cbe:	7d3b      	ldrb	r3, [r7, #20]
 8016cc0:	4a23      	ldr	r2, [pc, #140]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016cc2:	5cd3      	ldrb	r3, [r2, r3]
 8016cc4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 8016cc6:	7cfb      	ldrb	r3, [r7, #19]
 8016cc8:	4a21      	ldr	r2, [pc, #132]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016cca:	5cd3      	ldrb	r3, [r2, r3]
 8016ccc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 8016cce:	7cbb      	ldrb	r3, [r7, #18]
 8016cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8016d50 <lorawan_aes_set_key+0x1b8>)
 8016cd2:	5cd3      	ldrb	r3, [r2, r3]
 8016cd4:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 8016cd6:	7dfa      	ldrb	r2, [r7, #23]
 8016cd8:	7afb      	ldrb	r3, [r7, #11]
 8016cda:	1ad3      	subs	r3, r2, r3
 8016cdc:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8016cde:	7c3b      	ldrb	r3, [r7, #16]
 8016ce0:	687a      	ldr	r2, [r7, #4]
 8016ce2:	5cd1      	ldrb	r1, [r2, r3]
 8016ce4:	7dfb      	ldrb	r3, [r7, #23]
 8016ce6:	7d7a      	ldrb	r2, [r7, #21]
 8016ce8:	404a      	eors	r2, r1
 8016cea:	b2d1      	uxtb	r1, r2
 8016cec:	687a      	ldr	r2, [r7, #4]
 8016cee:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8016cf0:	7c3b      	ldrb	r3, [r7, #16]
 8016cf2:	3301      	adds	r3, #1
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	5cd1      	ldrb	r1, [r2, r3]
 8016cf8:	7dfb      	ldrb	r3, [r7, #23]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	7d3a      	ldrb	r2, [r7, #20]
 8016cfe:	404a      	eors	r2, r1
 8016d00:	b2d1      	uxtb	r1, r2
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8016d06:	7c3b      	ldrb	r3, [r7, #16]
 8016d08:	3302      	adds	r3, #2
 8016d0a:	687a      	ldr	r2, [r7, #4]
 8016d0c:	5cd1      	ldrb	r1, [r2, r3]
 8016d0e:	7dfb      	ldrb	r3, [r7, #23]
 8016d10:	3302      	adds	r3, #2
 8016d12:	7cfa      	ldrb	r2, [r7, #19]
 8016d14:	404a      	eors	r2, r1
 8016d16:	b2d1      	uxtb	r1, r2
 8016d18:	687a      	ldr	r2, [r7, #4]
 8016d1a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8016d1c:	7c3b      	ldrb	r3, [r7, #16]
 8016d1e:	3303      	adds	r3, #3
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	5cd1      	ldrb	r1, [r2, r3]
 8016d24:	7dfb      	ldrb	r3, [r7, #23]
 8016d26:	3303      	adds	r3, #3
 8016d28:	7cba      	ldrb	r2, [r7, #18]
 8016d2a:	404a      	eors	r2, r1
 8016d2c:	b2d1      	uxtb	r1, r2
 8016d2e:	687a      	ldr	r2, [r7, #4]
 8016d30:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8016d32:	7dfb      	ldrb	r3, [r7, #23]
 8016d34:	3304      	adds	r3, #4
 8016d36:	75fb      	strb	r3, [r7, #23]
 8016d38:	7dfa      	ldrb	r2, [r7, #23]
 8016d3a:	7c7b      	ldrb	r3, [r7, #17]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	f4ff af66 	bcc.w	8016c0e <lorawan_aes_set_key+0x76>
    }
    return 0;
 8016d42:	2300      	movs	r3, #0
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	3718      	adds	r7, #24
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}
 8016d4c:	00010101 	.word	0x00010101
 8016d50:	08021c08 	.word	0x08021c08

08016d54 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b08a      	sub	sp, #40	@ 0x28
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	60f8      	str	r0, [r7, #12]
 8016d5c:	60b9      	str	r1, [r7, #8]
 8016d5e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d038      	beq.n	8016ddc <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8016d6a:	687a      	ldr	r2, [r7, #4]
 8016d6c:	f107 0314 	add.w	r3, r7, #20
 8016d70:	68f9      	ldr	r1, [r7, #12]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7ff fc07 	bl	8016586 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8016d78:	2301      	movs	r3, #1
 8016d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016d7e:	e014      	b.n	8016daa <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8016d80:	f107 0314 	add.w	r3, r7, #20
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7ff fd5d 	bl	8016844 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016d90:	0112      	lsls	r2, r2, #4
 8016d92:	441a      	add	r2, r3
 8016d94:	f107 0314 	add.w	r3, r7, #20
 8016d98:	4611      	mov	r1, r2
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7ff fcab 	bl	80166f6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8016da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016da4:	3301      	adds	r3, #1
 8016da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016db0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016db4:	429a      	cmp	r2, r3
 8016db6:	d3e3      	bcc.n	8016d80 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8016db8:	f107 0314 	add.w	r3, r7, #20
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7ff fca7 	bl	8016710 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016dc8:	0112      	lsls	r2, r2, #4
 8016dca:	441a      	add	r2, r3
 8016dcc:	f107 0314 	add.w	r3, r7, #20
 8016dd0:	4619      	mov	r1, r3
 8016dd2:	68b8      	ldr	r0, [r7, #8]
 8016dd4:	f7ff fbd7 	bl	8016586 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	e000      	b.n	8016dde <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8016ddc:	23ff      	movs	r3, #255	@ 0xff
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3728      	adds	r7, #40	@ 0x28
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
	...

08016de8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 8016de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dea:	b0a1      	sub	sp, #132	@ 0x84
 8016dec:	af12      	add	r7, sp, #72	@ 0x48
 8016dee:	4603      	mov	r3, r0
 8016df0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8016df4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016df8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016dfc:	4611      	mov	r1, r2
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f000 fa12 	bl	8017228 <SecureElementGetKeyByID>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d174      	bne.n	8016ef4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016e10:	e06c      	b.n	8016eec <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 8016e12:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016e16:	4939      	ldr	r1, [pc, #228]	@ (8016efc <PrintKey+0x114>)
 8016e18:	4613      	mov	r3, r2
 8016e1a:	005b      	lsls	r3, r3, #1
 8016e1c:	4413      	add	r3, r2
 8016e1e:	009b      	lsls	r3, r3, #2
 8016e20:	440b      	add	r3, r1
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d15a      	bne.n	8016ee2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 8016e2c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016e30:	4932      	ldr	r1, [pc, #200]	@ (8016efc <PrintKey+0x114>)
 8016e32:	4613      	mov	r3, r2
 8016e34:	005b      	lsls	r3, r3, #1
 8016e36:	4413      	add	r3, r2
 8016e38:	009b      	lsls	r3, r3, #2
 8016e3a:	440b      	add	r3, r1
 8016e3c:	3308      	adds	r3, #8
 8016e3e:	6819      	ldr	r1, [r3, #0]
 8016e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e42:	785b      	ldrb	r3, [r3, #1]
 8016e44:	461d      	mov	r5, r3
 8016e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e48:	789b      	ldrb	r3, [r3, #2]
 8016e4a:	461e      	mov	r6, r3
 8016e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e4e:	78db      	ldrb	r3, [r3, #3]
 8016e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e54:	791b      	ldrb	r3, [r3, #4]
 8016e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e5a:	795b      	ldrb	r3, [r3, #5]
 8016e5c:	623b      	str	r3, [r7, #32]
 8016e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e60:	799b      	ldrb	r3, [r3, #6]
 8016e62:	61fb      	str	r3, [r7, #28]
 8016e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e66:	79db      	ldrb	r3, [r3, #7]
 8016e68:	61bb      	str	r3, [r7, #24]
 8016e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e6c:	7a1b      	ldrb	r3, [r3, #8]
 8016e6e:	617b      	str	r3, [r7, #20]
 8016e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e72:	7a5b      	ldrb	r3, [r3, #9]
 8016e74:	613b      	str	r3, [r7, #16]
 8016e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e78:	7a9b      	ldrb	r3, [r3, #10]
 8016e7a:	60fb      	str	r3, [r7, #12]
 8016e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e7e:	7adb      	ldrb	r3, [r3, #11]
 8016e80:	60bb      	str	r3, [r7, #8]
 8016e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e84:	7b1b      	ldrb	r3, [r3, #12]
 8016e86:	607b      	str	r3, [r7, #4]
 8016e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e8a:	7b5b      	ldrb	r3, [r3, #13]
 8016e8c:	461c      	mov	r4, r3
 8016e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e90:	7b9b      	ldrb	r3, [r3, #14]
 8016e92:	4618      	mov	r0, r3
 8016e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e96:	7bdb      	ldrb	r3, [r3, #15]
 8016e98:	461a      	mov	r2, r3
 8016e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e9c:	7c1b      	ldrb	r3, [r3, #16]
 8016e9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016ea0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016ea2:	900e      	str	r0, [sp, #56]	@ 0x38
 8016ea4:	940d      	str	r4, [sp, #52]	@ 0x34
 8016ea6:	687a      	ldr	r2, [r7, #4]
 8016ea8:	920c      	str	r2, [sp, #48]	@ 0x30
 8016eaa:	68ba      	ldr	r2, [r7, #8]
 8016eac:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016eae:	68fa      	ldr	r2, [r7, #12]
 8016eb0:	920a      	str	r2, [sp, #40]	@ 0x28
 8016eb2:	693a      	ldr	r2, [r7, #16]
 8016eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8016eb6:	697a      	ldr	r2, [r7, #20]
 8016eb8:	9208      	str	r2, [sp, #32]
 8016eba:	69ba      	ldr	r2, [r7, #24]
 8016ebc:	9207      	str	r2, [sp, #28]
 8016ebe:	69fa      	ldr	r2, [r7, #28]
 8016ec0:	9206      	str	r2, [sp, #24]
 8016ec2:	6a3a      	ldr	r2, [r7, #32]
 8016ec4:	9205      	str	r2, [sp, #20]
 8016ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ec8:	9204      	str	r2, [sp, #16]
 8016eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ecc:	9303      	str	r3, [sp, #12]
 8016ece:	9602      	str	r6, [sp, #8]
 8016ed0:	9501      	str	r5, [sp, #4]
 8016ed2:	9100      	str	r1, [sp, #0]
 8016ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8016f00 <PrintKey+0x118>)
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	2100      	movs	r1, #0
 8016eda:	2002      	movs	r0, #2
 8016edc:	f003 fa26 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
 8016ee0:	e008      	b.n	8016ef4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016eec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ef0:	2b0a      	cmp	r3, #10
 8016ef2:	d98e      	bls.n	8016e12 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 8016ef4:	373c      	adds	r7, #60	@ 0x3c
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016efa:	bf00      	nop
 8016efc:	08021f08 	.word	0x08021f08
 8016f00:	08021724 	.word	0x08021724

08016f04 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 8016f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f06:	b091      	sub	sp, #68	@ 0x44
 8016f08:	af08      	add	r7, sp, #32
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 8016f0e:	2300      	movs	r3, #0
 8016f10:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 8016f12:	f107 0310 	add.w	r3, r7, #16
 8016f16:	4618      	mov	r0, r3
 8016f18:	f000 fbd8 	bl	80176cc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8016f1c:	7c3b      	ldrb	r3, [r7, #16]
 8016f1e:	7c7a      	ldrb	r2, [r7, #17]
 8016f20:	7cb9      	ldrb	r1, [r7, #18]
 8016f22:	7cf8      	ldrb	r0, [r7, #19]
 8016f24:	7d3c      	ldrb	r4, [r7, #20]
 8016f26:	7d7d      	ldrb	r5, [r7, #21]
 8016f28:	7dbe      	ldrb	r6, [r7, #22]
 8016f2a:	f897 c017 	ldrb.w	ip, [r7, #23]
 8016f2e:	f8cd c01c 	str.w	ip, [sp, #28]
 8016f32:	9606      	str	r6, [sp, #24]
 8016f34:	9505      	str	r5, [sp, #20]
 8016f36:	9404      	str	r4, [sp, #16]
 8016f38:	9003      	str	r0, [sp, #12]
 8016f3a:	9102      	str	r1, [sp, #8]
 8016f3c:	9201      	str	r2, [sp, #4]
 8016f3e:	9300      	str	r3, [sp, #0]
 8016f40:	4b24      	ldr	r3, [pc, #144]	@ (8016fd4 <PrintIds+0xd0>)
 8016f42:	2200      	movs	r2, #0
 8016f44:	2100      	movs	r1, #0
 8016f46:	2002      	movs	r0, #2
 8016f48:	f003 f9f0 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 8016f4c:	f107 0318 	add.w	r3, r7, #24
 8016f50:	4618      	mov	r0, r3
 8016f52:	f000 fc05 	bl	8017760 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8016f56:	7e3b      	ldrb	r3, [r7, #24]
 8016f58:	7e7a      	ldrb	r2, [r7, #25]
 8016f5a:	7eb9      	ldrb	r1, [r7, #26]
 8016f5c:	7ef8      	ldrb	r0, [r7, #27]
 8016f5e:	7f3c      	ldrb	r4, [r7, #28]
 8016f60:	7f7d      	ldrb	r5, [r7, #29]
 8016f62:	7fbe      	ldrb	r6, [r7, #30]
 8016f64:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8016f68:	f8cd c01c 	str.w	ip, [sp, #28]
 8016f6c:	9606      	str	r6, [sp, #24]
 8016f6e:	9505      	str	r5, [sp, #20]
 8016f70:	9404      	str	r4, [sp, #16]
 8016f72:	9003      	str	r0, [sp, #12]
 8016f74:	9102      	str	r1, [sp, #8]
 8016f76:	9201      	str	r2, [sp, #4]
 8016f78:	9300      	str	r3, [sp, #0]
 8016f7a:	4b17      	ldr	r3, [pc, #92]	@ (8016fd8 <PrintIds+0xd4>)
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	2100      	movs	r1, #0
 8016f80:	2002      	movs	r0, #2
 8016f82:	f003 f9d3 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 8016f86:	f107 020c 	add.w	r2, r7, #12
 8016f8a:	79fb      	ldrb	r3, [r7, #7]
 8016f8c:	4611      	mov	r1, r2
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f000 fbfe 	bl	8017790 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8016f94:	f107 030c 	add.w	r3, r7, #12
 8016f98:	3303      	adds	r3, #3
 8016f9a:	781b      	ldrb	r3, [r3, #0]
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	f107 030c 	add.w	r3, r7, #12
 8016fa2:	3302      	adds	r3, #2
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	4619      	mov	r1, r3
 8016fa8:	f107 030c 	add.w	r3, r7, #12
 8016fac:	3301      	adds	r3, #1
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f107 030c 	add.w	r3, r7, #12
 8016fb6:	781b      	ldrb	r3, [r3, #0]
 8016fb8:	9303      	str	r3, [sp, #12]
 8016fba:	9002      	str	r0, [sp, #8]
 8016fbc:	9101      	str	r1, [sp, #4]
 8016fbe:	9200      	str	r2, [sp, #0]
 8016fc0:	4b06      	ldr	r3, [pc, #24]	@ (8016fdc <PrintIds+0xd8>)
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	2100      	movs	r1, #0
 8016fc6:	2002      	movs	r0, #2
 8016fc8:	f003 f9b0 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 8016fcc:	bf00      	nop
 8016fce:	3724      	adds	r7, #36	@ 0x24
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fd4:	08021780 	.word	0x08021780
 8016fd8:	080217c0 	.word	0x080217c0
 8016fdc:	08021800 	.word	0x08021800

08016fe0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8016fe0:	b480      	push	{r7}
 8016fe2:	b085      	sub	sp, #20
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	6039      	str	r1, [r7, #0]
 8016fea:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016fec:	2300      	movs	r3, #0
 8016fee:	73fb      	strb	r3, [r7, #15]
 8016ff0:	e01a      	b.n	8017028 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8016ff2:	4b12      	ldr	r3, [pc, #72]	@ (801703c <GetKeyByID+0x5c>)
 8016ff4:	6819      	ldr	r1, [r3, #0]
 8016ff6:	7bfa      	ldrb	r2, [r7, #15]
 8016ff8:	4613      	mov	r3, r2
 8016ffa:	011b      	lsls	r3, r3, #4
 8016ffc:	4413      	add	r3, r2
 8016ffe:	440b      	add	r3, r1
 8017000:	3318      	adds	r3, #24
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	79fa      	ldrb	r2, [r7, #7]
 8017006:	429a      	cmp	r2, r3
 8017008:	d10b      	bne.n	8017022 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 801700a:	4b0c      	ldr	r3, [pc, #48]	@ (801703c <GetKeyByID+0x5c>)
 801700c:	6819      	ldr	r1, [r3, #0]
 801700e:	7bfa      	ldrb	r2, [r7, #15]
 8017010:	4613      	mov	r3, r2
 8017012:	011b      	lsls	r3, r3, #4
 8017014:	4413      	add	r3, r2
 8017016:	3318      	adds	r3, #24
 8017018:	18ca      	adds	r2, r1, r3
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 801701e:	2300      	movs	r3, #0
 8017020:	e006      	b.n	8017030 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8017022:	7bfb      	ldrb	r3, [r7, #15]
 8017024:	3301      	adds	r3, #1
 8017026:	73fb      	strb	r3, [r7, #15]
 8017028:	7bfb      	ldrb	r3, [r7, #15]
 801702a:	2b0a      	cmp	r3, #10
 801702c:	d9e1      	bls.n	8016ff2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801702e:	2303      	movs	r3, #3
}
 8017030:	4618      	mov	r0, r3
 8017032:	3714      	adds	r7, #20
 8017034:	46bd      	mov	sp, r7
 8017036:	bc80      	pop	{r7}
 8017038:	4770      	bx	lr
 801703a:	bf00      	nop
 801703c:	20001234 	.word	0x20001234

08017040 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8017040:	b590      	push	{r4, r7, lr}
 8017042:	b0d1      	sub	sp, #324	@ 0x144
 8017044:	af00      	add	r7, sp, #0
 8017046:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 801704a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 801704e:	6020      	str	r0, [r4, #0]
 8017050:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8017054:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8017058:	6001      	str	r1, [r0, #0]
 801705a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801705e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8017062:	600a      	str	r2, [r1, #0]
 8017064:	461a      	mov	r2, r3
 8017066:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801706a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 801706e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8017070:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017074:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d003      	beq.n	8017086 <ComputeCmac+0x46>
 801707e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8017082:	2b00      	cmp	r3, #0
 8017084:	d101      	bne.n	801708a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8017086:	2302      	movs	r3, #2
 8017088:	e05d      	b.n	8017146 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801708a:	f107 0314 	add.w	r3, r7, #20
 801708e:	4618      	mov	r0, r3
 8017090:	f7fe fefe 	bl	8015e90 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8017094:	f107 0210 	add.w	r2, r7, #16
 8017098:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801709c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80170a0:	781b      	ldrb	r3, [r3, #0]
 80170a2:	4611      	mov	r1, r2
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7ff ff9b 	bl	8016fe0 <GetKeyByID>
 80170aa:	4603      	mov	r3, r0
 80170ac:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80170b0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d144      	bne.n	8017142 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80170b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	1c5a      	adds	r2, r3, #1
 80170c4:	f107 0314 	add.w	r3, r7, #20
 80170c8:	4611      	mov	r1, r2
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7fe fef9 	bl	8015ec2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 80170d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d009      	beq.n	80170f2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 80170de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80170e6:	f107 0014 	add.w	r0, r7, #20
 80170ea:	2210      	movs	r2, #16
 80170ec:	6819      	ldr	r1, [r3, #0]
 80170ee:	f7fe fef7 	bl	8015ee0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80170f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170f6:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80170fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8017102:	f107 0014 	add.w	r0, r7, #20
 8017106:	6812      	ldr	r2, [r2, #0]
 8017108:	6819      	ldr	r1, [r3, #0]
 801710a:	f7fe fee9 	bl	8015ee0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 801710e:	f107 0214 	add.w	r2, r7, #20
 8017112:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8017116:	4611      	mov	r1, r2
 8017118:	4618      	mov	r0, r3
 801711a:	f7fe ffa3 	bl	8016064 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 801711e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8017122:	461a      	mov	r2, r3
 8017124:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8017128:	021b      	lsls	r3, r3, #8
 801712a:	431a      	orrs	r2, r3
 801712c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8017130:	041b      	lsls	r3, r3, #16
 8017132:	431a      	orrs	r2, r3
 8017134:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8017138:	061b      	lsls	r3, r3, #24
 801713a:	431a      	orrs	r2, r3
 801713c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8017140:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8017142:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 8017146:	4618      	mov	r0, r3
 8017148:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801714c:	46bd      	mov	sp, r7
 801714e:	bd90      	pop	{r4, r7, pc}

08017150 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d101      	bne.n	8017162 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801715e:	2302      	movs	r3, #2
 8017160:	e00a      	b.n	8017178 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8017162:	4a07      	ldr	r2, [pc, #28]	@ (8017180 <SecureElementInit+0x30>)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8017168:	4b05      	ldr	r3, [pc, #20]	@ (8017180 <SecureElementInit+0x30>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	22d8      	movs	r2, #216	@ 0xd8
 801716e:	4905      	ldr	r1, [pc, #20]	@ (8017184 <SecureElementInit+0x34>)
 8017170:	4618      	mov	r0, r3
 8017172:	f000 fb76 	bl	8017862 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8017176:	2300      	movs	r3, #0
}
 8017178:	4618      	mov	r0, r3
 801717a:	3708      	adds	r7, #8
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}
 8017180:	20001234 	.word	0x20001234
 8017184:	0803e500 	.word	0x0803e500

08017188 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b086      	sub	sp, #24
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 8017196:	f107 030c 	add.w	r3, r7, #12
 801719a:	4618      	mov	r0, r3
 801719c:	f000 fa96 	bl	80176cc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 80171a0:	f107 0308 	add.w	r3, r7, #8
 80171a4:	4619      	mov	r1, r3
 80171a6:	2001      	movs	r0, #1
 80171a8:	f000 faf2 	bl	8017790 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d024      	beq.n	80171fc <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 80171b2:	2300      	movs	r3, #0
 80171b4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80171b6:	2300      	movs	r3, #0
 80171b8:	75bb      	strb	r3, [r7, #22]
 80171ba:	e00c      	b.n	80171d6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 80171bc:	7dbb      	ldrb	r3, [r7, #22]
 80171be:	3318      	adds	r3, #24
 80171c0:	443b      	add	r3, r7
 80171c2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d002      	beq.n	80171d0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 80171ca:	2301      	movs	r3, #1
 80171cc:	75fb      	strb	r3, [r7, #23]
                break;
 80171ce:	e005      	b.n	80171dc <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80171d0:	7dbb      	ldrb	r3, [r7, #22]
 80171d2:	3301      	adds	r3, #1
 80171d4:	75bb      	strb	r3, [r7, #22]
 80171d6:	7dbb      	ldrb	r3, [r7, #22]
 80171d8:	2b07      	cmp	r3, #7
 80171da:	d9ef      	bls.n	80171bc <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 80171dc:	7dfb      	ldrb	r3, [r7, #23]
 80171de:	f083 0301 	eor.w	r3, r3, #1
 80171e2:	b2db      	uxtb	r3, r3
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d009      	beq.n	80171fc <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 80171e8:	f107 020c 	add.w	r2, r7, #12
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	4610      	mov	r0, r2
 80171f0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 80171f2:	f107 030c 	add.w	r3, r7, #12
 80171f6:	4618      	mov	r0, r3
 80171f8:	f000 fa50 	bl	801769c <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d00c      	beq.n	801721c <SecureElementInitMcuID+0x94>
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d109      	bne.n	801721c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 8017208:	f107 0208 	add.w	r2, r7, #8
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	4610      	mov	r0, r2
 8017210:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8017212:	68bb      	ldr	r3, [r7, #8]
 8017214:	4619      	mov	r1, r3
 8017216:	2001      	movs	r0, #1
 8017218:	f000 fa88 	bl	801772c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 801721c:	2300      	movs	r3, #0
}
 801721e:	4618      	mov	r0, r3
 8017220:	3718      	adds	r7, #24
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
	...

08017228 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8017228:	b480      	push	{r7}
 801722a:	b085      	sub	sp, #20
 801722c:	af00      	add	r7, sp, #0
 801722e:	4603      	mov	r3, r0
 8017230:	6039      	str	r1, [r7, #0]
 8017232:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8017234:	2300      	movs	r3, #0
 8017236:	73fb      	strb	r3, [r7, #15]
 8017238:	e01a      	b.n	8017270 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801723a:	4b12      	ldr	r3, [pc, #72]	@ (8017284 <SecureElementGetKeyByID+0x5c>)
 801723c:	6819      	ldr	r1, [r3, #0]
 801723e:	7bfa      	ldrb	r2, [r7, #15]
 8017240:	4613      	mov	r3, r2
 8017242:	011b      	lsls	r3, r3, #4
 8017244:	4413      	add	r3, r2
 8017246:	440b      	add	r3, r1
 8017248:	3318      	adds	r3, #24
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	79fa      	ldrb	r2, [r7, #7]
 801724e:	429a      	cmp	r2, r3
 8017250:	d10b      	bne.n	801726a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8017252:	4b0c      	ldr	r3, [pc, #48]	@ (8017284 <SecureElementGetKeyByID+0x5c>)
 8017254:	6819      	ldr	r1, [r3, #0]
 8017256:	7bfa      	ldrb	r2, [r7, #15]
 8017258:	4613      	mov	r3, r2
 801725a:	011b      	lsls	r3, r3, #4
 801725c:	4413      	add	r3, r2
 801725e:	3318      	adds	r3, #24
 8017260:	18ca      	adds	r2, r1, r3
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8017266:	2300      	movs	r3, #0
 8017268:	e006      	b.n	8017278 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801726a:	7bfb      	ldrb	r3, [r7, #15]
 801726c:	3301      	adds	r3, #1
 801726e:	73fb      	strb	r3, [r7, #15]
 8017270:	7bfb      	ldrb	r3, [r7, #15]
 8017272:	2b0a      	cmp	r3, #10
 8017274:	d9e1      	bls.n	801723a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8017276:	2303      	movs	r3, #3
}
 8017278:	4618      	mov	r0, r3
 801727a:	3714      	adds	r7, #20
 801727c:	46bd      	mov	sp, r7
 801727e:	bc80      	pop	{r7}
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop
 8017284:	20001234 	.word	0x20001234

08017288 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8017288:	b580      	push	{r7, lr}
 801728a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 801728c:	2000      	movs	r0, #0
 801728e:	f7ff fdab 	bl	8016de8 <PrintKey>
    PrintKey( NWK_KEY );
 8017292:	2001      	movs	r0, #1
 8017294:	f7ff fda8 	bl	8016de8 <PrintKey>
    PrintKey( APP_S_KEY );
 8017298:	2009      	movs	r0, #9
 801729a:	f7ff fda5 	bl	8016de8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 801729e:	2008      	movs	r0, #8
 80172a0:	f7ff fda2 	bl	8016de8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 80172a4:	2000      	movs	r0, #0
 80172a6:	f7ff fe2d 	bl	8016f04 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80172aa:	2300      	movs	r3, #0
}
 80172ac:	4618      	mov	r0, r3
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b082      	sub	sp, #8
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	4603      	mov	r3, r0
 80172b8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 80172ba:	200b      	movs	r0, #11
 80172bc:	f7ff fd94 	bl	8016de8 <PrintKey>
    PrintKey( MC_KE_KEY );
 80172c0:	200c      	movs	r0, #12
 80172c2:	f7ff fd91 	bl	8016de8 <PrintKey>
    PrintKey( APP_S_KEY );
 80172c6:	2009      	movs	r0, #9
 80172c8:	f7ff fd8e 	bl	8016de8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80172cc:	2008      	movs	r0, #8
 80172ce:	f7ff fd8b 	bl	8016de8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 80172d2:	200a      	movs	r0, #10
 80172d4:	f7ff fd88 	bl	8016de8 <PrintKey>
    PrintIds( mode );
 80172d8:	79fb      	ldrb	r3, [r7, #7]
 80172da:	4618      	mov	r0, r3
 80172dc:	f7ff fe12 	bl	8016f04 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80172e0:	2300      	movs	r3, #0
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3708      	adds	r7, #8
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
	...

080172ec <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b088      	sub	sp, #32
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	4603      	mov	r3, r0
 80172f4:	6039      	str	r1, [r7, #0]
 80172f6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d101      	bne.n	8017302 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80172fe:	2302      	movs	r3, #2
 8017300:	e04b      	b.n	801739a <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8017302:	2300      	movs	r3, #0
 8017304:	77fb      	strb	r3, [r7, #31]
 8017306:	e044      	b.n	8017392 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8017308:	4b26      	ldr	r3, [pc, #152]	@ (80173a4 <SecureElementSetKey+0xb8>)
 801730a:	6819      	ldr	r1, [r3, #0]
 801730c:	7ffa      	ldrb	r2, [r7, #31]
 801730e:	4613      	mov	r3, r2
 8017310:	011b      	lsls	r3, r3, #4
 8017312:	4413      	add	r3, r2
 8017314:	440b      	add	r3, r1
 8017316:	3318      	adds	r3, #24
 8017318:	781b      	ldrb	r3, [r3, #0]
 801731a:	79fa      	ldrb	r2, [r7, #7]
 801731c:	429a      	cmp	r2, r3
 801731e:	d135      	bne.n	801738c <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8017320:	79fb      	ldrb	r3, [r7, #7]
 8017322:	2b0d      	cmp	r3, #13
 8017324:	d122      	bne.n	801736c <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8017326:	2306      	movs	r3, #6
 8017328:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 801732a:	f107 030c 	add.w	r3, r7, #12
 801732e:	2200      	movs	r2, #0
 8017330:	601a      	str	r2, [r3, #0]
 8017332:	605a      	str	r2, [r3, #4]
 8017334:	609a      	str	r2, [r3, #8]
 8017336:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8017338:	f107 030c 	add.w	r3, r7, #12
 801733c:	220c      	movs	r2, #12
 801733e:	2110      	movs	r1, #16
 8017340:	6838      	ldr	r0, [r7, #0]
 8017342:	f000 f877 	bl	8017434 <SecureElementAesEncrypt>
 8017346:	4603      	mov	r3, r0
 8017348:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 801734a:	4b16      	ldr	r3, [pc, #88]	@ (80173a4 <SecureElementSetKey+0xb8>)
 801734c:	6819      	ldr	r1, [r3, #0]
 801734e:	7ffa      	ldrb	r2, [r7, #31]
 8017350:	4613      	mov	r3, r2
 8017352:	011b      	lsls	r3, r3, #4
 8017354:	4413      	add	r3, r2
 8017356:	3318      	adds	r3, #24
 8017358:	440b      	add	r3, r1
 801735a:	3301      	adds	r3, #1
 801735c:	f107 010c 	add.w	r1, r7, #12
 8017360:	2210      	movs	r2, #16
 8017362:	4618      	mov	r0, r3
 8017364:	f000 fa7d 	bl	8017862 <memcpy1>
                return retval;
 8017368:	7fbb      	ldrb	r3, [r7, #30]
 801736a:	e016      	b.n	801739a <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 801736c:	4b0d      	ldr	r3, [pc, #52]	@ (80173a4 <SecureElementSetKey+0xb8>)
 801736e:	6819      	ldr	r1, [r3, #0]
 8017370:	7ffa      	ldrb	r2, [r7, #31]
 8017372:	4613      	mov	r3, r2
 8017374:	011b      	lsls	r3, r3, #4
 8017376:	4413      	add	r3, r2
 8017378:	3318      	adds	r3, #24
 801737a:	440b      	add	r3, r1
 801737c:	3301      	adds	r3, #1
 801737e:	2210      	movs	r2, #16
 8017380:	6839      	ldr	r1, [r7, #0]
 8017382:	4618      	mov	r0, r3
 8017384:	f000 fa6d 	bl	8017862 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8017388:	2300      	movs	r3, #0
 801738a:	e006      	b.n	801739a <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801738c:	7ffb      	ldrb	r3, [r7, #31]
 801738e:	3301      	adds	r3, #1
 8017390:	77fb      	strb	r3, [r7, #31]
 8017392:	7ffb      	ldrb	r3, [r7, #31]
 8017394:	2b0a      	cmp	r3, #10
 8017396:	d9b7      	bls.n	8017308 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8017398:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801739a:	4618      	mov	r0, r3
 801739c:	3720      	adds	r7, #32
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	20001234 	.word	0x20001234

080173a8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b086      	sub	sp, #24
 80173ac:	af02      	add	r7, sp, #8
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	607a      	str	r2, [r7, #4]
 80173b4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 80173b6:	78fb      	ldrb	r3, [r7, #3]
 80173b8:	2b0b      	cmp	r3, #11
 80173ba:	d901      	bls.n	80173c0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80173bc:	2303      	movs	r3, #3
 80173be:	e009      	b.n	80173d4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80173c0:	78fa      	ldrb	r2, [r7, #3]
 80173c2:	69bb      	ldr	r3, [r7, #24]
 80173c4:	9300      	str	r3, [sp, #0]
 80173c6:	4613      	mov	r3, r2
 80173c8:	687a      	ldr	r2, [r7, #4]
 80173ca:	68b9      	ldr	r1, [r7, #8]
 80173cc:	68f8      	ldr	r0, [r7, #12]
 80173ce:	f7ff fe37 	bl	8017040 <ComputeCmac>
 80173d2:	4603      	mov	r3, r0
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3710      	adds	r7, #16
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b088      	sub	sp, #32
 80173e0:	af02      	add	r7, sp, #8
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	607a      	str	r2, [r7, #4]
 80173e8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d101      	bne.n	80173f4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80173f0:	2302      	movs	r3, #2
 80173f2:	e01b      	b.n	801742c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 80173f4:	2306      	movs	r3, #6
 80173f6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 80173f8:	2300      	movs	r3, #0
 80173fa:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80173fc:	78fa      	ldrb	r2, [r7, #3]
 80173fe:	f107 0310 	add.w	r3, r7, #16
 8017402:	9300      	str	r3, [sp, #0]
 8017404:	4613      	mov	r3, r2
 8017406:	68ba      	ldr	r2, [r7, #8]
 8017408:	68f9      	ldr	r1, [r7, #12]
 801740a:	2000      	movs	r0, #0
 801740c:	f7ff fe18 	bl	8017040 <ComputeCmac>
 8017410:	4603      	mov	r3, r0
 8017412:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8017414:	7dfb      	ldrb	r3, [r7, #23]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d001      	beq.n	801741e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 801741a:	7dfb      	ldrb	r3, [r7, #23]
 801741c:	e006      	b.n	801742c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	687a      	ldr	r2, [r7, #4]
 8017422:	429a      	cmp	r2, r3
 8017424:	d001      	beq.n	801742a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8017426:	2301      	movs	r3, #1
 8017428:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 801742a:	7dfb      	ldrb	r3, [r7, #23]
}
 801742c:	4618      	mov	r0, r3
 801742e:	3718      	adds	r7, #24
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b0c2      	sub	sp, #264	@ 0x108
 8017438:	af00      	add	r7, sp, #0
 801743a:	60f8      	str	r0, [r7, #12]
 801743c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8017440:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8017444:	6001      	str	r1, [r0, #0]
 8017446:	4611      	mov	r1, r2
 8017448:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801744c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8017450:	6013      	str	r3, [r2, #0]
 8017452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017456:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 801745a:	460a      	mov	r2, r1
 801745c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d006      	beq.n	8017472 <SecureElementAesEncrypt+0x3e>
 8017464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d101      	bne.n	8017476 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8017472:	2302      	movs	r3, #2
 8017474:	e059      	b.n	801752a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8017476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801747a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	f003 030f 	and.w	r3, r3, #15
 8017484:	2b00      	cmp	r3, #0
 8017486:	d001      	beq.n	801748c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8017488:	2305      	movs	r3, #5
 801748a:	e04e      	b.n	801752a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 801748c:	f107 0314 	add.w	r3, r7, #20
 8017490:	22f0      	movs	r2, #240	@ 0xf0
 8017492:	2100      	movs	r1, #0
 8017494:	4618      	mov	r0, r3
 8017496:	f000 fa1f 	bl	80178d8 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801749a:	f107 0210 	add.w	r2, r7, #16
 801749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80174a2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	4611      	mov	r1, r2
 80174aa:	4618      	mov	r0, r3
 80174ac:	f7ff fd98 	bl	8016fe0 <GetKeyByID>
 80174b0:	4603      	mov	r3, r0
 80174b2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80174b6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d133      	bne.n	8017526 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	3301      	adds	r3, #1
 80174c2:	f107 0214 	add.w	r2, r7, #20
 80174c6:	2110      	movs	r1, #16
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7ff fb65 	bl	8016b98 <lorawan_aes_set_key>

        uint8_t block = 0;
 80174ce:	2300      	movs	r3, #0
 80174d0:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 80174d4:	e020      	b.n	8017518 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80174d6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80174da:	68fa      	ldr	r2, [r7, #12]
 80174dc:	18d0      	adds	r0, r2, r3
 80174de:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80174e2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80174e6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80174ea:	6812      	ldr	r2, [r2, #0]
 80174ec:	4413      	add	r3, r2
 80174ee:	f107 0214 	add.w	r2, r7, #20
 80174f2:	4619      	mov	r1, r3
 80174f4:	f7ff fc2e 	bl	8016d54 <lorawan_aes_encrypt>
            block = block + 16;
 80174f8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80174fc:	3310      	adds	r3, #16
 80174fe:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 8017502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017506:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801750a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801750e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8017512:	6812      	ldr	r2, [r2, #0]
 8017514:	3a10      	subs	r2, #16
 8017516:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8017518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801751c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d1d7      	bne.n	80174d6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8017526:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 801752a:	4618      	mov	r0, r3
 801752c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b088      	sub	sp, #32
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	460b      	mov	r3, r1
 801753e:	70fb      	strb	r3, [r7, #3]
 8017540:	4613      	mov	r3, r2
 8017542:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d101      	bne.n	801754e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801754a:	2302      	movs	r3, #2
 801754c:	e02d      	b.n	80175aa <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 801754e:	2306      	movs	r3, #6
 8017550:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8017552:	78bb      	ldrb	r3, [r7, #2]
 8017554:	2b0c      	cmp	r3, #12
 8017556:	d104      	bne.n	8017562 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8017558:	78fb      	ldrb	r3, [r7, #3]
 801755a:	2b0b      	cmp	r3, #11
 801755c:	d001      	beq.n	8017562 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801755e:	2303      	movs	r3, #3
 8017560:	e023      	b.n	80175aa <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8017562:	f107 030c 	add.w	r3, r7, #12
 8017566:	2200      	movs	r2, #0
 8017568:	601a      	str	r2, [r3, #0]
 801756a:	605a      	str	r2, [r3, #4]
 801756c:	609a      	str	r2, [r3, #8]
 801756e:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8017570:	f107 030c 	add.w	r3, r7, #12
 8017574:	78fa      	ldrb	r2, [r7, #3]
 8017576:	2110      	movs	r1, #16
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f7ff ff5b 	bl	8017434 <SecureElementAesEncrypt>
 801757e:	4603      	mov	r3, r0
 8017580:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8017582:	7ffb      	ldrb	r3, [r7, #31]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d001      	beq.n	801758c <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 8017588:	7ffb      	ldrb	r3, [r7, #31]
 801758a:	e00e      	b.n	80175aa <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 801758c:	f107 020c 	add.w	r2, r7, #12
 8017590:	78bb      	ldrb	r3, [r7, #2]
 8017592:	4611      	mov	r1, r2
 8017594:	4618      	mov	r0, r3
 8017596:	f7ff fea9 	bl	80172ec <SecureElementSetKey>
 801759a:	4603      	mov	r3, r0
 801759c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 801759e:	7ffb      	ldrb	r3, [r7, #31]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d001      	beq.n	80175a8 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 80175a4:	7ffb      	ldrb	r3, [r7, #31]
 80175a6:	e000      	b.n	80175aa <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 80175a8:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	3720      	adds	r7, #32
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}

080175b2 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80175b2:	b580      	push	{r7, lr}
 80175b4:	b086      	sub	sp, #24
 80175b6:	af00      	add	r7, sp, #0
 80175b8:	60b9      	str	r1, [r7, #8]
 80175ba:	607b      	str	r3, [r7, #4]
 80175bc:	4603      	mov	r3, r0
 80175be:	73fb      	strb	r3, [r7, #15]
 80175c0:	4613      	mov	r3, r2
 80175c2:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d005      	beq.n	80175d6 <SecureElementProcessJoinAccept+0x24>
 80175ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d002      	beq.n	80175d6 <SecureElementProcessJoinAccept+0x24>
 80175d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d101      	bne.n	80175da <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80175d6:	2302      	movs	r3, #2
 80175d8:	e05c      	b.n	8017694 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80175da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80175de:	2b21      	cmp	r3, #33	@ 0x21
 80175e0:	d901      	bls.n	80175e6 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80175e2:	2305      	movs	r3, #5
 80175e4:	e056      	b.n	8017694 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 80175e6:	2301      	movs	r3, #1
 80175e8:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80175ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	461a      	mov	r2, r3
 80175f2:	6879      	ldr	r1, [r7, #4]
 80175f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80175f6:	f000 f934 	bl	8017862 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	1c58      	adds	r0, r3, #1
 80175fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017602:	3b01      	subs	r3, #1
 8017604:	4619      	mov	r1, r3
 8017606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017608:	3301      	adds	r3, #1
 801760a:	7dfa      	ldrb	r2, [r7, #23]
 801760c:	f7ff ff12 	bl	8017434 <SecureElementAesEncrypt>
 8017610:	4603      	mov	r3, r0
 8017612:	2b00      	cmp	r3, #0
 8017614:	d001      	beq.n	801761a <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8017616:	2307      	movs	r3, #7
 8017618:	e03c      	b.n	8017694 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801761c:	330b      	adds	r3, #11
 801761e:	781b      	ldrb	r3, [r3, #0]
 8017620:	09db      	lsrs	r3, r3, #7
 8017622:	b2da      	uxtb	r2, r3
 8017624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017626:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8017628:	f897 3020 	ldrb.w	r3, [r7, #32]
 801762c:	3b04      	subs	r3, #4
 801762e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017630:	4413      	add	r3, r2
 8017632:	781b      	ldrb	r3, [r3, #0]
 8017634:	4619      	mov	r1, r3
 8017636:	f897 3020 	ldrb.w	r3, [r7, #32]
 801763a:	3b03      	subs	r3, #3
 801763c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801763e:	4413      	add	r3, r2
 8017640:	781b      	ldrb	r3, [r3, #0]
 8017642:	021b      	lsls	r3, r3, #8
 8017644:	ea41 0203 	orr.w	r2, r1, r3
 8017648:	f897 3020 	ldrb.w	r3, [r7, #32]
 801764c:	3b02      	subs	r3, #2
 801764e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017650:	440b      	add	r3, r1
 8017652:	781b      	ldrb	r3, [r3, #0]
 8017654:	041b      	lsls	r3, r3, #16
 8017656:	431a      	orrs	r2, r3
 8017658:	f897 3020 	ldrb.w	r3, [r7, #32]
 801765c:	3b01      	subs	r3, #1
 801765e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017660:	440b      	add	r3, r1
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	061b      	lsls	r3, r3, #24
 8017666:	4313      	orrs	r3, r2
 8017668:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 801766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801766c:	781b      	ldrb	r3, [r3, #0]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d10d      	bne.n	801768e <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8017672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017676:	3b04      	subs	r3, #4
 8017678:	4619      	mov	r1, r3
 801767a:	2301      	movs	r3, #1
 801767c:	693a      	ldr	r2, [r7, #16]
 801767e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017680:	f7ff feac 	bl	80173dc <SecureElementVerifyAesCmac>
 8017684:	4603      	mov	r3, r0
 8017686:	2b00      	cmp	r3, #0
 8017688:	d003      	beq.n	8017692 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801768a:	2301      	movs	r3, #1
 801768c:	e002      	b.n	8017694 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801768e:	2304      	movs	r3, #4
 8017690:	e000      	b.n	8017694 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 8017692:	2300      	movs	r3, #0
}
 8017694:	4618      	mov	r0, r3
 8017696:	3718      	adds	r7, #24
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}

0801769c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d101      	bne.n	80176ae <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80176aa:	2302      	movs	r3, #2
 80176ac:	e007      	b.n	80176be <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 80176ae:	4b06      	ldr	r3, [pc, #24]	@ (80176c8 <SecureElementSetDevEui+0x2c>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2208      	movs	r2, #8
 80176b4:	6879      	ldr	r1, [r7, #4]
 80176b6:	4618      	mov	r0, r3
 80176b8:	f000 f8d3 	bl	8017862 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80176bc:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80176be:	4618      	mov	r0, r3
 80176c0:	3708      	adds	r7, #8
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	bf00      	nop
 80176c8:	20001234 	.word	0x20001234

080176cc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d101      	bne.n	80176de <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80176da:	2302      	movs	r3, #2
 80176dc:	e007      	b.n	80176ee <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 80176de:	4b06      	ldr	r3, [pc, #24]	@ (80176f8 <SecureElementGetDevEui+0x2c>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	2208      	movs	r2, #8
 80176e4:	4619      	mov	r1, r3
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f000 f8bb 	bl	8017862 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80176ec:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80176ee:	4618      	mov	r0, r3
 80176f0:	3708      	adds	r7, #8
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bd80      	pop	{r7, pc}
 80176f6:	bf00      	nop
 80176f8:	20001234 	.word	0x20001234

080176fc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b082      	sub	sp, #8
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d101      	bne.n	801770e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801770a:	2302      	movs	r3, #2
 801770c:	e008      	b.n	8017720 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 801770e:	4b06      	ldr	r3, [pc, #24]	@ (8017728 <SecureElementSetJoinEui+0x2c>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	3308      	adds	r3, #8
 8017714:	2208      	movs	r2, #8
 8017716:	6879      	ldr	r1, [r7, #4]
 8017718:	4618      	mov	r0, r3
 801771a:	f000 f8a2 	bl	8017862 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801771e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8017720:	4618      	mov	r0, r3
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	20001234 	.word	0x20001234

0801772c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 801772c:	b480      	push	{r7}
 801772e:	b083      	sub	sp, #12
 8017730:	af00      	add	r7, sp, #0
 8017732:	4603      	mov	r3, r0
 8017734:	6039      	str	r1, [r7, #0]
 8017736:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8017738:	79fb      	ldrb	r3, [r7, #7]
 801773a:	2b02      	cmp	r3, #2
 801773c:	d104      	bne.n	8017748 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 801773e:	4b07      	ldr	r3, [pc, #28]	@ (801775c <SecureElementSetDevAddr+0x30>)
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	683a      	ldr	r2, [r7, #0]
 8017744:	611a      	str	r2, [r3, #16]
 8017746:	e003      	b.n	8017750 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8017748:	4b04      	ldr	r3, [pc, #16]	@ (801775c <SecureElementSetDevAddr+0x30>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	683a      	ldr	r2, [r7, #0]
 801774e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 8017750:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8017752:	4618      	mov	r0, r3
 8017754:	370c      	adds	r7, #12
 8017756:	46bd      	mov	sp, r7
 8017758:	bc80      	pop	{r7}
 801775a:	4770      	bx	lr
 801775c:	20001234 	.word	0x20001234

08017760 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b082      	sub	sp, #8
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d101      	bne.n	8017772 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801776e:	2302      	movs	r3, #2
 8017770:	e008      	b.n	8017784 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8017772:	4b06      	ldr	r3, [pc, #24]	@ (801778c <SecureElementGetJoinEui+0x2c>)
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	3308      	adds	r3, #8
 8017778:	2208      	movs	r2, #8
 801777a:	4619      	mov	r1, r3
 801777c:	6878      	ldr	r0, [r7, #4]
 801777e:	f000 f870 	bl	8017862 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8017782:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8017784:	4618      	mov	r0, r3
 8017786:	3708      	adds	r7, #8
 8017788:	46bd      	mov	sp, r7
 801778a:	bd80      	pop	{r7, pc}
 801778c:	20001234 	.word	0x20001234

08017790 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 8017790:	b480      	push	{r7}
 8017792:	b083      	sub	sp, #12
 8017794:	af00      	add	r7, sp, #0
 8017796:	4603      	mov	r3, r0
 8017798:	6039      	str	r1, [r7, #0]
 801779a:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d101      	bne.n	80177a6 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80177a2:	2302      	movs	r3, #2
 80177a4:	e00e      	b.n	80177c4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80177a6:	79fb      	ldrb	r3, [r7, #7]
 80177a8:	2b02      	cmp	r3, #2
 80177aa:	d105      	bne.n	80177b8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80177ac:	4b08      	ldr	r3, [pc, #32]	@ (80177d0 <SecureElementGetDevAddr+0x40>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	691a      	ldr	r2, [r3, #16]
 80177b2:	683b      	ldr	r3, [r7, #0]
 80177b4:	601a      	str	r2, [r3, #0]
 80177b6:	e004      	b.n	80177c2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80177b8:	4b05      	ldr	r3, [pc, #20]	@ (80177d0 <SecureElementGetDevAddr+0x40>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	695a      	ldr	r2, [r3, #20]
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80177c2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	370c      	adds	r7, #12
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bc80      	pop	{r7}
 80177cc:	4770      	bx	lr
 80177ce:	bf00      	nop
 80177d0:	20001234 	.word	0x20001234

080177d4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80177d4:	b480      	push	{r7}
 80177d6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80177d8:	4b0d      	ldr	r3, [pc, #52]	@ (8017810 <rand1+0x3c>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	4a0d      	ldr	r2, [pc, #52]	@ (8017814 <rand1+0x40>)
 80177de:	fb02 f303 	mul.w	r3, r2, r3
 80177e2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80177e6:	3339      	adds	r3, #57	@ 0x39
 80177e8:	4a09      	ldr	r2, [pc, #36]	@ (8017810 <rand1+0x3c>)
 80177ea:	6013      	str	r3, [r2, #0]
 80177ec:	4b08      	ldr	r3, [pc, #32]	@ (8017810 <rand1+0x3c>)
 80177ee:	681a      	ldr	r2, [r3, #0]
 80177f0:	2303      	movs	r3, #3
 80177f2:	fba3 1302 	umull	r1, r3, r3, r2
 80177f6:	1ad1      	subs	r1, r2, r3
 80177f8:	0849      	lsrs	r1, r1, #1
 80177fa:	440b      	add	r3, r1
 80177fc:	0f99      	lsrs	r1, r3, #30
 80177fe:	460b      	mov	r3, r1
 8017800:	07db      	lsls	r3, r3, #31
 8017802:	1a5b      	subs	r3, r3, r1
 8017804:	1ad1      	subs	r1, r2, r3
 8017806:	460b      	mov	r3, r1
}
 8017808:	4618      	mov	r0, r3
 801780a:	46bd      	mov	sp, r7
 801780c:	bc80      	pop	{r7}
 801780e:	4770      	bx	lr
 8017810:	200000d4 	.word	0x200000d4
 8017814:	41c64e6d 	.word	0x41c64e6d

08017818 <srand1>:

void srand1( uint32_t seed )
{
 8017818:	b480      	push	{r7}
 801781a:	b083      	sub	sp, #12
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
    next = seed;
 8017820:	4a03      	ldr	r2, [pc, #12]	@ (8017830 <srand1+0x18>)
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6013      	str	r3, [r2, #0]
}
 8017826:	bf00      	nop
 8017828:	370c      	adds	r7, #12
 801782a:	46bd      	mov	sp, r7
 801782c:	bc80      	pop	{r7}
 801782e:	4770      	bx	lr
 8017830:	200000d4 	.word	0x200000d4

08017834 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
 801783c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801783e:	f7ff ffc9 	bl	80177d4 <rand1>
 8017842:	4602      	mov	r2, r0
 8017844:	6839      	ldr	r1, [r7, #0]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	1acb      	subs	r3, r1, r3
 801784a:	3301      	adds	r3, #1
 801784c:	fb92 f1f3 	sdiv	r1, r2, r3
 8017850:	fb01 f303 	mul.w	r3, r1, r3
 8017854:	1ad2      	subs	r2, r2, r3
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	4413      	add	r3, r2
}
 801785a:	4618      	mov	r0, r3
 801785c:	3708      	adds	r7, #8
 801785e:	46bd      	mov	sp, r7
 8017860:	bd80      	pop	{r7, pc}

08017862 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017862:	b480      	push	{r7}
 8017864:	b085      	sub	sp, #20
 8017866:	af00      	add	r7, sp, #0
 8017868:	60f8      	str	r0, [r7, #12]
 801786a:	60b9      	str	r1, [r7, #8]
 801786c:	4613      	mov	r3, r2
 801786e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017870:	e007      	b.n	8017882 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8017872:	68ba      	ldr	r2, [r7, #8]
 8017874:	1c53      	adds	r3, r2, #1
 8017876:	60bb      	str	r3, [r7, #8]
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	1c59      	adds	r1, r3, #1
 801787c:	60f9      	str	r1, [r7, #12]
 801787e:	7812      	ldrb	r2, [r2, #0]
 8017880:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017882:	88fb      	ldrh	r3, [r7, #6]
 8017884:	1e5a      	subs	r2, r3, #1
 8017886:	80fa      	strh	r2, [r7, #6]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d1f2      	bne.n	8017872 <memcpy1+0x10>
    }
}
 801788c:	bf00      	nop
 801788e:	bf00      	nop
 8017890:	3714      	adds	r7, #20
 8017892:	46bd      	mov	sp, r7
 8017894:	bc80      	pop	{r7}
 8017896:	4770      	bx	lr

08017898 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017898:	b480      	push	{r7}
 801789a:	b085      	sub	sp, #20
 801789c:	af00      	add	r7, sp, #0
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	4613      	mov	r3, r2
 80178a4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80178a6:	88fb      	ldrh	r3, [r7, #6]
 80178a8:	3b01      	subs	r3, #1
 80178aa:	68fa      	ldr	r2, [r7, #12]
 80178ac:	4413      	add	r3, r2
 80178ae:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80178b0:	e007      	b.n	80178c2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80178b2:	68ba      	ldr	r2, [r7, #8]
 80178b4:	1c53      	adds	r3, r2, #1
 80178b6:	60bb      	str	r3, [r7, #8]
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	1e59      	subs	r1, r3, #1
 80178bc:	60f9      	str	r1, [r7, #12]
 80178be:	7812      	ldrb	r2, [r2, #0]
 80178c0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80178c2:	88fb      	ldrh	r3, [r7, #6]
 80178c4:	1e5a      	subs	r2, r3, #1
 80178c6:	80fa      	strh	r2, [r7, #6]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d1f2      	bne.n	80178b2 <memcpyr+0x1a>
    }
}
 80178cc:	bf00      	nop
 80178ce:	bf00      	nop
 80178d0:	3714      	adds	r7, #20
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bc80      	pop	{r7}
 80178d6:	4770      	bx	lr

080178d8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80178d8:	b480      	push	{r7}
 80178da:	b083      	sub	sp, #12
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	460b      	mov	r3, r1
 80178e2:	70fb      	strb	r3, [r7, #3]
 80178e4:	4613      	mov	r3, r2
 80178e6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80178e8:	e004      	b.n	80178f4 <memset1+0x1c>
    {
        *dst++ = value;
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	1c5a      	adds	r2, r3, #1
 80178ee:	607a      	str	r2, [r7, #4]
 80178f0:	78fa      	ldrb	r2, [r7, #3]
 80178f2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80178f4:	883b      	ldrh	r3, [r7, #0]
 80178f6:	1e5a      	subs	r2, r3, #1
 80178f8:	803a      	strh	r2, [r7, #0]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d1f5      	bne.n	80178ea <memset1+0x12>
    }
}
 80178fe:	bf00      	nop
 8017900:	bf00      	nop
 8017902:	370c      	adds	r7, #12
 8017904:	46bd      	mov	sp, r7
 8017906:	bc80      	pop	{r7}
 8017908:	4770      	bx	lr
	...

0801790c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801790c:	b480      	push	{r7}
 801790e:	b085      	sub	sp, #20
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
 8017914:	460b      	mov	r3, r1
 8017916:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017918:	f04f 33ff 	mov.w	r3, #4294967295
 801791c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d101      	bne.n	8017928 <Crc32+0x1c>
    {
        return 0;
 8017924:	2300      	movs	r3, #0
 8017926:	e026      	b.n	8017976 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017928:	2300      	movs	r3, #0
 801792a:	817b      	strh	r3, [r7, #10]
 801792c:	e01d      	b.n	801796a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801792e:	897b      	ldrh	r3, [r7, #10]
 8017930:	687a      	ldr	r2, [r7, #4]
 8017932:	4413      	add	r3, r2
 8017934:	781b      	ldrb	r3, [r3, #0]
 8017936:	461a      	mov	r2, r3
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	4053      	eors	r3, r2
 801793c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801793e:	2300      	movs	r3, #0
 8017940:	813b      	strh	r3, [r7, #8]
 8017942:	e00c      	b.n	801795e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	085a      	lsrs	r2, r3, #1
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	f003 0301 	and.w	r3, r3, #1
 801794e:	425b      	negs	r3, r3
 8017950:	490b      	ldr	r1, [pc, #44]	@ (8017980 <Crc32+0x74>)
 8017952:	400b      	ands	r3, r1
 8017954:	4053      	eors	r3, r2
 8017956:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017958:	893b      	ldrh	r3, [r7, #8]
 801795a:	3301      	adds	r3, #1
 801795c:	813b      	strh	r3, [r7, #8]
 801795e:	893b      	ldrh	r3, [r7, #8]
 8017960:	2b07      	cmp	r3, #7
 8017962:	d9ef      	bls.n	8017944 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017964:	897b      	ldrh	r3, [r7, #10]
 8017966:	3301      	adds	r3, #1
 8017968:	817b      	strh	r3, [r7, #10]
 801796a:	897a      	ldrh	r2, [r7, #10]
 801796c:	887b      	ldrh	r3, [r7, #2]
 801796e:	429a      	cmp	r2, r3
 8017970:	d3dd      	bcc.n	801792e <Crc32+0x22>
        }
    }

    return ~crc;
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	43db      	mvns	r3, r3
}
 8017976:	4618      	mov	r0, r3
 8017978:	3714      	adds	r7, #20
 801797a:	46bd      	mov	sp, r7
 801797c:	bc80      	pop	{r7}
 801797e:	4770      	bx	lr
 8017980:	edb88320 	.word	0xedb88320

08017984 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8017984:	b480      	push	{r7}
 8017986:	b083      	sub	sp, #12
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
 801798c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	683a      	ldr	r2, [r7, #0]
 8017992:	619a      	str	r2, [r3, #24]
}
 8017994:	bf00      	nop
 8017996:	370c      	adds	r7, #12
 8017998:	46bd      	mov	sp, r7
 801799a:	bc80      	pop	{r7}
 801799c:	4770      	bx	lr

0801799e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 801799e:	b480      	push	{r7}
 80179a0:	b083      	sub	sp, #12
 80179a2:	af00      	add	r7, sp, #0
 80179a4:	6078      	str	r0, [r7, #4]
 80179a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	683a      	ldr	r2, [r7, #0]
 80179ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80179ae:	bf00      	nop
 80179b0:	370c      	adds	r7, #12
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bc80      	pop	{r7}
 80179b6:	4770      	bx	lr

080179b8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b084      	sub	sp, #16
 80179bc:	af02      	add	r7, sp, #8
 80179be:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80179c0:	4a24      	ldr	r2, [pc, #144]	@ (8017a54 <RadioInit+0x9c>)
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80179c6:	4b24      	ldr	r3, [pc, #144]	@ (8017a58 <RadioInit+0xa0>)
 80179c8:	2200      	movs	r2, #0
 80179ca:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80179cc:	4b22      	ldr	r3, [pc, #136]	@ (8017a58 <RadioInit+0xa0>)
 80179ce:	2200      	movs	r2, #0
 80179d0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80179d2:	4b21      	ldr	r3, [pc, #132]	@ (8017a58 <RadioInit+0xa0>)
 80179d4:	2200      	movs	r2, #0
 80179d6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80179d8:	4b1f      	ldr	r3, [pc, #124]	@ (8017a58 <RadioInit+0xa0>)
 80179da:	2200      	movs	r2, #0
 80179dc:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80179de:	481f      	ldr	r0, [pc, #124]	@ (8017a5c <RadioInit+0xa4>)
 80179e0:	f001 fa38 	bl	8018e54 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80179e4:	4b1c      	ldr	r3, [pc, #112]	@ (8017a58 <RadioInit+0xa0>)
 80179e6:	2200      	movs	r2, #0
 80179e8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80179ea:	4b1b      	ldr	r3, [pc, #108]	@ (8017a58 <RadioInit+0xa0>)
 80179ec:	2200      	movs	r2, #0
 80179ee:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80179f0:	f001 fcce 	bl	8019390 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80179f4:	2100      	movs	r1, #0
 80179f6:	2000      	movs	r0, #0
 80179f8:	f002 f89a 	bl	8019b30 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80179fc:	2204      	movs	r2, #4
 80179fe:	2100      	movs	r1, #0
 8017a00:	2001      	movs	r0, #1
 8017a02:	f001 fe5d 	bl	80196c0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017a06:	2300      	movs	r3, #0
 8017a08:	2200      	movs	r2, #0
 8017a0a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017a0e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017a12:	f001 fd8d 	bl	8019530 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8017a16:	f000 fd4f 	bl	80184b8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	9300      	str	r3, [sp, #0]
 8017a1e:	4b10      	ldr	r3, [pc, #64]	@ (8017a60 <RadioInit+0xa8>)
 8017a20:	2200      	movs	r2, #0
 8017a22:	f04f 31ff 	mov.w	r1, #4294967295
 8017a26:	480f      	ldr	r0, [pc, #60]	@ (8017a64 <RadioInit+0xac>)
 8017a28:	f003 fab6 	bl	801af98 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	9300      	str	r3, [sp, #0]
 8017a30:	4b0d      	ldr	r3, [pc, #52]	@ (8017a68 <RadioInit+0xb0>)
 8017a32:	2200      	movs	r2, #0
 8017a34:	f04f 31ff 	mov.w	r1, #4294967295
 8017a38:	480c      	ldr	r0, [pc, #48]	@ (8017a6c <RadioInit+0xb4>)
 8017a3a:	f003 faad 	bl	801af98 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017a3e:	4809      	ldr	r0, [pc, #36]	@ (8017a64 <RadioInit+0xac>)
 8017a40:	f003 fb4e 	bl	801b0e0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017a44:	4809      	ldr	r0, [pc, #36]	@ (8017a6c <RadioInit+0xb4>)
 8017a46:	f003 fb4b 	bl	801b0e0 <UTIL_TIMER_Stop>
}
 8017a4a:	bf00      	nop
 8017a4c:	3708      	adds	r7, #8
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bd80      	pop	{r7, pc}
 8017a52:	bf00      	nop
 8017a54:	20001338 	.word	0x20001338
 8017a58:	2000133c 	.word	0x2000133c
 8017a5c:	080188dd 	.word	0x080188dd
 8017a60:	0801884d 	.word	0x0801884d
 8017a64:	20001398 	.word	0x20001398
 8017a68:	08018861 	.word	0x08018861
 8017a6c:	200013b0 	.word	0x200013b0

08017a70 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017a74:	f001 fa36 	bl	8018ee4 <SUBGRF_GetOperatingMode>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	2b07      	cmp	r3, #7
 8017a7c:	d00a      	beq.n	8017a94 <RadioGetStatus+0x24>
 8017a7e:	2b07      	cmp	r3, #7
 8017a80:	dc0a      	bgt.n	8017a98 <RadioGetStatus+0x28>
 8017a82:	2b04      	cmp	r3, #4
 8017a84:	d002      	beq.n	8017a8c <RadioGetStatus+0x1c>
 8017a86:	2b05      	cmp	r3, #5
 8017a88:	d002      	beq.n	8017a90 <RadioGetStatus+0x20>
 8017a8a:	e005      	b.n	8017a98 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017a8c:	2302      	movs	r3, #2
 8017a8e:	e004      	b.n	8017a9a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017a90:	2301      	movs	r3, #1
 8017a92:	e002      	b.n	8017a9a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017a94:	2303      	movs	r3, #3
 8017a96:	e000      	b.n	8017a9a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017a98:	2300      	movs	r3, #0
    }
}
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	bd80      	pop	{r7, pc}
	...

08017aa0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8017b24 <RadioSetModem+0x84>)
 8017aac:	79fb      	ldrb	r3, [r7, #7]
 8017aae:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017ab0:	79fb      	ldrb	r3, [r7, #7]
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f002 fc02 	bl	801a2bc <RFW_SetRadioModem>
    switch( modem )
 8017ab8:	79fb      	ldrb	r3, [r7, #7]
 8017aba:	2b03      	cmp	r3, #3
 8017abc:	d026      	beq.n	8017b0c <RadioSetModem+0x6c>
 8017abe:	2b03      	cmp	r3, #3
 8017ac0:	dc03      	bgt.n	8017aca <RadioSetModem+0x2a>
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d008      	beq.n	8017ad8 <RadioSetModem+0x38>
 8017ac6:	2b01      	cmp	r3, #1
 8017ac8:	d00d      	beq.n	8017ae6 <RadioSetModem+0x46>
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017aca:	2003      	movs	r0, #3
 8017acc:	f001 fdd2 	bl	8019674 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017ad0:	4b14      	ldr	r3, [pc, #80]	@ (8017b24 <RadioSetModem+0x84>)
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	735a      	strb	r2, [r3, #13]
        break;
 8017ad6:	e021      	b.n	8017b1c <RadioSetModem+0x7c>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017ad8:	2000      	movs	r0, #0
 8017ada:	f001 fdcb 	bl	8019674 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017ade:	4b11      	ldr	r3, [pc, #68]	@ (8017b24 <RadioSetModem+0x84>)
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	735a      	strb	r2, [r3, #13]
        break;
 8017ae4:	e01a      	b.n	8017b1c <RadioSetModem+0x7c>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017ae6:	2001      	movs	r0, #1
 8017ae8:	f001 fdc4 	bl	8019674 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017aec:	4b0d      	ldr	r3, [pc, #52]	@ (8017b24 <RadioSetModem+0x84>)
 8017aee:	7b5a      	ldrb	r2, [r3, #13]
 8017af0:	4b0c      	ldr	r3, [pc, #48]	@ (8017b24 <RadioSetModem+0x84>)
 8017af2:	7b1b      	ldrb	r3, [r3, #12]
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d010      	beq.n	8017b1a <RadioSetModem+0x7a>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017af8:	4b0a      	ldr	r3, [pc, #40]	@ (8017b24 <RadioSetModem+0x84>)
 8017afa:	7b1a      	ldrb	r2, [r3, #12]
 8017afc:	4b09      	ldr	r3, [pc, #36]	@ (8017b24 <RadioSetModem+0x84>)
 8017afe:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017b00:	4b08      	ldr	r3, [pc, #32]	@ (8017b24 <RadioSetModem+0x84>)
 8017b02:	7b5b      	ldrb	r3, [r3, #13]
 8017b04:	4618      	mov	r0, r3
 8017b06:	f000 fe6b 	bl	80187e0 <RadioSetPublicNetwork>
        }
        break;
 8017b0a:	e006      	b.n	8017b1a <RadioSetModem+0x7a>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017b0c:	2002      	movs	r0, #2
 8017b0e:	f001 fdb1 	bl	8019674 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017b12:	4b04      	ldr	r3, [pc, #16]	@ (8017b24 <RadioSetModem+0x84>)
 8017b14:	2200      	movs	r2, #0
 8017b16:	735a      	strb	r2, [r3, #13]
        break;
 8017b18:	e000      	b.n	8017b1c <RadioSetModem+0x7c>
        break;
 8017b1a:	bf00      	nop
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
        break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017b1c:	bf00      	nop
 8017b1e:	3708      	adds	r7, #8
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}
 8017b24:	2000133c 	.word	0x2000133c

08017b28 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017b30:	6878      	ldr	r0, [r7, #4]
 8017b32:	f001 fd59 	bl	80195e8 <SUBGRF_SetRfFrequency>
}
 8017b36:	bf00      	nop
 8017b38:	3708      	adds	r7, #8
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}

08017b3e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017b3e:	b580      	push	{r7, lr}
 8017b40:	b090      	sub	sp, #64	@ 0x40
 8017b42:	af0a      	add	r7, sp, #40	@ 0x28
 8017b44:	60f8      	str	r0, [r7, #12]
 8017b46:	60b9      	str	r1, [r7, #8]
 8017b48:	603b      	str	r3, [r7, #0]
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017b4e:	2301      	movs	r3, #1
 8017b50:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017b52:	2300      	movs	r3, #0
 8017b54:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017b56:	2300      	movs	r3, #0
 8017b58:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8017b5a:	f000 fcc0 	bl	80184de <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017b5e:	2000      	movs	r0, #0
 8017b60:	f7ff ff9e 	bl	8017aa0 <RadioSetModem>

    RadioSetChannel( freq );
 8017b64:	68f8      	ldr	r0, [r7, #12]
 8017b66:	f7ff ffdf 	bl	8017b28 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017b6a:	2301      	movs	r3, #1
 8017b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b6e:	2300      	movs	r3, #0
 8017b70:	9308      	str	r3, [sp, #32]
 8017b72:	2300      	movs	r3, #0
 8017b74:	9307      	str	r3, [sp, #28]
 8017b76:	2300      	movs	r3, #0
 8017b78:	9306      	str	r3, [sp, #24]
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	9305      	str	r3, [sp, #20]
 8017b7e:	2300      	movs	r3, #0
 8017b80:	9304      	str	r3, [sp, #16]
 8017b82:	2300      	movs	r3, #0
 8017b84:	9303      	str	r3, [sp, #12]
 8017b86:	2300      	movs	r3, #0
 8017b88:	9302      	str	r3, [sp, #8]
 8017b8a:	2303      	movs	r3, #3
 8017b8c:	9301      	str	r3, [sp, #4]
 8017b8e:	68bb      	ldr	r3, [r7, #8]
 8017b90:	9300      	str	r3, [sp, #0]
 8017b92:	2300      	movs	r3, #0
 8017b94:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017b98:	68b9      	ldr	r1, [r7, #8]
 8017b9a:	2000      	movs	r0, #0
 8017b9c:	f000 f83c 	bl	8017c18 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017ba0:	2000      	movs	r0, #0
 8017ba2:	f000 fca3 	bl	80184ec <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017ba6:	f000 fe49 	bl	801883c <RadioGetWakeupTime>
 8017baa:	4603      	mov	r3, r0
 8017bac:	4618      	mov	r0, r3
 8017bae:	f7e9 fe6f 	bl	8001890 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017bb2:	f003 fb2f 	bl	801b214 <UTIL_TIMER_GetCurrentTime>
 8017bb6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017bb8:	e00d      	b.n	8017bd6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017bba:	2000      	movs	r0, #0
 8017bbc:	f000 fd90 	bl	80186e0 <RadioRssi>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017bc4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	dd02      	ble.n	8017bd6 <RadioIsChannelFree+0x98>
        {
            status = false;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	75fb      	strb	r3, [r7, #23]
            break;
 8017bd4:	e006      	b.n	8017be4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017bd6:	6938      	ldr	r0, [r7, #16]
 8017bd8:	f003 fb2e 	bl	801b238 <UTIL_TIMER_GetElapsedTime>
 8017bdc:	4602      	mov	r2, r0
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	4293      	cmp	r3, r2
 8017be2:	d8ea      	bhi.n	8017bba <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8017be4:	f000 fc7b 	bl	80184de <RadioStandby>

    return status;
 8017be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3718      	adds	r7, #24
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b082      	sub	sp, #8
 8017bf6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	2200      	movs	r2, #0
 8017c00:	2100      	movs	r1, #0
 8017c02:	2000      	movs	r0, #0
 8017c04:	f001 fc94 	bl	8019530 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017c08:	f001 fa3d 	bl	8019086 <SUBGRF_GetRandom>
 8017c0c:	6078      	str	r0, [r7, #4]

    return rnd;
 8017c0e:	687b      	ldr	r3, [r7, #4]
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	3708      	adds	r7, #8
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b086      	sub	sp, #24
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	60b9      	str	r1, [r7, #8]
 8017c20:	607a      	str	r2, [r7, #4]
 8017c22:	461a      	mov	r2, r3
 8017c24:	4603      	mov	r3, r0
 8017c26:	73fb      	strb	r3, [r7, #15]
 8017c28:	4613      	mov	r3, r2
 8017c2a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017c2c:	4a93      	ldr	r2, [pc, #588]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017c2e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017c32:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8017c34:	f002 fb00 	bl	801a238 <RFW_DeInit>
    if( rxContinuous == true )
 8017c38:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d001      	beq.n	8017c44 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017c40:	2300      	movs	r3, #0
 8017c42:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
    if( fixLen == true )
 8017c44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d004      	beq.n	8017c56 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017c4c:	4a8c      	ldr	r2, [pc, #560]	@ (8017e80 <RadioSetRxConfig+0x268>)
 8017c4e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017c52:	7013      	strb	r3, [r2, #0]
 8017c54:	e002      	b.n	8017c5c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017c56:	4b8a      	ldr	r3, [pc, #552]	@ (8017e80 <RadioSetRxConfig+0x268>)
 8017c58:	22ff      	movs	r2, #255	@ 0xff
 8017c5a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017c5c:	7bfb      	ldrb	r3, [r7, #15]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d002      	beq.n	8017c68 <RadioSetRxConfig+0x50>
 8017c62:	2b01      	cmp	r3, #1
 8017c64:	d068      	beq.n	8017d38 <RadioSetRxConfig+0x120>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017c66:	e105      	b.n	8017e74 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017c68:	2000      	movs	r0, #0
 8017c6a:	f001 fb53 	bl	8019314 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017c6e:	4b83      	ldr	r3, [pc, #524]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017c70:	2200      	movs	r2, #0
 8017c72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017c76:	4a81      	ldr	r2, [pc, #516]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017c7c:	4b7f      	ldr	r3, [pc, #508]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017c7e:	220b      	movs	r2, #11
 8017c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017c84:	68b8      	ldr	r0, [r7, #8]
 8017c86:	f002 fa17 	bl	801a0b8 <SUBGRF_GetFskBandwidthRegValue>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017c94:	4b79      	ldr	r3, [pc, #484]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017c96:	2200      	movs	r2, #0
 8017c98:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c9c:	00db      	lsls	r3, r3, #3
 8017c9e:	b29a      	uxth	r2, r3
 8017ca0:	4b76      	ldr	r3, [pc, #472]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017ca2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017ca4:	4b75      	ldr	r3, [pc, #468]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017ca6:	2204      	movs	r2, #4
 8017ca8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017caa:	4b74      	ldr	r3, [pc, #464]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017cac:	2218      	movs	r2, #24
 8017cae:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017cb0:	4b72      	ldr	r3, [pc, #456]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017cba:	f083 0301 	eor.w	r3, r3, #1
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017cc4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8017e80 <RadioSetRxConfig+0x268>)
 8017cc8:	781a      	ldrb	r2, [r3, #0]
 8017cca:	4b6c      	ldr	r3, [pc, #432]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017ccc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017cce:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d003      	beq.n	8017cde <RadioSetRxConfig+0xc6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017cd6:	4b69      	ldr	r3, [pc, #420]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017cd8:	22f2      	movs	r2, #242	@ 0xf2
 8017cda:	75da      	strb	r2, [r3, #23]
 8017cdc:	e002      	b.n	8017ce4 <RadioSetRxConfig+0xcc>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017cde:	4b67      	ldr	r3, [pc, #412]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017ce4:	4b65      	ldr	r3, [pc, #404]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017ce6:	2201      	movs	r2, #1
 8017ce8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017cea:	f000 fbf8 	bl	80184de <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017cee:	2000      	movs	r0, #0
 8017cf0:	f7ff fed6 	bl	8017aa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017cf4:	4863      	ldr	r0, [pc, #396]	@ (8017e84 <RadioSetRxConfig+0x26c>)
 8017cf6:	f001 fdb1 	bl	801985c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017cfa:	4863      	ldr	r0, [pc, #396]	@ (8017e88 <RadioSetRxConfig+0x270>)
 8017cfc:	f001 fe7c 	bl	80199f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017d00:	4a62      	ldr	r2, [pc, #392]	@ (8017e8c <RadioSetRxConfig+0x274>)
 8017d02:	f107 0310 	add.w	r3, r7, #16
 8017d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d0e:	f107 0310 	add.w	r3, r7, #16
 8017d12:	4618      	mov	r0, r3
 8017d14:	f001 f935 	bl	8018f82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017d18:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017d1c:	f001 f980 	bl	8019020 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017d20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017d22:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017d26:	fb02 f303 	mul.w	r3, r2, r3
 8017d2a:	461a      	mov	r2, r3
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d32:	4a52      	ldr	r2, [pc, #328]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d34:	6093      	str	r3, [r2, #8]
            break;
 8017d36:	e09d      	b.n	8017e74 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017d38:	2000      	movs	r0, #0
 8017d3a:	f001 faeb 	bl	8019314 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d40:	2201      	movs	r2, #1
 8017d42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	b2da      	uxtb	r2, r3
 8017d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017d50:	4a4f      	ldr	r2, [pc, #316]	@ (8017e90 <RadioSetRxConfig+0x278>)
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	4413      	add	r3, r2
 8017d56:	781a      	ldrb	r2, [r3, #0]
 8017d58:	4b48      	ldr	r3, [pc, #288]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017d5e:	4a47      	ldr	r2, [pc, #284]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d60:	7bbb      	ldrb	r3, [r7, #14]
 8017d62:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d105      	bne.n	8017d78 <RadioSetRxConfig+0x160>
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2b0b      	cmp	r3, #11
 8017d70:	d008      	beq.n	8017d84 <RadioSetRxConfig+0x16c>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2b0c      	cmp	r3, #12
 8017d76:	d005      	beq.n	8017d84 <RadioSetRxConfig+0x16c>
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	2b01      	cmp	r3, #1
 8017d7c:	d107      	bne.n	8017d8e <RadioSetRxConfig+0x176>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2b0c      	cmp	r3, #12
 8017d82:	d104      	bne.n	8017d8e <RadioSetRxConfig+0x176>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017d84:	4b3d      	ldr	r3, [pc, #244]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d86:	2201      	movs	r2, #1
 8017d88:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017d8c:	e003      	b.n	8017d96 <RadioSetRxConfig+0x17e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d90:	2200      	movs	r2, #0
 8017d92:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017d96:	4b39      	ldr	r3, [pc, #228]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d98:	2201      	movs	r2, #1
 8017d9a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017d9c:	4b37      	ldr	r3, [pc, #220]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017da2:	2b05      	cmp	r3, #5
 8017da4:	d004      	beq.n	8017db0 <RadioSetRxConfig+0x198>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017da6:	4b35      	ldr	r3, [pc, #212]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017da8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017dac:	2b06      	cmp	r3, #6
 8017dae:	d10a      	bne.n	8017dc6 <RadioSetRxConfig+0x1ae>
                if( preambleLen < 12 )
 8017db0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017db2:	2b0b      	cmp	r3, #11
 8017db4:	d803      	bhi.n	8017dbe <RadioSetRxConfig+0x1a6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017db6:	4b31      	ldr	r3, [pc, #196]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017db8:	220c      	movs	r2, #12
 8017dba:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017dbc:	e006      	b.n	8017dcc <RadioSetRxConfig+0x1b4>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017dc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dc2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017dc4:	e002      	b.n	8017dcc <RadioSetRxConfig+0x1b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017dc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dca:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017dcc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017dd2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8017e80 <RadioSetRxConfig+0x268>)
 8017dd6:	781a      	ldrb	r2, [r3, #0]
 8017dd8:	4b28      	ldr	r3, [pc, #160]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017dda:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017ddc:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8017de0:	4b26      	ldr	r3, [pc, #152]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017de2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017de6:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8017dea:	4b24      	ldr	r3, [pc, #144]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017dec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017df0:	f000 fb75 	bl	80184de <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017df4:	2001      	movs	r0, #1
 8017df6:	f7ff fe53 	bl	8017aa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017dfa:	4822      	ldr	r0, [pc, #136]	@ (8017e84 <RadioSetRxConfig+0x26c>)
 8017dfc:	f001 fd2e 	bl	801985c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e00:	4821      	ldr	r0, [pc, #132]	@ (8017e88 <RadioSetRxConfig+0x270>)
 8017e02:	f001 fdf9 	bl	80199f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017e06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017e08:	b2db      	uxtb	r3, r3
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f001 fa91 	bl	8019332 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8017e10:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017e14:	f001 ff4a 	bl	8019cac <SUBGRF_ReadRegister>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	f003 0301 	and.w	r3, r3, #1
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	4619      	mov	r1, r3
 8017e22:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017e26:	f001 ff2d 	bl	8019c84 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017e2a:	4b14      	ldr	r3, [pc, #80]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017e2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017e30:	2b01      	cmp	r3, #1
 8017e32:	d10d      	bne.n	8017e50 <RadioSetRxConfig+0x238>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017e34:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e38:	f001 ff38 	bl	8019cac <SUBGRF_ReadRegister>
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	f023 0304 	bic.w	r3, r3, #4
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	4619      	mov	r1, r3
 8017e46:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e4a:	f001 ff1b 	bl	8019c84 <SUBGRF_WriteRegister>
 8017e4e:	e00c      	b.n	8017e6a <RadioSetRxConfig+0x252>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017e50:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e54:	f001 ff2a 	bl	8019cac <SUBGRF_ReadRegister>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	f043 0304 	orr.w	r3, r3, #4
 8017e5e:	b2db      	uxtb	r3, r3
 8017e60:	4619      	mov	r1, r3
 8017e62:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e66:	f001 ff0d 	bl	8019c84 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017e6a:	4b04      	ldr	r3, [pc, #16]	@ (8017e7c <RadioSetRxConfig+0x264>)
 8017e6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e70:	609a      	str	r2, [r3, #8]
            break;
 8017e72:	bf00      	nop
    }
}
 8017e74:	bf00      	nop
 8017e76:	3718      	adds	r7, #24
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}
 8017e7c:	2000133c 	.word	0x2000133c
 8017e80:	200000d8 	.word	0x200000d8
 8017e84:	20001374 	.word	0x20001374
 8017e88:	2000134a 	.word	0x2000134a
 8017e8c:	0802182c 	.word	0x0802182c
 8017e90:	08022018 	.word	0x08022018

08017e94 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b086      	sub	sp, #24
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	60ba      	str	r2, [r7, #8]
 8017e9c:	607b      	str	r3, [r7, #4]
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	73fb      	strb	r3, [r7, #15]
 8017ea2:	460b      	mov	r3, r1
 8017ea4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8017ea6:	f002 f9c7 	bl	801a238 <RFW_DeInit>
    switch( modem )
 8017eaa:	7bfb      	ldrb	r3, [r7, #15]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d002      	beq.n	8017eb6 <RadioSetTxConfig+0x22>
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d059      	beq.n	8017f68 <RadioSetTxConfig+0xd4>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017eb4:	e0be      	b.n	8018034 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017eb6:	4b6d      	ldr	r3, [pc, #436]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017eb8:	2200      	movs	r2, #0
 8017eba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017ebe:	4a6b      	ldr	r2, [pc, #428]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ec0:	6a3b      	ldr	r3, [r7, #32]
 8017ec2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017ec4:	4b69      	ldr	r3, [pc, #420]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ec6:	220b      	movs	r2, #11
 8017ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f002 f8f3 	bl	801a0b8 <SUBGRF_GetFskBandwidthRegValue>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	4b65      	ldr	r3, [pc, #404]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017edc:	4a63      	ldr	r2, [pc, #396]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ede:	68bb      	ldr	r3, [r7, #8]
 8017ee0:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017ee2:	4b62      	ldr	r3, [pc, #392]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017ee8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017eea:	00db      	lsls	r3, r3, #3
 8017eec:	b29a      	uxth	r2, r3
 8017eee:	4b5f      	ldr	r3, [pc, #380]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ef0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017ef2:	4b5e      	ldr	r3, [pc, #376]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ef4:	2204      	movs	r2, #4
 8017ef6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017ef8:	4b5c      	ldr	r3, [pc, #368]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017efa:	2218      	movs	r2, #24
 8017efc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017efe:	4b5b      	ldr	r3, [pc, #364]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f00:	2200      	movs	r2, #0
 8017f02:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017f04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017f08:	f083 0301 	eor.w	r3, r3, #1
 8017f0c:	b2db      	uxtb	r3, r3
 8017f0e:	461a      	mov	r2, r3
 8017f10:	4b56      	ldr	r3, [pc, #344]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f12:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017f14:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d003      	beq.n	8017f24 <RadioSetTxConfig+0x90>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017f1c:	4b53      	ldr	r3, [pc, #332]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f1e:	22f2      	movs	r2, #242	@ 0xf2
 8017f20:	75da      	strb	r2, [r3, #23]
 8017f22:	e002      	b.n	8017f2a <RadioSetTxConfig+0x96>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017f24:	4b51      	ldr	r3, [pc, #324]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f26:	2201      	movs	r2, #1
 8017f28:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017f2a:	4b50      	ldr	r3, [pc, #320]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017f30:	f000 fad5 	bl	80184de <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017f34:	2000      	movs	r0, #0
 8017f36:	f7ff fdb3 	bl	8017aa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017f3a:	484d      	ldr	r0, [pc, #308]	@ (8018070 <RadioSetTxConfig+0x1dc>)
 8017f3c:	f001 fc8e 	bl	801985c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f40:	484c      	ldr	r0, [pc, #304]	@ (8018074 <RadioSetTxConfig+0x1e0>)
 8017f42:	f001 fd59 	bl	80199f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017f46:	4a4c      	ldr	r2, [pc, #304]	@ (8018078 <RadioSetTxConfig+0x1e4>)
 8017f48:	f107 0310 	add.w	r3, r7, #16
 8017f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f50:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f54:	f107 0310 	add.w	r3, r7, #16
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f001 f812 	bl	8018f82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017f5e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017f62:	f001 f85d 	bl	8019020 <SUBGRF_SetWhiteningSeed>
            break;
 8017f66:	e065      	b.n	8018034 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017f68:	4b40      	ldr	r3, [pc, #256]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f6a:	2201      	movs	r2, #1
 8017f6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017f70:	6a3b      	ldr	r3, [r7, #32]
 8017f72:	b2da      	uxtb	r2, r3
 8017f74:	4b3d      	ldr	r3, [pc, #244]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017f7a:	4a40      	ldr	r2, [pc, #256]	@ (801807c <RadioSetTxConfig+0x1e8>)
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	4413      	add	r3, r2
 8017f80:	781a      	ldrb	r2, [r3, #0]
 8017f82:	4b3a      	ldr	r3, [pc, #232]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017f88:	4a38      	ldr	r2, [pc, #224]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017f8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017f8e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d105      	bne.n	8017fa4 <RadioSetTxConfig+0x110>
 8017f98:	6a3b      	ldr	r3, [r7, #32]
 8017f9a:	2b0b      	cmp	r3, #11
 8017f9c:	d008      	beq.n	8017fb0 <RadioSetTxConfig+0x11c>
 8017f9e:	6a3b      	ldr	r3, [r7, #32]
 8017fa0:	2b0c      	cmp	r3, #12
 8017fa2:	d005      	beq.n	8017fb0 <RadioSetTxConfig+0x11c>
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	2b01      	cmp	r3, #1
 8017fa8:	d107      	bne.n	8017fba <RadioSetTxConfig+0x126>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017faa:	6a3b      	ldr	r3, [r7, #32]
 8017fac:	2b0c      	cmp	r3, #12
 8017fae:	d104      	bne.n	8017fba <RadioSetTxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017fb0:	4b2e      	ldr	r3, [pc, #184]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017fb2:	2201      	movs	r2, #1
 8017fb4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017fb8:	e003      	b.n	8017fc2 <RadioSetTxConfig+0x12e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017fba:	4b2c      	ldr	r3, [pc, #176]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017fc2:	4b2a      	ldr	r3, [pc, #168]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017fc4:	2201      	movs	r2, #1
 8017fc6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017fc8:	4b28      	ldr	r3, [pc, #160]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017fca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017fce:	2b05      	cmp	r3, #5
 8017fd0:	d004      	beq.n	8017fdc <RadioSetTxConfig+0x148>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017fd2:	4b26      	ldr	r3, [pc, #152]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017fd8:	2b06      	cmp	r3, #6
 8017fda:	d10a      	bne.n	8017ff2 <RadioSetTxConfig+0x15e>
                if( preambleLen < 12 )
 8017fdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017fde:	2b0b      	cmp	r3, #11
 8017fe0:	d803      	bhi.n	8017fea <RadioSetTxConfig+0x156>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017fe2:	4b22      	ldr	r3, [pc, #136]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017fe4:	220c      	movs	r2, #12
 8017fe6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017fe8:	e006      	b.n	8017ff8 <RadioSetTxConfig+0x164>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017fea:	4a20      	ldr	r2, [pc, #128]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017fec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017fee:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017ff0:	e002      	b.n	8017ff8 <RadioSetTxConfig+0x164>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017ff2:	4a1e      	ldr	r2, [pc, #120]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ff4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017ff6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017ff8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017ffc:	4b1b      	ldr	r3, [pc, #108]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8017ffe:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018000:	4b1f      	ldr	r3, [pc, #124]	@ (8018080 <RadioSetTxConfig+0x1ec>)
 8018002:	781a      	ldrb	r2, [r3, #0]
 8018004:	4b19      	ldr	r3, [pc, #100]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8018006:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018008:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801800c:	4b17      	ldr	r3, [pc, #92]	@ (801806c <RadioSetTxConfig+0x1d8>)
 801800e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018012:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018016:	4b15      	ldr	r3, [pc, #84]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8018018:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801801c:	f000 fa5f 	bl	80184de <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018020:	2001      	movs	r0, #1
 8018022:	f7ff fd3d 	bl	8017aa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018026:	4812      	ldr	r0, [pc, #72]	@ (8018070 <RadioSetTxConfig+0x1dc>)
 8018028:	f001 fc18 	bl	801985c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801802c:	4811      	ldr	r0, [pc, #68]	@ (8018074 <RadioSetTxConfig+0x1e0>)
 801802e:	f001 fce3 	bl	80199f8 <SUBGRF_SetPacketParams>
            break;
 8018032:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018038:	4618      	mov	r0, r3
 801803a:	f001 ff3f 	bl	8019ebc <SUBGRF_SetRfTxPower>
 801803e:	4603      	mov	r3, r0
 8018040:	461a      	mov	r2, r3
 8018042:	4b0a      	ldr	r3, [pc, #40]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8018044:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018048:	210e      	movs	r1, #14
 801804a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801804e:	f001 fe19 	bl	8019c84 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018052:	4b06      	ldr	r3, [pc, #24]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8018054:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018058:	4618      	mov	r0, r3
 801805a:	f002 f901 	bl	801a260 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801805e:	4a03      	ldr	r2, [pc, #12]	@ (801806c <RadioSetTxConfig+0x1d8>)
 8018060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018062:	6053      	str	r3, [r2, #4]
}
 8018064:	bf00      	nop
 8018066:	3718      	adds	r7, #24
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}
 801806c:	2000133c 	.word	0x2000133c
 8018070:	20001374 	.word	0x20001374
 8018074:	2000134a 	.word	0x2000134a
 8018078:	0802182c 	.word	0x0802182c
 801807c:	08022018 	.word	0x08022018
 8018080:	200000d8 	.word	0x200000d8

08018084 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018084:	b480      	push	{r7}
 8018086:	b083      	sub	sp, #12
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
    return true;
 801808c:	2301      	movs	r3, #1
}
 801808e:	4618      	mov	r0, r3
 8018090:	370c      	adds	r7, #12
 8018092:	46bd      	mov	sp, r7
 8018094:	bc80      	pop	{r7}
 8018096:	4770      	bx	lr

08018098 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018098:	b480      	push	{r7}
 801809a:	b085      	sub	sp, #20
 801809c:	af00      	add	r7, sp, #0
 801809e:	4603      	mov	r3, r0
 80180a0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80180a2:	2300      	movs	r3, #0
 80180a4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80180a6:	79fb      	ldrb	r3, [r7, #7]
 80180a8:	2b0a      	cmp	r3, #10
 80180aa:	d83e      	bhi.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
 80180ac:	a201      	add	r2, pc, #4	@ (adr r2, 80180b4 <RadioGetLoRaBandwidthInHz+0x1c>)
 80180ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180b2:	bf00      	nop
 80180b4:	080180e1 	.word	0x080180e1
 80180b8:	080180f1 	.word	0x080180f1
 80180bc:	08018101 	.word	0x08018101
 80180c0:	08018111 	.word	0x08018111
 80180c4:	08018119 	.word	0x08018119
 80180c8:	0801811f 	.word	0x0801811f
 80180cc:	08018125 	.word	0x08018125
 80180d0:	0801812b 	.word	0x0801812b
 80180d4:	080180e9 	.word	0x080180e9
 80180d8:	080180f9 	.word	0x080180f9
 80180dc:	08018109 	.word	0x08018109
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80180e0:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80180e4:	60fb      	str	r3, [r7, #12]
        break;
 80180e6:	e020      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80180e8:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80180ec:	60fb      	str	r3, [r7, #12]
        break;
 80180ee:	e01c      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80180f0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80180f4:	60fb      	str	r3, [r7, #12]
        break;
 80180f6:	e018      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80180f8:	f245 1361 	movw	r3, #20833	@ 0x5161
 80180fc:	60fb      	str	r3, [r7, #12]
        break;
 80180fe:	e014      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018100:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018104:	60fb      	str	r3, [r7, #12]
        break;
 8018106:	e010      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018108:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 801810c:	60fb      	str	r3, [r7, #12]
        break;
 801810e:	e00c      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018110:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018114:	60fb      	str	r3, [r7, #12]
        break;
 8018116:	e008      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018118:	4b07      	ldr	r3, [pc, #28]	@ (8018138 <RadioGetLoRaBandwidthInHz+0xa0>)
 801811a:	60fb      	str	r3, [r7, #12]
        break;
 801811c:	e005      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801811e:	4b07      	ldr	r3, [pc, #28]	@ (801813c <RadioGetLoRaBandwidthInHz+0xa4>)
 8018120:	60fb      	str	r3, [r7, #12]
        break;
 8018122:	e002      	b.n	801812a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018124:	4b06      	ldr	r3, [pc, #24]	@ (8018140 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018126:	60fb      	str	r3, [r7, #12]
        break;
 8018128:	bf00      	nop
    }

    return bandwidthInHz;
 801812a:	68fb      	ldr	r3, [r7, #12]
}
 801812c:	4618      	mov	r0, r3
 801812e:	3714      	adds	r7, #20
 8018130:	46bd      	mov	sp, r7
 8018132:	bc80      	pop	{r7}
 8018134:	4770      	bx	lr
 8018136:	bf00      	nop
 8018138:	0001e848 	.word	0x0001e848
 801813c:	0003d090 	.word	0x0003d090
 8018140:	0007a120 	.word	0x0007a120

08018144 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018144:	b480      	push	{r7}
 8018146:	b083      	sub	sp, #12
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
 801814c:	4608      	mov	r0, r1
 801814e:	4611      	mov	r1, r2
 8018150:	461a      	mov	r2, r3
 8018152:	4603      	mov	r3, r0
 8018154:	70fb      	strb	r3, [r7, #3]
 8018156:	460b      	mov	r3, r1
 8018158:	803b      	strh	r3, [r7, #0]
 801815a:	4613      	mov	r3, r2
 801815c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801815e:	883b      	ldrh	r3, [r7, #0]
 8018160:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018162:	78ba      	ldrb	r2, [r7, #2]
 8018164:	f082 0201 	eor.w	r2, r2, #1
 8018168:	b2d2      	uxtb	r2, r2
 801816a:	2a00      	cmp	r2, #0
 801816c:	d001      	beq.n	8018172 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801816e:	2208      	movs	r2, #8
 8018170:	e000      	b.n	8018174 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018172:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018174:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018176:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801817a:	7c3b      	ldrb	r3, [r7, #16]
 801817c:	7d39      	ldrb	r1, [r7, #20]
 801817e:	2900      	cmp	r1, #0
 8018180:	d001      	beq.n	8018186 <RadioGetGfskTimeOnAirNumerator+0x42>
 8018182:	2102      	movs	r1, #2
 8018184:	e000      	b.n	8018188 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018186:	2100      	movs	r1, #0
 8018188:	440b      	add	r3, r1
 801818a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801818c:	4413      	add	r3, r2
}
 801818e:	4618      	mov	r0, r3
 8018190:	370c      	adds	r7, #12
 8018192:	46bd      	mov	sp, r7
 8018194:	bc80      	pop	{r7}
 8018196:	4770      	bx	lr

08018198 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018198:	b480      	push	{r7}
 801819a:	b08b      	sub	sp, #44	@ 0x2c
 801819c:	af00      	add	r7, sp, #0
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	4611      	mov	r1, r2
 80181a4:	461a      	mov	r2, r3
 80181a6:	460b      	mov	r3, r1
 80181a8:	71fb      	strb	r3, [r7, #7]
 80181aa:	4613      	mov	r3, r2
 80181ac:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80181ae:	79fb      	ldrb	r3, [r7, #7]
 80181b0:	3304      	adds	r3, #4
 80181b2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80181b4:	2300      	movs	r3, #0
 80181b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	2b05      	cmp	r3, #5
 80181be:	d002      	beq.n	80181c6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	2b06      	cmp	r3, #6
 80181c4:	d104      	bne.n	80181d0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80181c6:	88bb      	ldrh	r3, [r7, #4]
 80181c8:	2b0b      	cmp	r3, #11
 80181ca:	d801      	bhi.n	80181d0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80181cc:	230c      	movs	r3, #12
 80181ce:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d105      	bne.n	80181e2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	2b0b      	cmp	r3, #11
 80181da:	d008      	beq.n	80181ee <RadioGetLoRaTimeOnAirNumerator+0x56>
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	2b0c      	cmp	r3, #12
 80181e0:	d005      	beq.n	80181ee <RadioGetLoRaTimeOnAirNumerator+0x56>
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	2b01      	cmp	r3, #1
 80181e6:	d105      	bne.n	80181f4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	2b0c      	cmp	r3, #12
 80181ec:	d102      	bne.n	80181f4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80181ee:	2301      	movs	r3, #1
 80181f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80181f4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80181f8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80181fa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80181fe:	2a00      	cmp	r2, #0
 8018200:	d001      	beq.n	8018206 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018202:	2210      	movs	r2, #16
 8018204:	e000      	b.n	8018208 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018206:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018208:	4413      	add	r3, r2
 801820a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018210:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018212:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018216:	2a00      	cmp	r2, #0
 8018218:	d001      	beq.n	801821e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801821a:	2200      	movs	r2, #0
 801821c:	e000      	b.n	8018220 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801821e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018220:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018222:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	2b06      	cmp	r3, #6
 8018228:	d803      	bhi.n	8018232 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	009b      	lsls	r3, r3, #2
 801822e:	623b      	str	r3, [r7, #32]
 8018230:	e00e      	b.n	8018250 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	3308      	adds	r3, #8
 8018236:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801823c:	2b00      	cmp	r3, #0
 801823e:	d004      	beq.n	801824a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	3b02      	subs	r3, #2
 8018244:	009b      	lsls	r3, r3, #2
 8018246:	623b      	str	r3, [r7, #32]
 8018248:	e002      	b.n	8018250 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	009b      	lsls	r3, r3, #2
 801824e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	2b00      	cmp	r3, #0
 8018254:	da01      	bge.n	801825a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018256:	2300      	movs	r3, #0
 8018258:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801825a:	69fa      	ldr	r2, [r7, #28]
 801825c:	6a3b      	ldr	r3, [r7, #32]
 801825e:	4413      	add	r3, r2
 8018260:	1e5a      	subs	r2, r3, #1
 8018262:	6a3b      	ldr	r3, [r7, #32]
 8018264:	fb92 f3f3 	sdiv	r3, r2, r3
 8018268:	697a      	ldr	r2, [r7, #20]
 801826a:	fb03 f202 	mul.w	r2, r3, r2
 801826e:	88bb      	ldrh	r3, [r7, #4]
 8018270:	4413      	add	r3, r2
    int32_t intermediate =
 8018272:	330c      	adds	r3, #12
 8018274:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	2b06      	cmp	r3, #6
 801827a:	d802      	bhi.n	8018282 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801827c:	69bb      	ldr	r3, [r7, #24]
 801827e:	3302      	adds	r3, #2
 8018280:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	009b      	lsls	r3, r3, #2
 8018286:	1c5a      	adds	r2, r3, #1
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	3b02      	subs	r3, #2
 801828c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018290:	4618      	mov	r0, r3
 8018292:	372c      	adds	r7, #44	@ 0x2c
 8018294:	46bd      	mov	sp, r7
 8018296:	bc80      	pop	{r7}
 8018298:	4770      	bx	lr
	...

0801829c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b08a      	sub	sp, #40	@ 0x28
 80182a0:	af04      	add	r7, sp, #16
 80182a2:	60b9      	str	r1, [r7, #8]
 80182a4:	607a      	str	r2, [r7, #4]
 80182a6:	461a      	mov	r2, r3
 80182a8:	4603      	mov	r3, r0
 80182aa:	73fb      	strb	r3, [r7, #15]
 80182ac:	4613      	mov	r3, r2
 80182ae:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80182b0:	2300      	movs	r3, #0
 80182b2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80182b4:	2301      	movs	r3, #1
 80182b6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80182b8:	7bfb      	ldrb	r3, [r7, #15]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d002      	beq.n	80182c4 <RadioTimeOnAir+0x28>
 80182be:	2b01      	cmp	r3, #1
 80182c0:	d017      	beq.n	80182f2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80182c2:	e035      	b.n	8018330 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80182c4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80182c8:	8c3a      	ldrh	r2, [r7, #32]
 80182ca:	7bb9      	ldrb	r1, [r7, #14]
 80182cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80182d0:	9301      	str	r3, [sp, #4]
 80182d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80182d6:	9300      	str	r3, [sp, #0]
 80182d8:	4603      	mov	r3, r0
 80182da:	6878      	ldr	r0, [r7, #4]
 80182dc:	f7ff ff32 	bl	8018144 <RadioGetGfskTimeOnAirNumerator>
 80182e0:	4603      	mov	r3, r0
 80182e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80182e6:	fb02 f303 	mul.w	r3, r2, r3
 80182ea:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	613b      	str	r3, [r7, #16]
        break;
 80182f0:	e01e      	b.n	8018330 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80182f2:	8c39      	ldrh	r1, [r7, #32]
 80182f4:	7bba      	ldrb	r2, [r7, #14]
 80182f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80182fa:	9302      	str	r3, [sp, #8]
 80182fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018300:	9301      	str	r3, [sp, #4]
 8018302:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018306:	9300      	str	r3, [sp, #0]
 8018308:	460b      	mov	r3, r1
 801830a:	6879      	ldr	r1, [r7, #4]
 801830c:	68b8      	ldr	r0, [r7, #8]
 801830e:	f7ff ff43 	bl	8018198 <RadioGetLoRaTimeOnAirNumerator>
 8018312:	4603      	mov	r3, r0
 8018314:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018318:	fb02 f303 	mul.w	r3, r2, r3
 801831c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801831e:	4a0a      	ldr	r2, [pc, #40]	@ (8018348 <RadioTimeOnAir+0xac>)
 8018320:	68bb      	ldr	r3, [r7, #8]
 8018322:	4413      	add	r3, r2
 8018324:	781b      	ldrb	r3, [r3, #0]
 8018326:	4618      	mov	r0, r3
 8018328:	f7ff feb6 	bl	8018098 <RadioGetLoRaBandwidthInHz>
 801832c:	6138      	str	r0, [r7, #16]
        break;
 801832e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8018330:	697a      	ldr	r2, [r7, #20]
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	4413      	add	r3, r2
 8018336:	1e5a      	subs	r2, r3, #1
 8018338:	693b      	ldr	r3, [r7, #16]
 801833a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801833e:	4618      	mov	r0, r3
 8018340:	3718      	adds	r7, #24
 8018342:	46bd      	mov	sp, r7
 8018344:	bd80      	pop	{r7, pc}
 8018346:	bf00      	nop
 8018348:	08022018 	.word	0x08022018

0801834c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b084      	sub	sp, #16
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	460b      	mov	r3, r1
 8018356:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018358:	2300      	movs	r3, #0
 801835a:	2200      	movs	r2, #0
 801835c:	f240 2101 	movw	r1, #513	@ 0x201
 8018360:	f240 2001 	movw	r0, #513	@ 0x201
 8018364:	f001 f8e4 	bl	8019530 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8018368:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801836c:	484d      	ldr	r0, [pc, #308]	@ (80184a4 <RadioSend+0x158>)
 801836e:	f7ff fb09 	bl	8017984 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018372:	4b4d      	ldr	r3, [pc, #308]	@ (80184a8 <RadioSend+0x15c>)
 8018374:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018378:	2101      	movs	r1, #1
 801837a:	4618      	mov	r0, r3
 801837c:	f001 fd76 	bl	8019e6c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018380:	4b49      	ldr	r3, [pc, #292]	@ (80184a8 <RadioSend+0x15c>)
 8018382:	781b      	ldrb	r3, [r3, #0]
 8018384:	2b01      	cmp	r3, #1
 8018386:	d112      	bne.n	80183ae <RadioSend+0x62>
 8018388:	4b47      	ldr	r3, [pc, #284]	@ (80184a8 <RadioSend+0x15c>)
 801838a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801838e:	2b06      	cmp	r3, #6
 8018390:	d10d      	bne.n	80183ae <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018392:	f640 0089 	movw	r0, #2185	@ 0x889
 8018396:	f001 fc89 	bl	8019cac <SUBGRF_ReadRegister>
 801839a:	4603      	mov	r3, r0
 801839c:	f023 0304 	bic.w	r3, r3, #4
 80183a0:	b2db      	uxtb	r3, r3
 80183a2:	4619      	mov	r1, r3
 80183a4:	f640 0089 	movw	r0, #2185	@ 0x889
 80183a8:	f001 fc6c 	bl	8019c84 <SUBGRF_WriteRegister>
 80183ac:	e00c      	b.n	80183c8 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80183ae:	f640 0089 	movw	r0, #2185	@ 0x889
 80183b2:	f001 fc7b 	bl	8019cac <SUBGRF_ReadRegister>
 80183b6:	4603      	mov	r3, r0
 80183b8:	f043 0304 	orr.w	r3, r3, #4
 80183bc:	b2db      	uxtb	r3, r3
 80183be:	4619      	mov	r1, r3
 80183c0:	f640 0089 	movw	r0, #2185	@ 0x889
 80183c4:	f001 fc5e 	bl	8019c84 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80183c8:	4b37      	ldr	r3, [pc, #220]	@ (80184a8 <RadioSend+0x15c>)
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	2b03      	cmp	r3, #3
 80183ce:	d859      	bhi.n	8018484 <RadioSend+0x138>
 80183d0:	a201      	add	r2, pc, #4	@ (adr r2, 80183d8 <RadioSend+0x8c>)
 80183d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183d6:	bf00      	nop
 80183d8:	08018403 	.word	0x08018403
 80183dc:	080183e9 	.word	0x080183e9
 80183e0:	08018403 	.word	0x08018403
 80183e4:	08018465 	.word	0x08018465
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80183e8:	4a2f      	ldr	r2, [pc, #188]	@ (80184a8 <RadioSend+0x15c>)
 80183ea:	78fb      	ldrb	r3, [r7, #3]
 80183ec:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80183ee:	482f      	ldr	r0, [pc, #188]	@ (80184ac <RadioSend+0x160>)
 80183f0:	f001 fb02 	bl	80199f8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80183f4:	78fb      	ldrb	r3, [r7, #3]
 80183f6:	2200      	movs	r2, #0
 80183f8:	4619      	mov	r1, r3
 80183fa:	6878      	ldr	r0, [r7, #4]
 80183fc:	f000 fdae 	bl	8018f5c <SUBGRF_SendPayload>
            break;
 8018400:	e041      	b.n	8018486 <RadioSend+0x13a>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018402:	f001 ff1f 	bl	801a244 <RFW_Is_Init>
 8018406:	4603      	mov	r3, r0
 8018408:	2b01      	cmp	r3, #1
 801840a:	d11e      	bne.n	801844a <RadioSend+0xfe>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801840c:	f107 020f 	add.w	r2, r7, #15
 8018410:	78fb      	ldrb	r3, [r7, #3]
 8018412:	4619      	mov	r1, r3
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f001 ff2d 	bl	801a274 <RFW_TransmitInit>
 801841a:	4603      	mov	r3, r0
 801841c:	2b00      	cmp	r3, #0
 801841e:	d10c      	bne.n	801843a <RadioSend+0xee>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018420:	7bfa      	ldrb	r2, [r7, #15]
 8018422:	4b21      	ldr	r3, [pc, #132]	@ (80184a8 <RadioSend+0x15c>)
 8018424:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018426:	4821      	ldr	r0, [pc, #132]	@ (80184ac <RadioSend+0x160>)
 8018428:	f001 fae6 	bl	80199f8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801842c:	7bfb      	ldrb	r3, [r7, #15]
 801842e:	2200      	movs	r2, #0
 8018430:	4619      	mov	r1, r3
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	f000 fd92 	bl	8018f5c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018438:	e025      	b.n	8018486 <RadioSend+0x13a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801843a:	4b1d      	ldr	r3, [pc, #116]	@ (80184b0 <RadioSend+0x164>)
 801843c:	2201      	movs	r2, #1
 801843e:	2100      	movs	r1, #0
 8018440:	2002      	movs	r0, #2
 8018442:	f001 ff73 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8018446:	2303      	movs	r3, #3
 8018448:	e027      	b.n	801849a <RadioSend+0x14e>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801844a:	4a17      	ldr	r2, [pc, #92]	@ (80184a8 <RadioSend+0x15c>)
 801844c:	78fb      	ldrb	r3, [r7, #3]
 801844e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018450:	4816      	ldr	r0, [pc, #88]	@ (80184ac <RadioSend+0x160>)
 8018452:	f001 fad1 	bl	80199f8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8018456:	78fb      	ldrb	r3, [r7, #3]
 8018458:	2200      	movs	r2, #0
 801845a:	4619      	mov	r1, r3
 801845c:	6878      	ldr	r0, [r7, #4]
 801845e:	f000 fd7d 	bl	8018f5c <SUBGRF_SendPayload>
            break;
 8018462:	e010      	b.n	8018486 <RadioSend+0x13a>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018464:	4b10      	ldr	r3, [pc, #64]	@ (80184a8 <RadioSend+0x15c>)
 8018466:	2202      	movs	r2, #2
 8018468:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801846a:	4a0f      	ldr	r2, [pc, #60]	@ (80184a8 <RadioSend+0x15c>)
 801846c:	78fb      	ldrb	r3, [r7, #3]
 801846e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018470:	480e      	ldr	r0, [pc, #56]	@ (80184ac <RadioSend+0x160>)
 8018472:	f001 fac1 	bl	80199f8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018476:	78fb      	ldrb	r3, [r7, #3]
 8018478:	2200      	movs	r2, #0
 801847a:	4619      	mov	r1, r3
 801847c:	6878      	ldr	r0, [r7, #4]
 801847e:	f000 fd6d 	bl	8018f5c <SUBGRF_SendPayload>
            break;
 8018482:	e000      	b.n	8018486 <RadioSend+0x13a>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
            break;
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018484:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018486:	4b08      	ldr	r3, [pc, #32]	@ (80184a8 <RadioSend+0x15c>)
 8018488:	685b      	ldr	r3, [r3, #4]
 801848a:	4619      	mov	r1, r3
 801848c:	4809      	ldr	r0, [pc, #36]	@ (80184b4 <RadioSend+0x168>)
 801848e:	f002 fe97 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8018492:	4808      	ldr	r0, [pc, #32]	@ (80184b4 <RadioSend+0x168>)
 8018494:	f002 fdb6 	bl	801b004 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8018498:	2300      	movs	r3, #0
}
 801849a:	4618      	mov	r0, r3
 801849c:	3710      	adds	r7, #16
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	bf00      	nop
 80184a4:	48000400 	.word	0x48000400
 80184a8:	2000133c 	.word	0x2000133c
 80184ac:	2000134a 	.word	0x2000134a
 80184b0:	08021834 	.word	0x08021834
 80184b4:	20001398 	.word	0x20001398

080184b8 <RadioSleep>:

static void RadioSleep( void )
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b082      	sub	sp, #8
 80184bc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80184be:	2300      	movs	r3, #0
 80184c0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80184c2:	793b      	ldrb	r3, [r7, #4]
 80184c4:	f043 0304 	orr.w	r3, r3, #4
 80184c8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80184ca:	7938      	ldrb	r0, [r7, #4]
 80184cc:	f000 fe22 	bl	8019114 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80184d0:	2002      	movs	r0, #2
 80184d2:	f7e9 f9dd 	bl	8001890 <HAL_Delay>
}
 80184d6:	bf00      	nop
 80184d8:	3708      	adds	r7, #8
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}

080184de <RadioStandby>:

static void RadioStandby( void )
{
 80184de:	b580      	push	{r7, lr}
 80184e0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80184e2:	2000      	movs	r0, #0
 80184e4:	f000 fe4a 	bl	801917c <SUBGRF_SetStandby>
}
 80184e8:	bf00      	nop
 80184ea:	bd80      	pop	{r7, pc}

080184ec <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b082      	sub	sp, #8
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80184f4:	f001 fea6 	bl	801a244 <RFW_Is_Init>
 80184f8:	4603      	mov	r3, r0
 80184fa:	2b01      	cmp	r3, #1
 80184fc:	d102      	bne.n	8018504 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80184fe:	f001 fec9 	bl	801a294 <RFW_ReceiveInit>
 8018502:	e007      	b.n	8018514 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018504:	2300      	movs	r3, #0
 8018506:	2200      	movs	r2, #0
 8018508:	f240 2162 	movw	r1, #610	@ 0x262
 801850c:	f240 2062 	movw	r0, #610	@ 0x262
 8018510:	f001 f80e 	bl	8019530 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d006      	beq.n	8018528 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801851a:	6879      	ldr	r1, [r7, #4]
 801851c:	4813      	ldr	r0, [pc, #76]	@ (801856c <RadioRx+0x80>)
 801851e:	f002 fe4f 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018522:	4812      	ldr	r0, [pc, #72]	@ (801856c <RadioRx+0x80>)
 8018524:	f002 fd6e 	bl	801b004 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018528:	4b11      	ldr	r3, [pc, #68]	@ (8018570 <RadioRx+0x84>)
 801852a:	2200      	movs	r2, #0
 801852c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 801852e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8018532:	4810      	ldr	r0, [pc, #64]	@ (8018574 <RadioRx+0x88>)
 8018534:	f7ff fa26 	bl	8017984 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018538:	4b0d      	ldr	r3, [pc, #52]	@ (8018570 <RadioRx+0x84>)
 801853a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801853e:	2100      	movs	r1, #0
 8018540:	4618      	mov	r0, r3
 8018542:	f001 fc93 	bl	8019e6c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018546:	4b0a      	ldr	r3, [pc, #40]	@ (8018570 <RadioRx+0x84>)
 8018548:	785b      	ldrb	r3, [r3, #1]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d004      	beq.n	8018558 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801854e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018552:	f000 fe4f 	bl	80191f4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018556:	e005      	b.n	8018564 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8018558:	4b05      	ldr	r3, [pc, #20]	@ (8018570 <RadioRx+0x84>)
 801855a:	689b      	ldr	r3, [r3, #8]
 801855c:	019b      	lsls	r3, r3, #6
 801855e:	4618      	mov	r0, r3
 8018560:	f000 fe48 	bl	80191f4 <SUBGRF_SetRx>
}
 8018564:	bf00      	nop
 8018566:	3708      	adds	r7, #8
 8018568:	46bd      	mov	sp, r7
 801856a:	bd80      	pop	{r7, pc}
 801856c:	200013b0 	.word	0x200013b0
 8018570:	2000133c 	.word	0x2000133c
 8018574:	48000400 	.word	0x48000400

08018578 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b082      	sub	sp, #8
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8018580:	f001 fe60 	bl	801a244 <RFW_Is_Init>
 8018584:	4603      	mov	r3, r0
 8018586:	2b01      	cmp	r3, #1
 8018588:	d102      	bne.n	8018590 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801858a:	f001 fe83 	bl	801a294 <RFW_ReceiveInit>
 801858e:	e007      	b.n	80185a0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018590:	2300      	movs	r3, #0
 8018592:	2200      	movs	r2, #0
 8018594:	f240 2162 	movw	r1, #610	@ 0x262
 8018598:	f240 2062 	movw	r0, #610	@ 0x262
 801859c:	f000 ffc8 	bl	8019530 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d006      	beq.n	80185b4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80185a6:	6879      	ldr	r1, [r7, #4]
 80185a8:	4813      	ldr	r0, [pc, #76]	@ (80185f8 <RadioRxBoosted+0x80>)
 80185aa:	f002 fe09 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80185ae:	4812      	ldr	r0, [pc, #72]	@ (80185f8 <RadioRxBoosted+0x80>)
 80185b0:	f002 fd28 	bl	801b004 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80185b4:	4b11      	ldr	r3, [pc, #68]	@ (80185fc <RadioRxBoosted+0x84>)
 80185b6:	2200      	movs	r2, #0
 80185b8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 80185ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80185be:	4810      	ldr	r0, [pc, #64]	@ (8018600 <RadioRxBoosted+0x88>)
 80185c0:	f7ff f9e0 	bl	8017984 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80185c4:	4b0d      	ldr	r3, [pc, #52]	@ (80185fc <RadioRxBoosted+0x84>)
 80185c6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80185ca:	2100      	movs	r1, #0
 80185cc:	4618      	mov	r0, r3
 80185ce:	f001 fc4d 	bl	8019e6c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80185d2:	4b0a      	ldr	r3, [pc, #40]	@ (80185fc <RadioRxBoosted+0x84>)
 80185d4:	785b      	ldrb	r3, [r3, #1]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d004      	beq.n	80185e4 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80185da:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80185de:	f000 fe29 	bl	8019234 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80185e2:	e005      	b.n	80185f0 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80185e4:	4b05      	ldr	r3, [pc, #20]	@ (80185fc <RadioRxBoosted+0x84>)
 80185e6:	689b      	ldr	r3, [r3, #8]
 80185e8:	019b      	lsls	r3, r3, #6
 80185ea:	4618      	mov	r0, r3
 80185ec:	f000 fe22 	bl	8019234 <SUBGRF_SetRxBoosted>
}
 80185f0:	bf00      	nop
 80185f2:	3708      	adds	r7, #8
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	200013b0 	.word	0x200013b0
 80185fc:	2000133c 	.word	0x2000133c
 8018600:	48000400 	.word	0x48000400

08018604 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b082      	sub	sp, #8
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	005a      	lsls	r2, r3, #1
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	4413      	add	r3, r2
 8018616:	4a0c      	ldr	r2, [pc, #48]	@ (8018648 <RadioSetRxDutyCycle+0x44>)
 8018618:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801861a:	2300      	movs	r3, #0
 801861c:	2200      	movs	r2, #0
 801861e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018622:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018626:	f000 ff83 	bl	8019530 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801862a:	4b07      	ldr	r3, [pc, #28]	@ (8018648 <RadioSetRxDutyCycle+0x44>)
 801862c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018630:	2100      	movs	r1, #0
 8018632:	4618      	mov	r0, r3
 8018634:	f001 fc1a 	bl	8019e6c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018638:	6839      	ldr	r1, [r7, #0]
 801863a:	6878      	ldr	r0, [r7, #4]
 801863c:	f000 fe1e 	bl	801927c <SUBGRF_SetRxDutyCycle>
}
 8018640:	bf00      	nop
 8018642:	3708      	adds	r7, #8
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}
 8018648:	2000133c 	.word	0x2000133c

0801864c <RadioStartCad>:

static void RadioStartCad( void )
{
 801864c:	b580      	push	{r7, lr}
 801864e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018650:	4b09      	ldr	r3, [pc, #36]	@ (8018678 <RadioStartCad+0x2c>)
 8018652:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018656:	2100      	movs	r1, #0
 8018658:	4618      	mov	r0, r3
 801865a:	f001 fc07 	bl	8019e6c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801865e:	2300      	movs	r3, #0
 8018660:	2200      	movs	r2, #0
 8018662:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018666:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801866a:	f000 ff61 	bl	8019530 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801866e:	f000 fe31 	bl	80192d4 <SUBGRF_SetCad>
}
 8018672:	bf00      	nop
 8018674:	bd80      	pop	{r7, pc}
 8018676:	bf00      	nop
 8018678:	2000133c 	.word	0x2000133c

0801867c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	460b      	mov	r3, r1
 8018686:	70fb      	strb	r3, [r7, #3]
 8018688:	4613      	mov	r3, r2
 801868a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801868c:	883b      	ldrh	r3, [r7, #0]
 801868e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018692:	fb02 f303 	mul.w	r3, r2, r3
 8018696:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f000 ffa5 	bl	80195e8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801869e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80186a2:	4618      	mov	r0, r3
 80186a4:	f001 fc0a 	bl	8019ebc <SUBGRF_SetRfTxPower>
 80186a8:	4603      	mov	r3, r0
 80186aa:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80186ac:	210e      	movs	r1, #14
 80186ae:	f640 101f 	movw	r0, #2335	@ 0x91f
 80186b2:	f001 fae7 	bl	8019c84 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80186b6:	7afb      	ldrb	r3, [r7, #11]
 80186b8:	2101      	movs	r1, #1
 80186ba:	4618      	mov	r0, r3
 80186bc:	f001 fbd6 	bl	8019e6c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80186c0:	f000 fe16 	bl	80192f0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80186c4:	68f9      	ldr	r1, [r7, #12]
 80186c6:	4805      	ldr	r0, [pc, #20]	@ (80186dc <RadioSetTxContinuousWave+0x60>)
 80186c8:	f002 fd7a 	bl	801b1c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80186cc:	4803      	ldr	r0, [pc, #12]	@ (80186dc <RadioSetTxContinuousWave+0x60>)
 80186ce:	f002 fc99 	bl	801b004 <UTIL_TIMER_Start>
}
 80186d2:	bf00      	nop
 80186d4:	3710      	adds	r7, #16
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
 80186da:	bf00      	nop
 80186dc:	20001398 	.word	0x20001398

080186e0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b082      	sub	sp, #8
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	4603      	mov	r3, r0
 80186e8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80186ea:	f001 fa38 	bl	8019b5e <SUBGRF_GetRssiInst>
 80186ee:	4603      	mov	r3, r0
}
 80186f0:	4618      	mov	r0, r3
 80186f2:	3708      	adds	r7, #8
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}

080186f8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	4603      	mov	r3, r0
 8018700:	460a      	mov	r2, r1
 8018702:	80fb      	strh	r3, [r7, #6]
 8018704:	4613      	mov	r3, r2
 8018706:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018708:	797a      	ldrb	r2, [r7, #5]
 801870a:	88fb      	ldrh	r3, [r7, #6]
 801870c:	4611      	mov	r1, r2
 801870e:	4618      	mov	r0, r3
 8018710:	f001 fab8 	bl	8019c84 <SUBGRF_WriteRegister>
}
 8018714:	bf00      	nop
 8018716:	3708      	adds	r7, #8
 8018718:	46bd      	mov	sp, r7
 801871a:	bd80      	pop	{r7, pc}

0801871c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801871c:	b580      	push	{r7, lr}
 801871e:	b082      	sub	sp, #8
 8018720:	af00      	add	r7, sp, #0
 8018722:	4603      	mov	r3, r0
 8018724:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018726:	88fb      	ldrh	r3, [r7, #6]
 8018728:	4618      	mov	r0, r3
 801872a:	f001 fabf 	bl	8019cac <SUBGRF_ReadRegister>
 801872e:	4603      	mov	r3, r0
}
 8018730:	4618      	mov	r0, r3
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	4603      	mov	r3, r0
 8018740:	6039      	str	r1, [r7, #0]
 8018742:	80fb      	strh	r3, [r7, #6]
 8018744:	4613      	mov	r3, r2
 8018746:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018748:	797b      	ldrb	r3, [r7, #5]
 801874a:	b29a      	uxth	r2, r3
 801874c:	88fb      	ldrh	r3, [r7, #6]
 801874e:	6839      	ldr	r1, [r7, #0]
 8018750:	4618      	mov	r0, r3
 8018752:	f001 fabf 	bl	8019cd4 <SUBGRF_WriteRegisters>
}
 8018756:	bf00      	nop
 8018758:	3708      	adds	r7, #8
 801875a:	46bd      	mov	sp, r7
 801875c:	bd80      	pop	{r7, pc}

0801875e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801875e:	b580      	push	{r7, lr}
 8018760:	b082      	sub	sp, #8
 8018762:	af00      	add	r7, sp, #0
 8018764:	4603      	mov	r3, r0
 8018766:	6039      	str	r1, [r7, #0]
 8018768:	80fb      	strh	r3, [r7, #6]
 801876a:	4613      	mov	r3, r2
 801876c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801876e:	797b      	ldrb	r3, [r7, #5]
 8018770:	b29a      	uxth	r2, r3
 8018772:	88fb      	ldrh	r3, [r7, #6]
 8018774:	6839      	ldr	r1, [r7, #0]
 8018776:	4618      	mov	r0, r3
 8018778:	f001 face 	bl	8019d18 <SUBGRF_ReadRegisters>
}
 801877c:	bf00      	nop
 801877e:	3708      	adds	r7, #8
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}

08018784 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	4603      	mov	r3, r0
 801878c:	460a      	mov	r2, r1
 801878e:	71fb      	strb	r3, [r7, #7]
 8018790:	4613      	mov	r3, r2
 8018792:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018794:	79fb      	ldrb	r3, [r7, #7]
 8018796:	2b01      	cmp	r3, #1
 8018798:	d10a      	bne.n	80187b0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801879a:	4a0e      	ldr	r2, [pc, #56]	@ (80187d4 <RadioSetMaxPayloadLength+0x50>)
 801879c:	79bb      	ldrb	r3, [r7, #6]
 801879e:	7013      	strb	r3, [r2, #0]
 80187a0:	4b0c      	ldr	r3, [pc, #48]	@ (80187d4 <RadioSetMaxPayloadLength+0x50>)
 80187a2:	781a      	ldrb	r2, [r3, #0]
 80187a4:	4b0c      	ldr	r3, [pc, #48]	@ (80187d8 <RadioSetMaxPayloadLength+0x54>)
 80187a6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187a8:	480c      	ldr	r0, [pc, #48]	@ (80187dc <RadioSetMaxPayloadLength+0x58>)
 80187aa:	f001 f925 	bl	80199f8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80187ae:	e00d      	b.n	80187cc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80187b0:	4b09      	ldr	r3, [pc, #36]	@ (80187d8 <RadioSetMaxPayloadLength+0x54>)
 80187b2:	7d5b      	ldrb	r3, [r3, #21]
 80187b4:	2b01      	cmp	r3, #1
 80187b6:	d109      	bne.n	80187cc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80187b8:	4a06      	ldr	r2, [pc, #24]	@ (80187d4 <RadioSetMaxPayloadLength+0x50>)
 80187ba:	79bb      	ldrb	r3, [r7, #6]
 80187bc:	7013      	strb	r3, [r2, #0]
 80187be:	4b05      	ldr	r3, [pc, #20]	@ (80187d4 <RadioSetMaxPayloadLength+0x50>)
 80187c0:	781a      	ldrb	r2, [r3, #0]
 80187c2:	4b05      	ldr	r3, [pc, #20]	@ (80187d8 <RadioSetMaxPayloadLength+0x54>)
 80187c4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187c6:	4805      	ldr	r0, [pc, #20]	@ (80187dc <RadioSetMaxPayloadLength+0x58>)
 80187c8:	f001 f916 	bl	80199f8 <SUBGRF_SetPacketParams>
}
 80187cc:	bf00      	nop
 80187ce:	3708      	adds	r7, #8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	200000d8 	.word	0x200000d8
 80187d8:	2000133c 	.word	0x2000133c
 80187dc:	2000134a 	.word	0x2000134a

080187e0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b082      	sub	sp, #8
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	4603      	mov	r3, r0
 80187e8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80187ea:	4a13      	ldr	r2, [pc, #76]	@ (8018838 <RadioSetPublicNetwork+0x58>)
 80187ec:	79fb      	ldrb	r3, [r7, #7]
 80187ee:	7313      	strb	r3, [r2, #12]
 80187f0:	4b11      	ldr	r3, [pc, #68]	@ (8018838 <RadioSetPublicNetwork+0x58>)
 80187f2:	7b1a      	ldrb	r2, [r3, #12]
 80187f4:	4b10      	ldr	r3, [pc, #64]	@ (8018838 <RadioSetPublicNetwork+0x58>)
 80187f6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80187f8:	2001      	movs	r0, #1
 80187fa:	f7ff f951 	bl	8017aa0 <RadioSetModem>
    if( enable == true )
 80187fe:	79fb      	ldrb	r3, [r7, #7]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d00a      	beq.n	801881a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018804:	2134      	movs	r1, #52	@ 0x34
 8018806:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801880a:	f001 fa3b 	bl	8019c84 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801880e:	2144      	movs	r1, #68	@ 0x44
 8018810:	f240 7041 	movw	r0, #1857	@ 0x741
 8018814:	f001 fa36 	bl	8019c84 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018818:	e009      	b.n	801882e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801881a:	2114      	movs	r1, #20
 801881c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018820:	f001 fa30 	bl	8019c84 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018824:	2124      	movs	r1, #36	@ 0x24
 8018826:	f240 7041 	movw	r0, #1857	@ 0x741
 801882a:	f001 fa2b 	bl	8019c84 <SUBGRF_WriteRegister>
}
 801882e:	bf00      	nop
 8018830:	3708      	adds	r7, #8
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
 8018836:	bf00      	nop
 8018838:	2000133c 	.word	0x2000133c

0801883c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801883c:	b580      	push	{r7, lr}
 801883e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018840:	f001 fb70 	bl	8019f24 <SUBGRF_GetRadioWakeUpTime>
 8018844:	4603      	mov	r3, r0
 8018846:	3303      	adds	r3, #3
}
 8018848:	4618      	mov	r0, r3
 801884a:	bd80      	pop	{r7, pc}

0801884c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b082      	sub	sp, #8
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018854:	f000 f80e 	bl	8018874 <RadioOnTxTimeoutProcess>
}
 8018858:	bf00      	nop
 801885a:	3708      	adds	r7, #8
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}

08018860 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b082      	sub	sp, #8
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018868:	f000 f81e 	bl	80188a8 <RadioOnRxTimeoutProcess>
}
 801886c:	bf00      	nop
 801886e:	3708      	adds	r7, #8
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}

08018874 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018874:	b580      	push	{r7, lr}
 8018876:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 8018878:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801887c:	4808      	ldr	r0, [pc, #32]	@ (80188a0 <RadioOnTxTimeoutProcess+0x2c>)
 801887e:	f7ff f88e 	bl	801799e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018882:	4b08      	ldr	r3, [pc, #32]	@ (80188a4 <RadioOnTxTimeoutProcess+0x30>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d008      	beq.n	801889c <RadioOnTxTimeoutProcess+0x28>
 801888a:	4b06      	ldr	r3, [pc, #24]	@ (80188a4 <RadioOnTxTimeoutProcess+0x30>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	685b      	ldr	r3, [r3, #4]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d003      	beq.n	801889c <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8018894:	4b03      	ldr	r3, [pc, #12]	@ (80188a4 <RadioOnTxTimeoutProcess+0x30>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	685b      	ldr	r3, [r3, #4]
 801889a:	4798      	blx	r3
    }
}
 801889c:	bf00      	nop
 801889e:	bd80      	pop	{r7, pc}
 80188a0:	48000400 	.word	0x48000400
 80188a4:	20001338 	.word	0x20001338

080188a8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 80188ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80188b0:	4808      	ldr	r0, [pc, #32]	@ (80188d4 <RadioOnRxTimeoutProcess+0x2c>)
 80188b2:	f7ff f874 	bl	801799e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80188b6:	4b08      	ldr	r3, [pc, #32]	@ (80188d8 <RadioOnRxTimeoutProcess+0x30>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d008      	beq.n	80188d0 <RadioOnRxTimeoutProcess+0x28>
 80188be:	4b06      	ldr	r3, [pc, #24]	@ (80188d8 <RadioOnRxTimeoutProcess+0x30>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d003      	beq.n	80188d0 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 80188c8:	4b03      	ldr	r3, [pc, #12]	@ (80188d8 <RadioOnRxTimeoutProcess+0x30>)
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	68db      	ldr	r3, [r3, #12]
 80188ce:	4798      	blx	r3
    }
}
 80188d0:	bf00      	nop
 80188d2:	bd80      	pop	{r7, pc}
 80188d4:	48000400 	.word	0x48000400
 80188d8:	20001338 	.word	0x20001338

080188dc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b082      	sub	sp, #8
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	4603      	mov	r3, r0
 80188e4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80188e6:	4a05      	ldr	r2, [pc, #20]	@ (80188fc <RadioOnDioIrq+0x20>)
 80188e8:	88fb      	ldrh	r3, [r7, #6]
 80188ea:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80188ee:	f000 f807 	bl	8018900 <RadioIrqProcess>
}
 80188f2:	bf00      	nop
 80188f4:	3708      	adds	r7, #8
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd80      	pop	{r7, pc}
 80188fa:	bf00      	nop
 80188fc:	2000133c 	.word	0x2000133c

08018900 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018900:	b5b0      	push	{r4, r5, r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018906:	2300      	movs	r3, #0
 8018908:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801890a:	2300      	movs	r3, #0
 801890c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801890e:	4bb2      	ldr	r3, [pc, #712]	@ (8018bd8 <RadioIrqProcess+0x2d8>)
 8018910:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018918:	f000 8117 	beq.w	8018b4a <RadioIrqProcess+0x24a>
 801891c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018920:	f300 81fe 	bgt.w	8018d20 <RadioIrqProcess+0x420>
 8018924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018928:	f000 80fb 	beq.w	8018b22 <RadioIrqProcess+0x222>
 801892c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018930:	f300 81f6 	bgt.w	8018d20 <RadioIrqProcess+0x420>
 8018934:	2b80      	cmp	r3, #128	@ 0x80
 8018936:	f000 80e0 	beq.w	8018afa <RadioIrqProcess+0x1fa>
 801893a:	2b80      	cmp	r3, #128	@ 0x80
 801893c:	f300 81f0 	bgt.w	8018d20 <RadioIrqProcess+0x420>
 8018940:	2b20      	cmp	r3, #32
 8018942:	dc49      	bgt.n	80189d8 <RadioIrqProcess+0xd8>
 8018944:	2b00      	cmp	r3, #0
 8018946:	f340 81eb 	ble.w	8018d20 <RadioIrqProcess+0x420>
 801894a:	3b01      	subs	r3, #1
 801894c:	2b1f      	cmp	r3, #31
 801894e:	f200 81e7 	bhi.w	8018d20 <RadioIrqProcess+0x420>
 8018952:	a201      	add	r2, pc, #4	@ (adr r2, 8018958 <RadioIrqProcess+0x58>)
 8018954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018958:	080189e1 	.word	0x080189e1
 801895c:	08018a25 	.word	0x08018a25
 8018960:	08018d21 	.word	0x08018d21
 8018964:	08018bfd 	.word	0x08018bfd
 8018968:	08018d21 	.word	0x08018d21
 801896c:	08018d21 	.word	0x08018d21
 8018970:	08018d21 	.word	0x08018d21
 8018974:	08018c79 	.word	0x08018c79
 8018978:	08018d21 	.word	0x08018d21
 801897c:	08018d21 	.word	0x08018d21
 8018980:	08018d21 	.word	0x08018d21
 8018984:	08018d21 	.word	0x08018d21
 8018988:	08018d21 	.word	0x08018d21
 801898c:	08018d21 	.word	0x08018d21
 8018990:	08018d21 	.word	0x08018d21
 8018994:	08018c95 	.word	0x08018c95
 8018998:	08018d21 	.word	0x08018d21
 801899c:	08018d21 	.word	0x08018d21
 80189a0:	08018d21 	.word	0x08018d21
 80189a4:	08018d21 	.word	0x08018d21
 80189a8:	08018d21 	.word	0x08018d21
 80189ac:	08018d21 	.word	0x08018d21
 80189b0:	08018d21 	.word	0x08018d21
 80189b4:	08018d21 	.word	0x08018d21
 80189b8:	08018d21 	.word	0x08018d21
 80189bc:	08018d21 	.word	0x08018d21
 80189c0:	08018d21 	.word	0x08018d21
 80189c4:	08018d21 	.word	0x08018d21
 80189c8:	08018d21 	.word	0x08018d21
 80189cc:	08018d21 	.word	0x08018d21
 80189d0:	08018d21 	.word	0x08018d21
 80189d4:	08018ca3 	.word	0x08018ca3
 80189d8:	2b40      	cmp	r3, #64	@ 0x40
 80189da:	f000 8183 	beq.w	8018ce4 <RadioIrqProcess+0x3e4>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80189de:	e19f      	b.n	8018d20 <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_TX( RST );
 80189e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80189e4:	487d      	ldr	r0, [pc, #500]	@ (8018bdc <RadioIrqProcess+0x2dc>)
 80189e6:	f7fe ffda 	bl	801799e <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 80189ea:	487d      	ldr	r0, [pc, #500]	@ (8018be0 <RadioIrqProcess+0x2e0>)
 80189ec:	f002 fb78 	bl	801b0e0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80189f0:	2000      	movs	r0, #0
 80189f2:	f000 fbc3 	bl	801917c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80189f6:	f001 fc2c 	bl	801a252 <RFW_Is_LongPacketModeEnabled>
 80189fa:	4603      	mov	r3, r0
 80189fc:	2b01      	cmp	r3, #1
 80189fe:	d101      	bne.n	8018a04 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8018a00:	f001 fc50 	bl	801a2a4 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018a04:	4b77      	ldr	r3, [pc, #476]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	f000 818b 	beq.w	8018d24 <RadioIrqProcess+0x424>
 8018a0e:	4b75      	ldr	r3, [pc, #468]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	f000 8185 	beq.w	8018d24 <RadioIrqProcess+0x424>
            RadioEvents->TxDone( );
 8018a1a:	4b72      	ldr	r3, [pc, #456]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	4798      	blx	r3
        break;
 8018a22:	e17f      	b.n	8018d24 <RadioIrqProcess+0x424>
        DBG_GPIO_RADIO_RX( RST );
 8018a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8018a28:	486c      	ldr	r0, [pc, #432]	@ (8018bdc <RadioIrqProcess+0x2dc>)
 8018a2a:	f7fe ffb8 	bl	801799e <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8018a2e:	486e      	ldr	r0, [pc, #440]	@ (8018be8 <RadioIrqProcess+0x2e8>)
 8018a30:	f002 fb56 	bl	801b0e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018a34:	4b68      	ldr	r3, [pc, #416]	@ (8018bd8 <RadioIrqProcess+0x2d8>)
 8018a36:	785b      	ldrb	r3, [r3, #1]
 8018a38:	f083 0301 	eor.w	r3, r3, #1
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d014      	beq.n	8018a6c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8018a42:	2000      	movs	r0, #0
 8018a44:	f000 fb9a 	bl	801917c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018a48:	2100      	movs	r1, #0
 8018a4a:	f640 1002 	movw	r0, #2306	@ 0x902
 8018a4e:	f001 f919 	bl	8019c84 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018a52:	f640 1044 	movw	r0, #2372	@ 0x944
 8018a56:	f001 f929 	bl	8019cac <SUBGRF_ReadRegister>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	f043 0302 	orr.w	r3, r3, #2
 8018a60:	b2db      	uxtb	r3, r3
 8018a62:	4619      	mov	r1, r3
 8018a64:	f640 1044 	movw	r0, #2372	@ 0x944
 8018a68:	f001 f90c 	bl	8019c84 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018a6c:	1dfb      	adds	r3, r7, #7
 8018a6e:	22ff      	movs	r2, #255	@ 0xff
 8018a70:	4619      	mov	r1, r3
 8018a72:	485e      	ldr	r0, [pc, #376]	@ (8018bec <RadioIrqProcess+0x2ec>)
 8018a74:	f000 fa50 	bl	8018f18 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018a78:	485d      	ldr	r0, [pc, #372]	@ (8018bf0 <RadioIrqProcess+0x2f0>)
 8018a7a:	f001 f8b1 	bl	8019be0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018a7e:	4b59      	ldr	r3, [pc, #356]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	f000 8150 	beq.w	8018d28 <RadioIrqProcess+0x428>
 8018a88:	4b56      	ldr	r3, [pc, #344]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	689b      	ldr	r3, [r3, #8]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	f000 814a 	beq.w	8018d28 <RadioIrqProcess+0x428>
            switch( SubgRf.PacketStatus.packetType )
 8018a94:	4b50      	ldr	r3, [pc, #320]	@ (8018bd8 <RadioIrqProcess+0x2d8>)
 8018a96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018a9a:	2b01      	cmp	r3, #1
 8018a9c:	d10e      	bne.n	8018abc <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8018a9e:	4b51      	ldr	r3, [pc, #324]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	689c      	ldr	r4, [r3, #8]
 8018aa4:	79fb      	ldrb	r3, [r7, #7]
 8018aa6:	4619      	mov	r1, r3
 8018aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8018bd8 <RadioIrqProcess+0x2d8>)
 8018aaa:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018aae:	461a      	mov	r2, r3
 8018ab0:	4b49      	ldr	r3, [pc, #292]	@ (8018bd8 <RadioIrqProcess+0x2d8>)
 8018ab2:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018ab6:	484d      	ldr	r0, [pc, #308]	@ (8018bec <RadioIrqProcess+0x2ec>)
 8018ab8:	47a0      	blx	r4
                break;
 8018aba:	e01d      	b.n	8018af8 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018abc:	4b46      	ldr	r3, [pc, #280]	@ (8018bd8 <RadioIrqProcess+0x2d8>)
 8018abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018ac0:	463a      	mov	r2, r7
 8018ac2:	4611      	mov	r1, r2
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f001 fb1f 	bl	801a108 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018aca:	4b46      	ldr	r3, [pc, #280]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	689c      	ldr	r4, [r3, #8]
 8018ad0:	79fb      	ldrb	r3, [r7, #7]
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	4b40      	ldr	r3, [pc, #256]	@ (8018bd8 <RadioIrqProcess+0x2d8>)
 8018ad6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018ada:	4618      	mov	r0, r3
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018ae2:	4a44      	ldr	r2, [pc, #272]	@ (8018bf4 <RadioIrqProcess+0x2f4>)
 8018ae4:	fb82 5203 	smull	r5, r2, r2, r3
 8018ae8:	1192      	asrs	r2, r2, #6
 8018aea:	17db      	asrs	r3, r3, #31
 8018aec:	1ad3      	subs	r3, r2, r3
 8018aee:	b25b      	sxtb	r3, r3
 8018af0:	4602      	mov	r2, r0
 8018af2:	483e      	ldr	r0, [pc, #248]	@ (8018bec <RadioIrqProcess+0x2ec>)
 8018af4:	47a0      	blx	r4
                break;
 8018af6:	bf00      	nop
        break;
 8018af8:	e116      	b.n	8018d28 <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 8018afa:	2000      	movs	r0, #0
 8018afc:	f000 fb3e 	bl	801917c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018b00:	4b38      	ldr	r3, [pc, #224]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	f000 8111 	beq.w	8018d2c <RadioIrqProcess+0x42c>
 8018b0a:	4b36      	ldr	r3, [pc, #216]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	699b      	ldr	r3, [r3, #24]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	f000 810b 	beq.w	8018d2c <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( false );
 8018b16:	4b33      	ldr	r3, [pc, #204]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	699b      	ldr	r3, [r3, #24]
 8018b1c:	2000      	movs	r0, #0
 8018b1e:	4798      	blx	r3
        break;
 8018b20:	e104      	b.n	8018d2c <RadioIrqProcess+0x42c>
        SUBGRF_SetStandby( STDBY_RC );
 8018b22:	2000      	movs	r0, #0
 8018b24:	f000 fb2a 	bl	801917c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018b28:	4b2e      	ldr	r3, [pc, #184]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	f000 80ff 	beq.w	8018d30 <RadioIrqProcess+0x430>
 8018b32:	4b2c      	ldr	r3, [pc, #176]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	699b      	ldr	r3, [r3, #24]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	f000 80f9 	beq.w	8018d30 <RadioIrqProcess+0x430>
            RadioEvents->CadDone( true );
 8018b3e:	4b29      	ldr	r3, [pc, #164]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	699b      	ldr	r3, [r3, #24]
 8018b44:	2001      	movs	r0, #1
 8018b46:	4798      	blx	r3
        break;
 8018b48:	e0f2      	b.n	8018d30 <RadioIrqProcess+0x430>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8018bf8 <RadioIrqProcess+0x2f8>)
 8018b4c:	2201      	movs	r2, #1
 8018b4e:	2100      	movs	r1, #0
 8018b50:	2002      	movs	r0, #2
 8018b52:	f001 fbeb 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018b56:	f000 f9c5 	bl	8018ee4 <SUBGRF_GetOperatingMode>
 8018b5a:	4603      	mov	r3, r0
 8018b5c:	2b04      	cmp	r3, #4
 8018b5e:	d11a      	bne.n	8018b96 <RadioIrqProcess+0x296>
            DBG_GPIO_RADIO_TX( RST );
 8018b60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8018b64:	481d      	ldr	r0, [pc, #116]	@ (8018bdc <RadioIrqProcess+0x2dc>)
 8018b66:	f7fe ff1a 	bl	801799e <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8018b6a:	481d      	ldr	r0, [pc, #116]	@ (8018be0 <RadioIrqProcess+0x2e0>)
 8018b6c:	f002 fab8 	bl	801b0e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018b70:	2000      	movs	r0, #0
 8018b72:	f000 fb03 	bl	801917c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018b76:	4b1b      	ldr	r3, [pc, #108]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f000 80da 	beq.w	8018d34 <RadioIrqProcess+0x434>
 8018b80:	4b18      	ldr	r3, [pc, #96]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	685b      	ldr	r3, [r3, #4]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	f000 80d4 	beq.w	8018d34 <RadioIrqProcess+0x434>
                RadioEvents->TxTimeout( );
 8018b8c:	4b15      	ldr	r3, [pc, #84]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	4798      	blx	r3
        break;
 8018b94:	e0ce      	b.n	8018d34 <RadioIrqProcess+0x434>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018b96:	f000 f9a5 	bl	8018ee4 <SUBGRF_GetOperatingMode>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	2b05      	cmp	r3, #5
 8018b9e:	f040 80c9 	bne.w	8018d34 <RadioIrqProcess+0x434>
            DBG_GPIO_RADIO_RX( RST );
 8018ba2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8018ba6:	480d      	ldr	r0, [pc, #52]	@ (8018bdc <RadioIrqProcess+0x2dc>)
 8018ba8:	f7fe fef9 	bl	801799e <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8018bac:	480e      	ldr	r0, [pc, #56]	@ (8018be8 <RadioIrqProcess+0x2e8>)
 8018bae:	f002 fa97 	bl	801b0e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018bb2:	2000      	movs	r0, #0
 8018bb4:	f000 fae2 	bl	801917c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	f000 80b9 	beq.w	8018d34 <RadioIrqProcess+0x434>
 8018bc2:	4b08      	ldr	r3, [pc, #32]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	68db      	ldr	r3, [r3, #12]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	f000 80b3 	beq.w	8018d34 <RadioIrqProcess+0x434>
                RadioEvents->RxTimeout( );
 8018bce:	4b05      	ldr	r3, [pc, #20]	@ (8018be4 <RadioIrqProcess+0x2e4>)
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	68db      	ldr	r3, [r3, #12]
 8018bd4:	4798      	blx	r3
        break;
 8018bd6:	e0ad      	b.n	8018d34 <RadioIrqProcess+0x434>
 8018bd8:	2000133c 	.word	0x2000133c
 8018bdc:	48000400 	.word	0x48000400
 8018be0:	20001398 	.word	0x20001398
 8018be4:	20001338 	.word	0x20001338
 8018be8:	200013b0 	.word	0x200013b0
 8018bec:	20001238 	.word	0x20001238
 8018bf0:	20001360 	.word	0x20001360
 8018bf4:	10624dd3 	.word	0x10624dd3
 8018bf8:	0802184c 	.word	0x0802184c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018bfc:	4b54      	ldr	r3, [pc, #336]	@ (8018d50 <RadioIrqProcess+0x450>)
 8018bfe:	2201      	movs	r2, #1
 8018c00:	2100      	movs	r1, #0
 8018c02:	2002      	movs	r0, #2
 8018c04:	f001 fb92 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018c08:	4b52      	ldr	r3, [pc, #328]	@ (8018d54 <RadioIrqProcess+0x454>)
 8018c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	f000 8093 	beq.w	8018d38 <RadioIrqProcess+0x438>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018c12:	4a51      	ldr	r2, [pc, #324]	@ (8018d58 <RadioIrqProcess+0x458>)
 8018c14:	4b4f      	ldr	r3, [pc, #316]	@ (8018d54 <RadioIrqProcess+0x454>)
 8018c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c18:	0c1b      	lsrs	r3, r3, #16
 8018c1a:	b2db      	uxtb	r3, r3
 8018c1c:	4619      	mov	r1, r3
 8018c1e:	f640 1003 	movw	r0, #2307	@ 0x903
 8018c22:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018c24:	4a4c      	ldr	r2, [pc, #304]	@ (8018d58 <RadioIrqProcess+0x458>)
 8018c26:	4b4b      	ldr	r3, [pc, #300]	@ (8018d54 <RadioIrqProcess+0x454>)
 8018c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c2a:	0a1b      	lsrs	r3, r3, #8
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	4619      	mov	r1, r3
 8018c30:	f640 1004 	movw	r0, #2308	@ 0x904
 8018c34:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8018c36:	4a48      	ldr	r2, [pc, #288]	@ (8018d58 <RadioIrqProcess+0x458>)
 8018c38:	4b46      	ldr	r3, [pc, #280]	@ (8018d54 <RadioIrqProcess+0x454>)
 8018c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c3c:	b2db      	uxtb	r3, r3
 8018c3e:	4619      	mov	r1, r3
 8018c40:	f640 1005 	movw	r0, #2309	@ 0x905
 8018c44:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8018c46:	4c44      	ldr	r4, [pc, #272]	@ (8018d58 <RadioIrqProcess+0x458>)
 8018c48:	4b44      	ldr	r3, [pc, #272]	@ (8018d5c <RadioIrqProcess+0x45c>)
 8018c4a:	f640 1002 	movw	r0, #2306	@ 0x902
 8018c4e:	4798      	blx	r3
 8018c50:	4603      	mov	r3, r0
 8018c52:	f043 0301 	orr.w	r3, r3, #1
 8018c56:	b2db      	uxtb	r3, r3
 8018c58:	4619      	mov	r1, r3
 8018c5a:	f640 1002 	movw	r0, #2306	@ 0x902
 8018c5e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8018c60:	4b3c      	ldr	r3, [pc, #240]	@ (8018d54 <RadioIrqProcess+0x454>)
 8018c62:	2200      	movs	r2, #0
 8018c64:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018c66:	2300      	movs	r3, #0
 8018c68:	2200      	movs	r2, #0
 8018c6a:	f240 2162 	movw	r1, #610	@ 0x262
 8018c6e:	f240 2062 	movw	r0, #610	@ 0x262
 8018c72:	f000 fc5d 	bl	8019530 <SUBGRF_SetDioIrqParams>
        break;
 8018c76:	e05f      	b.n	8018d38 <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018c78:	4b39      	ldr	r3, [pc, #228]	@ (8018d60 <RadioIrqProcess+0x460>)
 8018c7a:	2201      	movs	r2, #1
 8018c7c:	2100      	movs	r1, #0
 8018c7e:	2002      	movs	r0, #2
 8018c80:	f001 fb54 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018c84:	f001 fade 	bl	801a244 <RFW_Is_Init>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d156      	bne.n	8018d3c <RadioIrqProcess+0x43c>
            RFW_ReceivePayload( );
 8018c8e:	f001 fb0f 	bl	801a2b0 <RFW_ReceivePayload>
        break;
 8018c92:	e053      	b.n	8018d3c <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018c94:	4b33      	ldr	r3, [pc, #204]	@ (8018d64 <RadioIrqProcess+0x464>)
 8018c96:	2201      	movs	r2, #1
 8018c98:	2100      	movs	r1, #0
 8018c9a:	2002      	movs	r0, #2
 8018c9c:	f001 fb46 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018ca0:	e051      	b.n	8018d46 <RadioIrqProcess+0x446>
        TimerStop( &RxTimeoutTimer );
 8018ca2:	4831      	ldr	r0, [pc, #196]	@ (8018d68 <RadioIrqProcess+0x468>)
 8018ca4:	f002 fa1c 	bl	801b0e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8018d54 <RadioIrqProcess+0x454>)
 8018caa:	785b      	ldrb	r3, [r3, #1]
 8018cac:	f083 0301 	eor.w	r3, r3, #1
 8018cb0:	b2db      	uxtb	r3, r3
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d002      	beq.n	8018cbc <RadioIrqProcess+0x3bc>
            SUBGRF_SetStandby( STDBY_RC );
 8018cb6:	2000      	movs	r0, #0
 8018cb8:	f000 fa60 	bl	801917c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8018d6c <RadioIrqProcess+0x46c>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d03d      	beq.n	8018d40 <RadioIrqProcess+0x440>
 8018cc4:	4b29      	ldr	r3, [pc, #164]	@ (8018d6c <RadioIrqProcess+0x46c>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	68db      	ldr	r3, [r3, #12]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d038      	beq.n	8018d40 <RadioIrqProcess+0x440>
            RadioEvents->RxTimeout( );
 8018cce:	4b27      	ldr	r3, [pc, #156]	@ (8018d6c <RadioIrqProcess+0x46c>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	68db      	ldr	r3, [r3, #12]
 8018cd4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018cd6:	4b26      	ldr	r3, [pc, #152]	@ (8018d70 <RadioIrqProcess+0x470>)
 8018cd8:	2201      	movs	r2, #1
 8018cda:	2100      	movs	r1, #0
 8018cdc:	2002      	movs	r0, #2
 8018cde:	f001 fb25 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018ce2:	e02d      	b.n	8018d40 <RadioIrqProcess+0x440>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018ce4:	4b23      	ldr	r3, [pc, #140]	@ (8018d74 <RadioIrqProcess+0x474>)
 8018ce6:	2201      	movs	r2, #1
 8018ce8:	2100      	movs	r1, #0
 8018cea:	2002      	movs	r0, #2
 8018cec:	f001 fb1e 	bl	801a32c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018cf0:	4b18      	ldr	r3, [pc, #96]	@ (8018d54 <RadioIrqProcess+0x454>)
 8018cf2:	785b      	ldrb	r3, [r3, #1]
 8018cf4:	f083 0301 	eor.w	r3, r3, #1
 8018cf8:	b2db      	uxtb	r3, r3
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d002      	beq.n	8018d04 <RadioIrqProcess+0x404>
            SUBGRF_SetStandby( STDBY_RC );
 8018cfe:	2000      	movs	r0, #0
 8018d00:	f000 fa3c 	bl	801917c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018d04:	4b19      	ldr	r3, [pc, #100]	@ (8018d6c <RadioIrqProcess+0x46c>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d01b      	beq.n	8018d44 <RadioIrqProcess+0x444>
 8018d0c:	4b17      	ldr	r3, [pc, #92]	@ (8018d6c <RadioIrqProcess+0x46c>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	691b      	ldr	r3, [r3, #16]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d016      	beq.n	8018d44 <RadioIrqProcess+0x444>
            RadioEvents->RxError( );
 8018d16:	4b15      	ldr	r3, [pc, #84]	@ (8018d6c <RadioIrqProcess+0x46c>)
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	691b      	ldr	r3, [r3, #16]
 8018d1c:	4798      	blx	r3
        break;
 8018d1e:	e011      	b.n	8018d44 <RadioIrqProcess+0x444>
        break;
 8018d20:	bf00      	nop
 8018d22:	e010      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d24:	bf00      	nop
 8018d26:	e00e      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d28:	bf00      	nop
 8018d2a:	e00c      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d2c:	bf00      	nop
 8018d2e:	e00a      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d30:	bf00      	nop
 8018d32:	e008      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d34:	bf00      	nop
 8018d36:	e006      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d38:	bf00      	nop
 8018d3a:	e004      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d3c:	bf00      	nop
 8018d3e:	e002      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d40:	bf00      	nop
 8018d42:	e000      	b.n	8018d46 <RadioIrqProcess+0x446>
        break;
 8018d44:	bf00      	nop
    }
}
 8018d46:	bf00      	nop
 8018d48:	3708      	adds	r7, #8
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8018d4e:	bf00      	nop
 8018d50:	08021860 	.word	0x08021860
 8018d54:	2000133c 	.word	0x2000133c
 8018d58:	080186f9 	.word	0x080186f9
 8018d5c:	0801871d 	.word	0x0801871d
 8018d60:	0802186c 	.word	0x0802186c
 8018d64:	08021878 	.word	0x08021878
 8018d68:	200013b0 	.word	0x200013b0
 8018d6c:	20001338 	.word	0x20001338
 8018d70:	08021884 	.word	0x08021884
 8018d74:	08021890 	.word	0x08021890

08018d78 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018d7c:	4b09      	ldr	r3, [pc, #36]	@ (8018da4 <RadioTxPrbs+0x2c>)
 8018d7e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018d82:	2101      	movs	r1, #1
 8018d84:	4618      	mov	r0, r3
 8018d86:	f001 f871 	bl	8019e6c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018d8a:	4b07      	ldr	r3, [pc, #28]	@ (8018da8 <RadioTxPrbs+0x30>)
 8018d8c:	212d      	movs	r1, #45	@ 0x2d
 8018d8e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018d92:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018d94:	f000 fab5 	bl	8019302 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018d98:	4804      	ldr	r0, [pc, #16]	@ (8018dac <RadioTxPrbs+0x34>)
 8018d9a:	f000 fa0b 	bl	80191b4 <SUBGRF_SetTx>
}
 8018d9e:	bf00      	nop
 8018da0:	bd80      	pop	{r7, pc}
 8018da2:	bf00      	nop
 8018da4:	2000133c 	.word	0x2000133c
 8018da8:	080186f9 	.word	0x080186f9
 8018dac:	000fffff 	.word	0x000fffff

08018db0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b084      	sub	sp, #16
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	4603      	mov	r3, r0
 8018db8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f001 f87c 	bl	8019ebc <SUBGRF_SetRfTxPower>
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018dc8:	210e      	movs	r1, #14
 8018dca:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018dce:	f000 ff59 	bl	8019c84 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018dd2:	7bfb      	ldrb	r3, [r7, #15]
 8018dd4:	2101      	movs	r1, #1
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f001 f848 	bl	8019e6c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018ddc:	f000 fa88 	bl	80192f0 <SUBGRF_SetTxContinuousWave>
}
 8018de0:	bf00      	nop
 8018de2:	3710      	adds	r7, #16
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}

08018de8 <RadioSetRxGenericConfig>:
}
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8018de8:	b480      	push	{r7}
 8018dea:	b085      	sub	sp, #20
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	60b9      	str	r1, [r7, #8]
 8018df0:	607a      	str	r2, [r7, #4]
 8018df2:	603b      	str	r3, [r7, #0]
 8018df4:	4603      	mov	r3, r0
 8018df6:	73fb      	strb	r3, [r7, #15]
    default:
        break;
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8018df8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3714      	adds	r7, #20
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bc80      	pop	{r7}
 8018e04:	4770      	bx	lr

08018e06 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8018e06:	b480      	push	{r7}
 8018e08:	b085      	sub	sp, #20
 8018e0a:	af00      	add	r7, sp, #0
 8018e0c:	60b9      	str	r1, [r7, #8]
 8018e0e:	607b      	str	r3, [r7, #4]
 8018e10:	4603      	mov	r3, r0
 8018e12:	73fb      	strb	r3, [r7, #15]
 8018e14:	4613      	mov	r3, r2
 8018e16:	73bb      	strb	r3, [r7, #14]
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8018e18:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	3714      	adds	r7, #20
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bc80      	pop	{r7}
 8018e24:	4770      	bx	lr

08018e26 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8018e26:	b480      	push	{r7}
 8018e28:	b085      	sub	sp, #20
 8018e2a:	af00      	add	r7, sp, #0
 8018e2c:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018e2e:	2301      	movs	r3, #1
 8018e30:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8018e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e34:	4618      	mov	r0, r3
 8018e36:	3714      	adds	r7, #20
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bc80      	pop	{r7}
 8018e3c:	4770      	bx	lr

08018e3e <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8018e3e:	b480      	push	{r7}
 8018e40:	b083      	sub	sp, #12
 8018e42:	af00      	add	r7, sp, #0
 8018e44:	6078      	str	r0, [r7, #4]
 8018e46:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018e48:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	370c      	adds	r7, #12
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bc80      	pop	{r7}
 8018e52:	4770      	bx	lr

08018e54 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b084      	sub	sp, #16
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d002      	beq.n	8018e68 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018e62:	4a1d      	ldr	r2, [pc, #116]	@ (8018ed8 <SUBGRF_Init+0x84>)
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018e68:	f7e8 fc4a 	bl	8001700 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018e6c:	2002      	movs	r0, #2
 8018e6e:	f001 f901 	bl	801a074 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018e72:	4b1a      	ldr	r3, [pc, #104]	@ (8018edc <SUBGRF_Init+0x88>)
 8018e74:	2200      	movs	r2, #0
 8018e76:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018e78:	2000      	movs	r0, #0
 8018e7a:	f000 f97f 	bl	801917c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018e7e:	f7e9 fcb1 	bl	80027e4 <RBI_IsTCXO>
 8018e82:	4603      	mov	r3, r0
 8018e84:	2b01      	cmp	r3, #1
 8018e86:	d10e      	bne.n	8018ea6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018e88:	2140      	movs	r1, #64	@ 0x40
 8018e8a:	2001      	movs	r0, #1
 8018e8c:	f000 fb8a 	bl	80195a4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018e90:	2100      	movs	r1, #0
 8018e92:	f640 1011 	movw	r0, #2321	@ 0x911
 8018e96:	f000 fef5 	bl	8019c84 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018e9a:	237f      	movs	r3, #127	@ 0x7f
 8018e9c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018e9e:	7b38      	ldrb	r0, [r7, #12]
 8018ea0:	f000 fa8d 	bl	80193be <SUBGRF_Calibrate>
 8018ea4:	e009      	b.n	8018eba <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018ea6:	2120      	movs	r1, #32
 8018ea8:	f640 1011 	movw	r0, #2321	@ 0x911
 8018eac:	f000 feea 	bl	8019c84 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018eb0:	2120      	movs	r1, #32
 8018eb2:	f640 1012 	movw	r0, #2322	@ 0x912
 8018eb6:	f000 fee5 	bl	8019c84 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018eba:	210e      	movs	r1, #14
 8018ebc:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018ec0:	f000 fee0 	bl	8019c84 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8018ec4:	f7e9 fc72 	bl	80027ac <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018ec8:	4b05      	ldr	r3, [pc, #20]	@ (8018ee0 <SUBGRF_Init+0x8c>)
 8018eca:	2201      	movs	r2, #1
 8018ecc:	701a      	strb	r2, [r3, #0]
}
 8018ece:	bf00      	nop
 8018ed0:	3710      	adds	r7, #16
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}
 8018ed6:	bf00      	nop
 8018ed8:	200013d4 	.word	0x200013d4
 8018edc:	200013d0 	.word	0x200013d0
 8018ee0:	200013c8 	.word	0x200013c8

08018ee4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018ee4:	b480      	push	{r7}
 8018ee6:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018ee8:	4b02      	ldr	r3, [pc, #8]	@ (8018ef4 <SUBGRF_GetOperatingMode+0x10>)
 8018eea:	781b      	ldrb	r3, [r3, #0]
}
 8018eec:	4618      	mov	r0, r3
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bc80      	pop	{r7}
 8018ef2:	4770      	bx	lr
 8018ef4:	200013c8 	.word	0x200013c8

08018ef8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	b082      	sub	sp, #8
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
 8018f00:	460b      	mov	r3, r1
 8018f02:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018f04:	78fb      	ldrb	r3, [r7, #3]
 8018f06:	461a      	mov	r2, r3
 8018f08:	6879      	ldr	r1, [r7, #4]
 8018f0a:	2000      	movs	r0, #0
 8018f0c:	f000 ff26 	bl	8019d5c <SUBGRF_WriteBuffer>
}
 8018f10:	bf00      	nop
 8018f12:	3708      	adds	r7, #8
 8018f14:	46bd      	mov	sp, r7
 8018f16:	bd80      	pop	{r7, pc}

08018f18 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b086      	sub	sp, #24
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	60f8      	str	r0, [r7, #12]
 8018f20:	60b9      	str	r1, [r7, #8]
 8018f22:	4613      	mov	r3, r2
 8018f24:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018f26:	2300      	movs	r3, #0
 8018f28:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018f2a:	f107 0317 	add.w	r3, r7, #23
 8018f2e:	4619      	mov	r1, r3
 8018f30:	68b8      	ldr	r0, [r7, #8]
 8018f32:	f000 fe29 	bl	8019b88 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	781b      	ldrb	r3, [r3, #0]
 8018f3a:	79fa      	ldrb	r2, [r7, #7]
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d201      	bcs.n	8018f44 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018f40:	2301      	movs	r3, #1
 8018f42:	e007      	b.n	8018f54 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018f44:	7df8      	ldrb	r0, [r7, #23]
 8018f46:	68bb      	ldr	r3, [r7, #8]
 8018f48:	781b      	ldrb	r3, [r3, #0]
 8018f4a:	461a      	mov	r2, r3
 8018f4c:	68f9      	ldr	r1, [r7, #12]
 8018f4e:	f000 ff27 	bl	8019da0 <SUBGRF_ReadBuffer>

    return 0;
 8018f52:	2300      	movs	r3, #0
}
 8018f54:	4618      	mov	r0, r3
 8018f56:	3718      	adds	r7, #24
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd80      	pop	{r7, pc}

08018f5c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	60f8      	str	r0, [r7, #12]
 8018f64:	460b      	mov	r3, r1
 8018f66:	607a      	str	r2, [r7, #4]
 8018f68:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018f6a:	7afb      	ldrb	r3, [r7, #11]
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	68f8      	ldr	r0, [r7, #12]
 8018f70:	f7ff ffc2 	bl	8018ef8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018f74:	6878      	ldr	r0, [r7, #4]
 8018f76:	f000 f91d 	bl	80191b4 <SUBGRF_SetTx>
}
 8018f7a:	bf00      	nop
 8018f7c:	3710      	adds	r7, #16
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bd80      	pop	{r7, pc}

08018f82 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018f82:	b580      	push	{r7, lr}
 8018f84:	b082      	sub	sp, #8
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018f8a:	2208      	movs	r2, #8
 8018f8c:	6879      	ldr	r1, [r7, #4]
 8018f8e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8018f92:	f000 fe9f 	bl	8019cd4 <SUBGRF_WriteRegisters>
    return 0;
 8018f96:	2300      	movs	r3, #0
}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	3708      	adds	r7, #8
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}

08018fa0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b084      	sub	sp, #16
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018faa:	88fb      	ldrh	r3, [r7, #6]
 8018fac:	0a1b      	lsrs	r3, r3, #8
 8018fae:	b29b      	uxth	r3, r3
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018fb4:	88fb      	ldrh	r3, [r7, #6]
 8018fb6:	b2db      	uxtb	r3, r3
 8018fb8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018fba:	f000 fb77 	bl	80196ac <SUBGRF_GetPacketType>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d108      	bne.n	8018fd6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018fc4:	f107 030c 	add.w	r3, r7, #12
 8018fc8:	2202      	movs	r2, #2
 8018fca:	4619      	mov	r1, r3
 8018fcc:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018fd0:	f000 fe80 	bl	8019cd4 <SUBGRF_WriteRegisters>
            break;
 8018fd4:	e000      	b.n	8018fd8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018fd6:	bf00      	nop
    }
}
 8018fd8:	bf00      	nop
 8018fda:	3710      	adds	r7, #16
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}

08018fe0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b084      	sub	sp, #16
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018fea:	88fb      	ldrh	r3, [r7, #6]
 8018fec:	0a1b      	lsrs	r3, r3, #8
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018ff4:	88fb      	ldrh	r3, [r7, #6]
 8018ff6:	b2db      	uxtb	r3, r3
 8018ff8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018ffa:	f000 fb57 	bl	80196ac <SUBGRF_GetPacketType>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	d108      	bne.n	8019016 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019004:	f107 030c 	add.w	r3, r7, #12
 8019008:	2202      	movs	r2, #2
 801900a:	4619      	mov	r1, r3
 801900c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019010:	f000 fe60 	bl	8019cd4 <SUBGRF_WriteRegisters>
            break;
 8019014:	e000      	b.n	8019018 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019016:	bf00      	nop
    }
}
 8019018:	bf00      	nop
 801901a:	3710      	adds	r7, #16
 801901c:	46bd      	mov	sp, r7
 801901e:	bd80      	pop	{r7, pc}

08019020 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b084      	sub	sp, #16
 8019024:	af00      	add	r7, sp, #0
 8019026:	4603      	mov	r3, r0
 8019028:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801902a:	2300      	movs	r3, #0
 801902c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801902e:	f000 fb3d 	bl	80196ac <SUBGRF_GetPacketType>
 8019032:	4603      	mov	r3, r0
 8019034:	2b00      	cmp	r3, #0
 8019036:	d121      	bne.n	801907c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019038:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801903c:	f000 fe36 	bl	8019cac <SUBGRF_ReadRegister>
 8019040:	4603      	mov	r3, r0
 8019042:	f023 0301 	bic.w	r3, r3, #1
 8019046:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019048:	88fb      	ldrh	r3, [r7, #6]
 801904a:	0a1b      	lsrs	r3, r3, #8
 801904c:	b29b      	uxth	r3, r3
 801904e:	b25b      	sxtb	r3, r3
 8019050:	f003 0301 	and.w	r3, r3, #1
 8019054:	b25a      	sxtb	r2, r3
 8019056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801905a:	4313      	orrs	r3, r2
 801905c:	b25b      	sxtb	r3, r3
 801905e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019060:	7bfb      	ldrb	r3, [r7, #15]
 8019062:	4619      	mov	r1, r3
 8019064:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019068:	f000 fe0c 	bl	8019c84 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801906c:	88fb      	ldrh	r3, [r7, #6]
 801906e:	b2db      	uxtb	r3, r3
 8019070:	4619      	mov	r1, r3
 8019072:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8019076:	f000 fe05 	bl	8019c84 <SUBGRF_WriteRegister>
            break;
 801907a:	e000      	b.n	801907e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801907c:	bf00      	nop
    }
}
 801907e:	bf00      	nop
 8019080:	3710      	adds	r7, #16
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}

08019086 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019086:	b580      	push	{r7, lr}
 8019088:	b082      	sub	sp, #8
 801908a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801908c:	2300      	movs	r3, #0
 801908e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019090:	2300      	movs	r3, #0
 8019092:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019094:	2300      	movs	r3, #0
 8019096:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019098:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801909c:	f000 fe06 	bl	8019cac <SUBGRF_ReadRegister>
 80190a0:	4603      	mov	r3, r0
 80190a2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80190a4:	79fb      	ldrb	r3, [r7, #7]
 80190a6:	f023 0301 	bic.w	r3, r3, #1
 80190aa:	b2db      	uxtb	r3, r3
 80190ac:	4619      	mov	r1, r3
 80190ae:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80190b2:	f000 fde7 	bl	8019c84 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80190b6:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80190ba:	f000 fdf7 	bl	8019cac <SUBGRF_ReadRegister>
 80190be:	4603      	mov	r3, r0
 80190c0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80190c2:	79bb      	ldrb	r3, [r7, #6]
 80190c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	4619      	mov	r1, r3
 80190cc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80190d0:	f000 fdd8 	bl	8019c84 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80190d4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80190d8:	f000 f88c 	bl	80191f4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80190dc:	463b      	mov	r3, r7
 80190de:	2204      	movs	r2, #4
 80190e0:	4619      	mov	r1, r3
 80190e2:	f640 0019 	movw	r0, #2073	@ 0x819
 80190e6:	f000 fe17 	bl	8019d18 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80190ea:	2000      	movs	r0, #0
 80190ec:	f000 f846 	bl	801917c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80190f0:	79fb      	ldrb	r3, [r7, #7]
 80190f2:	4619      	mov	r1, r3
 80190f4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80190f8:	f000 fdc4 	bl	8019c84 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80190fc:	79bb      	ldrb	r3, [r7, #6]
 80190fe:	4619      	mov	r1, r3
 8019100:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019104:	f000 fdbe 	bl	8019c84 <SUBGRF_WriteRegister>

    return number;
 8019108:	683b      	ldr	r3, [r7, #0]
}
 801910a:	4618      	mov	r0, r3
 801910c:	3708      	adds	r7, #8
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
	...

08019114 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b084      	sub	sp, #16
 8019118:	af00      	add	r7, sp, #0
 801911a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801911c:	2000      	movs	r0, #0
 801911e:	f7e9 fb4c 	bl	80027ba <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019122:	2002      	movs	r0, #2
 8019124:	f000 ffa6 	bl	801a074 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019128:	793b      	ldrb	r3, [r7, #4]
 801912a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801912e:	b2db      	uxtb	r3, r3
 8019130:	b25b      	sxtb	r3, r3
 8019132:	009b      	lsls	r3, r3, #2
 8019134:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019136:	793b      	ldrb	r3, [r7, #4]
 8019138:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801913c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801913e:	b25b      	sxtb	r3, r3
 8019140:	005b      	lsls	r3, r3, #1
 8019142:	b25b      	sxtb	r3, r3
 8019144:	4313      	orrs	r3, r2
 8019146:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019148:	793b      	ldrb	r3, [r7, #4]
 801914a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801914e:	b2db      	uxtb	r3, r3
 8019150:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019152:	4313      	orrs	r3, r2
 8019154:	b25b      	sxtb	r3, r3
 8019156:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019158:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801915a:	f107 030f 	add.w	r3, r7, #15
 801915e:	2201      	movs	r2, #1
 8019160:	4619      	mov	r1, r3
 8019162:	2084      	movs	r0, #132	@ 0x84
 8019164:	f000 fe3e 	bl	8019de4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019168:	4b03      	ldr	r3, [pc, #12]	@ (8019178 <SUBGRF_SetSleep+0x64>)
 801916a:	2200      	movs	r2, #0
 801916c:	701a      	strb	r2, [r3, #0]
}
 801916e:	bf00      	nop
 8019170:	3710      	adds	r7, #16
 8019172:	46bd      	mov	sp, r7
 8019174:	bd80      	pop	{r7, pc}
 8019176:	bf00      	nop
 8019178:	200013c8 	.word	0x200013c8

0801917c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b082      	sub	sp, #8
 8019180:	af00      	add	r7, sp, #0
 8019182:	4603      	mov	r3, r0
 8019184:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019186:	1dfb      	adds	r3, r7, #7
 8019188:	2201      	movs	r2, #1
 801918a:	4619      	mov	r1, r3
 801918c:	2080      	movs	r0, #128	@ 0x80
 801918e:	f000 fe29 	bl	8019de4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019192:	79fb      	ldrb	r3, [r7, #7]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d103      	bne.n	80191a0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019198:	4b05      	ldr	r3, [pc, #20]	@ (80191b0 <SUBGRF_SetStandby+0x34>)
 801919a:	2201      	movs	r2, #1
 801919c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801919e:	e002      	b.n	80191a6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80191a0:	4b03      	ldr	r3, [pc, #12]	@ (80191b0 <SUBGRF_SetStandby+0x34>)
 80191a2:	2202      	movs	r2, #2
 80191a4:	701a      	strb	r2, [r3, #0]
}
 80191a6:	bf00      	nop
 80191a8:	3708      	adds	r7, #8
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	bf00      	nop
 80191b0:	200013c8 	.word	0x200013c8

080191b4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b084      	sub	sp, #16
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80191bc:	4b0c      	ldr	r3, [pc, #48]	@ (80191f0 <SUBGRF_SetTx+0x3c>)
 80191be:	2204      	movs	r2, #4
 80191c0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	0c1b      	lsrs	r3, r3, #16
 80191c6:	b2db      	uxtb	r3, r3
 80191c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	0a1b      	lsrs	r3, r3, #8
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	b2db      	uxtb	r3, r3
 80191d6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80191d8:	f107 030c 	add.w	r3, r7, #12
 80191dc:	2203      	movs	r2, #3
 80191de:	4619      	mov	r1, r3
 80191e0:	2083      	movs	r0, #131	@ 0x83
 80191e2:	f000 fdff 	bl	8019de4 <SUBGRF_WriteCommand>
}
 80191e6:	bf00      	nop
 80191e8:	3710      	adds	r7, #16
 80191ea:	46bd      	mov	sp, r7
 80191ec:	bd80      	pop	{r7, pc}
 80191ee:	bf00      	nop
 80191f0:	200013c8 	.word	0x200013c8

080191f4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b084      	sub	sp, #16
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80191fc:	4b0c      	ldr	r3, [pc, #48]	@ (8019230 <SUBGRF_SetRx+0x3c>)
 80191fe:	2205      	movs	r2, #5
 8019200:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	0c1b      	lsrs	r3, r3, #16
 8019206:	b2db      	uxtb	r3, r3
 8019208:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	0a1b      	lsrs	r3, r3, #8
 801920e:	b2db      	uxtb	r3, r3
 8019210:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	b2db      	uxtb	r3, r3
 8019216:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019218:	f107 030c 	add.w	r3, r7, #12
 801921c:	2203      	movs	r2, #3
 801921e:	4619      	mov	r1, r3
 8019220:	2082      	movs	r0, #130	@ 0x82
 8019222:	f000 fddf 	bl	8019de4 <SUBGRF_WriteCommand>
}
 8019226:	bf00      	nop
 8019228:	3710      	adds	r7, #16
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	200013c8 	.word	0x200013c8

08019234 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b084      	sub	sp, #16
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801923c:	4b0e      	ldr	r3, [pc, #56]	@ (8019278 <SUBGRF_SetRxBoosted+0x44>)
 801923e:	2205      	movs	r2, #5
 8019240:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019242:	2197      	movs	r1, #151	@ 0x97
 8019244:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019248:	f000 fd1c 	bl	8019c84 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	0c1b      	lsrs	r3, r3, #16
 8019250:	b2db      	uxtb	r3, r3
 8019252:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	0a1b      	lsrs	r3, r3, #8
 8019258:	b2db      	uxtb	r3, r3
 801925a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	b2db      	uxtb	r3, r3
 8019260:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019262:	f107 030c 	add.w	r3, r7, #12
 8019266:	2203      	movs	r2, #3
 8019268:	4619      	mov	r1, r3
 801926a:	2082      	movs	r0, #130	@ 0x82
 801926c:	f000 fdba 	bl	8019de4 <SUBGRF_WriteCommand>
}
 8019270:	bf00      	nop
 8019272:	3710      	adds	r7, #16
 8019274:	46bd      	mov	sp, r7
 8019276:	bd80      	pop	{r7, pc}
 8019278:	200013c8 	.word	0x200013c8

0801927c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b084      	sub	sp, #16
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
 8019284:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	0c1b      	lsrs	r3, r3, #16
 801928a:	b2db      	uxtb	r3, r3
 801928c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	0a1b      	lsrs	r3, r3, #8
 8019292:	b2db      	uxtb	r3, r3
 8019294:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	b2db      	uxtb	r3, r3
 801929a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	0c1b      	lsrs	r3, r3, #16
 80192a0:	b2db      	uxtb	r3, r3
 80192a2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80192a4:	683b      	ldr	r3, [r7, #0]
 80192a6:	0a1b      	lsrs	r3, r3, #8
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80192ac:	683b      	ldr	r3, [r7, #0]
 80192ae:	b2db      	uxtb	r3, r3
 80192b0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80192b2:	f107 0308 	add.w	r3, r7, #8
 80192b6:	2206      	movs	r2, #6
 80192b8:	4619      	mov	r1, r3
 80192ba:	2094      	movs	r0, #148	@ 0x94
 80192bc:	f000 fd92 	bl	8019de4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80192c0:	4b03      	ldr	r3, [pc, #12]	@ (80192d0 <SUBGRF_SetRxDutyCycle+0x54>)
 80192c2:	2206      	movs	r2, #6
 80192c4:	701a      	strb	r2, [r3, #0]
}
 80192c6:	bf00      	nop
 80192c8:	3710      	adds	r7, #16
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
 80192ce:	bf00      	nop
 80192d0:	200013c8 	.word	0x200013c8

080192d4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80192d8:	2200      	movs	r2, #0
 80192da:	2100      	movs	r1, #0
 80192dc:	20c5      	movs	r0, #197	@ 0xc5
 80192de:	f000 fd81 	bl	8019de4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80192e2:	4b02      	ldr	r3, [pc, #8]	@ (80192ec <SUBGRF_SetCad+0x18>)
 80192e4:	2207      	movs	r2, #7
 80192e6:	701a      	strb	r2, [r3, #0]
}
 80192e8:	bf00      	nop
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	200013c8 	.word	0x200013c8

080192f0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80192f4:	2200      	movs	r2, #0
 80192f6:	2100      	movs	r1, #0
 80192f8:	20d1      	movs	r0, #209	@ 0xd1
 80192fa:	f000 fd73 	bl	8019de4 <SUBGRF_WriteCommand>
}
 80192fe:	bf00      	nop
 8019300:	bd80      	pop	{r7, pc}

08019302 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019302:	b580      	push	{r7, lr}
 8019304:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019306:	2200      	movs	r2, #0
 8019308:	2100      	movs	r1, #0
 801930a:	20d2      	movs	r0, #210	@ 0xd2
 801930c:	f000 fd6a 	bl	8019de4 <SUBGRF_WriteCommand>
}
 8019310:	bf00      	nop
 8019312:	bd80      	pop	{r7, pc}

08019314 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b082      	sub	sp, #8
 8019318:	af00      	add	r7, sp, #0
 801931a:	4603      	mov	r3, r0
 801931c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801931e:	1dfb      	adds	r3, r7, #7
 8019320:	2201      	movs	r2, #1
 8019322:	4619      	mov	r1, r3
 8019324:	209f      	movs	r0, #159	@ 0x9f
 8019326:	f000 fd5d 	bl	8019de4 <SUBGRF_WriteCommand>
}
 801932a:	bf00      	nop
 801932c:	3708      	adds	r7, #8
 801932e:	46bd      	mov	sp, r7
 8019330:	bd80      	pop	{r7, pc}

08019332 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019332:	b580      	push	{r7, lr}
 8019334:	b084      	sub	sp, #16
 8019336:	af00      	add	r7, sp, #0
 8019338:	4603      	mov	r3, r0
 801933a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801933c:	1dfb      	adds	r3, r7, #7
 801933e:	2201      	movs	r2, #1
 8019340:	4619      	mov	r1, r3
 8019342:	20a0      	movs	r0, #160	@ 0xa0
 8019344:	f000 fd4e 	bl	8019de4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019348:	79fb      	ldrb	r3, [r7, #7]
 801934a:	2b3f      	cmp	r3, #63	@ 0x3f
 801934c:	d91c      	bls.n	8019388 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801934e:	79fb      	ldrb	r3, [r7, #7]
 8019350:	085b      	lsrs	r3, r3, #1
 8019352:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019354:	2300      	movs	r3, #0
 8019356:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019358:	2300      	movs	r3, #0
 801935a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801935c:	e005      	b.n	801936a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801935e:	7bfb      	ldrb	r3, [r7, #15]
 8019360:	089b      	lsrs	r3, r3, #2
 8019362:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019364:	7bbb      	ldrb	r3, [r7, #14]
 8019366:	3301      	adds	r3, #1
 8019368:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801936a:	7bfb      	ldrb	r3, [r7, #15]
 801936c:	2b1f      	cmp	r3, #31
 801936e:	d8f6      	bhi.n	801935e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019370:	7bfb      	ldrb	r3, [r7, #15]
 8019372:	00db      	lsls	r3, r3, #3
 8019374:	b2da      	uxtb	r2, r3
 8019376:	7bbb      	ldrb	r3, [r7, #14]
 8019378:	4413      	add	r3, r2
 801937a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801937c:	7b7b      	ldrb	r3, [r7, #13]
 801937e:	4619      	mov	r1, r3
 8019380:	f240 7006 	movw	r0, #1798	@ 0x706
 8019384:	f000 fc7e 	bl	8019c84 <SUBGRF_WriteRegister>
    }
}
 8019388:	bf00      	nop
 801938a:	3710      	adds	r7, #16
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}

08019390 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b082      	sub	sp, #8
 8019394:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019396:	f7e9 fa2c 	bl	80027f2 <RBI_IsDCDC>
 801939a:	4603      	mov	r3, r0
 801939c:	2b01      	cmp	r3, #1
 801939e:	d102      	bne.n	80193a6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80193a0:	2301      	movs	r3, #1
 80193a2:	71fb      	strb	r3, [r7, #7]
 80193a4:	e001      	b.n	80193aa <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80193a6:	2300      	movs	r3, #0
 80193a8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80193aa:	1dfb      	adds	r3, r7, #7
 80193ac:	2201      	movs	r2, #1
 80193ae:	4619      	mov	r1, r3
 80193b0:	2096      	movs	r0, #150	@ 0x96
 80193b2:	f000 fd17 	bl	8019de4 <SUBGRF_WriteCommand>
}
 80193b6:	bf00      	nop
 80193b8:	3708      	adds	r7, #8
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}

080193be <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80193be:	b580      	push	{r7, lr}
 80193c0:	b084      	sub	sp, #16
 80193c2:	af00      	add	r7, sp, #0
 80193c4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80193c6:	793b      	ldrb	r3, [r7, #4]
 80193c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80193cc:	b2db      	uxtb	r3, r3
 80193ce:	b25b      	sxtb	r3, r3
 80193d0:	019b      	lsls	r3, r3, #6
 80193d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80193d4:	793b      	ldrb	r3, [r7, #4]
 80193d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80193da:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80193dc:	b25b      	sxtb	r3, r3
 80193de:	015b      	lsls	r3, r3, #5
 80193e0:	b25b      	sxtb	r3, r3
 80193e2:	4313      	orrs	r3, r2
 80193e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80193e6:	793b      	ldrb	r3, [r7, #4]
 80193e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80193ec:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80193ee:	b25b      	sxtb	r3, r3
 80193f0:	011b      	lsls	r3, r3, #4
 80193f2:	b25b      	sxtb	r3, r3
 80193f4:	4313      	orrs	r3, r2
 80193f6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80193f8:	793b      	ldrb	r3, [r7, #4]
 80193fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80193fe:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019400:	b25b      	sxtb	r3, r3
 8019402:	00db      	lsls	r3, r3, #3
 8019404:	b25b      	sxtb	r3, r3
 8019406:	4313      	orrs	r3, r2
 8019408:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801940a:	793b      	ldrb	r3, [r7, #4]
 801940c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019410:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019412:	b25b      	sxtb	r3, r3
 8019414:	009b      	lsls	r3, r3, #2
 8019416:	b25b      	sxtb	r3, r3
 8019418:	4313      	orrs	r3, r2
 801941a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801941c:	793b      	ldrb	r3, [r7, #4]
 801941e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019422:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019424:	b25b      	sxtb	r3, r3
 8019426:	005b      	lsls	r3, r3, #1
 8019428:	b25b      	sxtb	r3, r3
 801942a:	4313      	orrs	r3, r2
 801942c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801942e:	793b      	ldrb	r3, [r7, #4]
 8019430:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019434:	b2db      	uxtb	r3, r3
 8019436:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019438:	4313      	orrs	r3, r2
 801943a:	b25b      	sxtb	r3, r3
 801943c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801943e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019440:	f107 030f 	add.w	r3, r7, #15
 8019444:	2201      	movs	r2, #1
 8019446:	4619      	mov	r1, r3
 8019448:	2089      	movs	r0, #137	@ 0x89
 801944a:	f000 fccb 	bl	8019de4 <SUBGRF_WriteCommand>
}
 801944e:	bf00      	nop
 8019450:	3710      	adds	r7, #16
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}
	...

08019458 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b084      	sub	sp, #16
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	4a1d      	ldr	r2, [pc, #116]	@ (80194d8 <SUBGRF_CalibrateImage+0x80>)
 8019464:	4293      	cmp	r3, r2
 8019466:	d904      	bls.n	8019472 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019468:	23e1      	movs	r3, #225	@ 0xe1
 801946a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801946c:	23e9      	movs	r3, #233	@ 0xe9
 801946e:	737b      	strb	r3, [r7, #13]
 8019470:	e027      	b.n	80194c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	4a19      	ldr	r2, [pc, #100]	@ (80194dc <SUBGRF_CalibrateImage+0x84>)
 8019476:	4293      	cmp	r3, r2
 8019478:	d904      	bls.n	8019484 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801947a:	23d7      	movs	r3, #215	@ 0xd7
 801947c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801947e:	23db      	movs	r3, #219	@ 0xdb
 8019480:	737b      	strb	r3, [r7, #13]
 8019482:	e01e      	b.n	80194c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	4a16      	ldr	r2, [pc, #88]	@ (80194e0 <SUBGRF_CalibrateImage+0x88>)
 8019488:	4293      	cmp	r3, r2
 801948a:	d904      	bls.n	8019496 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801948c:	23c1      	movs	r3, #193	@ 0xc1
 801948e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019490:	23c5      	movs	r3, #197	@ 0xc5
 8019492:	737b      	strb	r3, [r7, #13]
 8019494:	e015      	b.n	80194c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	4a12      	ldr	r2, [pc, #72]	@ (80194e4 <SUBGRF_CalibrateImage+0x8c>)
 801949a:	4293      	cmp	r3, r2
 801949c:	d904      	bls.n	80194a8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801949e:	2375      	movs	r3, #117	@ 0x75
 80194a0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80194a2:	2381      	movs	r3, #129	@ 0x81
 80194a4:	737b      	strb	r3, [r7, #13]
 80194a6:	e00c      	b.n	80194c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	4a0f      	ldr	r2, [pc, #60]	@ (80194e8 <SUBGRF_CalibrateImage+0x90>)
 80194ac:	4293      	cmp	r3, r2
 80194ae:	d904      	bls.n	80194ba <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80194b0:	236b      	movs	r3, #107	@ 0x6b
 80194b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80194b4:	236f      	movs	r3, #111	@ 0x6f
 80194b6:	737b      	strb	r3, [r7, #13]
 80194b8:	e003      	b.n	80194c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80194ba:	2329      	movs	r3, #41	@ 0x29
 80194bc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80194be:	232b      	movs	r3, #43	@ 0x2b
 80194c0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80194c2:	f107 030c 	add.w	r3, r7, #12
 80194c6:	2202      	movs	r2, #2
 80194c8:	4619      	mov	r1, r3
 80194ca:	2098      	movs	r0, #152	@ 0x98
 80194cc:	f000 fc8a 	bl	8019de4 <SUBGRF_WriteCommand>
}
 80194d0:	bf00      	nop
 80194d2:	3710      	adds	r7, #16
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}
 80194d8:	35a4e900 	.word	0x35a4e900
 80194dc:	32a9f880 	.word	0x32a9f880
 80194e0:	2de54480 	.word	0x2de54480
 80194e4:	1b6b0b00 	.word	0x1b6b0b00
 80194e8:	1954fc40 	.word	0x1954fc40

080194ec <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80194ec:	b590      	push	{r4, r7, lr}
 80194ee:	b085      	sub	sp, #20
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	4604      	mov	r4, r0
 80194f4:	4608      	mov	r0, r1
 80194f6:	4611      	mov	r1, r2
 80194f8:	461a      	mov	r2, r3
 80194fa:	4623      	mov	r3, r4
 80194fc:	71fb      	strb	r3, [r7, #7]
 80194fe:	4603      	mov	r3, r0
 8019500:	71bb      	strb	r3, [r7, #6]
 8019502:	460b      	mov	r3, r1
 8019504:	717b      	strb	r3, [r7, #5]
 8019506:	4613      	mov	r3, r2
 8019508:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801950a:	79fb      	ldrb	r3, [r7, #7]
 801950c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801950e:	79bb      	ldrb	r3, [r7, #6]
 8019510:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019512:	797b      	ldrb	r3, [r7, #5]
 8019514:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019516:	793b      	ldrb	r3, [r7, #4]
 8019518:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801951a:	f107 030c 	add.w	r3, r7, #12
 801951e:	2204      	movs	r2, #4
 8019520:	4619      	mov	r1, r3
 8019522:	2095      	movs	r0, #149	@ 0x95
 8019524:	f000 fc5e 	bl	8019de4 <SUBGRF_WriteCommand>
}
 8019528:	bf00      	nop
 801952a:	3714      	adds	r7, #20
 801952c:	46bd      	mov	sp, r7
 801952e:	bd90      	pop	{r4, r7, pc}

08019530 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019530:	b590      	push	{r4, r7, lr}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
 8019536:	4604      	mov	r4, r0
 8019538:	4608      	mov	r0, r1
 801953a:	4611      	mov	r1, r2
 801953c:	461a      	mov	r2, r3
 801953e:	4623      	mov	r3, r4
 8019540:	80fb      	strh	r3, [r7, #6]
 8019542:	4603      	mov	r3, r0
 8019544:	80bb      	strh	r3, [r7, #4]
 8019546:	460b      	mov	r3, r1
 8019548:	807b      	strh	r3, [r7, #2]
 801954a:	4613      	mov	r3, r2
 801954c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801954e:	88fb      	ldrh	r3, [r7, #6]
 8019550:	0a1b      	lsrs	r3, r3, #8
 8019552:	b29b      	uxth	r3, r3
 8019554:	b2db      	uxtb	r3, r3
 8019556:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019558:	88fb      	ldrh	r3, [r7, #6]
 801955a:	b2db      	uxtb	r3, r3
 801955c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801955e:	88bb      	ldrh	r3, [r7, #4]
 8019560:	0a1b      	lsrs	r3, r3, #8
 8019562:	b29b      	uxth	r3, r3
 8019564:	b2db      	uxtb	r3, r3
 8019566:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019568:	88bb      	ldrh	r3, [r7, #4]
 801956a:	b2db      	uxtb	r3, r3
 801956c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801956e:	887b      	ldrh	r3, [r7, #2]
 8019570:	0a1b      	lsrs	r3, r3, #8
 8019572:	b29b      	uxth	r3, r3
 8019574:	b2db      	uxtb	r3, r3
 8019576:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019578:	887b      	ldrh	r3, [r7, #2]
 801957a:	b2db      	uxtb	r3, r3
 801957c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801957e:	883b      	ldrh	r3, [r7, #0]
 8019580:	0a1b      	lsrs	r3, r3, #8
 8019582:	b29b      	uxth	r3, r3
 8019584:	b2db      	uxtb	r3, r3
 8019586:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019588:	883b      	ldrh	r3, [r7, #0]
 801958a:	b2db      	uxtb	r3, r3
 801958c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801958e:	f107 0308 	add.w	r3, r7, #8
 8019592:	2208      	movs	r2, #8
 8019594:	4619      	mov	r1, r3
 8019596:	2008      	movs	r0, #8
 8019598:	f000 fc24 	bl	8019de4 <SUBGRF_WriteCommand>
}
 801959c:	bf00      	nop
 801959e:	3714      	adds	r7, #20
 80195a0:	46bd      	mov	sp, r7
 80195a2:	bd90      	pop	{r4, r7, pc}

080195a4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b084      	sub	sp, #16
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	4603      	mov	r3, r0
 80195ac:	6039      	str	r1, [r7, #0]
 80195ae:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80195b0:	79fb      	ldrb	r3, [r7, #7]
 80195b2:	f003 0307 	and.w	r3, r3, #7
 80195b6:	b2db      	uxtb	r3, r3
 80195b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80195ba:	683b      	ldr	r3, [r7, #0]
 80195bc:	0c1b      	lsrs	r3, r3, #16
 80195be:	b2db      	uxtb	r3, r3
 80195c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	0a1b      	lsrs	r3, r3, #8
 80195c6:	b2db      	uxtb	r3, r3
 80195c8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	b2db      	uxtb	r3, r3
 80195ce:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80195d0:	f107 030c 	add.w	r3, r7, #12
 80195d4:	2204      	movs	r2, #4
 80195d6:	4619      	mov	r1, r3
 80195d8:	2097      	movs	r0, #151	@ 0x97
 80195da:	f000 fc03 	bl	8019de4 <SUBGRF_WriteCommand>
}
 80195de:	bf00      	nop
 80195e0:	3710      	adds	r7, #16
 80195e2:	46bd      	mov	sp, r7
 80195e4:	bd80      	pop	{r7, pc}
	...

080195e8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80195e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80195ec:	b084      	sub	sp, #16
 80195ee:	af00      	add	r7, sp, #0
 80195f0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80195f2:	2300      	movs	r3, #0
 80195f4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80195f6:	4b1d      	ldr	r3, [pc, #116]	@ (801966c <SUBGRF_SetRfFrequency+0x84>)
 80195f8:	781b      	ldrb	r3, [r3, #0]
 80195fa:	f083 0301 	eor.w	r3, r3, #1
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	2b00      	cmp	r3, #0
 8019602:	d005      	beq.n	8019610 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019604:	6878      	ldr	r0, [r7, #4]
 8019606:	f7ff ff27 	bl	8019458 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801960a:	4b18      	ldr	r3, [pc, #96]	@ (801966c <SUBGRF_SetRfFrequency+0x84>)
 801960c:	2201      	movs	r2, #1
 801960e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	2200      	movs	r2, #0
 8019614:	461c      	mov	r4, r3
 8019616:	4615      	mov	r5, r2
 8019618:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801961c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019620:	4a13      	ldr	r2, [pc, #76]	@ (8019670 <SUBGRF_SetRfFrequency+0x88>)
 8019622:	f04f 0300 	mov.w	r3, #0
 8019626:	4640      	mov	r0, r8
 8019628:	4649      	mov	r1, r9
 801962a:	f7e7 fb87 	bl	8000d3c <__aeabi_uldivmod>
 801962e:	4602      	mov	r2, r0
 8019630:	460b      	mov	r3, r1
 8019632:	4613      	mov	r3, r2
 8019634:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	0e1b      	lsrs	r3, r3, #24
 801963a:	b2db      	uxtb	r3, r3
 801963c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	0c1b      	lsrs	r3, r3, #16
 8019642:	b2db      	uxtb	r3, r3
 8019644:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	0a1b      	lsrs	r3, r3, #8
 801964a:	b2db      	uxtb	r3, r3
 801964c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	b2db      	uxtb	r3, r3
 8019652:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019654:	f107 0308 	add.w	r3, r7, #8
 8019658:	2204      	movs	r2, #4
 801965a:	4619      	mov	r1, r3
 801965c:	2086      	movs	r0, #134	@ 0x86
 801965e:	f000 fbc1 	bl	8019de4 <SUBGRF_WriteCommand>
}
 8019662:	bf00      	nop
 8019664:	3710      	adds	r7, #16
 8019666:	46bd      	mov	sp, r7
 8019668:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801966c:	200013d0 	.word	0x200013d0
 8019670:	01e84800 	.word	0x01e84800

08019674 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b082      	sub	sp, #8
 8019678:	af00      	add	r7, sp, #0
 801967a:	4603      	mov	r3, r0
 801967c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801967e:	79fa      	ldrb	r2, [r7, #7]
 8019680:	4b09      	ldr	r3, [pc, #36]	@ (80196a8 <SUBGRF_SetPacketType+0x34>)
 8019682:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019684:	79fb      	ldrb	r3, [r7, #7]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d104      	bne.n	8019694 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801968a:	2100      	movs	r1, #0
 801968c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019690:	f000 faf8 	bl	8019c84 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019694:	1dfb      	adds	r3, r7, #7
 8019696:	2201      	movs	r2, #1
 8019698:	4619      	mov	r1, r3
 801969a:	208a      	movs	r0, #138	@ 0x8a
 801969c:	f000 fba2 	bl	8019de4 <SUBGRF_WriteCommand>
}
 80196a0:	bf00      	nop
 80196a2:	3708      	adds	r7, #8
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}
 80196a8:	200013c9 	.word	0x200013c9

080196ac <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80196ac:	b480      	push	{r7}
 80196ae:	af00      	add	r7, sp, #0
    return PacketType;
 80196b0:	4b02      	ldr	r3, [pc, #8]	@ (80196bc <SUBGRF_GetPacketType+0x10>)
 80196b2:	781b      	ldrb	r3, [r3, #0]
}
 80196b4:	4618      	mov	r0, r3
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bc80      	pop	{r7}
 80196ba:	4770      	bx	lr
 80196bc:	200013c9 	.word	0x200013c9

080196c0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b084      	sub	sp, #16
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	4603      	mov	r3, r0
 80196c8:	71fb      	strb	r3, [r7, #7]
 80196ca:	460b      	mov	r3, r1
 80196cc:	71bb      	strb	r3, [r7, #6]
 80196ce:	4613      	mov	r3, r2
 80196d0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80196d2:	79fb      	ldrb	r3, [r7, #7]
 80196d4:	2b01      	cmp	r3, #1
 80196d6:	d149      	bne.n	801976c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80196d8:	2000      	movs	r0, #0
 80196da:	f7e9 f891 	bl	8002800 <RBI_GetRFOMaxPowerConfig>
 80196de:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80196e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80196e4:	68fa      	ldr	r2, [r7, #12]
 80196e6:	429a      	cmp	r2, r3
 80196e8:	da01      	bge.n	80196ee <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	2b0e      	cmp	r3, #14
 80196f2:	d10e      	bne.n	8019712 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80196f4:	2301      	movs	r3, #1
 80196f6:	2201      	movs	r2, #1
 80196f8:	2100      	movs	r1, #0
 80196fa:	2004      	movs	r0, #4
 80196fc:	f7ff fef6 	bl	80194ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019700:	79ba      	ldrb	r2, [r7, #6]
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	b2db      	uxtb	r3, r3
 8019706:	1ad3      	subs	r3, r2, r3
 8019708:	b2db      	uxtb	r3, r3
 801970a:	330e      	adds	r3, #14
 801970c:	b2db      	uxtb	r3, r3
 801970e:	71bb      	strb	r3, [r7, #6]
 8019710:	e01f      	b.n	8019752 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	2b0a      	cmp	r3, #10
 8019716:	d10e      	bne.n	8019736 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019718:	2301      	movs	r3, #1
 801971a:	2201      	movs	r2, #1
 801971c:	2100      	movs	r1, #0
 801971e:	2001      	movs	r0, #1
 8019720:	f7ff fee4 	bl	80194ec <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019724:	79ba      	ldrb	r2, [r7, #6]
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	b2db      	uxtb	r3, r3
 801972a:	1ad3      	subs	r3, r2, r3
 801972c:	b2db      	uxtb	r3, r3
 801972e:	330d      	adds	r3, #13
 8019730:	b2db      	uxtb	r3, r3
 8019732:	71bb      	strb	r3, [r7, #6]
 8019734:	e00d      	b.n	8019752 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8019736:	2301      	movs	r3, #1
 8019738:	2201      	movs	r2, #1
 801973a:	2100      	movs	r1, #0
 801973c:	2007      	movs	r0, #7
 801973e:	f7ff fed5 	bl	80194ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019742:	79ba      	ldrb	r2, [r7, #6]
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	b2db      	uxtb	r3, r3
 8019748:	1ad3      	subs	r3, r2, r3
 801974a:	b2db      	uxtb	r3, r3
 801974c:	330e      	adds	r3, #14
 801974e:	b2db      	uxtb	r3, r3
 8019750:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019752:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019756:	f113 0f11 	cmn.w	r3, #17
 801975a:	da01      	bge.n	8019760 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801975c:	23ef      	movs	r3, #239	@ 0xef
 801975e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019760:	2118      	movs	r1, #24
 8019762:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019766:	f000 fa8d 	bl	8019c84 <SUBGRF_WriteRegister>
 801976a:	e067      	b.n	801983c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801976c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019770:	f000 fa9c 	bl	8019cac <SUBGRF_ReadRegister>
 8019774:	4603      	mov	r3, r0
 8019776:	f043 031e 	orr.w	r3, r3, #30
 801977a:	b2db      	uxtb	r3, r3
 801977c:	4619      	mov	r1, r3
 801977e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019782:	f000 fa7f 	bl	8019c84 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019786:	2001      	movs	r0, #1
 8019788:	f7e9 f83a 	bl	8002800 <RBI_GetRFOMaxPowerConfig>
 801978c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801978e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019792:	68fa      	ldr	r2, [r7, #12]
 8019794:	429a      	cmp	r2, r3
 8019796:	da01      	bge.n	801979c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	2b14      	cmp	r3, #20
 80197a0:	d10e      	bne.n	80197c0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80197a2:	2301      	movs	r3, #1
 80197a4:	2200      	movs	r2, #0
 80197a6:	2105      	movs	r1, #5
 80197a8:	2003      	movs	r0, #3
 80197aa:	f7ff fe9f 	bl	80194ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80197ae:	79ba      	ldrb	r2, [r7, #6]
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	b2db      	uxtb	r3, r3
 80197b4:	1ad3      	subs	r3, r2, r3
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	3316      	adds	r3, #22
 80197ba:	b2db      	uxtb	r3, r3
 80197bc:	71bb      	strb	r3, [r7, #6]
 80197be:	e031      	b.n	8019824 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	2b11      	cmp	r3, #17
 80197c4:	d10e      	bne.n	80197e4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80197c6:	2301      	movs	r3, #1
 80197c8:	2200      	movs	r2, #0
 80197ca:	2103      	movs	r1, #3
 80197cc:	2002      	movs	r0, #2
 80197ce:	f7ff fe8d 	bl	80194ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80197d2:	79ba      	ldrb	r2, [r7, #6]
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	1ad3      	subs	r3, r2, r3
 80197da:	b2db      	uxtb	r3, r3
 80197dc:	3316      	adds	r3, #22
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	71bb      	strb	r3, [r7, #6]
 80197e2:	e01f      	b.n	8019824 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	2b0e      	cmp	r3, #14
 80197e8:	d10e      	bne.n	8019808 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80197ea:	2301      	movs	r3, #1
 80197ec:	2200      	movs	r2, #0
 80197ee:	2102      	movs	r1, #2
 80197f0:	2002      	movs	r0, #2
 80197f2:	f7ff fe7b 	bl	80194ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80197f6:	79ba      	ldrb	r2, [r7, #6]
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	b2db      	uxtb	r3, r3
 80197fc:	1ad3      	subs	r3, r2, r3
 80197fe:	b2db      	uxtb	r3, r3
 8019800:	330e      	adds	r3, #14
 8019802:	b2db      	uxtb	r3, r3
 8019804:	71bb      	strb	r3, [r7, #6]
 8019806:	e00d      	b.n	8019824 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019808:	2301      	movs	r3, #1
 801980a:	2200      	movs	r2, #0
 801980c:	2107      	movs	r1, #7
 801980e:	2004      	movs	r0, #4
 8019810:	f7ff fe6c 	bl	80194ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019814:	79ba      	ldrb	r2, [r7, #6]
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	b2db      	uxtb	r3, r3
 801981a:	1ad3      	subs	r3, r2, r3
 801981c:	b2db      	uxtb	r3, r3
 801981e:	3316      	adds	r3, #22
 8019820:	b2db      	uxtb	r3, r3
 8019822:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019824:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019828:	f113 0f09 	cmn.w	r3, #9
 801982c:	da01      	bge.n	8019832 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801982e:	23f7      	movs	r3, #247	@ 0xf7
 8019830:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019832:	2138      	movs	r1, #56	@ 0x38
 8019834:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019838:	f000 fa24 	bl	8019c84 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801983c:	79bb      	ldrb	r3, [r7, #6]
 801983e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019840:	797b      	ldrb	r3, [r7, #5]
 8019842:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019844:	f107 0308 	add.w	r3, r7, #8
 8019848:	2202      	movs	r2, #2
 801984a:	4619      	mov	r1, r3
 801984c:	208e      	movs	r0, #142	@ 0x8e
 801984e:	f000 fac9 	bl	8019de4 <SUBGRF_WriteCommand>
}
 8019852:	bf00      	nop
 8019854:	3710      	adds	r7, #16
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
	...

0801985c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801985c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019860:	b086      	sub	sp, #24
 8019862:	af00      	add	r7, sp, #0
 8019864:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019866:	2300      	movs	r3, #0
 8019868:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801986a:	f107 0308 	add.w	r3, r7, #8
 801986e:	2200      	movs	r2, #0
 8019870:	601a      	str	r2, [r3, #0]
 8019872:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	781a      	ldrb	r2, [r3, #0]
 8019878:	4b5c      	ldr	r3, [pc, #368]	@ (80199ec <SUBGRF_SetModulationParams+0x190>)
 801987a:	781b      	ldrb	r3, [r3, #0]
 801987c:	429a      	cmp	r2, r3
 801987e:	d004      	beq.n	801988a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	781b      	ldrb	r3, [r3, #0]
 8019884:	4618      	mov	r0, r3
 8019886:	f7ff fef5 	bl	8019674 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	781b      	ldrb	r3, [r3, #0]
 801988e:	2b03      	cmp	r3, #3
 8019890:	f200 80a5 	bhi.w	80199de <SUBGRF_SetModulationParams+0x182>
 8019894:	a201      	add	r2, pc, #4	@ (adr r2, 801989c <SUBGRF_SetModulationParams+0x40>)
 8019896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801989a:	bf00      	nop
 801989c:	080198ad 	.word	0x080198ad
 80198a0:	0801996d 	.word	0x0801996d
 80198a4:	0801992f 	.word	0x0801992f
 80198a8:	0801999b 	.word	0x0801999b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80198ac:	2308      	movs	r3, #8
 80198ae:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	685b      	ldr	r3, [r3, #4]
 80198b4:	4a4e      	ldr	r2, [pc, #312]	@ (80199f0 <SUBGRF_SetModulationParams+0x194>)
 80198b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80198ba:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	0c1b      	lsrs	r3, r3, #16
 80198c0:	b2db      	uxtb	r3, r3
 80198c2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80198c4:	697b      	ldr	r3, [r7, #20]
 80198c6:	0a1b      	lsrs	r3, r3, #8
 80198c8:	b2db      	uxtb	r3, r3
 80198ca:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	b2db      	uxtb	r3, r3
 80198d0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	7b1b      	ldrb	r3, [r3, #12]
 80198d6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	7b5b      	ldrb	r3, [r3, #13]
 80198dc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	689b      	ldr	r3, [r3, #8]
 80198e2:	2200      	movs	r2, #0
 80198e4:	461c      	mov	r4, r3
 80198e6:	4615      	mov	r5, r2
 80198e8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80198ec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80198f0:	4a40      	ldr	r2, [pc, #256]	@ (80199f4 <SUBGRF_SetModulationParams+0x198>)
 80198f2:	f04f 0300 	mov.w	r3, #0
 80198f6:	4640      	mov	r0, r8
 80198f8:	4649      	mov	r1, r9
 80198fa:	f7e7 fa1f 	bl	8000d3c <__aeabi_uldivmod>
 80198fe:	4602      	mov	r2, r0
 8019900:	460b      	mov	r3, r1
 8019902:	4613      	mov	r3, r2
 8019904:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	0c1b      	lsrs	r3, r3, #16
 801990a:	b2db      	uxtb	r3, r3
 801990c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801990e:	697b      	ldr	r3, [r7, #20]
 8019910:	0a1b      	lsrs	r3, r3, #8
 8019912:	b2db      	uxtb	r3, r3
 8019914:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019916:	697b      	ldr	r3, [r7, #20]
 8019918:	b2db      	uxtb	r3, r3
 801991a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801991c:	7cfb      	ldrb	r3, [r7, #19]
 801991e:	b29a      	uxth	r2, r3
 8019920:	f107 0308 	add.w	r3, r7, #8
 8019924:	4619      	mov	r1, r3
 8019926:	208b      	movs	r0, #139	@ 0x8b
 8019928:	f000 fa5c 	bl	8019de4 <SUBGRF_WriteCommand>
        break;
 801992c:	e058      	b.n	80199e0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801992e:	2304      	movs	r3, #4
 8019930:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	691b      	ldr	r3, [r3, #16]
 8019936:	4a2e      	ldr	r2, [pc, #184]	@ (80199f0 <SUBGRF_SetModulationParams+0x194>)
 8019938:	fbb2 f3f3 	udiv	r3, r2, r3
 801993c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	0c1b      	lsrs	r3, r3, #16
 8019942:	b2db      	uxtb	r3, r3
 8019944:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019946:	697b      	ldr	r3, [r7, #20]
 8019948:	0a1b      	lsrs	r3, r3, #8
 801994a:	b2db      	uxtb	r3, r3
 801994c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801994e:	697b      	ldr	r3, [r7, #20]
 8019950:	b2db      	uxtb	r3, r3
 8019952:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	7d1b      	ldrb	r3, [r3, #20]
 8019958:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801995a:	7cfb      	ldrb	r3, [r7, #19]
 801995c:	b29a      	uxth	r2, r3
 801995e:	f107 0308 	add.w	r3, r7, #8
 8019962:	4619      	mov	r1, r3
 8019964:	208b      	movs	r0, #139	@ 0x8b
 8019966:	f000 fa3d 	bl	8019de4 <SUBGRF_WriteCommand>
        break;
 801996a:	e039      	b.n	80199e0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801996c:	2304      	movs	r3, #4
 801996e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	7e1b      	ldrb	r3, [r3, #24]
 8019974:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	7e5b      	ldrb	r3, [r3, #25]
 801997a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	7e9b      	ldrb	r3, [r3, #26]
 8019980:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	7edb      	ldrb	r3, [r3, #27]
 8019986:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019988:	7cfb      	ldrb	r3, [r7, #19]
 801998a:	b29a      	uxth	r2, r3
 801998c:	f107 0308 	add.w	r3, r7, #8
 8019990:	4619      	mov	r1, r3
 8019992:	208b      	movs	r0, #139	@ 0x8b
 8019994:	f000 fa26 	bl	8019de4 <SUBGRF_WriteCommand>

        break;
 8019998:	e022      	b.n	80199e0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801999a:	2305      	movs	r3, #5
 801999c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	685b      	ldr	r3, [r3, #4]
 80199a2:	4a13      	ldr	r2, [pc, #76]	@ (80199f0 <SUBGRF_SetModulationParams+0x194>)
 80199a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80199a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80199aa:	697b      	ldr	r3, [r7, #20]
 80199ac:	0c1b      	lsrs	r3, r3, #16
 80199ae:	b2db      	uxtb	r3, r3
 80199b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	0a1b      	lsrs	r3, r3, #8
 80199b6:	b2db      	uxtb	r3, r3
 80199b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80199ba:	697b      	ldr	r3, [r7, #20]
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	7b1b      	ldrb	r3, [r3, #12]
 80199c4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	7b5b      	ldrb	r3, [r3, #13]
 80199ca:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80199cc:	7cfb      	ldrb	r3, [r7, #19]
 80199ce:	b29a      	uxth	r2, r3
 80199d0:	f107 0308 	add.w	r3, r7, #8
 80199d4:	4619      	mov	r1, r3
 80199d6:	208b      	movs	r0, #139	@ 0x8b
 80199d8:	f000 fa04 	bl	8019de4 <SUBGRF_WriteCommand>
        break;
 80199dc:	e000      	b.n	80199e0 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 80199de:	bf00      	nop
    }
}
 80199e0:	bf00      	nop
 80199e2:	3718      	adds	r7, #24
 80199e4:	46bd      	mov	sp, r7
 80199e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80199ea:	bf00      	nop
 80199ec:	200013c9 	.word	0x200013c9
 80199f0:	3d090000 	.word	0x3d090000
 80199f4:	01e84800 	.word	0x01e84800

080199f8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b086      	sub	sp, #24
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019a00:	2300      	movs	r3, #0
 8019a02:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019a04:	f107 030c 	add.w	r3, r7, #12
 8019a08:	2200      	movs	r2, #0
 8019a0a:	601a      	str	r2, [r3, #0]
 8019a0c:	605a      	str	r2, [r3, #4]
 8019a0e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	781a      	ldrb	r2, [r3, #0]
 8019a14:	4b44      	ldr	r3, [pc, #272]	@ (8019b28 <SUBGRF_SetPacketParams+0x130>)
 8019a16:	781b      	ldrb	r3, [r3, #0]
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	d004      	beq.n	8019a26 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7ff fe27 	bl	8019674 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	781b      	ldrb	r3, [r3, #0]
 8019a2a:	2b03      	cmp	r3, #3
 8019a2c:	d878      	bhi.n	8019b20 <SUBGRF_SetPacketParams+0x128>
 8019a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8019a34 <SUBGRF_SetPacketParams+0x3c>)
 8019a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a34:	08019a45 	.word	0x08019a45
 8019a38:	08019ad5 	.word	0x08019ad5
 8019a3c:	08019ac9 	.word	0x08019ac9
 8019a40:	08019a45 	.word	0x08019a45
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	7a5b      	ldrb	r3, [r3, #9]
 8019a48:	2bf1      	cmp	r3, #241	@ 0xf1
 8019a4a:	d10a      	bne.n	8019a62 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019a4c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019a50:	f7ff faa6 	bl	8018fa0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019a54:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019a58:	f7ff fac2 	bl	8018fe0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019a5c:	2302      	movs	r3, #2
 8019a5e:	75bb      	strb	r3, [r7, #22]
 8019a60:	e011      	b.n	8019a86 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	7a5b      	ldrb	r3, [r3, #9]
 8019a66:	2bf2      	cmp	r3, #242	@ 0xf2
 8019a68:	d10a      	bne.n	8019a80 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019a6a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019a6e:	f7ff fa97 	bl	8018fa0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019a72:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019a76:	f7ff fab3 	bl	8018fe0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019a7a:	2306      	movs	r3, #6
 8019a7c:	75bb      	strb	r3, [r7, #22]
 8019a7e:	e002      	b.n	8019a86 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	7a5b      	ldrb	r3, [r3, #9]
 8019a84:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019a86:	2309      	movs	r3, #9
 8019a88:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	885b      	ldrh	r3, [r3, #2]
 8019a8e:	0a1b      	lsrs	r3, r3, #8
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	885b      	ldrh	r3, [r3, #2]
 8019a9a:	b2db      	uxtb	r3, r3
 8019a9c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	791b      	ldrb	r3, [r3, #4]
 8019aa2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	795b      	ldrb	r3, [r3, #5]
 8019aa8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	799b      	ldrb	r3, [r3, #6]
 8019aae:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	79db      	ldrb	r3, [r3, #7]
 8019ab4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	7a1b      	ldrb	r3, [r3, #8]
 8019aba:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019abc:	7dbb      	ldrb	r3, [r7, #22]
 8019abe:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	7a9b      	ldrb	r3, [r3, #10]
 8019ac4:	753b      	strb	r3, [r7, #20]
        break;
 8019ac6:	e022      	b.n	8019b0e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019ac8:	2301      	movs	r3, #1
 8019aca:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	7b1b      	ldrb	r3, [r3, #12]
 8019ad0:	733b      	strb	r3, [r7, #12]
        break;
 8019ad2:	e01c      	b.n	8019b0e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019ad4:	2306      	movs	r3, #6
 8019ad6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	89db      	ldrh	r3, [r3, #14]
 8019adc:	0a1b      	lsrs	r3, r3, #8
 8019ade:	b29b      	uxth	r3, r3
 8019ae0:	b2db      	uxtb	r3, r3
 8019ae2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	89db      	ldrh	r3, [r3, #14]
 8019ae8:	b2db      	uxtb	r3, r3
 8019aea:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	7c1a      	ldrb	r2, [r3, #16]
 8019af0:	4b0e      	ldr	r3, [pc, #56]	@ (8019b2c <SUBGRF_SetPacketParams+0x134>)
 8019af2:	4611      	mov	r1, r2
 8019af4:	7019      	strb	r1, [r3, #0]
 8019af6:	4613      	mov	r3, r2
 8019af8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	7c5b      	ldrb	r3, [r3, #17]
 8019afe:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	7c9b      	ldrb	r3, [r3, #18]
 8019b04:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	7cdb      	ldrb	r3, [r3, #19]
 8019b0a:	747b      	strb	r3, [r7, #17]
        break;
 8019b0c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019b0e:	7dfb      	ldrb	r3, [r7, #23]
 8019b10:	b29a      	uxth	r2, r3
 8019b12:	f107 030c 	add.w	r3, r7, #12
 8019b16:	4619      	mov	r1, r3
 8019b18:	208c      	movs	r0, #140	@ 0x8c
 8019b1a:	f000 f963 	bl	8019de4 <SUBGRF_WriteCommand>
 8019b1e:	e000      	b.n	8019b22 <SUBGRF_SetPacketParams+0x12a>
        return;
 8019b20:	bf00      	nop
}
 8019b22:	3718      	adds	r7, #24
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}
 8019b28:	200013c9 	.word	0x200013c9
 8019b2c:	200013ca 	.word	0x200013ca

08019b30 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b084      	sub	sp, #16
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	4603      	mov	r3, r0
 8019b38:	460a      	mov	r2, r1
 8019b3a:	71fb      	strb	r3, [r7, #7]
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019b40:	79fb      	ldrb	r3, [r7, #7]
 8019b42:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019b44:	79bb      	ldrb	r3, [r7, #6]
 8019b46:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019b48:	f107 030c 	add.w	r3, r7, #12
 8019b4c:	2202      	movs	r2, #2
 8019b4e:	4619      	mov	r1, r3
 8019b50:	208f      	movs	r0, #143	@ 0x8f
 8019b52:	f000 f947 	bl	8019de4 <SUBGRF_WriteCommand>
}
 8019b56:	bf00      	nop
 8019b58:	3710      	adds	r7, #16
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}

08019b5e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019b5e:	b580      	push	{r7, lr}
 8019b60:	b082      	sub	sp, #8
 8019b62:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019b64:	2300      	movs	r3, #0
 8019b66:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019b68:	1d3b      	adds	r3, r7, #4
 8019b6a:	2201      	movs	r2, #1
 8019b6c:	4619      	mov	r1, r3
 8019b6e:	2015      	movs	r0, #21
 8019b70:	f000 f95a 	bl	8019e28 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019b74:	793b      	ldrb	r3, [r7, #4]
 8019b76:	425b      	negs	r3, r3
 8019b78:	105b      	asrs	r3, r3, #1
 8019b7a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3708      	adds	r7, #8
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b084      	sub	sp, #16
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019b92:	f107 030c 	add.w	r3, r7, #12
 8019b96:	2202      	movs	r2, #2
 8019b98:	4619      	mov	r1, r3
 8019b9a:	2013      	movs	r0, #19
 8019b9c:	f000 f944 	bl	8019e28 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019ba0:	f7ff fd84 	bl	80196ac <SUBGRF_GetPacketType>
 8019ba4:	4603      	mov	r3, r0
 8019ba6:	2b01      	cmp	r3, #1
 8019ba8:	d10d      	bne.n	8019bc6 <SUBGRF_GetRxBufferStatus+0x3e>
 8019baa:	4b0c      	ldr	r3, [pc, #48]	@ (8019bdc <SUBGRF_GetRxBufferStatus+0x54>)
 8019bac:	781b      	ldrb	r3, [r3, #0]
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	2b01      	cmp	r3, #1
 8019bb2:	d108      	bne.n	8019bc6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019bb4:	f240 7002 	movw	r0, #1794	@ 0x702
 8019bb8:	f000 f878 	bl	8019cac <SUBGRF_ReadRegister>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	461a      	mov	r2, r3
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	701a      	strb	r2, [r3, #0]
 8019bc4:	e002      	b.n	8019bcc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019bc6:	7b3a      	ldrb	r2, [r7, #12]
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019bcc:	7b7a      	ldrb	r2, [r7, #13]
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	701a      	strb	r2, [r3, #0]
}
 8019bd2:	bf00      	nop
 8019bd4:	3710      	adds	r7, #16
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	bd80      	pop	{r7, pc}
 8019bda:	bf00      	nop
 8019bdc:	200013ca 	.word	0x200013ca

08019be0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b084      	sub	sp, #16
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019be8:	f107 030c 	add.w	r3, r7, #12
 8019bec:	2203      	movs	r2, #3
 8019bee:	4619      	mov	r1, r3
 8019bf0:	2014      	movs	r0, #20
 8019bf2:	f000 f919 	bl	8019e28 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019bf6:	f7ff fd59 	bl	80196ac <SUBGRF_GetPacketType>
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	461a      	mov	r2, r3
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	781b      	ldrb	r3, [r3, #0]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d002      	beq.n	8019c10 <SUBGRF_GetPacketStatus+0x30>
 8019c0a:	2b01      	cmp	r3, #1
 8019c0c:	d013      	beq.n	8019c36 <SUBGRF_GetPacketStatus+0x56>
 8019c0e:	e02a      	b.n	8019c66 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019c10:	7b3a      	ldrb	r2, [r7, #12]
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019c16:	7b7b      	ldrb	r3, [r7, #13]
 8019c18:	425b      	negs	r3, r3
 8019c1a:	105b      	asrs	r3, r3, #1
 8019c1c:	b25a      	sxtb	r2, r3
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019c22:	7bbb      	ldrb	r3, [r7, #14]
 8019c24:	425b      	negs	r3, r3
 8019c26:	105b      	asrs	r3, r3, #1
 8019c28:	b25a      	sxtb	r2, r3
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	2200      	movs	r2, #0
 8019c32:	609a      	str	r2, [r3, #8]
            break;
 8019c34:	e020      	b.n	8019c78 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019c36:	7b3b      	ldrb	r3, [r7, #12]
 8019c38:	425b      	negs	r3, r3
 8019c3a:	105b      	asrs	r3, r3, #1
 8019c3c:	b25a      	sxtb	r2, r3
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019c42:	7b7b      	ldrb	r3, [r7, #13]
 8019c44:	b25b      	sxtb	r3, r3
 8019c46:	3302      	adds	r3, #2
 8019c48:	109b      	asrs	r3, r3, #2
 8019c4a:	b25a      	sxtb	r2, r3
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019c50:	7bbb      	ldrb	r3, [r7, #14]
 8019c52:	425b      	negs	r3, r3
 8019c54:	105b      	asrs	r3, r3, #1
 8019c56:	b25a      	sxtb	r2, r3
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019c5c:	4b08      	ldr	r3, [pc, #32]	@ (8019c80 <SUBGRF_GetPacketStatus+0xa0>)
 8019c5e:	681a      	ldr	r2, [r3, #0]
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	611a      	str	r2, [r3, #16]
            break;
 8019c64:	e008      	b.n	8019c78 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019c66:	2214      	movs	r2, #20
 8019c68:	2100      	movs	r1, #0
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f000 fe7c 	bl	801a968 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	220f      	movs	r2, #15
 8019c74:	701a      	strb	r2, [r3, #0]
            break;
 8019c76:	bf00      	nop
    }
}
 8019c78:	bf00      	nop
 8019c7a:	3710      	adds	r7, #16
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}
 8019c80:	200013cc 	.word	0x200013cc

08019c84 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b082      	sub	sp, #8
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	460a      	mov	r2, r1
 8019c8e:	80fb      	strh	r3, [r7, #6]
 8019c90:	4613      	mov	r3, r2
 8019c92:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019c94:	1d7a      	adds	r2, r7, #5
 8019c96:	88f9      	ldrh	r1, [r7, #6]
 8019c98:	2301      	movs	r3, #1
 8019c9a:	4803      	ldr	r0, [pc, #12]	@ (8019ca8 <SUBGRF_WriteRegister+0x24>)
 8019c9c:	f7ee f85c 	bl	8007d58 <HAL_SUBGHZ_WriteRegisters>
}
 8019ca0:	bf00      	nop
 8019ca2:	3708      	adds	r7, #8
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	bd80      	pop	{r7, pc}
 8019ca8:	20000788 	.word	0x20000788

08019cac <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b084      	sub	sp, #16
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019cb6:	f107 020f 	add.w	r2, r7, #15
 8019cba:	88f9      	ldrh	r1, [r7, #6]
 8019cbc:	2301      	movs	r3, #1
 8019cbe:	4804      	ldr	r0, [pc, #16]	@ (8019cd0 <SUBGRF_ReadRegister+0x24>)
 8019cc0:	f7ee f8a9 	bl	8007e16 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	3710      	adds	r7, #16
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd80      	pop	{r7, pc}
 8019cce:	bf00      	nop
 8019cd0:	20000788 	.word	0x20000788

08019cd4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b086      	sub	sp, #24
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	4603      	mov	r3, r0
 8019cdc:	6039      	str	r1, [r7, #0]
 8019cde:	80fb      	strh	r3, [r7, #6]
 8019ce0:	4613      	mov	r3, r2
 8019ce2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8019ce8:	60fb      	str	r3, [r7, #12]
  return(result);
 8019cea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019cee:	b672      	cpsid	i
}
 8019cf0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019cf2:	88bb      	ldrh	r3, [r7, #4]
 8019cf4:	88f9      	ldrh	r1, [r7, #6]
 8019cf6:	683a      	ldr	r2, [r7, #0]
 8019cf8:	4806      	ldr	r0, [pc, #24]	@ (8019d14 <SUBGRF_WriteRegisters+0x40>)
 8019cfa:	f7ee f82d 	bl	8007d58 <HAL_SUBGHZ_WriteRegisters>
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d02:	693b      	ldr	r3, [r7, #16]
 8019d04:	f383 8810 	msr	PRIMASK, r3
}
 8019d08:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019d0a:	bf00      	nop
 8019d0c:	3718      	adds	r7, #24
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	bd80      	pop	{r7, pc}
 8019d12:	bf00      	nop
 8019d14:	20000788 	.word	0x20000788

08019d18 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b086      	sub	sp, #24
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	4603      	mov	r3, r0
 8019d20:	6039      	str	r1, [r7, #0]
 8019d22:	80fb      	strh	r3, [r7, #6]
 8019d24:	4613      	mov	r3, r2
 8019d26:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d28:	f3ef 8310 	mrs	r3, PRIMASK
 8019d2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019d30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d32:	b672      	cpsid	i
}
 8019d34:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019d36:	88bb      	ldrh	r3, [r7, #4]
 8019d38:	88f9      	ldrh	r1, [r7, #6]
 8019d3a:	683a      	ldr	r2, [r7, #0]
 8019d3c:	4806      	ldr	r0, [pc, #24]	@ (8019d58 <SUBGRF_ReadRegisters+0x40>)
 8019d3e:	f7ee f86a 	bl	8007e16 <HAL_SUBGHZ_ReadRegisters>
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d46:	693b      	ldr	r3, [r7, #16]
 8019d48:	f383 8810 	msr	PRIMASK, r3
}
 8019d4c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019d4e:	bf00      	nop
 8019d50:	3718      	adds	r7, #24
 8019d52:	46bd      	mov	sp, r7
 8019d54:	bd80      	pop	{r7, pc}
 8019d56:	bf00      	nop
 8019d58:	20000788 	.word	0x20000788

08019d5c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b086      	sub	sp, #24
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	4603      	mov	r3, r0
 8019d64:	6039      	str	r1, [r7, #0]
 8019d66:	71fb      	strb	r3, [r7, #7]
 8019d68:	4613      	mov	r3, r2
 8019d6a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8019d70:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019d74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d76:	b672      	cpsid	i
}
 8019d78:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019d7a:	79bb      	ldrb	r3, [r7, #6]
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	79f9      	ldrb	r1, [r7, #7]
 8019d80:	683a      	ldr	r2, [r7, #0]
 8019d82:	4806      	ldr	r0, [pc, #24]	@ (8019d9c <SUBGRF_WriteBuffer+0x40>)
 8019d84:	f7ee f95b 	bl	800803e <HAL_SUBGHZ_WriteBuffer>
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d8c:	693b      	ldr	r3, [r7, #16]
 8019d8e:	f383 8810 	msr	PRIMASK, r3
}
 8019d92:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019d94:	bf00      	nop
 8019d96:	3718      	adds	r7, #24
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}
 8019d9c:	20000788 	.word	0x20000788

08019da0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b086      	sub	sp, #24
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	4603      	mov	r3, r0
 8019da8:	6039      	str	r1, [r7, #0]
 8019daa:	71fb      	strb	r3, [r7, #7]
 8019dac:	4613      	mov	r3, r2
 8019dae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019db0:	f3ef 8310 	mrs	r3, PRIMASK
 8019db4:	60fb      	str	r3, [r7, #12]
  return(result);
 8019db6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019db8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dba:	b672      	cpsid	i
}
 8019dbc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019dbe:	79bb      	ldrb	r3, [r7, #6]
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	79f9      	ldrb	r1, [r7, #7]
 8019dc4:	683a      	ldr	r2, [r7, #0]
 8019dc6:	4806      	ldr	r0, [pc, #24]	@ (8019de0 <SUBGRF_ReadBuffer+0x40>)
 8019dc8:	f7ee f98c 	bl	80080e4 <HAL_SUBGHZ_ReadBuffer>
 8019dcc:	697b      	ldr	r3, [r7, #20]
 8019dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019dd0:	693b      	ldr	r3, [r7, #16]
 8019dd2:	f383 8810 	msr	PRIMASK, r3
}
 8019dd6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019dd8:	bf00      	nop
 8019dda:	3718      	adds	r7, #24
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}
 8019de0:	20000788 	.word	0x20000788

08019de4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b086      	sub	sp, #24
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	4603      	mov	r3, r0
 8019dec:	6039      	str	r1, [r7, #0]
 8019dee:	71fb      	strb	r3, [r7, #7]
 8019df0:	4613      	mov	r3, r2
 8019df2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019df4:	f3ef 8310 	mrs	r3, PRIMASK
 8019df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8019dfa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019dfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dfe:	b672      	cpsid	i
}
 8019e00:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019e02:	88bb      	ldrh	r3, [r7, #4]
 8019e04:	79f9      	ldrb	r1, [r7, #7]
 8019e06:	683a      	ldr	r2, [r7, #0]
 8019e08:	4806      	ldr	r0, [pc, #24]	@ (8019e24 <SUBGRF_WriteCommand+0x40>)
 8019e0a:	f7ee f865 	bl	8007ed8 <HAL_SUBGHZ_ExecSetCmd>
 8019e0e:	697b      	ldr	r3, [r7, #20]
 8019e10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	f383 8810 	msr	PRIMASK, r3
}
 8019e18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019e1a:	bf00      	nop
 8019e1c:	3718      	adds	r7, #24
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	bd80      	pop	{r7, pc}
 8019e22:	bf00      	nop
 8019e24:	20000788 	.word	0x20000788

08019e28 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b086      	sub	sp, #24
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	4603      	mov	r3, r0
 8019e30:	6039      	str	r1, [r7, #0]
 8019e32:	71fb      	strb	r3, [r7, #7]
 8019e34:	4613      	mov	r3, r2
 8019e36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e38:	f3ef 8310 	mrs	r3, PRIMASK
 8019e3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019e3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019e40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e42:	b672      	cpsid	i
}
 8019e44:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019e46:	88bb      	ldrh	r3, [r7, #4]
 8019e48:	79f9      	ldrb	r1, [r7, #7]
 8019e4a:	683a      	ldr	r2, [r7, #0]
 8019e4c:	4806      	ldr	r0, [pc, #24]	@ (8019e68 <SUBGRF_ReadCommand+0x40>)
 8019e4e:	f7ee f8a2 	bl	8007f96 <HAL_SUBGHZ_ExecGetCmd>
 8019e52:	697b      	ldr	r3, [r7, #20]
 8019e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e56:	693b      	ldr	r3, [r7, #16]
 8019e58:	f383 8810 	msr	PRIMASK, r3
}
 8019e5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019e5e:	bf00      	nop
 8019e60:	3718      	adds	r7, #24
 8019e62:	46bd      	mov	sp, r7
 8019e64:	bd80      	pop	{r7, pc}
 8019e66:	bf00      	nop
 8019e68:	20000788 	.word	0x20000788

08019e6c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b084      	sub	sp, #16
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	4603      	mov	r3, r0
 8019e74:	460a      	mov	r2, r1
 8019e76:	71fb      	strb	r3, [r7, #7]
 8019e78:	4613      	mov	r3, r2
 8019e7a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019e80:	79bb      	ldrb	r3, [r7, #6]
 8019e82:	2b01      	cmp	r3, #1
 8019e84:	d10d      	bne.n	8019ea2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019e86:	79fb      	ldrb	r3, [r7, #7]
 8019e88:	2b01      	cmp	r3, #1
 8019e8a:	d104      	bne.n	8019e96 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019e8c:	2302      	movs	r3, #2
 8019e8e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019e90:	2004      	movs	r0, #4
 8019e92:	f000 f8ef 	bl	801a074 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019e96:	79fb      	ldrb	r3, [r7, #7]
 8019e98:	2b02      	cmp	r3, #2
 8019e9a:	d107      	bne.n	8019eac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019e9c:	2303      	movs	r3, #3
 8019e9e:	73fb      	strb	r3, [r7, #15]
 8019ea0:	e004      	b.n	8019eac <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019ea2:	79bb      	ldrb	r3, [r7, #6]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d101      	bne.n	8019eac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019ea8:	2301      	movs	r3, #1
 8019eaa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019eac:	7bfb      	ldrb	r3, [r7, #15]
 8019eae:	4618      	mov	r0, r3
 8019eb0:	f7e8 fc83 	bl	80027ba <RBI_ConfigRFSwitch>
}
 8019eb4:	bf00      	nop
 8019eb6:	3710      	adds	r7, #16
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bd80      	pop	{r7, pc}

08019ebc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019ebc:	b580      	push	{r7, lr}
 8019ebe:	b084      	sub	sp, #16
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019ec6:	2301      	movs	r3, #1
 8019ec8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019eca:	f7e8 fc84 	bl	80027d6 <RBI_GetTxConfig>
 8019ece:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019ed0:	68bb      	ldr	r3, [r7, #8]
 8019ed2:	2b02      	cmp	r3, #2
 8019ed4:	d016      	beq.n	8019f04 <SUBGRF_SetRfTxPower+0x48>
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	2b02      	cmp	r3, #2
 8019eda:	dc16      	bgt.n	8019f0a <SUBGRF_SetRfTxPower+0x4e>
 8019edc:	68bb      	ldr	r3, [r7, #8]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d003      	beq.n	8019eea <SUBGRF_SetRfTxPower+0x2e>
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	2b01      	cmp	r3, #1
 8019ee6:	d00a      	beq.n	8019efe <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019ee8:	e00f      	b.n	8019f0a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019eee:	2b0f      	cmp	r3, #15
 8019ef0:	dd02      	ble.n	8019ef8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019ef2:	2302      	movs	r3, #2
 8019ef4:	73fb      	strb	r3, [r7, #15]
            break;
 8019ef6:	e009      	b.n	8019f0c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019ef8:	2301      	movs	r3, #1
 8019efa:	73fb      	strb	r3, [r7, #15]
            break;
 8019efc:	e006      	b.n	8019f0c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019efe:	2301      	movs	r3, #1
 8019f00:	73fb      	strb	r3, [r7, #15]
            break;
 8019f02:	e003      	b.n	8019f0c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019f04:	2302      	movs	r3, #2
 8019f06:	73fb      	strb	r3, [r7, #15]
            break;
 8019f08:	e000      	b.n	8019f0c <SUBGRF_SetRfTxPower+0x50>
            break;
 8019f0a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019f0c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019f10:	7bfb      	ldrb	r3, [r7, #15]
 8019f12:	2202      	movs	r2, #2
 8019f14:	4618      	mov	r0, r3
 8019f16:	f7ff fbd3 	bl	80196c0 <SUBGRF_SetTxParams>

    return paSelect;
 8019f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3710      	adds	r7, #16
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}

08019f24 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019f24:	b480      	push	{r7}
 8019f26:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019f28:	2301      	movs	r3, #1
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bc80      	pop	{r7}
 8019f30:	4770      	bx	lr
	...

08019f34 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b082      	sub	sp, #8
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019f3c:	4b03      	ldr	r3, [pc, #12]	@ (8019f4c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	2001      	movs	r0, #1
 8019f42:	4798      	blx	r3
}
 8019f44:	bf00      	nop
 8019f46:	3708      	adds	r7, #8
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	bd80      	pop	{r7, pc}
 8019f4c:	200013d4 	.word	0x200013d4

08019f50 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019f58:	4b03      	ldr	r3, [pc, #12]	@ (8019f68 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	2002      	movs	r0, #2
 8019f5e:	4798      	blx	r3
}
 8019f60:	bf00      	nop
 8019f62:	3708      	adds	r7, #8
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}
 8019f68:	200013d4 	.word	0x200013d4

08019f6c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019f74:	4b03      	ldr	r3, [pc, #12]	@ (8019f84 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	2040      	movs	r0, #64	@ 0x40
 8019f7a:	4798      	blx	r3
}
 8019f7c:	bf00      	nop
 8019f7e:	3708      	adds	r7, #8
 8019f80:	46bd      	mov	sp, r7
 8019f82:	bd80      	pop	{r7, pc}
 8019f84:	200013d4 	.word	0x200013d4

08019f88 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b082      	sub	sp, #8
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
 8019f90:	460b      	mov	r3, r1
 8019f92:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019f94:	78fb      	ldrb	r3, [r7, #3]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d002      	beq.n	8019fa0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019f9a:	2b01      	cmp	r3, #1
 8019f9c:	d005      	beq.n	8019faa <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019f9e:	e00a      	b.n	8019fb6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019fa0:	4b07      	ldr	r3, [pc, #28]	@ (8019fc0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	2080      	movs	r0, #128	@ 0x80
 8019fa6:	4798      	blx	r3
            break;
 8019fa8:	e005      	b.n	8019fb6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019faa:	4b05      	ldr	r3, [pc, #20]	@ (8019fc0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8019fb2:	4798      	blx	r3
            break;
 8019fb4:	bf00      	nop
    }
}
 8019fb6:	bf00      	nop
 8019fb8:	3708      	adds	r7, #8
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}
 8019fbe:	bf00      	nop
 8019fc0:	200013d4 	.word	0x200013d4

08019fc4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019fcc:	4b04      	ldr	r3, [pc, #16]	@ (8019fe0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019fd4:	4798      	blx	r3
}
 8019fd6:	bf00      	nop
 8019fd8:	3708      	adds	r7, #8
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}
 8019fde:	bf00      	nop
 8019fe0:	200013d4 	.word	0x200013d4

08019fe4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b082      	sub	sp, #8
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019fec:	4b03      	ldr	r3, [pc, #12]	@ (8019ffc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	2020      	movs	r0, #32
 8019ff2:	4798      	blx	r3
}
 8019ff4:	bf00      	nop
 8019ff6:	3708      	adds	r7, #8
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bd80      	pop	{r7, pc}
 8019ffc:	200013d4 	.word	0x200013d4

0801a000 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b082      	sub	sp, #8
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a008:	4b03      	ldr	r3, [pc, #12]	@ (801a018 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	2004      	movs	r0, #4
 801a00e:	4798      	blx	r3
}
 801a010:	bf00      	nop
 801a012:	3708      	adds	r7, #8
 801a014:	46bd      	mov	sp, r7
 801a016:	bd80      	pop	{r7, pc}
 801a018:	200013d4 	.word	0x200013d4

0801a01c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b082      	sub	sp, #8
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a024:	4b03      	ldr	r3, [pc, #12]	@ (801a034 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	2008      	movs	r0, #8
 801a02a:	4798      	blx	r3
}
 801a02c:	bf00      	nop
 801a02e:	3708      	adds	r7, #8
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}
 801a034:	200013d4 	.word	0x200013d4

0801a038 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a038:	b580      	push	{r7, lr}
 801a03a:	b082      	sub	sp, #8
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a040:	4b03      	ldr	r3, [pc, #12]	@ (801a050 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	2010      	movs	r0, #16
 801a046:	4798      	blx	r3
}
 801a048:	bf00      	nop
 801a04a:	3708      	adds	r7, #8
 801a04c:	46bd      	mov	sp, r7
 801a04e:	bd80      	pop	{r7, pc}
 801a050:	200013d4 	.word	0x200013d4

0801a054 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a054:	b580      	push	{r7, lr}
 801a056:	b082      	sub	sp, #8
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801a05c:	4b04      	ldr	r3, [pc, #16]	@ (801a070 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801a064:	4798      	blx	r3
}
 801a066:	bf00      	nop
 801a068:	3708      	adds	r7, #8
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd80      	pop	{r7, pc}
 801a06e:	bf00      	nop
 801a070:	200013d4 	.word	0x200013d4

0801a074 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b084      	sub	sp, #16
 801a078:	af00      	add	r7, sp, #0
 801a07a:	4603      	mov	r3, r0
 801a07c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a07e:	f7e8 fbb8 	bl	80027f2 <RBI_IsDCDC>
 801a082:	4603      	mov	r3, r0
 801a084:	2b01      	cmp	r3, #1
 801a086:	d112      	bne.n	801a0ae <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a088:	f640 1023 	movw	r0, #2339	@ 0x923
 801a08c:	f7ff fe0e 	bl	8019cac <SUBGRF_ReadRegister>
 801a090:	4603      	mov	r3, r0
 801a092:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a094:	7bfb      	ldrb	r3, [r7, #15]
 801a096:	f023 0306 	bic.w	r3, r3, #6
 801a09a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a09c:	7bfa      	ldrb	r2, [r7, #15]
 801a09e:	79fb      	ldrb	r3, [r7, #7]
 801a0a0:	4313      	orrs	r3, r2
 801a0a2:	b2db      	uxtb	r3, r3
 801a0a4:	4619      	mov	r1, r3
 801a0a6:	f640 1023 	movw	r0, #2339	@ 0x923
 801a0aa:	f7ff fdeb 	bl	8019c84 <SUBGRF_WriteRegister>
  }
}
 801a0ae:	bf00      	nop
 801a0b0:	3710      	adds	r7, #16
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
	...

0801a0b8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a0b8:	b480      	push	{r7}
 801a0ba:	b085      	sub	sp, #20
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d101      	bne.n	801a0ca <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a0c6:	231f      	movs	r3, #31
 801a0c8:	e017      	b.n	801a0fa <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	73fb      	strb	r3, [r7, #15]
 801a0ce:	e00f      	b.n	801a0f0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a0d0:	7bfb      	ldrb	r3, [r7, #15]
 801a0d2:	4a0c      	ldr	r2, [pc, #48]	@ (801a104 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a0d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a0d8:	687a      	ldr	r2, [r7, #4]
 801a0da:	429a      	cmp	r2, r3
 801a0dc:	d205      	bcs.n	801a0ea <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a0de:	7bfb      	ldrb	r3, [r7, #15]
 801a0e0:	4a08      	ldr	r2, [pc, #32]	@ (801a104 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a0e2:	00db      	lsls	r3, r3, #3
 801a0e4:	4413      	add	r3, r2
 801a0e6:	791b      	ldrb	r3, [r3, #4]
 801a0e8:	e007      	b.n	801a0fa <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a0ea:	7bfb      	ldrb	r3, [r7, #15]
 801a0ec:	3301      	adds	r3, #1
 801a0ee:	73fb      	strb	r3, [r7, #15]
 801a0f0:	7bfb      	ldrb	r3, [r7, #15]
 801a0f2:	2b15      	cmp	r3, #21
 801a0f4:	d9ec      	bls.n	801a0d0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801a0f6:	bf00      	nop
 801a0f8:	e7fd      	b.n	801a0f6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	3714      	adds	r7, #20
 801a0fe:	46bd      	mov	sp, r7
 801a100:	bc80      	pop	{r7}
 801a102:	4770      	bx	lr
 801a104:	0802201c 	.word	0x0802201c

0801a108 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b08a      	sub	sp, #40	@ 0x28
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
 801a110:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a112:	4b35      	ldr	r3, [pc, #212]	@ (801a1e8 <SUBGRF_GetCFO+0xe0>)
 801a114:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a116:	f640 0007 	movw	r0, #2055	@ 0x807
 801a11a:	f7ff fdc7 	bl	8019cac <SUBGRF_ReadRegister>
 801a11e:	4603      	mov	r3, r0
 801a120:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a122:	7ffb      	ldrb	r3, [r7, #31]
 801a124:	08db      	lsrs	r3, r3, #3
 801a126:	b2db      	uxtb	r3, r3
 801a128:	f003 0303 	and.w	r3, r3, #3
 801a12c:	3328      	adds	r3, #40	@ 0x28
 801a12e:	443b      	add	r3, r7
 801a130:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a134:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a136:	7ffb      	ldrb	r3, [r7, #31]
 801a138:	f003 0307 	and.w	r3, r3, #7
 801a13c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801a13e:	7fba      	ldrb	r2, [r7, #30]
 801a140:	7f7b      	ldrb	r3, [r7, #29]
 801a142:	3301      	adds	r3, #1
 801a144:	fa02 f303 	lsl.w	r3, r2, r3
 801a148:	461a      	mov	r2, r3
 801a14a:	4b28      	ldr	r3, [pc, #160]	@ (801a1ec <SUBGRF_GetCFO+0xe4>)
 801a14c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a150:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a152:	69ba      	ldr	r2, [r7, #24]
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	fbb2 f3f3 	udiv	r3, r2, r3
 801a15a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a15c:	2301      	movs	r3, #1
 801a15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a166:	697a      	ldr	r2, [r7, #20]
 801a168:	fb02 f303 	mul.w	r3, r2, r3
 801a16c:	2b07      	cmp	r3, #7
 801a16e:	d802      	bhi.n	801a176 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a170:	2302      	movs	r3, #2
 801a172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a17a:	697a      	ldr	r2, [r7, #20]
 801a17c:	fb02 f303 	mul.w	r3, r2, r3
 801a180:	2b03      	cmp	r3, #3
 801a182:	d802      	bhi.n	801a18a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a184:	2304      	movs	r3, #4
 801a186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a18a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a18e:	69bb      	ldr	r3, [r7, #24]
 801a190:	fb02 f303 	mul.w	r3, r2, r3
 801a194:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a196:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a19a:	f7ff fd87 	bl	8019cac <SUBGRF_ReadRegister>
 801a19e:	4603      	mov	r3, r0
 801a1a0:	021b      	lsls	r3, r3, #8
 801a1a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a1a6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a1a8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a1ac:	f7ff fd7e 	bl	8019cac <SUBGRF_ReadRegister>
 801a1b0:	4603      	mov	r3, r0
 801a1b2:	461a      	mov	r2, r3
 801a1b4:	6a3b      	ldr	r3, [r7, #32]
 801a1b6:	4313      	orrs	r3, r2
 801a1b8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a1ba:	6a3b      	ldr	r3, [r7, #32]
 801a1bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d005      	beq.n	801a1d0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a1c4:	6a3b      	ldr	r3, [r7, #32]
 801a1c6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a1ca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a1ce:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a1d0:	693b      	ldr	r3, [r7, #16]
 801a1d2:	095b      	lsrs	r3, r3, #5
 801a1d4:	6a3a      	ldr	r2, [r7, #32]
 801a1d6:	fb02 f303 	mul.w	r3, r2, r3
 801a1da:	11da      	asrs	r2, r3, #7
 801a1dc:	683b      	ldr	r3, [r7, #0]
 801a1de:	601a      	str	r2, [r3, #0]
}
 801a1e0:	bf00      	nop
 801a1e2:	3728      	adds	r7, #40	@ 0x28
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	0c0a0804 	.word	0x0c0a0804
 801a1ec:	01e84800 	.word	0x01e84800

0801a1f0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801a1f0:	b480      	push	{r7}
 801a1f2:	b087      	sub	sp, #28
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	4603      	mov	r3, r0
 801a1f8:	60b9      	str	r1, [r7, #8]
 801a1fa:	607a      	str	r2, [r7, #4]
 801a1fc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801a1fe:	2300      	movs	r3, #0
 801a200:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801a202:	f04f 33ff 	mov.w	r3, #4294967295
 801a206:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a208:	697b      	ldr	r3, [r7, #20]
}
 801a20a:	4618      	mov	r0, r3
 801a20c:	371c      	adds	r7, #28
 801a20e:	46bd      	mov	sp, r7
 801a210:	bc80      	pop	{r7}
 801a212:	4770      	bx	lr

0801a214 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801a214:	b480      	push	{r7}
 801a216:	b087      	sub	sp, #28
 801a218:	af00      	add	r7, sp, #0
 801a21a:	4603      	mov	r3, r0
 801a21c:	60b9      	str	r1, [r7, #8]
 801a21e:	607a      	str	r2, [r7, #4]
 801a220:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a222:	2300      	movs	r3, #0
 801a224:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801a226:	f04f 33ff 	mov.w	r3, #4294967295
 801a22a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a22c:	697b      	ldr	r3, [r7, #20]
}
 801a22e:	4618      	mov	r0, r3
 801a230:	371c      	adds	r7, #28
 801a232:	46bd      	mov	sp, r7
 801a234:	bc80      	pop	{r7}
 801a236:	4770      	bx	lr

0801a238 <RFW_DeInit>:
    return -1;
#endif /* RFW_ENABLE == 1 */
}

void RFW_DeInit( void )
{
 801a238:	b480      	push	{r7}
 801a23a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801a23c:	bf00      	nop
 801a23e:	46bd      	mov	sp, r7
 801a240:	bc80      	pop	{r7}
 801a242:	4770      	bx	lr

0801a244 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801a244:	b480      	push	{r7}
 801a246:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801a248:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a24a:	4618      	mov	r0, r3
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bc80      	pop	{r7}
 801a250:	4770      	bx	lr

0801a252 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801a252:	b480      	push	{r7}
 801a254:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801a256:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a258:	4618      	mov	r0, r3
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bc80      	pop	{r7}
 801a25e:	4770      	bx	lr

0801a260 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801a260:	b480      	push	{r7}
 801a262:	b083      	sub	sp, #12
 801a264:	af00      	add	r7, sp, #0
 801a266:	4603      	mov	r3, r0
 801a268:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801a26a:	bf00      	nop
 801a26c:	370c      	adds	r7, #12
 801a26e:	46bd      	mov	sp, r7
 801a270:	bc80      	pop	{r7}
 801a272:	4770      	bx	lr

0801a274 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801a274:	b480      	push	{r7}
 801a276:	b087      	sub	sp, #28
 801a278:	af00      	add	r7, sp, #0
 801a27a:	60f8      	str	r0, [r7, #12]
 801a27c:	460b      	mov	r3, r1
 801a27e:	607a      	str	r2, [r7, #4]
 801a280:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801a282:	f04f 33ff 	mov.w	r3, #4294967295
 801a286:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801a288:	697b      	ldr	r3, [r7, #20]
}
 801a28a:	4618      	mov	r0, r3
 801a28c:	371c      	adds	r7, #28
 801a28e:	46bd      	mov	sp, r7
 801a290:	bc80      	pop	{r7}
 801a292:	4770      	bx	lr

0801a294 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a294:	b480      	push	{r7}
 801a296:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801a298:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801a29c:	4618      	mov	r0, r3
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	bc80      	pop	{r7}
 801a2a2:	4770      	bx	lr

0801a2a4 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801a2a4:	b480      	push	{r7}
 801a2a6:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801a2a8:	bf00      	nop
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bc80      	pop	{r7}
 801a2ae:	4770      	bx	lr

0801a2b0 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a2b0:	b480      	push	{r7}
 801a2b2:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801a2b4:	bf00      	nop
 801a2b6:	46bd      	mov	sp, r7
 801a2b8:	bc80      	pop	{r7}
 801a2ba:	4770      	bx	lr

0801a2bc <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801a2bc:	b480      	push	{r7}
 801a2be:	b083      	sub	sp, #12
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801a2c6:	bf00      	nop
 801a2c8:	370c      	adds	r7, #12
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bc80      	pop	{r7}
 801a2ce:	4770      	bx	lr

0801a2d0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a2d4:	2218      	movs	r2, #24
 801a2d6:	2100      	movs	r1, #0
 801a2d8:	4807      	ldr	r0, [pc, #28]	@ (801a2f8 <UTIL_ADV_TRACE_Init+0x28>)
 801a2da:	f000 fb45 	bl	801a968 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a2de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a2e2:	2100      	movs	r1, #0
 801a2e4:	4805      	ldr	r0, [pc, #20]	@ (801a2fc <UTIL_ADV_TRACE_Init+0x2c>)
 801a2e6:	f000 fb3f 	bl	801a968 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a2ea:	4b05      	ldr	r3, [pc, #20]	@ (801a300 <UTIL_ADV_TRACE_Init+0x30>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	4805      	ldr	r0, [pc, #20]	@ (801a304 <UTIL_ADV_TRACE_Init+0x34>)
 801a2f0:	4798      	blx	r3
 801a2f2:	4603      	mov	r3, r0
}
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	bd80      	pop	{r7, pc}
 801a2f8:	200013d8 	.word	0x200013d8
 801a2fc:	200013f0 	.word	0x200013f0
 801a300:	08021a64 	.word	0x08021a64
 801a304:	0801a571 	.word	0x0801a571

0801a308 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a308:	b480      	push	{r7}
 801a30a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a30c:	4b06      	ldr	r3, [pc, #24]	@ (801a328 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a30e:	8a5a      	ldrh	r2, [r3, #18]
 801a310:	4b05      	ldr	r3, [pc, #20]	@ (801a328 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a312:	8a1b      	ldrh	r3, [r3, #16]
 801a314:	429a      	cmp	r2, r3
 801a316:	d101      	bne.n	801a31c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a318:	2301      	movs	r3, #1
 801a31a:	e000      	b.n	801a31e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a31c:	2300      	movs	r3, #0
}
 801a31e:	4618      	mov	r0, r3
 801a320:	46bd      	mov	sp, r7
 801a322:	bc80      	pop	{r7}
 801a324:	4770      	bx	lr
 801a326:	bf00      	nop
 801a328:	200013d8 	.word	0x200013d8

0801a32c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a32c:	b408      	push	{r3}
 801a32e:	b580      	push	{r7, lr}
 801a330:	b08d      	sub	sp, #52	@ 0x34
 801a332:	af00      	add	r7, sp, #0
 801a334:	60f8      	str	r0, [r7, #12]
 801a336:	60b9      	str	r1, [r7, #8]
 801a338:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a33a:	2300      	movs	r3, #0
 801a33c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a33e:	2300      	movs	r3, #0
 801a340:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a342:	4b37      	ldr	r3, [pc, #220]	@ (801a420 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a344:	7a1b      	ldrb	r3, [r3, #8]
 801a346:	461a      	mov	r2, r3
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	4293      	cmp	r3, r2
 801a34c:	d902      	bls.n	801a354 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a34e:	f06f 0304 	mvn.w	r3, #4
 801a352:	e05e      	b.n	801a412 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a354:	4b32      	ldr	r3, [pc, #200]	@ (801a420 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a356:	68da      	ldr	r2, [r3, #12]
 801a358:	68bb      	ldr	r3, [r7, #8]
 801a35a:	4013      	ands	r3, r2
 801a35c:	68ba      	ldr	r2, [r7, #8]
 801a35e:	429a      	cmp	r2, r3
 801a360:	d002      	beq.n	801a368 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a362:	f06f 0305 	mvn.w	r3, #5
 801a366:	e054      	b.n	801a412 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a368:	4b2d      	ldr	r3, [pc, #180]	@ (801a420 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a36a:	685b      	ldr	r3, [r3, #4]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d00a      	beq.n	801a386 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d007      	beq.n	801a386 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a376:	4b2a      	ldr	r3, [pc, #168]	@ (801a420 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801a378:	685b      	ldr	r3, [r3, #4]
 801a37a:	f107 0116 	add.w	r1, r7, #22
 801a37e:	f107 0218 	add.w	r2, r7, #24
 801a382:	4610      	mov	r0, r2
 801a384:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a386:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801a38a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a38e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a390:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a394:	4823      	ldr	r0, [pc, #140]	@ (801a424 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a396:	f001 f913 	bl	801b5c0 <tiny_vsnprintf_like>
 801a39a:	4603      	mov	r3, r0
 801a39c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801a39e:	f000 f9f1 	bl	801a784 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a3a2:	8afa      	ldrh	r2, [r7, #22]
 801a3a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a3a6:	4413      	add	r3, r2
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	f107 0214 	add.w	r2, r7, #20
 801a3ae:	4611      	mov	r1, r2
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	f000 f969 	bl	801a688 <TRACE_AllocateBufer>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3bc:	d025      	beq.n	801a40a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a3be:	2300      	movs	r3, #0
 801a3c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801a3c2:	e00e      	b.n	801a3e2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a3c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801a3c6:	8aba      	ldrh	r2, [r7, #20]
 801a3c8:	3330      	adds	r3, #48	@ 0x30
 801a3ca:	443b      	add	r3, r7
 801a3cc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a3d0:	4b15      	ldr	r3, [pc, #84]	@ (801a428 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a3d2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a3d4:	8abb      	ldrh	r3, [r7, #20]
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a3dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801a3de:	3301      	adds	r3, #1
 801a3e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801a3e2:	8afb      	ldrh	r3, [r7, #22]
 801a3e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801a3e6:	429a      	cmp	r2, r3
 801a3e8:	d3ec      	bcc.n	801a3c4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a3ea:	8abb      	ldrh	r3, [r7, #20]
 801a3ec:	461a      	mov	r2, r3
 801a3ee:	4b0e      	ldr	r3, [pc, #56]	@ (801a428 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a3f0:	18d0      	adds	r0, r2, r3
 801a3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a3f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a3fa:	f001 f8e1 	bl	801b5c0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a3fe:	f000 f9df 	bl	801a7c0 <TRACE_UnLock>

    return TRACE_Send();
 801a402:	f000 f831 	bl	801a468 <TRACE_Send>
 801a406:	4603      	mov	r3, r0
 801a408:	e003      	b.n	801a412 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a40a:	f000 f9d9 	bl	801a7c0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a40e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a412:	4618      	mov	r0, r3
 801a414:	3734      	adds	r7, #52	@ 0x34
 801a416:	46bd      	mov	sp, r7
 801a418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a41c:	b001      	add	sp, #4
 801a41e:	4770      	bx	lr
 801a420:	200013d8 	.word	0x200013d8
 801a424:	200017f0 	.word	0x200017f0
 801a428:	200013f0 	.word	0x200013f0

0801a42c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a42c:	b480      	push	{r7}
 801a42e:	b083      	sub	sp, #12
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a434:	4a03      	ldr	r2, [pc, #12]	@ (801a444 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	6053      	str	r3, [r2, #4]
}
 801a43a:	bf00      	nop
 801a43c:	370c      	adds	r7, #12
 801a43e:	46bd      	mov	sp, r7
 801a440:	bc80      	pop	{r7}
 801a442:	4770      	bx	lr
 801a444:	200013d8 	.word	0x200013d8

0801a448 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a448:	b480      	push	{r7}
 801a44a:	b083      	sub	sp, #12
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	4603      	mov	r3, r0
 801a450:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a452:	4a04      	ldr	r2, [pc, #16]	@ (801a464 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a454:	79fb      	ldrb	r3, [r7, #7]
 801a456:	7213      	strb	r3, [r2, #8]
}
 801a458:	bf00      	nop
 801a45a:	370c      	adds	r7, #12
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bc80      	pop	{r7}
 801a460:	4770      	bx	lr
 801a462:	bf00      	nop
 801a464:	200013d8 	.word	0x200013d8

0801a468 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b088      	sub	sp, #32
 801a46c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a46e:	2300      	movs	r3, #0
 801a470:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a472:	2300      	movs	r3, #0
 801a474:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a476:	f3ef 8310 	mrs	r3, PRIMASK
 801a47a:	613b      	str	r3, [r7, #16]
  return(result);
 801a47c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a47e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a480:	b672      	cpsid	i
}
 801a482:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a484:	f000 f9ba 	bl	801a7fc <TRACE_IsLocked>
 801a488:	4603      	mov	r3, r0
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d15d      	bne.n	801a54a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a48e:	f000 f979 	bl	801a784 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a492:	4b34      	ldr	r3, [pc, #208]	@ (801a564 <TRACE_Send+0xfc>)
 801a494:	8a1a      	ldrh	r2, [r3, #16]
 801a496:	4b33      	ldr	r3, [pc, #204]	@ (801a564 <TRACE_Send+0xfc>)
 801a498:	8a5b      	ldrh	r3, [r3, #18]
 801a49a:	429a      	cmp	r2, r3
 801a49c:	d04d      	beq.n	801a53a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a49e:	4b31      	ldr	r3, [pc, #196]	@ (801a564 <TRACE_Send+0xfc>)
 801a4a0:	789b      	ldrb	r3, [r3, #2]
 801a4a2:	2b01      	cmp	r3, #1
 801a4a4:	d117      	bne.n	801a4d6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a4a6:	4b2f      	ldr	r3, [pc, #188]	@ (801a564 <TRACE_Send+0xfc>)
 801a4a8:	881a      	ldrh	r2, [r3, #0]
 801a4aa:	4b2e      	ldr	r3, [pc, #184]	@ (801a564 <TRACE_Send+0xfc>)
 801a4ac:	8a1b      	ldrh	r3, [r3, #16]
 801a4ae:	1ad3      	subs	r3, r2, r3
 801a4b0:	b29a      	uxth	r2, r3
 801a4b2:	4b2c      	ldr	r3, [pc, #176]	@ (801a564 <TRACE_Send+0xfc>)
 801a4b4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a4b6:	4b2b      	ldr	r3, [pc, #172]	@ (801a564 <TRACE_Send+0xfc>)
 801a4b8:	2202      	movs	r2, #2
 801a4ba:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a4bc:	4b29      	ldr	r3, [pc, #164]	@ (801a564 <TRACE_Send+0xfc>)
 801a4be:	2200      	movs	r2, #0
 801a4c0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a4c2:	4b28      	ldr	r3, [pc, #160]	@ (801a564 <TRACE_Send+0xfc>)
 801a4c4:	8a9b      	ldrh	r3, [r3, #20]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d105      	bne.n	801a4d6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a4ca:	4b26      	ldr	r3, [pc, #152]	@ (801a564 <TRACE_Send+0xfc>)
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a4d0:	4b24      	ldr	r3, [pc, #144]	@ (801a564 <TRACE_Send+0xfc>)
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a4d6:	4b23      	ldr	r3, [pc, #140]	@ (801a564 <TRACE_Send+0xfc>)
 801a4d8:	789b      	ldrb	r3, [r3, #2]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d115      	bne.n	801a50a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a4de:	4b21      	ldr	r3, [pc, #132]	@ (801a564 <TRACE_Send+0xfc>)
 801a4e0:	8a5a      	ldrh	r2, [r3, #18]
 801a4e2:	4b20      	ldr	r3, [pc, #128]	@ (801a564 <TRACE_Send+0xfc>)
 801a4e4:	8a1b      	ldrh	r3, [r3, #16]
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	d908      	bls.n	801a4fc <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a4ea:	4b1e      	ldr	r3, [pc, #120]	@ (801a564 <TRACE_Send+0xfc>)
 801a4ec:	8a5a      	ldrh	r2, [r3, #18]
 801a4ee:	4b1d      	ldr	r3, [pc, #116]	@ (801a564 <TRACE_Send+0xfc>)
 801a4f0:	8a1b      	ldrh	r3, [r3, #16]
 801a4f2:	1ad3      	subs	r3, r2, r3
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	4b1b      	ldr	r3, [pc, #108]	@ (801a564 <TRACE_Send+0xfc>)
 801a4f8:	829a      	strh	r2, [r3, #20]
 801a4fa:	e006      	b.n	801a50a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a4fc:	4b19      	ldr	r3, [pc, #100]	@ (801a564 <TRACE_Send+0xfc>)
 801a4fe:	8a1b      	ldrh	r3, [r3, #16]
 801a500:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a504:	b29a      	uxth	r2, r3
 801a506:	4b17      	ldr	r3, [pc, #92]	@ (801a564 <TRACE_Send+0xfc>)
 801a508:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a50a:	4b16      	ldr	r3, [pc, #88]	@ (801a564 <TRACE_Send+0xfc>)
 801a50c:	8a1b      	ldrh	r3, [r3, #16]
 801a50e:	461a      	mov	r2, r3
 801a510:	4b15      	ldr	r3, [pc, #84]	@ (801a568 <TRACE_Send+0x100>)
 801a512:	4413      	add	r3, r2
 801a514:	61bb      	str	r3, [r7, #24]
 801a516:	697b      	ldr	r3, [r7, #20]
 801a518:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	f383 8810 	msr	PRIMASK, r3
}
 801a520:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a522:	f7e7 f971 	bl	8001808 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a526:	4b11      	ldr	r3, [pc, #68]	@ (801a56c <TRACE_Send+0x104>)
 801a528:	68db      	ldr	r3, [r3, #12]
 801a52a:	4a0e      	ldr	r2, [pc, #56]	@ (801a564 <TRACE_Send+0xfc>)
 801a52c:	8a92      	ldrh	r2, [r2, #20]
 801a52e:	4611      	mov	r1, r2
 801a530:	69b8      	ldr	r0, [r7, #24]
 801a532:	4798      	blx	r3
 801a534:	4603      	mov	r3, r0
 801a536:	77fb      	strb	r3, [r7, #31]
 801a538:	e00d      	b.n	801a556 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a53a:	f000 f941 	bl	801a7c0 <TRACE_UnLock>
 801a53e:	697b      	ldr	r3, [r7, #20]
 801a540:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a542:	68bb      	ldr	r3, [r7, #8]
 801a544:	f383 8810 	msr	PRIMASK, r3
}
 801a548:	e005      	b.n	801a556 <TRACE_Send+0xee>
 801a54a:	697b      	ldr	r3, [r7, #20]
 801a54c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	f383 8810 	msr	PRIMASK, r3
}
 801a554:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a556:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	3720      	adds	r7, #32
 801a55e:	46bd      	mov	sp, r7
 801a560:	bd80      	pop	{r7, pc}
 801a562:	bf00      	nop
 801a564:	200013d8 	.word	0x200013d8
 801a568:	200013f0 	.word	0x200013f0
 801a56c:	08021a64 	.word	0x08021a64

0801a570 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a570:	b580      	push	{r7, lr}
 801a572:	b088      	sub	sp, #32
 801a574:	af00      	add	r7, sp, #0
 801a576:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a578:	2300      	movs	r3, #0
 801a57a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a57c:	f3ef 8310 	mrs	r3, PRIMASK
 801a580:	617b      	str	r3, [r7, #20]
  return(result);
 801a582:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a584:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a586:	b672      	cpsid	i
}
 801a588:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a58a:	4b3c      	ldr	r3, [pc, #240]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a58c:	789b      	ldrb	r3, [r3, #2]
 801a58e:	2b02      	cmp	r3, #2
 801a590:	d106      	bne.n	801a5a0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a592:	4b3a      	ldr	r3, [pc, #232]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a594:	2200      	movs	r2, #0
 801a596:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a598:	4b38      	ldr	r3, [pc, #224]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a59a:	2200      	movs	r2, #0
 801a59c:	821a      	strh	r2, [r3, #16]
 801a59e:	e00a      	b.n	801a5b6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a5a0:	4b36      	ldr	r3, [pc, #216]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5a2:	8a1a      	ldrh	r2, [r3, #16]
 801a5a4:	4b35      	ldr	r3, [pc, #212]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5a6:	8a9b      	ldrh	r3, [r3, #20]
 801a5a8:	4413      	add	r3, r2
 801a5aa:	b29b      	uxth	r3, r3
 801a5ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a5b0:	b29a      	uxth	r2, r3
 801a5b2:	4b32      	ldr	r3, [pc, #200]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5b4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a5b6:	4b31      	ldr	r3, [pc, #196]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5b8:	8a1a      	ldrh	r2, [r3, #16]
 801a5ba:	4b30      	ldr	r3, [pc, #192]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5bc:	8a5b      	ldrh	r3, [r3, #18]
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d04d      	beq.n	801a65e <TRACE_TxCpltCallback+0xee>
 801a5c2:	4b2e      	ldr	r3, [pc, #184]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5c4:	8adb      	ldrh	r3, [r3, #22]
 801a5c6:	2b01      	cmp	r3, #1
 801a5c8:	d149      	bne.n	801a65e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a5ca:	4b2c      	ldr	r3, [pc, #176]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5cc:	789b      	ldrb	r3, [r3, #2]
 801a5ce:	2b01      	cmp	r3, #1
 801a5d0:	d117      	bne.n	801a602 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a5d2:	4b2a      	ldr	r3, [pc, #168]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5d4:	881a      	ldrh	r2, [r3, #0]
 801a5d6:	4b29      	ldr	r3, [pc, #164]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5d8:	8a1b      	ldrh	r3, [r3, #16]
 801a5da:	1ad3      	subs	r3, r2, r3
 801a5dc:	b29a      	uxth	r2, r3
 801a5de:	4b27      	ldr	r3, [pc, #156]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5e0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a5e2:	4b26      	ldr	r3, [pc, #152]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5e4:	2202      	movs	r2, #2
 801a5e6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a5e8:	4b24      	ldr	r3, [pc, #144]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a5ee:	4b23      	ldr	r3, [pc, #140]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5f0:	8a9b      	ldrh	r3, [r3, #20]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d105      	bne.n	801a602 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a5f6:	4b21      	ldr	r3, [pc, #132]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a5fc:	4b1f      	ldr	r3, [pc, #124]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a5fe:	2200      	movs	r2, #0
 801a600:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a602:	4b1e      	ldr	r3, [pc, #120]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a604:	789b      	ldrb	r3, [r3, #2]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d115      	bne.n	801a636 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a60a:	4b1c      	ldr	r3, [pc, #112]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a60c:	8a5a      	ldrh	r2, [r3, #18]
 801a60e:	4b1b      	ldr	r3, [pc, #108]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a610:	8a1b      	ldrh	r3, [r3, #16]
 801a612:	429a      	cmp	r2, r3
 801a614:	d908      	bls.n	801a628 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a616:	4b19      	ldr	r3, [pc, #100]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a618:	8a5a      	ldrh	r2, [r3, #18]
 801a61a:	4b18      	ldr	r3, [pc, #96]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a61c:	8a1b      	ldrh	r3, [r3, #16]
 801a61e:	1ad3      	subs	r3, r2, r3
 801a620:	b29a      	uxth	r2, r3
 801a622:	4b16      	ldr	r3, [pc, #88]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a624:	829a      	strh	r2, [r3, #20]
 801a626:	e006      	b.n	801a636 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a628:	4b14      	ldr	r3, [pc, #80]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a62a:	8a1b      	ldrh	r3, [r3, #16]
 801a62c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a630:	b29a      	uxth	r2, r3
 801a632:	4b12      	ldr	r3, [pc, #72]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a634:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a636:	4b11      	ldr	r3, [pc, #68]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a638:	8a1b      	ldrh	r3, [r3, #16]
 801a63a:	461a      	mov	r2, r3
 801a63c:	4b10      	ldr	r3, [pc, #64]	@ (801a680 <TRACE_TxCpltCallback+0x110>)
 801a63e:	4413      	add	r3, r2
 801a640:	61fb      	str	r3, [r7, #28]
 801a642:	69bb      	ldr	r3, [r7, #24]
 801a644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a646:	693b      	ldr	r3, [r7, #16]
 801a648:	f383 8810 	msr	PRIMASK, r3
}
 801a64c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a64e:	4b0d      	ldr	r3, [pc, #52]	@ (801a684 <TRACE_TxCpltCallback+0x114>)
 801a650:	68db      	ldr	r3, [r3, #12]
 801a652:	4a0a      	ldr	r2, [pc, #40]	@ (801a67c <TRACE_TxCpltCallback+0x10c>)
 801a654:	8a92      	ldrh	r2, [r2, #20]
 801a656:	4611      	mov	r1, r2
 801a658:	69f8      	ldr	r0, [r7, #28]
 801a65a:	4798      	blx	r3
 801a65c:	e00a      	b.n	801a674 <TRACE_TxCpltCallback+0x104>
 801a65e:	69bb      	ldr	r3, [r7, #24]
 801a660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	f383 8810 	msr	PRIMASK, r3
}
 801a668:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a66a:	f7e7 f8d5 	bl	8001818 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a66e:	f000 f8a7 	bl	801a7c0 <TRACE_UnLock>
  }
}
 801a672:	bf00      	nop
 801a674:	bf00      	nop
 801a676:	3720      	adds	r7, #32
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd80      	pop	{r7, pc}
 801a67c:	200013d8 	.word	0x200013d8
 801a680:	200013f0 	.word	0x200013f0
 801a684:	08021a64 	.word	0x08021a64

0801a688 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a688:	b480      	push	{r7}
 801a68a:	b087      	sub	sp, #28
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	4603      	mov	r3, r0
 801a690:	6039      	str	r1, [r7, #0]
 801a692:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a698:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a69a:	f3ef 8310 	mrs	r3, PRIMASK
 801a69e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a6a0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a6a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6a4:	b672      	cpsid	i
}
 801a6a6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a6a8:	4b35      	ldr	r3, [pc, #212]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6aa:	8a5a      	ldrh	r2, [r3, #18]
 801a6ac:	4b34      	ldr	r3, [pc, #208]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6ae:	8a1b      	ldrh	r3, [r3, #16]
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	d11b      	bne.n	801a6ec <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a6b4:	4b32      	ldr	r3, [pc, #200]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6b6:	8a5b      	ldrh	r3, [r3, #18]
 801a6b8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a6bc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801a6be:	88fa      	ldrh	r2, [r7, #6]
 801a6c0:	8afb      	ldrh	r3, [r7, #22]
 801a6c2:	429a      	cmp	r2, r3
 801a6c4:	d33a      	bcc.n	801a73c <TRACE_AllocateBufer+0xb4>
 801a6c6:	4b2e      	ldr	r3, [pc, #184]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6c8:	8a1b      	ldrh	r3, [r3, #16]
 801a6ca:	88fa      	ldrh	r2, [r7, #6]
 801a6cc:	429a      	cmp	r2, r3
 801a6ce:	d235      	bcs.n	801a73c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a6d0:	4b2b      	ldr	r3, [pc, #172]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6d2:	2201      	movs	r2, #1
 801a6d4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a6d6:	4b2a      	ldr	r3, [pc, #168]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6d8:	8a5a      	ldrh	r2, [r3, #18]
 801a6da:	4b29      	ldr	r3, [pc, #164]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6dc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a6de:	4b28      	ldr	r3, [pc, #160]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6e0:	8a1b      	ldrh	r3, [r3, #16]
 801a6e2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a6e4:	4b26      	ldr	r3, [pc, #152]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	825a      	strh	r2, [r3, #18]
 801a6ea:	e027      	b.n	801a73c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a6ec:	4b24      	ldr	r3, [pc, #144]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6ee:	8a5a      	ldrh	r2, [r3, #18]
 801a6f0:	4b23      	ldr	r3, [pc, #140]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6f2:	8a1b      	ldrh	r3, [r3, #16]
 801a6f4:	429a      	cmp	r2, r3
 801a6f6:	d91b      	bls.n	801a730 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a6f8:	4b21      	ldr	r3, [pc, #132]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a6fa:	8a5b      	ldrh	r3, [r3, #18]
 801a6fc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801a700:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801a702:	88fa      	ldrh	r2, [r7, #6]
 801a704:	8afb      	ldrh	r3, [r7, #22]
 801a706:	429a      	cmp	r2, r3
 801a708:	d318      	bcc.n	801a73c <TRACE_AllocateBufer+0xb4>
 801a70a:	4b1d      	ldr	r3, [pc, #116]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a70c:	8a1b      	ldrh	r3, [r3, #16]
 801a70e:	88fa      	ldrh	r2, [r7, #6]
 801a710:	429a      	cmp	r2, r3
 801a712:	d213      	bcs.n	801a73c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a714:	4b1a      	ldr	r3, [pc, #104]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a716:	2201      	movs	r2, #1
 801a718:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a71a:	4b19      	ldr	r3, [pc, #100]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a71c:	8a5a      	ldrh	r2, [r3, #18]
 801a71e:	4b18      	ldr	r3, [pc, #96]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a720:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a722:	4b17      	ldr	r3, [pc, #92]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a724:	8a1b      	ldrh	r3, [r3, #16]
 801a726:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a728:	4b15      	ldr	r3, [pc, #84]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a72a:	2200      	movs	r2, #0
 801a72c:	825a      	strh	r2, [r3, #18]
 801a72e:	e005      	b.n	801a73c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801a730:	4b13      	ldr	r3, [pc, #76]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a732:	8a1a      	ldrh	r2, [r3, #16]
 801a734:	4b12      	ldr	r3, [pc, #72]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a736:	8a5b      	ldrh	r3, [r3, #18]
 801a738:	1ad3      	subs	r3, r2, r3
 801a73a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801a73c:	8afa      	ldrh	r2, [r7, #22]
 801a73e:	88fb      	ldrh	r3, [r7, #6]
 801a740:	429a      	cmp	r2, r3
 801a742:	d90f      	bls.n	801a764 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801a744:	4b0e      	ldr	r3, [pc, #56]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a746:	8a5a      	ldrh	r2, [r3, #18]
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a74c:	4b0c      	ldr	r3, [pc, #48]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a74e:	8a5a      	ldrh	r2, [r3, #18]
 801a750:	88fb      	ldrh	r3, [r7, #6]
 801a752:	4413      	add	r3, r2
 801a754:	b29b      	uxth	r3, r3
 801a756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a75a:	b29a      	uxth	r2, r3
 801a75c:	4b08      	ldr	r3, [pc, #32]	@ (801a780 <TRACE_AllocateBufer+0xf8>)
 801a75e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801a760:	2300      	movs	r3, #0
 801a762:	82bb      	strh	r3, [r7, #20]
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a768:	68bb      	ldr	r3, [r7, #8]
 801a76a:	f383 8810 	msr	PRIMASK, r3
}
 801a76e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801a770:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801a774:	4618      	mov	r0, r3
 801a776:	371c      	adds	r7, #28
 801a778:	46bd      	mov	sp, r7
 801a77a:	bc80      	pop	{r7}
 801a77c:	4770      	bx	lr
 801a77e:	bf00      	nop
 801a780:	200013d8 	.word	0x200013d8

0801a784 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801a784:	b480      	push	{r7}
 801a786:	b085      	sub	sp, #20
 801a788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a78a:	f3ef 8310 	mrs	r3, PRIMASK
 801a78e:	607b      	str	r3, [r7, #4]
  return(result);
 801a790:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a792:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a794:	b672      	cpsid	i
}
 801a796:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801a798:	4b08      	ldr	r3, [pc, #32]	@ (801a7bc <TRACE_Lock+0x38>)
 801a79a:	8adb      	ldrh	r3, [r3, #22]
 801a79c:	3301      	adds	r3, #1
 801a79e:	b29a      	uxth	r2, r3
 801a7a0:	4b06      	ldr	r3, [pc, #24]	@ (801a7bc <TRACE_Lock+0x38>)
 801a7a2:	82da      	strh	r2, [r3, #22]
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7a8:	68bb      	ldr	r3, [r7, #8]
 801a7aa:	f383 8810 	msr	PRIMASK, r3
}
 801a7ae:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a7b0:	bf00      	nop
 801a7b2:	3714      	adds	r7, #20
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	bc80      	pop	{r7}
 801a7b8:	4770      	bx	lr
 801a7ba:	bf00      	nop
 801a7bc:	200013d8 	.word	0x200013d8

0801a7c0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801a7c0:	b480      	push	{r7}
 801a7c2:	b085      	sub	sp, #20
 801a7c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7c6:	f3ef 8310 	mrs	r3, PRIMASK
 801a7ca:	607b      	str	r3, [r7, #4]
  return(result);
 801a7cc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a7ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7d0:	b672      	cpsid	i
}
 801a7d2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801a7d4:	4b08      	ldr	r3, [pc, #32]	@ (801a7f8 <TRACE_UnLock+0x38>)
 801a7d6:	8adb      	ldrh	r3, [r3, #22]
 801a7d8:	3b01      	subs	r3, #1
 801a7da:	b29a      	uxth	r2, r3
 801a7dc:	4b06      	ldr	r3, [pc, #24]	@ (801a7f8 <TRACE_UnLock+0x38>)
 801a7de:	82da      	strh	r2, [r3, #22]
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	f383 8810 	msr	PRIMASK, r3
}
 801a7ea:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a7ec:	bf00      	nop
 801a7ee:	3714      	adds	r7, #20
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bc80      	pop	{r7}
 801a7f4:	4770      	bx	lr
 801a7f6:	bf00      	nop
 801a7f8:	200013d8 	.word	0x200013d8

0801a7fc <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801a7fc:	b480      	push	{r7}
 801a7fe:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801a800:	4b05      	ldr	r3, [pc, #20]	@ (801a818 <TRACE_IsLocked+0x1c>)
 801a802:	8adb      	ldrh	r3, [r3, #22]
 801a804:	2b00      	cmp	r3, #0
 801a806:	bf14      	ite	ne
 801a808:	2301      	movne	r3, #1
 801a80a:	2300      	moveq	r3, #0
 801a80c:	b2db      	uxtb	r3, r3
}
 801a80e:	4618      	mov	r0, r3
 801a810:	46bd      	mov	sp, r7
 801a812:	bc80      	pop	{r7}
 801a814:	4770      	bx	lr
 801a816:	bf00      	nop
 801a818:	200013d8 	.word	0x200013d8

0801a81c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a81c:	b480      	push	{r7}
 801a81e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a820:	4b04      	ldr	r3, [pc, #16]	@ (801a834 <UTIL_LPM_Init+0x18>)
 801a822:	2200      	movs	r2, #0
 801a824:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a826:	4b04      	ldr	r3, [pc, #16]	@ (801a838 <UTIL_LPM_Init+0x1c>)
 801a828:	2200      	movs	r2, #0
 801a82a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a82c:	bf00      	nop
 801a82e:	46bd      	mov	sp, r7
 801a830:	bc80      	pop	{r7}
 801a832:	4770      	bx	lr
 801a834:	200019f0 	.word	0x200019f0
 801a838:	200019f4 	.word	0x200019f4

0801a83c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a83c:	b480      	push	{r7}
 801a83e:	b087      	sub	sp, #28
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	460b      	mov	r3, r1
 801a846:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a848:	f3ef 8310 	mrs	r3, PRIMASK
 801a84c:	613b      	str	r3, [r7, #16]
  return(result);
 801a84e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a850:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a852:	b672      	cpsid	i
}
 801a854:	bf00      	nop
  
  switch( state )
 801a856:	78fb      	ldrb	r3, [r7, #3]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d008      	beq.n	801a86e <UTIL_LPM_SetStopMode+0x32>
 801a85c:	2b01      	cmp	r3, #1
 801a85e:	d10e      	bne.n	801a87e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a860:	4b0d      	ldr	r3, [pc, #52]	@ (801a898 <UTIL_LPM_SetStopMode+0x5c>)
 801a862:	681a      	ldr	r2, [r3, #0]
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	4313      	orrs	r3, r2
 801a868:	4a0b      	ldr	r2, [pc, #44]	@ (801a898 <UTIL_LPM_SetStopMode+0x5c>)
 801a86a:	6013      	str	r3, [r2, #0]
      break;
 801a86c:	e008      	b.n	801a880 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	43da      	mvns	r2, r3
 801a872:	4b09      	ldr	r3, [pc, #36]	@ (801a898 <UTIL_LPM_SetStopMode+0x5c>)
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	4013      	ands	r3, r2
 801a878:	4a07      	ldr	r2, [pc, #28]	@ (801a898 <UTIL_LPM_SetStopMode+0x5c>)
 801a87a:	6013      	str	r3, [r2, #0]
      break;
 801a87c:	e000      	b.n	801a880 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a87e:	bf00      	nop
 801a880:	697b      	ldr	r3, [r7, #20]
 801a882:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	f383 8810 	msr	PRIMASK, r3
}
 801a88a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a88c:	bf00      	nop
 801a88e:	371c      	adds	r7, #28
 801a890:	46bd      	mov	sp, r7
 801a892:	bc80      	pop	{r7}
 801a894:	4770      	bx	lr
 801a896:	bf00      	nop
 801a898:	200019f0 	.word	0x200019f0

0801a89c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a89c:	b480      	push	{r7}
 801a89e:	b087      	sub	sp, #28
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
 801a8a4:	460b      	mov	r3, r1
 801a8a6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8a8:	f3ef 8310 	mrs	r3, PRIMASK
 801a8ac:	613b      	str	r3, [r7, #16]
  return(result);
 801a8ae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a8b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8b2:	b672      	cpsid	i
}
 801a8b4:	bf00      	nop
  
  switch(state)
 801a8b6:	78fb      	ldrb	r3, [r7, #3]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d008      	beq.n	801a8ce <UTIL_LPM_SetOffMode+0x32>
 801a8bc:	2b01      	cmp	r3, #1
 801a8be:	d10e      	bne.n	801a8de <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a8c0:	4b0d      	ldr	r3, [pc, #52]	@ (801a8f8 <UTIL_LPM_SetOffMode+0x5c>)
 801a8c2:	681a      	ldr	r2, [r3, #0]
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	4313      	orrs	r3, r2
 801a8c8:	4a0b      	ldr	r2, [pc, #44]	@ (801a8f8 <UTIL_LPM_SetOffMode+0x5c>)
 801a8ca:	6013      	str	r3, [r2, #0]
      break;
 801a8cc:	e008      	b.n	801a8e0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	43da      	mvns	r2, r3
 801a8d2:	4b09      	ldr	r3, [pc, #36]	@ (801a8f8 <UTIL_LPM_SetOffMode+0x5c>)
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	4013      	ands	r3, r2
 801a8d8:	4a07      	ldr	r2, [pc, #28]	@ (801a8f8 <UTIL_LPM_SetOffMode+0x5c>)
 801a8da:	6013      	str	r3, [r2, #0]
      break;
 801a8dc:	e000      	b.n	801a8e0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a8de:	bf00      	nop
 801a8e0:	697b      	ldr	r3, [r7, #20]
 801a8e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	f383 8810 	msr	PRIMASK, r3
}
 801a8ea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a8ec:	bf00      	nop
 801a8ee:	371c      	adds	r7, #28
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bc80      	pop	{r7}
 801a8f4:	4770      	bx	lr
 801a8f6:	bf00      	nop
 801a8f8:	200019f4 	.word	0x200019f4

0801a8fc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b084      	sub	sp, #16
 801a900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a902:	f3ef 8310 	mrs	r3, PRIMASK
 801a906:	60bb      	str	r3, [r7, #8]
  return(result);
 801a908:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a90a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a90c:	b672      	cpsid	i
}
 801a90e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a910:	4b12      	ldr	r3, [pc, #72]	@ (801a95c <UTIL_LPM_EnterLowPower+0x60>)
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d006      	beq.n	801a926 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a918:	4b11      	ldr	r3, [pc, #68]	@ (801a960 <UTIL_LPM_EnterLowPower+0x64>)
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a91e:	4b10      	ldr	r3, [pc, #64]	@ (801a960 <UTIL_LPM_EnterLowPower+0x64>)
 801a920:	685b      	ldr	r3, [r3, #4]
 801a922:	4798      	blx	r3
 801a924:	e010      	b.n	801a948 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a926:	4b0f      	ldr	r3, [pc, #60]	@ (801a964 <UTIL_LPM_EnterLowPower+0x68>)
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d006      	beq.n	801a93c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a92e:	4b0c      	ldr	r3, [pc, #48]	@ (801a960 <UTIL_LPM_EnterLowPower+0x64>)
 801a930:	689b      	ldr	r3, [r3, #8]
 801a932:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a934:	4b0a      	ldr	r3, [pc, #40]	@ (801a960 <UTIL_LPM_EnterLowPower+0x64>)
 801a936:	68db      	ldr	r3, [r3, #12]
 801a938:	4798      	blx	r3
 801a93a:	e005      	b.n	801a948 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a93c:	4b08      	ldr	r3, [pc, #32]	@ (801a960 <UTIL_LPM_EnterLowPower+0x64>)
 801a93e:	691b      	ldr	r3, [r3, #16]
 801a940:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a942:	4b07      	ldr	r3, [pc, #28]	@ (801a960 <UTIL_LPM_EnterLowPower+0x64>)
 801a944:	695b      	ldr	r3, [r3, #20]
 801a946:	4798      	blx	r3
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f383 8810 	msr	PRIMASK, r3
}
 801a952:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a954:	bf00      	nop
 801a956:	3710      	adds	r7, #16
 801a958:	46bd      	mov	sp, r7
 801a95a:	bd80      	pop	{r7, pc}
 801a95c:	200019f0 	.word	0x200019f0
 801a960:	08021a0c 	.word	0x08021a0c
 801a964:	200019f4 	.word	0x200019f4

0801a968 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a968:	b480      	push	{r7}
 801a96a:	b085      	sub	sp, #20
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	460b      	mov	r3, r1
 801a972:	70fb      	strb	r3, [r7, #3]
 801a974:	4613      	mov	r3, r2
 801a976:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a97c:	e004      	b.n	801a988 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	1c5a      	adds	r2, r3, #1
 801a982:	60fa      	str	r2, [r7, #12]
 801a984:	78fa      	ldrb	r2, [r7, #3]
 801a986:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a988:	883b      	ldrh	r3, [r7, #0]
 801a98a:	1e5a      	subs	r2, r3, #1
 801a98c:	803a      	strh	r2, [r7, #0]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d1f5      	bne.n	801a97e <UTIL_MEM_set_8+0x16>
  }
}
 801a992:	bf00      	nop
 801a994:	bf00      	nop
 801a996:	3714      	adds	r7, #20
 801a998:	46bd      	mov	sp, r7
 801a99a:	bc80      	pop	{r7}
 801a99c:	4770      	bx	lr
	...

0801a9a0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b090      	sub	sp, #64	@ 0x40
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a9a8:	4b73      	ldr	r3, [pc, #460]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a9ae:	4b72      	ldr	r3, [pc, #456]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801a9b0:	681a      	ldr	r2, [r3, #0]
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	4013      	ands	r3, r2
 801a9b6:	4a70      	ldr	r2, [pc, #448]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801a9b8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a9ba:	4b70      	ldr	r3, [pc, #448]	@ (801ab7c <UTIL_SEQ_Run+0x1dc>)
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a9c0:	4b6f      	ldr	r3, [pc, #444]	@ (801ab80 <UTIL_SEQ_Run+0x1e0>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a9c6:	4b6f      	ldr	r3, [pc, #444]	@ (801ab84 <UTIL_SEQ_Run+0x1e4>)
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a9cc:	4b6e      	ldr	r3, [pc, #440]	@ (801ab88 <UTIL_SEQ_Run+0x1e8>)
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a9d2:	e08d      	b.n	801aaf0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a9d8:	e002      	b.n	801a9e0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9dc:	3301      	adds	r3, #1
 801a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a9e0:	4a6a      	ldr	r2, [pc, #424]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801a9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9ea:	401a      	ands	r2, r3
 801a9ec:	4b62      	ldr	r3, [pc, #392]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4013      	ands	r3, r2
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d0f1      	beq.n	801a9da <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a9f6:	4a65      	ldr	r2, [pc, #404]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801a9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa00:	401a      	ands	r2, r3
 801aa02:	4b5d      	ldr	r3, [pc, #372]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	4013      	ands	r3, r2
 801aa08:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801aa0a:	4a60      	ldr	r2, [pc, #384]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801aa0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa0e:	00db      	lsls	r3, r3, #3
 801aa10:	4413      	add	r3, r2
 801aa12:	685a      	ldr	r2, [r3, #4]
 801aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa16:	4013      	ands	r3, r2
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d106      	bne.n	801aa2a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801aa1c:	4a5b      	ldr	r2, [pc, #364]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801aa1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa20:	00db      	lsls	r3, r3, #3
 801aa22:	4413      	add	r3, r2
 801aa24:	f04f 32ff 	mov.w	r2, #4294967295
 801aa28:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801aa2a:	4a58      	ldr	r2, [pc, #352]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801aa2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa2e:	00db      	lsls	r3, r3, #3
 801aa30:	4413      	add	r3, r2
 801aa32:	685a      	ldr	r2, [r3, #4]
 801aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa36:	4013      	ands	r3, r2
 801aa38:	4618      	mov	r0, r3
 801aa3a:	f000 f907 	bl	801ac4c <SEQ_BitPosition>
 801aa3e:	4603      	mov	r3, r0
 801aa40:	461a      	mov	r2, r3
 801aa42:	4b53      	ldr	r3, [pc, #332]	@ (801ab90 <UTIL_SEQ_Run+0x1f0>)
 801aa44:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801aa46:	4a51      	ldr	r2, [pc, #324]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801aa48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa4a:	00db      	lsls	r3, r3, #3
 801aa4c:	4413      	add	r3, r2
 801aa4e:	685a      	ldr	r2, [r3, #4]
 801aa50:	4b4f      	ldr	r3, [pc, #316]	@ (801ab90 <UTIL_SEQ_Run+0x1f0>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	2101      	movs	r1, #1
 801aa56:	fa01 f303 	lsl.w	r3, r1, r3
 801aa5a:	43db      	mvns	r3, r3
 801aa5c:	401a      	ands	r2, r3
 801aa5e:	494b      	ldr	r1, [pc, #300]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801aa60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa62:	00db      	lsls	r3, r3, #3
 801aa64:	440b      	add	r3, r1
 801aa66:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa68:	f3ef 8310 	mrs	r3, PRIMASK
 801aa6c:	61bb      	str	r3, [r7, #24]
  return(result);
 801aa6e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801aa70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa72:	b672      	cpsid	i
}
 801aa74:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801aa76:	4b46      	ldr	r3, [pc, #280]	@ (801ab90 <UTIL_SEQ_Run+0x1f0>)
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2201      	movs	r2, #1
 801aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 801aa80:	43da      	mvns	r2, r3
 801aa82:	4b3e      	ldr	r3, [pc, #248]	@ (801ab7c <UTIL_SEQ_Run+0x1dc>)
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	4013      	ands	r3, r2
 801aa88:	4a3c      	ldr	r2, [pc, #240]	@ (801ab7c <UTIL_SEQ_Run+0x1dc>)
 801aa8a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa90:	e013      	b.n	801aaba <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801aa92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa94:	3b01      	subs	r3, #1
 801aa96:	4a3d      	ldr	r2, [pc, #244]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801aa98:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801aa9c:	4b3c      	ldr	r3, [pc, #240]	@ (801ab90 <UTIL_SEQ_Run+0x1f0>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	2201      	movs	r2, #1
 801aaa2:	fa02 f303 	lsl.w	r3, r2, r3
 801aaa6:	43da      	mvns	r2, r3
 801aaa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aaaa:	3b01      	subs	r3, #1
 801aaac:	400a      	ands	r2, r1
 801aaae:	4937      	ldr	r1, [pc, #220]	@ (801ab8c <UTIL_SEQ_Run+0x1ec>)
 801aab0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aab6:	3b01      	subs	r3, #1
 801aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aaba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d1e8      	bne.n	801aa92 <UTIL_SEQ_Run+0xf2>
 801aac0:	6a3b      	ldr	r3, [r7, #32]
 801aac2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aac4:	697b      	ldr	r3, [r7, #20]
 801aac6:	f383 8810 	msr	PRIMASK, r3
}
 801aaca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801aacc:	4b30      	ldr	r3, [pc, #192]	@ (801ab90 <UTIL_SEQ_Run+0x1f0>)
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	4a30      	ldr	r2, [pc, #192]	@ (801ab94 <UTIL_SEQ_Run+0x1f4>)
 801aad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aad6:	4798      	blx	r3

    local_taskset = TaskSet;
 801aad8:	4b28      	ldr	r3, [pc, #160]	@ (801ab7c <UTIL_SEQ_Run+0x1dc>)
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801aade:	4b28      	ldr	r3, [pc, #160]	@ (801ab80 <UTIL_SEQ_Run+0x1e0>)
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801aae4:	4b27      	ldr	r3, [pc, #156]	@ (801ab84 <UTIL_SEQ_Run+0x1e4>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801aaea:	4b27      	ldr	r3, [pc, #156]	@ (801ab88 <UTIL_SEQ_Run+0x1e8>)
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801aaf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaf4:	401a      	ands	r2, r3
 801aaf6:	4b20      	ldr	r3, [pc, #128]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	4013      	ands	r3, r2
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d005      	beq.n	801ab0c <UTIL_SEQ_Run+0x16c>
 801ab00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ab02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab04:	4013      	ands	r3, r2
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	f43f af64 	beq.w	801a9d4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ab0c:	4b20      	ldr	r3, [pc, #128]	@ (801ab90 <UTIL_SEQ_Run+0x1f0>)
 801ab0e:	f04f 32ff 	mov.w	r2, #4294967295
 801ab12:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ab14:	f000 f88e 	bl	801ac34 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab18:	f3ef 8310 	mrs	r3, PRIMASK
 801ab1c:	613b      	str	r3, [r7, #16]
  return(result);
 801ab1e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ab20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab22:	b672      	cpsid	i
}
 801ab24:	bf00      	nop
  local_taskset = TaskSet;
 801ab26:	4b15      	ldr	r3, [pc, #84]	@ (801ab7c <UTIL_SEQ_Run+0x1dc>)
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801ab2c:	4b14      	ldr	r3, [pc, #80]	@ (801ab80 <UTIL_SEQ_Run+0x1e0>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801ab32:	4b14      	ldr	r3, [pc, #80]	@ (801ab84 <UTIL_SEQ_Run+0x1e4>)
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801ab38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab3c:	401a      	ands	r2, r3
 801ab3e:	4b0e      	ldr	r3, [pc, #56]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	4013      	ands	r3, r2
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d107      	bne.n	801ab58 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ab48:	4b0f      	ldr	r3, [pc, #60]	@ (801ab88 <UTIL_SEQ_Run+0x1e8>)
 801ab4a:	681a      	ldr	r2, [r3, #0]
 801ab4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab4e:	4013      	ands	r3, r2
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d101      	bne.n	801ab58 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801ab54:	f7e6 fe32 	bl	80017bc <UTIL_SEQ_Idle>
 801ab58:	69fb      	ldr	r3, [r7, #28]
 801ab5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	f383 8810 	msr	PRIMASK, r3
}
 801ab62:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801ab64:	f000 f86c 	bl	801ac40 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801ab68:	4a03      	ldr	r2, [pc, #12]	@ (801ab78 <UTIL_SEQ_Run+0x1d8>)
 801ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab6c:	6013      	str	r3, [r2, #0]

  return;
 801ab6e:	bf00      	nop
}
 801ab70:	3740      	adds	r7, #64	@ 0x40
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}
 801ab76:	bf00      	nop
 801ab78:	200000e0 	.word	0x200000e0
 801ab7c:	200019f8 	.word	0x200019f8
 801ab80:	200019fc 	.word	0x200019fc
 801ab84:	200000dc 	.word	0x200000dc
 801ab88:	20001a00 	.word	0x20001a00
 801ab8c:	20001a30 	.word	0x20001a30
 801ab90:	20001a04 	.word	0x20001a04
 801ab94:	20001a08 	.word	0x20001a08

0801ab98 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b088      	sub	sp, #32
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	60f8      	str	r0, [r7, #12]
 801aba0:	60b9      	str	r1, [r7, #8]
 801aba2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aba4:	f3ef 8310 	mrs	r3, PRIMASK
 801aba8:	617b      	str	r3, [r7, #20]
  return(result);
 801abaa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801abac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801abae:	b672      	cpsid	i
}
 801abb0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801abb2:	68f8      	ldr	r0, [r7, #12]
 801abb4:	f000 f84a 	bl	801ac4c <SEQ_BitPosition>
 801abb8:	4603      	mov	r3, r0
 801abba:	4619      	mov	r1, r3
 801abbc:	4a06      	ldr	r2, [pc, #24]	@ (801abd8 <UTIL_SEQ_RegTask+0x40>)
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801abc4:	69fb      	ldr	r3, [r7, #28]
 801abc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abc8:	69bb      	ldr	r3, [r7, #24]
 801abca:	f383 8810 	msr	PRIMASK, r3
}
 801abce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801abd0:	bf00      	nop
}
 801abd2:	3720      	adds	r7, #32
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}
 801abd8:	20001a08 	.word	0x20001a08

0801abdc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801abdc:	b480      	push	{r7}
 801abde:	b087      	sub	sp, #28
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801abe6:	f3ef 8310 	mrs	r3, PRIMASK
 801abea:	60fb      	str	r3, [r7, #12]
  return(result);
 801abec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801abee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801abf0:	b672      	cpsid	i
}
 801abf2:	bf00      	nop

  TaskSet |= TaskId_bm;
 801abf4:	4b0d      	ldr	r3, [pc, #52]	@ (801ac2c <UTIL_SEQ_SetTask+0x50>)
 801abf6:	681a      	ldr	r2, [r3, #0]
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	4313      	orrs	r3, r2
 801abfc:	4a0b      	ldr	r2, [pc, #44]	@ (801ac2c <UTIL_SEQ_SetTask+0x50>)
 801abfe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ac00:	4a0b      	ldr	r2, [pc, #44]	@ (801ac30 <UTIL_SEQ_SetTask+0x54>)
 801ac02:	683b      	ldr	r3, [r7, #0]
 801ac04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	431a      	orrs	r2, r3
 801ac0c:	4908      	ldr	r1, [pc, #32]	@ (801ac30 <UTIL_SEQ_SetTask+0x54>)
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ac14:	697b      	ldr	r3, [r7, #20]
 801ac16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac18:	693b      	ldr	r3, [r7, #16]
 801ac1a:	f383 8810 	msr	PRIMASK, r3
}
 801ac1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ac20:	bf00      	nop
}
 801ac22:	371c      	adds	r7, #28
 801ac24:	46bd      	mov	sp, r7
 801ac26:	bc80      	pop	{r7}
 801ac28:	4770      	bx	lr
 801ac2a:	bf00      	nop
 801ac2c:	200019f8 	.word	0x200019f8
 801ac30:	20001a30 	.word	0x20001a30

0801ac34 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ac34:	b480      	push	{r7}
 801ac36:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ac38:	bf00      	nop
}
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bc80      	pop	{r7}
 801ac3e:	4770      	bx	lr

0801ac40 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ac40:	b480      	push	{r7}
 801ac42:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ac44:	bf00      	nop
}
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bc80      	pop	{r7}
 801ac4a:	4770      	bx	lr

0801ac4c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ac4c:	b480      	push	{r7}
 801ac4e:	b085      	sub	sp, #20
 801ac50:	af00      	add	r7, sp, #0
 801ac52:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ac54:	2300      	movs	r3, #0
 801ac56:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ac5c:	68bb      	ldr	r3, [r7, #8]
 801ac5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ac62:	d204      	bcs.n	801ac6e <SEQ_BitPosition+0x22>
 801ac64:	2310      	movs	r3, #16
 801ac66:	73fb      	strb	r3, [r7, #15]
 801ac68:	68bb      	ldr	r3, [r7, #8]
 801ac6a:	041b      	lsls	r3, r3, #16
 801ac6c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ac6e:	68bb      	ldr	r3, [r7, #8]
 801ac70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ac74:	d205      	bcs.n	801ac82 <SEQ_BitPosition+0x36>
 801ac76:	7bfb      	ldrb	r3, [r7, #15]
 801ac78:	3308      	adds	r3, #8
 801ac7a:	73fb      	strb	r3, [r7, #15]
 801ac7c:	68bb      	ldr	r3, [r7, #8]
 801ac7e:	021b      	lsls	r3, r3, #8
 801ac80:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ac82:	68bb      	ldr	r3, [r7, #8]
 801ac84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ac88:	d205      	bcs.n	801ac96 <SEQ_BitPosition+0x4a>
 801ac8a:	7bfb      	ldrb	r3, [r7, #15]
 801ac8c:	3304      	adds	r3, #4
 801ac8e:	73fb      	strb	r3, [r7, #15]
 801ac90:	68bb      	ldr	r3, [r7, #8]
 801ac92:	011b      	lsls	r3, r3, #4
 801ac94:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ac96:	68bb      	ldr	r3, [r7, #8]
 801ac98:	0f1b      	lsrs	r3, r3, #28
 801ac9a:	4a07      	ldr	r2, [pc, #28]	@ (801acb8 <SEQ_BitPosition+0x6c>)
 801ac9c:	5cd2      	ldrb	r2, [r2, r3]
 801ac9e:	7bfb      	ldrb	r3, [r7, #15]
 801aca0:	4413      	add	r3, r2
 801aca2:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801aca4:	7bfb      	ldrb	r3, [r7, #15]
 801aca6:	f1c3 031f 	rsb	r3, r3, #31
 801acaa:	b2db      	uxtb	r3, r3
}
 801acac:	4618      	mov	r0, r3
 801acae:	3714      	adds	r7, #20
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bc80      	pop	{r7}
 801acb4:	4770      	bx	lr
 801acb6:	bf00      	nop
 801acb8:	080220cc 	.word	0x080220cc

0801acbc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801acbc:	b082      	sub	sp, #8
 801acbe:	b480      	push	{r7}
 801acc0:	b087      	sub	sp, #28
 801acc2:	af00      	add	r7, sp, #0
 801acc4:	60f8      	str	r0, [r7, #12]
 801acc6:	1d38      	adds	r0, r7, #4
 801acc8:	e880 0006 	stmia.w	r0, {r1, r2}
 801accc:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801acce:	2300      	movs	r3, #0
 801acd0:	613b      	str	r3, [r7, #16]
 801acd2:	2300      	movs	r3, #0
 801acd4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801acd6:	687a      	ldr	r2, [r7, #4]
 801acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acda:	4413      	add	r3, r2
 801acdc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801acde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ace2:	b29a      	uxth	r2, r3
 801ace4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ace8:	b29b      	uxth	r3, r3
 801acea:	4413      	add	r3, r2
 801acec:	b29b      	uxth	r3, r3
 801acee:	b21b      	sxth	r3, r3
 801acf0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801acf2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801acf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801acfa:	db0a      	blt.n	801ad12 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801acfc:	693b      	ldr	r3, [r7, #16]
 801acfe:	3301      	adds	r3, #1
 801ad00:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ad02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ad06:	b29b      	uxth	r3, r3
 801ad08:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801ad0c:	b29b      	uxth	r3, r3
 801ad0e:	b21b      	sxth	r3, r3
 801ad10:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	461a      	mov	r2, r3
 801ad16:	f107 0310 	add.w	r3, r7, #16
 801ad1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ad1e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ad22:	68f8      	ldr	r0, [r7, #12]
 801ad24:	371c      	adds	r7, #28
 801ad26:	46bd      	mov	sp, r7
 801ad28:	bc80      	pop	{r7}
 801ad2a:	b002      	add	sp, #8
 801ad2c:	4770      	bx	lr

0801ad2e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801ad2e:	b082      	sub	sp, #8
 801ad30:	b480      	push	{r7}
 801ad32:	b087      	sub	sp, #28
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	60f8      	str	r0, [r7, #12]
 801ad38:	1d38      	adds	r0, r7, #4
 801ad3a:	e880 0006 	stmia.w	r0, {r1, r2}
 801ad3e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801ad40:	2300      	movs	r3, #0
 801ad42:	613b      	str	r3, [r7, #16]
 801ad44:	2300      	movs	r3, #0
 801ad46:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801ad48:	687a      	ldr	r2, [r7, #4]
 801ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad4c:	1ad3      	subs	r3, r2, r3
 801ad4e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ad50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ad54:	b29a      	uxth	r2, r3
 801ad56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	1ad3      	subs	r3, r2, r3
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	b21b      	sxth	r3, r3
 801ad62:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ad64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	da0a      	bge.n	801ad82 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ad6c:	693b      	ldr	r3, [r7, #16]
 801ad6e:	3b01      	subs	r3, #1
 801ad70:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ad72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ad76:	b29b      	uxth	r3, r3
 801ad78:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801ad7c:	b29b      	uxth	r3, r3
 801ad7e:	b21b      	sxth	r3, r3
 801ad80:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	461a      	mov	r2, r3
 801ad86:	f107 0310 	add.w	r3, r7, #16
 801ad8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ad8e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ad92:	68f8      	ldr	r0, [r7, #12]
 801ad94:	371c      	adds	r7, #28
 801ad96:	46bd      	mov	sp, r7
 801ad98:	bc80      	pop	{r7}
 801ad9a:	b002      	add	sp, #8
 801ad9c:	4770      	bx	lr
	...

0801ada0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b088      	sub	sp, #32
 801ada4:	af02      	add	r7, sp, #8
 801ada6:	463b      	mov	r3, r7
 801ada8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801adac:	2300      	movs	r3, #0
 801adae:	60bb      	str	r3, [r7, #8]
 801adb0:	2300      	movs	r3, #0
 801adb2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801adb4:	4b10      	ldr	r3, [pc, #64]	@ (801adf8 <SysTimeSet+0x58>)
 801adb6:	691b      	ldr	r3, [r3, #16]
 801adb8:	f107 0208 	add.w	r2, r7, #8
 801adbc:	3204      	adds	r2, #4
 801adbe:	4610      	mov	r0, r2
 801adc0:	4798      	blx	r3
 801adc2:	4603      	mov	r3, r0
 801adc4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801adc6:	f107 0010 	add.w	r0, r7, #16
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	9300      	str	r3, [sp, #0]
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	463a      	mov	r2, r7
 801add2:	ca06      	ldmia	r2, {r1, r2}
 801add4:	f7ff ffab 	bl	801ad2e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801add8:	4b07      	ldr	r3, [pc, #28]	@ (801adf8 <SysTimeSet+0x58>)
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	693a      	ldr	r2, [r7, #16]
 801adde:	4610      	mov	r0, r2
 801ade0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ade2:	4b05      	ldr	r3, [pc, #20]	@ (801adf8 <SysTimeSet+0x58>)
 801ade4:	689b      	ldr	r3, [r3, #8]
 801ade6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801adea:	4610      	mov	r0, r2
 801adec:	4798      	blx	r3
}
 801adee:	bf00      	nop
 801adf0:	3718      	adds	r7, #24
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}
 801adf6:	bf00      	nop
 801adf8:	08021a50 	.word	0x08021a50

0801adfc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b08a      	sub	sp, #40	@ 0x28
 801ae00:	af02      	add	r7, sp, #8
 801ae02:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ae04:	2300      	movs	r3, #0
 801ae06:	61bb      	str	r3, [r7, #24]
 801ae08:	2300      	movs	r3, #0
 801ae0a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	613b      	str	r3, [r7, #16]
 801ae10:	2300      	movs	r3, #0
 801ae12:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ae14:	4b14      	ldr	r3, [pc, #80]	@ (801ae68 <SysTimeGet+0x6c>)
 801ae16:	691b      	ldr	r3, [r3, #16]
 801ae18:	f107 0218 	add.w	r2, r7, #24
 801ae1c:	3204      	adds	r2, #4
 801ae1e:	4610      	mov	r0, r2
 801ae20:	4798      	blx	r3
 801ae22:	4603      	mov	r3, r0
 801ae24:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ae26:	4b10      	ldr	r3, [pc, #64]	@ (801ae68 <SysTimeGet+0x6c>)
 801ae28:	68db      	ldr	r3, [r3, #12]
 801ae2a:	4798      	blx	r3
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	b21b      	sxth	r3, r3
 801ae30:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ae32:	4b0d      	ldr	r3, [pc, #52]	@ (801ae68 <SysTimeGet+0x6c>)
 801ae34:	685b      	ldr	r3, [r3, #4]
 801ae36:	4798      	blx	r3
 801ae38:	4603      	mov	r3, r0
 801ae3a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ae3c:	f107 0010 	add.w	r0, r7, #16
 801ae40:	69fb      	ldr	r3, [r7, #28]
 801ae42:	9300      	str	r3, [sp, #0]
 801ae44:	69bb      	ldr	r3, [r7, #24]
 801ae46:	f107 0208 	add.w	r2, r7, #8
 801ae4a:	ca06      	ldmia	r2, {r1, r2}
 801ae4c:	f7ff ff36 	bl	801acbc <SysTimeAdd>

  return sysTime;
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	461a      	mov	r2, r3
 801ae54:	f107 0310 	add.w	r3, r7, #16
 801ae58:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ae5c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ae60:	6878      	ldr	r0, [r7, #4]
 801ae62:	3720      	adds	r7, #32
 801ae64:	46bd      	mov	sp, r7
 801ae66:	bd80      	pop	{r7, pc}
 801ae68:	08021a50 	.word	0x08021a50

0801ae6c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b084      	sub	sp, #16
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ae74:	2300      	movs	r3, #0
 801ae76:	60bb      	str	r3, [r7, #8]
 801ae78:	2300      	movs	r3, #0
 801ae7a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ae7c:	4b0a      	ldr	r3, [pc, #40]	@ (801aea8 <SysTimeGetMcuTime+0x3c>)
 801ae7e:	691b      	ldr	r3, [r3, #16]
 801ae80:	f107 0208 	add.w	r2, r7, #8
 801ae84:	3204      	adds	r2, #4
 801ae86:	4610      	mov	r0, r2
 801ae88:	4798      	blx	r3
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	461a      	mov	r2, r3
 801ae92:	f107 0308 	add.w	r3, r7, #8
 801ae96:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ae9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ae9e:	6878      	ldr	r0, [r7, #4]
 801aea0:	3710      	adds	r7, #16
 801aea2:	46bd      	mov	sp, r7
 801aea4:	bd80      	pop	{r7, pc}
 801aea6:	bf00      	nop
 801aea8:	08021a50 	.word	0x08021a50

0801aeac <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b088      	sub	sp, #32
 801aeb0:	af02      	add	r7, sp, #8
 801aeb2:	463b      	mov	r3, r7
 801aeb4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801aeb8:	4b0f      	ldr	r3, [pc, #60]	@ (801aef8 <SysTimeToMs+0x4c>)
 801aeba:	68db      	ldr	r3, [r3, #12]
 801aebc:	4798      	blx	r3
 801aebe:	4603      	mov	r3, r0
 801aec0:	b21b      	sxth	r3, r3
 801aec2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801aec4:	4b0c      	ldr	r3, [pc, #48]	@ (801aef8 <SysTimeToMs+0x4c>)
 801aec6:	685b      	ldr	r3, [r3, #4]
 801aec8:	4798      	blx	r3
 801aeca:	4603      	mov	r3, r0
 801aecc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801aece:	f107 0008 	add.w	r0, r7, #8
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	9300      	str	r3, [sp, #0]
 801aed6:	693b      	ldr	r3, [r7, #16]
 801aed8:	463a      	mov	r2, r7
 801aeda:	ca06      	ldmia	r2, {r1, r2}
 801aedc:	f7ff ff27 	bl	801ad2e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801aee6:	fb02 f303 	mul.w	r3, r2, r3
 801aeea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801aeee:	4413      	add	r3, r2
}
 801aef0:	4618      	mov	r0, r3
 801aef2:	3718      	adds	r7, #24
 801aef4:	46bd      	mov	sp, r7
 801aef6:	bd80      	pop	{r7, pc}
 801aef8:	08021a50 	.word	0x08021a50

0801aefc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b08a      	sub	sp, #40	@ 0x28
 801af00:	af02      	add	r7, sp, #8
 801af02:	6078      	str	r0, [r7, #4]
 801af04:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	4a19      	ldr	r2, [pc, #100]	@ (801af70 <SysTimeFromMs+0x74>)
 801af0a:	fba2 2303 	umull	r2, r3, r2, r3
 801af0e:	099b      	lsrs	r3, r3, #6
 801af10:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801af12:	69fb      	ldr	r3, [r7, #28]
 801af14:	617b      	str	r3, [r7, #20]
 801af16:	683b      	ldr	r3, [r7, #0]
 801af18:	b29a      	uxth	r2, r3
 801af1a:	69fb      	ldr	r3, [r7, #28]
 801af1c:	b29b      	uxth	r3, r3
 801af1e:	4619      	mov	r1, r3
 801af20:	0149      	lsls	r1, r1, #5
 801af22:	1ac9      	subs	r1, r1, r3
 801af24:	0089      	lsls	r1, r1, #2
 801af26:	440b      	add	r3, r1
 801af28:	00db      	lsls	r3, r3, #3
 801af2a:	b29b      	uxth	r3, r3
 801af2c:	1ad3      	subs	r3, r2, r3
 801af2e:	b29b      	uxth	r3, r3
 801af30:	b21b      	sxth	r3, r3
 801af32:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801af34:	f107 030c 	add.w	r3, r7, #12
 801af38:	2200      	movs	r2, #0
 801af3a:	601a      	str	r2, [r3, #0]
 801af3c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801af3e:	4b0d      	ldr	r3, [pc, #52]	@ (801af74 <SysTimeFromMs+0x78>)
 801af40:	68db      	ldr	r3, [r3, #12]
 801af42:	4798      	blx	r3
 801af44:	4603      	mov	r3, r0
 801af46:	b21b      	sxth	r3, r3
 801af48:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801af4a:	4b0a      	ldr	r3, [pc, #40]	@ (801af74 <SysTimeFromMs+0x78>)
 801af4c:	685b      	ldr	r3, [r3, #4]
 801af4e:	4798      	blx	r3
 801af50:	4603      	mov	r3, r0
 801af52:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	693b      	ldr	r3, [r7, #16]
 801af58:	9300      	str	r3, [sp, #0]
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	f107 0214 	add.w	r2, r7, #20
 801af60:	ca06      	ldmia	r2, {r1, r2}
 801af62:	f7ff feab 	bl	801acbc <SysTimeAdd>
}
 801af66:	6878      	ldr	r0, [r7, #4]
 801af68:	3720      	adds	r7, #32
 801af6a:	46bd      	mov	sp, r7
 801af6c:	bd80      	pop	{r7, pc}
 801af6e:	bf00      	nop
 801af70:	10624dd3 	.word	0x10624dd3
 801af74:	08021a50 	.word	0x08021a50

0801af78 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801af7c:	4b04      	ldr	r3, [pc, #16]	@ (801af90 <UTIL_TIMER_Init+0x18>)
 801af7e:	2200      	movs	r2, #0
 801af80:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801af82:	4b04      	ldr	r3, [pc, #16]	@ (801af94 <UTIL_TIMER_Init+0x1c>)
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	4798      	blx	r3
 801af88:	4603      	mov	r3, r0
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	bd80      	pop	{r7, pc}
 801af8e:	bf00      	nop
 801af90:	20001a38 	.word	0x20001a38
 801af94:	08021a24 	.word	0x08021a24

0801af98 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b084      	sub	sp, #16
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	60f8      	str	r0, [r7, #12]
 801afa0:	60b9      	str	r1, [r7, #8]
 801afa2:	603b      	str	r3, [r7, #0]
 801afa4:	4613      	mov	r3, r2
 801afa6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d023      	beq.n	801aff6 <UTIL_TIMER_Create+0x5e>
 801afae:	683b      	ldr	r3, [r7, #0]
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d020      	beq.n	801aff6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	2200      	movs	r2, #0
 801afb8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801afba:	4b11      	ldr	r3, [pc, #68]	@ (801b000 <UTIL_TIMER_Create+0x68>)
 801afbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afbe:	68b8      	ldr	r0, [r7, #8]
 801afc0:	4798      	blx	r3
 801afc2:	4602      	mov	r2, r0
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	2200      	movs	r2, #0
 801afcc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	2200      	movs	r2, #0
 801afd2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	2200      	movs	r2, #0
 801afd8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	683a      	ldr	r2, [r7, #0]
 801afde:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	69ba      	ldr	r2, [r7, #24]
 801afe4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	79fa      	ldrb	r2, [r7, #7]
 801afea:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	2200      	movs	r2, #0
 801aff0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801aff2:	2300      	movs	r3, #0
 801aff4:	e000      	b.n	801aff8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801aff6:	2301      	movs	r3, #1
  }
}
 801aff8:	4618      	mov	r0, r3
 801affa:	3710      	adds	r7, #16
 801affc:	46bd      	mov	sp, r7
 801affe:	bd80      	pop	{r7, pc}
 801b000:	08021a24 	.word	0x08021a24

0801b004 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b08a      	sub	sp, #40	@ 0x28
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b00c:	2300      	movs	r3, #0
 801b00e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d056      	beq.n	801b0c6 <UTIL_TIMER_Start+0xc2>
 801b018:	6878      	ldr	r0, [r7, #4]
 801b01a:	f000 f929 	bl	801b270 <TimerExists>
 801b01e:	4603      	mov	r3, r0
 801b020:	f083 0301 	eor.w	r3, r3, #1
 801b024:	b2db      	uxtb	r3, r3
 801b026:	2b00      	cmp	r3, #0
 801b028:	d04d      	beq.n	801b0c6 <UTIL_TIMER_Start+0xc2>
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	7a5b      	ldrb	r3, [r3, #9]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d149      	bne.n	801b0c6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b032:	f3ef 8310 	mrs	r3, PRIMASK
 801b036:	613b      	str	r3, [r7, #16]
  return(result);
 801b038:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b03a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b03c:	b672      	cpsid	i
}
 801b03e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b046:	4b24      	ldr	r3, [pc, #144]	@ (801b0d8 <UTIL_TIMER_Start+0xd4>)
 801b048:	6a1b      	ldr	r3, [r3, #32]
 801b04a:	4798      	blx	r3
 801b04c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b04e:	6a3a      	ldr	r2, [r7, #32]
 801b050:	69bb      	ldr	r3, [r7, #24]
 801b052:	429a      	cmp	r2, r3
 801b054:	d201      	bcs.n	801b05a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b056:	69bb      	ldr	r3, [r7, #24]
 801b058:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	6a3a      	ldr	r2, [r7, #32]
 801b05e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	2200      	movs	r2, #0
 801b064:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	2201      	movs	r2, #1
 801b06a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	2200      	movs	r2, #0
 801b070:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b072:	4b1a      	ldr	r3, [pc, #104]	@ (801b0dc <UTIL_TIMER_Start+0xd8>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d106      	bne.n	801b088 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b07a:	4b17      	ldr	r3, [pc, #92]	@ (801b0d8 <UTIL_TIMER_Start+0xd4>)
 801b07c:	691b      	ldr	r3, [r3, #16]
 801b07e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b080:	6878      	ldr	r0, [r7, #4]
 801b082:	f000 f96b 	bl	801b35c <TimerInsertNewHeadTimer>
 801b086:	e017      	b.n	801b0b8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b088:	4b13      	ldr	r3, [pc, #76]	@ (801b0d8 <UTIL_TIMER_Start+0xd4>)
 801b08a:	699b      	ldr	r3, [r3, #24]
 801b08c:	4798      	blx	r3
 801b08e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	681a      	ldr	r2, [r3, #0]
 801b094:	697b      	ldr	r3, [r7, #20]
 801b096:	441a      	add	r2, r3
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681a      	ldr	r2, [r3, #0]
 801b0a0:	4b0e      	ldr	r3, [pc, #56]	@ (801b0dc <UTIL_TIMER_Start+0xd8>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	429a      	cmp	r2, r3
 801b0a8:	d203      	bcs.n	801b0b2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b0aa:	6878      	ldr	r0, [r7, #4]
 801b0ac:	f000 f956 	bl	801b35c <TimerInsertNewHeadTimer>
 801b0b0:	e002      	b.n	801b0b8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b0b2:	6878      	ldr	r0, [r7, #4]
 801b0b4:	f000 f922 	bl	801b2fc <TimerInsertTimer>
 801b0b8:	69fb      	ldr	r3, [r7, #28]
 801b0ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	f383 8810 	msr	PRIMASK, r3
}
 801b0c2:	bf00      	nop
  {
 801b0c4:	e002      	b.n	801b0cc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b0c6:	2301      	movs	r3, #1
 801b0c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	3728      	adds	r7, #40	@ 0x28
 801b0d4:	46bd      	mov	sp, r7
 801b0d6:	bd80      	pop	{r7, pc}
 801b0d8:	08021a24 	.word	0x08021a24
 801b0dc:	20001a38 	.word	0x20001a38

0801b0e0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b088      	sub	sp, #32
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d05b      	beq.n	801b1aa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0f2:	f3ef 8310 	mrs	r3, PRIMASK
 801b0f6:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0f8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b0fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0fc:	b672      	cpsid	i
}
 801b0fe:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b100:	4b2d      	ldr	r3, [pc, #180]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b106:	4b2c      	ldr	r3, [pc, #176]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	2201      	movs	r2, #1
 801b110:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b112:	4b29      	ldr	r3, [pc, #164]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d041      	beq.n	801b19e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	2200      	movs	r2, #0
 801b11e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b120:	4b25      	ldr	r3, [pc, #148]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	687a      	ldr	r2, [r7, #4]
 801b126:	429a      	cmp	r2, r3
 801b128:	d134      	bne.n	801b194 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b12a:	4b23      	ldr	r3, [pc, #140]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	2200      	movs	r2, #0
 801b130:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b132:	4b21      	ldr	r3, [pc, #132]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	695b      	ldr	r3, [r3, #20]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d00a      	beq.n	801b152 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b13c:	4b1e      	ldr	r3, [pc, #120]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	695b      	ldr	r3, [r3, #20]
 801b142:	4a1d      	ldr	r2, [pc, #116]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b144:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b146:	4b1c      	ldr	r3, [pc, #112]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	4618      	mov	r0, r3
 801b14c:	f000 f8ac 	bl	801b2a8 <TimerSetTimeout>
 801b150:	e023      	b.n	801b19a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b152:	4b1a      	ldr	r3, [pc, #104]	@ (801b1bc <UTIL_TIMER_Stop+0xdc>)
 801b154:	68db      	ldr	r3, [r3, #12]
 801b156:	4798      	blx	r3
            TimerListHead = NULL;
 801b158:	4b17      	ldr	r3, [pc, #92]	@ (801b1b8 <UTIL_TIMER_Stop+0xd8>)
 801b15a:	2200      	movs	r2, #0
 801b15c:	601a      	str	r2, [r3, #0]
 801b15e:	e01c      	b.n	801b19a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b160:	697a      	ldr	r2, [r7, #20]
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	429a      	cmp	r2, r3
 801b166:	d110      	bne.n	801b18a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b168:	697b      	ldr	r3, [r7, #20]
 801b16a:	695b      	ldr	r3, [r3, #20]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d006      	beq.n	801b17e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b170:	697b      	ldr	r3, [r7, #20]
 801b172:	695b      	ldr	r3, [r3, #20]
 801b174:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b176:	69bb      	ldr	r3, [r7, #24]
 801b178:	697a      	ldr	r2, [r7, #20]
 801b17a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b17c:	e00d      	b.n	801b19a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b17e:	2300      	movs	r3, #0
 801b180:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	697a      	ldr	r2, [r7, #20]
 801b186:	615a      	str	r2, [r3, #20]
            break;
 801b188:	e007      	b.n	801b19a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b18a:	697b      	ldr	r3, [r7, #20]
 801b18c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b18e:	697b      	ldr	r3, [r7, #20]
 801b190:	695b      	ldr	r3, [r3, #20]
 801b192:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b194:	697b      	ldr	r3, [r7, #20]
 801b196:	2b00      	cmp	r3, #0
 801b198:	d1e2      	bne.n	801b160 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b19a:	2300      	movs	r3, #0
 801b19c:	77fb      	strb	r3, [r7, #31]
 801b19e:	693b      	ldr	r3, [r7, #16]
 801b1a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1a2:	68bb      	ldr	r3, [r7, #8]
 801b1a4:	f383 8810 	msr	PRIMASK, r3
}
 801b1a8:	e001      	b.n	801b1ae <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b1ae:	7ffb      	ldrb	r3, [r7, #31]
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3720      	adds	r7, #32
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	20001a38 	.word	0x20001a38
 801b1bc:	08021a24 	.word	0x08021a24

0801b1c0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b084      	sub	sp, #16
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
 801b1c8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d102      	bne.n	801b1da <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b1d4:	2301      	movs	r3, #1
 801b1d6:	73fb      	strb	r3, [r7, #15]
 801b1d8:	e014      	b.n	801b204 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b1da:	4b0d      	ldr	r3, [pc, #52]	@ (801b210 <UTIL_TIMER_SetPeriod+0x50>)
 801b1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b1de:	6838      	ldr	r0, [r7, #0]
 801b1e0:	4798      	blx	r3
 801b1e2:	4602      	mov	r2, r0
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b1e8:	6878      	ldr	r0, [r7, #4]
 801b1ea:	f000 f841 	bl	801b270 <TimerExists>
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d007      	beq.n	801b204 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b1f4:	6878      	ldr	r0, [r7, #4]
 801b1f6:	f7ff ff73 	bl	801b0e0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b1fa:	6878      	ldr	r0, [r7, #4]
 801b1fc:	f7ff ff02 	bl	801b004 <UTIL_TIMER_Start>
 801b200:	4603      	mov	r3, r0
 801b202:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b204:	7bfb      	ldrb	r3, [r7, #15]
}
 801b206:	4618      	mov	r0, r3
 801b208:	3710      	adds	r7, #16
 801b20a:	46bd      	mov	sp, r7
 801b20c:	bd80      	pop	{r7, pc}
 801b20e:	bf00      	nop
 801b210:	08021a24 	.word	0x08021a24

0801b214 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b214:	b580      	push	{r7, lr}
 801b216:	b082      	sub	sp, #8
 801b218:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b21a:	4b06      	ldr	r3, [pc, #24]	@ (801b234 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b21c:	69db      	ldr	r3, [r3, #28]
 801b21e:	4798      	blx	r3
 801b220:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b222:	4b04      	ldr	r3, [pc, #16]	@ (801b234 <UTIL_TIMER_GetCurrentTime+0x20>)
 801b224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b226:	6878      	ldr	r0, [r7, #4]
 801b228:	4798      	blx	r3
 801b22a:	4603      	mov	r3, r0
}
 801b22c:	4618      	mov	r0, r3
 801b22e:	3708      	adds	r7, #8
 801b230:	46bd      	mov	sp, r7
 801b232:	bd80      	pop	{r7, pc}
 801b234:	08021a24 	.word	0x08021a24

0801b238 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b084      	sub	sp, #16
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b240:	4b0a      	ldr	r3, [pc, #40]	@ (801b26c <UTIL_TIMER_GetElapsedTime+0x34>)
 801b242:	69db      	ldr	r3, [r3, #28]
 801b244:	4798      	blx	r3
 801b246:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b248:	4b08      	ldr	r3, [pc, #32]	@ (801b26c <UTIL_TIMER_GetElapsedTime+0x34>)
 801b24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b24c:	6878      	ldr	r0, [r7, #4]
 801b24e:	4798      	blx	r3
 801b250:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b252:	4b06      	ldr	r3, [pc, #24]	@ (801b26c <UTIL_TIMER_GetElapsedTime+0x34>)
 801b254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b256:	68f9      	ldr	r1, [r7, #12]
 801b258:	68ba      	ldr	r2, [r7, #8]
 801b25a:	1a8a      	subs	r2, r1, r2
 801b25c:	4610      	mov	r0, r2
 801b25e:	4798      	blx	r3
 801b260:	4603      	mov	r3, r0
}
 801b262:	4618      	mov	r0, r3
 801b264:	3710      	adds	r7, #16
 801b266:	46bd      	mov	sp, r7
 801b268:	bd80      	pop	{r7, pc}
 801b26a:	bf00      	nop
 801b26c:	08021a24 	.word	0x08021a24

0801b270 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b270:	b480      	push	{r7}
 801b272:	b085      	sub	sp, #20
 801b274:	af00      	add	r7, sp, #0
 801b276:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b278:	4b0a      	ldr	r3, [pc, #40]	@ (801b2a4 <TimerExists+0x34>)
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b27e:	e008      	b.n	801b292 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b280:	68fa      	ldr	r2, [r7, #12]
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	429a      	cmp	r2, r3
 801b286:	d101      	bne.n	801b28c <TimerExists+0x1c>
    {
      return true;
 801b288:	2301      	movs	r3, #1
 801b28a:	e006      	b.n	801b29a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	695b      	ldr	r3, [r3, #20]
 801b290:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d1f3      	bne.n	801b280 <TimerExists+0x10>
  }
  return false;
 801b298:	2300      	movs	r3, #0
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3714      	adds	r7, #20
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bc80      	pop	{r7}
 801b2a2:	4770      	bx	lr
 801b2a4:	20001a38 	.word	0x20001a38

0801b2a8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b2a8:	b590      	push	{r4, r7, lr}
 801b2aa:	b085      	sub	sp, #20
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b2b0:	4b11      	ldr	r3, [pc, #68]	@ (801b2f8 <TimerSetTimeout+0x50>)
 801b2b2:	6a1b      	ldr	r3, [r3, #32]
 801b2b4:	4798      	blx	r3
 801b2b6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2201      	movs	r2, #1
 801b2bc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681c      	ldr	r4, [r3, #0]
 801b2c2:	4b0d      	ldr	r3, [pc, #52]	@ (801b2f8 <TimerSetTimeout+0x50>)
 801b2c4:	699b      	ldr	r3, [r3, #24]
 801b2c6:	4798      	blx	r3
 801b2c8:	4602      	mov	r2, r0
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	4413      	add	r3, r2
 801b2ce:	429c      	cmp	r4, r3
 801b2d0:	d207      	bcs.n	801b2e2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b2d2:	4b09      	ldr	r3, [pc, #36]	@ (801b2f8 <TimerSetTimeout+0x50>)
 801b2d4:	699b      	ldr	r3, [r3, #24]
 801b2d6:	4798      	blx	r3
 801b2d8:	4602      	mov	r2, r0
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	441a      	add	r2, r3
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b2e2:	4b05      	ldr	r3, [pc, #20]	@ (801b2f8 <TimerSetTimeout+0x50>)
 801b2e4:	689b      	ldr	r3, [r3, #8]
 801b2e6:	687a      	ldr	r2, [r7, #4]
 801b2e8:	6812      	ldr	r2, [r2, #0]
 801b2ea:	4610      	mov	r0, r2
 801b2ec:	4798      	blx	r3
}
 801b2ee:	bf00      	nop
 801b2f0:	3714      	adds	r7, #20
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd90      	pop	{r4, r7, pc}
 801b2f6:	bf00      	nop
 801b2f8:	08021a24 	.word	0x08021a24

0801b2fc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b2fc:	b480      	push	{r7}
 801b2fe:	b085      	sub	sp, #20
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b304:	4b14      	ldr	r3, [pc, #80]	@ (801b358 <TimerInsertTimer+0x5c>)
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b30a:	4b13      	ldr	r3, [pc, #76]	@ (801b358 <TimerInsertTimer+0x5c>)
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	695b      	ldr	r3, [r3, #20]
 801b310:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b312:	e012      	b.n	801b33a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	681a      	ldr	r2, [r3, #0]
 801b318:	68bb      	ldr	r3, [r7, #8]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	429a      	cmp	r2, r3
 801b31e:	d905      	bls.n	801b32c <TimerInsertTimer+0x30>
    {
        cur = next;
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b324:	68bb      	ldr	r3, [r7, #8]
 801b326:	695b      	ldr	r3, [r3, #20]
 801b328:	60bb      	str	r3, [r7, #8]
 801b32a:	e006      	b.n	801b33a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	687a      	ldr	r2, [r7, #4]
 801b330:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	68ba      	ldr	r2, [r7, #8]
 801b336:	615a      	str	r2, [r3, #20]
        return;
 801b338:	e009      	b.n	801b34e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	695b      	ldr	r3, [r3, #20]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d1e8      	bne.n	801b314 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	687a      	ldr	r2, [r7, #4]
 801b346:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	2200      	movs	r2, #0
 801b34c:	615a      	str	r2, [r3, #20]
}
 801b34e:	3714      	adds	r7, #20
 801b350:	46bd      	mov	sp, r7
 801b352:	bc80      	pop	{r7}
 801b354:	4770      	bx	lr
 801b356:	bf00      	nop
 801b358:	20001a38 	.word	0x20001a38

0801b35c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b084      	sub	sp, #16
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b364:	4b0b      	ldr	r3, [pc, #44]	@ (801b394 <TimerInsertNewHeadTimer+0x38>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d002      	beq.n	801b376 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	2200      	movs	r2, #0
 801b374:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	68fa      	ldr	r2, [r7, #12]
 801b37a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b37c:	4a05      	ldr	r2, [pc, #20]	@ (801b394 <TimerInsertNewHeadTimer+0x38>)
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b382:	4b04      	ldr	r3, [pc, #16]	@ (801b394 <TimerInsertNewHeadTimer+0x38>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	4618      	mov	r0, r3
 801b388:	f7ff ff8e 	bl	801b2a8 <TimerSetTimeout>
}
 801b38c:	bf00      	nop
 801b38e:	3710      	adds	r7, #16
 801b390:	46bd      	mov	sp, r7
 801b392:	bd80      	pop	{r7, pc}
 801b394:	20001a38 	.word	0x20001a38

0801b398 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b398:	b480      	push	{r7}
 801b39a:	b085      	sub	sp, #20
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b3a4:	e00e      	b.n	801b3c4 <ee_skip_atoi+0x2c>
 801b3a6:	68fa      	ldr	r2, [r7, #12]
 801b3a8:	4613      	mov	r3, r2
 801b3aa:	009b      	lsls	r3, r3, #2
 801b3ac:	4413      	add	r3, r2
 801b3ae:	005b      	lsls	r3, r3, #1
 801b3b0:	4618      	mov	r0, r3
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	1c59      	adds	r1, r3, #1
 801b3b8:	687a      	ldr	r2, [r7, #4]
 801b3ba:	6011      	str	r1, [r2, #0]
 801b3bc:	781b      	ldrb	r3, [r3, #0]
 801b3be:	4403      	add	r3, r0
 801b3c0:	3b30      	subs	r3, #48	@ 0x30
 801b3c2:	60fb      	str	r3, [r7, #12]
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	781b      	ldrb	r3, [r3, #0]
 801b3ca:	2b2f      	cmp	r3, #47	@ 0x2f
 801b3cc:	d904      	bls.n	801b3d8 <ee_skip_atoi+0x40>
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	781b      	ldrb	r3, [r3, #0]
 801b3d4:	2b39      	cmp	r3, #57	@ 0x39
 801b3d6:	d9e6      	bls.n	801b3a6 <ee_skip_atoi+0xe>
  return i;
 801b3d8:	68fb      	ldr	r3, [r7, #12]
}
 801b3da:	4618      	mov	r0, r3
 801b3dc:	3714      	adds	r7, #20
 801b3de:	46bd      	mov	sp, r7
 801b3e0:	bc80      	pop	{r7}
 801b3e2:	4770      	bx	lr

0801b3e4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b3e4:	b480      	push	{r7}
 801b3e6:	b099      	sub	sp, #100	@ 0x64
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	60f8      	str	r0, [r7, #12]
 801b3ec:	60b9      	str	r1, [r7, #8]
 801b3ee:	607a      	str	r2, [r7, #4]
 801b3f0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b3f2:	4b71      	ldr	r3, [pc, #452]	@ (801b5b8 <ee_number+0x1d4>)
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b3f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d002      	beq.n	801b408 <ee_number+0x24>
 801b402:	4b6e      	ldr	r3, [pc, #440]	@ (801b5bc <ee_number+0x1d8>)
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b408:	683b      	ldr	r3, [r7, #0]
 801b40a:	2b01      	cmp	r3, #1
 801b40c:	dd02      	ble.n	801b414 <ee_number+0x30>
 801b40e:	683b      	ldr	r3, [r7, #0]
 801b410:	2b24      	cmp	r3, #36	@ 0x24
 801b412:	dd01      	ble.n	801b418 <ee_number+0x34>
 801b414:	2300      	movs	r3, #0
 801b416:	e0ca      	b.n	801b5ae <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b41a:	f003 0301 	and.w	r3, r3, #1
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d001      	beq.n	801b426 <ee_number+0x42>
 801b422:	2330      	movs	r3, #48	@ 0x30
 801b424:	e000      	b.n	801b428 <ee_number+0x44>
 801b426:	2320      	movs	r3, #32
 801b428:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b42c:	2300      	movs	r3, #0
 801b42e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b434:	f003 0302 	and.w	r3, r3, #2
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d00b      	beq.n	801b454 <ee_number+0x70>
  {
    if (num < 0)
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	da08      	bge.n	801b454 <ee_number+0x70>
    {
      sign = '-';
 801b442:	232d      	movs	r3, #45	@ 0x2d
 801b444:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	425b      	negs	r3, r3
 801b44c:	607b      	str	r3, [r7, #4]
      size--;
 801b44e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b450:	3b01      	subs	r3, #1
 801b452:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b454:	2300      	movs	r3, #0
 801b456:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d11e      	bne.n	801b49c <ee_number+0xb8>
    tmp[i++] = '0';
 801b45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b460:	1c5a      	adds	r2, r3, #1
 801b462:	657a      	str	r2, [r7, #84]	@ 0x54
 801b464:	3360      	adds	r3, #96	@ 0x60
 801b466:	443b      	add	r3, r7
 801b468:	2230      	movs	r2, #48	@ 0x30
 801b46a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b46e:	e018      	b.n	801b4a2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	683a      	ldr	r2, [r7, #0]
 801b474:	fbb3 f1f2 	udiv	r1, r3, r2
 801b478:	fb01 f202 	mul.w	r2, r1, r2
 801b47c:	1a9b      	subs	r3, r3, r2
 801b47e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b480:	441a      	add	r2, r3
 801b482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b484:	1c59      	adds	r1, r3, #1
 801b486:	6579      	str	r1, [r7, #84]	@ 0x54
 801b488:	7812      	ldrb	r2, [r2, #0]
 801b48a:	3360      	adds	r3, #96	@ 0x60
 801b48c:	443b      	add	r3, r7
 801b48e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b492:	687a      	ldr	r2, [r7, #4]
 801b494:	683b      	ldr	r3, [r7, #0]
 801b496:	fbb2 f3f3 	udiv	r3, r2, r3
 801b49a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d1e6      	bne.n	801b470 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b4a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b4a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	dd01      	ble.n	801b4ae <ee_number+0xca>
 801b4aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b4ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b4ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b4b2:	1ad3      	subs	r3, r2, r3
 801b4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b4b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b4b8:	f003 0301 	and.w	r3, r3, #1
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d112      	bne.n	801b4e6 <ee_number+0x102>
 801b4c0:	e00c      	b.n	801b4dc <ee_number+0xf8>
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	1c5a      	adds	r2, r3, #1
 801b4c6:	60fa      	str	r2, [r7, #12]
 801b4c8:	2220      	movs	r2, #32
 801b4ca:	701a      	strb	r2, [r3, #0]
 801b4cc:	68bb      	ldr	r3, [r7, #8]
 801b4ce:	3b01      	subs	r3, #1
 801b4d0:	60bb      	str	r3, [r7, #8]
 801b4d2:	68bb      	ldr	r3, [r7, #8]
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d101      	bne.n	801b4dc <ee_number+0xf8>
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	e068      	b.n	801b5ae <ee_number+0x1ca>
 801b4dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b4de:	1e5a      	subs	r2, r3, #1
 801b4e0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	dced      	bgt.n	801b4c2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d01b      	beq.n	801b526 <ee_number+0x142>
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	1c5a      	adds	r2, r3, #1
 801b4f2:	60fa      	str	r2, [r7, #12]
 801b4f4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b4f8:	701a      	strb	r2, [r3, #0]
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	3b01      	subs	r3, #1
 801b4fe:	60bb      	str	r3, [r7, #8]
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	2b00      	cmp	r3, #0
 801b504:	d10f      	bne.n	801b526 <ee_number+0x142>
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	e051      	b.n	801b5ae <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	1c5a      	adds	r2, r3, #1
 801b50e:	60fa      	str	r2, [r7, #12]
 801b510:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b514:	701a      	strb	r2, [r3, #0]
 801b516:	68bb      	ldr	r3, [r7, #8]
 801b518:	3b01      	subs	r3, #1
 801b51a:	60bb      	str	r3, [r7, #8]
 801b51c:	68bb      	ldr	r3, [r7, #8]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d101      	bne.n	801b526 <ee_number+0x142>
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	e043      	b.n	801b5ae <ee_number+0x1ca>
 801b526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b528:	1e5a      	subs	r2, r3, #1
 801b52a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	dcec      	bgt.n	801b50a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b530:	e00c      	b.n	801b54c <ee_number+0x168>
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	1c5a      	adds	r2, r3, #1
 801b536:	60fa      	str	r2, [r7, #12]
 801b538:	2230      	movs	r2, #48	@ 0x30
 801b53a:	701a      	strb	r2, [r3, #0]
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	3b01      	subs	r3, #1
 801b540:	60bb      	str	r3, [r7, #8]
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d101      	bne.n	801b54c <ee_number+0x168>
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	e030      	b.n	801b5ae <ee_number+0x1ca>
 801b54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b54e:	1e5a      	subs	r2, r3, #1
 801b550:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b552:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b554:	429a      	cmp	r2, r3
 801b556:	dbec      	blt.n	801b532 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b558:	e010      	b.n	801b57c <ee_number+0x198>
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	1c5a      	adds	r2, r3, #1
 801b55e:	60fa      	str	r2, [r7, #12]
 801b560:	f107 0110 	add.w	r1, r7, #16
 801b564:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b566:	440a      	add	r2, r1
 801b568:	7812      	ldrb	r2, [r2, #0]
 801b56a:	701a      	strb	r2, [r3, #0]
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	3b01      	subs	r3, #1
 801b570:	60bb      	str	r3, [r7, #8]
 801b572:	68bb      	ldr	r3, [r7, #8]
 801b574:	2b00      	cmp	r3, #0
 801b576:	d101      	bne.n	801b57c <ee_number+0x198>
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	e018      	b.n	801b5ae <ee_number+0x1ca>
 801b57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b57e:	1e5a      	subs	r2, r3, #1
 801b580:	657a      	str	r2, [r7, #84]	@ 0x54
 801b582:	2b00      	cmp	r3, #0
 801b584:	dce9      	bgt.n	801b55a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b586:	e00c      	b.n	801b5a2 <ee_number+0x1be>
 801b588:	68fb      	ldr	r3, [r7, #12]
 801b58a:	1c5a      	adds	r2, r3, #1
 801b58c:	60fa      	str	r2, [r7, #12]
 801b58e:	2220      	movs	r2, #32
 801b590:	701a      	strb	r2, [r3, #0]
 801b592:	68bb      	ldr	r3, [r7, #8]
 801b594:	3b01      	subs	r3, #1
 801b596:	60bb      	str	r3, [r7, #8]
 801b598:	68bb      	ldr	r3, [r7, #8]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d101      	bne.n	801b5a2 <ee_number+0x1be>
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	e005      	b.n	801b5ae <ee_number+0x1ca>
 801b5a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b5a4:	1e5a      	subs	r2, r3, #1
 801b5a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	dced      	bgt.n	801b588 <ee_number+0x1a4>

  return str;
 801b5ac:	68fb      	ldr	r3, [r7, #12]
}
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	3764      	adds	r7, #100	@ 0x64
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	bc80      	pop	{r7}
 801b5b6:	4770      	bx	lr
 801b5b8:	200000e4 	.word	0x200000e4
 801b5bc:	200000e8 	.word	0x200000e8

0801b5c0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b092      	sub	sp, #72	@ 0x48
 801b5c4:	af04      	add	r7, sp, #16
 801b5c6:	60f8      	str	r0, [r7, #12]
 801b5c8:	60b9      	str	r1, [r7, #8]
 801b5ca:	607a      	str	r2, [r7, #4]
 801b5cc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b5ce:	68bb      	ldr	r3, [r7, #8]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	dc01      	bgt.n	801b5d8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	e13e      	b.n	801b856 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b5dc:	e128      	b.n	801b830 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b5de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	1ad2      	subs	r2, r2, r3
 801b5e4:	68bb      	ldr	r3, [r7, #8]
 801b5e6:	3b01      	subs	r3, #1
 801b5e8:	429a      	cmp	r2, r3
 801b5ea:	f280 812e 	bge.w	801b84a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	781b      	ldrb	r3, [r3, #0]
 801b5f2:	2b25      	cmp	r3, #37	@ 0x25
 801b5f4:	d006      	beq.n	801b604 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b5f6:	687a      	ldr	r2, [r7, #4]
 801b5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5fa:	1c59      	adds	r1, r3, #1
 801b5fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b5fe:	7812      	ldrb	r2, [r2, #0]
 801b600:	701a      	strb	r2, [r3, #0]
      continue;
 801b602:	e112      	b.n	801b82a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801b604:	2300      	movs	r3, #0
 801b606:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	3301      	adds	r3, #1
 801b60c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	781b      	ldrb	r3, [r3, #0]
 801b612:	2b30      	cmp	r3, #48	@ 0x30
 801b614:	d103      	bne.n	801b61e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b616:	6a3b      	ldr	r3, [r7, #32]
 801b618:	f043 0301 	orr.w	r3, r3, #1
 801b61c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b61e:	f04f 33ff 	mov.w	r3, #4294967295
 801b622:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	781b      	ldrb	r3, [r3, #0]
 801b628:	2b2f      	cmp	r3, #47	@ 0x2f
 801b62a:	d908      	bls.n	801b63e <tiny_vsnprintf_like+0x7e>
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	781b      	ldrb	r3, [r3, #0]
 801b630:	2b39      	cmp	r3, #57	@ 0x39
 801b632:	d804      	bhi.n	801b63e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b634:	1d3b      	adds	r3, r7, #4
 801b636:	4618      	mov	r0, r3
 801b638:	f7ff feae 	bl	801b398 <ee_skip_atoi>
 801b63c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b63e:	f04f 33ff 	mov.w	r3, #4294967295
 801b642:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b644:	f04f 33ff 	mov.w	r3, #4294967295
 801b648:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b64a:	230a      	movs	r3, #10
 801b64c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	781b      	ldrb	r3, [r3, #0]
 801b652:	3b58      	subs	r3, #88	@ 0x58
 801b654:	2b20      	cmp	r3, #32
 801b656:	f200 8094 	bhi.w	801b782 <tiny_vsnprintf_like+0x1c2>
 801b65a:	a201      	add	r2, pc, #4	@ (adr r2, 801b660 <tiny_vsnprintf_like+0xa0>)
 801b65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b660:	0801b76b 	.word	0x0801b76b
 801b664:	0801b783 	.word	0x0801b783
 801b668:	0801b783 	.word	0x0801b783
 801b66c:	0801b783 	.word	0x0801b783
 801b670:	0801b783 	.word	0x0801b783
 801b674:	0801b783 	.word	0x0801b783
 801b678:	0801b783 	.word	0x0801b783
 801b67c:	0801b783 	.word	0x0801b783
 801b680:	0801b783 	.word	0x0801b783
 801b684:	0801b783 	.word	0x0801b783
 801b688:	0801b783 	.word	0x0801b783
 801b68c:	0801b6ef 	.word	0x0801b6ef
 801b690:	0801b779 	.word	0x0801b779
 801b694:	0801b783 	.word	0x0801b783
 801b698:	0801b783 	.word	0x0801b783
 801b69c:	0801b783 	.word	0x0801b783
 801b6a0:	0801b783 	.word	0x0801b783
 801b6a4:	0801b779 	.word	0x0801b779
 801b6a8:	0801b783 	.word	0x0801b783
 801b6ac:	0801b783 	.word	0x0801b783
 801b6b0:	0801b783 	.word	0x0801b783
 801b6b4:	0801b783 	.word	0x0801b783
 801b6b8:	0801b783 	.word	0x0801b783
 801b6bc:	0801b783 	.word	0x0801b783
 801b6c0:	0801b783 	.word	0x0801b783
 801b6c4:	0801b783 	.word	0x0801b783
 801b6c8:	0801b783 	.word	0x0801b783
 801b6cc:	0801b70f 	.word	0x0801b70f
 801b6d0:	0801b783 	.word	0x0801b783
 801b6d4:	0801b7cf 	.word	0x0801b7cf
 801b6d8:	0801b783 	.word	0x0801b783
 801b6dc:	0801b783 	.word	0x0801b783
 801b6e0:	0801b773 	.word	0x0801b773
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6e6:	1c5a      	adds	r2, r3, #1
 801b6e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b6ea:	2220      	movs	r2, #32
 801b6ec:	701a      	strb	r2, [r3, #0]
 801b6ee:	69fb      	ldr	r3, [r7, #28]
 801b6f0:	3b01      	subs	r3, #1
 801b6f2:	61fb      	str	r3, [r7, #28]
 801b6f4:	69fb      	ldr	r3, [r7, #28]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	dcf4      	bgt.n	801b6e4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b6fa:	683b      	ldr	r3, [r7, #0]
 801b6fc:	1d1a      	adds	r2, r3, #4
 801b6fe:	603a      	str	r2, [r7, #0]
 801b700:	6819      	ldr	r1, [r3, #0]
 801b702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b704:	1c5a      	adds	r2, r3, #1
 801b706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b708:	b2ca      	uxtb	r2, r1
 801b70a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b70c:	e08d      	b.n	801b82a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b70e:	683b      	ldr	r3, [r7, #0]
 801b710:	1d1a      	adds	r2, r3, #4
 801b712:	603a      	str	r2, [r7, #0]
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d101      	bne.n	801b722 <tiny_vsnprintf_like+0x162>
 801b71e:	4b50      	ldr	r3, [pc, #320]	@ (801b860 <tiny_vsnprintf_like+0x2a0>)
 801b720:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b724:	f7e4 fd2c 	bl	8000180 <strlen>
 801b728:	4603      	mov	r3, r0
 801b72a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b72c:	e004      	b.n	801b738 <tiny_vsnprintf_like+0x178>
 801b72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b730:	1c5a      	adds	r2, r3, #1
 801b732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b734:	2220      	movs	r2, #32
 801b736:	701a      	strb	r2, [r3, #0]
 801b738:	69fb      	ldr	r3, [r7, #28]
 801b73a:	1e5a      	subs	r2, r3, #1
 801b73c:	61fa      	str	r2, [r7, #28]
 801b73e:	693a      	ldr	r2, [r7, #16]
 801b740:	429a      	cmp	r2, r3
 801b742:	dbf4      	blt.n	801b72e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b744:	2300      	movs	r3, #0
 801b746:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b748:	e00a      	b.n	801b760 <tiny_vsnprintf_like+0x1a0>
 801b74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b74c:	1c53      	adds	r3, r2, #1
 801b74e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b752:	1c59      	adds	r1, r3, #1
 801b754:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b756:	7812      	ldrb	r2, [r2, #0]
 801b758:	701a      	strb	r2, [r3, #0]
 801b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b75c:	3301      	adds	r3, #1
 801b75e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b762:	693b      	ldr	r3, [r7, #16]
 801b764:	429a      	cmp	r2, r3
 801b766:	dbf0      	blt.n	801b74a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b768:	e05f      	b.n	801b82a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b76a:	6a3b      	ldr	r3, [r7, #32]
 801b76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b770:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b772:	2310      	movs	r3, #16
 801b774:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b776:	e02b      	b.n	801b7d0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b778:	6a3b      	ldr	r3, [r7, #32]
 801b77a:	f043 0302 	orr.w	r3, r3, #2
 801b77e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b780:	e025      	b.n	801b7ce <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	781b      	ldrb	r3, [r3, #0]
 801b786:	2b25      	cmp	r3, #37	@ 0x25
 801b788:	d004      	beq.n	801b794 <tiny_vsnprintf_like+0x1d4>
 801b78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b78c:	1c5a      	adds	r2, r3, #1
 801b78e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b790:	2225      	movs	r2, #37	@ 0x25
 801b792:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	1ad2      	subs	r2, r2, r3
 801b79a:	68bb      	ldr	r3, [r7, #8]
 801b79c:	3b01      	subs	r3, #1
 801b79e:	429a      	cmp	r2, r3
 801b7a0:	da16      	bge.n	801b7d0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d006      	beq.n	801b7b8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b7aa:	687a      	ldr	r2, [r7, #4]
 801b7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7ae:	1c59      	adds	r1, r3, #1
 801b7b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b7b2:	7812      	ldrb	r2, [r2, #0]
 801b7b4:	701a      	strb	r2, [r3, #0]
 801b7b6:	e002      	b.n	801b7be <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	3b01      	subs	r3, #1
 801b7bc:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	1ad2      	subs	r2, r2, r3
 801b7c4:	68bb      	ldr	r3, [r7, #8]
 801b7c6:	3b01      	subs	r3, #1
 801b7c8:	429a      	cmp	r2, r3
 801b7ca:	db2d      	blt.n	801b828 <tiny_vsnprintf_like+0x268>
 801b7cc:	e000      	b.n	801b7d0 <tiny_vsnprintf_like+0x210>
        break;
 801b7ce:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b7d0:	697b      	ldr	r3, [r7, #20]
 801b7d2:	2b6c      	cmp	r3, #108	@ 0x6c
 801b7d4:	d105      	bne.n	801b7e2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b7d6:	683b      	ldr	r3, [r7, #0]
 801b7d8:	1d1a      	adds	r2, r3, #4
 801b7da:	603a      	str	r2, [r7, #0]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	637b      	str	r3, [r7, #52]	@ 0x34
 801b7e0:	e00f      	b.n	801b802 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b7e2:	6a3b      	ldr	r3, [r7, #32]
 801b7e4:	f003 0302 	and.w	r3, r3, #2
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d005      	beq.n	801b7f8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b7ec:	683b      	ldr	r3, [r7, #0]
 801b7ee:	1d1a      	adds	r2, r3, #4
 801b7f0:	603a      	str	r2, [r7, #0]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b7f6:	e004      	b.n	801b802 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b7f8:	683b      	ldr	r3, [r7, #0]
 801b7fa:	1d1a      	adds	r2, r3, #4
 801b7fc:	603a      	str	r2, [r7, #0]
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	1e5a      	subs	r2, r3, #1
 801b806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	1acb      	subs	r3, r1, r3
 801b80c:	1ad1      	subs	r1, r2, r3
 801b80e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b810:	6a3b      	ldr	r3, [r7, #32]
 801b812:	9302      	str	r3, [sp, #8]
 801b814:	69bb      	ldr	r3, [r7, #24]
 801b816:	9301      	str	r3, [sp, #4]
 801b818:	69fb      	ldr	r3, [r7, #28]
 801b81a:	9300      	str	r3, [sp, #0]
 801b81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b81e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b820:	f7ff fde0 	bl	801b3e4 <ee_number>
 801b824:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b826:	e000      	b.n	801b82a <tiny_vsnprintf_like+0x26a>
        continue;
 801b828:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	3301      	adds	r3, #1
 801b82e:	607b      	str	r3, [r7, #4]
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	781b      	ldrb	r3, [r3, #0]
 801b834:	2b00      	cmp	r3, #0
 801b836:	f47f aed2 	bne.w	801b5de <tiny_vsnprintf_like+0x1e>
 801b83a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	1ad2      	subs	r2, r2, r3
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	3b01      	subs	r3, #1
 801b844:	429a      	cmp	r2, r3
 801b846:	f6bf aeca 	bge.w	801b5de <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b84c:	2200      	movs	r2, #0
 801b84e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	1ad3      	subs	r3, r2, r3
}
 801b856:	4618      	mov	r0, r3
 801b858:	3738      	adds	r7, #56	@ 0x38
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bd80      	pop	{r7, pc}
 801b85e:	bf00      	nop
 801b860:	080218f0 	.word	0x080218f0

0801b864 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b082      	sub	sp, #8
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
 801b86c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 801b86e:	683b      	ldr	r3, [r7, #0]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d009      	beq.n	801b888 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 801b874:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801b876:	461a      	mov	r2, r3
        err.type, err.code);
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801b87e:	6839      	ldr	r1, [r7, #0]
 801b880:	4807      	ldr	r0, [pc, #28]	@ (801b8a0 <ai_log_err+0x3c>)
 801b882:	f004 fe3f 	bl	8020504 <iprintf>
 801b886:	e009      	b.n	801b89c <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801b888:	793b      	ldrb	r3, [r7, #4]
 801b88a:	4619      	mov	r1, r3
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801b892:	461a      	mov	r2, r3
 801b894:	4803      	ldr	r0, [pc, #12]	@ (801b8a4 <ai_log_err+0x40>)
 801b896:	f004 fe35 	bl	8020504 <iprintf>

  do {} while (1);
 801b89a:	bf00      	nop
 801b89c:	bf00      	nop
 801b89e:	e7fd      	b.n	801b89c <ai_log_err+0x38>
 801b8a0:	080218f8 	.word	0x080218f8
 801b8a4:	0802192c 	.word	0x0802192c

0801b8a8 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b086      	sub	sp, #24
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_appltemp_0506_create_and_init(&network_appltemp_0506, act_addr, NULL);
 801b8b0:	2200      	movs	r2, #0
 801b8b2:	6879      	ldr	r1, [r7, #4]
 801b8b4:	4828      	ldr	r0, [pc, #160]	@ (801b958 <ai_boostrap+0xb0>)
 801b8b6:	f000 f9e3 	bl	801bc80 <ai_network_appltemp_0506_create_and_init>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 801b8be:	7b3b      	ldrb	r3, [r7, #12]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d006      	beq.n	801b8d2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_appltemp_0506_create_and_init");
 801b8c4:	4925      	ldr	r1, [pc, #148]	@ (801b95c <ai_boostrap+0xb4>)
 801b8c6:	68f8      	ldr	r0, [r7, #12]
 801b8c8:	f7ff ffcc 	bl	801b864 <ai_log_err>
    return -1;
 801b8cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b8d0:	e03e      	b.n	801b950 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_appltemp_0506_inputs_get(network_appltemp_0506, NULL);
 801b8d2:	4b21      	ldr	r3, [pc, #132]	@ (801b958 <ai_boostrap+0xb0>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	2100      	movs	r1, #0
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f000 fa4f 	bl	801bd7c <ai_network_appltemp_0506_inputs_get>
 801b8de:	4603      	mov	r3, r0
 801b8e0:	4a1f      	ldr	r2, [pc, #124]	@ (801b960 <ai_boostrap+0xb8>)
 801b8e2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_appltemp_0506_outputs_get(network_appltemp_0506, NULL);
 801b8e4:	4b1c      	ldr	r3, [pc, #112]	@ (801b958 <ai_boostrap+0xb0>)
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	2100      	movs	r1, #0
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f000 fa60 	bl	801bdb0 <ai_network_appltemp_0506_outputs_get>
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	4a1c      	ldr	r2, [pc, #112]	@ (801b964 <ai_boostrap+0xbc>)
 801b8f4:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_APPLTEMP_0506_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	617b      	str	r3, [r7, #20]
 801b8fa:	e00f      	b.n	801b91c <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 801b8fc:	4b18      	ldr	r3, [pc, #96]	@ (801b960 <ai_boostrap+0xb8>)
 801b8fe:	6819      	ldr	r1, [r3, #0]
 801b900:	697a      	ldr	r2, [r7, #20]
 801b902:	4613      	mov	r3, r2
 801b904:	00db      	lsls	r3, r3, #3
 801b906:	1a9b      	subs	r3, r3, r2
 801b908:	009b      	lsls	r3, r3, #2
 801b90a:	440b      	add	r3, r1
 801b90c:	685a      	ldr	r2, [r3, #4]
 801b90e:	4916      	ldr	r1, [pc, #88]	@ (801b968 <ai_boostrap+0xc0>)
 801b910:	697b      	ldr	r3, [r7, #20]
 801b912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801b916:	697b      	ldr	r3, [r7, #20]
 801b918:	3301      	adds	r3, #1
 801b91a:	617b      	str	r3, [r7, #20]
 801b91c:	697b      	ldr	r3, [r7, #20]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	ddec      	ble.n	801b8fc <ai_boostrap+0x54>

#if defined(AI_NETWORK_APPLTEMP_0506_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801b922:	2300      	movs	r3, #0
 801b924:	613b      	str	r3, [r7, #16]
 801b926:	e00f      	b.n	801b948 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 801b928:	4b0e      	ldr	r3, [pc, #56]	@ (801b964 <ai_boostrap+0xbc>)
 801b92a:	6819      	ldr	r1, [r3, #0]
 801b92c:	693a      	ldr	r2, [r7, #16]
 801b92e:	4613      	mov	r3, r2
 801b930:	00db      	lsls	r3, r3, #3
 801b932:	1a9b      	subs	r3, r3, r2
 801b934:	009b      	lsls	r3, r3, #2
 801b936:	440b      	add	r3, r1
 801b938:	685a      	ldr	r2, [r3, #4]
 801b93a:	490c      	ldr	r1, [pc, #48]	@ (801b96c <ai_boostrap+0xc4>)
 801b93c:	693b      	ldr	r3, [r7, #16]
 801b93e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801b942:	693b      	ldr	r3, [r7, #16]
 801b944:	3301      	adds	r3, #1
 801b946:	613b      	str	r3, [r7, #16]
 801b948:	693b      	ldr	r3, [r7, #16]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	ddec      	ble.n	801b928 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801b94e:	2300      	movs	r3, #0
}
 801b950:	4618      	mov	r0, r3
 801b952:	3718      	adds	r7, #24
 801b954:	46bd      	mov	sp, r7
 801b956:	bd80      	pop	{r7, pc}
 801b958:	20001a54 	.word	0x20001a54
 801b95c:	0802195c 	.word	0x0802195c
 801b960:	20001a58 	.word	0x20001a58
 801b964:	20001a5c 	.word	0x20001a5c
 801b968:	20001a4c 	.word	0x20001a4c
 801b96c:	20001a50 	.word	0x20001a50

0801b970 <ai_run>:

static int ai_run(void)
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b082      	sub	sp, #8
 801b974:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_appltemp_0506_run(network_appltemp_0506, ai_input, ai_output);
 801b976:	4b0f      	ldr	r3, [pc, #60]	@ (801b9b4 <ai_run+0x44>)
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	4a0f      	ldr	r2, [pc, #60]	@ (801b9b8 <ai_run+0x48>)
 801b97c:	6811      	ldr	r1, [r2, #0]
 801b97e:	4a0f      	ldr	r2, [pc, #60]	@ (801b9bc <ai_run+0x4c>)
 801b980:	6812      	ldr	r2, [r2, #0]
 801b982:	4618      	mov	r0, r3
 801b984:	f000 fa6a 	bl	801be5c <ai_network_appltemp_0506_run>
 801b988:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	2b01      	cmp	r3, #1
 801b98e:	d00c      	beq.n	801b9aa <ai_run+0x3a>
    ai_log_err(ai_network_appltemp_0506_get_error(network_appltemp_0506),
 801b990:	4b08      	ldr	r3, [pc, #32]	@ (801b9b4 <ai_run+0x44>)
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	4618      	mov	r0, r3
 801b996:	f000 f951 	bl	801bc3c <ai_network_appltemp_0506_get_error>
 801b99a:	4603      	mov	r3, r0
 801b99c:	4908      	ldr	r1, [pc, #32]	@ (801b9c0 <ai_run+0x50>)
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f7ff ff60 	bl	801b864 <ai_log_err>
        "ai_network_appltemp_0506_run");
    return -1;
 801b9a4:	f04f 33ff 	mov.w	r3, #4294967295
 801b9a8:	e000      	b.n	801b9ac <ai_run+0x3c>
  }

  return 0;
 801b9aa:	2300      	movs	r3, #0
}
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	3708      	adds	r7, #8
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	bd80      	pop	{r7, pc}
 801b9b4:	20001a54 	.word	0x20001a54
 801b9b8:	20001a58 	.word	0x20001a58
 801b9bc:	20001a5c 	.word	0x20001a5c
 801b9c0:	08021988 	.word	0x08021988

0801b9c4 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 801b9c4:	b480      	push	{r7}
 801b9c6:	b083      	sub	sp, #12
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	data_sensors[0] = my_SoilSensor;					// Soil Moisture Sensor
 801b9cc:	4b0a      	ldr	r3, [pc, #40]	@ (801b9f8 <acquire_and_process_data+0x34>)
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	4a0a      	ldr	r2, [pc, #40]	@ (801b9fc <acquire_and_process_data+0x38>)
 801b9d2:	6013      	str	r3, [r2, #0]
	data_sensors[1] = my_SHT40_Temp_Float;				// Temp Sensor
 801b9d4:	4b0a      	ldr	r3, [pc, #40]	@ (801ba00 <acquire_and_process_data+0x3c>)
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	4a08      	ldr	r2, [pc, #32]	@ (801b9fc <acquire_and_process_data+0x38>)
 801b9da:	6053      	str	r3, [r2, #4]
	data_sensors[2] = my_SHT40_Humid_Float;				// Hum Sensor
 801b9dc:	4b09      	ldr	r3, [pc, #36]	@ (801ba04 <acquire_and_process_data+0x40>)
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	4a06      	ldr	r2, [pc, #24]	@ (801b9fc <acquire_and_process_data+0x38>)
 801b9e2:	6093      	str	r3, [r2, #8]
	ai_input[0].data = AI_HANDLE_PTR(data_sensors);
 801b9e4:	4b08      	ldr	r3, [pc, #32]	@ (801ba08 <acquire_and_process_data+0x44>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	4a04      	ldr	r2, [pc, #16]	@ (801b9fc <acquire_and_process_data+0x38>)
 801b9ea:	605a      	str	r2, [r3, #4]
  return 0;
 801b9ec:	2300      	movs	r3, #0
}
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	370c      	adds	r7, #12
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	bc80      	pop	{r7}
 801b9f6:	4770      	bx	lr
 801b9f8:	20001bec 	.word	0x20001bec
 801b9fc:	20001a3c 	.word	0x20001a3c
 801ba00:	20001bf0 	.word	0x20001bf0
 801ba04:	20001bf4 	.word	0x20001bf4
 801ba08:	20001a58 	.word	0x20001a58

0801ba0c <post_process>:

int post_process(ai_i8* data[])
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b084      	sub	sp, #16
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	float result = *((float*)data[0]);
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	60fb      	str	r3, [r7, #12]
		if (result > 0.5f)
 801ba1c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 801ba20:	68f8      	ldr	r0, [r7, #12]
 801ba22:	f7e5 f93b 	bl	8000c9c <__aeabi_fcmpgt>
 801ba26:	4603      	mov	r3, r0
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d003      	beq.n	801ba34 <post_process+0x28>
		{
			result_nn = 1;
 801ba2c:	4b05      	ldr	r3, [pc, #20]	@ (801ba44 <post_process+0x38>)
 801ba2e:	2201      	movs	r2, #1
 801ba30:	701a      	strb	r2, [r3, #0]
 801ba32:	e002      	b.n	801ba3a <post_process+0x2e>
		}
		else
		{
			result_nn = 0;
 801ba34:	4b03      	ldr	r3, [pc, #12]	@ (801ba44 <post_process+0x38>)
 801ba36:	2200      	movs	r2, #0
 801ba38:	701a      	strb	r2, [r3, #0]
		}
	  return 0;
 801ba3a:	2300      	movs	r3, #0
}
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	3710      	adds	r7, #16
 801ba40:	46bd      	mov	sp, r7
 801ba42:	bd80      	pop	{r7, pc}
 801ba44:	20001a48 	.word	0x20001a48

0801ba48 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 801ba4c:	4803      	ldr	r0, [pc, #12]	@ (801ba5c <MX_X_CUBE_AI_Init+0x14>)
 801ba4e:	f004 fdc1 	bl	80205d4 <puts>

  ai_boostrap(data_activations0);
 801ba52:	4803      	ldr	r0, [pc, #12]	@ (801ba60 <MX_X_CUBE_AI_Init+0x18>)
 801ba54:	f7ff ff28 	bl	801b8a8 <ai_boostrap>
    /* USER CODE END 5 */
}
 801ba58:	bf00      	nop
 801ba5a:	bd80      	pop	{r7, pc}
 801ba5c:	080219a8 	.word	0x080219a8
 801ba60:	200000ec 	.word	0x200000ec

0801ba64 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b082      	sub	sp, #8
 801ba68:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 801ba6a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba6e:	607b      	str	r3, [r7, #4]

  //printf("TEMPLATE - run - main loop\r\n");

  if (network_appltemp_0506) {
 801ba70:	4b13      	ldr	r3, [pc, #76]	@ (801bac0 <MX_X_CUBE_AI_Process+0x5c>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d010      	beq.n	801ba9a <MX_X_CUBE_AI_Process+0x36>
    //do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 801ba78:	4812      	ldr	r0, [pc, #72]	@ (801bac4 <MX_X_CUBE_AI_Process+0x60>)
 801ba7a:	f7ff ffa3 	bl	801b9c4 <acquire_and_process_data>
 801ba7e:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d102      	bne.n	801ba8c <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 801ba86:	f7ff ff73 	bl	801b970 <ai_run>
 801ba8a:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d103      	bne.n	801ba9a <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 801ba92:	480d      	ldr	r0, [pc, #52]	@ (801bac8 <MX_X_CUBE_AI_Process+0x64>)
 801ba94:	f7ff ffba 	bl	801ba0c <post_process>
 801ba98:	6078      	str	r0, [r7, #4]
    //} while (res==0);
  }

  if (res) {
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d00a      	beq.n	801bab6 <MX_X_CUBE_AI_Process+0x52>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 801baa0:	2311      	movs	r3, #17
 801baa2:	703b      	strb	r3, [r7, #0]
 801baa4:	683b      	ldr	r3, [r7, #0]
 801baa6:	2210      	movs	r2, #16
 801baa8:	f362 231f 	bfi	r3, r2, #8, #24
 801baac:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 801baae:	4907      	ldr	r1, [pc, #28]	@ (801bacc <MX_X_CUBE_AI_Process+0x68>)
 801bab0:	6838      	ldr	r0, [r7, #0]
 801bab2:	f7ff fed7 	bl	801b864 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 801bab6:	bf00      	nop
 801bab8:	3708      	adds	r7, #8
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}
 801babe:	bf00      	nop
 801bac0:	20001a54 	.word	0x20001a54
 801bac4:	20001a4c 	.word	0x20001a4c
 801bac8:	20001a50 	.word	0x20001a50
 801bacc:	080219c8 	.word	0x080219c8

0801bad0 <network_appltemp_0506_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b082      	sub	sp, #8
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
 801bad8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_appltemp_0506_activations_map, 1, params)) {
 801bada:	683a      	ldr	r2, [r7, #0]
 801badc:	2101      	movs	r1, #1
 801bade:	4820      	ldr	r0, [pc, #128]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bae0:	f002 fe72 	bl	801e7c8 <ai_platform_get_activations_map>
 801bae4:	4603      	mov	r3, r0
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d02f      	beq.n	801bb4a <network_appltemp_0506_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801baea:	4b1d      	ldr	r3, [pc, #116]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	4a1d      	ldr	r2, [pc, #116]	@ (801bb64 <network_appltemp_0506_configure_activations+0x94>)
 801baf0:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801baf2:	4b1b      	ldr	r3, [pc, #108]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	4a1b      	ldr	r2, [pc, #108]	@ (801bb64 <network_appltemp_0506_configure_activations+0x94>)
 801baf8:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bafa:	4b19      	ldr	r3, [pc, #100]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	330c      	adds	r3, #12
 801bb00:	4a19      	ldr	r2, [pc, #100]	@ (801bb68 <network_appltemp_0506_configure_activations+0x98>)
 801bb02:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bb04:	4b16      	ldr	r3, [pc, #88]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	330c      	adds	r3, #12
 801bb0a:	4a17      	ldr	r2, [pc, #92]	@ (801bb68 <network_appltemp_0506_configure_activations+0x98>)
 801bb0c:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bb0e:	4b14      	ldr	r3, [pc, #80]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	330c      	adds	r3, #12
 801bb14:	4a15      	ldr	r2, [pc, #84]	@ (801bb6c <network_appltemp_0506_configure_activations+0x9c>)
 801bb16:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801bb18:	4b11      	ldr	r3, [pc, #68]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	330c      	adds	r3, #12
 801bb1e:	4a13      	ldr	r2, [pc, #76]	@ (801bb6c <network_appltemp_0506_configure_activations+0x9c>)
 801bb20:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801bb22:	4b0f      	ldr	r3, [pc, #60]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	4a12      	ldr	r2, [pc, #72]	@ (801bb70 <network_appltemp_0506_configure_activations+0xa0>)
 801bb28:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801bb2a:	4b0d      	ldr	r3, [pc, #52]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	4a10      	ldr	r2, [pc, #64]	@ (801bb70 <network_appltemp_0506_configure_activations+0xa0>)
 801bb30:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801bb32:	4b0b      	ldr	r3, [pc, #44]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	3304      	adds	r3, #4
 801bb38:	4a0e      	ldr	r2, [pc, #56]	@ (801bb74 <network_appltemp_0506_configure_activations+0xa4>)
 801bb3a:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801bb3c:	4b08      	ldr	r3, [pc, #32]	@ (801bb60 <network_appltemp_0506_configure_activations+0x90>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	3304      	adds	r3, #4
 801bb42:	4a0c      	ldr	r2, [pc, #48]	@ (801bb74 <network_appltemp_0506_configure_activations+0xa4>)
 801bb44:	60d3      	str	r3, [r2, #12]
    return true;
 801bb46:	2301      	movs	r3, #1
 801bb48:	e005      	b.n	801bb56 <network_appltemp_0506_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801bb4a:	2213      	movs	r2, #19
 801bb4c:	2130      	movs	r1, #48	@ 0x30
 801bb4e:	6878      	ldr	r0, [r7, #4]
 801bb50:	f002 feba 	bl	801e8c8 <ai_platform_network_set_error>
  return false;
 801bb54:	2300      	movs	r3, #0
}
 801bb56:	4618      	mov	r0, r3
 801bb58:	3708      	adds	r7, #8
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	bd80      	pop	{r7, pc}
 801bb5e:	bf00      	nop
 801bb60:	20001a60 	.word	0x20001a60
 801bb64:	200000f0 	.word	0x200000f0
 801bb68:	20000100 	.word	0x20000100
 801bb6c:	20000110 	.word	0x20000110
 801bb70:	20000120 	.word	0x20000120
 801bb74:	20000130 	.word	0x20000130

0801bb78 <network_appltemp_0506_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b082      	sub	sp, #8
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	6078      	str	r0, [r7, #4]
 801bb80:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_appltemp_0506_weights_map, 1, params)) {
 801bb82:	683a      	ldr	r2, [r7, #0]
 801bb84:	2101      	movs	r1, #1
 801bb86:	4828      	ldr	r0, [pc, #160]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bb88:	f002 fdcc 	bl	801e724 <ai_platform_get_weights_map>
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d03f      	beq.n	801bc12 <network_appltemp_0506_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801bb92:	4b26      	ldr	r3, [pc, #152]	@ (801bc2c <network_appltemp_0506_configure_weights+0xb4>)
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bb9a:	4a24      	ldr	r2, [pc, #144]	@ (801bc2c <network_appltemp_0506_configure_weights+0xb4>)
 801bb9c:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801bb9e:	4b22      	ldr	r3, [pc, #136]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	4a22      	ldr	r2, [pc, #136]	@ (801bc2c <network_appltemp_0506_configure_weights+0xb4>)
 801bba4:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801bba6:	4b20      	ldr	r3, [pc, #128]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	4a20      	ldr	r2, [pc, #128]	@ (801bc2c <network_appltemp_0506_configure_weights+0xb4>)
 801bbac:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801bbae:	4b20      	ldr	r3, [pc, #128]	@ (801bc30 <network_appltemp_0506_configure_weights+0xb8>)
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bbb6:	4a1e      	ldr	r2, [pc, #120]	@ (801bc30 <network_appltemp_0506_configure_weights+0xb8>)
 801bbb8:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801bbba:	4b1b      	ldr	r3, [pc, #108]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	3360      	adds	r3, #96	@ 0x60
 801bbc0:	4a1b      	ldr	r2, [pc, #108]	@ (801bc30 <network_appltemp_0506_configure_weights+0xb8>)
 801bbc2:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801bbc4:	4b18      	ldr	r3, [pc, #96]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	3360      	adds	r3, #96	@ 0x60
 801bbca:	4a19      	ldr	r2, [pc, #100]	@ (801bc30 <network_appltemp_0506_configure_weights+0xb8>)
 801bbcc:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801bbce:	4b19      	ldr	r3, [pc, #100]	@ (801bc34 <network_appltemp_0506_configure_weights+0xbc>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bbd6:	4a17      	ldr	r2, [pc, #92]	@ (801bc34 <network_appltemp_0506_configure_weights+0xbc>)
 801bbd8:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801bbda:	4b13      	ldr	r3, [pc, #76]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	3380      	adds	r3, #128	@ 0x80
 801bbe0:	4a14      	ldr	r2, [pc, #80]	@ (801bc34 <network_appltemp_0506_configure_weights+0xbc>)
 801bbe2:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801bbe4:	4b10      	ldr	r3, [pc, #64]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	3380      	adds	r3, #128	@ 0x80
 801bbea:	4a12      	ldr	r2, [pc, #72]	@ (801bc34 <network_appltemp_0506_configure_weights+0xbc>)
 801bbec:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801bbee:	4b12      	ldr	r3, [pc, #72]	@ (801bc38 <network_appltemp_0506_configure_weights+0xc0>)
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bbf6:	4a10      	ldr	r2, [pc, #64]	@ (801bc38 <network_appltemp_0506_configure_weights+0xc0>)
 801bbf8:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801bbfa:	4b0b      	ldr	r3, [pc, #44]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	33a0      	adds	r3, #160	@ 0xa0
 801bc00:	4a0d      	ldr	r2, [pc, #52]	@ (801bc38 <network_appltemp_0506_configure_weights+0xc0>)
 801bc02:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801bc04:	4b08      	ldr	r3, [pc, #32]	@ (801bc28 <network_appltemp_0506_configure_weights+0xb0>)
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	33a0      	adds	r3, #160	@ 0xa0
 801bc0a:	4a0b      	ldr	r2, [pc, #44]	@ (801bc38 <network_appltemp_0506_configure_weights+0xc0>)
 801bc0c:	60d3      	str	r3, [r2, #12]
    return true;
 801bc0e:	2301      	movs	r3, #1
 801bc10:	e005      	b.n	801bc1e <network_appltemp_0506_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801bc12:	2212      	movs	r2, #18
 801bc14:	2130      	movs	r1, #48	@ 0x30
 801bc16:	6878      	ldr	r0, [r7, #4]
 801bc18:	f002 fe56 	bl	801e8c8 <ai_platform_network_set_error>
  return false;
 801bc1c:	2300      	movs	r3, #0
}
 801bc1e:	4618      	mov	r0, r3
 801bc20:	3708      	adds	r7, #8
 801bc22:	46bd      	mov	sp, r7
 801bc24:	bd80      	pop	{r7, pc}
 801bc26:	bf00      	nop
 801bc28:	20001a64 	.word	0x20001a64
 801bc2c:	20000140 	.word	0x20000140
 801bc30:	20000150 	.word	0x20000150
 801bc34:	20000160 	.word	0x20000160
 801bc38:	20000170 	.word	0x20000170

0801bc3c <ai_network_appltemp_0506_get_error>:
}


AI_API_ENTRY
ai_error ai_network_appltemp_0506_get_error(ai_handle network)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b082      	sub	sp, #8
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801bc44:	6878      	ldr	r0, [r7, #4]
 801bc46:	f002 fe33 	bl	801e8b0 <ai_platform_network_get_error>
 801bc4a:	4603      	mov	r3, r0
}
 801bc4c:	4618      	mov	r0, r3
 801bc4e:	3708      	adds	r7, #8
 801bc50:	46bd      	mov	sp, r7
 801bc52:	bd80      	pop	{r7, pc}

0801bc54 <ai_network_appltemp_0506_create>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b084      	sub	sp, #16
 801bc58:	af02      	add	r7, sp, #8
 801bc5a:	6078      	str	r0, [r7, #4]
 801bc5c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801bc5e:	2300      	movs	r3, #0
 801bc60:	9301      	str	r3, [sp, #4]
 801bc62:	2305      	movs	r3, #5
 801bc64:	9300      	str	r3, [sp, #0]
 801bc66:	2301      	movs	r3, #1
 801bc68:	4a04      	ldr	r2, [pc, #16]	@ (801bc7c <ai_network_appltemp_0506_create+0x28>)
 801bc6a:	6839      	ldr	r1, [r7, #0]
 801bc6c:	6878      	ldr	r0, [r7, #4]
 801bc6e:	f002 ff19 	bl	801eaa4 <ai_platform_network_create>
 801bc72:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801bc74:	4618      	mov	r0, r3
 801bc76:	3708      	adds	r7, #8
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	bd80      	pop	{r7, pc}
 801bc7c:	20000594 	.word	0x20000594

0801bc80 <ai_network_appltemp_0506_create_and_init>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b094      	sub	sp, #80	@ 0x50
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	60f8      	str	r0, [r7, #12]
 801bc88:	60b9      	str	r1, [r7, #8]
 801bc8a:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_appltemp_0506_create(network, AI_NETWORK_APPLTEMP_0506_DATA_CONFIG);
 801bc8c:	2100      	movs	r1, #0
 801bc8e:	68f8      	ldr	r0, [r7, #12]
 801bc90:	f7ff ffe0 	bl	801bc54 <ai_network_appltemp_0506_create>
 801bc94:	4603      	mov	r3, r0
 801bc96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 801bc98:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d001      	beq.n	801bca4 <ai_network_appltemp_0506_create_and_init+0x24>
    return err;
 801bca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bca2:	e067      	b.n	801bd74 <ai_network_appltemp_0506_create_and_init+0xf4>
  }
  
  if (ai_network_appltemp_0506_data_params_get(&params) != true) {
 801bca4:	f107 0310 	add.w	r3, r7, #16
 801bca8:	4618      	mov	r0, r3
 801bcaa:	f000 f8e7 	bl	801be7c <ai_network_appltemp_0506_data_params_get>
 801bcae:	4603      	mov	r3, r0
 801bcb0:	f083 0301 	eor.w	r3, r3, #1
 801bcb4:	b2db      	uxtb	r3, r3
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d008      	beq.n	801bccc <ai_network_appltemp_0506_create_and_init+0x4c>
    err = ai_network_appltemp_0506_get_error(*network);
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f7ff ffbc 	bl	801bc3c <ai_network_appltemp_0506_get_error>
 801bcc4:	4603      	mov	r3, r0
 801bcc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 801bcc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bcca:	e053      	b.n	801bd74 <ai_network_appltemp_0506_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801bccc:	2300      	movs	r3, #0
 801bcce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801bcd2:	e012      	b.n	801bcfa <ai_network_appltemp_0506_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801bcd4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 801bcd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801bcdc:	009b      	lsls	r3, r3, #2
 801bcde:	68ba      	ldr	r2, [r7, #8]
 801bce0:	4413      	add	r3, r2
 801bce2:	681a      	ldr	r2, [r3, #0]
 801bce4:	f107 0310 	add.w	r3, r7, #16
 801bce8:	330c      	adds	r3, #12
 801bcea:	4618      	mov	r0, r3
 801bcec:	f002 fd0c 	bl	801e708 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801bcf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801bcf4:	3301      	adds	r3, #1
 801bcf6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801bcfa:	68bb      	ldr	r3, [r7, #8]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d004      	beq.n	801bd0a <ai_network_appltemp_0506_create_and_init+0x8a>
 801bd00:	8bfb      	ldrh	r3, [r7, #30]
 801bd02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801bd06:	429a      	cmp	r2, r3
 801bd08:	d3e4      	bcc.n	801bcd4 <ai_network_appltemp_0506_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801bd10:	e012      	b.n	801bd38 <ai_network_appltemp_0506_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 801bd12:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 801bd16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801bd1a:	009b      	lsls	r3, r3, #2
 801bd1c:	687a      	ldr	r2, [r7, #4]
 801bd1e:	4413      	add	r3, r2
 801bd20:	681a      	ldr	r2, [r3, #0]
 801bd22:	f107 0310 	add.w	r3, r7, #16
 801bd26:	3304      	adds	r3, #4
 801bd28:	4618      	mov	r0, r3
 801bd2a:	f002 fced 	bl	801e708 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801bd2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801bd32:	3301      	adds	r3, #1
 801bd34:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d004      	beq.n	801bd48 <ai_network_appltemp_0506_create_and_init+0xc8>
 801bd3e:	8afb      	ldrh	r3, [r7, #22]
 801bd40:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 801bd44:	429a      	cmp	r2, r3
 801bd46:	d3e4      	bcc.n	801bd12 <ai_network_appltemp_0506_create_and_init+0x92>
  }
#endif
  if (ai_network_appltemp_0506_init(*network, &params) != true) {
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	f107 0210 	add.w	r2, r7, #16
 801bd50:	4611      	mov	r1, r2
 801bd52:	4618      	mov	r0, r3
 801bd54:	f000 f846 	bl	801bde4 <ai_network_appltemp_0506_init>
 801bd58:	4603      	mov	r3, r0
 801bd5a:	f083 0301 	eor.w	r3, r3, #1
 801bd5e:	b2db      	uxtb	r3, r3
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d006      	beq.n	801bd72 <ai_network_appltemp_0506_create_and_init+0xf2>
    err = ai_network_appltemp_0506_get_error(*network);
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	4618      	mov	r0, r3
 801bd6a:	f7ff ff67 	bl	801bc3c <ai_network_appltemp_0506_get_error>
 801bd6e:	4603      	mov	r3, r0
 801bd70:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 801bd72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801bd74:	4618      	mov	r0, r3
 801bd76:	3750      	adds	r7, #80	@ 0x50
 801bd78:	46bd      	mov	sp, r7
 801bd7a:	bd80      	pop	{r7, pc}

0801bd7c <ai_network_appltemp_0506_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b082      	sub	sp, #8
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
 801bd84:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d104      	bne.n	801bd96 <ai_network_appltemp_0506_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801bd8c:	4b06      	ldr	r3, [pc, #24]	@ (801bda8 <ai_network_appltemp_0506_inputs_get+0x2c>)
 801bd8e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	4a06      	ldr	r2, [pc, #24]	@ (801bdac <ai_network_appltemp_0506_inputs_get+0x30>)
 801bd94:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801bd96:	6839      	ldr	r1, [r7, #0]
 801bd98:	6878      	ldr	r0, [r7, #4]
 801bd9a:	f002 fd9b 	bl	801e8d4 <ai_platform_inputs_get>
 801bd9e:	4603      	mov	r3, r0
}
 801bda0:	4618      	mov	r0, r3
 801bda2:	3708      	adds	r7, #8
 801bda4:	46bd      	mov	sp, r7
 801bda6:	bd80      	pop	{r7, pc}
 801bda8:	20000594 	.word	0x20000594
 801bdac:	a1c00100 	.word	0xa1c00100

0801bdb0 <ai_network_appltemp_0506_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b082      	sub	sp, #8
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
 801bdb8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d104      	bne.n	801bdca <ai_network_appltemp_0506_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801bdc0:	4b06      	ldr	r3, [pc, #24]	@ (801bddc <ai_network_appltemp_0506_outputs_get+0x2c>)
 801bdc2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	4a06      	ldr	r2, [pc, #24]	@ (801bde0 <ai_network_appltemp_0506_outputs_get+0x30>)
 801bdc8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801bdca:	6839      	ldr	r1, [r7, #0]
 801bdcc:	6878      	ldr	r0, [r7, #4]
 801bdce:	f002 fdf7 	bl	801e9c0 <ai_platform_outputs_get>
 801bdd2:	4603      	mov	r3, r0
}
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	3708      	adds	r7, #8
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	bd80      	pop	{r7, pc}
 801bddc:	20000594 	.word	0x20000594
 801bde0:	a1c00100 	.word	0xa1c00100

0801bde4 <ai_network_appltemp_0506_init>:


AI_API_ENTRY
ai_bool ai_network_appltemp_0506_init(
  ai_handle network, const ai_network_params* params)
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b084      	sub	sp, #16
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
 801bdec:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 801bdee:	6839      	ldr	r1, [r7, #0]
 801bdf0:	6878      	ldr	r0, [r7, #4]
 801bdf2:	f002 fe99 	bl	801eb28 <ai_platform_network_init>
 801bdf6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 801bdf8:	2301      	movs	r3, #1
 801bdfa:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d101      	bne.n	801be06 <ai_network_appltemp_0506_init+0x22>
 801be02:	2300      	movs	r3, #0
 801be04:	e026      	b.n	801be54 <ai_network_appltemp_0506_init+0x70>
  ok &= network_appltemp_0506_configure_weights(net_ctx, params);
 801be06:	6839      	ldr	r1, [r7, #0]
 801be08:	68f8      	ldr	r0, [r7, #12]
 801be0a:	f7ff feb5 	bl	801bb78 <network_appltemp_0506_configure_weights>
 801be0e:	4603      	mov	r3, r0
 801be10:	461a      	mov	r2, r3
 801be12:	7afb      	ldrb	r3, [r7, #11]
 801be14:	4013      	ands	r3, r2
 801be16:	2b00      	cmp	r3, #0
 801be18:	bf14      	ite	ne
 801be1a:	2301      	movne	r3, #1
 801be1c:	2300      	moveq	r3, #0
 801be1e:	72fb      	strb	r3, [r7, #11]
  ok &= network_appltemp_0506_configure_activations(net_ctx, params);
 801be20:	6839      	ldr	r1, [r7, #0]
 801be22:	68f8      	ldr	r0, [r7, #12]
 801be24:	f7ff fe54 	bl	801bad0 <network_appltemp_0506_configure_activations>
 801be28:	4603      	mov	r3, r0
 801be2a:	461a      	mov	r2, r3
 801be2c:	7afb      	ldrb	r3, [r7, #11]
 801be2e:	4013      	ands	r3, r2
 801be30:	2b00      	cmp	r3, #0
 801be32:	bf14      	ite	ne
 801be34:	2301      	movne	r3, #1
 801be36:	2300      	moveq	r3, #0
 801be38:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801be3a:	6878      	ldr	r0, [r7, #4]
 801be3c:	f002 ff0c 	bl	801ec58 <ai_platform_network_post_init>
 801be40:	4603      	mov	r3, r0
 801be42:	461a      	mov	r2, r3
 801be44:	7afb      	ldrb	r3, [r7, #11]
 801be46:	4013      	ands	r3, r2
 801be48:	2b00      	cmp	r3, #0
 801be4a:	bf14      	ite	ne
 801be4c:	2301      	movne	r3, #1
 801be4e:	2300      	moveq	r3, #0
 801be50:	72fb      	strb	r3, [r7, #11]

  return ok;
 801be52:	7afb      	ldrb	r3, [r7, #11]
}
 801be54:	4618      	mov	r0, r3
 801be56:	3710      	adds	r7, #16
 801be58:	46bd      	mov	sp, r7
 801be5a:	bd80      	pop	{r7, pc}

0801be5c <ai_network_appltemp_0506_run>:


AI_API_ENTRY
ai_i32 ai_network_appltemp_0506_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b084      	sub	sp, #16
 801be60:	af00      	add	r7, sp, #0
 801be62:	60f8      	str	r0, [r7, #12]
 801be64:	60b9      	str	r1, [r7, #8]
 801be66:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801be68:	687a      	ldr	r2, [r7, #4]
 801be6a:	68b9      	ldr	r1, [r7, #8]
 801be6c:	68f8      	ldr	r0, [r7, #12]
 801be6e:	f002 ff21 	bl	801ecb4 <ai_platform_network_process>
 801be72:	4603      	mov	r3, r0
}
 801be74:	4618      	mov	r0, r3
 801be76:	3710      	adds	r7, #16
 801be78:	46bd      	mov	sp, r7
 801be7a:	bd80      	pop	{r7, pc}

0801be7c <ai_network_appltemp_0506_data_params_get>:
 * @ingroup network_appltemp_0506_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_appltemp_0506_data_params_get(ai_network_params* params)
{
 801be7c:	b580      	push	{r7, lr}
 801be7e:	b086      	sub	sp, #24
 801be80:	af00      	add	r7, sp, #0
 801be82:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d101      	bne.n	801be8e <ai_network_appltemp_0506_data_params_get+0x12>
 801be8a:	2300      	movs	r3, #0
 801be8c:	e016      	b.n	801bebc <ai_network_appltemp_0506_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801be8e:	4a0d      	ldr	r2, [pc, #52]	@ (801bec4 <ai_network_appltemp_0506_data_params_get+0x48>)
 801be90:	f107 0310 	add.w	r3, r7, #16
 801be94:	e892 0003 	ldmia.w	r2, {r0, r1}
 801be98:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT, g_network_appltemp_0506_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801be9c:	4a0a      	ldr	r2, [pc, #40]	@ (801bec8 <ai_network_appltemp_0506_data_params_get+0x4c>)
 801be9e:	f107 0308 	add.w	r3, r7, #8
 801bea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bea6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT, g_network_appltemp_0506_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801beaa:	f107 0210 	add.w	r2, r7, #16
 801beae:	f107 0308 	add.w	r3, r7, #8
 801beb2:	4619      	mov	r1, r3
 801beb4:	6878      	ldr	r0, [r7, #4]
 801beb6:	f002 fcdb 	bl	801e870 <ai_platform_bind_network_params>
 801beba:	4603      	mov	r3, r0
}
 801bebc:	4618      	mov	r0, r3
 801bebe:	3718      	adds	r7, #24
 801bec0:	46bd      	mov	sp, r7
 801bec2:	bd80      	pop	{r7, pc}
 801bec4:	080219fc 	.word	0x080219fc
 801bec8:	08021a04 	.word	0x08021a04

0801becc <LL_APB1_GRP1_EnableClock>:
{
 801becc:	b480      	push	{r7}
 801bece:	b085      	sub	sp, #20
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801bed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bed8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801beda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	4313      	orrs	r3, r2
 801bee2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801bee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bee8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	4013      	ands	r3, r2
 801beee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801bef0:	68fb      	ldr	r3, [r7, #12]
}
 801bef2:	bf00      	nop
 801bef4:	3714      	adds	r7, #20
 801bef6:	46bd      	mov	sp, r7
 801bef8:	bc80      	pop	{r7}
 801befa:	4770      	bx	lr

0801befc <LL_APB1_GRP2_EnableClock>:
{
 801befc:	b480      	push	{r7}
 801befe:	b085      	sub	sp, #20
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 801bf04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bf08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801bf0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	4313      	orrs	r3, r2
 801bf12:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801bf14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bf18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	4013      	ands	r3, r2
 801bf1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801bf20:	68fb      	ldr	r3, [r7, #12]
}
 801bf22:	bf00      	nop
 801bf24:	3714      	adds	r7, #20
 801bf26:	46bd      	mov	sp, r7
 801bf28:	bc80      	pop	{r7}
 801bf2a:	4770      	bx	lr

0801bf2c <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 801bf30:	4b13      	ldr	r3, [pc, #76]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf32:	4a14      	ldr	r2, [pc, #80]	@ (801bf84 <MX_LPTIM1_Init+0x58>)
 801bf34:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 801bf36:	4b12      	ldr	r3, [pc, #72]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf38:	2200      	movs	r2, #0
 801bf3a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 801bf3c:	4b10      	ldr	r3, [pc, #64]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf3e:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 801bf42:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 801bf44:	4b0e      	ldr	r3, [pc, #56]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bf4a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 801bf4c:	4b0c      	ldr	r3, [pc, #48]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf4e:	2200      	movs	r2, #0
 801bf50:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 801bf52:	4b0b      	ldr	r3, [pc, #44]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf54:	2200      	movs	r2, #0
 801bf56:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 801bf58:	4b09      	ldr	r3, [pc, #36]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 801bf5e:	4b08      	ldr	r3, [pc, #32]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf60:	2200      	movs	r2, #0
 801bf62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 801bf64:	4b06      	ldr	r3, [pc, #24]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf66:	2200      	movs	r2, #0
 801bf68:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 801bf6a:	4805      	ldr	r0, [pc, #20]	@ (801bf80 <MX_LPTIM1_Init+0x54>)
 801bf6c:	f001 fece 	bl	801dd0c <HAL_LPTIM_Init>
 801bf70:	4603      	mov	r3, r0
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d001      	beq.n	801bf7a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 801bf76:	f7e5 fa59 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 801bf7a:	bf00      	nop
 801bf7c:	bd80      	pop	{r7, pc}
 801bf7e:	bf00      	nop
 801bf80:	20001b40 	.word	0x20001b40
 801bf84:	40007c00 	.word	0x40007c00

0801bf88 <HAL_LPTIM_MspInit>:

}


void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b090      	sub	sp, #64	@ 0x40
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801bf90:	f107 0308 	add.w	r3, r7, #8
 801bf94:	2238      	movs	r2, #56	@ 0x38
 801bf96:	2100      	movs	r1, #0
 801bf98:	4618      	mov	r0, r3
 801bf9a:	f004 fbfb 	bl	8020794 <memset>
  if(lptimHandle->Instance==LPTIM1)
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	4a21      	ldr	r2, [pc, #132]	@ (801c028 <HAL_LPTIM_MspInit+0xa0>)
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	d11c      	bne.n	801bfe2 <HAL_LPTIM_MspInit+0x5a>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 801bfa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801bfac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 801bfae:	f04f 130c 	mov.w	r3, #786444	@ 0xc000c
 801bfb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801bfb4:	f107 0308 	add.w	r3, r7, #8
 801bfb8:	4618      	mov	r0, r3
 801bfba:	f7ea ffc9 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d001      	beq.n	801bfc8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 801bfc4:	f7e5 fa32 	bl	800142c <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 801bfc8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801bfcc:	f7ff ff7e 	bl	801becc <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 801bfd0:	2200      	movs	r2, #0
 801bfd2:	2100      	movs	r1, #0
 801bfd4:	2027      	movs	r0, #39	@ 0x27
 801bfd6:	f7e7 ff28 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 801bfda:	2027      	movs	r0, #39	@ 0x27
 801bfdc:	f7e7 ff3f 	bl	8003e5e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM2_MspInit 1 */

    /* USER CODE END LPTIM2_MspInit 1 */
    }

}
 801bfe0:	e01e      	b.n	801c020 <HAL_LPTIM_MspInit+0x98>
  else if(lptimHandle->Instance==LPTIM2)
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	4a11      	ldr	r2, [pc, #68]	@ (801c02c <HAL_LPTIM_MspInit+0xa4>)
 801bfe8:	4293      	cmp	r3, r2
 801bfea:	d119      	bne.n	801c020 <HAL_LPTIM_MspInit+0x98>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 801bfec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801bff0:	60bb      	str	r3, [r7, #8]
	  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_HSI;
 801bff2:	4b0f      	ldr	r3, [pc, #60]	@ (801c030 <HAL_LPTIM_MspInit+0xa8>)
 801bff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801bff6:	f107 0308 	add.w	r3, r7, #8
 801bffa:	4618      	mov	r0, r3
 801bffc:	f7ea ffa8 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 801c000:	4603      	mov	r3, r0
 801c002:	2b00      	cmp	r3, #0
 801c004:	d001      	beq.n	801c00a <HAL_LPTIM_MspInit+0x82>
		  Error_Handler();
 801c006:	f7e5 fa11 	bl	800142c <Error_Handler>
	  __HAL_RCC_LPTIM2_CLK_ENABLE();
 801c00a:	2020      	movs	r0, #32
 801c00c:	f7ff ff76 	bl	801befc <LL_APB1_GRP2_EnableClock>
	  HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 801c010:	2200      	movs	r2, #0
 801c012:	2100      	movs	r1, #0
 801c014:	2028      	movs	r0, #40	@ 0x28
 801c016:	f7e7 ff08 	bl	8003e2a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 801c01a:	2028      	movs	r0, #40	@ 0x28
 801c01c:	f7e7 ff1f 	bl	8003e5e <HAL_NVIC_EnableIRQ>
}
 801c020:	bf00      	nop
 801c022:	3740      	adds	r7, #64	@ 0x40
 801c024:	46bd      	mov	sp, r7
 801c026:	bd80      	pop	{r7, pc}
 801c028:	40007c00 	.word	0x40007c00
 801c02c:	40009400 	.word	0x40009400
 801c030:	00300020 	.word	0x00300020

0801c034 <LL_PWR_SetPowerMode>:
{
 801c034:	b480      	push	{r7}
 801c036:	b083      	sub	sp, #12
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 801c03c:	4b06      	ldr	r3, [pc, #24]	@ (801c058 <LL_PWR_SetPowerMode+0x24>)
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	f023 0207 	bic.w	r2, r3, #7
 801c044:	4904      	ldr	r1, [pc, #16]	@ (801c058 <LL_PWR_SetPowerMode+0x24>)
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	4313      	orrs	r3, r2
 801c04a:	600b      	str	r3, [r1, #0]
}
 801c04c:	bf00      	nop
 801c04e:	370c      	adds	r7, #12
 801c050:	46bd      	mov	sp, r7
 801c052:	bc80      	pop	{r7}
 801c054:	4770      	bx	lr
 801c056:	bf00      	nop
 801c058:	58000400 	.word	0x58000400

0801c05c <LL_C2_PWR_SetPowerMode>:
{
 801c05c:	b480      	push	{r7}
 801c05e:	b083      	sub	sp, #12
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 801c064:	4b07      	ldr	r3, [pc, #28]	@ (801c084 <LL_C2_PWR_SetPowerMode+0x28>)
 801c066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c06a:	f023 0207 	bic.w	r2, r3, #7
 801c06e:	4905      	ldr	r1, [pc, #20]	@ (801c084 <LL_C2_PWR_SetPowerMode+0x28>)
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	4313      	orrs	r3, r2
 801c074:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 801c078:	bf00      	nop
 801c07a:	370c      	adds	r7, #12
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bc80      	pop	{r7}
 801c080:	4770      	bx	lr
 801c082:	bf00      	nop
 801c084:	58000400 	.word	0x58000400

0801c088 <LL_PWR_IsActiveFlag_C1SB>:
{
 801c088:	b480      	push	{r7}
 801c08a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 801c08c:	4b07      	ldr	r3, [pc, #28]	@ (801c0ac <LL_PWR_IsActiveFlag_C1SB+0x24>)
 801c08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c09a:	d101      	bne.n	801c0a0 <LL_PWR_IsActiveFlag_C1SB+0x18>
 801c09c:	2301      	movs	r3, #1
 801c09e:	e000      	b.n	801c0a2 <LL_PWR_IsActiveFlag_C1SB+0x1a>
 801c0a0:	2300      	movs	r3, #0
}
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bc80      	pop	{r7}
 801c0a8:	4770      	bx	lr
 801c0aa:	bf00      	nop
 801c0ac:	58000400 	.word	0x58000400

0801c0b0 <LL_PWR_IsActiveFlag_C2SB>:
{
 801c0b0:	b480      	push	{r7}
 801c0b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 801c0b4:	4b07      	ldr	r3, [pc, #28]	@ (801c0d4 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 801c0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c0ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c0be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801c0c2:	d101      	bne.n	801c0c8 <LL_PWR_IsActiveFlag_C2SB+0x18>
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	e000      	b.n	801c0ca <LL_PWR_IsActiveFlag_C2SB+0x1a>
 801c0c8:	2300      	movs	r3, #0
}
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	bc80      	pop	{r7}
 801c0d0:	4770      	bx	lr
 801c0d2:	bf00      	nop
 801c0d4:	58000400 	.word	0x58000400

0801c0d8 <LL_PWR_ClearFlag_C1STOP_C1STB>:
{
 801c0d8:	b480      	push	{r7}
 801c0da:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 801c0dc:	4b03      	ldr	r3, [pc, #12]	@ (801c0ec <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 801c0de:	2201      	movs	r2, #1
 801c0e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801c0e4:	bf00      	nop
 801c0e6:	46bd      	mov	sp, r7
 801c0e8:	bc80      	pop	{r7}
 801c0ea:	4770      	bx	lr
 801c0ec:	58000400 	.word	0x58000400

0801c0f0 <LL_PWR_ClearFlag_C2STOP_C2STB>:
  * @brief  Clear standby and stop flags for CPU2
  * @rmtoll EXTSCR       C2CSSF        LL_PWR_ClearFlag_C2STOP_C2STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C2STOP_C2STB(void)
{
 801c0f0:	b480      	push	{r7}
 801c0f2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C2CSSF);
 801c0f4:	4b03      	ldr	r3, [pc, #12]	@ (801c104 <LL_PWR_ClearFlag_C2STOP_C2STB+0x14>)
 801c0f6:	2202      	movs	r2, #2
 801c0f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801c0fc:	bf00      	nop
 801c0fe:	46bd      	mov	sp, r7
 801c100:	bc80      	pop	{r7}
 801c102:	4770      	bx	lr
 801c104:	58000400 	.word	0x58000400

0801c108 <LL_RCC_LSE_SetDriveCapability>:
{
 801c108:	b480      	push	{r7}
 801c10a:	b083      	sub	sp, #12
 801c10c:	af00      	add	r7, sp, #0
 801c10e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 801c110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c118:	f023 0218 	bic.w	r2, r3, #24
 801c11c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	4313      	orrs	r3, r2
 801c124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 801c128:	bf00      	nop
 801c12a:	370c      	adds	r7, #12
 801c12c:	46bd      	mov	sp, r7
 801c12e:	bc80      	pop	{r7}
 801c130:	4770      	bx	lr

0801c132 <LL_RCC_SetClkAfterWakeFromStop>:
{
 801c132:	b480      	push	{r7}
 801c134:	b083      	sub	sp, #12
 801c136:	af00      	add	r7, sp, #0
 801c138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 801c13a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c13e:	689b      	ldr	r3, [r3, #8]
 801c140:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801c144:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	4313      	orrs	r3, r2
 801c14c:	608b      	str	r3, [r1, #8]
}
 801c14e:	bf00      	nop
 801c150:	370c      	adds	r7, #12
 801c152:	46bd      	mov	sp, r7
 801c154:	bc80      	pop	{r7}
 801c156:	4770      	bx	lr

0801c158 <LL_AHB2_GRP1_EnableClock>:
{
 801c158:	b480      	push	{r7}
 801c15a:	b085      	sub	sp, #20
 801c15c:	af00      	add	r7, sp, #0
 801c15e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801c160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c164:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	4313      	orrs	r3, r2
 801c16e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801c170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c174:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	4013      	ands	r3, r2
 801c17a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801c17c:	68fb      	ldr	r3, [r7, #12]
}
 801c17e:	bf00      	nop
 801c180:	3714      	adds	r7, #20
 801c182:	46bd      	mov	sp, r7
 801c184:	bc80      	pop	{r7}
 801c186:	4770      	bx	lr

0801c188 <LL_AHB2_GRP1_DisableClock>:
{
 801c188:	b480      	push	{r7}
 801c18a:	b083      	sub	sp, #12
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 801c190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	43db      	mvns	r3, r3
 801c19a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c19e:	4013      	ands	r3, r2
 801c1a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 801c1a2:	bf00      	nop
 801c1a4:	370c      	adds	r7, #12
 801c1a6:	46bd      	mov	sp, r7
 801c1a8:	bc80      	pop	{r7}
 801c1aa:	4770      	bx	lr

0801c1ac <LL_APB1_GRP1_EnableClock>:
{
 801c1ac:	b480      	push	{r7}
 801c1ae:	b085      	sub	sp, #20
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801c1b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c1b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801c1ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	4313      	orrs	r3, r2
 801c1c2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801c1c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c1c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	4013      	ands	r3, r2
 801c1ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801c1d0:	68fb      	ldr	r3, [r7, #12]
}
 801c1d2:	bf00      	nop
 801c1d4:	3714      	adds	r7, #20
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bc80      	pop	{r7}
 801c1da:	4770      	bx	lr

0801c1dc <LL_APB1_GRP1_DisableClock>:
{
 801c1dc:	b480      	push	{r7}
 801c1de:	b083      	sub	sp, #12
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 801c1e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c1e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	43db      	mvns	r3, r3
 801c1ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c1f2:	4013      	ands	r3, r2
 801c1f4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 801c1f6:	bf00      	nop
 801c1f8:	370c      	adds	r7, #12
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bc80      	pop	{r7}
 801c1fe:	4770      	bx	lr

0801c200 <HAL_PWR_PVDCallback>:
extern RTC_HandleTypeDef hrtc;

/* CallBack Section Begin */

void HAL_PWR_PVDCallback(void)	// PVD CallBack
{
 801c200:	b580      	push	{r7, lr}
 801c202:	af00      	add	r7, sp, #0
	if(my_SystemClock_Config_done == 0)											// Check if the PS Detection has been executed
 801c204:	4b8e      	ldr	r3, [pc, #568]	@ (801c440 <HAL_PWR_PVDCallback+0x240>)
 801c206:	781b      	ldrb	r3, [r3, #0]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d103      	bne.n	801c214 <HAL_PWR_PVDCallback+0x14>
	{
		my_Next_State = RTS;
 801c20c:	4b8d      	ldr	r3, [pc, #564]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c20e:	2202      	movs	r2, #2
 801c210:	701a      	strb	r2, [r3, #0]
			break;
		}

		}
	}
}
 801c212:	e113      	b.n	801c43c <HAL_PWR_PVDCallback+0x23c>
		switch(my_Current_State)
 801c214:	4b8c      	ldr	r3, [pc, #560]	@ (801c448 <HAL_PWR_PVDCallback+0x248>)
 801c216:	781b      	ldrb	r3, [r3, #0]
 801c218:	3b03      	subs	r3, #3
 801c21a:	2b04      	cmp	r3, #4
 801c21c:	f200 8102 	bhi.w	801c424 <HAL_PWR_PVDCallback+0x224>
 801c220:	a201      	add	r2, pc, #4	@ (adr r2, 801c228 <HAL_PWR_PVDCallback+0x28>)
 801c222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c226:	bf00      	nop
 801c228:	0801c23d 	.word	0x0801c23d
 801c22c:	0801c2d1 	.word	0x0801c2d1
 801c230:	0801c3b7 	.word	0x0801c3b7
 801c234:	0801c3eb 	.word	0x0801c3eb
 801c238:	0801c33f 	.word	0x0801c33f
			My_EHS_to_EMS_Timer(STOP_TIMER);									// Stop EHS_to_EMS Timer
 801c23c:	2001      	movs	r0, #1
 801c23e:	f000 fd65 	bl	801cd0c <My_EHS_to_EMS_Timer>
			switch(my_Next_State)
 801c242:	4b80      	ldr	r3, [pc, #512]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	3b02      	subs	r3, #2
 801c248:	2b07      	cmp	r3, #7
 801c24a:	d836      	bhi.n	801c2ba <HAL_PWR_PVDCallback+0xba>
 801c24c:	a201      	add	r2, pc, #4	@ (adr r2, 801c254 <HAL_PWR_PVDCallback+0x54>)
 801c24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c252:	bf00      	nop
 801c254:	0801c275 	.word	0x0801c275
 801c258:	0801c2bb 	.word	0x0801c2bb
 801c25c:	0801c299 	.word	0x0801c299
 801c260:	0801c2bb 	.word	0x0801c2bb
 801c264:	0801c2bb 	.word	0x0801c2bb
 801c268:	0801c2a3 	.word	0x0801c2a3
 801c26c:	0801c2bb 	.word	0x0801c2bb
 801c270:	0801c2af 	.word	0x0801c2af
				if (my_SubghzApp_Init_done == 1) 								// Check if Radio Initialization is done
 801c274:	4b75      	ldr	r3, [pc, #468]	@ (801c44c <HAL_PWR_PVDCallback+0x24c>)
 801c276:	781b      	ldrb	r3, [r3, #0]
 801c278:	2b01      	cmp	r3, #1
 801c27a:	d127      	bne.n	801c2cc <HAL_PWR_PVDCallback+0xcc>
					if (my_RTS_cnt == 0)
 801c27c:	4b74      	ldr	r3, [pc, #464]	@ (801c450 <HAL_PWR_PVDCallback+0x250>)
 801c27e:	781b      	ldrb	r3, [r3, #0]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d104      	bne.n	801c28e <HAL_PWR_PVDCallback+0x8e>
						My_Trise_Meas();										// Measure the Trise Time
 801c284:	f001 fb08 	bl	801d898 <My_Trise_Meas>
						My_SMW_Timer(STOP_TIMER);								// Stop the SMW Timer
 801c288:	2001      	movs	r0, #1
 801c28a:	f000 fcff 	bl	801cc8c <My_SMW_Timer>
					UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801c28e:	2100      	movs	r1, #0
 801c290:	2010      	movs	r0, #16
 801c292:	f7fe fca3 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c296:	e019      	b.n	801c2cc <HAL_PWR_PVDCallback+0xcc>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0);  	// My_ESF -- ESF = Energy Storage Function
 801c298:	2100      	movs	r1, #0
 801c29a:	2040      	movs	r0, #64	@ 0x40
 801c29c:	f7fe fc9e 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c2a0:	e015      	b.n	801c2ce <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c2a2:	2100      	movs	r1, #0
 801c2a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c2a8:	f7fe fc98 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c2ac:	e00f      	b.n	801c2ce <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_AIF), CFG_SEQ_Prio_0);  	// My_AIF -- AIF = Artificial Intelligence Function
 801c2ae:	2100      	movs	r1, #0
 801c2b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801c2b4:	f7fe fc92 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c2b8:	e009      	b.n	801c2ce <HAL_PWR_PVDCallback+0xce>
				my_Next_State = SMS;											// Set Next State as SMS
 801c2ba:	4b62      	ldr	r3, [pc, #392]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c2bc:	2207      	movs	r2, #7
 801c2be:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c2c0:	2100      	movs	r1, #0
 801c2c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c2c6:	f7fe fc89 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c2ca:	e000      	b.n	801c2ce <HAL_PWR_PVDCallback+0xce>
				break;
 801c2cc:	bf00      	nop
			break;
 801c2ce:	e0b5      	b.n	801c43c <HAL_PWR_PVDCallback+0x23c>
			switch (my_Cmode)
 801c2d0:	4b60      	ldr	r3, [pc, #384]	@ (801c454 <HAL_PWR_PVDCallback+0x254>)
 801c2d2:	781b      	ldrb	r3, [r3, #0]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d002      	beq.n	801c2de <HAL_PWR_PVDCallback+0xde>
 801c2d8:	2b02      	cmp	r3, #2
 801c2da:	d00b      	beq.n	801c2f4 <HAL_PWR_PVDCallback+0xf4>
 801c2dc:	e022      	b.n	801c324 <HAL_PWR_PVDCallback+0x124>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801c2de:	4b5a      	ldr	r3, [pc, #360]	@ (801c448 <HAL_PWR_PVDCallback+0x248>)
 801c2e0:	2203      	movs	r2, #3
 801c2e2:	701a      	strb	r2, [r3, #0]
				My_DCM_to_CCM_Timer(STOP_TIMER);  								// Stop the DCM to CCM Timer
 801c2e4:	2001      	movs	r0, #1
 801c2e6:	f000 fd33 	bl	801cd50 <My_DCM_to_CCM_Timer>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF - Back to Harvest
 801c2ea:	2100      	movs	r1, #0
 801c2ec:	2020      	movs	r0, #32
 801c2ee:	f7fe fc75 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c2f2:	e023      	b.n	801c33c <HAL_PWR_PVDCallback+0x13c>
				if (my_Check_ESD == 0)
 801c2f4:	4b58      	ldr	r3, [pc, #352]	@ (801c458 <HAL_PWR_PVDCallback+0x258>)
 801c2f6:	781b      	ldrb	r3, [r3, #0]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d102      	bne.n	801c302 <HAL_PWR_PVDCallback+0x102>
					my_Cmode = EOC;  											// End of Charge Mode has been met
 801c2fc:	4b55      	ldr	r3, [pc, #340]	@ (801c454 <HAL_PWR_PVDCallback+0x254>)
 801c2fe:	2202      	movs	r2, #2
 801c300:	701a      	strb	r2, [r3, #0]
				My_ESW_CCM_Timer(STOP_TIMER);  									// Stop the Energy Storage Window Timer
 801c302:	2001      	movs	r0, #1
 801c304:	f000 fc9c 	bl	801cc40 <My_ESW_CCM_Timer>
				My_EHS_to_EMS_Timer(STOP_TIMER);  								// Stop the EHS to EMS Timer
 801c308:	2001      	movs	r0, #1
 801c30a:	f000 fcff 	bl	801cd0c <My_EHS_to_EMS_Timer>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801c30e:	4b4e      	ldr	r3, [pc, #312]	@ (801c448 <HAL_PWR_PVDCallback+0x248>)
 801c310:	2203      	movs	r2, #3
 801c312:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as RTS:	 	ESS --> EHS --> SMS
 801c314:	4b4b      	ldr	r3, [pc, #300]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c316:	2207      	movs	r2, #7
 801c318:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  	// My_EHF - Back to Harvest
 801c31a:	2100      	movs	r1, #0
 801c31c:	2020      	movs	r0, #32
 801c31e:	f7fe fc5d 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c322:	e00b      	b.n	801c33c <HAL_PWR_PVDCallback+0x13c>
				my_Current_State = EHS;  										// Set Current State as EHS
 801c324:	4b48      	ldr	r3, [pc, #288]	@ (801c448 <HAL_PWR_PVDCallback+0x248>)
 801c326:	2203      	movs	r2, #3
 801c328:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as SMS
 801c32a:	4b46      	ldr	r3, [pc, #280]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c32c:	2207      	movs	r2, #7
 801c32e:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c330:	2100      	movs	r1, #0
 801c332:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c336:	f7fe fc51 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c33a:	bf00      	nop
			break;
 801c33c:	e07e      	b.n	801c43c <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801c33e:	2000      	movs	r0, #0
 801c340:	f001 fba6 	bl	801da90 <My_VDD_to_VDDS2_Switch>
			if (!((my_Cmode == DCM) && (my_Check_ESD == 0)))
 801c344:	4b43      	ldr	r3, [pc, #268]	@ (801c454 <HAL_PWR_PVDCallback+0x254>)
 801c346:	781b      	ldrb	r3, [r3, #0]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d103      	bne.n	801c354 <HAL_PWR_PVDCallback+0x154>
 801c34c:	4b42      	ldr	r3, [pc, #264]	@ (801c458 <HAL_PWR_PVDCallback+0x258>)
 801c34e:	781b      	ldrb	r3, [r3, #0]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d002      	beq.n	801c35a <HAL_PWR_PVDCallback+0x15a>
				Radio.Sleep();													// Switch the Radio Off
 801c354:	4b41      	ldr	r3, [pc, #260]	@ (801c45c <HAL_PWR_PVDCallback+0x25c>)
 801c356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c358:	4798      	blx	r3
			my_Current_State = EHS;												// Set Current State as EHS
 801c35a:	4b3b      	ldr	r3, [pc, #236]	@ (801c448 <HAL_PWR_PVDCallback+0x248>)
 801c35c:	2203      	movs	r2, #3
 801c35e:	701a      	strb	r2, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801c360:	4b3c      	ldr	r3, [pc, #240]	@ (801c454 <HAL_PWR_PVDCallback+0x254>)
 801c362:	781b      	ldrb	r3, [r3, #0]
 801c364:	2b02      	cmp	r3, #2
 801c366:	d107      	bne.n	801c378 <HAL_PWR_PVDCallback+0x178>
 801c368:	483d      	ldr	r0, [pc, #244]	@ (801c460 <HAL_PWR_PVDCallback+0x260>)
 801c36a:	f001 feff 	bl	801e16c <HAL_LPTIM_ReadCounter>
 801c36e:	4603      	mov	r3, r0
 801c370:	f642 0210 	movw	r2, #10256	@ 0x2810
 801c374:	4293      	cmp	r3, r2
 801c376:	d80f      	bhi.n	801c398 <HAL_PWR_PVDCallback+0x198>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801c378:	4b36      	ldr	r3, [pc, #216]	@ (801c454 <HAL_PWR_PVDCallback+0x254>)
 801c37a:	781b      	ldrb	r3, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801c37c:	2b02      	cmp	r3, #2
 801c37e:	d007      	beq.n	801c390 <HAL_PWR_PVDCallback+0x190>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801c380:	4837      	ldr	r0, [pc, #220]	@ (801c460 <HAL_PWR_PVDCallback+0x260>)
 801c382:	f001 fef3 	bl	801e16c <HAL_LPTIM_ReadCounter>
 801c386:	4603      	mov	r3, r0
 801c388:	f241 4208 	movw	r2, #5128	@ 0x1408
 801c38c:	4293      	cmp	r3, r2
 801c38e:	d803      	bhi.n	801c398 <HAL_PWR_PVDCallback+0x198>
					(my_SMS_cnt > SMS_MAX))
 801c390:	4b34      	ldr	r3, [pc, #208]	@ (801c464 <HAL_PWR_PVDCallback+0x264>)
 801c392:	781b      	ldrb	r3, [r3, #0]
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801c394:	2b05      	cmp	r3, #5
 801c396:	d909      	bls.n	801c3ac <HAL_PWR_PVDCallback+0x1ac>
				my_Trise_time_start = HAL_LPTIM_ReadCounter(&hlptim1);  		// Measure Starting Trise Time
 801c398:	4831      	ldr	r0, [pc, #196]	@ (801c460 <HAL_PWR_PVDCallback+0x260>)
 801c39a:	f001 fee7 	bl	801e16c <HAL_LPTIM_ReadCounter>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	b29a      	uxth	r2, r3
 801c3a2:	4b31      	ldr	r3, [pc, #196]	@ (801c468 <HAL_PWR_PVDCallback+0x268>)
 801c3a4:	801a      	strh	r2, [r3, #0]
				my_Next_State = AIS;  											// SMS --> AIS
 801c3a6:	4b27      	ldr	r3, [pc, #156]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c3a8:	2209      	movs	r2, #9
 801c3aa:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 			// My_EHF
 801c3ac:	2100      	movs	r1, #0
 801c3ae:	2020      	movs	r0, #32
 801c3b0:	f7fe fc14 	bl	801abdc <UTIL_SEQ_SetTask>
			break;
 801c3b4:	e042      	b.n	801c43c <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);									// Open the Switch between Vdd and ES
 801c3b6:	2000      	movs	r0, #0
 801c3b8:	f001 faec 	bl	801d994 <My_VDD_to_ES_Switch>
			my_Cmode = EOC;  													// The Storage Element is in EOC since the PVD has been triggered with the VEOC threshold while in EMS.
 801c3bc:	4b25      	ldr	r3, [pc, #148]	@ (801c454 <HAL_PWR_PVDCallback+0x254>)
 801c3be:	2202      	movs	r2, #2
 801c3c0:	701a      	strb	r2, [r3, #0]
			My_EMS_to_EDS_Timer(STOP_TIMER);  									// Stop the EMS to EDS Timer
 801c3c2:	2001      	movs	r0, #1
 801c3c4:	f000 fce6 	bl	801cd94 <My_EMS_to_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);  									// Stop the EMS to SMS Timer
 801c3c8:	2001      	movs	r0, #1
 801c3ca:	f000 fd05 	bl	801cdd8 <My_EMS_to_SMS_Timer>
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801c3ce:	4b27      	ldr	r3, [pc, #156]	@ (801c46c <HAL_PWR_PVDCallback+0x26c>)
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;  											// Set Current State as EHS: 	EMS --> EHS
 801c3d4:	4b1c      	ldr	r3, [pc, #112]	@ (801c448 <HAL_PWR_PVDCallback+0x248>)
 801c3d6:	2203      	movs	r2, #3
 801c3d8:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  												// Set Next State as RTS: 		EMS --> EHS --> RTS
 801c3da:	4b1a      	ldr	r3, [pc, #104]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c3dc:	2202      	movs	r2, #2
 801c3de:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  		// My_EHF - Back to Harvest
 801c3e0:	2100      	movs	r1, #0
 801c3e2:	2020      	movs	r0, #32
 801c3e4:	f7fe fbfa 	bl	801abdc <UTIL_SEQ_SetTask>
			break;
 801c3e8:	e028      	b.n	801c43c <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);  									// Open the Switch connected to the Storage element
 801c3ea:	2000      	movs	r0, #0
 801c3ec:	f001 fad2 	bl	801d994 <My_VDD_to_ES_Switch>
			my_Cmode = DCM;  													// Assume that the Energy Storage Device (ESD) is discharged
 801c3f0:	4b18      	ldr	r3, [pc, #96]	@ (801c454 <HAL_PWR_PVDCallback+0x254>)
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	701a      	strb	r2, [r3, #0]
			My_EDS_Timer(STOP_TIMER);  											// Stop the EDS Timer
 801c3f6:	2001      	movs	r0, #1
 801c3f8:	f000 fc6e 	bl	801ccd8 <My_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);									// Stop the EMS_to_SMS Timer
 801c3fc:	2001      	movs	r0, #1
 801c3fe:	f000 fceb 	bl	801cdd8 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 0;
 801c402:	4b1b      	ldr	r3, [pc, #108]	@ (801c470 <HAL_PWR_PVDCallback+0x270>)
 801c404:	2200      	movs	r2, #0
 801c406:	701a      	strb	r2, [r3, #0]
			my_rtc_B_ems_flag = 0;
 801c408:	4b1a      	ldr	r3, [pc, #104]	@ (801c474 <HAL_PWR_PVDCallback+0x274>)
 801c40a:	2200      	movs	r2, #0
 801c40c:	701a      	strb	r2, [r3, #0]
			my_RTS_cnt = 0;  													// Resets the transmissions counter
 801c40e:	4b10      	ldr	r3, [pc, #64]	@ (801c450 <HAL_PWR_PVDCallback+0x250>)
 801c410:	2200      	movs	r2, #0
 801c412:	701a      	strb	r2, [r3, #0]
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801c414:	4b15      	ldr	r3, [pc, #84]	@ (801c46c <HAL_PWR_PVDCallback+0x26c>)
 801c416:	2200      	movs	r2, #0
 801c418:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);  		// SendTxData
 801c41a:	2100      	movs	r1, #0
 801c41c:	2010      	movs	r0, #16
 801c41e:	f7fe fbdd 	bl	801abdc <UTIL_SEQ_SetTask>
			break;
 801c422:	e00b      	b.n	801c43c <HAL_PWR_PVDCallback+0x23c>
			my_Current_State = EHS;  											// Set Current State as EHS
 801c424:	4b08      	ldr	r3, [pc, #32]	@ (801c448 <HAL_PWR_PVDCallback+0x248>)
 801c426:	2203      	movs	r2, #3
 801c428:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;												// Set Next State as SMS
 801c42a:	4b06      	ldr	r3, [pc, #24]	@ (801c444 <HAL_PWR_PVDCallback+0x244>)
 801c42c:	2207      	movs	r2, #7
 801c42e:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  		// My_SMF -- SMF = Sensors Measurement Function
 801c430:	2100      	movs	r1, #0
 801c432:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c436:	f7fe fbd1 	bl	801abdc <UTIL_SEQ_SetTask>
			break;
 801c43a:	bf00      	nop
}
 801c43c:	bf00      	nop
 801c43e:	bd80      	pop	{r7, pc}
 801c440:	2000074c 	.word	0x2000074c
 801c444:	20000638 	.word	0x20000638
 801c448:	20001be9 	.word	0x20001be9
 801c44c:	200008a7 	.word	0x200008a7
 801c450:	20001bba 	.word	0x20001bba
 801c454:	20001bea 	.word	0x20001bea
 801c458:	20001bc0 	.word	0x20001bc0
 801c45c:	08021f8c 	.word	0x08021f8c
 801c460:	20001b40 	.word	0x20001b40
 801c464:	20001bbc 	.word	0x20001bbc
 801c468:	20001bc2 	.word	0x20001bc2
 801c46c:	20001bbd 	.word	0x20001bbd
 801c470:	20001bbe 	.word	0x20001bbe
 801c474:	20001bbf 	.word	0x20001bbf

0801c478 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)	// LPTIM Callback
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	b082      	sub	sp, #8
 801c47c:	af00      	add	r7, sp, #0
 801c47e:	6078      	str	r0, [r7, #4]
	if(hlptim->Instance == LPTIM1)
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	4a36      	ldr	r2, [pc, #216]	@ (801c560 <HAL_LPTIM_AutoReloadMatchCallback+0xe8>)
 801c486:	4293      	cmp	r3, r2
 801c488:	d166      	bne.n	801c558 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
	{
		switch(my_Current_State)
 801c48a:	4b36      	ldr	r3, [pc, #216]	@ (801c564 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c48c:	781b      	ldrb	r3, [r3, #0]
 801c48e:	3b03      	subs	r3, #3
 801c490:	2b03      	cmp	r3, #3
 801c492:	d854      	bhi.n	801c53e <HAL_LPTIM_AutoReloadMatchCallback+0xc6>
 801c494:	a201      	add	r2, pc, #4	@ (adr r2, 801c49c <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 801c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c49a:	bf00      	nop
 801c49c:	0801c4ad 	.word	0x0801c4ad
 801c4a0:	0801c4eb 	.word	0x0801c4eb
 801c4a4:	0801c515 	.word	0x0801c515
 801c4a8:	0801c523 	.word	0x0801c523
		{
		case EHS: 															// EHS = Energy Harvesting State
		{
			switch (my_Next_State)
 801c4ac:	4b2e      	ldr	r3, [pc, #184]	@ (801c568 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c4ae:	781b      	ldrb	r3, [r3, #0]
 801c4b0:	2b04      	cmp	r3, #4
 801c4b2:	d10d      	bne.n	801c4d0 <HAL_LPTIM_AutoReloadMatchCallback+0x58>
			{
			case ESS:
			{

#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS; 										// 	ESS --> SMS
 801c4b4:	4b2c      	ldr	r3, [pc, #176]	@ (801c568 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c4b6:	2207      	movs	r2, #7
 801c4b8:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS; 										// ESS -->  RTS
#endif

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801c4ba:	2001      	movs	r0, #1
 801c4bc:	f000 fc48 	bl	801cd50 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);								// Stop ESW Timer
 801c4c0:	2001      	movs	r0, #1
 801c4c2:	f000 fbbd 	bl	801cc40 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801c4c6:	2100      	movs	r1, #0
 801c4c8:	2020      	movs	r0, #32
 801c4ca:	f7fe fb87 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c4ce:	e00b      	b.n	801c4e8 <HAL_LPTIM_AutoReloadMatchCallback+0x70>
			}

			default:
			{
				my_Current_State = EHS;  									// Set Current State as EHS
 801c4d0:	4b24      	ldr	r3, [pc, #144]	@ (801c564 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c4d2:	2203      	movs	r2, #3
 801c4d4:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;										// Set Next State as SMS
 801c4d6:	4b24      	ldr	r3, [pc, #144]	@ (801c568 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c4d8:	2207      	movs	r2, #7
 801c4da:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801c4dc:	2100      	movs	r1, #0
 801c4de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c4e2:	f7fe fb7b 	bl	801abdc <UTIL_SEQ_SetTask>
				break;
 801c4e6:	bf00      	nop
			}
			}

			break;
 801c4e8:	e036      	b.n	801c558 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case ESS:															// ESS = Energy Storage State
		{
			if (my_Cmode != DCM)
 801c4ea:	4b20      	ldr	r3, [pc, #128]	@ (801c56c <HAL_LPTIM_AutoReloadMatchCallback+0xf4>)
 801c4ec:	781b      	ldrb	r3, [r3, #0]
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d031      	beq.n	801c556 <HAL_LPTIM_AutoReloadMatchCallback+0xde>
			{
#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS;										// Set Next State as SMS: ESS --> EHS --> SMS
 801c4f2:	4b1d      	ldr	r3, [pc, #116]	@ (801c568 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c4f4:	2207      	movs	r2, #7
 801c4f6:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;										// Set Next State as RTS: ESS --> EHS --> RTS
#endif

				my_Current_State = EHS;										// Set Current State as EHS: ESS --> EHS
 801c4f8:	4b1a      	ldr	r3, [pc, #104]	@ (801c564 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c4fa:	2203      	movs	r2, #3
 801c4fc:	701a      	strb	r2, [r3, #0]

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801c4fe:	2001      	movs	r0, #1
 801c500:	f000 fc26 	bl	801cd50 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);									// Stop ESW Timer
 801c504:	2001      	movs	r0, #1
 801c506:	f000 fb9b 	bl	801cc40 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801c50a:	2100      	movs	r1, #0
 801c50c:	2020      	movs	r0, #32
 801c50e:	f7fe fb65 	bl	801abdc <UTIL_SEQ_SetTask>
			}
			break;
 801c512:	e020      	b.n	801c556 <HAL_LPTIM_AutoReloadMatchCallback+0xde>
		}

		case EMS:															// EMS = Energy Missing State
		{
			My_EDS_Timer(STOP_TIMER); 										// Stop the Energy Detection Timer
 801c514:	2001      	movs	r0, #1
 801c516:	f000 fbdf 	bl	801ccd8 <My_EDS_Timer>
			my_rm_failure_flag = 1; 										// Resistance Measurement in EMS State has failed because the LPTIM1 Interrupt has been triggered earlier than the COMP Interrupt
 801c51a:	4b15      	ldr	r3, [pc, #84]	@ (801c570 <HAL_LPTIM_AutoReloadMatchCallback+0xf8>)
 801c51c:	2201      	movs	r2, #1
 801c51e:	701a      	strb	r2, [r3, #0]
			break;
 801c520:	e01a      	b.n	801c558 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case EDS:															// EDS = Energy Detection State
		{
			My_EMS_to_EDS_Timer(START_TIMER); 								// Start the Timer for the Energy Presence Check (EDC)
 801c522:	2000      	movs	r0, #0
 801c524:	f000 fc36 	bl	801cd94 <My_EMS_to_EDS_Timer>
			My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the switch Between Vdd and ES Start Supplying from the Energy Storage Device (ESD)
 801c528:	2001      	movs	r0, #1
 801c52a:	f001 fa33 	bl	801d994 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
			My_VDD_to_VDDS2_Switch(Switch_OPEN);							// unBias the Sensors: Open the switch between VDD and VDDS2
#endif

			my_Current_State = EMS; 										// Set Current State as EMS: EDS --> EMS
 801c52e:	4b0d      	ldr	r3, [pc, #52]	@ (801c564 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c530:	2205      	movs	r2, #5
 801c532:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF -- Back to Harvest
 801c534:	2100      	movs	r1, #0
 801c536:	2020      	movs	r0, #32
 801c538:	f7fe fb50 	bl	801abdc <UTIL_SEQ_SetTask>
			break;
 801c53c:	e00c      	b.n	801c558 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		default:
		{
			my_Current_State = EHS;  										// Set Current State as EHS
 801c53e:	4b09      	ldr	r3, [pc, #36]	@ (801c564 <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801c540:	2203      	movs	r2, #3
 801c542:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;											// Set Next State as SMS
 801c544:	4b08      	ldr	r3, [pc, #32]	@ (801c568 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801c546:	2207      	movs	r2, #7
 801c548:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801c54a:	2100      	movs	r1, #0
 801c54c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c550:	f7fe fb44 	bl	801abdc <UTIL_SEQ_SetTask>
			break;
 801c554:	e000      	b.n	801c558 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
			break;
 801c556:	bf00      	nop
		}
		}
	}
}
 801c558:	bf00      	nop
 801c55a:	3708      	adds	r7, #8
 801c55c:	46bd      	mov	sp, r7
 801c55e:	bd80      	pop	{r7, pc}
 801c560:	40007c00 	.word	0x40007c00
 801c564:	20001be9 	.word	0x20001be9
 801c568:	20000638 	.word	0x20000638
 801c56c:	20001bea 	.word	0x20001bea
 801c570:	20001bc8 	.word	0x20001bc8

0801c574 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)			// RTC Alarm A CallBack
{
 801c574:	b580      	push	{r7, lr}
 801c576:	b082      	sub	sp, #8
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]

	switch(my_Current_State)
 801c57c:	4b11      	ldr	r3, [pc, #68]	@ (801c5c4 <HAL_RTC_AlarmAEventCallback+0x50>)
 801c57e:	781b      	ldrb	r3, [r3, #0]
 801c580:	2b05      	cmp	r3, #5
 801c582:	d002      	beq.n	801c58a <HAL_RTC_AlarmAEventCallback+0x16>
 801c584:	2b07      	cmp	r3, #7
 801c586:	d00e      	beq.n	801c5a6 <HAL_RTC_AlarmAEventCallback+0x32>
	default:
	{
#if MY_TX_OTAA
		UTIL_TIMER_IRQ_Handler();
#endif
		break;
 801c588:	e018      	b.n	801c5bc <HAL_RTC_AlarmAEventCallback+0x48>
		My_EMS_to_SMS_Timer(STOP_TIMER);							// Stop EMS to SMS Timer
 801c58a:	2001      	movs	r0, #1
 801c58c:	f000 fc24 	bl	801cdd8 <My_EMS_to_SMS_Timer>
		my_rtc_A_ems_flag = 0;
 801c590:	4b0d      	ldr	r3, [pc, #52]	@ (801c5c8 <HAL_RTC_AlarmAEventCallback+0x54>)
 801c592:	2200      	movs	r2, #0
 801c594:	701a      	strb	r2, [r3, #0]
		my_Current_State = EMS;										// Set Current State as EMS
 801c596:	4b0b      	ldr	r3, [pc, #44]	@ (801c5c4 <HAL_RTC_AlarmAEventCallback+0x50>)
 801c598:	2205      	movs	r2, #5
 801c59a:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801c59c:	2100      	movs	r1, #0
 801c59e:	2020      	movs	r0, #32
 801c5a0:	f7fe fb1c 	bl	801abdc <UTIL_SEQ_SetTask>
		break;
 801c5a4:	e00a      	b.n	801c5bc <HAL_RTC_AlarmAEventCallback+0x48>
		My_VDD_to_VDDS2_Switch(Switch_OPEN);						// unBias the Sensors: Open the switch between VDD and VDDS2
 801c5a6:	2000      	movs	r0, #0
 801c5a8:	f001 fa72 	bl	801da90 <My_VDD_to_VDDS2_Switch>
		my_Current_State = EHS;										// Set Current State as EHS
 801c5ac:	4b05      	ldr	r3, [pc, #20]	@ (801c5c4 <HAL_RTC_AlarmAEventCallback+0x50>)
 801c5ae:	2203      	movs	r2, #3
 801c5b0:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801c5b2:	2100      	movs	r1, #0
 801c5b4:	2020      	movs	r0, #32
 801c5b6:	f7fe fb11 	bl	801abdc <UTIL_SEQ_SetTask>
		break;
 801c5ba:	bf00      	nop
	}
	}
}
 801c5bc:	bf00      	nop
 801c5be:	3708      	adds	r7, #8
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	20001be9 	.word	0x20001be9
 801c5c8:	20001bbe 	.word	0x20001bbe

0801c5cc <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)	// RTC Alarm B CallBack
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b082      	sub	sp, #8
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
	switch (my_Current_State)
 801c5d4:	4b3e      	ldr	r3, [pc, #248]	@ (801c6d0 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c5d6:	781b      	ldrb	r3, [r3, #0]
 801c5d8:	2b05      	cmp	r3, #5
 801c5da:	d04e      	beq.n	801c67a <HAL_RTCEx_AlarmBEventCallback+0xae>
 801c5dc:	2b05      	cmp	r3, #5
 801c5de:	dc67      	bgt.n	801c6b0 <HAL_RTCEx_AlarmBEventCallback+0xe4>
 801c5e0:	2b03      	cmp	r3, #3
 801c5e2:	d034      	beq.n	801c64e <HAL_RTCEx_AlarmBEventCallback+0x82>
 801c5e4:	2b04      	cmp	r3, #4
 801c5e6:	d163      	bne.n	801c6b0 <HAL_RTCEx_AlarmBEventCallback+0xe4>
		/* The Time Measured by the RTC Alarm B Timer has gone beyond T_DCM_CCM
		 * The system switches from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM)
		 */

	{
		My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);						// Configures PVD at the Highest Voltage and Normal Mode
 801c5e8:	2100      	movs	r1, #0
 801c5ea:	200c      	movs	r0, #12
 801c5ec:	f000 ff36 	bl	801d45c <My_Set_PVD>
		My_HAL_Delay(100);												// Add Delay to settle PVD
 801c5f0:	2064      	movs	r0, #100	@ 0x64
 801c5f2:	f001 fa95 	bl	801db20 <My_HAL_Delay>

		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)						// If VDD is > VPS_CHECK and Internal Reference is Ready
 801c5f6:	4b37      	ldr	r3, [pc, #220]	@ (801c6d4 <HAL_RTCEx_AlarmBEventCallback+0x108>)
 801c5f8:	695b      	ldr	r3, [r3, #20]
 801c5fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d111      	bne.n	801c626 <HAL_RTCEx_AlarmBEventCallback+0x5a>
		{
			my_Check_ESD = 1;
 801c602:	4b35      	ldr	r3, [pc, #212]	@ (801c6d8 <HAL_RTCEx_AlarmBEventCallback+0x10c>)
 801c604:	2201      	movs	r2, #1
 801c606:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN);							// Open the VDD to ES Switch
 801c608:	2000      	movs	r0, #0
 801c60a:	f001 f9c3 	bl	801d994 <My_VDD_to_ES_Switch>
			my_Current_State = SMS;										// Set Current State as SMS
 801c60e:	4b30      	ldr	r3, [pc, #192]	@ (801c6d0 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c610:	2207      	movs	r2, #7
 801c612:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;										// Set Next State as SMS
 801c614:	4b31      	ldr	r3, [pc, #196]	@ (801c6dc <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801c616:	2207      	movs	r2, #7
 801c618:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0); 	// My_SMF = Sensors Measurement Function
 801c61a:	2100      	movs	r1, #0
 801c61c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c620:	f7fe fadc 	bl	801abdc <UTIL_SEQ_SetTask>
 801c624:	e00f      	b.n	801c646 <HAL_RTCEx_AlarmBEventCallback+0x7a>
		}
		else
		{
			my_Cmode = CCM;												// Switch to Continuous Charge Mode
 801c626:	4b2e      	ldr	r3, [pc, #184]	@ (801c6e0 <HAL_RTCEx_AlarmBEventCallback+0x114>)
 801c628:	2201      	movs	r2, #1
 801c62a:	701a      	strb	r2, [r3, #0]
			My_ESW_DCM_Timer(STOP_TIMER);								// Stop ESW DCM Timer
 801c62c:	2001      	movs	r0, #1
 801c62e:	f000 fae1 	bl	801cbf4 <My_ESW_DCM_Timer>
			My_ESW_CCM_Timer(START_TIMER);								// Start ESW CCM Timer
 801c632:	2000      	movs	r0, #0
 801c634:	f000 fb04 	bl	801cc40 <My_ESW_CCM_Timer>

			my_Current_State = ESS;										// System keeps Staying in Energy Storage State (ESS)
 801c638:	4b25      	ldr	r3, [pc, #148]	@ (801c6d0 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c63a:	2204      	movs	r2, #4
 801c63c:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0); 	// My_ESF = Energy Storage Function
 801c63e:	2100      	movs	r1, #0
 801c640:	2040      	movs	r0, #64	@ 0x40
 801c642:	f7fe facb 	bl	801abdc <UTIL_SEQ_SetTask>
		}

		My_DCM_to_CCM_Timer(STOP_TIMER);								// Stop DCM to CCM Timer
 801c646:	2001      	movs	r0, #1
 801c648:	f000 fb82 	bl	801cd50 <My_DCM_to_CCM_Timer>

		break;
 801c64c:	e03c      	b.n	801c6c8 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/* If RTC ALARM B is triggered during EHS: EHS --> EMS to manage Energy absence*/
	case EHS: 														// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(STOP_TIMER); 							// Stop EHS_to_EMS Timer
 801c64e:	2001      	movs	r0, #1
 801c650:	f000 fb5c 	bl	801cd0c <My_EHS_to_EMS_Timer>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Stop RTC A Alarm
 801c654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	f7eb f8a5 	bl	80077a8 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801c65e:	4b21      	ldr	r3, [pc, #132]	@ (801c6e4 <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801c660:	2200      	movs	r2, #0
 801c662:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801c664:	4b20      	ldr	r3, [pc, #128]	@ (801c6e8 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801c666:	2200      	movs	r2, #0
 801c668:	701a      	strb	r2, [r3, #0]

		my_Current_State = EMS;										// Set Current State as EMS: EHS --> EMS
 801c66a:	4b19      	ldr	r3, [pc, #100]	@ (801c6d0 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c66c:	2205      	movs	r2, #5
 801c66e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);  // My_EHF -- Back to Harvest
 801c670:	2100      	movs	r1, #0
 801c672:	2020      	movs	r0, #32
 801c674:	f7fe fab2 	bl	801abdc <UTIL_SEQ_SetTask>
		break;
 801c678:	e026      	b.n	801c6c8 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/*If the Alarm B has been Triggered during the EMS a EDS is performed */
	case EMS: 														// EMS = Energy missing State
	{
		My_VDD_to_ES_Switch(Switch_OPEN);							// Open The Switch Beteween Vdd and ES
 801c67a:	2000      	movs	r0, #0
 801c67c:	f001 f98a 	bl	801d994 <My_VDD_to_ES_Switch>

		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Deactivate Alarm A
 801c680:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c684:	6878      	ldr	r0, [r7, #4]
 801c686:	f7eb f88f 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);					// Deactivate Alarm B
 801c68a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c68e:	6878      	ldr	r0, [r7, #4]
 801c690:	f7eb f88a 	bl	80077a8 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801c694:	4b13      	ldr	r3, [pc, #76]	@ (801c6e4 <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801c696:	2200      	movs	r2, #0
 801c698:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801c69a:	4b13      	ldr	r3, [pc, #76]	@ (801c6e8 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801c69c:	2200      	movs	r2, #0
 801c69e:	701a      	strb	r2, [r3, #0]

		my_Current_State = EDS; 									// Set Current State as EDS: EMS --> EDS
 801c6a0:	4b0b      	ldr	r3, [pc, #44]	@ (801c6d0 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c6a2:	2206      	movs	r2, #6
 801c6a4:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF
 801c6a6:	2100      	movs	r1, #0
 801c6a8:	2020      	movs	r0, #32
 801c6aa:	f7fe fa97 	bl	801abdc <UTIL_SEQ_SetTask>
		break;
 801c6ae:	e00b      	b.n	801c6c8 <HAL_RTCEx_AlarmBEventCallback+0xfc>

	default:
	{

#if MY_TX_ABP
		my_Current_State = EHS;  									// Set Current State as EHS
 801c6b0:	4b07      	ldr	r3, [pc, #28]	@ (801c6d0 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801c6b2:	2203      	movs	r2, #3
 801c6b4:	701a      	strb	r2, [r3, #0]
		my_Next_State = SMS;										// Set Next State as SMS
 801c6b6:	4b09      	ldr	r3, [pc, #36]	@ (801c6dc <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801c6b8:	2207      	movs	r2, #7
 801c6ba:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801c6bc:	2100      	movs	r1, #0
 801c6be:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c6c2:	f7fe fa8b 	bl	801abdc <UTIL_SEQ_SetTask>
#endif
		break;
 801c6c6:	bf00      	nop
	}

	}
}
 801c6c8:	bf00      	nop
 801c6ca:	3708      	adds	r7, #8
 801c6cc:	46bd      	mov	sp, r7
 801c6ce:	bd80      	pop	{r7, pc}
 801c6d0:	20001be9 	.word	0x20001be9
 801c6d4:	58000400 	.word	0x58000400
 801c6d8:	20001bc0 	.word	0x20001bc0
 801c6dc:	20000638 	.word	0x20000638
 801c6e0:	20001bea 	.word	0x20001bea
 801c6e4:	20001bbf 	.word	0x20001bbf
 801c6e8:	20001bbe 	.word	0x20001bbe

0801c6ec <My_RTC_Init>:

/* CallBack Section End */
/*my rtc init*/
void My_RTC_Init(void)
{
 801c6ec:	b580      	push	{r7, lr}
 801c6ee:	b092      	sub	sp, #72	@ 0x48
 801c6f0:	af00      	add	r7, sp, #0
#if MY_RTC_INIT
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c6f2:	202a      	movs	r0, #42	@ 0x2a
 801c6f4:	f7e7 fbc1 	bl	8003e7a <HAL_NVIC_DisableIRQ>

	RTC_TimeTypeDef sTime = {0};
 801c6f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801c6fc:	2200      	movs	r2, #0
 801c6fe:	601a      	str	r2, [r3, #0]
 801c700:	605a      	str	r2, [r3, #4]
 801c702:	609a      	str	r2, [r3, #8]
 801c704:	60da      	str	r2, [r3, #12]
 801c706:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 801c708:	2300      	movs	r3, #0
 801c70a:	633b      	str	r3, [r7, #48]	@ 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 801c70c:	1d3b      	adds	r3, r7, #4
 801c70e:	222c      	movs	r2, #44	@ 0x2c
 801c710:	2100      	movs	r1, #0
 801c712:	4618      	mov	r0, r3
 801c714:	f004 f83e 	bl	8020794 <memset>
#define CFG_RTC_SYNCH_PRESCALER     (DIVR( LSE_VALUE, (CFG_RTC_ASYNCH_PRESCALER+1) ) - 1 )
	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 801c718:	4b3f      	ldr	r3, [pc, #252]	@ (801c818 <My_RTC_Init+0x12c>)
 801c71a:	4a40      	ldr	r2, [pc, #256]	@ (801c81c <My_RTC_Init+0x130>)
 801c71c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801c71e:	4b3e      	ldr	r3, [pc, #248]	@ (801c818 <My_RTC_Init+0x12c>)
 801c720:	2200      	movs	r2, #0
 801c722:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 801c724:	4b3c      	ldr	r3, [pc, #240]	@ (801c818 <My_RTC_Init+0x12c>)
 801c726:	220f      	movs	r2, #15
 801c728:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 801c72a:	4b3b      	ldr	r3, [pc, #236]	@ (801c818 <My_RTC_Init+0x12c>)
 801c72c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c730:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801c732:	4b39      	ldr	r3, [pc, #228]	@ (801c818 <My_RTC_Init+0x12c>)
 801c734:	2200      	movs	r2, #0
 801c736:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801c738:	4b37      	ldr	r3, [pc, #220]	@ (801c818 <My_RTC_Init+0x12c>)
 801c73a:	2200      	movs	r2, #0
 801c73c:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801c73e:	4b36      	ldr	r3, [pc, #216]	@ (801c818 <My_RTC_Init+0x12c>)
 801c740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801c744:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801c746:	4b34      	ldr	r3, [pc, #208]	@ (801c818 <My_RTC_Init+0x12c>)
 801c748:	2200      	movs	r2, #0
 801c74a:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801c74c:	4832      	ldr	r0, [pc, #200]	@ (801c818 <My_RTC_Init+0x12c>)
 801c74e:	f7ea fd19 	bl	8007184 <HAL_RTC_Init>
 801c752:	4603      	mov	r3, r0
 801c754:	2b00      	cmp	r3, #0
 801c756:	d001      	beq.n	801c75c <My_RTC_Init+0x70>
	{
		Error_Handler();
 801c758:	f7e4 fe68 	bl	800142c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 801c75c:	2300      	movs	r3, #0
 801c75e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	sTime.Minutes = 0;
 801c762:	2300      	movs	r3, #0
 801c764:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	sTime.Seconds = 0;
 801c768:	2300      	movs	r3, #0
 801c76a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	sTime.SubSeconds = 0x0;
 801c76e:	2300      	movs	r3, #0
 801c770:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c772:	2300      	movs	r3, #0
 801c774:	643b      	str	r3, [r7, #64]	@ 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c776:	2300      	movs	r3, #0
 801c778:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 801c77a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801c77e:	2200      	movs	r2, #0
 801c780:	4619      	mov	r1, r3
 801c782:	4825      	ldr	r0, [pc, #148]	@ (801c818 <My_RTC_Init+0x12c>)
 801c784:	f7ea fd80 	bl	8007288 <HAL_RTC_SetTime>
 801c788:	4603      	mov	r3, r0
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d001      	beq.n	801c792 <My_RTC_Init+0xa6>
	{
		Error_Handler();
 801c78e:	f7e4 fe4d 	bl	800142c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801c792:	2301      	movs	r3, #1
 801c794:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 801c798:	2301      	movs	r3, #1
 801c79a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	sDate.Date = 1;
 801c79e:	2301      	movs	r3, #1
 801c7a0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	sDate.Year = 0;
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801c7aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801c7ae:	2200      	movs	r2, #0
 801c7b0:	4619      	mov	r1, r3
 801c7b2:	4819      	ldr	r0, [pc, #100]	@ (801c818 <My_RTC_Init+0x12c>)
 801c7b4:	f7ea fe66 	bl	8007484 <HAL_RTC_SetDate>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d001      	beq.n	801c7c2 <My_RTC_Init+0xd6>
	{
		Error_Handler();
 801c7be:	f7e4 fe35 	bl	800142c <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0;
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0;
 801c7ca:	2300      	movs	r3, #0
 801c7cc:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0;
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801c7da:	2300      	movs	r3, #0
 801c7dc:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801c7de:	2300      	movs	r3, #0
 801c7e0:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801c7e2:	2300      	movs	r3, #0
 801c7e4:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = 1;
 801c7e6:	2301      	movs	r3, #1
 801c7e8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 801c7ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801c7f2:	1d3b      	adds	r3, r7, #4
 801c7f4:	2200      	movs	r2, #0
 801c7f6:	4619      	mov	r1, r3
 801c7f8:	4807      	ldr	r0, [pc, #28]	@ (801c818 <My_RTC_Init+0x12c>)
 801c7fa:	f7ea fec9 	bl	8007590 <HAL_RTC_SetAlarm_IT>
 801c7fe:	4603      	mov	r3, r0
 801c800:	2b00      	cmp	r3, #0
 801c802:	d001      	beq.n	801c808 <My_RTC_Init+0x11c>
	{
		Error_Handler();
 801c804:	f7e4 fe12 	bl	800142c <Error_Handler>
	}

	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c808:	202a      	movs	r0, #42	@ 0x2a
 801c80a:	f7e7 fb36 	bl	8003e7a <HAL_NVIC_DisableIRQ>
#endif
}
 801c80e:	bf00      	nop
 801c810:	3748      	adds	r7, #72	@ 0x48
 801c812:	46bd      	mov	sp, r7
 801c814:	bd80      	pop	{r7, pc}
 801c816:	bf00      	nop
 801c818:	20000750 	.word	0x20000750
 801c81c:	40002800 	.word	0x40002800

0801c820 <My_EHF>:

/* FSM Function Begin */

void My_EHF(void)	// EHF = Energy Harvesting Function
{
 801c820:	b580      	push	{r7, lr}
 801c822:	af00      	add	r7, sp, #0
	/*
	 * The EHF Function manages the Energy Harvesting feature of the system
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();										// Set all GPIO in Analog Mode
 801c824:	f000 fd4c 	bl	801d2c0 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 										// Clear all Pending Interrupts
 801c828:	2002      	movs	r0, #2
 801c82a:	f000 fe35 	bl	801d498 <My_Interrupts_Manager>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);										// Open VDD to ES Switch
 801c82e:	2000      	movs	r0, #0
 801c830:	f001 f8b0 	bl	801d994 <My_VDD_to_ES_Switch>
#endif

	switch (my_Current_State)
 801c834:	4b5e      	ldr	r3, [pc, #376]	@ (801c9b0 <My_EHF+0x190>)
 801c836:	781b      	ldrb	r3, [r3, #0]
 801c838:	3b02      	subs	r3, #2
 801c83a:	2b05      	cmp	r3, #5
 801c83c:	f200 80ae 	bhi.w	801c99c <My_EHF+0x17c>
 801c840:	a201      	add	r2, pc, #4	@ (adr r2, 801c848 <My_EHF+0x28>)
 801c842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c846:	bf00      	nop
 801c848:	0801c8af 	.word	0x0801c8af
 801c84c:	0801c861 	.word	0x0801c861
 801c850:	0801c911 	.word	0x0801c911
 801c854:	0801c937 	.word	0x0801c937
 801c858:	0801c98b 	.word	0x0801c98b
 801c85c:	0801c925 	.word	0x0801c925
	{
	case EHS:  																// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS timer
 801c860:	2000      	movs	r0, #0
 801c862:	f000 fa53 	bl	801cd0c <My_EHS_to_EMS_Timer>

		switch (my_Next_State)
 801c866:	4b53      	ldr	r3, [pc, #332]	@ (801c9b4 <My_EHF+0x194>)
 801c868:	781b      	ldrb	r3, [r3, #0]
 801c86a:	2b09      	cmp	r3, #9
 801c86c:	d012      	beq.n	801c894 <My_EHF+0x74>
 801c86e:	2b09      	cmp	r3, #9
 801c870:	dc16      	bgt.n	801c8a0 <My_EHF+0x80>
 801c872:	2b04      	cmp	r3, #4
 801c874:	d002      	beq.n	801c87c <My_EHF+0x5c>
 801c876:	2b07      	cmp	r3, #7
 801c878:	d006      	beq.n	801c888 <My_EHF+0x68>
 801c87a:	e011      	b.n	801c8a0 <My_EHF+0x80>
		{

		case ESS:
		{
			My_Enter_Stop2_Mode_WFI(VESS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801c87c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c880:	2008      	movs	r0, #8
 801c882:	f000 fd65 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
			break;
 801c886:	e011      	b.n	801c8ac <My_EHF+0x8c>
		}

		case SMS:
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801c888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c88c:	200c      	movs	r0, #12
 801c88e:	f000 fd5f 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
			break;
 801c892:	e00b      	b.n	801c8ac <My_EHF+0x8c>
		}
#if AI
		case AIS:
		{
			My_Enter_Stop2_Mode_WFI(VAIS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801c894:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c898:	200c      	movs	r0, #12
 801c89a:	f000 fd59 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
			break;
 801c89e:	e005      	b.n	801c8ac <My_EHF+0x8c>
		}
#endif

		default:
		{
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 			// Set Enter Stop2 Mode and WFI
 801c8a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c8a4:	200c      	movs	r0, #12
 801c8a6:	f000 fd53 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
			break;
 801c8aa:	bf00      	nop
		}
		}

		break;
 801c8ac:	e07d      	b.n	801c9aa <My_EHF+0x18a>
	}

	case RTS:  																// RTS = Radio Transmission State
	{
#if MY_ES_FEATURE_ENABLE  													// If the Energy Storage Feature is enabled
		if (++my_RTS_cnt >= N_LORA_TX)  									// If the number of transmissions has reached the threshold
 801c8ae:	4b42      	ldr	r3, [pc, #264]	@ (801c9b8 <My_EHF+0x198>)
 801c8b0:	781b      	ldrb	r3, [r3, #0]
 801c8b2:	3301      	adds	r3, #1
 801c8b4:	b2da      	uxtb	r2, r3
 801c8b6:	4b40      	ldr	r3, [pc, #256]	@ (801c9b8 <My_EHF+0x198>)
 801c8b8:	701a      	strb	r2, [r3, #0]
 801c8ba:	4b3f      	ldr	r3, [pc, #252]	@ (801c9b8 <My_EHF+0x198>)
 801c8bc:	781b      	ldrb	r3, [r3, #0]
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d017      	beq.n	801c8f2 <My_EHF+0xd2>
		{
			if (my_Cmode != EOC)											// If the Energy Storage Device (ESD) is NOT in End of Charge (EOC)
 801c8c2:	4b3e      	ldr	r3, [pc, #248]	@ (801c9bc <My_EHF+0x19c>)
 801c8c4:	781b      	ldrb	r3, [r3, #0]
 801c8c6:	2b02      	cmp	r3, #2
 801c8c8:	d006      	beq.n	801c8d8 <My_EHF+0xb8>
			{
				my_Current_State = EHS;  									// RTS --> EHS
 801c8ca:	4b39      	ldr	r3, [pc, #228]	@ (801c9b0 <My_EHF+0x190>)
 801c8cc:	2203      	movs	r2, #3
 801c8ce:	701a      	strb	r2, [r3, #0]
				my_Next_State = ESS;  										// RTS --> EHS --> ESS
 801c8d0:	4b38      	ldr	r3, [pc, #224]	@ (801c9b4 <My_EHF+0x194>)
 801c8d2:	2204      	movs	r2, #4
 801c8d4:	701a      	strb	r2, [r3, #0]
 801c8d6:	e008      	b.n	801c8ea <My_EHF+0xca>
			}
			else  															// If Energy Storage Device (ESD) is in End of Charge (EOC)
			{
				My_VDD_to_ES_Switch(Switch_OPEN);  							// Open the Vdd to ES Switch
 801c8d8:	2000      	movs	r0, #0
 801c8da:	f001 f85b 	bl	801d994 <My_VDD_to_ES_Switch>
				my_Current_State = EHS;  									// RTS --> EHS
 801c8de:	4b34      	ldr	r3, [pc, #208]	@ (801c9b0 <My_EHF+0x190>)
 801c8e0:	2203      	movs	r2, #3
 801c8e2:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE  													// If the Sensor Measurements Feature is enabled
				my_Next_State = SMS;										// RTS --> EHS --> SMS
 801c8e4:	4b33      	ldr	r3, [pc, #204]	@ (801c9b4 <My_EHF+0x194>)
 801c8e6:	2207      	movs	r2, #7
 801c8e8:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;  										// RTS --> EHS --> RTS
#endif
			}
			my_RTS_cnt = 0;  												// Reset the transmissions counter
 801c8ea:	4b33      	ldr	r3, [pc, #204]	@ (801c9b8 <My_EHF+0x198>)
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	701a      	strb	r2, [r3, #0]
 801c8f0:	e005      	b.n	801c8fe <My_EHF+0xde>
		}
		else  																// If the number of Radio transmissions is lower than N_LORA_TX
		{
			my_Current_State = EHS;  										// RTS --> EHS
 801c8f2:	4b2f      	ldr	r3, [pc, #188]	@ (801c9b0 <My_EHF+0x190>)
 801c8f4:	2203      	movs	r2, #3
 801c8f6:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  											// RTS --> EHS --> RTS
 801c8f8:	4b2e      	ldr	r3, [pc, #184]	@ (801c9b4 <My_EHF+0x194>)
 801c8fa:	2202      	movs	r2, #2
 801c8fc:	701a      	strb	r2, [r3, #0]
#else
		my_Next_State = RTS;  												// Set Following State as RTS
#endif
#endif

		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801c8fe:	2000      	movs	r0, #0
 801c900:	f000 fa04 	bl	801cd0c <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801c904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c908:	200c      	movs	r0, #12
 801c90a:	f000 fd21 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801c90e:	e04c      	b.n	801c9aa <My_EHF+0x18a>
	}

	case ESS:
	{
		if (my_Next_State == SMS)
 801c910:	4b28      	ldr	r3, [pc, #160]	@ (801c9b4 <My_EHF+0x194>)
 801c912:	781b      	ldrb	r3, [r3, #0]
 801c914:	2b07      	cmp	r3, #7
 801c916:	d147      	bne.n	801c9a8 <My_EHF+0x188>
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  	// Enter Stop2 Power Mode and Wait for Interrupt
 801c918:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c91c:	200c      	movs	r0, #12
 801c91e:	f000 fd17 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		}
		break;
 801c922:	e041      	b.n	801c9a8 <My_EHF+0x188>
	}

	case SMS:
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801c924:	2000      	movs	r0, #0
 801c926:	f000 f9f1 	bl	801cd0c <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  		// Enter Stop2 Power Mode and Wait for Interrupt
 801c92a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c92e:	200c      	movs	r0, #12
 801c930:	f000 fd0e 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801c934:	e039      	b.n	801c9aa <My_EHF+0x18a>
	}

	case EMS:  																// EMS = Energy Missing State
	{
		My_ESW_DCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801c936:	2001      	movs	r0, #1
 801c938:	f000 f95c 	bl	801cbf4 <My_ESW_DCM_Timer>
		My_ESW_CCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801c93c:	2001      	movs	r0, #1
 801c93e:	f000 f97f 	bl	801cc40 <My_ESW_CCM_Timer>
#if MY_LIS2DU12 && STEVAL_HARVEST1
		My_VDD_to_VDDS1_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
		My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801c942:	2000      	movs	r0, #0
 801c944:	f001 f8a4 	bl	801da90 <My_VDD_to_VDDS2_Switch>
#endif

#endif

		My_VDD_to_ES_Switch(Switch_CLOSED);  								// The system is supplied by the Energy Storage Device (ESD)
 801c948:	2001      	movs	r0, #1
 801c94a:	f001 f823 	bl	801d994 <My_VDD_to_ES_Switch>

		My_PVD_Delay();														// 2 sec delay
 801c94e:	f000 ffe5 	bl	801d91c <My_PVD_Delay>
		My_PVD_Delay();														// 2 sec delay
 801c952:	f000 ffe3 	bl	801d91c <My_PVD_Delay>

		if (my_rtc_B_ems_flag == 0)  										// Flag the occurrence of EDS
 801c956:	4b1a      	ldr	r3, [pc, #104]	@ (801c9c0 <My_EHF+0x1a0>)
 801c958:	781b      	ldrb	r3, [r3, #0]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d105      	bne.n	801c96a <My_EHF+0x14a>
		{
			My_EMS_to_EDS_Timer(START_TIMER);  								// Start an Energy Presence Check
 801c95e:	2000      	movs	r0, #0
 801c960:	f000 fa18 	bl	801cd94 <My_EMS_to_EDS_Timer>
			my_rtc_B_ems_flag = 1;
 801c964:	4b16      	ldr	r3, [pc, #88]	@ (801c9c0 <My_EHF+0x1a0>)
 801c966:	2201      	movs	r2, #1
 801c968:	701a      	strb	r2, [r3, #0]
		}

		if (my_rtc_A_ems_flag == 0)  										// Flag the occurrence of ems Measurement
 801c96a:	4b16      	ldr	r3, [pc, #88]	@ (801c9c4 <My_EHF+0x1a4>)
 801c96c:	781b      	ldrb	r3, [r3, #0]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d105      	bne.n	801c97e <My_EHF+0x15e>
		{
			My_EMS_to_SMS_Timer(START_TIMER);  								// Start the timer to move from EMS to SMS
 801c972:	2000      	movs	r0, #0
 801c974:	f000 fa30 	bl	801cdd8 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 1;
 801c978:	4b12      	ldr	r3, [pc, #72]	@ (801c9c4 <My_EHF+0x1a4>)
 801c97a:	2201      	movs	r2, #1
 801c97c:	701a      	strb	r2, [r3, #0]
		}

		My_Enter_Stop2_Mode_WFI(PVD_EMS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801c97e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c982:	2008      	movs	r0, #8
 801c984:	f000 fce4 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801c988:	e00f      	b.n	801c9aa <My_EHF+0x18a>
	}

	case EDS:  																// EDS = Energy Detection State
	{
		My_EDS_Timer(START_TIMER);  										// Start the EDS Timer
 801c98a:	2000      	movs	r0, #0
 801c98c:	f000 f9a4 	bl	801ccd8 <My_EDS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801c990:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c994:	200c      	movs	r0, #12
 801c996:	f000 fcdb 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801c99a:	e006      	b.n	801c9aa <My_EHF+0x18a>
	}

	default:
	{
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801c99c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c9a0:	200c      	movs	r0, #12
 801c9a2:	f000 fcd5 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801c9a6:	e000      	b.n	801c9aa <My_EHF+0x18a>
		break;
 801c9a8:	bf00      	nop
	}
	}
}
 801c9aa:	bf00      	nop
 801c9ac:	bd80      	pop	{r7, pc}
 801c9ae:	bf00      	nop
 801c9b0:	20001be9 	.word	0x20001be9
 801c9b4:	20000638 	.word	0x20000638
 801c9b8:	20001bba 	.word	0x20001bba
 801c9bc:	20001bea 	.word	0x20001bea
 801c9c0:	20001bbf 	.word	0x20001bbf
 801c9c4:	20001bbe 	.word	0x20001bbe

0801c9c8 <My_ESF>:
/*
 * The ESF Function performs the actions executed during the Energy Storage State (ESS).
 * In the Energy Storage State (ESS) the additional Energy Storage Device (ESD) gets charged.
 */

{
 801c9c8:	b580      	push	{r7, lr}
 801c9ca:	af00      	add	r7, sp, #0

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();									// Set all GPIO in Analog Mode
 801c9cc:	f000 fc78 	bl	801d2c0 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 									// Clear all Pending Interrupts
 801c9d0:	2002      	movs	r0, #2
 801c9d2:	f000 fd61 	bl	801d498 <My_Interrupts_Manager>
#endif

	my_Check_ESD = 0;													// Reset my_Check_ESD
 801c9d6:	4b43      	ldr	r3, [pc, #268]	@ (801cae4 <My_ESF+0x11c>)
 801c9d8:	2200      	movs	r2, #0
 801c9da:	701a      	strb	r2, [r3, #0]

	my_Current_State = ESS;												// Set Current State as Energy Storage State (ESS)
 801c9dc:	4b42      	ldr	r3, [pc, #264]	@ (801cae8 <My_ESF+0x120>)
 801c9de:	2204      	movs	r2, #4
 801c9e0:	701a      	strb	r2, [r3, #0]

	switch (my_Cmode)
 801c9e2:	4b42      	ldr	r3, [pc, #264]	@ (801caec <My_ESF+0x124>)
 801c9e4:	781b      	ldrb	r3, [r3, #0]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d002      	beq.n	801c9f0 <My_ESF+0x28>
 801c9ea:	2b01      	cmp	r3, #1
 801c9ec:	d027      	beq.n	801ca3e <My_ESF+0x76>
		break;
	}

	default:
	{
		break;
 801c9ee:	e077      	b.n	801cae0 <My_ESF+0x118>
		My_Interrupts_Manager(NVIC_DISABLE);							// Disable all the interrupts
 801c9f0:	2001      	movs	r0, #1
 801c9f2:	f000 fd51 	bl	801d498 <My_Interrupts_Manager>
		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable only interrupts for PVD During DCM
 801c9f6:	2001      	movs	r0, #1
 801c9f8:	f7e7 fa31 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		if (HAL_LPTIM_ReadCounter(&hlptim1) > T_ESW || (my_ESS_cnt >= DCM_MAX))
 801c9fc:	483c      	ldr	r0, [pc, #240]	@ (801caf0 <My_ESF+0x128>)
 801c9fe:	f001 fbb5 	bl	801e16c <HAL_LPTIM_ReadCounter>
 801ca02:	4603      	mov	r3, r0
 801ca04:	f241 4208 	movw	r2, #5128	@ 0x1408
 801ca08:	4293      	cmp	r3, r2
 801ca0a:	d803      	bhi.n	801ca14 <My_ESF+0x4c>
 801ca0c:	4b39      	ldr	r3, [pc, #228]	@ (801caf4 <My_ESF+0x12c>)
 801ca0e:	781b      	ldrb	r3, [r3, #0]
 801ca10:	2b04      	cmp	r3, #4
 801ca12:	d906      	bls.n	801ca22 <My_ESF+0x5a>
			My_ESW_DCM_Timer(STOP_TIMER);
 801ca14:	2001      	movs	r0, #1
 801ca16:	f000 f8ed 	bl	801cbf4 <My_ESW_DCM_Timer>
			my_Next_State = SMS;
 801ca1a:	4b37      	ldr	r3, [pc, #220]	@ (801caf8 <My_ESF+0x130>)
 801ca1c:	2207      	movs	r2, #7
 801ca1e:	701a      	strb	r2, [r3, #0]
 801ca20:	e002      	b.n	801ca28 <My_ESF+0x60>
			My_ESW_DCM_Timer(START_TIMER);								// Start the EWS DCM Timer
 801ca22:	2000      	movs	r0, #0
 801ca24:	f000 f8e6 	bl	801cbf4 <My_ESW_DCM_Timer>
		My_DCM_to_CCM_Timer(START_TIMER); 								// Start Timer to monitor DCM to CCM.
 801ca28:	2000      	movs	r0, #0
 801ca2a:	f000 f991 	bl	801cd50 <My_DCM_to_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801ca2e:	2001      	movs	r0, #1
 801ca30:	f000 ffb0 	bl	801d994 <My_VDD_to_ES_Switch>
		My_Enter_Stop2_Mode_WFI(VESS_LOW, PWR_PVD_MODE_IT_FALLING); 	// Set PVD to level VESS_LOW with Interrupt for Falling Vdd and Enter Stop2 Mode and Wait for Interrupt
 801ca34:	4931      	ldr	r1, [pc, #196]	@ (801cafc <My_ESF+0x134>)
 801ca36:	2002      	movs	r0, #2
 801ca38:	f000 fc8a 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801ca3c:	e050      	b.n	801cae0 <My_ESF+0x118>
		My_ESW_CCM_Timer(START_TIMER);									// Start the EWS CCM Timer
 801ca3e:	2000      	movs	r0, #0
 801ca40:	f000 f8fe 	bl	801cc40 <My_ESW_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801ca44:	2001      	movs	r0, #1
 801ca46:	f000 ffa5 	bl	801d994 <My_VDD_to_ES_Switch>
		My_Set_PVD(VEOC, PWR_PVD_MODE_NORMAL); 							// Set PVD in Normal Mode and VEOC
 801ca4a:	2100      	movs	r1, #0
 801ca4c:	2008      	movs	r0, #8
 801ca4e:	f000 fd05 	bl	801d45c <My_Set_PVD>
		My_PVD_Delay(); 												// Delay to allow the PVD to Settle
 801ca52:	f000 ff63 	bl	801d91c <My_PVD_Delay>
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 					// If the voltage across the Energy Storage Device (ESD) is higher than VEOC the System is in End of Charge (EOC)
 801ca56:	4b2a      	ldr	r3, [pc, #168]	@ (801cb00 <My_ESF+0x138>)
 801ca58:	695b      	ldr	r3, [r3, #20]
 801ca5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d11a      	bne.n	801ca98 <My_ESF+0xd0>
			my_Cmode = EOC; 											// Set Charging Mode in End of Charge (EOC)
 801ca62:	4b22      	ldr	r3, [pc, #136]	@ (801caec <My_ESF+0x124>)
 801ca64:	2202      	movs	r2, #2
 801ca66:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;										// Set Current State as Energy Harvesting State (EHS): ESS --> EHS
 801ca68:	4b1f      	ldr	r3, [pc, #124]	@ (801cae8 <My_ESF+0x120>)
 801ca6a:	2203      	movs	r2, #3
 801ca6c:	701a      	strb	r2, [r3, #0]
			My_EBK_status = 100;
 801ca6e:	4b25      	ldr	r3, [pc, #148]	@ (801cb04 <My_ESF+0x13c>)
 801ca70:	2264      	movs	r2, #100	@ 0x64
 801ca72:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS; 										// Set Next State as Radio Transmission State (RTS): ESS --> EHS --> SMS
 801ca74:	4b20      	ldr	r3, [pc, #128]	@ (801caf8 <My_ESF+0x130>)
 801ca76:	2207      	movs	r2, #7
 801ca78:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN); 							// Stop Charging: Open the Switch between Vdd and ES
 801ca7a:	2000      	movs	r0, #0
 801ca7c:	f000 ff8a 	bl	801d994 <My_VDD_to_ES_Switch>
			My_ESW_CCM_Timer(STOP_TIMER);								// Stop the Energy Storage Window (ESW) Timer
 801ca80:	2001      	movs	r0, #1
 801ca82:	f000 f8dd 	bl	801cc40 <My_ESW_CCM_Timer>
			My_EHS_to_EMS_Timer(START_TIMER); 							// Start the EHS to EMS Timer (Detects if Energy to Harvest is Missing)
 801ca86:	2000      	movs	r0, #0
 801ca88:	f000 f940 	bl	801cd0c <My_EHS_to_EMS_Timer>
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 		// Enter Stop 2 Power Mode and Wait for Interrupt
 801ca8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801ca90:	200c      	movs	r0, #12
 801ca92:	f000 fc5d 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801ca96:	e022      	b.n	801cade <My_ESF+0x116>
				My_Set_PVD(V2P2, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801ca98:	2100      	movs	r1, #0
 801ca9a:	2002      	movs	r0, #2
 801ca9c:	f000 fcde 	bl	801d45c <My_Set_PVD>
				My_PVD_Delay(); 										// Delay to allow the PVD to Settle
 801caa0:	f000 ff3c 	bl	801d91c <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P2
 801caa4:	4b16      	ldr	r3, [pc, #88]	@ (801cb00 <My_ESF+0x138>)
 801caa6:	695b      	ldr	r3, [r3, #20]
 801caa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801caac:	2b00      	cmp	r3, #0
 801caae:	d102      	bne.n	801cab6 <My_ESF+0xee>
					My_EBK_status = 33;
 801cab0:	4b14      	ldr	r3, [pc, #80]	@ (801cb04 <My_ESF+0x13c>)
 801cab2:	2221      	movs	r2, #33	@ 0x21
 801cab4:	701a      	strb	r2, [r3, #0]
				My_Set_PVD(V2P4, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801cab6:	2100      	movs	r1, #0
 801cab8:	2004      	movs	r0, #4
 801caba:	f000 fccf 	bl	801d45c <My_Set_PVD>
				My_PVD_Delay();
 801cabe:	f000 ff2d 	bl	801d91c <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P4
 801cac2:	4b0f      	ldr	r3, [pc, #60]	@ (801cb00 <My_ESF+0x138>)
 801cac4:	695b      	ldr	r3, [r3, #20]
 801cac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d102      	bne.n	801cad4 <My_ESF+0x10c>
					My_EBK_status = 66;
 801cace:	4b0d      	ldr	r3, [pc, #52]	@ (801cb04 <My_ESF+0x13c>)
 801cad0:	2242      	movs	r2, #66	@ 0x42
 801cad2:	701a      	strb	r2, [r3, #0]
				My_Enter_Stop2_Mode_WFI(VEOC, PWR_PVD_MODE_IT_RISING);	// Enter Stop2 Mode and Wait for Interrupt and wait for the charging to be completed
 801cad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801cad8:	2008      	movs	r0, #8
 801cada:	f000 fc39 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
		break;
 801cade:	bf00      	nop
	}
	}
}
 801cae0:	bf00      	nop
 801cae2:	bd80      	pop	{r7, pc}
 801cae4:	20001bc0 	.word	0x20001bc0
 801cae8:	20001be9 	.word	0x20001be9
 801caec:	20001bea 	.word	0x20001bea
 801caf0:	20001b40 	.word	0x20001b40
 801caf4:	20001bbb 	.word	0x20001bbb
 801caf8:	20000638 	.word	0x20000638
 801cafc:	00010002 	.word	0x00010002
 801cb00:	58000400 	.word	0x58000400
 801cb04:	20001bb9 	.word	0x20001bb9

0801cb08 <My_SMF>:

void My_SMF(void)	// SMF = Sensor Measurement Function
{
 801cb08:	b580      	push	{r7, lr}
 801cb0a:	af00      	add	r7, sp, #0
	 * SMF = Sensor Measurement Function
	 * The SMF Function Manages the Sensors
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 801cb0c:	f000 fbd8 	bl	801d2c0 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 								// Clear all Pending Interrupts
 801cb10:	2002      	movs	r0, #2
 801cb12:	f000 fcc1 	bl	801d498 <My_Interrupts_Manager>
#endif

	HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);								// Disable Interrupt for RTC_WKUP
 801cb16:	2003      	movs	r0, #3
 801cb18:	f7e7 f9af 	bl	8003e7a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);							// Disable Interrupt for RTC_Alarm_IRQn
 801cb1c:	202a      	movs	r0, #42	@ 0x2a
 801cb1e:	f7e7 f9ac 	bl	8003e7a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(LPTIM1_IRQn);								// Disable Interrupt for LPTIM1
 801cb22:	2027      	movs	r0, #39	@ 0x27
 801cb24:	f7e7 f9a9 	bl	8003e7a <HAL_NVIC_DisableIRQ>

	my_Current_State = SMS;											// Set Current State as SMS
 801cb28:	4b23      	ldr	r3, [pc, #140]	@ (801cbb8 <My_SMF+0xb0>)
 801cb2a:	2207      	movs	r2, #7
 801cb2c:	701a      	strb	r2, [r3, #0]
	My_SMW_Timer(START_TIMER);										// Start Sensor Measurement Window Timer
 801cb2e:	2000      	movs	r0, #0
 801cb30:	f000 f8ac 	bl	801cc8c <My_SMW_Timer>

	My_Set_PVD(VSMS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801cb34:	4921      	ldr	r1, [pc, #132]	@ (801cbbc <My_SMF+0xb4>)
 801cb36:	2004      	movs	r0, #4
 801cb38:	f000 fc90 	bl	801d45c <My_Set_PVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);	// Set Internal Voltage Regulator at 1.2 V
 801cb3c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801cb40:	f7e8 ff00 	bl	8005944 <HAL_PWREx_ControlVoltageScaling>
//	GPIO_InitStruct.Pin = GPIO_PIN_7;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	MX_GPIO_Init();
 801cb44:	f7e4 fbee 	bl	8001324 <MX_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, GPIO_PIN_SET);
 801cb48:	2201      	movs	r2, #1
 801cb4a:	2180      	movs	r1, #128	@ 0x80
 801cb4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cb50:	f7e7 fff6 	bl	8004b40 <HAL_GPIO_WritePin>
	My_HAL_Delay(40);
 801cb54:	2028      	movs	r0, #40	@ 0x28
 801cb56:	f000 ffe3 	bl	801db20 <My_HAL_Delay>
	My_SoilSensor_Get_Data();
 801cb5a:	f000 fb71 	bl	801d240 <My_SoilSensor_Get_Data>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 801cb5e:	2200      	movs	r2, #0
 801cb60:	2180      	movs	r1, #128	@ 0x80
 801cb62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cb66:	f7e7 ffeb 	bl	8004b40 <HAL_GPIO_WritePin>
	My_HAL_Delay(10);												// Add a Delay
	My_I2C_Init(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_CLOSED);							// Bias the Sensors: Close the switch between VDD and VDDS2 to Power Sensors
 801cb6a:	2001      	movs	r0, #1
 801cb6c:	f000 ff90 	bl	801da90 <My_VDD_to_VDDS2_Switch>
	My_HAL_Delay(10);												// Add a Delay
 801cb70:	200a      	movs	r0, #10
 801cb72:	f000 ffd5 	bl	801db20 <My_HAL_Delay>
	My_I2C_Init(MY_I2C2);											// Initialize I2C2
 801cb76:	2001      	movs	r0, #1
 801cb78:	f000 fa6e 	bl	801d058 <My_I2C_Init>
#endif

#if MY_SHT40 && STEVAL_HARVEST1
	My_SHT40_Get_Data();											// SHT40 Get Data
 801cb7c:	f000 faaa 	bl	801d0d4 <My_SHT40_Get_Data>
#if MY_LIS2DU12 && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C2);											// DeInitialize I2C2
 801cb80:	2001      	movs	r0, #1
 801cb82:	f000 fa8b 	bl	801d09c <My_I2C_Deinit>
#endif

#endif

	if (my_Cmode == DCM && my_Check_ESD == 0)						// If in DCM Mode --> Charge the Energy Backup Device
 801cb86:	4b0e      	ldr	r3, [pc, #56]	@ (801cbc0 <My_SMF+0xb8>)
 801cb88:	781b      	ldrb	r3, [r3, #0]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d107      	bne.n	801cb9e <My_SMF+0x96>
 801cb8e:	4b0d      	ldr	r3, [pc, #52]	@ (801cbc4 <My_SMF+0xbc>)
 801cb90:	781b      	ldrb	r3, [r3, #0]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d103      	bne.n	801cb9e <My_SMF+0x96>
	{
		My_VDD_to_ES_Switch(Switch_CLOSED);							// Charge the Energy Backup Device
 801cb96:	2001      	movs	r0, #1
 801cb98:	f000 fefc 	bl	801d994 <My_VDD_to_ES_Switch>
 801cb9c:	e003      	b.n	801cba6 <My_SMF+0x9e>
	}
	else
	{
		Radio.Rx(1);												// Turn the Radio in RX Mode
 801cb9e:	4b0a      	ldr	r3, [pc, #40]	@ (801cbc8 <My_SMF+0xc0>)
 801cba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cba2:	2001      	movs	r0, #1
 801cba4:	4798      	blx	r3
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801cba6:	2001      	movs	r0, #1
 801cba8:	f000 fc76 	bl	801d498 <My_Interrupts_Manager>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801cbac:	2001      	movs	r0, #1
 801cbae:	f7e7 f956 	bl	8003e5e <HAL_NVIC_EnableIRQ>
	__WFI();														// Wait for Interrupt From PVD
 801cbb2:	bf30      	wfi
}
 801cbb4:	bf00      	nop
 801cbb6:	bd80      	pop	{r7, pc}
 801cbb8:	20001be9 	.word	0x20001be9
 801cbbc:	00010002 	.word	0x00010002
 801cbc0:	20001bea 	.word	0x20001bea
 801cbc4:	20001bc0 	.word	0x20001bc0
 801cbc8:	08021f8c 	.word	0x08021f8c

0801cbcc <My_AIF>:

void My_AIF(void)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	af00      	add	r7, sp, #0
	My_Set_PVD(VAIS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801cbd0:	4907      	ldr	r1, [pc, #28]	@ (801cbf0 <My_AIF+0x24>)
 801cbd2:	2006      	movs	r0, #6
 801cbd4:	f000 fc42 	bl	801d45c <My_Set_PVD>
	//My_PVD_Delay();
	My_SMW_Timer(STOP_TIMER);
 801cbd8:	2001      	movs	r0, #1
 801cbda:	f000 f857 	bl	801cc8c <My_SMW_Timer>
	MX_X_CUBE_AI_Process();
 801cbde:	f7fe ff41 	bl	801ba64 <MX_X_CUBE_AI_Process>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801cbe2:	2100      	movs	r1, #0
 801cbe4:	2010      	movs	r0, #16
 801cbe6:	f7fd fff9 	bl	801abdc <UTIL_SEQ_SetTask>
}
 801cbea:	bf00      	nop
 801cbec:	bd80      	pop	{r7, pc}
 801cbee:	bf00      	nop
 801cbf0:	00010002 	.word	0x00010002

0801cbf4 <My_ESW_DCM_Timer>:


/* Timer Section Begin */

void My_ESW_DCM_Timer(My_Timer_td mode)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b082      	sub	sp, #8
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	4603      	mov	r3, r0
 801cbfc:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in DCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801cbfe:	79fb      	ldrb	r3, [r7, #7]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d10c      	bne.n	801cc1e <My_ESW_DCM_Timer+0x2a>
 801cc04:	4b0c      	ldr	r3, [pc, #48]	@ (801cc38 <My_ESW_DCM_Timer+0x44>)
 801cc06:	781b      	ldrb	r3, [r3, #0]
 801cc08:	1c5a      	adds	r2, r3, #1
 801cc0a:	b2d1      	uxtb	r1, r2
 801cc0c:	4a0a      	ldr	r2, [pc, #40]	@ (801cc38 <My_ESW_DCM_Timer+0x44>)
 801cc0e:	7011      	strb	r1, [r2, #0]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d104      	bne.n	801cc1e <My_ESW_DCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Energy Storage Window (ESW)
 801cc14:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801cc18:	4808      	ldr	r0, [pc, #32]	@ (801cc3c <My_ESW_DCM_Timer+0x48>)
 801cc1a:	f001 f93f 	bl	801de9c <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801cc1e:	79fb      	ldrb	r3, [r7, #7]
 801cc20:	2b01      	cmp	r3, #1
 801cc22:	d105      	bne.n	801cc30 <My_ESW_DCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801cc24:	4b04      	ldr	r3, [pc, #16]	@ (801cc38 <My_ESW_DCM_Timer+0x44>)
 801cc26:	2200      	movs	r2, #0
 801cc28:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801cc2a:	4804      	ldr	r0, [pc, #16]	@ (801cc3c <My_ESW_DCM_Timer+0x48>)
 801cc2c:	f001 f97a 	bl	801df24 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801cc30:	bf00      	nop
 801cc32:	3708      	adds	r7, #8
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bd80      	pop	{r7, pc}
 801cc38:	20001bbb 	.word	0x20001bbb
 801cc3c:	20001b40 	.word	0x20001b40

0801cc40 <My_ESW_CCM_Timer>:

void My_ESW_CCM_Timer(My_Timer_td mode)
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	b082      	sub	sp, #8
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	4603      	mov	r3, r0
 801cc48:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in CCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801cc4a:	79fb      	ldrb	r3, [r7, #7]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d10c      	bne.n	801cc6a <My_ESW_CCM_Timer+0x2a>
 801cc50:	4b0c      	ldr	r3, [pc, #48]	@ (801cc84 <My_ESW_CCM_Timer+0x44>)
 801cc52:	781b      	ldrb	r3, [r3, #0]
 801cc54:	1c5a      	adds	r2, r3, #1
 801cc56:	b2d1      	uxtb	r1, r2
 801cc58:	4a0a      	ldr	r2, [pc, #40]	@ (801cc84 <My_ESW_CCM_Timer+0x44>)
 801cc5a:	7011      	strb	r1, [r2, #0]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d104      	bne.n	801cc6a <My_ESW_CCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_ESW);
 801cc60:	f241 4108 	movw	r1, #5128	@ 0x1408
 801cc64:	4808      	ldr	r0, [pc, #32]	@ (801cc88 <My_ESW_CCM_Timer+0x48>)
 801cc66:	f001 f979 	bl	801df5c <HAL_LPTIM_Counter_Start_IT>
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif

	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801cc6a:	79fb      	ldrb	r3, [r7, #7]
 801cc6c:	2b01      	cmp	r3, #1
 801cc6e:	d105      	bne.n	801cc7c <My_ESW_CCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801cc70:	4b04      	ldr	r3, [pc, #16]	@ (801cc84 <My_ESW_CCM_Timer+0x44>)
 801cc72:	2200      	movs	r2, #0
 801cc74:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop_IT(&hlptim1); 			// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801cc76:	4804      	ldr	r0, [pc, #16]	@ (801cc88 <My_ESW_CCM_Timer+0x48>)
 801cc78:	f001 fa12 	bl	801e0a0 <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801cc7c:	bf00      	nop
 801cc7e:	3708      	adds	r7, #8
 801cc80:	46bd      	mov	sp, r7
 801cc82:	bd80      	pop	{r7, pc}
 801cc84:	20001bbb 	.word	0x20001bbb
 801cc88:	20001b40 	.word	0x20001b40

0801cc8c <My_SMW_Timer>:

void My_SMW_Timer(My_Timer_td mode)
{
 801cc8c:	b580      	push	{r7, lr}
 801cc8e:	b082      	sub	sp, #8
 801cc90:	af00      	add	r7, sp, #0
 801cc92:	4603      	mov	r3, r0
 801cc94:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_SMW that defines the Sensor Measure Window (SMW) */

	if ((mode == START_TIMER) && (my_SMS_cnt++ == 0))	// Start the Sensor Measurement Window (SMW) Timer
 801cc96:	79fb      	ldrb	r3, [r7, #7]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d10c      	bne.n	801ccb6 <My_SMW_Timer+0x2a>
 801cc9c:	4b0c      	ldr	r3, [pc, #48]	@ (801ccd0 <My_SMW_Timer+0x44>)
 801cc9e:	781b      	ldrb	r3, [r3, #0]
 801cca0:	1c5a      	adds	r2, r3, #1
 801cca2:	b2d1      	uxtb	r1, r2
 801cca4:	4a0a      	ldr	r2, [pc, #40]	@ (801ccd0 <My_SMW_Timer+0x44>)
 801cca6:	7011      	strb	r1, [r2, #0]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d104      	bne.n	801ccb6 <My_SMW_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Sensor Measurement Window (SMW)
 801ccac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801ccb0:	4808      	ldr	r0, [pc, #32]	@ (801ccd4 <My_SMW_Timer+0x48>)
 801ccb2:	f001 f8f3 	bl	801de9c <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Sensor Measurement Window (SMW) Timer
 801ccb6:	79fb      	ldrb	r3, [r7, #7]
 801ccb8:	2b01      	cmp	r3, #1
 801ccba:	d105      	bne.n	801ccc8 <My_SMW_Timer+0x3c>
	{
		my_SMS_cnt = 0;									// Reset my_SMS_cnt
 801ccbc:	4b04      	ldr	r3, [pc, #16]	@ (801ccd0 <My_SMW_Timer+0x44>)
 801ccbe:	2200      	movs	r2, #0
 801ccc0:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Sensor Measurement Window (SMW)
 801ccc2:	4804      	ldr	r0, [pc, #16]	@ (801ccd4 <My_SMW_Timer+0x48>)
 801ccc4:	f001 f92e 	bl	801df24 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801ccc8:	bf00      	nop
 801ccca:	3708      	adds	r7, #8
 801cccc:	46bd      	mov	sp, r7
 801ccce:	bd80      	pop	{r7, pc}
 801ccd0:	20001bbc 	.word	0x20001bbc
 801ccd4:	20001b40 	.word	0x20001b40

0801ccd8 <My_EDS_Timer>:

void My_EDS_Timer(My_Timer_td mode)
{
 801ccd8:	b580      	push	{r7, lr}
 801ccda:	b082      	sub	sp, #8
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	4603      	mov	r3, r0
 801cce0:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_EDS that defines the Energy Detection State time Window */

	if (mode == START_TIMER) // Start the Energy Detection State (EDS) Timer
 801cce2:	79fb      	ldrb	r3, [r7, #7]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d104      	bne.n	801ccf2 <My_EDS_Timer+0x1a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_EDS);
 801cce8:	f643 2198 	movw	r1, #15000	@ 0x3a98
 801ccec:	4806      	ldr	r0, [pc, #24]	@ (801cd08 <My_EDS_Timer+0x30>)
 801ccee:	f001 f935 	bl	801df5c <HAL_LPTIM_Counter_Start_IT>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop the Energy Detection State (EDS) Timer
 801ccf2:	79fb      	ldrb	r3, [r7, #7]
 801ccf4:	2b01      	cmp	r3, #1
 801ccf6:	d102      	bne.n	801ccfe <My_EDS_Timer+0x26>
	{
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 801ccf8:	4803      	ldr	r0, [pc, #12]	@ (801cd08 <My_EDS_Timer+0x30>)
 801ccfa:	f001 f9d1 	bl	801e0a0 <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801ccfe:	bf00      	nop
 801cd00:	3708      	adds	r7, #8
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bd80      	pop	{r7, pc}
 801cd06:	bf00      	nop
 801cd08:	20001b40 	.word	0x20001b40

0801cd0c <My_EHS_to_EMS_Timer>:

void My_EHS_to_EMS_Timer(My_Timer_td mode)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b082      	sub	sp, #8
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	4603      	mov	r3, r0
 801cd14:	71fb      	strb	r3, [r7, #7]
	 * This Function Starts and Stops the EHS to EMS Timer
	 * It starts an RCT Alarm B Timer to detect, if the energy to harvest is missing while the System is in Energy Harvesting State (EHS).
	 * If the Energy to Harvest is missing for a time longer than T_EHS_EMS the System switches from the Energy Harvesting State (EHS) into the Energy Missing State (EMS).
	 */

	if (mode == START_TIMER)
 801cd16:	79fb      	ldrb	r3, [r7, #7]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d10a      	bne.n	801cd32 <My_EHS_to_EMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cd1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd20:	480a      	ldr	r0, [pc, #40]	@ (801cd4c <My_EHS_to_EMS_Timer+0x40>)
 801cd22:	f7ea fd41 	bl	80077a8 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B	// Start EHS to EMS Timer
 801cd26:	2300      	movs	r3, #0
 801cd28:	2200      	movs	r2, #0
 801cd2a:	2104      	movs	r1, #4
 801cd2c:	2000      	movs	r0, #0
 801cd2e:	f000 fd05 	bl	801d73c <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801cd32:	79fb      	ldrb	r3, [r7, #7]
 801cd34:	2b01      	cmp	r3, #1
 801cd36:	d104      	bne.n	801cd42 <My_EHS_to_EMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cd38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd3c:	4803      	ldr	r0, [pc, #12]	@ (801cd4c <My_EHS_to_EMS_Timer+0x40>)
 801cd3e:	f7ea fd33 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}

}
 801cd42:	bf00      	nop
 801cd44:	3708      	adds	r7, #8
 801cd46:	46bd      	mov	sp, r7
 801cd48:	bd80      	pop	{r7, pc}
 801cd4a:	bf00      	nop
 801cd4c:	20000750 	.word	0x20000750

0801cd50 <My_DCM_to_CCM_Timer>:

void My_DCM_to_CCM_Timer(My_Timer_td mode)
{
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b082      	sub	sp, #8
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	4603      	mov	r3, r0
 801cd58:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts and Stops the RCT Alarm B Timer to detect, while in Energy Storage State (EHS), to measure the time T_DCM_CCM.
	 * The time T_DC_CCM, defines when to switch from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM).
	 */

	if (mode == START_TIMER)
 801cd5a:	79fb      	ldrb	r3, [r7, #7]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d10a      	bne.n	801cd76 <My_DCM_to_CCM_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cd60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd64:	480a      	ldr	r0, [pc, #40]	@ (801cd90 <My_DCM_to_CCM_Timer+0x40>)
 801cd66:	f7ea fd1f 	bl	80077a8 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	2207      	movs	r2, #7
 801cd6e:	2100      	movs	r1, #0
 801cd70:	2000      	movs	r0, #0
 801cd72:	f000 fce3 	bl	801d73c <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801cd76:	79fb      	ldrb	r3, [r7, #7]
 801cd78:	2b01      	cmp	r3, #1
 801cd7a:	d104      	bne.n	801cd86 <My_DCM_to_CCM_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cd7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd80:	4803      	ldr	r0, [pc, #12]	@ (801cd90 <My_DCM_to_CCM_Timer+0x40>)
 801cd82:	f7ea fd11 	bl	80077a8 <HAL_RTC_DeactivateAlarm>

#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801cd86:	bf00      	nop
 801cd88:	3708      	adds	r7, #8
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	bd80      	pop	{r7, pc}
 801cd8e:	bf00      	nop
 801cd90:	20000750 	.word	0x20000750

0801cd94 <My_EMS_to_EDS_Timer>:

void My_EMS_to_EDS_Timer(My_Timer_td mode)
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b082      	sub	sp, #8
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RCT Alarm B Timer to detect, while in Energy Missing State (EMS), to measure the time T_EMS_EDS.
	 * The time T_EMS_EDS, defines When to switch from Energy Missing State (EMS) to Energy Detection State (EDS), to perform an Energy presence check.
	 */

	if (mode == START_TIMER)
 801cd9e:	79fb      	ldrb	r3, [r7, #7]
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	d10a      	bne.n	801cdba <My_EMS_to_EDS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cda4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cda8:	480a      	ldr	r0, [pc, #40]	@ (801cdd4 <My_EMS_to_EDS_Timer+0x40>)
 801cdaa:	f7ea fcfd 	bl	80077a8 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801cdae:	2300      	movs	r3, #0
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	2102      	movs	r1, #2
 801cdb4:	2000      	movs	r0, #0
 801cdb6:	f000 fcc1 	bl	801d73c <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801cdba:	79fb      	ldrb	r3, [r7, #7]
 801cdbc:	2b01      	cmp	r3, #1
 801cdbe:	d104      	bne.n	801cdca <My_EMS_to_EDS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801cdc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cdc4:	4803      	ldr	r0, [pc, #12]	@ (801cdd4 <My_EMS_to_EDS_Timer+0x40>)
 801cdc6:	f7ea fcef 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801cdca:	bf00      	nop
 801cdcc:	3708      	adds	r7, #8
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	bd80      	pop	{r7, pc}
 801cdd2:	bf00      	nop
 801cdd4:	20000750 	.word	0x20000750

0801cdd8 <My_EMS_to_SMS_Timer>:

void My_EMS_to_SMS_Timer(My_Timer_td mode)
{
 801cdd8:	b580      	push	{r7, lr}
 801cdda:	b082      	sub	sp, #8
 801cddc:	af00      	add	r7, sp, #0
 801cdde:	4603      	mov	r3, r0
 801cde0:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RTC Alarm A Timer to periodically switch into the Sensor Measurement State (SMS)
	 * while the system is in the Energy Missing State (EMS)
	 * */

	if (mode == START_TIMER)
 801cde2:	79fb      	ldrb	r3, [r7, #7]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d10a      	bne.n	801cdfe <My_EMS_to_SMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801cde8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801cdec:	480a      	ldr	r0, [pc, #40]	@ (801ce18 <My_EMS_to_SMS_Timer+0x40>)
 801cdee:	f7ea fcdb 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
		My_Set_RTC_Alarm_A
 801cdf2:	2300      	movs	r3, #0
 801cdf4:	221e      	movs	r2, #30
 801cdf6:	2100      	movs	r1, #0
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	f000 fc4f 	bl	801d69c <My_Set_RTC_Alarm_A>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to SMS Timer
 801cdfe:	79fb      	ldrb	r3, [r7, #7]
 801ce00:	2b01      	cmp	r3, #1
 801ce02:	d104      	bne.n	801ce0e <My_EMS_to_SMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801ce04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ce08:	4803      	ldr	r0, [pc, #12]	@ (801ce18 <My_EMS_to_SMS_Timer+0x40>)
 801ce0a:	f7ea fccd 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_OPEN);
#endif
	}
}
 801ce0e:	bf00      	nop
 801ce10:	3708      	adds	r7, #8
 801ce12:	46bd      	mov	sp, r7
 801ce14:	bd80      	pop	{r7, pc}
 801ce16:	bf00      	nop
 801ce18:	20000750 	.word	0x20000750

0801ce1c <My_MX_I2C1_Init>:


/* Sensor Section Begin */

HAL_StatusTypeDef My_MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b084      	sub	sp, #16
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801ce24:	2300      	movs	r3, #0
 801ce26:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C1;
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	4a1c      	ldr	r2, [pc, #112]	@ (801ce9c <My_MX_I2C1_Init+0x80>)
 801ce2c:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	4a1b      	ldr	r2, [pc, #108]	@ (801cea0 <My_MX_I2C1_Init+0x84>)
 801ce32:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2200      	movs	r2, #0
 801ce38:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	2201      	movs	r2, #1
 801ce3e:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2200      	movs	r2, #0
 801ce44:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	2200      	movs	r2, #0
 801ce4a:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2200      	movs	r2, #0
 801ce50:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	2200      	movs	r2, #0
 801ce56:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801ce5e:	6878      	ldr	r0, [r7, #4]
 801ce60:	f7e7 fea8 	bl	8004bb4 <HAL_I2C_Init>
 801ce64:	4603      	mov	r3, r0
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d001      	beq.n	801ce6e <My_MX_I2C1_Init+0x52>
	{
		ret = HAL_ERROR;
 801ce6a:	2301      	movs	r3, #1
 801ce6c:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801ce6e:	2100      	movs	r1, #0
 801ce70:	6878      	ldr	r0, [r7, #4]
 801ce72:	f7e8 fb8b 	bl	800558c <HAL_I2CEx_ConfigAnalogFilter>
 801ce76:	4603      	mov	r3, r0
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d001      	beq.n	801ce80 <My_MX_I2C1_Init+0x64>
	{
		ret = HAL_ERROR;
 801ce7c:	2301      	movs	r3, #1
 801ce7e:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801ce80:	2100      	movs	r1, #0
 801ce82:	6878      	ldr	r0, [r7, #4]
 801ce84:	f7e8 fbcc 	bl	8005620 <HAL_I2CEx_ConfigDigitalFilter>
 801ce88:	4603      	mov	r3, r0
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d001      	beq.n	801ce92 <My_MX_I2C1_Init+0x76>
	{
		ret = HAL_ERROR;
 801ce8e:	2301      	movs	r3, #1
 801ce90:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801ce92:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce94:	4618      	mov	r0, r3
 801ce96:	3710      	adds	r7, #16
 801ce98:	46bd      	mov	sp, r7
 801ce9a:	bd80      	pop	{r7, pc}
 801ce9c:	40005400 	.word	0x40005400
 801cea0:	9010deff 	.word	0x9010deff

0801cea4 <My_I2C1_MspInit>:

void My_I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801cea4:	b580      	push	{r7, lr}
 801cea6:	b096      	sub	sp, #88	@ 0x58
 801cea8:	af00      	add	r7, sp, #0
 801ceaa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ceac:	f107 030c 	add.w	r3, r7, #12
 801ceb0:	2238      	movs	r2, #56	@ 0x38
 801ceb2:	2100      	movs	r1, #0
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f003 fc6d 	bl	8020794 <memset>

	/* USER CODE END I2C1_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 801ceba:	2340      	movs	r3, #64	@ 0x40
 801cebc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801cebe:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 801cec2:	623b      	str	r3, [r7, #32]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801cec4:	f107 030c 	add.w	r3, r7, #12
 801cec8:	4618      	mov	r0, r3
 801ceca:	f7ea f841 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOB_CLK_ENABLE();
 801cece:	2002      	movs	r0, #2
 801ced0:	f7ff f942 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801ced4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801ced8:	647b      	str	r3, [r7, #68]	@ 0x44

	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801ceda:	2312      	movs	r3, #18
 801cedc:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801cede:	2301      	movs	r3, #1
 801cee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cee2:	2303      	movs	r3, #3
 801cee4:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801cee6:	2304      	movs	r3, #4
 801cee8:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ceea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ceee:	4619      	mov	r1, r3
 801cef0:	4805      	ldr	r0, [pc, #20]	@ (801cf08 <My_I2C1_MspInit+0x64>)
 801cef2:	f7e7 fbf7 	bl	80046e4 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 801cef6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801cefa:	f7ff f957 	bl	801c1ac <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C1_MspInit 1 */

	/* USER CODE END I2C1_MspInit 1 */
}
 801cefe:	bf00      	nop
 801cf00:	3758      	adds	r7, #88	@ 0x58
 801cf02:	46bd      	mov	sp, r7
 801cf04:	bd80      	pop	{r7, pc}
 801cf06:	bf00      	nop
 801cf08:	48000400 	.word	0x48000400

0801cf0c <My_I2C1_MspDeInit>:

void My_I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	b082      	sub	sp, #8
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C1_MspDeInit 0 */

	/* USER CODE END I2C1_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C1_CLK_DISABLE();
 801cf14:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801cf18:	f7ff f960 	bl	801c1dc <LL_APB1_GRP1_DisableClock>

	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 801cf1c:	2180      	movs	r1, #128	@ 0x80
 801cf1e:	4806      	ldr	r0, [pc, #24]	@ (801cf38 <My_I2C1_MspDeInit+0x2c>)
 801cf20:	f7e7 fd40 	bl	80049a4 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 801cf24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801cf28:	4803      	ldr	r0, [pc, #12]	@ (801cf38 <My_I2C1_MspDeInit+0x2c>)
 801cf2a:	f7e7 fd3b 	bl	80049a4 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C1_MspDeInit 1 */

	/* USER CODE END I2C1_MspDeInit 1 */
}
 801cf2e:	bf00      	nop
 801cf30:	3708      	adds	r7, #8
 801cf32:	46bd      	mov	sp, r7
 801cf34:	bd80      	pop	{r7, pc}
 801cf36:	bf00      	nop
 801cf38:	48000400 	.word	0x48000400

0801cf3c <My_MX_I2C2_Init>:


HAL_StatusTypeDef My_MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b084      	sub	sp, #16
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801cf44:	2300      	movs	r3, #0
 801cf46:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C2;
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	4a1c      	ldr	r2, [pc, #112]	@ (801cfbc <My_MX_I2C2_Init+0x80>)
 801cf4c:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	4a1b      	ldr	r2, [pc, #108]	@ (801cfc0 <My_MX_I2C2_Init+0x84>)
 801cf52:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	2200      	movs	r2, #0
 801cf58:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	2201      	movs	r2, #1
 801cf5e:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	2200      	movs	r2, #0
 801cf64:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	2200      	movs	r2, #0
 801cf6a:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	2200      	movs	r2, #0
 801cf70:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	2200      	movs	r2, #0
 801cf76:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801cf7e:	6878      	ldr	r0, [r7, #4]
 801cf80:	f7e7 fe18 	bl	8004bb4 <HAL_I2C_Init>
 801cf84:	4603      	mov	r3, r0
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	d001      	beq.n	801cf8e <My_MX_I2C2_Init+0x52>
	{
		ret = HAL_ERROR;
 801cf8a:	2301      	movs	r3, #1
 801cf8c:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801cf8e:	2100      	movs	r1, #0
 801cf90:	6878      	ldr	r0, [r7, #4]
 801cf92:	f7e8 fafb 	bl	800558c <HAL_I2CEx_ConfigAnalogFilter>
 801cf96:	4603      	mov	r3, r0
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d001      	beq.n	801cfa0 <My_MX_I2C2_Init+0x64>
	{
		ret = HAL_ERROR;
 801cf9c:	2301      	movs	r3, #1
 801cf9e:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801cfa0:	2100      	movs	r1, #0
 801cfa2:	6878      	ldr	r0, [r7, #4]
 801cfa4:	f7e8 fb3c 	bl	8005620 <HAL_I2CEx_ConfigDigitalFilter>
 801cfa8:	4603      	mov	r3, r0
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d001      	beq.n	801cfb2 <My_MX_I2C2_Init+0x76>
	{
		ret = HAL_ERROR;
 801cfae:	2301      	movs	r3, #1
 801cfb0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801cfb2:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	3710      	adds	r7, #16
 801cfb8:	46bd      	mov	sp, r7
 801cfba:	bd80      	pop	{r7, pc}
 801cfbc:	40005800 	.word	0x40005800
 801cfc0:	9010deff 	.word	0x9010deff

0801cfc4 <My_I2C2_MspInit>:

void My_I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b096      	sub	sp, #88	@ 0x58
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801cfcc:	f107 030c 	add.w	r3, r7, #12
 801cfd0:	2238      	movs	r2, #56	@ 0x38
 801cfd2:	2100      	movs	r1, #0
 801cfd4:	4618      	mov	r0, r3
 801cfd6:	f003 fbdd 	bl	8020794 <memset>

	/* USER CODE END I2C2_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801cfda:	2380      	movs	r3, #128	@ 0x80
 801cfdc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801cfde:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 801cfe2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801cfe4:	f107 030c 	add.w	r3, r7, #12
 801cfe8:	4618      	mov	r0, r3
 801cfea:	f7e9 ffb1 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 801cfee:	2001      	movs	r0, #1
 801cff0:	f7ff f8b2 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 801cff4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 801cff8:	647b      	str	r3, [r7, #68]	@ 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801cffa:	2312      	movs	r3, #18
 801cffc:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801cffe:	2301      	movs	r3, #1
 801d000:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d002:	2303      	movs	r3, #3
 801d004:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801d006:	2304      	movs	r3, #4
 801d008:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d00a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d00e:	4619      	mov	r1, r3
 801d010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d014:	f7e7 fb66 	bl	80046e4 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C2_CLK_ENABLE();
 801d018:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801d01c:	f7ff f8c6 	bl	801c1ac <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C2_MspInit 1 */

	/* USER CODE END I2C2_MspInit 1 */
}
 801d020:	bf00      	nop
 801d022:	3758      	adds	r7, #88	@ 0x58
 801d024:	46bd      	mov	sp, r7
 801d026:	bd80      	pop	{r7, pc}

0801d028 <My_I2C2_MspDeInit>:

void My_I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b082      	sub	sp, #8
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C2_MspDeInit 0 */

	/* USER CODE END I2C2_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C2_CLK_DISABLE();
 801d030:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801d034:	f7ff f8d2 	bl	801c1dc <LL_APB1_GRP1_DisableClock>

	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 801d038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801d03c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d040:	f7e7 fcb0 	bl	80049a4 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 801d044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801d048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d04c:	f7e7 fcaa 	bl	80049a4 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C2_MspDeInit 1 */

	/* USER CODE END I2C2_MspDeInit 1 */
}
 801d050:	bf00      	nop
 801d052:	3708      	adds	r7, #8
 801d054:	46bd      	mov	sp, r7
 801d056:	bd80      	pop	{r7, pc}

0801d058 <My_I2C_Init>:


void My_I2C_Init(My_I2C_td mode)
{
 801d058:	b580      	push	{r7, lr}
 801d05a:	b082      	sub	sp, #8
 801d05c:	af00      	add	r7, sp, #0
 801d05e:	4603      	mov	r3, r0
 801d060:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801d062:	79fb      	ldrb	r3, [r7, #7]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d002      	beq.n	801d06e <My_I2C_Init+0x16>
 801d068:	2b01      	cmp	r3, #1
 801d06a:	d007      	beq.n	801d07c <My_I2C_Init+0x24>
		break;
	}

	default:
	{
		break;
 801d06c:	e00d      	b.n	801d08a <My_I2C_Init+0x32>
		My_I2C1_MspInit(&hi2c1);
 801d06e:	4809      	ldr	r0, [pc, #36]	@ (801d094 <My_I2C_Init+0x3c>)
 801d070:	f7ff ff18 	bl	801cea4 <My_I2C1_MspInit>
		My_MX_I2C1_Init(&hi2c1);
 801d074:	4807      	ldr	r0, [pc, #28]	@ (801d094 <My_I2C_Init+0x3c>)
 801d076:	f7ff fed1 	bl	801ce1c <My_MX_I2C1_Init>
		break;
 801d07a:	e006      	b.n	801d08a <My_I2C_Init+0x32>
		My_I2C2_MspInit(&hi2c2);
 801d07c:	4806      	ldr	r0, [pc, #24]	@ (801d098 <My_I2C_Init+0x40>)
 801d07e:	f7ff ffa1 	bl	801cfc4 <My_I2C2_MspInit>
		My_MX_I2C2_Init(&hi2c2);
 801d082:	4805      	ldr	r0, [pc, #20]	@ (801d098 <My_I2C_Init+0x40>)
 801d084:	f7ff ff5a 	bl	801cf3c <My_MX_I2C2_Init>
		break;
 801d088:	bf00      	nop
	}
	}
}
 801d08a:	bf00      	nop
 801d08c:	3708      	adds	r7, #8
 801d08e:	46bd      	mov	sp, r7
 801d090:	bd80      	pop	{r7, pc}
 801d092:	bf00      	nop
 801d094:	20001c40 	.word	0x20001c40
 801d098:	20001c94 	.word	0x20001c94

0801d09c <My_I2C_Deinit>:

void My_I2C_Deinit(My_I2C_td mode)
{
 801d09c:	b580      	push	{r7, lr}
 801d09e:	b082      	sub	sp, #8
 801d0a0:	af00      	add	r7, sp, #0
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801d0a6:	79fb      	ldrb	r3, [r7, #7]
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d002      	beq.n	801d0b2 <My_I2C_Deinit+0x16>
 801d0ac:	2b01      	cmp	r3, #1
 801d0ae:	d004      	beq.n	801d0ba <My_I2C_Deinit+0x1e>
		break;
	}

	default:
	{
		break;
 801d0b0:	e007      	b.n	801d0c2 <My_I2C_Deinit+0x26>
		My_I2C1_MspDeInit(&hi2c1);
 801d0b2:	4806      	ldr	r0, [pc, #24]	@ (801d0cc <My_I2C_Deinit+0x30>)
 801d0b4:	f7ff ff2a 	bl	801cf0c <My_I2C1_MspDeInit>
		break;
 801d0b8:	e003      	b.n	801d0c2 <My_I2C_Deinit+0x26>
		My_I2C2_MspDeInit(&hi2c2);
 801d0ba:	4805      	ldr	r0, [pc, #20]	@ (801d0d0 <My_I2C_Deinit+0x34>)
 801d0bc:	f7ff ffb4 	bl	801d028 <My_I2C2_MspDeInit>
		break;
 801d0c0:	bf00      	nop
	}
	}
}
 801d0c2:	bf00      	nop
 801d0c4:	3708      	adds	r7, #8
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}
 801d0ca:	bf00      	nop
 801d0cc:	20001c40 	.word	0x20001c40
 801d0d0:	20001c94 	.word	0x20001c94

0801d0d4 <My_SHT40_Get_Data>:

#if MY_SHT40

void My_SHT40_Get_Data(void)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b086      	sub	sp, #24
 801d0d8:	af02      	add	r7, sp, #8
	my_SHT40_Temp = 0;																								// Reset my_SHT40_Temp
 801d0da:	4b4d      	ldr	r3, [pc, #308]	@ (801d210 <My_SHT40_Get_Data+0x13c>)
 801d0dc:	2200      	movs	r2, #0
 801d0de:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid = 0;																								// Reset my_SHT40_Humid
 801d0e0:	4b4c      	ldr	r3, [pc, #304]	@ (801d214 <My_SHT40_Get_Data+0x140>)
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	601a      	str	r2, [r3, #0]

	uint8_t SHT40_Raw_Data[6];																						// Define raw data vector
	memset(SHT40_Raw_Data, 0, sizeof(SHT40_Raw_Data));																// Initialize raw data vector
 801d0e6:	1d3b      	adds	r3, r7, #4
 801d0e8:	2206      	movs	r2, #6
 801d0ea:	2100      	movs	r1, #0
 801d0ec:	4618      	mov	r0, r3
 801d0ee:	f003 fb51 	bl	8020794 <memset>

	uint8_t SHT40_Measure_Cmd = SHT40_MEASURE_CMD_HP;																// Initialize SHT40 Address
 801d0f2:	23fd      	movs	r3, #253	@ 0xfd
 801d0f4:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, SHT40AD1B_I2C_ADDRESS, &SHT40_Measure_Cmd, 1, HAL_MAX_DELAY); 					// Transmit Data through I2C2
 801d0f6:	1cfa      	adds	r2, r7, #3
 801d0f8:	f04f 33ff 	mov.w	r3, #4294967295
 801d0fc:	9300      	str	r3, [sp, #0]
 801d0fe:	2301      	movs	r3, #1
 801d100:	2189      	movs	r1, #137	@ 0x89
 801d102:	4845      	ldr	r0, [pc, #276]	@ (801d218 <My_SHT40_Get_Data+0x144>)
 801d104:	f7e7 fdee 	bl	8004ce4 <HAL_I2C_Master_Transmit>

	My_HAL_Delay(25);																								// Add delay to ensure the sensor is ready to provide data
 801d108:	2019      	movs	r0, #25
 801d10a:	f000 fd09 	bl	801db20 <My_HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c2, SHT40AD1B_I2C_ADDRESS, SHT40_Raw_Data, sizeof(SHT40_Raw_Data), HAL_MAX_DELAY);	// Receive Data through I2C2
 801d10e:	1d3a      	adds	r2, r7, #4
 801d110:	f04f 33ff 	mov.w	r3, #4294967295
 801d114:	9300      	str	r3, [sp, #0]
 801d116:	2306      	movs	r3, #6
 801d118:	2189      	movs	r1, #137	@ 0x89
 801d11a:	483f      	ldr	r0, [pc, #252]	@ (801d218 <My_SHT40_Get_Data+0x144>)
 801d11c:	f7e7 fed6 	bl	8004ecc <HAL_I2C_Master_Receive>

	uint16_t SHT40_Raw_Temp = (SHT40_Raw_Data[0] << 8) | SHT40_Raw_Data[1];											// Temperature Data From SHT40
 801d120:	793b      	ldrb	r3, [r7, #4]
 801d122:	b21b      	sxth	r3, r3
 801d124:	021b      	lsls	r3, r3, #8
 801d126:	b21a      	sxth	r2, r3
 801d128:	797b      	ldrb	r3, [r7, #5]
 801d12a:	b21b      	sxth	r3, r3
 801d12c:	4313      	orrs	r3, r2
 801d12e:	b21b      	sxth	r3, r3
 801d130:	81fb      	strh	r3, [r7, #14]
	uint16_t SHT40_Raw_Humid = (SHT40_Raw_Data[3] << 8) | SHT40_Raw_Data[4];										// Relative Humidity (RH) From SHT40
 801d132:	79fb      	ldrb	r3, [r7, #7]
 801d134:	b21b      	sxth	r3, r3
 801d136:	021b      	lsls	r3, r3, #8
 801d138:	b21a      	sxth	r2, r3
 801d13a:	7a3b      	ldrb	r3, [r7, #8]
 801d13c:	b21b      	sxth	r3, r3
 801d13e:	4313      	orrs	r3, r2
 801d140:	b21b      	sxth	r3, r3
 801d142:	81bb      	strh	r3, [r7, #12]

//	float my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
//	float my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
	my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
 801d144:	89fb      	ldrh	r3, [r7, #14]
 801d146:	4618      	mov	r0, r3
 801d148:	f7e3 fb94 	bl	8000874 <__aeabi_ui2f>
 801d14c:	4603      	mov	r3, r0
 801d14e:	4933      	ldr	r1, [pc, #204]	@ (801d21c <My_SHT40_Get_Data+0x148>)
 801d150:	4618      	mov	r0, r3
 801d152:	f7e3 fc9b 	bl	8000a8c <__aeabi_fdiv>
 801d156:	4603      	mov	r3, r0
 801d158:	4931      	ldr	r1, [pc, #196]	@ (801d220 <My_SHT40_Get_Data+0x14c>)
 801d15a:	4618      	mov	r0, r3
 801d15c:	f7e3 fbe2 	bl	8000924 <__aeabi_fmul>
 801d160:	4603      	mov	r3, r0
 801d162:	4930      	ldr	r1, [pc, #192]	@ (801d224 <My_SHT40_Get_Data+0x150>)
 801d164:	4618      	mov	r0, r3
 801d166:	f7e3 fad3 	bl	8000710 <__aeabi_fsub>
 801d16a:	4603      	mov	r3, r0
 801d16c:	461a      	mov	r2, r3
 801d16e:	4b2e      	ldr	r3, [pc, #184]	@ (801d228 <My_SHT40_Get_Data+0x154>)
 801d170:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
 801d172:	89bb      	ldrh	r3, [r7, #12]
 801d174:	4618      	mov	r0, r3
 801d176:	f7e3 fb7d 	bl	8000874 <__aeabi_ui2f>
 801d17a:	4603      	mov	r3, r0
 801d17c:	4927      	ldr	r1, [pc, #156]	@ (801d21c <My_SHT40_Get_Data+0x148>)
 801d17e:	4618      	mov	r0, r3
 801d180:	f7e3 fc84 	bl	8000a8c <__aeabi_fdiv>
 801d184:	4603      	mov	r3, r0
 801d186:	4929      	ldr	r1, [pc, #164]	@ (801d22c <My_SHT40_Get_Data+0x158>)
 801d188:	4618      	mov	r0, r3
 801d18a:	f7e3 fbcb 	bl	8000924 <__aeabi_fmul>
 801d18e:	4603      	mov	r3, r0
 801d190:	4927      	ldr	r1, [pc, #156]	@ (801d230 <My_SHT40_Get_Data+0x15c>)
 801d192:	4618      	mov	r0, r3
 801d194:	f7e3 fabc 	bl	8000710 <__aeabi_fsub>
 801d198:	4603      	mov	r3, r0
 801d19a:	461a      	mov	r2, r3
 801d19c:	4b25      	ldr	r3, [pc, #148]	@ (801d234 <My_SHT40_Get_Data+0x160>)
 801d19e:	601a      	str	r2, [r3, #0]

	if (my_SHT40_Humid_Float > 100.0f)																				// Clamp Humidity values to valid range (0-100%)
 801d1a0:	4b24      	ldr	r3, [pc, #144]	@ (801d234 <My_SHT40_Get_Data+0x160>)
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	4924      	ldr	r1, [pc, #144]	@ (801d238 <My_SHT40_Get_Data+0x164>)
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f7e3 fd78 	bl	8000c9c <__aeabi_fcmpgt>
 801d1ac:	4603      	mov	r3, r0
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d002      	beq.n	801d1b8 <My_SHT40_Get_Data+0xe4>
	{
		my_SHT40_Humid_Float = 100.0f;
 801d1b2:	4b20      	ldr	r3, [pc, #128]	@ (801d234 <My_SHT40_Get_Data+0x160>)
 801d1b4:	4a20      	ldr	r2, [pc, #128]	@ (801d238 <My_SHT40_Get_Data+0x164>)
 801d1b6:	601a      	str	r2, [r3, #0]
	}

	if (my_SHT40_Humid_Float < 0.0f)																				// Clamp Humidity values to valid range (0-100%)
 801d1b8:	4b1e      	ldr	r3, [pc, #120]	@ (801d234 <My_SHT40_Get_Data+0x160>)
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	f04f 0100 	mov.w	r1, #0
 801d1c0:	4618      	mov	r0, r3
 801d1c2:	f7e3 fd4d 	bl	8000c60 <__aeabi_fcmplt>
 801d1c6:	4603      	mov	r3, r0
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d003      	beq.n	801d1d4 <My_SHT40_Get_Data+0x100>
	{
		my_SHT40_Humid_Float = 0.0f;
 801d1cc:	4b19      	ldr	r3, [pc, #100]	@ (801d234 <My_SHT40_Get_Data+0x160>)
 801d1ce:	f04f 0200 	mov.w	r2, #0
 801d1d2:	601a      	str	r2, [r3, #0]
	}

	my_SHT40_Temp =  (uint32_t)(10*my_SHT40_Temp_Float);															// Scale Temperature Value and convert to integer values
 801d1d4:	4b14      	ldr	r3, [pc, #80]	@ (801d228 <My_SHT40_Get_Data+0x154>)
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	4918      	ldr	r1, [pc, #96]	@ (801d23c <My_SHT40_Get_Data+0x168>)
 801d1da:	4618      	mov	r0, r3
 801d1dc:	f7e3 fba2 	bl	8000924 <__aeabi_fmul>
 801d1e0:	4603      	mov	r3, r0
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f7e3 fd8a 	bl	8000cfc <__aeabi_f2uiz>
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	4a09      	ldr	r2, [pc, #36]	@ (801d210 <My_SHT40_Get_Data+0x13c>)
 801d1ec:	6013      	str	r3, [r2, #0]
	my_SHT40_Humid = (uint32_t)(10*my_SHT40_Humid_Float);															// Scale Humidity Value and convert to integer values
 801d1ee:	4b11      	ldr	r3, [pc, #68]	@ (801d234 <My_SHT40_Get_Data+0x160>)
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	4912      	ldr	r1, [pc, #72]	@ (801d23c <My_SHT40_Get_Data+0x168>)
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f7e3 fb95 	bl	8000924 <__aeabi_fmul>
 801d1fa:	4603      	mov	r3, r0
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	f7e3 fd7d 	bl	8000cfc <__aeabi_f2uiz>
 801d202:	4603      	mov	r3, r0
 801d204:	4a03      	ldr	r2, [pc, #12]	@ (801d214 <My_SHT40_Get_Data+0x140>)
 801d206:	6013      	str	r3, [r2, #0]
}
 801d208:	bf00      	nop
 801d20a:	3710      	adds	r7, #16
 801d20c:	46bd      	mov	sp, r7
 801d20e:	bd80      	pop	{r7, pc}
 801d210:	20001bf8 	.word	0x20001bf8
 801d214:	20001bfc 	.word	0x20001bfc
 801d218:	20001c94 	.word	0x20001c94
 801d21c:	477fff00 	.word	0x477fff00
 801d220:	432f0000 	.word	0x432f0000
 801d224:	42340000 	.word	0x42340000
 801d228:	20001bf0 	.word	0x20001bf0
 801d22c:	42fa0000 	.word	0x42fa0000
 801d230:	40c00000 	.word	0x40c00000
 801d234:	20001bf4 	.word	0x20001bf4
 801d238:	42c80000 	.word	0x42c80000
 801d23c:	41200000 	.word	0x41200000

0801d240 <My_SoilSensor_Get_Data>:
#endif

#if MY_SoilSensor
void My_SoilSensor_Get_Data(void)
{
 801d240:	b580      	push	{r7, lr}
 801d242:	b082      	sub	sp, #8
 801d244:	af00      	add	r7, sp, #0
//	HAL_ADC_Start(&hadc);
//	HAL_ADC_PollForConversion(&hadc, 5000);
//	uint32_t adc_val = HAL_ADC_GetValue(&hadc);
//	HAL_ADC_Stop(&hadc);

	uint32_t adc_val = ADC_ReadChannels(ADC_CHANNEL_4);
 801d246:	4818      	ldr	r0, [pc, #96]	@ (801d2a8 <My_SoilSensor_Get_Data+0x68>)
 801d248:	f7e3 ffe4 	bl	8001214 <ADC_ReadChannels>
 801d24c:	6038      	str	r0, [r7, #0]
//	Convert the ADC value to a percentage
	float adc = (float)adc_val;
 801d24e:	6838      	ldr	r0, [r7, #0]
 801d250:	f7e3 fb10 	bl	8000874 <__aeabi_ui2f>
 801d254:	4603      	mov	r3, r0
 801d256:	607b      	str	r3, [r7, #4]
	if (adc > AIR_VALUE) adc = AIR_VALUE;
 801d258:	4914      	ldr	r1, [pc, #80]	@ (801d2ac <My_SoilSensor_Get_Data+0x6c>)
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f7e3 fd1e 	bl	8000c9c <__aeabi_fcmpgt>
 801d260:	4603      	mov	r3, r0
 801d262:	2b00      	cmp	r3, #0
 801d264:	d001      	beq.n	801d26a <My_SoilSensor_Get_Data+0x2a>
 801d266:	4b11      	ldr	r3, [pc, #68]	@ (801d2ac <My_SoilSensor_Get_Data+0x6c>)
 801d268:	607b      	str	r3, [r7, #4]
	if (adc < WATER_VALUE) adc = WATER_VALUE;
 801d26a:	4911      	ldr	r1, [pc, #68]	@ (801d2b0 <My_SoilSensor_Get_Data+0x70>)
 801d26c:	6878      	ldr	r0, [r7, #4]
 801d26e:	f7e3 fcf7 	bl	8000c60 <__aeabi_fcmplt>
 801d272:	4603      	mov	r3, r0
 801d274:	2b00      	cmp	r3, #0
 801d276:	d001      	beq.n	801d27c <My_SoilSensor_Get_Data+0x3c>
 801d278:	4b0d      	ldr	r3, [pc, #52]	@ (801d2b0 <My_SoilSensor_Get_Data+0x70>)
 801d27a:	607b      	str	r3, [r7, #4]
	my_SoilSensor = 100.0f * (AIR_VALUE - adc) / (AIR_VALUE - WATER_VALUE);
 801d27c:	6879      	ldr	r1, [r7, #4]
 801d27e:	480b      	ldr	r0, [pc, #44]	@ (801d2ac <My_SoilSensor_Get_Data+0x6c>)
 801d280:	f7e3 fa46 	bl	8000710 <__aeabi_fsub>
 801d284:	4603      	mov	r3, r0
 801d286:	490b      	ldr	r1, [pc, #44]	@ (801d2b4 <My_SoilSensor_Get_Data+0x74>)
 801d288:	4618      	mov	r0, r3
 801d28a:	f7e3 fb4b 	bl	8000924 <__aeabi_fmul>
 801d28e:	4603      	mov	r3, r0
 801d290:	4909      	ldr	r1, [pc, #36]	@ (801d2b8 <My_SoilSensor_Get_Data+0x78>)
 801d292:	4618      	mov	r0, r3
 801d294:	f7e3 fbfa 	bl	8000a8c <__aeabi_fdiv>
 801d298:	4603      	mov	r3, r0
 801d29a:	461a      	mov	r2, r3
 801d29c:	4b07      	ldr	r3, [pc, #28]	@ (801d2bc <My_SoilSensor_Get_Data+0x7c>)
 801d29e:	601a      	str	r2, [r3, #0]
}
 801d2a0:	bf00      	nop
 801d2a2:	3708      	adds	r7, #8
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	bd80      	pop	{r7, pc}
 801d2a8:	10000010 	.word	0x10000010
 801d2ac:	44eaebd7 	.word	0x44eaebd7
 801d2b0:	44a3a000 	.word	0x44a3a000
 801d2b4:	42c80000 	.word	0x42c80000
 801d2b8:	440e97ae 	.word	0x440e97ae
 801d2bc:	20001bec 	.word	0x20001bec

0801d2c0 <My_Set_All_GPIO_To_Analog_Mode>:
#endif

/* Sensor Section End */

void My_Set_All_GPIO_To_Analog_Mode(void)
{
 801d2c0:	b580      	push	{r7, lr}
 801d2c2:	b086      	sub	sp, #24
 801d2c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d2c6:	1d3b      	adds	r3, r7, #4
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	601a      	str	r2, [r3, #0]
 801d2cc:	605a      	str	r2, [r3, #4]
 801d2ce:	609a      	str	r2, [r3, #8]
 801d2d0:	60da      	str	r2, [r3, #12]
 801d2d2:	611a      	str	r2, [r3, #16]

	// Enable clocks for all available GPIO ports
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d2d4:	2001      	movs	r0, #1
 801d2d6:	f7fe ff3f 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d2da:	2002      	movs	r0, #2
 801d2dc:	f7fe ff3c 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d2e0:	2004      	movs	r0, #4
 801d2e2:	f7fe ff39 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d2e6:	2080      	movs	r0, #128	@ 0x80
 801d2e8:	f7fe ff36 	bl	801c158 <LL_AHB2_GRP1_EnableClock>

	// Configure all pins of the GPIO ports as analog to reduce power consumption
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d2ec:	2303      	movs	r3, #3
 801d2ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 801d2f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d2f8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d2fa:	1d3b      	adds	r3, r7, #4
 801d2fc:	4619      	mov	r1, r3
 801d2fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801d302:	f7e7 f9ef 	bl	80046e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801d306:	1d3b      	adds	r3, r7, #4
 801d308:	4619      	mov	r1, r3
 801d30a:	480e      	ldr	r0, [pc, #56]	@ (801d344 <My_Set_All_GPIO_To_Analog_Mode+0x84>)
 801d30c:	f7e7 f9ea 	bl	80046e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d310:	1d3b      	adds	r3, r7, #4
 801d312:	4619      	mov	r1, r3
 801d314:	480c      	ldr	r0, [pc, #48]	@ (801d348 <My_Set_All_GPIO_To_Analog_Mode+0x88>)
 801d316:	f7e7 f9e5 	bl	80046e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801d31a:	1d3b      	adds	r3, r7, #4
 801d31c:	4619      	mov	r1, r3
 801d31e:	480b      	ldr	r0, [pc, #44]	@ (801d34c <My_Set_All_GPIO_To_Analog_Mode+0x8c>)
 801d320:	f7e7 f9e0 	bl	80046e4 <HAL_GPIO_Init>

	// Disable clocks to save power
	__HAL_RCC_GPIOA_CLK_DISABLE();
 801d324:	2001      	movs	r0, #1
 801d326:	f7fe ff2f 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801d32a:	2002      	movs	r0, #2
 801d32c:	f7fe ff2c 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801d330:	2004      	movs	r0, #4
 801d332:	f7fe ff29 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801d336:	2080      	movs	r0, #128	@ 0x80
 801d338:	f7fe ff26 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
}
 801d33c:	bf00      	nop
 801d33e:	3718      	adds	r7, #24
 801d340:	46bd      	mov	sp, r7
 801d342:	bd80      	pop	{r7, pc}
 801d344:	48000400 	.word	0x48000400
 801d348:	48000800 	.word	0x48000800
 801d34c:	48001c00 	.word	0x48001c00

0801d350 <My_Enter_Stop2_Mode_WFI>:

void My_Enter_Stop2_Mode_WFI(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Enter in STOP2 MODE and Wait for Interrupts (WFI)
{
 801d350:	b580      	push	{r7, lr}
 801d352:	b082      	sub	sp, #8
 801d354:	af00      	add	r7, sp, #0
 801d356:	6078      	str	r0, [r7, #4]
 801d358:	6039      	str	r1, [r7, #0]

	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801d35a:	4a31      	ldr	r2, [pc, #196]	@ (801d420 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Config PVD to provide Interrupt
 801d360:	4a2f      	ldr	r2, [pc, #188]	@ (801d420 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801d362:	683b      	ldr	r3, [r7, #0]
 801d364:	6053      	str	r3, [r2, #4]

	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801d366:	482e      	ldr	r0, [pc, #184]	@ (801d420 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801d368:	f7e8 fa24 	bl	80057b4 <HAL_PWR_ConfigPVD>

	if (my_MX_GPIO_Init_done == 1)
 801d36c:	4b2d      	ldr	r3, [pc, #180]	@ (801d424 <My_Enter_Stop2_Mode_WFI+0xd4>)
 801d36e:	781b      	ldrb	r3, [r3, #0]
 801d370:	2b01      	cmp	r3, #1
 801d372:	d101      	bne.n	801d378 <My_Enter_Stop2_Mode_WFI+0x28>
	{
		BSP_RADIO_DeInit();											// Deinit the External Radio Amplifier
 801d374:	f7e5 fad2 	bl	800291c <BSP_RADIO_DeInit>
	}

	if (my_SystemClock_Config_done == 1)							// Check if the Clock System has been configured
 801d378:	4b2b      	ldr	r3, [pc, #172]	@ (801d428 <My_Enter_Stop2_Mode_WFI+0xd8>)
 801d37a:	781b      	ldrb	r3, [r3, #0]
 801d37c:	2b01      	cmp	r3, #1
 801d37e:	d104      	bne.n	801d38a <My_Enter_Stop2_Mode_WFI+0x3a>
	{
		HAL_SuspendTick();											// Suspend Tick increment of System Clock
 801d380:	f7e5 fbc0 	bl	8002b04 <HAL_SuspendTick>
		__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI); 	// Ensure that MSI is wake-up system clock
 801d384:	2000      	movs	r0, #0
 801d386:	f7fe fed4 	bl	801c132 <LL_RCC_SetClkAfterWakeFromStop>
	}

	if((LL_PWR_IsActiveFlag_C1SB() == 0) || (LL_PWR_IsActiveFlag_C2SB() == 0))
 801d38a:	f7fe fe7d 	bl	801c088 <LL_PWR_IsActiveFlag_C1SB>
 801d38e:	4603      	mov	r3, r0
 801d390:	2b00      	cmp	r3, #0
 801d392:	d004      	beq.n	801d39e <My_Enter_Stop2_Mode_WFI+0x4e>
 801d394:	f7fe fe8c 	bl	801c0b0 <LL_PWR_IsActiveFlag_C2SB>
 801d398:	4603      	mov	r3, r0
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d109      	bne.n	801d3b2 <My_Enter_Stop2_Mode_WFI+0x62>
	{
		LL_PWR_ClearFlag_C1STOP_C1STB();			  				// Clear standby and stop flags for CPU1
 801d39e:	f7fe fe9b 	bl	801c0d8 <LL_PWR_ClearFlag_C1STOP_C1STB>
		LL_PWR_ClearFlag_C2STOP_C2STB();							// Clear standby and stop flags for CPU2
 801d3a2:	f7fe fea5 	bl	801c0f0 <LL_PWR_ClearFlag_C2STOP_C2STB>
		LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN); 				// Set the lowest low-power mode for CPU2: shutdown mode
 801d3a6:	2007      	movs	r0, #7
 801d3a8:	f7fe fe58 	bl	801c05c <LL_C2_PWR_SetPowerMode>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);						// Set Low-Power mode for CPU1
 801d3ac:	2002      	movs	r0, #2
 801d3ae:	f7fe fe41 	bl	801c034 <LL_PWR_SetPowerMode>
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801d3b2:	2001      	movs	r0, #1
 801d3b4:	f000 f870 	bl	801d498 <My_Interrupts_Manager>
	HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);							// Clear Pending Bit for PVD
 801d3b8:	2001      	movs	r0, #1
 801d3ba:	f7e6 fd6c 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);						// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d3be:	202a      	movs	r0, #42	@ 0x2a
 801d3c0:	f7e6 fd69 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(COMP_IRQn);							// Clear Pending Bit for Comparator
 801d3c4:	2015      	movs	r0, #21
 801d3c6:	f7e6 fd66 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801d3ca:	4b18      	ldr	r3, [pc, #96]	@ (801d42c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d3d0:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801d3d2:	4b16      	ldr	r3, [pc, #88]	@ (801d42c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3d4:	2207      	movs	r2, #7
 801d3d6:	619a      	str	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801d3d8:	2001      	movs	r0, #1
 801d3da:	f7e6 fd40 	bl	8003e5e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);								// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801d3de:	202a      	movs	r0, #42	@ 0x2a
 801d3e0:	f7e6 fd3d 	bl	8003e5e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPTIM1_IRQn);								// Enable Interrupt for LPTIM1
 801d3e4:	2027      	movs	r0, #39	@ 0x27
 801d3e6:	f7e6 fd3a 	bl	8003e5e <HAL_NVIC_EnableIRQ>

	if (__HAL_PWR_GET_FLAG(PWR_CR1_LPR) == 1)						// Check if PWR_CR1_LPR is set (must be 0 in Stop2 Mode)
 801d3ea:	4b10      	ldr	r3, [pc, #64]	@ (801d42c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d3f0:	f003 0301 	and.w	r3, r3, #1
 801d3f4:	2b01      	cmp	r3, #1
 801d3f6:	d105      	bne.n	801d404 <My_Enter_Stop2_Mode_WFI+0xb4>
	{
		CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 							// LPR bit must be cleared to enter stop 2 mode.
 801d3f8:	4b0c      	ldr	r3, [pc, #48]	@ (801d42c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	4a0b      	ldr	r2, [pc, #44]	@ (801d42c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801d3fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801d402:	6013      	str	r3, [r2, #0]
	}

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);					// Enter STOP2 mode and WFI
 801d404:	2001      	movs	r0, #1
 801d406:	f7e8 fb5d 	bl	8005ac4 <HAL_PWREx_EnterSTOP2Mode>

	if (my_SubghzApp_Init_done == 0)
 801d40a:	4b09      	ldr	r3, [pc, #36]	@ (801d430 <My_Enter_Stop2_Mode_WFI+0xe0>)
 801d40c:	781b      	ldrb	r3, [r3, #0]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d101      	bne.n	801d416 <My_Enter_Stop2_Mode_WFI+0xc6>
	{
		My_Exit_Stop2_Mode_WFI();									// Exit From Stop2 Mode
 801d412:	f000 f80f 	bl	801d434 <My_Exit_Stop2_Mode_WFI>
	}
}
 801d416:	bf00      	nop
 801d418:	3708      	adds	r7, #8
 801d41a:	46bd      	mov	sp, r7
 801d41c:	bd80      	pop	{r7, pc}
 801d41e:	bf00      	nop
 801d420:	20001be0 	.word	0x20001be0
 801d424:	200008a4 	.word	0x200008a4
 801d428:	2000074c 	.word	0x2000074c
 801d42c:	58000400 	.word	0x58000400
 801d430:	200008a7 	.word	0x200008a7

0801d434 <My_Exit_Stop2_Mode_WFI>:

void My_Exit_Stop2_Mode_WFI(void)	// Exit Stop2 Mode After Interrupt
{
 801d434:	b580      	push	{r7, lr}
 801d436:	af00      	add	r7, sp, #0
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);		// Undervolting
 801d438:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801d43c:	f7e8 fa82 	bl	8005944 <HAL_PWREx_ControlVoltageScaling>
	My_Interrupts_Manager(NVIC_ENABLE);									// Re-Enable Interrupts
 801d440:	2000      	movs	r0, #0
 801d442:	f000 f829 	bl	801d498 <My_Interrupts_Manager>
	if (my_SystemClock_Config_done == 1)
 801d446:	4b04      	ldr	r3, [pc, #16]	@ (801d458 <My_Exit_Stop2_Mode_WFI+0x24>)
 801d448:	781b      	ldrb	r3, [r3, #0]
 801d44a:	2b01      	cmp	r3, #1
 801d44c:	d101      	bne.n	801d452 <My_Exit_Stop2_Mode_WFI+0x1e>
	{
		HAL_ResumeTick();												// Resume Tick Increment
 801d44e:	f7e5 fb67 	bl	8002b20 <HAL_ResumeTick>
	}
}
 801d452:	bf00      	nop
 801d454:	bd80      	pop	{r7, pc}
 801d456:	bf00      	nop
 801d458:	2000074c 	.word	0x2000074c

0801d45c <My_Set_PVD>:

void My_Set_PVD(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Sets PVD Threshold and Interrupt Modes
{
 801d45c:	b580      	push	{r7, lr}
 801d45e:	b082      	sub	sp, #8
 801d460:	af00      	add	r7, sp, #0
 801d462:	6078      	str	r0, [r7, #4]
 801d464:	6039      	str	r1, [r7, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801d466:	4b0a      	ldr	r3, [pc, #40]	@ (801d490 <My_Set_PVD+0x34>)
 801d468:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d46c:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801d46e:	4b08      	ldr	r3, [pc, #32]	@ (801d490 <My_Set_PVD+0x34>)
 801d470:	2207      	movs	r2, #7
 801d472:	619a      	str	r2, [r3, #24]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801d474:	4a07      	ldr	r2, [pc, #28]	@ (801d494 <My_Set_PVD+0x38>)
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Set PVD to provide Interrupt
 801d47a:	4a06      	ldr	r2, [pc, #24]	@ (801d494 <My_Set_PVD+0x38>)
 801d47c:	683b      	ldr	r3, [r7, #0]
 801d47e:	6053      	str	r3, [r2, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801d480:	4804      	ldr	r0, [pc, #16]	@ (801d494 <My_Set_PVD+0x38>)
 801d482:	f7e8 f997 	bl	80057b4 <HAL_PWR_ConfigPVD>
}
 801d486:	bf00      	nop
 801d488:	3708      	adds	r7, #8
 801d48a:	46bd      	mov	sp, r7
 801d48c:	bd80      	pop	{r7, pc}
 801d48e:	bf00      	nop
 801d490:	58000400 	.word	0x58000400
 801d494:	20001be0 	.word	0x20001be0

0801d498 <My_Interrupts_Manager>:

	__WFI(); 														// Wait for the Interrupt
}

void My_Interrupts_Manager(My_Interrupts_Manager_td My_Interrupts_Status)	// Enable or Disable IRQ
{
 801d498:	b580      	push	{r7, lr}
 801d49a:	b082      	sub	sp, #8
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	4603      	mov	r3, r0
 801d4a0:	71fb      	strb	r3, [r7, #7]
	switch (My_Interrupts_Status)
 801d4a2:	79fb      	ldrb	r3, [r7, #7]
 801d4a4:	2b02      	cmp	r3, #2
 801d4a6:	f000 80aa 	beq.w	801d5fe <My_Interrupts_Manager+0x166>
 801d4aa:	2b02      	cmp	r3, #2
 801d4ac:	f300 80f0 	bgt.w	801d690 <My_Interrupts_Manager+0x1f8>
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d033      	beq.n	801d51c <My_Interrupts_Manager+0x84>
 801d4b4:	2b01      	cmp	r3, #1
 801d4b6:	f040 80eb 	bne.w	801d690 <My_Interrupts_Manager+0x1f8>
	{
	case NVIC_DISABLE:
	{

		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801d4ba:	2001      	movs	r0, #1
 801d4bc:	f7e6 fcdd 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801d4c0:	2003      	movs	r0, #3
 801d4c2:	f7e6 fcda 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d4c6:	2002      	movs	r0, #2
 801d4c8:	f7e6 fcd7 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801d4cc:	200f      	movs	r0, #15
 801d4ce:	f7e6 fcd4 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801d4d2:	2025      	movs	r0, #37	@ 0x25
 801d4d4:	f7e6 fcd1 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801d4d8:	202a      	movs	r0, #42	@ 0x2a
 801d4da:	f7e6 fcce 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801d4de:	2032      	movs	r0, #50	@ 0x32
 801d4e0:	f7e6 fccb 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801d4e4:	2027      	movs	r0, #39	@ 0x27
 801d4e6:	f7e6 fcc8 	bl	8003e7a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801d4ea:	2001      	movs	r0, #1
 801d4ec:	f7e6 fcd3 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801d4f0:	2003      	movs	r0, #3
 801d4f2:	f7e6 fcd0 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d4f6:	2002      	movs	r0, #2
 801d4f8:	f7e6 fccd 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801d4fc:	200f      	movs	r0, #15
 801d4fe:	f7e6 fcca 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801d502:	2025      	movs	r0, #37	@ 0x25
 801d504:	f7e6 fcc7 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d508:	202a      	movs	r0, #42	@ 0x2a
 801d50a:	f7e6 fcc4 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801d50e:	2032      	movs	r0, #50	@ 0x32
 801d510:	f7e6 fcc1 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801d514:	2027      	movs	r0, #39	@ 0x27
 801d516:	f7e6 fcbe 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>

		break;
 801d51a:	e0ba      	b.n	801d692 <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_ENABLE:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801d51c:	2001      	movs	r0, #1
 801d51e:	f7e6 fcac 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801d522:	2003      	movs	r0, #3
 801d524:	f7e6 fca9 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d528:	2002      	movs	r0, #2
 801d52a:	f7e6 fca6 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801d52e:	200f      	movs	r0, #15
 801d530:	f7e6 fca3 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801d534:	2025      	movs	r0, #37	@ 0x25
 801d536:	f7e6 fca0 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801d53a:	202a      	movs	r0, #42	@ 0x2a
 801d53c:	f7e6 fc9d 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801d540:	2032      	movs	r0, #50	@ 0x32
 801d542:	f7e6 fc9a 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801d546:	2027      	movs	r0, #39	@ 0x27
 801d548:	f7e6 fc97 	bl	8003e7a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801d54c:	2001      	movs	r0, #1
 801d54e:	f7e6 fca2 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801d552:	2003      	movs	r0, #3
 801d554:	f7e6 fc9f 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d558:	2002      	movs	r0, #2
 801d55a:	f7e6 fc9c 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801d55e:	200f      	movs	r0, #15
 801d560:	f7e6 fc99 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801d564:	2025      	movs	r0, #37	@ 0x25
 801d566:	f7e6 fc96 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d56a:	202a      	movs	r0, #42	@ 0x2a
 801d56c:	f7e6 fc93 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801d570:	2032      	movs	r0, #50	@ 0x32
 801d572:	f7e6 fc90 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801d576:	2027      	movs	r0, #39	@ 0x27
 801d578:	f7e6 fc8d 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);							// Set Interrupt Priority
 801d57c:	2200      	movs	r2, #0
 801d57e:	2100      	movs	r1, #0
 801d580:	2001      	movs	r0, #1
 801d582:	f7e6 fc52 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);							// Set Interrupt Priority
 801d586:	2200      	movs	r2, #0
 801d588:	2101      	movs	r1, #1
 801d58a:	2003      	movs	r0, #3
 801d58c:	f7e6 fc4d 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 1, 0);			// Set Interrupt Priority
 801d590:	2200      	movs	r2, #0
 801d592:	2101      	movs	r1, #1
 801d594:	2002      	movs	r0, #2
 801d596:	f7e6 fc48 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);						// Set Interrupt Priority
 801d59a:	2200      	movs	r2, #0
 801d59c:	2101      	movs	r1, #1
 801d59e:	200f      	movs	r0, #15
 801d5a0:	f7e6 fc43 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);							// Set Interrupt Priority
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	2101      	movs	r1, #1
 801d5a8:	2025      	movs	r0, #37	@ 0x25
 801d5aa:	f7e6 fc3e 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);							// Set Interrupt Priority
 801d5ae:	2200      	movs	r2, #0
 801d5b0:	2101      	movs	r1, #1
 801d5b2:	202a      	movs	r0, #42	@ 0x2a
 801d5b4:	f7e6 fc39 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 1, 0);						// Set Interrupt Priority
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	2101      	movs	r1, #1
 801d5bc:	2032      	movs	r0, #50	@ 0x32
 801d5be:	f7e6 fc34 	bl	8003e2a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);							// Set Interrupt Priority
 801d5c2:	2200      	movs	r2, #0
 801d5c4:	2101      	movs	r1, #1
 801d5c6:	2027      	movs	r0, #39	@ 0x27
 801d5c8:	f7e6 fc2f 	bl	8003e2a <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801d5cc:	2001      	movs	r0, #1
 801d5ce:	f7e6 fc46 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801d5d2:	2003      	movs	r0, #3
 801d5d4:	f7e6 fc43 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d5d8:	2002      	movs	r0, #2
 801d5da:	f7e6 fc40 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d5de:	200f      	movs	r0, #15
 801d5e0:	f7e6 fc3d 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801d5e4:	2025      	movs	r0, #37	@ 0x25
 801d5e6:	f7e6 fc3a 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801d5ea:	202a      	movs	r0, #42	@ 0x2a
 801d5ec:	f7e6 fc37 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d5f0:	2032      	movs	r0, #50	@ 0x32
 801d5f2:	f7e6 fc34 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801d5f6:	2027      	movs	r0, #39	@ 0x27
 801d5f8:	f7e6 fc31 	bl	8003e5e <HAL_NVIC_EnableIRQ>

		break;
 801d5fc:	e049      	b.n	801d692 <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_CLEAR:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801d5fe:	2001      	movs	r0, #1
 801d600:	f7e6 fc3b 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801d604:	2003      	movs	r0, #3
 801d606:	f7e6 fc38 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d60a:	2002      	movs	r0, #2
 801d60c:	f7e6 fc35 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801d610:	200f      	movs	r0, #15
 801d612:	f7e6 fc32 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801d616:	2025      	movs	r0, #37	@ 0x25
 801d618:	f7e6 fc2f 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801d61c:	202a      	movs	r0, #42	@ 0x2a
 801d61e:	f7e6 fc2c 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801d622:	2032      	movs	r0, #50	@ 0x32
 801d624:	f7e6 fc29 	bl	8003e7a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801d628:	2027      	movs	r0, #39	@ 0x27
 801d62a:	f7e6 fc26 	bl	8003e7a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801d62e:	2001      	movs	r0, #1
 801d630:	f7e6 fc31 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801d634:	2003      	movs	r0, #3
 801d636:	f7e6 fc2e 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d63a:	2002      	movs	r0, #2
 801d63c:	f7e6 fc2b 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801d640:	200f      	movs	r0, #15
 801d642:	f7e6 fc28 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801d646:	2025      	movs	r0, #37	@ 0x25
 801d648:	f7e6 fc25 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801d64c:	202a      	movs	r0, #42	@ 0x2a
 801d64e:	f7e6 fc22 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801d652:	2032      	movs	r0, #50	@ 0x32
 801d654:	f7e6 fc1f 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801d658:	2027      	movs	r0, #39	@ 0x27
 801d65a:	f7e6 fc1c 	bl	8003e96 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801d65e:	2001      	movs	r0, #1
 801d660:	f7e6 fbfd 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801d664:	2003      	movs	r0, #3
 801d666:	f7e6 fbfa 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801d66a:	2002      	movs	r0, #2
 801d66c:	f7e6 fbf7 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d670:	200f      	movs	r0, #15
 801d672:	f7e6 fbf4 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801d676:	2025      	movs	r0, #37	@ 0x25
 801d678:	f7e6 fbf1 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801d67c:	202a      	movs	r0, #42	@ 0x2a
 801d67e:	f7e6 fbee 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801d682:	2032      	movs	r0, #50	@ 0x32
 801d684:	f7e6 fbeb 	bl	8003e5e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801d688:	2027      	movs	r0, #39	@ 0x27
 801d68a:	f7e6 fbe8 	bl	8003e5e <HAL_NVIC_EnableIRQ>

		break;
 801d68e:	e000      	b.n	801d692 <My_Interrupts_Manager+0x1fa>
	}

	default:
	{
		break;
 801d690:	bf00      	nop
	}

	}
}
 801d692:	bf00      	nop
 801d694:	3708      	adds	r7, #8
 801d696:	46bd      	mov	sp, r7
 801d698:	bd80      	pop	{r7, pc}
	...

0801d69c <My_Set_RTC_Alarm_A>:

void My_Set_RTC_Alarm_A(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801d69c:	b580      	push	{r7, lr}
 801d69e:	b082      	sub	sp, #8
 801d6a0:	af00      	add	r7, sp, #0
 801d6a2:	603b      	str	r3, [r7, #0]
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	71fb      	strb	r3, [r7, #7]
 801d6a8:	460b      	mov	r3, r1
 801d6aa:	71bb      	strb	r3, [r7, #6]
 801d6ac:	4613      	mov	r3, r2
 801d6ae:	717b      	strb	r3, [r7, #5]

	/* This function Sets the RTC ALARM A Timer */

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	491f      	ldr	r1, [pc, #124]	@ (801d730 <My_Set_RTC_Alarm_A+0x94>)
 801d6b4:	481f      	ldr	r0, [pc, #124]	@ (801d734 <My_Set_RTC_Alarm_A+0x98>)
 801d6b6:	f7e9 fe83 	bl	80073c0 <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours + my_hours;
 801d6ba:	4b1d      	ldr	r3, [pc, #116]	@ (801d730 <My_Set_RTC_Alarm_A+0x94>)
 801d6bc:	781a      	ldrb	r2, [r3, #0]
 801d6be:	79fb      	ldrb	r3, [r7, #7]
 801d6c0:	4413      	add	r3, r2
 801d6c2:	b2da      	uxtb	r2, r3
 801d6c4:	4b1c      	ldr	r3, [pc, #112]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d6c6:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = my_minutes + sTime.Minutes;
 801d6c8:	4b19      	ldr	r3, [pc, #100]	@ (801d730 <My_Set_RTC_Alarm_A+0x94>)
 801d6ca:	785a      	ldrb	r2, [r3, #1]
 801d6cc:	79bb      	ldrb	r3, [r7, #6]
 801d6ce:	4413      	add	r3, r2
 801d6d0:	b2da      	uxtb	r2, r3
 801d6d2:	4b19      	ldr	r3, [pc, #100]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d6d4:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = my_seconds + sTime.Seconds;
 801d6d6:	4b16      	ldr	r3, [pc, #88]	@ (801d730 <My_Set_RTC_Alarm_A+0x94>)
 801d6d8:	789a      	ldrb	r2, [r3, #2]
 801d6da:	797b      	ldrb	r3, [r7, #5]
 801d6dc:	4413      	add	r3, r2
 801d6de:	b2da      	uxtb	r2, r3
 801d6e0:	4b15      	ldr	r3, [pc, #84]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d6e2:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds + sTime.SubSeconds;
 801d6e4:	4b12      	ldr	r3, [pc, #72]	@ (801d730 <My_Set_RTC_Alarm_A+0x94>)
 801d6e6:	685a      	ldr	r2, [r3, #4]
 801d6e8:	683b      	ldr	r3, [r7, #0]
 801d6ea:	4413      	add	r3, r2
 801d6ec:	4a12      	ldr	r2, [pc, #72]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d6ee:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801d6f0:	4b11      	ldr	r3, [pc, #68]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801d6f6:	4b10      	ldr	r3, [pc, #64]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801d6fc:	4b0e      	ldr	r3, [pc, #56]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d6fe:	2200      	movs	r2, #0
 801d700:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801d702:	4b0d      	ldr	r3, [pc, #52]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d704:	2200      	movs	r2, #0
 801d706:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801d708:	4b0b      	ldr	r3, [pc, #44]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d70a:	2200      	movs	r2, #0
 801d70c:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801d70e:	4b0a      	ldr	r3, [pc, #40]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d710:	2201      	movs	r2, #1
 801d712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 801d716:	4b08      	ldr	r3, [pc, #32]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d71c:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);			// Set RTC Alarm Time with Interrupt
 801d71e:	2200      	movs	r2, #0
 801d720:	4905      	ldr	r1, [pc, #20]	@ (801d738 <My_Set_RTC_Alarm_A+0x9c>)
 801d722:	4804      	ldr	r0, [pc, #16]	@ (801d734 <My_Set_RTC_Alarm_A+0x98>)
 801d724:	f7e9 ff34 	bl	8007590 <HAL_RTC_SetAlarm_IT>
}
 801d728:	bf00      	nop
 801d72a:	3708      	adds	r7, #8
 801d72c:	46bd      	mov	sp, r7
 801d72e:	bd80      	pop	{r7, pc}
 801d730:	20001c00 	.word	0x20001c00
 801d734:	20000750 	.word	0x20000750
 801d738:	20001c14 	.word	0x20001c14

0801d73c <My_Set_RTC_Alarm_B>:

void My_Set_RTC_Alarm_B(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801d73c:	b580      	push	{r7, lr}
 801d73e:	b082      	sub	sp, #8
 801d740:	af00      	add	r7, sp, #0
 801d742:	603b      	str	r3, [r7, #0]
 801d744:	4603      	mov	r3, r0
 801d746:	71fb      	strb	r3, [r7, #7]
 801d748:	460b      	mov	r3, r1
 801d74a:	71bb      	strb	r3, [r7, #6]
 801d74c:	4613      	mov	r3, r2
 801d74e:	717b      	strb	r3, [r7, #5]
	/* Set the RTC ALARM B Timer */

	sTime.Hours = 0x00; 														// Config Time Parameter RTC Struct Init
 801d750:	4b22      	ldr	r3, [pc, #136]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d752:	2200      	movs	r2, #0
 801d754:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x00;
 801d756:	4b21      	ldr	r3, [pc, #132]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d758:	2200      	movs	r2, #0
 801d75a:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x00;
 801d75c:	4b1f      	ldr	r3, [pc, #124]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d75e:	2200      	movs	r2, #0
 801d760:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x00;
 801d762:	4b1e      	ldr	r3, [pc, #120]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d764:	2200      	movs	r2, #0
 801d766:	605a      	str	r2, [r3, #4]
	sTime.SecondFraction = 0x00;
 801d768:	4b1c      	ldr	r3, [pc, #112]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d76a:	2200      	movs	r2, #0
 801d76c:	609a      	str	r2, [r3, #8]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801d76e:	4b1b      	ldr	r3, [pc, #108]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d770:	2200      	movs	r2, #0
 801d772:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801d774:	4b19      	ldr	r3, [pc, #100]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d776:	2200      	movs	r2, #0
 801d778:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmTime.Hours = my_hours;											// Config Time Parameter of RTC_Alarm Struct
 801d77a:	4a19      	ldr	r2, [pc, #100]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d77c:	79fb      	ldrb	r3, [r7, #7]
 801d77e:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = my_minutes;
 801d780:	4a17      	ldr	r2, [pc, #92]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d782:	79bb      	ldrb	r3, [r7, #6]
 801d784:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = my_seconds;
 801d786:	4a16      	ldr	r2, [pc, #88]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d788:	797b      	ldrb	r3, [r7, #5]
 801d78a:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds;
 801d78c:	4a14      	ldr	r2, [pc, #80]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d78e:	683b      	ldr	r3, [r7, #0]
 801d790:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801d792:	4b13      	ldr	r3, [pc, #76]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d794:	2200      	movs	r2, #0
 801d796:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801d798:	4b11      	ldr	r3, [pc, #68]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d79a:	2200      	movs	r2, #0
 801d79c:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801d79e:	4b10      	ldr	r3, [pc, #64]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d7a0:	2200      	movs	r2, #0
 801d7a2:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801d7a4:	4b0e      	ldr	r3, [pc, #56]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801d7aa:	4b0d      	ldr	r3, [pc, #52]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d7ac:	2200      	movs	r2, #0
 801d7ae:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801d7b0:	4b0b      	ldr	r3, [pc, #44]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d7b2:	2201      	movs	r2, #1
 801d7b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_B;
 801d7b8:	4b09      	ldr	r3, [pc, #36]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d7ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d7be:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);								// Set RTC Time (this Command needed for Set Alarm)
 801d7c0:	2200      	movs	r2, #0
 801d7c2:	4906      	ldr	r1, [pc, #24]	@ (801d7dc <My_Set_RTC_Alarm_B+0xa0>)
 801d7c4:	4807      	ldr	r0, [pc, #28]	@ (801d7e4 <My_Set_RTC_Alarm_B+0xa8>)
 801d7c6:	f7e9 fd5f 	bl	8007288 <HAL_RTC_SetTime>
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);						// Set RTC Alarm Time with Interrupt
 801d7ca:	2200      	movs	r2, #0
 801d7cc:	4904      	ldr	r1, [pc, #16]	@ (801d7e0 <My_Set_RTC_Alarm_B+0xa4>)
 801d7ce:	4805      	ldr	r0, [pc, #20]	@ (801d7e4 <My_Set_RTC_Alarm_B+0xa8>)
 801d7d0:	f7e9 fede 	bl	8007590 <HAL_RTC_SetAlarm_IT>
}
 801d7d4:	bf00      	nop
 801d7d6:	3708      	adds	r7, #8
 801d7d8:	46bd      	mov	sp, r7
 801d7da:	bd80      	pop	{r7, pc}
 801d7dc:	20001c00 	.word	0x20001c00
 801d7e0:	20001c14 	.word	0x20001c14
 801d7e4:	20000750 	.word	0x20000750

0801d7e8 <My_SystemClock_Config>:

void My_SystemClock_Config(void)
{
 801d7e8:	b580      	push	{r7, lr}
 801d7ea:	b09a      	sub	sp, #104	@ 0x68
 801d7ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801d7ee:	f107 0320 	add.w	r3, r7, #32
 801d7f2:	2248      	movs	r2, #72	@ 0x48
 801d7f4:	2100      	movs	r1, #0
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f002 ffcc 	bl	8020794 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801d7fc:	1d3b      	adds	r3, r7, #4
 801d7fe:	2200      	movs	r2, #0
 801d800:	601a      	str	r2, [r3, #0]
 801d802:	605a      	str	r2, [r3, #4]
 801d804:	609a      	str	r2, [r3, #8]
 801d806:	60da      	str	r2, [r3, #12]
 801d808:	611a      	str	r2, [r3, #16]
 801d80a:	615a      	str	r2, [r3, #20]
 801d80c:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 801d80e:	f7e7 ffc3 	bl	8005798 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801d812:	2000      	movs	r0, #0
 801d814:	f7fe fc78 	bl	801c108 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801d818:	4b1e      	ldr	r3, [pc, #120]	@ (801d894 <My_SystemClock_Config+0xac>)
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801d820:	4a1c      	ldr	r2, [pc, #112]	@ (801d894 <My_SystemClock_Config+0xac>)
 801d822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801d826:	6013      	str	r3, [r2, #0]
 801d828:	4b1a      	ldr	r3, [pc, #104]	@ (801d894 <My_SystemClock_Config+0xac>)
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801d830:	603b      	str	r3, [r7, #0]
 801d832:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 801d834:	2324      	movs	r3, #36	@ 0x24
 801d836:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801d838:	2381      	movs	r3, #129	@ 0x81
 801d83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801d83c:	2301      	movs	r3, #1
 801d83e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 801d840:	2300      	movs	r3, #0
 801d842:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;				// Set Clock Frequency Below 16 MHz to allow Undervolting
 801d844:	2370      	movs	r3, #112	@ 0x70
 801d846:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801d848:	2300      	movs	r3, #0
 801d84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d84c:	f107 0320 	add.w	r3, r7, #32
 801d850:	4618      	mov	r0, r3
 801d852:	f7e8 fc3b 	bl	80060cc <HAL_RCC_OscConfig>
 801d856:	4603      	mov	r3, r0
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d001      	beq.n	801d860 <My_SystemClock_Config+0x78>
	{
		Error_Handler();
 801d85c:	f7e3 fde6 	bl	800142c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 801d860:	234f      	movs	r3, #79	@ 0x4f
 801d862:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 801d864:	2300      	movs	r3, #0
 801d866:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d868:	2300      	movs	r3, #0
 801d86a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801d86c:	2300      	movs	r3, #0
 801d86e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d870:	2300      	movs	r3, #0
 801d872:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 801d874:	2300      	movs	r3, #0
 801d876:	61fb      	str	r3, [r7, #28]


	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801d878:	1d3b      	adds	r3, r7, #4
 801d87a:	2102      	movs	r1, #2
 801d87c:	4618      	mov	r0, r3
 801d87e:	f7e8 ffa7 	bl	80067d0 <HAL_RCC_ClockConfig>
 801d882:	4603      	mov	r3, r0
 801d884:	2b00      	cmp	r3, #0
 801d886:	d001      	beq.n	801d88c <My_SystemClock_Config+0xa4>
	{
		Error_Handler();
 801d888:	f7e3 fdd0 	bl	800142c <Error_Handler>
	}
}
 801d88c:	bf00      	nop
 801d88e:	3768      	adds	r7, #104	@ 0x68
 801d890:	46bd      	mov	sp, r7
 801d892:	bd80      	pop	{r7, pc}
 801d894:	58000400 	.word	0x58000400

0801d898 <My_Trise_Meas>:
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOBEN);
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOCEN);
}

void My_Trise_Meas(void)
{
 801d898:	b580      	push	{r7, lr}
 801d89a:	af00      	add	r7, sp, #0
	/* This Function measures the charging time (Trise) during the Energy Harvesting State (EHS) from the last SMS State to the following RTS State */

	my_Trise_time_stop = HAL_LPTIM_ReadCounter(&hlptim1);// Stop Measuring Trise
 801d89c:	481a      	ldr	r0, [pc, #104]	@ (801d908 <My_Trise_Meas+0x70>)
 801d89e:	f000 fc65 	bl	801e16c <HAL_LPTIM_ReadCounter>
 801d8a2:	4603      	mov	r3, r0
 801d8a4:	b29a      	uxth	r2, r3
 801d8a6:	4b19      	ldr	r3, [pc, #100]	@ (801d90c <My_Trise_Meas+0x74>)
 801d8a8:	801a      	strh	r2, [r3, #0]

	if (my_Trise_time_stop > my_Trise_time_start)
 801d8aa:	4b18      	ldr	r3, [pc, #96]	@ (801d90c <My_Trise_Meas+0x74>)
 801d8ac:	881a      	ldrh	r2, [r3, #0]
 801d8ae:	4b18      	ldr	r3, [pc, #96]	@ (801d910 <My_Trise_Meas+0x78>)
 801d8b0:	881b      	ldrh	r3, [r3, #0]
 801d8b2:	429a      	cmp	r2, r3
 801d8b4:	d908      	bls.n	801d8c8 <My_Trise_Meas+0x30>
	{
		my_Trise_time = my_Trise_time_stop - my_Trise_time_start;
 801d8b6:	4b15      	ldr	r3, [pc, #84]	@ (801d90c <My_Trise_Meas+0x74>)
 801d8b8:	881a      	ldrh	r2, [r3, #0]
 801d8ba:	4b15      	ldr	r3, [pc, #84]	@ (801d910 <My_Trise_Meas+0x78>)
 801d8bc:	881b      	ldrh	r3, [r3, #0]
 801d8be:	1ad3      	subs	r3, r2, r3
 801d8c0:	b29a      	uxth	r2, r3
 801d8c2:	4b14      	ldr	r3, [pc, #80]	@ (801d914 <My_Trise_Meas+0x7c>)
 801d8c4:	801a      	strh	r2, [r3, #0]
		else
		{
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
		}
	}
}
 801d8c6:	e01c      	b.n	801d902 <My_Trise_Meas+0x6a>
		if (my_Cmode == EOC)
 801d8c8:	4b13      	ldr	r3, [pc, #76]	@ (801d918 <My_Trise_Meas+0x80>)
 801d8ca:	781b      	ldrb	r3, [r3, #0]
 801d8cc:	2b02      	cmp	r3, #2
 801d8ce:	d10c      	bne.n	801d8ea <My_Trise_Meas+0x52>
			my_Trise_time = my_Trise_time_stop + (T_ESW + T_SMW) - my_Trise_time_start;
 801d8d0:	4b0e      	ldr	r3, [pc, #56]	@ (801d90c <My_Trise_Meas+0x74>)
 801d8d2:	881a      	ldrh	r2, [r3, #0]
 801d8d4:	4b0e      	ldr	r3, [pc, #56]	@ (801d910 <My_Trise_Meas+0x78>)
 801d8d6:	881b      	ldrh	r3, [r3, #0]
 801d8d8:	1ad3      	subs	r3, r2, r3
 801d8da:	b29b      	uxth	r3, r3
 801d8dc:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 801d8e0:	3310      	adds	r3, #16
 801d8e2:	b29a      	uxth	r2, r3
 801d8e4:	4b0b      	ldr	r3, [pc, #44]	@ (801d914 <My_Trise_Meas+0x7c>)
 801d8e6:	801a      	strh	r2, [r3, #0]
}
 801d8e8:	e00b      	b.n	801d902 <My_Trise_Meas+0x6a>
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
 801d8ea:	4b08      	ldr	r3, [pc, #32]	@ (801d90c <My_Trise_Meas+0x74>)
 801d8ec:	881a      	ldrh	r2, [r3, #0]
 801d8ee:	4b08      	ldr	r3, [pc, #32]	@ (801d910 <My_Trise_Meas+0x78>)
 801d8f0:	881b      	ldrh	r3, [r3, #0]
 801d8f2:	1ad3      	subs	r3, r2, r3
 801d8f4:	b29b      	uxth	r3, r3
 801d8f6:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 801d8fa:	3308      	adds	r3, #8
 801d8fc:	b29a      	uxth	r2, r3
 801d8fe:	4b05      	ldr	r3, [pc, #20]	@ (801d914 <My_Trise_Meas+0x7c>)
 801d900:	801a      	strh	r2, [r3, #0]
}
 801d902:	bf00      	nop
 801d904:	bd80      	pop	{r7, pc}
 801d906:	bf00      	nop
 801d908:	20001b40 	.word	0x20001b40
 801d90c:	20001bc4 	.word	0x20001bc4
 801d910:	20001bc2 	.word	0x20001bc2
 801d914:	20001bc6 	.word	0x20001bc6
 801d918:	20001bea 	.word	0x20001bea

0801d91c <My_PVD_Delay>:

void My_PVD_Delay(void)
{
 801d91c:	b580      	push	{r7, lr}
 801d91e:	af00      	add	r7, sp, #0
	/* This Function creates a Delay to allow the PVD to settle */

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); 	// Deactivate the RTC Alarm A
 801d920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d924:	4808      	ldr	r0, [pc, #32]	@ (801d948 <My_PVD_Delay+0x2c>)
 801d926:	f7e9 ff3f 	bl	80077a8 <HAL_RTC_DeactivateAlarm>

	My_Set_RTC_Alarm_A								// Sets the RTC Alarm A Timer to create a Delay of time T_Delay_PVD
 801d92a:	2300      	movs	r3, #0
 801d92c:	2202      	movs	r2, #2
 801d92e:	2100      	movs	r1, #0
 801d930:	2000      	movs	r0, #0
 801d932:	f7ff feb3 	bl	801d69c <My_Set_RTC_Alarm_A>
			T_Delay_PVD_hours,
			T_Delay_PVD_minutes,
			T_Delay_PVD_seconds,
			T_Delay_PVD_subseconds
	);
	__WFI(); 										// Wait for the Interrupt
 801d936:	bf30      	wfi

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);   	// Deactivate the RTC Alarm A
 801d938:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d93c:	4802      	ldr	r0, [pc, #8]	@ (801d948 <My_PVD_Delay+0x2c>)
 801d93e:	f7e9 ff33 	bl	80077a8 <HAL_RTC_DeactivateAlarm>
}
 801d942:	bf00      	nop
 801d944:	bd80      	pop	{r7, pc}
 801d946:	bf00      	nop
 801d948:	20000750 	.word	0x20000750

0801d94c <My_PS_Detection>:

void My_PS_Detection(void)
{
 801d94c:	b580      	push	{r7, lr}
 801d94e:	af00      	add	r7, sp, #0
	My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);  	  					// Configures PVD at the Highest Voltage and Normal Mode
 801d950:	2100      	movs	r1, #0
 801d952:	200c      	movs	r0, #12
 801d954:	f7ff fd82 	bl	801d45c <My_Set_PVD>

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)							// If VDD is > 2.9 Volt and and Internal Reference is Ready
 801d958:	4b0b      	ldr	r3, [pc, #44]	@ (801d988 <My_PS_Detection+0x3c>)
 801d95a:	695b      	ldr	r3, [r3, #20]
 801d95c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d960:	2b00      	cmp	r3, #0
 801d962:	d103      	bne.n	801d96c <My_PS_Detection+0x20>
	{
		my_Current_State = PSS;											// System is Supplied by a Power Supply with voltage > 3.0 V
 801d964:	4b09      	ldr	r3, [pc, #36]	@ (801d98c <My_PS_Detection+0x40>)
 801d966:	2201      	movs	r2, #1
 801d968:	701a      	strb	r2, [r3, #0]
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
//		My_Enter_Stop2_Mode_WFI(V2P5, PWR_PVD_MODE_IT_RISING);
	}
}
 801d96a:	e00a      	b.n	801d982 <My_PS_Detection+0x36>
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
 801d96c:	4b07      	ldr	r3, [pc, #28]	@ (801d98c <My_PS_Detection+0x40>)
 801d96e:	2203      	movs	r2, #3
 801d970:	701a      	strb	r2, [r3, #0]
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
 801d972:	4b07      	ldr	r3, [pc, #28]	@ (801d990 <My_PS_Detection+0x44>)
 801d974:	2202      	movs	r2, #2
 801d976:	701a      	strb	r2, [r3, #0]
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
 801d978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801d97c:	200c      	movs	r0, #12
 801d97e:	f7ff fce7 	bl	801d350 <My_Enter_Stop2_Mode_WFI>
}
 801d982:	bf00      	nop
 801d984:	bd80      	pop	{r7, pc}
 801d986:	bf00      	nop
 801d988:	58000400 	.word	0x58000400
 801d98c:	20001be9 	.word	0x20001be9
 801d990:	20000638 	.word	0x20000638

0801d994 <My_VDD_to_ES_Switch>:


#if STEVAL_HARVEST1
void My_VDD_to_ES_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and ES net
{
 801d994:	b580      	push	{r7, lr}
 801d996:	b08c      	sub	sp, #48	@ 0x30
 801d998:	af00      	add	r7, sp, #0
 801d99a:	4603      	mov	r3, r0
 801d99c:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d99e:	2001      	movs	r0, #1
 801d9a0:	f7fe fbda 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d9a4:	2002      	movs	r0, #2
 801d9a6:	f7fe fbd7 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d9aa:	2004      	movs	r0, #4
 801d9ac:	f7fe fbd4 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d9b0:	2080      	movs	r0, #128	@ 0x80
 801d9b2:	f7fe fbd1 	bl	801c158 <LL_AHB2_GRP1_EnableClock>

	if (mode == Switch_OPEN)
 801d9b6:	79fb      	ldrb	r3, [r7, #7]
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d11d      	bne.n	801d9f8 <My_VDD_to_ES_Switch+0x64>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d9bc:	f107 031c 	add.w	r3, r7, #28
 801d9c0:	2200      	movs	r2, #0
 801d9c2:	601a      	str	r2, [r3, #0]
 801d9c4:	605a      	str	r2, [r3, #4]
 801d9c6:	609a      	str	r2, [r3, #8]
 801d9c8:	60da      	str	r2, [r3, #12]
 801d9ca:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d9cc:	2303      	movs	r3, #3
 801d9ce:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9d0:	2300      	movs	r3, #0
 801d9d2:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801d9d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801d9d8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801d9da:	f107 031c 	add.w	r3, r7, #28
 801d9de:	4619      	mov	r1, r3
 801d9e0:	4829      	ldr	r0, [pc, #164]	@ (801da88 <My_VDD_to_ES_Switch+0xf4>)
 801d9e2:	f7e6 fe7f 	bl	80046e4 <HAL_GPIO_Init>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801d9e6:	f244 0318 	movw	r3, #16408	@ 0x4018
 801d9ea:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801d9ec:	f107 031c 	add.w	r3, r7, #28
 801d9f0:	4619      	mov	r1, r3
 801d9f2:	4826      	ldr	r0, [pc, #152]	@ (801da8c <My_VDD_to_ES_Switch+0xf8>)
 801d9f4:	f7e6 fe76 	bl	80046e4 <HAL_GPIO_Init>
	}

	if (mode == Switch_CLOSED)
 801d9f8:	79fb      	ldrb	r3, [r7, #7]
 801d9fa:	2b01      	cmp	r3, #1
 801d9fc:	d133      	bne.n	801da66 <My_VDD_to_ES_Switch+0xd2>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d9fe:	f107 0308 	add.w	r3, r7, #8
 801da02:	2200      	movs	r2, #0
 801da04:	601a      	str	r2, [r3, #0]
 801da06:	605a      	str	r2, [r3, #4]
 801da08:	609a      	str	r2, [r3, #8]
 801da0a:	60da      	str	r2, [r3, #12]
 801da0c:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801da0e:	2301      	movs	r3, #1
 801da10:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da12:	2300      	movs	r3, #0
 801da14:	613b      	str	r3, [r7, #16]

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801da16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801da1a:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801da1c:	f107 0308 	add.w	r3, r7, #8
 801da20:	4619      	mov	r1, r3
 801da22:	4819      	ldr	r0, [pc, #100]	@ (801da88 <My_VDD_to_ES_Switch+0xf4>)
 801da24:	f7e6 fe5e 	bl	80046e4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortC, ES_Pin4, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin4 to Vdd
 801da28:	2201      	movs	r2, #1
 801da2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801da2e:	4816      	ldr	r0, [pc, #88]	@ (801da88 <My_VDD_to_ES_Switch+0xf4>)
 801da30:	f7e7 f886 	bl	8004b40 <HAL_GPIO_WritePin>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801da34:	f244 0318 	movw	r3, #16408	@ 0x4018
 801da38:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801da3a:	f107 0308 	add.w	r3, r7, #8
 801da3e:	4619      	mov	r1, r3
 801da40:	4812      	ldr	r0, [pc, #72]	@ (801da8c <My_VDD_to_ES_Switch+0xf8>)
 801da42:	f7e6 fe4f 	bl	80046e4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin1, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin1 to Vdd
 801da46:	2201      	movs	r2, #1
 801da48:	2108      	movs	r1, #8
 801da4a:	4810      	ldr	r0, [pc, #64]	@ (801da8c <My_VDD_to_ES_Switch+0xf8>)
 801da4c:	f7e7 f878 	bl	8004b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin2, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin2 to Vdd
 801da50:	2201      	movs	r2, #1
 801da52:	2110      	movs	r1, #16
 801da54:	480d      	ldr	r0, [pc, #52]	@ (801da8c <My_VDD_to_ES_Switch+0xf8>)
 801da56:	f7e7 f873 	bl	8004b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin3, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin3 to Vdd
 801da5a:	2201      	movs	r2, #1
 801da5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801da60:	480a      	ldr	r0, [pc, #40]	@ (801da8c <My_VDD_to_ES_Switch+0xf8>)
 801da62:	f7e7 f86d 	bl	8004b40 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801da66:	2001      	movs	r0, #1
 801da68:	f7fe fb8e 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801da6c:	2002      	movs	r0, #2
 801da6e:	f7fe fb8b 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801da72:	2004      	movs	r0, #4
 801da74:	f7fe fb88 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801da78:	2080      	movs	r0, #128	@ 0x80
 801da7a:	f7fe fb85 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
}
 801da7e:	bf00      	nop
 801da80:	3730      	adds	r7, #48	@ 0x30
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
 801da86:	bf00      	nop
 801da88:	48000800 	.word	0x48000800
 801da8c:	48000400 	.word	0x48000400

0801da90 <My_VDD_to_VDDS2_Switch>:
	__HAL_RCC_GPIOC_CLK_DISABLE();
	__HAL_RCC_GPIOH_CLK_DISABLE();
}

void My_VDD_to_VDDS2_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and VDDS2
{
 801da90:	b580      	push	{r7, lr}
 801da92:	b088      	sub	sp, #32
 801da94:	af00      	add	r7, sp, #0
 801da96:	4603      	mov	r3, r0
 801da98:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801da9a:	2001      	movs	r0, #1
 801da9c:	f7fe fb5c 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801daa0:	2002      	movs	r0, #2
 801daa2:	f7fe fb59 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801daa6:	2004      	movs	r0, #4
 801daa8:	f7fe fb56 	bl	801c158 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801daac:	2080      	movs	r0, #128	@ 0x80
 801daae:	f7fe fb53 	bl	801c158 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dab2:	f107 030c 	add.w	r3, r7, #12
 801dab6:	2200      	movs	r2, #0
 801dab8:	601a      	str	r2, [r3, #0]
 801daba:	605a      	str	r2, [r3, #4]
 801dabc:	609a      	str	r2, [r3, #8]
 801dabe:	60da      	str	r2, [r3, #12]
 801dac0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dac2:	2301      	movs	r3, #1
 801dac4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dac6:	2300      	movs	r3, #0
 801dac8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801daca:	2303      	movs	r3, #3
 801dacc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin =  VDDS2_Pin;
 801dace:	2310      	movs	r3, #16
 801dad0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(VDDS2_Port, &GPIO_InitStruct);
 801dad2:	f107 030c 	add.w	r3, r7, #12
 801dad6:	4619      	mov	r1, r3
 801dad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801dadc:	f7e6 fe02 	bl	80046e4 <HAL_GPIO_Init>

	if (mode == Switch_CLOSED)
 801dae0:	79fb      	ldrb	r3, [r7, #7]
 801dae2:	2b01      	cmp	r3, #1
 801dae4:	d106      	bne.n	801daf4 <My_VDD_to_VDDS2_Switch+0x64>
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_SET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801dae6:	2201      	movs	r2, #1
 801dae8:	2110      	movs	r1, #16
 801daea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801daee:	f7e7 f827 	bl	8004b40 <HAL_GPIO_WritePin>
 801daf2:	e005      	b.n	801db00 <My_VDD_to_VDDS2_Switch+0x70>
	}
	else
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_RESET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801daf4:	2200      	movs	r2, #0
 801daf6:	2110      	movs	r1, #16
 801daf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801dafc:	f7e7 f820 	bl	8004b40 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801db00:	2001      	movs	r0, #1
 801db02:	f7fe fb41 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801db06:	2002      	movs	r0, #2
 801db08:	f7fe fb3e 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801db0c:	2004      	movs	r0, #4
 801db0e:	f7fe fb3b 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801db12:	2080      	movs	r0, #128	@ 0x80
 801db14:	f7fe fb38 	bl	801c188 <LL_AHB2_GRP1_DisableClock>
}
 801db18:	bf00      	nop
 801db1a:	3720      	adds	r7, #32
 801db1c:	46bd      	mov	sp, r7
 801db1e:	bd80      	pop	{r7, pc}

0801db20 <My_HAL_Delay>:
#endif

void My_HAL_Delay(__IO uint32_t Delay)
{
 801db20:	b580      	push	{r7, lr}
 801db22:	b082      	sub	sp, #8
 801db24:	af00      	add	r7, sp, #0
 801db26:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	4618      	mov	r0, r3
 801db2c:	f7e4 f8f5 	bl	8001d1a <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 801db30:	bf00      	nop
 801db32:	3708      	adds	r7, #8
 801db34:	46bd      	mov	sp, r7
 801db36:	bd80      	pop	{r7, pc}

0801db38 <SystemInit>:
	return deviceAddress;
}

#if !MY_SYSTEM_INIT
void SystemInit(void)	// System Init Function
{
 801db38:	b580      	push	{r7, lr}
 801db3a:	af00      	add	r7, sp, #0
	SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
#else
	//	My_Set_GPIO_ANALOG();							// Configure all GPIOs in Analog Mode (High Impedance)
#endif

	HAL_Init();										// Configure HAL
 801db3c:	f7e4 ffc2 	bl	8002ac4 <HAL_Init>

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 801db40:	f7ff fbbe 	bl	801d2c0 <My_Set_All_GPIO_To_Analog_Mode>
#endif

	HAL_PWR_EnablePVD();							// Enable PVD
 801db44:	f7e7 fe74 	bl	8005830 <HAL_PWR_EnablePVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2); // Undervolting
 801db48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801db4c:	f7e7 fefa 	bl	8005944 <HAL_PWREx_ControlVoltageScaling>

	My_Set_PVD(V2P0, PWR_PVD_MODE_IT_RISING);		// Configure PVD
 801db50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801db54:	2000      	movs	r0, #0
 801db56:	f7ff fc81 	bl	801d45c <My_Set_PVD>
	HAL_PWREx_EnableLowPowerRunMode();				// Enter Low Power Run Mode
 801db5a:	f7e7 ff47 	bl	80059ec <HAL_PWREx_EnableLowPowerRunMode>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn); 				// Enable PVD Interrupt
 801db5e:	2001      	movs	r0, #1
 801db60:	f7e6 f97d 	bl	8003e5e <HAL_NVIC_EnableIRQ>
	HAL_PWREx_EnterSTOP0Mode(PWR_STOPENTRY_WFI);	// Enter STOP0 mode and WFI
 801db64:	2001      	movs	r0, #1
 801db66:	f7e7 ff85 	bl	8005a74 <HAL_PWREx_EnterSTOP0Mode>
	HAL_PWREx_DisableLowPowerRunMode();				// Disable Low Power Run Mode
 801db6a:	f7e7 ff4d 	bl	8005a08 <HAL_PWREx_DisableLowPowerRunMode>
}
 801db6e:	bf00      	nop
 801db70:	bd80      	pop	{r7, pc}
	...

0801db74 <LL_EXTI_IsActiveFlag_0_31>:
{
 801db74:	b480      	push	{r7}
 801db76:	b083      	sub	sp, #12
 801db78:	af00      	add	r7, sp, #0
 801db7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 801db7c:	4b07      	ldr	r3, [pc, #28]	@ (801db9c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 801db7e:	68da      	ldr	r2, [r3, #12]
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	4013      	ands	r3, r2
 801db84:	687a      	ldr	r2, [r7, #4]
 801db86:	429a      	cmp	r2, r3
 801db88:	d101      	bne.n	801db8e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 801db8a:	2301      	movs	r3, #1
 801db8c:	e000      	b.n	801db90 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 801db8e:	2300      	movs	r3, #0
}
 801db90:	4618      	mov	r0, r3
 801db92:	370c      	adds	r7, #12
 801db94:	46bd      	mov	sp, r7
 801db96:	bc80      	pop	{r7}
 801db98:	4770      	bx	lr
 801db9a:	bf00      	nop
 801db9c:	58000800 	.word	0x58000800

0801dba0 <LL_EXTI_ClearFlag_0_31>:
{
 801dba0:	b480      	push	{r7}
 801dba2:	b083      	sub	sp, #12
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 801dba8:	4a03      	ldr	r2, [pc, #12]	@ (801dbb8 <LL_EXTI_ClearFlag_0_31+0x18>)
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	60d3      	str	r3, [r2, #12]
}
 801dbae:	bf00      	nop
 801dbb0:	370c      	adds	r7, #12
 801dbb2:	46bd      	mov	sp, r7
 801dbb4:	bc80      	pop	{r7}
 801dbb6:	4770      	bx	lr
 801dbb8:	58000800 	.word	0x58000800

0801dbbc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 801dbbc:	b580      	push	{r7, lr}
 801dbbe:	b084      	sub	sp, #16
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	4a11      	ldr	r2, [pc, #68]	@ (801dc10 <HAL_COMP_IRQHandler+0x54>)
 801dbca:	4293      	cmp	r3, r2
 801dbcc:	d102      	bne.n	801dbd4 <HAL_COMP_IRQHandler+0x18>
 801dbce:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801dbd2:	e001      	b.n	801dbd8 <HAL_COMP_IRQHandler+0x1c>
 801dbd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801dbd8:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 801dbda:	68f8      	ldr	r0, [r7, #12]
 801dbdc:	f7ff ffca 	bl	801db74 <LL_EXTI_IsActiveFlag_0_31>
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	d010      	beq.n	801dc08 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 801dbe6:	4b0b      	ldr	r3, [pc, #44]	@ (801dc14 <HAL_COMP_IRQHandler+0x58>)
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d004      	beq.n	801dbfc <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 801dbf2:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 801dbf6:	f7ff ffd3 	bl	801dba0 <LL_EXTI_ClearFlag_0_31>
 801dbfa:	e002      	b.n	801dc02 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 801dbfc:	68f8      	ldr	r0, [r7, #12]
 801dbfe:	f7ff ffcf 	bl	801dba0 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 801dc02:	6878      	ldr	r0, [r7, #4]
 801dc04:	f000 f808 	bl	801dc18 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 801dc08:	bf00      	nop
 801dc0a:	3710      	adds	r7, #16
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	bd80      	pop	{r7, pc}
 801dc10:	40010200 	.word	0x40010200
 801dc14:	40010204 	.word	0x40010204

0801dc18 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 801dc18:	b480      	push	{r7}
 801dc1a:	b083      	sub	sp, #12
 801dc1c:	af00      	add	r7, sp, #0
 801dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 801dc20:	bf00      	nop
 801dc22:	370c      	adds	r7, #12
 801dc24:	46bd      	mov	sp, r7
 801dc26:	bc80      	pop	{r7}
 801dc28:	4770      	bx	lr

0801dc2a <LL_RCC_SetLPTIMClockSource>:
{
 801dc2a:	b480      	push	{r7}
 801dc2c:	b083      	sub	sp, #12
 801dc2e:	af00      	add	r7, sp, #0
 801dc30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801dc32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dc36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	0c1b      	lsrs	r3, r3, #16
 801dc3e:	041b      	lsls	r3, r3, #16
 801dc40:	43db      	mvns	r3, r3
 801dc42:	401a      	ands	r2, r3
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	041b      	lsls	r3, r3, #16
 801dc48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dc4c:	4313      	orrs	r3, r2
 801dc4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801dc52:	bf00      	nop
 801dc54:	370c      	adds	r7, #12
 801dc56:	46bd      	mov	sp, r7
 801dc58:	bc80      	pop	{r7}
 801dc5a:	4770      	bx	lr

0801dc5c <LL_RCC_GetLPTIMClockSource>:
{
 801dc5c:	b480      	push	{r7}
 801dc5e:	b083      	sub	sp, #12
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 801dc64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dc68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	4013      	ands	r3, r2
 801dc70:	0c1a      	lsrs	r2, r3, #16
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	4313      	orrs	r3, r2
}
 801dc76:	4618      	mov	r0, r3
 801dc78:	370c      	adds	r7, #12
 801dc7a:	46bd      	mov	sp, r7
 801dc7c:	bc80      	pop	{r7}
 801dc7e:	4770      	bx	lr

0801dc80 <LL_APB1_GRP1_ForceReset>:
{
 801dc80:	b480      	push	{r7}
 801dc82:	b083      	sub	sp, #12
 801dc84:	af00      	add	r7, sp, #0
 801dc86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 801dc88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dc8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dc8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	4313      	orrs	r3, r2
 801dc96:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801dc98:	bf00      	nop
 801dc9a:	370c      	adds	r7, #12
 801dc9c:	46bd      	mov	sp, r7
 801dc9e:	bc80      	pop	{r7}
 801dca0:	4770      	bx	lr

0801dca2 <LL_APB1_GRP2_ForceReset>:
{
 801dca2:	b480      	push	{r7}
 801dca4:	b083      	sub	sp, #12
 801dca6:	af00      	add	r7, sp, #0
 801dca8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 801dcaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dcae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dcb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	4313      	orrs	r3, r2
 801dcb8:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801dcba:	bf00      	nop
 801dcbc:	370c      	adds	r7, #12
 801dcbe:	46bd      	mov	sp, r7
 801dcc0:	bc80      	pop	{r7}
 801dcc2:	4770      	bx	lr

0801dcc4 <LL_APB1_GRP1_ReleaseReset>:
{
 801dcc4:	b480      	push	{r7}
 801dcc6:	b083      	sub	sp, #12
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 801dccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dcd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	43db      	mvns	r3, r3
 801dcd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dcda:	4013      	ands	r3, r2
 801dcdc:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801dcde:	bf00      	nop
 801dce0:	370c      	adds	r7, #12
 801dce2:	46bd      	mov	sp, r7
 801dce4:	bc80      	pop	{r7}
 801dce6:	4770      	bx	lr

0801dce8 <LL_APB1_GRP2_ReleaseReset>:
{
 801dce8:	b480      	push	{r7}
 801dcea:	b083      	sub	sp, #12
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 801dcf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801dcf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	43db      	mvns	r3, r3
 801dcfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801dcfe:	4013      	ands	r3, r2
 801dd00:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801dd02:	bf00      	nop
 801dd04:	370c      	adds	r7, #12
 801dd06:	46bd      	mov	sp, r7
 801dd08:	bc80      	pop	{r7}
 801dd0a:	4770      	bx	lr

0801dd0c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b084      	sub	sp, #16
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d101      	bne.n	801dd1e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 801dd1a:	2301      	movs	r3, #1
 801dd1c:	e0b6      	b.n	801de8c <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	685b      	ldr	r3, [r3, #4]
 801dd22:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801dd2a:	b2db      	uxtb	r3, r3
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	d106      	bne.n	801dd3e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	2200      	movs	r2, #0
 801dd34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 801dd38:	6878      	ldr	r0, [r7, #4]
 801dd3a:	f7fe f925 	bl	801bf88 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	2202      	movs	r2, #2
 801dd42:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	691a      	ldr	r2, [r3, #16]
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	f042 0201 	orr.w	r2, r2, #1
 801dd54:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	681b      	ldr	r3, [r3, #0]
 801dd5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dd5e:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	687a      	ldr	r2, [r7, #4]
 801dd66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801dd68:	629a      	str	r2, [r3, #40]	@ 0x28
//  if(hlptim -> Instance == LPTIM2)
//  {
//	  RCC->CCIPR |= (1 << 21) | (1 << 20);
//  }
  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801dd6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801dd6e:	6878      	ldr	r0, [r7, #4]
 801dd70:	f000 fb26 	bl	801e3c0 <LPTIM_WaitForFlag>
 801dd74:	4603      	mov	r3, r0
 801dd76:	2b03      	cmp	r3, #3
 801dd78:	d101      	bne.n	801dd7e <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 801dd7a:	2303      	movs	r3, #3
 801dd7c:	e086      	b.n	801de8c <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801dd7e:	6878      	ldr	r0, [r7, #4]
 801dd80:	f000 fb4e 	bl	801e420 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801dd84:	6878      	ldr	r0, [r7, #4]
 801dd86:	f000 fb0d 	bl	801e3a4 <HAL_LPTIM_GetState>
 801dd8a:	4603      	mov	r3, r0
 801dd8c:	2b03      	cmp	r3, #3
 801dd8e:	d101      	bne.n	801dd94 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 801dd90:	2303      	movs	r3, #3
 801dd92:	e07b      	b.n	801de8c <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	68db      	ldr	r3, [r3, #12]
 801dd9a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	685b      	ldr	r3, [r3, #4]
 801dda0:	2b01      	cmp	r3, #1
 801dda2:	d004      	beq.n	801ddae <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dda8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801ddac:	d103      	bne.n	801ddb6 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 801ddae:	68fb      	ldr	r3, [r7, #12]
 801ddb0:	f023 031e 	bic.w	r3, r3, #30
 801ddb4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	695b      	ldr	r3, [r3, #20]
 801ddba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ddbe:	4293      	cmp	r3, r2
 801ddc0:	d005      	beq.n	801ddce <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801ddc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801ddcc:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 801ddce:	68fa      	ldr	r2, [r7, #12]
 801ddd0:	4b30      	ldr	r3, [pc, #192]	@ (801de94 <HAL_LPTIM_Init+0x188>)
 801ddd2:	4013      	ands	r3, r2
 801ddd4:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ddde:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 801dde4:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 801ddea:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 801ddf0:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ddf2:	68fa      	ldr	r2, [r7, #12]
 801ddf4:	4313      	orrs	r3, r2
 801ddf6:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	685b      	ldr	r3, [r3, #4]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	d107      	bne.n	801de10 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801de08:	4313      	orrs	r3, r2
 801de0a:	68fa      	ldr	r2, [r7, #12]
 801de0c:	4313      	orrs	r3, r2
 801de0e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	685b      	ldr	r3, [r3, #4]
 801de14:	2b01      	cmp	r3, #1
 801de16:	d004      	beq.n	801de22 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801de20:	d107      	bne.n	801de32 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801de2a:	4313      	orrs	r3, r2
 801de2c:	68fa      	ldr	r2, [r7, #12]
 801de2e:	4313      	orrs	r3, r2
 801de30:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	695b      	ldr	r3, [r3, #20]
 801de36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801de3a:	4293      	cmp	r3, r2
 801de3c:	d00a      	beq.n	801de54 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801de46:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 801de4c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801de4e:	68fa      	ldr	r2, [r7, #12]
 801de50:	4313      	orrs	r3, r2
 801de52:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	68fa      	ldr	r2, [r7, #12]
 801de5a:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	4a0d      	ldr	r2, [pc, #52]	@ (801de98 <HAL_LPTIM_Init+0x18c>)
 801de62:	4293      	cmp	r3, r2
 801de64:	d108      	bne.n	801de78 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	430a      	orrs	r2, r1
 801de74:	621a      	str	r2, [r3, #32]
 801de76:	e004      	b.n	801de82 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	687a      	ldr	r2, [r7, #4]
 801de7e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801de80:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	2201      	movs	r2, #1
 801de86:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801de8a:	2300      	movs	r3, #0
}
 801de8c:	4618      	mov	r0, r3
 801de8e:	3710      	adds	r7, #16
 801de90:	46bd      	mov	sp, r7
 801de92:	bd80      	pop	{r7, pc}
 801de94:	ff19f1fe 	.word	0xff19f1fe
 801de98:	40007c00 	.word	0x40007c00

0801de9c <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801de9c:	b580      	push	{r7, lr}
 801de9e:	b082      	sub	sp, #8
 801dea0:	af00      	add	r7, sp, #0
 801dea2:	6078      	str	r0, [r7, #4]
 801dea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	2202      	movs	r2, #2
 801deaa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	685b      	ldr	r3, [r3, #4]
 801deb2:	2b01      	cmp	r3, #1
 801deb4:	d00c      	beq.n	801ded0 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801deba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801debe:	d107      	bne.n	801ded0 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	68da      	ldr	r2, [r3, #12]
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801dece:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	691a      	ldr	r2, [r3, #16]
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	f042 0201 	orr.w	r2, r2, #1
 801dede:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	2210      	movs	r2, #16
 801dee6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	683a      	ldr	r2, [r7, #0]
 801deee:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801def0:	2110      	movs	r1, #16
 801def2:	6878      	ldr	r0, [r7, #4]
 801def4:	f000 fa64 	bl	801e3c0 <LPTIM_WaitForFlag>
 801def8:	4603      	mov	r3, r0
 801defa:	2b03      	cmp	r3, #3
 801defc:	d101      	bne.n	801df02 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 801defe:	2303      	movs	r3, #3
 801df00:	e00c      	b.n	801df1c <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	691a      	ldr	r2, [r3, #16]
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	f042 0204 	orr.w	r2, r2, #4
 801df10:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	2201      	movs	r2, #1
 801df16:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801df1a:	2300      	movs	r3, #0
}
 801df1c:	4618      	mov	r0, r3
 801df1e:	3708      	adds	r7, #8
 801df20:	46bd      	mov	sp, r7
 801df22:	bd80      	pop	{r7, pc}

0801df24 <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b082      	sub	sp, #8
 801df28:	af00      	add	r7, sp, #0
 801df2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	2202      	movs	r2, #2
 801df30:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801df34:	6878      	ldr	r0, [r7, #4]
 801df36:	f000 fa73 	bl	801e420 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801df3a:	6878      	ldr	r0, [r7, #4]
 801df3c:	f000 fa32 	bl	801e3a4 <HAL_LPTIM_GetState>
 801df40:	4603      	mov	r3, r0
 801df42:	2b03      	cmp	r3, #3
 801df44:	d101      	bne.n	801df4a <HAL_LPTIM_Counter_Stop+0x26>
  {
    return HAL_TIMEOUT;
 801df46:	2303      	movs	r3, #3
 801df48:	e004      	b.n	801df54 <HAL_LPTIM_Counter_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	2201      	movs	r2, #1
 801df4e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801df52:	2300      	movs	r3, #0
}
 801df54:	4618      	mov	r0, r3
 801df56:	3708      	adds	r7, #8
 801df58:	46bd      	mov	sp, r7
 801df5a:	bd80      	pop	{r7, pc}

0801df5c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b082      	sub	sp, #8
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
 801df64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	2202      	movs	r2, #2
 801df6a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	4a48      	ldr	r2, [pc, #288]	@ (801e094 <HAL_LPTIM_Counter_Start_IT+0x138>)
 801df74:	4293      	cmp	r3, r2
 801df76:	d108      	bne.n	801df8a <HAL_LPTIM_Counter_Start_IT+0x2e>
 801df78:	4b47      	ldr	r3, [pc, #284]	@ (801e098 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df7e:	4a46      	ldr	r2, [pc, #280]	@ (801e098 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801df84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801df88:	e015      	b.n	801dfb6 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	4a43      	ldr	r2, [pc, #268]	@ (801e09c <HAL_LPTIM_Counter_Start_IT+0x140>)
 801df90:	4293      	cmp	r3, r2
 801df92:	d108      	bne.n	801dfa6 <HAL_LPTIM_Counter_Start_IT+0x4a>
 801df94:	4b40      	ldr	r3, [pc, #256]	@ (801e098 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df9a:	4a3f      	ldr	r2, [pc, #252]	@ (801e098 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801df9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801dfa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801dfa4:	e007      	b.n	801dfb6 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801dfa6:	4b3c      	ldr	r3, [pc, #240]	@ (801e098 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801dfa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dfac:	4a3a      	ldr	r2, [pc, #232]	@ (801e098 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801dfae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801dfb2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	685b      	ldr	r3, [r3, #4]
 801dfba:	2b01      	cmp	r3, #1
 801dfbc:	d00c      	beq.n	801dfd8 <HAL_LPTIM_Counter_Start_IT+0x7c>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801dfc6:	d107      	bne.n	801dfd8 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	68da      	ldr	r2, [r3, #12]
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801dfd6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	691a      	ldr	r2, [r3, #16]
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	f042 0201 	orr.w	r2, r2, #1
 801dfe6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	2210      	movs	r2, #16
 801dfee:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	683a      	ldr	r2, [r7, #0]
 801dff6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801dff8:	2110      	movs	r1, #16
 801dffa:	6878      	ldr	r0, [r7, #4]
 801dffc:	f000 f9e0 	bl	801e3c0 <LPTIM_WaitForFlag>
 801e000:	4603      	mov	r3, r0
 801e002:	2b03      	cmp	r3, #3
 801e004:	d101      	bne.n	801e00a <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 801e006:	2303      	movs	r3, #3
 801e008:	e03f      	b.n	801e08a <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801e00a:	6878      	ldr	r0, [r7, #4]
 801e00c:	f000 fa08 	bl	801e420 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801e010:	6878      	ldr	r0, [r7, #4]
 801e012:	f000 f9c7 	bl	801e3a4 <HAL_LPTIM_GetState>
 801e016:	4603      	mov	r3, r0
 801e018:	2b03      	cmp	r3, #3
 801e01a:	d101      	bne.n	801e020 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 801e01c:	2303      	movs	r3, #3
 801e01e:	e034      	b.n	801e08a <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	689a      	ldr	r2, [r3, #8]
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	681b      	ldr	r3, [r3, #0]
 801e02a:	f042 0210 	orr.w	r2, r2, #16
 801e02e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	689a      	ldr	r2, [r3, #8]
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	f042 0202 	orr.w	r2, r2, #2
 801e03e:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	689a      	ldr	r2, [r3, #8]
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e04e:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	681b      	ldr	r3, [r3, #0]
 801e054:	689a      	ldr	r2, [r3, #8]
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e05e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	691a      	ldr	r2, [r3, #16]
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	f042 0201 	orr.w	r2, r2, #1
 801e06e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	691a      	ldr	r2, [r3, #16]
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	f042 0204 	orr.w	r2, r2, #4
 801e07e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	2201      	movs	r2, #1
 801e084:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801e088:	2300      	movs	r3, #0
}
 801e08a:	4618      	mov	r0, r3
 801e08c:	3708      	adds	r7, #8
 801e08e:	46bd      	mov	sp, r7
 801e090:	bd80      	pop	{r7, pc}
 801e092:	bf00      	nop
 801e094:	40007c00 	.word	0x40007c00
 801e098:	58000800 	.word	0x58000800
 801e09c:	40009400 	.word	0x40009400

0801e0a0 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 801e0a0:	b580      	push	{r7, lr}
 801e0a2:	b082      	sub	sp, #8
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	4a2c      	ldr	r2, [pc, #176]	@ (801e160 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 801e0ae:	4293      	cmp	r3, r2
 801e0b0:	d108      	bne.n	801e0c4 <HAL_LPTIM_Counter_Stop_IT+0x24>
 801e0b2:	4b2c      	ldr	r3, [pc, #176]	@ (801e164 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e0b8:	4a2a      	ldr	r2, [pc, #168]	@ (801e164 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801e0be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801e0c2:	e015      	b.n	801e0f0 <HAL_LPTIM_Counter_Stop_IT+0x50>
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	4a27      	ldr	r2, [pc, #156]	@ (801e168 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 801e0ca:	4293      	cmp	r3, r2
 801e0cc:	d108      	bne.n	801e0e0 <HAL_LPTIM_Counter_Stop_IT+0x40>
 801e0ce:	4b25      	ldr	r3, [pc, #148]	@ (801e164 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e0d4:	4a23      	ldr	r2, [pc, #140]	@ (801e164 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801e0da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801e0de:	e007      	b.n	801e0f0 <HAL_LPTIM_Counter_Stop_IT+0x50>
 801e0e0:	4b20      	ldr	r3, [pc, #128]	@ (801e164 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e0e6:	4a1f      	ldr	r2, [pc, #124]	@ (801e164 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801e0e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e0ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	2202      	movs	r2, #2
 801e0f4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801e0f8:	6878      	ldr	r0, [r7, #4]
 801e0fa:	f000 f991 	bl	801e420 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801e0fe:	6878      	ldr	r0, [r7, #4]
 801e100:	f000 f950 	bl	801e3a4 <HAL_LPTIM_GetState>
 801e104:	4603      	mov	r3, r0
 801e106:	2b03      	cmp	r3, #3
 801e108:	d101      	bne.n	801e10e <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 801e10a:	2303      	movs	r3, #3
 801e10c:	e024      	b.n	801e158 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	689a      	ldr	r2, [r3, #8]
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	f022 0210 	bic.w	r2, r2, #16
 801e11c:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	689a      	ldr	r2, [r3, #8]
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	681b      	ldr	r3, [r3, #0]
 801e128:	f022 0202 	bic.w	r2, r2, #2
 801e12c:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	689a      	ldr	r2, [r3, #8]
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801e13c:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	689a      	ldr	r2, [r3, #8]
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e14c:	609a      	str	r2, [r3, #8]
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	2201      	movs	r2, #1
 801e152:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801e156:	2300      	movs	r3, #0
}
 801e158:	4618      	mov	r0, r3
 801e15a:	3708      	adds	r7, #8
 801e15c:	46bd      	mov	sp, r7
 801e15e:	bd80      	pop	{r7, pc}
 801e160:	40007c00 	.word	0x40007c00
 801e164:	58000800 	.word	0x58000800
 801e168:	40009400 	.word	0x40009400

0801e16c <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 801e16c:	b480      	push	{r7}
 801e16e:	b083      	sub	sp, #12
 801e170:	af00      	add	r7, sp, #0
 801e172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	69db      	ldr	r3, [r3, #28]
}
 801e17a:	4618      	mov	r0, r3
 801e17c:	370c      	adds	r7, #12
 801e17e:	46bd      	mov	sp, r7
 801e180:	bc80      	pop	{r7}
 801e182:	4770      	bx	lr

0801e184 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 801e184:	b580      	push	{r7, lr}
 801e186:	b082      	sub	sp, #8
 801e188:	af00      	add	r7, sp, #0
 801e18a:	6078      	str	r0, [r7, #4]

  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	f003 0301 	and.w	r3, r3, #1
 801e196:	2b01      	cmp	r3, #1
 801e198:	d10d      	bne.n	801e1b6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	689b      	ldr	r3, [r3, #8]
 801e1a0:	f003 0301 	and.w	r3, r3, #1
 801e1a4:	2b01      	cmp	r3, #1
 801e1a6:	d106      	bne.n	801e1b6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	2201      	movs	r2, #1
 801e1ae:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 801e1b0:	6878      	ldr	r0, [r7, #4]
 801e1b2:	f000 f8af 	bl	801e314 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	f003 0302 	and.w	r3, r3, #2
 801e1c0:	2b02      	cmp	r3, #2
 801e1c2:	d10d      	bne.n	801e1e0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	681b      	ldr	r3, [r3, #0]
 801e1c8:	689b      	ldr	r3, [r3, #8]
 801e1ca:	f003 0302 	and.w	r3, r3, #2
 801e1ce:	2b02      	cmp	r3, #2
 801e1d0:	d106      	bne.n	801e1e0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	681b      	ldr	r3, [r3, #0]
 801e1d6:	2202      	movs	r2, #2
 801e1d8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 801e1da:	6878      	ldr	r0, [r7, #4]
 801e1dc:	f7fe f94c 	bl	801c478 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	681b      	ldr	r3, [r3, #0]
 801e1e6:	f003 0304 	and.w	r3, r3, #4
 801e1ea:	2b04      	cmp	r3, #4
 801e1ec:	d10d      	bne.n	801e20a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	689b      	ldr	r3, [r3, #8]
 801e1f4:	f003 0304 	and.w	r3, r3, #4
 801e1f8:	2b04      	cmp	r3, #4
 801e1fa:	d106      	bne.n	801e20a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	2204      	movs	r2, #4
 801e202:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 801e204:	6878      	ldr	r0, [r7, #4]
 801e206:	f000 f88e 	bl	801e326 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	681b      	ldr	r3, [r3, #0]
 801e20e:	681b      	ldr	r3, [r3, #0]
 801e210:	f003 0308 	and.w	r3, r3, #8
 801e214:	2b08      	cmp	r3, #8
 801e216:	d10d      	bne.n	801e234 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	689b      	ldr	r3, [r3, #8]
 801e21e:	f003 0308 	and.w	r3, r3, #8
 801e222:	2b08      	cmp	r3, #8
 801e224:	d106      	bne.n	801e234 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	2208      	movs	r2, #8
 801e22c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 801e22e:	6878      	ldr	r0, [r7, #4]
 801e230:	f000 f882 	bl	801e338 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	f003 0310 	and.w	r3, r3, #16
 801e23e:	2b10      	cmp	r3, #16
 801e240:	d10d      	bne.n	801e25e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	689b      	ldr	r3, [r3, #8]
 801e248:	f003 0310 	and.w	r3, r3, #16
 801e24c:	2b10      	cmp	r3, #16
 801e24e:	d106      	bne.n	801e25e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	2210      	movs	r2, #16
 801e256:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 801e258:	6878      	ldr	r0, [r7, #4]
 801e25a:	f000 f876 	bl	801e34a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	f003 0320 	and.w	r3, r3, #32
 801e268:	2b20      	cmp	r3, #32
 801e26a:	d10d      	bne.n	801e288 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	689b      	ldr	r3, [r3, #8]
 801e272:	f003 0320 	and.w	r3, r3, #32
 801e276:	2b20      	cmp	r3, #32
 801e278:	d106      	bne.n	801e288 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	2220      	movs	r2, #32
 801e280:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 801e282:	6878      	ldr	r0, [r7, #4]
 801e284:	f000 f86a 	bl	801e35c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e292:	2b40      	cmp	r3, #64	@ 0x40
 801e294:	d10d      	bne.n	801e2b2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	689b      	ldr	r3, [r3, #8]
 801e29c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e2a0:	2b40      	cmp	r3, #64	@ 0x40
 801e2a2:	d106      	bne.n	801e2b2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	2240      	movs	r2, #64	@ 0x40
 801e2aa:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 801e2ac:	6878      	ldr	r0, [r7, #4]
 801e2ae:	f000 f85e 	bl	801e36e <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	681b      	ldr	r3, [r3, #0]
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e2bc:	2b80      	cmp	r3, #128	@ 0x80
 801e2be:	d10d      	bne.n	801e2dc <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	689b      	ldr	r3, [r3, #8]
 801e2c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e2ca:	2b80      	cmp	r3, #128	@ 0x80
 801e2cc:	d106      	bne.n	801e2dc <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	2280      	movs	r2, #128	@ 0x80
 801e2d4:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 801e2d6:	6878      	ldr	r0, [r7, #4]
 801e2d8:	f000 f852 	bl	801e380 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	681b      	ldr	r3, [r3, #0]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e2e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2ea:	d10f      	bne.n	801e30c <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	689b      	ldr	r3, [r3, #8]
 801e2f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2fa:	d107      	bne.n	801e30c <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e304:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801e306:	6878      	ldr	r0, [r7, #4]
 801e308:	f000 f843 	bl	801e392 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 801e30c:	bf00      	nop
 801e30e:	3708      	adds	r7, #8
 801e310:	46bd      	mov	sp, r7
 801e312:	bd80      	pop	{r7, pc}

0801e314 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e314:	b480      	push	{r7}
 801e316:	b083      	sub	sp, #12
 801e318:	af00      	add	r7, sp, #0
 801e31a:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 801e31c:	bf00      	nop
 801e31e:	370c      	adds	r7, #12
 801e320:	46bd      	mov	sp, r7
 801e322:	bc80      	pop	{r7}
 801e324:	4770      	bx	lr

0801e326 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e326:	b480      	push	{r7}
 801e328:	b083      	sub	sp, #12
 801e32a:	af00      	add	r7, sp, #0
 801e32c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 801e32e:	bf00      	nop
 801e330:	370c      	adds	r7, #12
 801e332:	46bd      	mov	sp, r7
 801e334:	bc80      	pop	{r7}
 801e336:	4770      	bx	lr

0801e338 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e338:	b480      	push	{r7}
 801e33a:	b083      	sub	sp, #12
 801e33c:	af00      	add	r7, sp, #0
 801e33e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 801e340:	bf00      	nop
 801e342:	370c      	adds	r7, #12
 801e344:	46bd      	mov	sp, r7
 801e346:	bc80      	pop	{r7}
 801e348:	4770      	bx	lr

0801e34a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e34a:	b480      	push	{r7}
 801e34c:	b083      	sub	sp, #12
 801e34e:	af00      	add	r7, sp, #0
 801e350:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 801e352:	bf00      	nop
 801e354:	370c      	adds	r7, #12
 801e356:	46bd      	mov	sp, r7
 801e358:	bc80      	pop	{r7}
 801e35a:	4770      	bx	lr

0801e35c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e35c:	b480      	push	{r7}
 801e35e:	b083      	sub	sp, #12
 801e360:	af00      	add	r7, sp, #0
 801e362:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 801e364:	bf00      	nop
 801e366:	370c      	adds	r7, #12
 801e368:	46bd      	mov	sp, r7
 801e36a:	bc80      	pop	{r7}
 801e36c:	4770      	bx	lr

0801e36e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e36e:	b480      	push	{r7}
 801e370:	b083      	sub	sp, #12
 801e372:	af00      	add	r7, sp, #0
 801e374:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 801e376:	bf00      	nop
 801e378:	370c      	adds	r7, #12
 801e37a:	46bd      	mov	sp, r7
 801e37c:	bc80      	pop	{r7}
 801e37e:	4770      	bx	lr

0801e380 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e380:	b480      	push	{r7}
 801e382:	b083      	sub	sp, #12
 801e384:	af00      	add	r7, sp, #0
 801e386:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 801e388:	bf00      	nop
 801e38a:	370c      	adds	r7, #12
 801e38c:	46bd      	mov	sp, r7
 801e38e:	bc80      	pop	{r7}
 801e390:	4770      	bx	lr

0801e392 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801e392:	b480      	push	{r7}
 801e394:	b083      	sub	sp, #12
 801e396:	af00      	add	r7, sp, #0
 801e398:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 801e39a:	bf00      	nop
 801e39c:	370c      	adds	r7, #12
 801e39e:	46bd      	mov	sp, r7
 801e3a0:	bc80      	pop	{r7}
 801e3a2:	4770      	bx	lr

0801e3a4 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 801e3a4:	b480      	push	{r7}
 801e3a6:	b083      	sub	sp, #12
 801e3a8:	af00      	add	r7, sp, #0
 801e3aa:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801e3b2:	b2db      	uxtb	r3, r3
}
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	370c      	adds	r7, #12
 801e3b8:	46bd      	mov	sp, r7
 801e3ba:	bc80      	pop	{r7}
 801e3bc:	4770      	bx	lr
	...

0801e3c0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 801e3c0:	b480      	push	{r7}
 801e3c2:	b085      	sub	sp, #20
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
 801e3c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 801e3ca:	2300      	movs	r3, #0
 801e3cc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 801e3ce:	4b12      	ldr	r3, [pc, #72]	@ (801e418 <LPTIM_WaitForFlag+0x58>)
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	4a12      	ldr	r2, [pc, #72]	@ (801e41c <LPTIM_WaitForFlag+0x5c>)
 801e3d4:	fba2 2303 	umull	r2, r3, r2, r3
 801e3d8:	0b9b      	lsrs	r3, r3, #14
 801e3da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e3de:	fb02 f303 	mul.w	r3, r2, r3
 801e3e2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 801e3e4:	68bb      	ldr	r3, [r7, #8]
 801e3e6:	3b01      	subs	r3, #1
 801e3e8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 801e3ea:	68bb      	ldr	r3, [r7, #8]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d101      	bne.n	801e3f4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 801e3f0:	2303      	movs	r3, #3
 801e3f2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	681a      	ldr	r2, [r3, #0]
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	4013      	ands	r3, r2
 801e3fe:	683a      	ldr	r2, [r7, #0]
 801e400:	429a      	cmp	r2, r3
 801e402:	d002      	beq.n	801e40a <LPTIM_WaitForFlag+0x4a>
 801e404:	68bb      	ldr	r3, [r7, #8]
 801e406:	2b00      	cmp	r3, #0
 801e408:	d1ec      	bne.n	801e3e4 <LPTIM_WaitForFlag+0x24>

  return result;
 801e40a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e40c:	4618      	mov	r0, r3
 801e40e:	3714      	adds	r7, #20
 801e410:	46bd      	mov	sp, r7
 801e412:	bc80      	pop	{r7}
 801e414:	4770      	bx	lr
 801e416:	bf00      	nop
 801e418:	20000070 	.word	0x20000070
 801e41c:	d1b71759 	.word	0xd1b71759

0801e420 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 801e420:	b580      	push	{r7, lr}
 801e422:	b08e      	sub	sp, #56	@ 0x38
 801e424:	af00      	add	r7, sp, #0
 801e426:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 801e428:	2300      	movs	r3, #0
 801e42a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e42c:	f3ef 8310 	mrs	r3, PRIMASK
 801e430:	613b      	str	r3, [r7, #16]
  return(result);
 801e432:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 801e434:	633b      	str	r3, [r7, #48]	@ 0x30
 801e436:	2301      	movs	r3, #1
 801e438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e43a:	697b      	ldr	r3, [r7, #20]
 801e43c:	f383 8810 	msr	PRIMASK, r3
}
 801e440:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	4a8f      	ldr	r2, [pc, #572]	@ (801e684 <LPTIM_Disable+0x264>)
 801e448:	4293      	cmp	r3, r2
 801e44a:	d015      	beq.n	801e478 <LPTIM_Disable+0x58>
 801e44c:	4a8d      	ldr	r2, [pc, #564]	@ (801e684 <LPTIM_Disable+0x264>)
 801e44e:	4293      	cmp	r3, r2
 801e450:	d818      	bhi.n	801e484 <LPTIM_Disable+0x64>
 801e452:	4a8d      	ldr	r2, [pc, #564]	@ (801e688 <LPTIM_Disable+0x268>)
 801e454:	4293      	cmp	r3, r2
 801e456:	d003      	beq.n	801e460 <LPTIM_Disable+0x40>
 801e458:	4a8c      	ldr	r2, [pc, #560]	@ (801e68c <LPTIM_Disable+0x26c>)
 801e45a:	4293      	cmp	r3, r2
 801e45c:	d006      	beq.n	801e46c <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 801e45e:	e011      	b.n	801e484 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 801e460:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801e464:	f7ff fbfa 	bl	801dc5c <LL_RCC_GetLPTIMClockSource>
 801e468:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801e46a:	e00c      	b.n	801e486 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 801e46c:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801e470:	f7ff fbf4 	bl	801dc5c <LL_RCC_GetLPTIMClockSource>
 801e474:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801e476:	e006      	b.n	801e486 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 801e478:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801e47c:	f7ff fbee 	bl	801dc5c <LL_RCC_GetLPTIMClockSource>
 801e480:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801e482:	e000      	b.n	801e486 <LPTIM_Disable+0x66>
      break;
 801e484:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	689b      	ldr	r3, [r3, #8]
 801e48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	68db      	ldr	r3, [r3, #12]
 801e494:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpCMP = hlptim->Instance->CMP;
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	695b      	ldr	r3, [r3, #20]
 801e49c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpARR = hlptim->Instance->ARR;
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	699b      	ldr	r3, [r3, #24]
 801e4a4:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	6a1b      	ldr	r3, [r3, #32]
 801e4ac:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4b4:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	4a72      	ldr	r2, [pc, #456]	@ (801e684 <LPTIM_Disable+0x264>)
 801e4bc:	4293      	cmp	r3, r2
 801e4be:	d019      	beq.n	801e4f4 <LPTIM_Disable+0xd4>
 801e4c0:	4a70      	ldr	r2, [pc, #448]	@ (801e684 <LPTIM_Disable+0x264>)
 801e4c2:	4293      	cmp	r3, r2
 801e4c4:	d81d      	bhi.n	801e502 <LPTIM_Disable+0xe2>
 801e4c6:	4a70      	ldr	r2, [pc, #448]	@ (801e688 <LPTIM_Disable+0x268>)
 801e4c8:	4293      	cmp	r3, r2
 801e4ca:	d003      	beq.n	801e4d4 <LPTIM_Disable+0xb4>
 801e4cc:	4a6f      	ldr	r2, [pc, #444]	@ (801e68c <LPTIM_Disable+0x26c>)
 801e4ce:	4293      	cmp	r3, r2
 801e4d0:	d009      	beq.n	801e4e6 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 801e4d2:	e016      	b.n	801e502 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 801e4d4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801e4d8:	f7ff fbd2 	bl	801dc80 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 801e4dc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801e4e0:	f7ff fbf0 	bl	801dcc4 <LL_APB1_GRP1_ReleaseReset>
      break;
 801e4e4:	e00e      	b.n	801e504 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 801e4e6:	2020      	movs	r0, #32
 801e4e8:	f7ff fbdb 	bl	801dca2 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 801e4ec:	2020      	movs	r0, #32
 801e4ee:	f7ff fbfb 	bl	801dce8 <LL_APB1_GRP2_ReleaseReset>
      break;
 801e4f2:	e007      	b.n	801e504 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 801e4f4:	2040      	movs	r0, #64	@ 0x40
 801e4f6:	f7ff fbd4 	bl	801dca2 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 801e4fa:	2040      	movs	r0, #64	@ 0x40
 801e4fc:	f7ff fbf4 	bl	801dce8 <LL_APB1_GRP2_ReleaseReset>
      break;
 801e500:	e000      	b.n	801e504 <LPTIM_Disable+0xe4>
      break;
 801e502:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 801e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e506:	2b00      	cmp	r3, #0
 801e508:	d106      	bne.n	801e518 <LPTIM_Disable+0xf8>
 801e50a:	6a3b      	ldr	r3, [r7, #32]
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d103      	bne.n	801e518 <LPTIM_Disable+0xf8>
 801e510:	69bb      	ldr	r3, [r7, #24]
 801e512:	2b00      	cmp	r3, #0
 801e514:	f000 8097 	beq.w	801e646 <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	4a59      	ldr	r2, [pc, #356]	@ (801e684 <LPTIM_Disable+0x264>)
 801e51e:	4293      	cmp	r3, r2
 801e520:	d013      	beq.n	801e54a <LPTIM_Disable+0x12a>
 801e522:	4a58      	ldr	r2, [pc, #352]	@ (801e684 <LPTIM_Disable+0x264>)
 801e524:	4293      	cmp	r3, r2
 801e526:	d815      	bhi.n	801e554 <LPTIM_Disable+0x134>
 801e528:	4a57      	ldr	r2, [pc, #348]	@ (801e688 <LPTIM_Disable+0x268>)
 801e52a:	4293      	cmp	r3, r2
 801e52c:	d003      	beq.n	801e536 <LPTIM_Disable+0x116>
 801e52e:	4a57      	ldr	r2, [pc, #348]	@ (801e68c <LPTIM_Disable+0x26c>)
 801e530:	4293      	cmp	r3, r2
 801e532:	d005      	beq.n	801e540 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 801e534:	e00e      	b.n	801e554 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 801e536:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801e53a:	f7ff fb76 	bl	801dc2a <LL_RCC_SetLPTIMClockSource>
        break;
 801e53e:	e00a      	b.n	801e556 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 801e540:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801e544:	f7ff fb71 	bl	801dc2a <LL_RCC_SetLPTIMClockSource>
        break;
 801e548:	e005      	b.n	801e556 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 801e54a:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801e54e:	f7ff fb6c 	bl	801dc2a <LL_RCC_SetLPTIMClockSource>
        break;
 801e552:	e000      	b.n	801e556 <LPTIM_Disable+0x136>
        break;
 801e554:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 801e556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d01a      	beq.n	801e592 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	691a      	ldr	r2, [r3, #16]
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	681b      	ldr	r3, [r3, #0]
 801e566:	f042 0201 	orr.w	r2, r2, #1
 801e56a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e572:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 801e574:	2108      	movs	r1, #8
 801e576:	6878      	ldr	r0, [r7, #4]
 801e578:	f7ff ff22 	bl	801e3c0 <LPTIM_WaitForFlag>
 801e57c:	4603      	mov	r3, r0
 801e57e:	2b03      	cmp	r3, #3
 801e580:	d103      	bne.n	801e58a <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	2203      	movs	r2, #3
 801e586:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	2208      	movs	r2, #8
 801e590:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 801e592:	6a3b      	ldr	r3, [r7, #32]
 801e594:	2b00      	cmp	r3, #0
 801e596:	d01a      	beq.n	801e5ce <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	691a      	ldr	r2, [r3, #16]
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	681b      	ldr	r3, [r3, #0]
 801e5a2:	f042 0201 	orr.w	r2, r2, #1
 801e5a6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	6a3a      	ldr	r2, [r7, #32]
 801e5ae:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801e5b0:	2110      	movs	r1, #16
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f7ff ff04 	bl	801e3c0 <LPTIM_WaitForFlag>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	2b03      	cmp	r3, #3
 801e5bc:	d103      	bne.n	801e5c6 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	2203      	movs	r2, #3
 801e5c2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	2210      	movs	r2, #16
 801e5cc:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 801e5ce:	69bb      	ldr	r3, [r7, #24]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d01c      	beq.n	801e60e <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	691a      	ldr	r2, [r3, #16]
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	f042 0201 	orr.w	r2, r2, #1
 801e5e2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	69ba      	ldr	r2, [r7, #24]
 801e5ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801e5ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e5f0:	6878      	ldr	r0, [r7, #4]
 801e5f2:	f7ff fee5 	bl	801e3c0 <LPTIM_WaitForFlag>
 801e5f6:	4603      	mov	r3, r0
 801e5f8:	2b03      	cmp	r3, #3
 801e5fa:	d103      	bne.n	801e604 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	2203      	movs	r2, #3
 801e600:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e60c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	4a1c      	ldr	r2, [pc, #112]	@ (801e684 <LPTIM_Disable+0x264>)
 801e614:	4293      	cmp	r3, r2
 801e616:	d011      	beq.n	801e63c <LPTIM_Disable+0x21c>
 801e618:	4a1a      	ldr	r2, [pc, #104]	@ (801e684 <LPTIM_Disable+0x264>)
 801e61a:	4293      	cmp	r3, r2
 801e61c:	d812      	bhi.n	801e644 <LPTIM_Disable+0x224>
 801e61e:	4a1a      	ldr	r2, [pc, #104]	@ (801e688 <LPTIM_Disable+0x268>)
 801e620:	4293      	cmp	r3, r2
 801e622:	d003      	beq.n	801e62c <LPTIM_Disable+0x20c>
 801e624:	4a19      	ldr	r2, [pc, #100]	@ (801e68c <LPTIM_Disable+0x26c>)
 801e626:	4293      	cmp	r3, r2
 801e628:	d004      	beq.n	801e634 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 801e62a:	e00b      	b.n	801e644 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 801e62c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e62e:	f7ff fafc 	bl	801dc2a <LL_RCC_SetLPTIMClockSource>
        break;
 801e632:	e008      	b.n	801e646 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 801e634:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e636:	f7ff faf8 	bl	801dc2a <LL_RCC_SetLPTIMClockSource>
        break;
 801e63a:	e004      	b.n	801e646 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 801e63c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e63e:	f7ff faf4 	bl	801dc2a <LL_RCC_SetLPTIMClockSource>
        break;
 801e642:	e000      	b.n	801e646 <LPTIM_Disable+0x226>
        break;
 801e644:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	691a      	ldr	r2, [r3, #16]
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	f022 0201 	bic.w	r2, r2, #1
 801e654:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e65c:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e664:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	69fa      	ldr	r2, [r7, #28]
 801e66c:	621a      	str	r2, [r3, #32]
 801e66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e670:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e672:	68fb      	ldr	r3, [r7, #12]
 801e674:	f383 8810 	msr	PRIMASK, r3
}
 801e678:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801e67a:	bf00      	nop
 801e67c:	3738      	adds	r7, #56	@ 0x38
 801e67e:	46bd      	mov	sp, r7
 801e680:	bd80      	pop	{r7, pc}
 801e682:	bf00      	nop
 801e684:	40009800 	.word	0x40009800
 801e688:	40007c00 	.word	0x40007c00
 801e68c:	40009400 	.word	0x40009400

0801e690 <ai_buffer_get_size>:
 801e690:	b360      	cbz	r0, 801e6ec <ai_buffer_get_size+0x5c>
 801e692:	b430      	push	{r4, r5}
 801e694:	6803      	ldr	r3, [r0, #0]
 801e696:	4d16      	ldr	r5, [pc, #88]	@ (801e6f0 <ai_buffer_get_size+0x60>)
 801e698:	6984      	ldr	r4, [r0, #24]
 801e69a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801e69e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801e6a2:	42ab      	cmp	r3, r5
 801e6a4:	6862      	ldr	r2, [r4, #4]
 801e6a6:	d01b      	beq.n	801e6e0 <ai_buffer_get_size+0x50>
 801e6a8:	7d03      	ldrb	r3, [r0, #20]
 801e6aa:	6941      	ldr	r1, [r0, #20]
 801e6ac:	f1a3 0301 	sub.w	r3, r3, #1
 801e6b0:	fab3 f383 	clz	r3, r3
 801e6b4:	095b      	lsrs	r3, r3, #5
 801e6b6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801e6ba:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801e6be:	da0b      	bge.n	801e6d8 <ai_buffer_get_size+0x48>
 801e6c0:	2b01      	cmp	r3, #1
 801e6c2:	d102      	bne.n	801e6ca <ai_buffer_get_size+0x3a>
 801e6c4:	2802      	cmp	r0, #2
 801e6c6:	d007      	beq.n	801e6d8 <ai_buffer_get_size+0x48>
 801e6c8:	2302      	movs	r3, #2
 801e6ca:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801e6ce:	3301      	adds	r3, #1
 801e6d0:	4298      	cmp	r0, r3
 801e6d2:	fb01 f202 	mul.w	r2, r1, r2
 801e6d6:	d1f3      	bne.n	801e6c0 <ai_buffer_get_size+0x30>
 801e6d8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801e6dc:	bc30      	pop	{r4, r5}
 801e6de:	4770      	bx	lr
 801e6e0:	2900      	cmp	r1, #0
 801e6e2:	d0e1      	beq.n	801e6a8 <ai_buffer_get_size+0x18>
 801e6e4:	321f      	adds	r2, #31
 801e6e6:	f022 021f 	bic.w	r2, r2, #31
 801e6ea:	e7dd      	b.n	801e6a8 <ai_buffer_get_size+0x18>
 801e6ec:	4770      	bx	lr
 801e6ee:	bf00      	nop
 801e6f0:	000400c0 	.word	0x000400c0

0801e6f4 <ai_buffer_array_sane>:
 801e6f4:	b138      	cbz	r0, 801e706 <ai_buffer_array_sane+0x12>
 801e6f6:	6843      	ldr	r3, [r0, #4]
 801e6f8:	b123      	cbz	r3, 801e704 <ai_buffer_array_sane+0x10>
 801e6fa:	8840      	ldrh	r0, [r0, #2]
 801e6fc:	3800      	subs	r0, #0
 801e6fe:	bf18      	it	ne
 801e700:	2001      	movne	r0, #1
 801e702:	4770      	bx	lr
 801e704:	4618      	mov	r0, r3
 801e706:	4770      	bx	lr

0801e708 <ai_buffer_array_item_set_address>:
 801e708:	b158      	cbz	r0, 801e722 <ai_buffer_array_item_set_address+0x1a>
 801e70a:	6843      	ldr	r3, [r0, #4]
 801e70c:	b143      	cbz	r3, 801e720 <ai_buffer_array_item_set_address+0x18>
 801e70e:	8840      	ldrh	r0, [r0, #2]
 801e710:	b138      	cbz	r0, 801e722 <ai_buffer_array_item_set_address+0x1a>
 801e712:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801e716:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801e71a:	2001      	movs	r0, #1
 801e71c:	605a      	str	r2, [r3, #4]
 801e71e:	4770      	bx	lr
 801e720:	4618      	mov	r0, r3
 801e722:	4770      	bx	lr

0801e724 <ai_platform_get_weights_map>:
 801e724:	b1f2      	cbz	r2, 801e764 <ai_platform_get_weights_map+0x40>
 801e726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e728:	4605      	mov	r5, r0
 801e72a:	b1c8      	cbz	r0, 801e760 <ai_platform_get_weights_map+0x3c>
 801e72c:	460c      	mov	r4, r1
 801e72e:	b1b9      	cbz	r1, 801e760 <ai_platform_get_weights_map+0x3c>
 801e730:	4b24      	ldr	r3, [pc, #144]	@ (801e7c4 <ai_platform_get_weights_map+0xa0>)
 801e732:	6811      	ldr	r1, [r2, #0]
 801e734:	4299      	cmp	r1, r3
 801e736:	4616      	mov	r6, r2
 801e738:	d00b      	beq.n	801e752 <ai_platform_get_weights_map+0x2e>
 801e73a:	6856      	ldr	r6, [r2, #4]
 801e73c:	b186      	cbz	r6, 801e760 <ai_platform_get_weights_map+0x3c>
 801e73e:	6837      	ldr	r7, [r6, #0]
 801e740:	429f      	cmp	r7, r3
 801e742:	d011      	beq.n	801e768 <ai_platform_get_weights_map+0x44>
 801e744:	6006      	str	r6, [r0, #0]
 801e746:	f1a4 0001 	sub.w	r0, r4, #1
 801e74a:	fab0 f080 	clz	r0, r0
 801e74e:	0940      	lsrs	r0, r0, #5
 801e750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e752:	1d10      	adds	r0, r2, #4
 801e754:	f7ff ffce 	bl	801e6f4 <ai_buffer_array_sane>
 801e758:	b110      	cbz	r0, 801e760 <ai_platform_get_weights_map+0x3c>
 801e75a:	88f3      	ldrh	r3, [r6, #6]
 801e75c:	429c      	cmp	r4, r3
 801e75e:	d01b      	beq.n	801e798 <ai_platform_get_weights_map+0x74>
 801e760:	2000      	movs	r0, #0
 801e762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e764:	2000      	movs	r0, #0
 801e766:	4770      	bx	lr
 801e768:	4631      	mov	r1, r6
 801e76a:	3804      	subs	r0, #4
 801e76c:	2300      	movs	r3, #0
 801e76e:	e004      	b.n	801e77a <ai_platform_get_weights_map+0x56>
 801e770:	3301      	adds	r3, #1
 801e772:	429c      	cmp	r4, r3
 801e774:	f840 2f04 	str.w	r2, [r0, #4]!
 801e778:	d005      	beq.n	801e786 <ai_platform_get_weights_map+0x62>
 801e77a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801e77e:	42ba      	cmp	r2, r7
 801e780:	d1f6      	bne.n	801e770 <ai_platform_get_weights_map+0x4c>
 801e782:	429c      	cmp	r4, r3
 801e784:	d1ec      	bne.n	801e760 <ai_platform_get_weights_map+0x3c>
 801e786:	3401      	adds	r4, #1
 801e788:	4b0e      	ldr	r3, [pc, #56]	@ (801e7c4 <ai_platform_get_weights_map+0xa0>)
 801e78a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801e78e:	1ac0      	subs	r0, r0, r3
 801e790:	fab0 f080 	clz	r0, r0
 801e794:	0940      	lsrs	r0, r0, #5
 801e796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e798:	2100      	movs	r1, #0
 801e79a:	1f28      	subs	r0, r5, #4
 801e79c:	468c      	mov	ip, r1
 801e79e:	e005      	b.n	801e7ac <ai_platform_get_weights_map+0x88>
 801e7a0:	f10c 0c01 	add.w	ip, ip, #1
 801e7a4:	4564      	cmp	r4, ip
 801e7a6:	f840 3f04 	str.w	r3, [r0, #4]!
 801e7aa:	d005      	beq.n	801e7b8 <ai_platform_get_weights_map+0x94>
 801e7ac:	68b3      	ldr	r3, [r6, #8]
 801e7ae:	440b      	add	r3, r1
 801e7b0:	311c      	adds	r1, #28
 801e7b2:	685b      	ldr	r3, [r3, #4]
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	d1f3      	bne.n	801e7a0 <ai_platform_get_weights_map+0x7c>
 801e7b8:	eba4 000c 	sub.w	r0, r4, ip
 801e7bc:	fab0 f080 	clz	r0, r0
 801e7c0:	0940      	lsrs	r0, r0, #5
 801e7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7c4:	a1facade 	.word	0xa1facade

0801e7c8 <ai_platform_get_activations_map>:
 801e7c8:	b1fa      	cbz	r2, 801e80a <ai_platform_get_activations_map+0x42>
 801e7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7cc:	4605      	mov	r5, r0
 801e7ce:	b1d0      	cbz	r0, 801e806 <ai_platform_get_activations_map+0x3e>
 801e7d0:	460c      	mov	r4, r1
 801e7d2:	b1c1      	cbz	r1, 801e806 <ai_platform_get_activations_map+0x3e>
 801e7d4:	4b25      	ldr	r3, [pc, #148]	@ (801e86c <ai_platform_get_activations_map+0xa4>)
 801e7d6:	6811      	ldr	r1, [r2, #0]
 801e7d8:	4299      	cmp	r1, r3
 801e7da:	4616      	mov	r6, r2
 801e7dc:	d00b      	beq.n	801e7f6 <ai_platform_get_activations_map+0x2e>
 801e7de:	6a16      	ldr	r6, [r2, #32]
 801e7e0:	b18e      	cbz	r6, 801e806 <ai_platform_get_activations_map+0x3e>
 801e7e2:	6837      	ldr	r7, [r6, #0]
 801e7e4:	429f      	cmp	r7, r3
 801e7e6:	d012      	beq.n	801e80e <ai_platform_get_activations_map+0x46>
 801e7e8:	6006      	str	r6, [r0, #0]
 801e7ea:	f1a4 0001 	sub.w	r0, r4, #1
 801e7ee:	fab0 f080 	clz	r0, r0
 801e7f2:	0940      	lsrs	r0, r0, #5
 801e7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7f6:	f102 000c 	add.w	r0, r2, #12
 801e7fa:	f7ff ff7b 	bl	801e6f4 <ai_buffer_array_sane>
 801e7fe:	b110      	cbz	r0, 801e806 <ai_platform_get_activations_map+0x3e>
 801e800:	89f3      	ldrh	r3, [r6, #14]
 801e802:	429c      	cmp	r4, r3
 801e804:	d01b      	beq.n	801e83e <ai_platform_get_activations_map+0x76>
 801e806:	2000      	movs	r0, #0
 801e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e80a:	2000      	movs	r0, #0
 801e80c:	4770      	bx	lr
 801e80e:	4631      	mov	r1, r6
 801e810:	3804      	subs	r0, #4
 801e812:	2300      	movs	r3, #0
 801e814:	e004      	b.n	801e820 <ai_platform_get_activations_map+0x58>
 801e816:	3301      	adds	r3, #1
 801e818:	429c      	cmp	r4, r3
 801e81a:	f840 2f04 	str.w	r2, [r0, #4]!
 801e81e:	d005      	beq.n	801e82c <ai_platform_get_activations_map+0x64>
 801e820:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801e824:	42ba      	cmp	r2, r7
 801e826:	d1f6      	bne.n	801e816 <ai_platform_get_activations_map+0x4e>
 801e828:	429c      	cmp	r4, r3
 801e82a:	d1ec      	bne.n	801e806 <ai_platform_get_activations_map+0x3e>
 801e82c:	3401      	adds	r4, #1
 801e82e:	4b0f      	ldr	r3, [pc, #60]	@ (801e86c <ai_platform_get_activations_map+0xa4>)
 801e830:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801e834:	1ac0      	subs	r0, r0, r3
 801e836:	fab0 f080 	clz	r0, r0
 801e83a:	0940      	lsrs	r0, r0, #5
 801e83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e83e:	2100      	movs	r1, #0
 801e840:	1f28      	subs	r0, r5, #4
 801e842:	468c      	mov	ip, r1
 801e844:	e005      	b.n	801e852 <ai_platform_get_activations_map+0x8a>
 801e846:	f10c 0c01 	add.w	ip, ip, #1
 801e84a:	4564      	cmp	r4, ip
 801e84c:	f840 3f04 	str.w	r3, [r0, #4]!
 801e850:	d005      	beq.n	801e85e <ai_platform_get_activations_map+0x96>
 801e852:	6933      	ldr	r3, [r6, #16]
 801e854:	440b      	add	r3, r1
 801e856:	311c      	adds	r1, #28
 801e858:	685b      	ldr	r3, [r3, #4]
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	d1f3      	bne.n	801e846 <ai_platform_get_activations_map+0x7e>
 801e85e:	eba4 000c 	sub.w	r0, r4, ip
 801e862:	fab0 f080 	clz	r0, r0
 801e866:	0940      	lsrs	r0, r0, #5
 801e868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e86a:	bf00      	nop
 801e86c:	a1facade 	.word	0xa1facade

0801e870 <ai_platform_bind_network_params>:
 801e870:	b198      	cbz	r0, 801e89a <ai_platform_bind_network_params+0x2a>
 801e872:	b1a9      	cbz	r1, 801e8a0 <ai_platform_bind_network_params+0x30>
 801e874:	b1ba      	cbz	r2, 801e8a6 <ai_platform_bind_network_params+0x36>
 801e876:	b410      	push	{r4}
 801e878:	4603      	mov	r3, r0
 801e87a:	4c0c      	ldr	r4, [pc, #48]	@ (801e8ac <ai_platform_bind_network_params+0x3c>)
 801e87c:	f843 4b04 	str.w	r4, [r3], #4
 801e880:	f100 0c0c 	add.w	ip, r0, #12
 801e884:	c903      	ldmia	r1, {r0, r1}
 801e886:	e883 0003 	stmia.w	r3, {r0, r1}
 801e88a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e88e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e892:	2301      	movs	r3, #1
 801e894:	4618      	mov	r0, r3
 801e896:	bc10      	pop	{r4}
 801e898:	4770      	bx	lr
 801e89a:	4603      	mov	r3, r0
 801e89c:	4618      	mov	r0, r3
 801e89e:	4770      	bx	lr
 801e8a0:	460b      	mov	r3, r1
 801e8a2:	4618      	mov	r0, r3
 801e8a4:	4770      	bx	lr
 801e8a6:	4613      	mov	r3, r2
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	4770      	bx	lr
 801e8ac:	a1facade 	.word	0xa1facade

0801e8b0 <ai_platform_network_get_error>:
 801e8b0:	4b04      	ldr	r3, [pc, #16]	@ (801e8c4 <ai_platform_network_get_error+0x14>)
 801e8b2:	6802      	ldr	r2, [r0, #0]
 801e8b4:	4393      	bics	r3, r2
 801e8b6:	d102      	bne.n	801e8be <ai_platform_network_get_error+0xe>
 801e8b8:	300c      	adds	r0, #12
 801e8ba:	f000 bc19 	b.w	801f0f0 <core_get_error>
 801e8be:	f241 0010 	movw	r0, #4112	@ 0x1010
 801e8c2:	4770      	bx	lr
 801e8c4:	a1c00100 	.word	0xa1c00100

0801e8c8 <ai_platform_network_set_error>:
 801e8c8:	b110      	cbz	r0, 801e8d0 <ai_platform_network_set_error+0x8>
 801e8ca:	300c      	adds	r0, #12
 801e8cc:	f000 bc16 	b.w	801f0fc <core_set_error>
 801e8d0:	4770      	bx	lr
 801e8d2:	bf00      	nop

0801e8d4 <ai_platform_inputs_get>:
 801e8d4:	4b39      	ldr	r3, [pc, #228]	@ (801e9bc <ai_platform_inputs_get+0xe8>)
 801e8d6:	6802      	ldr	r2, [r0, #0]
 801e8d8:	4393      	bics	r3, r2
 801e8da:	d163      	bne.n	801e9a4 <ai_platform_inputs_get+0xd0>
 801e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8e0:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801e8e2:	b085      	sub	sp, #20
 801e8e4:	4605      	mov	r5, r0
 801e8e6:	460c      	mov	r4, r1
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	d04e      	beq.n	801e98a <ai_platform_inputs_get+0xb6>
 801e8ec:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801e8ee:	2f00      	cmp	r7, #0
 801e8f0:	d04b      	beq.n	801e98a <ai_platform_inputs_get+0xb6>
 801e8f2:	f04f 0b00 	mov.w	fp, #0
 801e8f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8fa:	465e      	mov	r6, fp
 801e8fc:	46ba      	mov	sl, r7
 801e8fe:	e017      	b.n	801e930 <ai_platform_inputs_get+0x5c>
 801e900:	9901      	ldr	r1, [sp, #4]
 801e902:	f04f 0c01 	mov.w	ip, #1
 801e906:	f847 c001 	str.w	ip, [r7, r1]
 801e90a:	69a1      	ldr	r1, [r4, #24]
 801e90c:	684c      	ldr	r4, [r1, #4]
 801e90e:	6028      	str	r0, [r5, #0]
 801e910:	f04f 0101 	mov.w	r1, #1
 801e914:	7529      	strb	r1, [r5, #20]
 801e916:	6968      	ldr	r0, [r5, #20]
 801e918:	60ab      	str	r3, [r5, #8]
 801e91a:	f368 201f 	bfi	r0, r8, #8, #24
 801e91e:	2300      	movs	r3, #0
 801e920:	e9c5 3403 	strd	r3, r4, [r5, #12]
 801e924:	e9c5 0905 	strd	r0, r9, [r5, #20]
 801e928:	606a      	str	r2, [r5, #4]
 801e92a:	3601      	adds	r6, #1
 801e92c:	f10b 0b1c 	add.w	fp, fp, #28
 801e930:	f8ba 3000 	ldrh.w	r3, [sl]
 801e934:	00f2      	lsls	r2, r6, #3
 801e936:	42b3      	cmp	r3, r6
 801e938:	9201      	str	r2, [sp, #4]
 801e93a:	d935      	bls.n	801e9a8 <ai_platform_inputs_get+0xd4>
 801e93c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e940:	2b00      	cmp	r3, #0
 801e942:	d031      	beq.n	801e9a8 <ai_platform_inputs_get+0xd4>
 801e944:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801e948:	b374      	cbz	r4, 801e9a8 <ai_platform_inputs_get+0xd4>
 801e94a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801e94e:	69a2      	ldr	r2, [r4, #24]
 801e950:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801e954:	6810      	ldr	r0, [r2, #0]
 801e956:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 801e95a:	68a3      	ldr	r3, [r4, #8]
 801e95c:	f3c3 2817 	ubfx	r8, r3, #8, #24
 801e960:	f001 fbc2 	bl	80200e8 <ai_array_to_buffer_fmt>
 801e964:	69a1      	ldr	r1, [r4, #24]
 801e966:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801e96a:	688a      	ldr	r2, [r1, #8]
 801e96c:	445d      	add	r5, fp
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d0cc      	beq.n	801e90c <ai_platform_inputs_get+0x38>
 801e972:	2100      	movs	r1, #0
 801e974:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 801e978:	6821      	ldr	r1, [r4, #0]
 801e97a:	6059      	str	r1, [r3, #4]
 801e97c:	b111      	cbz	r1, 801e984 <ai_platform_inputs_get+0xb0>
 801e97e:	8849      	ldrh	r1, [r1, #2]
 801e980:	2900      	cmp	r1, #0
 801e982:	d1bd      	bne.n	801e900 <ai_platform_inputs_get+0x2c>
 801e984:	69a1      	ldr	r1, [r4, #24]
 801e986:	2300      	movs	r3, #0
 801e988:	e7c0      	b.n	801e90c <ai_platform_inputs_get+0x38>
 801e98a:	2218      	movs	r2, #24
 801e98c:	2111      	movs	r1, #17
 801e98e:	f105 000c 	add.w	r0, r5, #12
 801e992:	2600      	movs	r6, #0
 801e994:	f000 fbb2 	bl	801f0fc <core_set_error>
 801e998:	4630      	mov	r0, r6
 801e99a:	b104      	cbz	r4, 801e99e <ai_platform_inputs_get+0xca>
 801e99c:	8026      	strh	r6, [r4, #0]
 801e99e:	b005      	add	sp, #20
 801e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9a4:	2000      	movs	r0, #0
 801e9a6:	4770      	bx	lr
 801e9a8:	b2b6      	uxth	r6, r6
 801e9aa:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801e9ae:	2e00      	cmp	r6, #0
 801e9b0:	d0eb      	beq.n	801e98a <ai_platform_inputs_get+0xb6>
 801e9b2:	f8da 3008 	ldr.w	r3, [sl, #8]
 801e9b6:	6858      	ldr	r0, [r3, #4]
 801e9b8:	e7ef      	b.n	801e99a <ai_platform_inputs_get+0xc6>
 801e9ba:	bf00      	nop
 801e9bc:	a1c00100 	.word	0xa1c00100

0801e9c0 <ai_platform_outputs_get>:
 801e9c0:	4b37      	ldr	r3, [pc, #220]	@ (801eaa0 <ai_platform_outputs_get+0xe0>)
 801e9c2:	6802      	ldr	r2, [r0, #0]
 801e9c4:	4393      	bics	r3, r2
 801e9c6:	d169      	bne.n	801ea9c <ai_platform_outputs_get+0xdc>
 801e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9cc:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801e9ce:	2b01      	cmp	r3, #1
 801e9d0:	b085      	sub	sp, #20
 801e9d2:	4605      	mov	r5, r0
 801e9d4:	460c      	mov	r4, r1
 801e9d6:	d94b      	bls.n	801ea70 <ai_platform_outputs_get+0xb0>
 801e9d8:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801e9da:	f04f 0b00 	mov.w	fp, #0
 801e9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e9e2:	465e      	mov	r6, fp
 801e9e4:	46d8      	mov	r8, fp
 801e9e6:	46ba      	mov	sl, r7
 801e9e8:	e017      	b.n	801ea1a <ai_platform_outputs_get+0x5a>
 801e9ea:	9901      	ldr	r1, [sp, #4]
 801e9ec:	f04f 0c01 	mov.w	ip, #1
 801e9f0:	f847 c001 	str.w	ip, [r7, r1]
 801e9f4:	69a9      	ldr	r1, [r5, #24]
 801e9f6:	684d      	ldr	r5, [r1, #4]
 801e9f8:	6020      	str	r0, [r4, #0]
 801e9fa:	f04f 0101 	mov.w	r1, #1
 801e9fe:	7521      	strb	r1, [r4, #20]
 801ea00:	6960      	ldr	r0, [r4, #20]
 801ea02:	6062      	str	r2, [r4, #4]
 801ea04:	f369 201f 	bfi	r0, r9, #8, #24
 801ea08:	e9c4 5004 	strd	r5, r0, [r4, #16]
 801ea0c:	e9c4 3802 	strd	r3, r8, [r4, #8]
 801ea10:	9b00      	ldr	r3, [sp, #0]
 801ea12:	61a3      	str	r3, [r4, #24]
 801ea14:	3601      	adds	r6, #1
 801ea16:	f10b 0b1c 	add.w	fp, fp, #28
 801ea1a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ea1e:	00f2      	lsls	r2, r6, #3
 801ea20:	42b3      	cmp	r3, r6
 801ea22:	9201      	str	r2, [sp, #4]
 801ea24:	d931      	bls.n	801ea8a <ai_platform_outputs_get+0xca>
 801ea26:	f8da 3010 	ldr.w	r3, [sl, #16]
 801ea2a:	b373      	cbz	r3, 801ea8a <ai_platform_outputs_get+0xca>
 801ea2c:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801ea30:	b35d      	cbz	r5, 801ea8a <ai_platform_outputs_get+0xca>
 801ea32:	f8da 3014 	ldr.w	r3, [sl, #20]
 801ea36:	69aa      	ldr	r2, [r5, #24]
 801ea38:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801ea3c:	68ab      	ldr	r3, [r5, #8]
 801ea3e:	6810      	ldr	r0, [r2, #0]
 801ea40:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801ea44:	68eb      	ldr	r3, [r5, #12]
 801ea46:	9300      	str	r3, [sp, #0]
 801ea48:	f001 fb4e 	bl	80200e8 <ai_array_to_buffer_fmt>
 801ea4c:	69a9      	ldr	r1, [r5, #24]
 801ea4e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801ea52:	688a      	ldr	r2, [r1, #8]
 801ea54:	445c      	add	r4, fp
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	d0cd      	beq.n	801e9f6 <ai_platform_outputs_get+0x36>
 801ea5a:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 801ea5e:	6829      	ldr	r1, [r5, #0]
 801ea60:	6059      	str	r1, [r3, #4]
 801ea62:	b111      	cbz	r1, 801ea6a <ai_platform_outputs_get+0xaa>
 801ea64:	8849      	ldrh	r1, [r1, #2]
 801ea66:	2900      	cmp	r1, #0
 801ea68:	d1bf      	bne.n	801e9ea <ai_platform_outputs_get+0x2a>
 801ea6a:	69a9      	ldr	r1, [r5, #24]
 801ea6c:	2300      	movs	r3, #0
 801ea6e:	e7c2      	b.n	801e9f6 <ai_platform_outputs_get+0x36>
 801ea70:	2218      	movs	r2, #24
 801ea72:	2111      	movs	r1, #17
 801ea74:	f105 000c 	add.w	r0, r5, #12
 801ea78:	2600      	movs	r6, #0
 801ea7a:	f000 fb3f 	bl	801f0fc <core_set_error>
 801ea7e:	4630      	mov	r0, r6
 801ea80:	b104      	cbz	r4, 801ea84 <ai_platform_outputs_get+0xc4>
 801ea82:	8026      	strh	r6, [r4, #0]
 801ea84:	b005      	add	sp, #20
 801ea86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea8a:	b2b6      	uxth	r6, r6
 801ea8c:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801ea90:	2e00      	cmp	r6, #0
 801ea92:	d0ed      	beq.n	801ea70 <ai_platform_outputs_get+0xb0>
 801ea94:	f8da 3014 	ldr.w	r3, [sl, #20]
 801ea98:	6858      	ldr	r0, [r3, #4]
 801ea9a:	e7f1      	b.n	801ea80 <ai_platform_outputs_get+0xc0>
 801ea9c:	2000      	movs	r0, #0
 801ea9e:	4770      	bx	lr
 801eaa0:	a1c00100 	.word	0xa1c00100

0801eaa4 <ai_platform_network_create>:
 801eaa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eaa8:	b083      	sub	sp, #12
 801eaaa:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801eaae:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801eab2:	b320      	cbz	r0, 801eafe <ai_platform_network_create+0x5a>
 801eab4:	6002      	str	r2, [r0, #0]
 801eab6:	4616      	mov	r6, r2
 801eab8:	461f      	mov	r7, r3
 801eaba:	4604      	mov	r4, r0
 801eabc:	f000 fb16 	bl	801f0ec <core_init>
 801eac0:	b970      	cbnz	r0, 801eae0 <ai_platform_network_create+0x3c>
 801eac2:	2530      	movs	r5, #48	@ 0x30
 801eac4:	2300      	movs	r3, #0
 801eac6:	6023      	str	r3, [r4, #0]
 801eac8:	2410      	movs	r4, #16
 801eaca:	464a      	mov	r2, r9
 801eacc:	4641      	mov	r1, r8
 801eace:	4638      	mov	r0, r7
 801ead0:	f001 fb8c 	bl	80201ec <ai_version_get>
 801ead4:	60b0      	str	r0, [r6, #8]
 801ead6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801eada:	b003      	add	sp, #12
 801eadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eae0:	2200      	movs	r2, #0
 801eae2:	4641      	mov	r1, r8
 801eae4:	4638      	mov	r0, r7
 801eae6:	f001 fb81 	bl	80201ec <ai_version_get>
 801eaea:	2200      	movs	r2, #0
 801eaec:	4605      	mov	r5, r0
 801eaee:	2105      	movs	r1, #5
 801eaf0:	2001      	movs	r0, #1
 801eaf2:	f001 fb7b 	bl	80201ec <ai_version_get>
 801eaf6:	4285      	cmp	r5, r0
 801eaf8:	d008      	beq.n	801eb0c <ai_platform_network_create+0x68>
 801eafa:	2501      	movs	r5, #1
 801eafc:	e7e2      	b.n	801eac4 <ai_platform_network_create+0x20>
 801eafe:	2510      	movs	r5, #16
 801eb00:	462c      	mov	r4, r5
 801eb02:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801eb06:	b003      	add	sp, #12
 801eb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb0c:	4b05      	ldr	r3, [pc, #20]	@ (801eb24 <ai_platform_network_create+0x80>)
 801eb0e:	9301      	str	r3, [sp, #4]
 801eb10:	a801      	add	r0, sp, #4
 801eb12:	f000 faff 	bl	801f114 <ai_check_custom_types>
 801eb16:	b110      	cbz	r0, 801eb1e <ai_platform_network_create+0x7a>
 801eb18:	2400      	movs	r4, #0
 801eb1a:	4625      	mov	r5, r4
 801eb1c:	e7d5      	b.n	801eaca <ai_platform_network_create+0x26>
 801eb1e:	2502      	movs	r5, #2
 801eb20:	e7d0      	b.n	801eac4 <ai_platform_network_create+0x20>
 801eb22:	bf00      	nop
 801eb24:	84048403 	.word	0x84048403

0801eb28 <ai_platform_network_init>:
 801eb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb2c:	4a48      	ldr	r2, [pc, #288]	@ (801ec50 <ai_platform_network_init+0x128>)
 801eb2e:	4604      	mov	r4, r0
 801eb30:	6800      	ldr	r0, [r0, #0]
 801eb32:	460b      	mov	r3, r1
 801eb34:	ea00 0102 	and.w	r1, r0, r2
 801eb38:	4382      	bics	r2, r0
 801eb3a:	d13b      	bne.n	801ebb4 <ai_platform_network_init+0x8c>
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d078      	beq.n	801ec32 <ai_platform_network_init+0x10a>
 801eb40:	4a44      	ldr	r2, [pc, #272]	@ (801ec54 <ai_platform_network_init+0x12c>)
 801eb42:	681d      	ldr	r5, [r3, #0]
 801eb44:	4295      	cmp	r5, r2
 801eb46:	d10a      	bne.n	801eb5e <ai_platform_network_init+0x36>
 801eb48:	4288      	cmp	r0, r1
 801eb4a:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 801eb4e:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 801eb52:	d03d      	beq.n	801ebd0 <ai_platform_network_init+0xa8>
 801eb54:	2303      	movs	r3, #3
 801eb56:	6123      	str	r3, [r4, #16]
 801eb58:	4620      	mov	r0, r4
 801eb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb5e:	2101      	movs	r1, #1
 801eb60:	4618      	mov	r0, r3
 801eb62:	461d      	mov	r5, r3
 801eb64:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801eb68:	f7ff fd92 	bl	801e690 <ai_buffer_get_size>
 801eb6c:	f105 071c 	add.w	r7, r5, #28
 801eb70:	4606      	mov	r6, r0
 801eb72:	2101      	movs	r1, #1
 801eb74:	4638      	mov	r0, r7
 801eb76:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801eb7a:	f7ff fd89 	bl	801e690 <ai_buffer_get_size>
 801eb7e:	2e00      	cmp	r6, #0
 801eb80:	bf0a      	itet	eq
 801eb82:	4631      	moveq	r1, r6
 801eb84:	2101      	movne	r1, #1
 801eb86:	4635      	moveq	r5, r6
 801eb88:	b1b0      	cbz	r0, 801ebb8 <ai_platform_network_init+0x90>
 801eb8a:	f1b9 0f00 	cmp.w	r9, #0
 801eb8e:	d057      	beq.n	801ec40 <ai_platform_network_init+0x118>
 801eb90:	f04f 0e01 	mov.w	lr, #1
 801eb94:	f1b8 0f00 	cmp.w	r8, #0
 801eb98:	d011      	beq.n	801ebbe <ai_platform_network_init+0x96>
 801eb9a:	4b2d      	ldr	r3, [pc, #180]	@ (801ec50 <ai_platform_network_init+0x128>)
 801eb9c:	6822      	ldr	r2, [r4, #0]
 801eb9e:	429a      	cmp	r2, r3
 801eba0:	d1d8      	bne.n	801eb54 <ai_platform_network_init+0x2c>
 801eba2:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801eba4:	428b      	cmp	r3, r1
 801eba6:	d21b      	bcs.n	801ebe0 <ai_platform_network_init+0xb8>
 801eba8:	2212      	movs	r2, #18
 801ebaa:	2116      	movs	r1, #22
 801ebac:	f104 000c 	add.w	r0, r4, #12
 801ebb0:	f000 faa4 	bl	801f0fc <core_set_error>
 801ebb4:	2000      	movs	r0, #0
 801ebb6:	e7d0      	b.n	801eb5a <ai_platform_network_init+0x32>
 801ebb8:	4607      	mov	r7, r0
 801ebba:	4686      	mov	lr, r0
 801ebbc:	e7ea      	b.n	801eb94 <ai_platform_network_init+0x6c>
 801ebbe:	2e00      	cmp	r6, #0
 801ebc0:	d0eb      	beq.n	801eb9a <ai_platform_network_init+0x72>
 801ebc2:	2212      	movs	r2, #18
 801ebc4:	2110      	movs	r1, #16
 801ebc6:	f104 000c 	add.w	r0, r4, #12
 801ebca:	f000 fa97 	bl	801f0fc <core_set_error>
 801ebce:	e7f1      	b.n	801ebb4 <ai_platform_network_init+0x8c>
 801ebd0:	e9c4 6308 	strd	r6, r3, [r4, #32]
 801ebd4:	62e5      	str	r5, [r4, #44]	@ 0x2c
 801ebd6:	62a2      	str	r2, [r4, #40]	@ 0x28
 801ebd8:	4620      	mov	r0, r4
 801ebda:	f000 fac5 	bl	801f168 <ai_layers_init_all>
 801ebde:	e7b9      	b.n	801eb54 <ai_platform_network_init+0x2c>
 801ebe0:	b1e1      	cbz	r1, 801ec1c <ai_platform_network_init+0xf4>
 801ebe2:	46ac      	mov	ip, r5
 801ebe4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ebe8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801ebea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ebec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801ebf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801ebf4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801ebf6:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 801ebfa:	4573      	cmp	r3, lr
 801ebfc:	6226      	str	r6, [r4, #32]
 801ebfe:	d311      	bcc.n	801ec24 <ai_platform_network_init+0xfc>
 801ec00:	f1be 0f00 	cmp.w	lr, #0
 801ec04:	d007      	beq.n	801ec16 <ai_platform_network_init+0xee>
 801ec06:	463e      	mov	r6, r7
 801ec08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ec0a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 801ec0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ec0e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ec12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801ec16:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801ec1a:	e7dc      	b.n	801ebd6 <ai_platform_network_init+0xae>
 801ec1c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801ec1e:	6221      	str	r1, [r4, #32]
 801ec20:	4573      	cmp	r3, lr
 801ec22:	d2ed      	bcs.n	801ec00 <ai_platform_network_init+0xd8>
 801ec24:	2213      	movs	r2, #19
 801ec26:	2116      	movs	r1, #22
 801ec28:	f104 000c 	add.w	r0, r4, #12
 801ec2c:	f000 fa66 	bl	801f0fc <core_set_error>
 801ec30:	e7c0      	b.n	801ebb4 <ai_platform_network_init+0x8c>
 801ec32:	2211      	movs	r2, #17
 801ec34:	2110      	movs	r1, #16
 801ec36:	f104 000c 	add.w	r0, r4, #12
 801ec3a:	f000 fa5f 	bl	801f0fc <core_set_error>
 801ec3e:	e7b9      	b.n	801ebb4 <ai_platform_network_init+0x8c>
 801ec40:	2213      	movs	r2, #19
 801ec42:	2110      	movs	r1, #16
 801ec44:	f104 000c 	add.w	r0, r4, #12
 801ec48:	f000 fa58 	bl	801f0fc <core_set_error>
 801ec4c:	e7b2      	b.n	801ebb4 <ai_platform_network_init+0x8c>
 801ec4e:	bf00      	nop
 801ec50:	a1c00100 	.word	0xa1c00100
 801ec54:	a1facade 	.word	0xa1facade

0801ec58 <ai_platform_network_post_init>:
 801ec58:	4b15      	ldr	r3, [pc, #84]	@ (801ecb0 <ai_platform_network_post_init+0x58>)
 801ec5a:	6802      	ldr	r2, [r0, #0]
 801ec5c:	ea02 0103 	and.w	r1, r2, r3
 801ec60:	4393      	bics	r3, r2
 801ec62:	d123      	bne.n	801ecac <ai_platform_network_post_init+0x54>
 801ec64:	b570      	push	{r4, r5, r6, lr}
 801ec66:	6903      	ldr	r3, [r0, #16]
 801ec68:	079b      	lsls	r3, r3, #30
 801ec6a:	4604      	mov	r4, r0
 801ec6c:	d503      	bpl.n	801ec76 <ai_platform_network_post_init+0x1e>
 801ec6e:	428a      	cmp	r2, r1
 801ec70:	d008      	beq.n	801ec84 <ai_platform_network_post_init+0x2c>
 801ec72:	2001      	movs	r0, #1
 801ec74:	bd70      	pop	{r4, r5, r6, pc}
 801ec76:	2210      	movs	r2, #16
 801ec78:	2111      	movs	r1, #17
 801ec7a:	300c      	adds	r0, #12
 801ec7c:	f000 fa3e 	bl	801f0fc <core_set_error>
 801ec80:	2000      	movs	r0, #0
 801ec82:	bd70      	pop	{r4, r5, r6, pc}
 801ec84:	f000 fa80 	bl	801f188 <ai_layers_post_init_all>
 801ec88:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801ec8a:	2e00      	cmp	r6, #0
 801ec8c:	d0f1      	beq.n	801ec72 <ai_platform_network_post_init+0x1a>
 801ec8e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801ec90:	2d00      	cmp	r5, #0
 801ec92:	d0ee      	beq.n	801ec72 <ai_platform_network_post_init+0x1a>
 801ec94:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801ec96:	4629      	mov	r1, r5
 801ec98:	2000      	movs	r0, #0
 801ec9a:	47b0      	blx	r6
 801ec9c:	692b      	ldr	r3, [r5, #16]
 801ec9e:	42ab      	cmp	r3, r5
 801eca0:	d0e7      	beq.n	801ec72 <ai_platform_network_post_init+0x1a>
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	d0e5      	beq.n	801ec72 <ai_platform_network_post_init+0x1a>
 801eca6:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801eca8:	461d      	mov	r5, r3
 801ecaa:	e7f3      	b.n	801ec94 <ai_platform_network_post_init+0x3c>
 801ecac:	2000      	movs	r0, #0
 801ecae:	4770      	bx	lr
 801ecb0:	a1c00100 	.word	0xa1c00100

0801ecb4 <ai_platform_network_process>:
 801ecb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecb8:	4bb7      	ldr	r3, [pc, #732]	@ (801ef98 <ai_platform_network_process+0x2e4>)
 801ecba:	4607      	mov	r7, r0
 801ecbc:	6800      	ldr	r0, [r0, #0]
 801ecbe:	4383      	bics	r3, r0
 801ecc0:	b085      	sub	sp, #20
 801ecc2:	f040 812d 	bne.w	801ef20 <ai_platform_network_process+0x26c>
 801ecc6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	f000 811d 	beq.w	801ef08 <ai_platform_network_process+0x254>
 801ecce:	693b      	ldr	r3, [r7, #16]
 801ecd0:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801ecd4:	f003 0303 	and.w	r3, r3, #3
 801ecd8:	2600      	movs	r6, #0
 801ecda:	2b03      	cmp	r3, #3
 801ecdc:	61be      	str	r6, [r7, #24]
 801ecde:	f040 8129 	bne.w	801ef34 <ai_platform_network_process+0x280>
 801ece2:	2900      	cmp	r1, #0
 801ece4:	f000 8116 	beq.w	801ef14 <ai_platform_network_process+0x260>
 801ece8:	f1b9 0f00 	cmp.w	r9, #0
 801ecec:	f000 8112 	beq.w	801ef14 <ai_platform_network_process+0x260>
 801ecf0:	f8b9 3000 	ldrh.w	r3, [r9]
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	f000 810d 	beq.w	801ef14 <ai_platform_network_process+0x260>
 801ecfa:	698b      	ldr	r3, [r1, #24]
 801ecfc:	e9cd 7202 	strd	r7, r2, [sp, #8]
 801ed00:	f8d3 b000 	ldr.w	fp, [r3]
 801ed04:	460c      	mov	r4, r1
 801ed06:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	d072      	beq.n	801edf4 <ai_platform_network_process+0x140>
 801ed0e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801ed12:	2d00      	cmp	r5, #0
 801ed14:	d06e      	beq.n	801edf4 <ai_platform_network_process+0x140>
 801ed16:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ed1a:	f8d3 a000 	ldr.w	sl, [r3]
 801ed1e:	0133      	lsls	r3, r6, #4
 801ed20:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801ed24:	9301      	str	r3, [sp, #4]
 801ed26:	f000 81ba 	beq.w	801f09e <ai_platform_network_process+0x3ea>
 801ed2a:	69ab      	ldr	r3, [r5, #24]
 801ed2c:	2101      	movs	r1, #1
 801ed2e:	4620      	mov	r0, r4
 801ed30:	685f      	ldr	r7, [r3, #4]
 801ed32:	f7ff fcad 	bl	801e690 <ai_buffer_get_size>
 801ed36:	4287      	cmp	r7, r0
 801ed38:	f0c0 8103 	bcc.w	801ef42 <ai_platform_network_process+0x28e>
 801ed3c:	68e8      	ldr	r0, [r5, #12]
 801ed3e:	69a1      	ldr	r1, [r4, #24]
 801ed40:	68c2      	ldr	r2, [r0, #12]
 801ed42:	68cb      	ldr	r3, [r1, #12]
 801ed44:	429a      	cmp	r2, r3
 801ed46:	f040 80fc 	bne.w	801ef42 <ai_platform_network_process+0x28e>
 801ed4a:	6882      	ldr	r2, [r0, #8]
 801ed4c:	688b      	ldr	r3, [r1, #8]
 801ed4e:	429a      	cmp	r2, r3
 801ed50:	f040 80f7 	bne.w	801ef42 <ai_platform_network_process+0x28e>
 801ed54:	6842      	ldr	r2, [r0, #4]
 801ed56:	684b      	ldr	r3, [r1, #4]
 801ed58:	429a      	cmp	r2, r3
 801ed5a:	f040 80f2 	bne.w	801ef42 <ai_platform_network_process+0x28e>
 801ed5e:	69ab      	ldr	r3, [r5, #24]
 801ed60:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ed64:	f001 fa30 	bl	80201c8 <ai_array_get_data_byte_size>
 801ed68:	9001      	str	r0, [sp, #4]
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	f001 fa44 	bl	80201f8 <get_tensor_byte_size>
 801ed70:	9b01      	ldr	r3, [sp, #4]
 801ed72:	4283      	cmp	r3, r0
 801ed74:	f0c0 80e5 	bcc.w	801ef42 <ai_platform_network_process+0x28e>
 801ed78:	69ab      	ldr	r3, [r5, #24]
 801ed7a:	6818      	ldr	r0, [r3, #0]
 801ed7c:	f001 f9b4 	bl	80200e8 <ai_array_to_buffer_fmt>
 801ed80:	6823      	ldr	r3, [r4, #0]
 801ed82:	4058      	eors	r0, r3
 801ed84:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 801ed88:	f040 8193 	bne.w	801f0b2 <ai_platform_network_process+0x3fe>
 801ed8c:	6863      	ldr	r3, [r4, #4]
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	f000 8185 	beq.w	801f09e <ai_platform_network_process+0x3ea>
 801ed94:	69a3      	ldr	r3, [r4, #24]
 801ed96:	681b      	ldr	r3, [r3, #0]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	f000 8182 	beq.w	801f0a2 <ai_platform_network_process+0x3ee>
 801ed9e:	459b      	cmp	fp, r3
 801eda0:	4628      	mov	r0, r5
 801eda2:	bf38      	it	cc
 801eda4:	469b      	movcc	fp, r3
 801eda6:	f001 fa27 	bl	80201f8 <get_tensor_byte_size>
 801edaa:	f8c8 0008 	str.w	r0, [r8, #8]
 801edae:	69a3      	ldr	r3, [r4, #24]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	fb00 f303 	mul.w	r3, r0, r3
 801edb6:	f8c8 300c 	str.w	r3, [r8, #12]
 801edba:	6861      	ldr	r1, [r4, #4]
 801edbc:	f8c8 1004 	str.w	r1, [r8, #4]
 801edc0:	0132      	lsls	r2, r6, #4
 801edc2:	440b      	add	r3, r1
 801edc4:	f84a 3002 	str.w	r3, [sl, r2]
 801edc8:	69a8      	ldr	r0, [r5, #24]
 801edca:	6803      	ldr	r3, [r0, #0]
 801edcc:	009a      	lsls	r2, r3, #2
 801edce:	f106 0601 	add.w	r6, r6, #1
 801edd2:	f104 041c 	add.w	r4, r4, #28
 801edd6:	f100 80a7 	bmi.w	801ef28 <ai_platform_network_process+0x274>
 801edda:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801edde:	1a9b      	subs	r3, r3, r2
 801ede0:	4419      	add	r1, r3
 801ede2:	6081      	str	r1, [r0, #8]
 801ede4:	69ab      	ldr	r3, [r5, #24]
 801ede6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801edea:	60da      	str	r2, [r3, #12]
 801edec:	f8b9 3000 	ldrh.w	r3, [r9]
 801edf0:	42b3      	cmp	r3, r6
 801edf2:	d888      	bhi.n	801ed06 <ai_platform_network_process+0x52>
 801edf4:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 801edf8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801edfa:	f1b8 0f00 	cmp.w	r8, #0
 801edfe:	f000 80b5 	beq.w	801ef6c <ai_platform_network_process+0x2b8>
 801ee02:	2b01      	cmp	r3, #1
 801ee04:	f240 80a5 	bls.w	801ef52 <ai_platform_network_process+0x29e>
 801ee08:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801ee0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	f000 809e 	beq.w	801ef52 <ai_platform_network_process+0x29e>
 801ee16:	4645      	mov	r5, r8
 801ee18:	2600      	movs	r6, #0
 801ee1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	f000 80a3 	beq.w	801ef6a <ai_platform_network_process+0x2b6>
 801ee24:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801ee28:	2c00      	cmp	r4, #0
 801ee2a:	f000 809e 	beq.w	801ef6a <ai_platform_network_process+0x2b6>
 801ee2e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ee32:	f8d3 a000 	ldr.w	sl, [r3]
 801ee36:	0133      	lsls	r3, r6, #4
 801ee38:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801ee3c:	9301      	str	r3, [sp, #4]
 801ee3e:	f000 8140 	beq.w	801f0c2 <ai_platform_network_process+0x40e>
 801ee42:	69a3      	ldr	r3, [r4, #24]
 801ee44:	2101      	movs	r1, #1
 801ee46:	685b      	ldr	r3, [r3, #4]
 801ee48:	9301      	str	r3, [sp, #4]
 801ee4a:	4628      	mov	r0, r5
 801ee4c:	f7ff fc20 	bl	801e690 <ai_buffer_get_size>
 801ee50:	9b01      	ldr	r3, [sp, #4]
 801ee52:	4283      	cmp	r3, r0
 801ee54:	d37d      	bcc.n	801ef52 <ai_platform_network_process+0x29e>
 801ee56:	68e0      	ldr	r0, [r4, #12]
 801ee58:	69a9      	ldr	r1, [r5, #24]
 801ee5a:	68c2      	ldr	r2, [r0, #12]
 801ee5c:	68cb      	ldr	r3, [r1, #12]
 801ee5e:	429a      	cmp	r2, r3
 801ee60:	d177      	bne.n	801ef52 <ai_platform_network_process+0x29e>
 801ee62:	6882      	ldr	r2, [r0, #8]
 801ee64:	688b      	ldr	r3, [r1, #8]
 801ee66:	429a      	cmp	r2, r3
 801ee68:	d173      	bne.n	801ef52 <ai_platform_network_process+0x29e>
 801ee6a:	6842      	ldr	r2, [r0, #4]
 801ee6c:	684b      	ldr	r3, [r1, #4]
 801ee6e:	429a      	cmp	r2, r3
 801ee70:	d16f      	bne.n	801ef52 <ai_platform_network_process+0x29e>
 801ee72:	69a3      	ldr	r3, [r4, #24]
 801ee74:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ee78:	f001 f9a6 	bl	80201c8 <ai_array_get_data_byte_size>
 801ee7c:	9001      	str	r0, [sp, #4]
 801ee7e:	4620      	mov	r0, r4
 801ee80:	f001 f9ba 	bl	80201f8 <get_tensor_byte_size>
 801ee84:	9b01      	ldr	r3, [sp, #4]
 801ee86:	4283      	cmp	r3, r0
 801ee88:	d363      	bcc.n	801ef52 <ai_platform_network_process+0x29e>
 801ee8a:	69a3      	ldr	r3, [r4, #24]
 801ee8c:	6818      	ldr	r0, [r3, #0]
 801ee8e:	f001 f92b 	bl	80200e8 <ai_array_to_buffer_fmt>
 801ee92:	682b      	ldr	r3, [r5, #0]
 801ee94:	4043      	eors	r3, r0
 801ee96:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 801ee9a:	f040 8119 	bne.w	801f0d0 <ai_platform_network_process+0x41c>
 801ee9e:	686b      	ldr	r3, [r5, #4]
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	f000 810e 	beq.w	801f0c2 <ai_platform_network_process+0x40e>
 801eea6:	69ab      	ldr	r3, [r5, #24]
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	f000 8117 	beq.w	801f0de <ai_platform_network_process+0x42a>
 801eeb0:	459b      	cmp	fp, r3
 801eeb2:	4620      	mov	r0, r4
 801eeb4:	bf38      	it	cc
 801eeb6:	469b      	movcc	fp, r3
 801eeb8:	f001 f99e 	bl	80201f8 <get_tensor_byte_size>
 801eebc:	f8c8 0008 	str.w	r0, [r8, #8]
 801eec0:	69aa      	ldr	r2, [r5, #24]
 801eec2:	6812      	ldr	r2, [r2, #0]
 801eec4:	4603      	mov	r3, r0
 801eec6:	fb02 f303 	mul.w	r3, r2, r3
 801eeca:	f8c8 300c 	str.w	r3, [r8, #12]
 801eece:	6869      	ldr	r1, [r5, #4]
 801eed0:	f8c8 1004 	str.w	r1, [r8, #4]
 801eed4:	0132      	lsls	r2, r6, #4
 801eed6:	440b      	add	r3, r1
 801eed8:	f84a 3002 	str.w	r3, [sl, r2]
 801eedc:	69a0      	ldr	r0, [r4, #24]
 801eede:	6803      	ldr	r3, [r0, #0]
 801eee0:	009b      	lsls	r3, r3, #2
 801eee2:	f106 0601 	add.w	r6, r6, #1
 801eee6:	f105 051c 	add.w	r5, r5, #28
 801eeea:	d439      	bmi.n	801ef60 <ai_platform_network_process+0x2ac>
 801eeec:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801eef0:	1a9b      	subs	r3, r3, r2
 801eef2:	4419      	add	r1, r3
 801eef4:	6081      	str	r1, [r0, #8]
 801eef6:	69a3      	ldr	r3, [r4, #24]
 801eef8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801eefc:	60da      	str	r2, [r3, #12]
 801eefe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801ef02:	429e      	cmp	r6, r3
 801ef04:	d389      	bcc.n	801ee1a <ai_platform_network_process+0x166>
 801ef06:	e030      	b.n	801ef6a <ai_platform_network_process+0x2b6>
 801ef08:	693a      	ldr	r2, [r7, #16]
 801ef0a:	61bb      	str	r3, [r7, #24]
 801ef0c:	f002 0203 	and.w	r2, r2, #3
 801ef10:	2a03      	cmp	r2, #3
 801ef12:	d10f      	bne.n	801ef34 <ai_platform_network_process+0x280>
 801ef14:	2217      	movs	r2, #23
 801ef16:	2112      	movs	r1, #18
 801ef18:	f107 000c 	add.w	r0, r7, #12
 801ef1c:	f000 f8ee 	bl	801f0fc <core_set_error>
 801ef20:	2000      	movs	r0, #0
 801ef22:	b005      	add	sp, #20
 801ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef28:	f8b9 3000 	ldrh.w	r3, [r9]
 801ef2c:	429e      	cmp	r6, r3
 801ef2e:	f4ff aeea 	bcc.w	801ed06 <ai_platform_network_process+0x52>
 801ef32:	e75f      	b.n	801edf4 <ai_platform_network_process+0x140>
 801ef34:	2230      	movs	r2, #48	@ 0x30
 801ef36:	2111      	movs	r1, #17
 801ef38:	f107 000c 	add.w	r0, r7, #12
 801ef3c:	f000 f8de 	bl	801f0fc <core_set_error>
 801ef40:	e7ee      	b.n	801ef20 <ai_platform_network_process+0x26c>
 801ef42:	9f02      	ldr	r7, [sp, #8]
 801ef44:	2218      	movs	r2, #24
 801ef46:	2112      	movs	r1, #18
 801ef48:	f107 000c 	add.w	r0, r7, #12
 801ef4c:	f000 f8d6 	bl	801f0fc <core_set_error>
 801ef50:	e7e6      	b.n	801ef20 <ai_platform_network_process+0x26c>
 801ef52:	2218      	movs	r2, #24
 801ef54:	2113      	movs	r1, #19
 801ef56:	f107 000c 	add.w	r0, r7, #12
 801ef5a:	f000 f8cf 	bl	801f0fc <core_set_error>
 801ef5e:	e7df      	b.n	801ef20 <ai_platform_network_process+0x26c>
 801ef60:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801ef64:	429e      	cmp	r6, r3
 801ef66:	f4ff af58 	bcc.w	801ee1a <ai_platform_network_process+0x166>
 801ef6a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801ef6c:	fa1f fb8b 	uxth.w	fp, fp
 801ef70:	f8a7 b018 	strh.w	fp, [r7, #24]
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	f000 808c 	beq.w	801f092 <ai_platform_network_process+0x3de>
 801ef7a:	2b01      	cmp	r3, #1
 801ef7c:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 801ef7e:	f000 808b 	beq.w	801f098 <ai_platform_network_process+0x3e4>
 801ef82:	f106 080c 	add.w	r8, r6, #12
 801ef86:	8b78      	ldrh	r0, [r7, #26]
 801ef88:	4583      	cmp	fp, r0
 801ef8a:	d9ca      	bls.n	801ef22 <ai_platform_network_process+0x26e>
 801ef8c:	4645      	mov	r5, r8
 801ef8e:	46bb      	mov	fp, r7
 801ef90:	f04f 0800 	mov.w	r8, #0
 801ef94:	b9ae      	cbnz	r6, 801efc2 <ai_platform_network_process+0x30e>
 801ef96:	e02d      	b.n	801eff4 <ai_platform_network_process+0x340>
 801ef98:	a1c00100 	.word	0xa1c00100
 801ef9c:	68df      	ldr	r7, [r3, #12]
 801ef9e:	1bc9      	subs	r1, r1, r7
 801efa0:	4408      	add	r0, r1
 801efa2:	6098      	str	r0, [r3, #8]
 801efa4:	6993      	ldr	r3, [r2, #24]
 801efa6:	6862      	ldr	r2, [r4, #4]
 801efa8:	60da      	str	r2, [r3, #12]
 801efaa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801efae:	f859 200a 	ldr.w	r2, [r9, sl]
 801efb2:	440b      	add	r3, r1
 801efb4:	4293      	cmp	r3, r2
 801efb6:	bf24      	itt	cs
 801efb8:	68e3      	ldrcs	r3, [r4, #12]
 801efba:	1ad3      	subcs	r3, r2, r3
 801efbc:	6063      	str	r3, [r4, #4]
 801efbe:	f108 0801 	add.w	r8, r8, #1
 801efc2:	8833      	ldrh	r3, [r6, #0]
 801efc4:	4543      	cmp	r3, r8
 801efc6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801efca:	d913      	bls.n	801eff4 <ai_platform_network_process+0x340>
 801efcc:	6873      	ldr	r3, [r6, #4]
 801efce:	b18b      	cbz	r3, 801eff4 <ai_platform_network_process+0x340>
 801efd0:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801efd4:	b172      	cbz	r2, 801eff4 <ai_platform_network_process+0x340>
 801efd6:	68b1      	ldr	r1, [r6, #8]
 801efd8:	6993      	ldr	r3, [r2, #24]
 801efda:	f8d1 9000 	ldr.w	r9, [r1]
 801efde:	681f      	ldr	r7, [r3, #0]
 801efe0:	6899      	ldr	r1, [r3, #8]
 801efe2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801efe6:	00bf      	lsls	r7, r7, #2
 801efe8:	6860      	ldr	r0, [r4, #4]
 801efea:	d5d7      	bpl.n	801ef9c <ai_platform_network_process+0x2e8>
 801efec:	68a2      	ldr	r2, [r4, #8]
 801efee:	f000 ffdd 	bl	801ffac <st_int8_copy>
 801eff2:	e7da      	b.n	801efaa <ai_platform_network_process+0x2f6>
 801eff4:	4658      	mov	r0, fp
 801eff6:	f000 f8e5 	bl	801f1c4 <ai_layers_forward_all>
 801effa:	2400      	movs	r4, #0
 801effc:	b9b5      	cbnz	r5, 801f02c <ai_platform_network_process+0x378>
 801effe:	e03b      	b.n	801f078 <ai_platform_network_process+0x3c4>
 801f000:	f859 300a 	ldr.w	r3, [r9, sl]
 801f004:	eb01 020c 	add.w	r2, r1, ip
 801f008:	429a      	cmp	r2, r3
 801f00a:	bf24      	itt	cs
 801f00c:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 801f010:	1a9a      	subcs	r2, r3, r2
 801f012:	f8c8 2004 	str.w	r2, [r8, #4]
 801f016:	6981      	ldr	r1, [r0, #24]
 801f018:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 801f01c:	1bdb      	subs	r3, r3, r7
 801f01e:	441a      	add	r2, r3
 801f020:	608a      	str	r2, [r1, #8]
 801f022:	6983      	ldr	r3, [r0, #24]
 801f024:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f028:	60da      	str	r2, [r3, #12]
 801f02a:	3401      	adds	r4, #1
 801f02c:	882b      	ldrh	r3, [r5, #0]
 801f02e:	42a3      	cmp	r3, r4
 801f030:	d922      	bls.n	801f078 <ai_platform_network_process+0x3c4>
 801f032:	686b      	ldr	r3, [r5, #4]
 801f034:	b303      	cbz	r3, 801f078 <ai_platform_network_process+0x3c4>
 801f036:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f03a:	b1e8      	cbz	r0, 801f078 <ai_platform_network_process+0x3c4>
 801f03c:	68ab      	ldr	r3, [r5, #8]
 801f03e:	6982      	ldr	r2, [r0, #24]
 801f040:	f8d3 9000 	ldr.w	r9, [r3]
 801f044:	6813      	ldr	r3, [r2, #0]
 801f046:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801f04a:	009b      	lsls	r3, r3, #2
 801f04c:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 801f050:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801f054:	d5d4      	bpl.n	801f000 <ai_platform_network_process+0x34c>
 801f056:	6890      	ldr	r0, [r2, #8]
 801f058:	4662      	mov	r2, ip
 801f05a:	f000 ffa7 	bl	801ffac <st_int8_copy>
 801f05e:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801f062:	f859 200a 	ldr.w	r2, [r9, sl]
 801f066:	440b      	add	r3, r1
 801f068:	4293      	cmp	r3, r2
 801f06a:	bf24      	itt	cs
 801f06c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801f070:	1ad3      	subcs	r3, r2, r3
 801f072:	f8c8 3004 	str.w	r3, [r8, #4]
 801f076:	e7d8      	b.n	801f02a <ai_platform_network_process+0x376>
 801f078:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 801f07c:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801f080:	3001      	adds	r0, #1
 801f082:	b280      	uxth	r0, r0
 801f084:	4283      	cmp	r3, r0
 801f086:	f8ab 001a 	strh.w	r0, [fp, #26]
 801f08a:	d881      	bhi.n	801ef90 <ai_platform_network_process+0x2dc>
 801f08c:	b005      	add	sp, #20
 801f08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f092:	461e      	mov	r6, r3
 801f094:	4698      	mov	r8, r3
 801f096:	e776      	b.n	801ef86 <ai_platform_network_process+0x2d2>
 801f098:	f04f 0800 	mov.w	r8, #0
 801f09c:	e773      	b.n	801ef86 <ai_platform_network_process+0x2d2>
 801f09e:	9f02      	ldr	r7, [sp, #8]
 801f0a0:	e738      	b.n	801ef14 <ai_platform_network_process+0x260>
 801f0a2:	9f02      	ldr	r7, [sp, #8]
 801f0a4:	2221      	movs	r2, #33	@ 0x21
 801f0a6:	2112      	movs	r1, #18
 801f0a8:	f107 000c 	add.w	r0, r7, #12
 801f0ac:	f000 f826 	bl	801f0fc <core_set_error>
 801f0b0:	e736      	b.n	801ef20 <ai_platform_network_process+0x26c>
 801f0b2:	9f02      	ldr	r7, [sp, #8]
 801f0b4:	2219      	movs	r2, #25
 801f0b6:	2112      	movs	r1, #18
 801f0b8:	f107 000c 	add.w	r0, r7, #12
 801f0bc:	f000 f81e 	bl	801f0fc <core_set_error>
 801f0c0:	e72e      	b.n	801ef20 <ai_platform_network_process+0x26c>
 801f0c2:	2217      	movs	r2, #23
 801f0c4:	2113      	movs	r1, #19
 801f0c6:	f107 000c 	add.w	r0, r7, #12
 801f0ca:	f000 f817 	bl	801f0fc <core_set_error>
 801f0ce:	e727      	b.n	801ef20 <ai_platform_network_process+0x26c>
 801f0d0:	2219      	movs	r2, #25
 801f0d2:	2113      	movs	r1, #19
 801f0d4:	f107 000c 	add.w	r0, r7, #12
 801f0d8:	f000 f810 	bl	801f0fc <core_set_error>
 801f0dc:	e720      	b.n	801ef20 <ai_platform_network_process+0x26c>
 801f0de:	2221      	movs	r2, #33	@ 0x21
 801f0e0:	2113      	movs	r1, #19
 801f0e2:	f107 000c 	add.w	r0, r7, #12
 801f0e6:	f000 f809 	bl	801f0fc <core_set_error>
 801f0ea:	e719      	b.n	801ef20 <ai_platform_network_process+0x26c>

0801f0ec <core_init>:
 801f0ec:	2001      	movs	r0, #1
 801f0ee:	4770      	bx	lr

0801f0f0 <core_get_error>:
 801f0f0:	4603      	mov	r3, r0
 801f0f2:	2200      	movs	r2, #0
 801f0f4:	6800      	ldr	r0, [r0, #0]
 801f0f6:	601a      	str	r2, [r3, #0]
 801f0f8:	4770      	bx	lr
 801f0fa:	bf00      	nop

0801f0fc <core_set_error>:
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	7800      	ldrb	r0, [r0, #0]
 801f100:	b108      	cbz	r0, 801f106 <core_set_error+0xa>
 801f102:	2000      	movs	r0, #0
 801f104:	4770      	bx	lr
 801f106:	7019      	strb	r1, [r3, #0]
 801f108:	6819      	ldr	r1, [r3, #0]
 801f10a:	f362 211f 	bfi	r1, r2, #8, #24
 801f10e:	2001      	movs	r0, #1
 801f110:	6019      	str	r1, [r3, #0]
 801f112:	4770      	bx	lr

0801f114 <ai_check_custom_types>:
 801f114:	b082      	sub	sp, #8
 801f116:	4b13      	ldr	r3, [pc, #76]	@ (801f164 <ai_check_custom_types+0x50>)
 801f118:	9301      	str	r3, [sp, #4]
 801f11a:	b118      	cbz	r0, 801f124 <ai_check_custom_types+0x10>
 801f11c:	7803      	ldrb	r3, [r0, #0]
 801f11e:	2b03      	cmp	r3, #3
 801f120:	d002      	beq.n	801f128 <ai_check_custom_types+0x14>
 801f122:	2000      	movs	r0, #0
 801f124:	b002      	add	sp, #8
 801f126:	4770      	bx	lr
 801f128:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801f12c:	4293      	cmp	r3, r2
 801f12e:	d004      	beq.n	801f13a <ai_check_custom_types+0x26>
 801f130:	2001      	movs	r0, #1
 801f132:	f080 0001 	eor.w	r0, r0, #1
 801f136:	b002      	add	sp, #8
 801f138:	4770      	bx	lr
 801f13a:	7842      	ldrb	r2, [r0, #1]
 801f13c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801f140:	429a      	cmp	r2, r3
 801f142:	f100 0001 	add.w	r0, r0, #1
 801f146:	d1f3      	bne.n	801f130 <ai_check_custom_types+0x1c>
 801f148:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801f14c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801f150:	429a      	cmp	r2, r3
 801f152:	d1ed      	bne.n	801f130 <ai_check_custom_types+0x1c>
 801f154:	7842      	ldrb	r2, [r0, #1]
 801f156:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801f15a:	429a      	cmp	r2, r3
 801f15c:	d1e8      	bne.n	801f130 <ai_check_custom_types+0x1c>
 801f15e:	2000      	movs	r0, #0
 801f160:	e7e7      	b.n	801f132 <ai_check_custom_types+0x1e>
 801f162:	bf00      	nop
 801f164:	84048403 	.word	0x84048403

0801f168 <ai_layers_init_all>:
 801f168:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801f16a:	4601      	mov	r1, r0
 801f16c:	b153      	cbz	r3, 801f184 <ai_layers_init_all+0x1c>
 801f16e:	2000      	movs	r0, #0
 801f170:	461a      	mov	r2, r3
 801f172:	60d9      	str	r1, [r3, #12]
 801f174:	691b      	ldr	r3, [r3, #16]
 801f176:	4293      	cmp	r3, r2
 801f178:	f100 0001 	add.w	r0, r0, #1
 801f17c:	d003      	beq.n	801f186 <ai_layers_init_all+0x1e>
 801f17e:	2b00      	cmp	r3, #0
 801f180:	d1f6      	bne.n	801f170 <ai_layers_init_all+0x8>
 801f182:	4770      	bx	lr
 801f184:	4618      	mov	r0, r3
 801f186:	4770      	bx	lr

0801f188 <ai_layers_post_init_all>:
 801f188:	b538      	push	{r3, r4, r5, lr}
 801f18a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801f18c:	b1b4      	cbz	r4, 801f1bc <ai_layers_post_init_all+0x34>
 801f18e:	6863      	ldr	r3, [r4, #4]
 801f190:	07db      	lsls	r3, r3, #31
 801f192:	f04f 0500 	mov.w	r5, #0
 801f196:	d504      	bpl.n	801f1a2 <ai_layers_post_init_all+0x1a>
 801f198:	6a23      	ldr	r3, [r4, #32]
 801f19a:	4620      	mov	r0, r4
 801f19c:	b10b      	cbz	r3, 801f1a2 <ai_layers_post_init_all+0x1a>
 801f19e:	4798      	blx	r3
 801f1a0:	3501      	adds	r5, #1
 801f1a2:	6923      	ldr	r3, [r4, #16]
 801f1a4:	42a3      	cmp	r3, r4
 801f1a6:	d007      	beq.n	801f1b8 <ai_layers_post_init_all+0x30>
 801f1a8:	b133      	cbz	r3, 801f1b8 <ai_layers_post_init_all+0x30>
 801f1aa:	461c      	mov	r4, r3
 801f1ac:	6863      	ldr	r3, [r4, #4]
 801f1ae:	07db      	lsls	r3, r3, #31
 801f1b0:	d4f2      	bmi.n	801f198 <ai_layers_post_init_all+0x10>
 801f1b2:	6923      	ldr	r3, [r4, #16]
 801f1b4:	42a3      	cmp	r3, r4
 801f1b6:	d1f7      	bne.n	801f1a8 <ai_layers_post_init_all+0x20>
 801f1b8:	4628      	mov	r0, r5
 801f1ba:	bd38      	pop	{r3, r4, r5, pc}
 801f1bc:	4625      	mov	r5, r4
 801f1be:	4628      	mov	r0, r5
 801f1c0:	bd38      	pop	{r3, r4, r5, pc}
 801f1c2:	bf00      	nop

0801f1c4 <ai_layers_forward_all>:
 801f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1c8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801f1cc:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801f1ce:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801f1d0:	4604      	mov	r4, r0
 801f1d2:	f1b8 0f00 	cmp.w	r8, #0
 801f1d6:	d02a      	beq.n	801f22e <ai_layers_forward_all+0x6a>
 801f1d8:	b32d      	cbz	r5, 801f226 <ai_layers_forward_all+0x62>
 801f1da:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801f1dc:	4629      	mov	r1, r5
 801f1de:	2001      	movs	r0, #1
 801f1e0:	47c0      	blx	r8
 801f1e2:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801f1e4:	b1fe      	cbz	r6, 801f226 <ai_layers_forward_all+0x62>
 801f1e6:	2700      	movs	r7, #0
 801f1e8:	4631      	mov	r1, r6
 801f1ea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801f1ec:	2002      	movs	r0, #2
 801f1ee:	47c0      	blx	r8
 801f1f0:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801f1f2:	4628      	mov	r0, r5
 801f1f4:	696b      	ldr	r3, [r5, #20]
 801f1f6:	4798      	blx	r3
 801f1f8:	692e      	ldr	r6, [r5, #16]
 801f1fa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801f1fc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801f1fe:	42b5      	cmp	r5, r6
 801f200:	f04f 0003 	mov.w	r0, #3
 801f204:	d007      	beq.n	801f216 <ai_layers_forward_all+0x52>
 801f206:	47c0      	blx	r8
 801f208:	3701      	adds	r7, #1
 801f20a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801f20c:	2e00      	cmp	r6, #0
 801f20e:	d1eb      	bne.n	801f1e8 <ai_layers_forward_all+0x24>
 801f210:	4638      	mov	r0, r7
 801f212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f216:	2003      	movs	r0, #3
 801f218:	47c0      	blx	r8
 801f21a:	2300      	movs	r3, #0
 801f21c:	3701      	adds	r7, #1
 801f21e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801f220:	4638      	mov	r0, r7
 801f222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f226:	2700      	movs	r7, #0
 801f228:	4638      	mov	r0, r7
 801f22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f22e:	2d00      	cmp	r5, #0
 801f230:	d0f9      	beq.n	801f226 <ai_layers_forward_all+0x62>
 801f232:	4647      	mov	r7, r8
 801f234:	696b      	ldr	r3, [r5, #20]
 801f236:	4628      	mov	r0, r5
 801f238:	4798      	blx	r3
 801f23a:	462b      	mov	r3, r5
 801f23c:	692d      	ldr	r5, [r5, #16]
 801f23e:	429d      	cmp	r5, r3
 801f240:	d004      	beq.n	801f24c <ai_layers_forward_all+0x88>
 801f242:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801f244:	3701      	adds	r7, #1
 801f246:	2d00      	cmp	r5, #0
 801f248:	d1f4      	bne.n	801f234 <ai_layers_forward_all+0x70>
 801f24a:	e7e1      	b.n	801f210 <ai_layers_forward_all+0x4c>
 801f24c:	2300      	movs	r3, #0
 801f24e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801f250:	3701      	adds	r7, #1
 801f252:	e7dd      	b.n	801f210 <ai_layers_forward_all+0x4c>

0801f254 <forward_dense>:
 801f254:	6982      	ldr	r2, [r0, #24]
 801f256:	8813      	ldrh	r3, [r2, #0]
 801f258:	b90b      	cbnz	r3, 801f25e <forward_dense+0xa>
 801f25a:	685b      	ldr	r3, [r3, #4]
 801f25c:	deff      	udf	#255	@ 0xff
 801f25e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f262:	6857      	ldr	r7, [r2, #4]
 801f264:	6878      	ldr	r0, [r7, #4]
 801f266:	b08f      	sub	sp, #60	@ 0x3c
 801f268:	b100      	cbz	r0, 801f26c <forward_dense+0x18>
 801f26a:	6800      	ldr	r0, [r0, #0]
 801f26c:	2b01      	cmp	r3, #1
 801f26e:	d05d      	beq.n	801f32c <forward_dense+0xd8>
 801f270:	693a      	ldr	r2, [r7, #16]
 801f272:	b102      	cbz	r2, 801f276 <forward_dense+0x22>
 801f274:	6812      	ldr	r2, [r2, #0]
 801f276:	2b02      	cmp	r3, #2
 801f278:	d032      	beq.n	801f2e0 <forward_dense+0x8c>
 801f27a:	69fd      	ldr	r5, [r7, #28]
 801f27c:	2d00      	cmp	r5, #0
 801f27e:	d053      	beq.n	801f328 <forward_dense+0xd4>
 801f280:	8b3c      	ldrh	r4, [r7, #24]
 801f282:	6829      	ldr	r1, [r5, #0]
 801f284:	2c01      	cmp	r4, #1
 801f286:	d954      	bls.n	801f332 <forward_dense+0xde>
 801f288:	686d      	ldr	r5, [r5, #4]
 801f28a:	698e      	ldr	r6, [r1, #24]
 801f28c:	68c4      	ldr	r4, [r0, #12]
 801f28e:	68d1      	ldr	r1, [r2, #12]
 801f290:	f8d4 e004 	ldr.w	lr, [r4, #4]
 801f294:	f8d1 9004 	ldr.w	r9, [r1, #4]
 801f298:	e9d1 4c02 	ldrd	r4, ip, [r1, #8]
 801f29c:	6831      	ldr	r1, [r6, #0]
 801f29e:	2b03      	cmp	r3, #3
 801f2a0:	fb0c f804 	mul.w	r8, ip, r4
 801f2a4:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 801f2a8:	d045      	beq.n	801f336 <forward_dense+0xe2>
 801f2aa:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801f2ac:	b11c      	cbz	r4, 801f2b6 <forward_dense+0x62>
 801f2ae:	6824      	ldr	r4, [r4, #0]
 801f2b0:	b10c      	cbz	r4, 801f2b6 <forward_dense+0x62>
 801f2b2:	69a3      	ldr	r3, [r4, #24]
 801f2b4:	689c      	ldr	r4, [r3, #8]
 801f2b6:	6983      	ldr	r3, [r0, #24]
 801f2b8:	6992      	ldr	r2, [r2, #24]
 801f2ba:	6899      	ldr	r1, [r3, #8]
 801f2bc:	6890      	ldr	r0, [r2, #8]
 801f2be:	b10d      	cbz	r5, 801f2c4 <forward_dense+0x70>
 801f2c0:	69ab      	ldr	r3, [r5, #24]
 801f2c2:	689d      	ldr	r5, [r3, #8]
 801f2c4:	4f1d      	ldr	r7, [pc, #116]	@ (801f33c <forward_dense+0xe8>)
 801f2c6:	45bc      	cmp	ip, r7
 801f2c8:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 801f2cc:	d022      	beq.n	801f314 <forward_dense+0xc0>
 801f2ce:	4e1c      	ldr	r6, [pc, #112]	@ (801f340 <forward_dense+0xec>)
 801f2d0:	45b4      	cmp	ip, r6
 801f2d2:	d015      	beq.n	801f300 <forward_dense+0xac>
 801f2d4:	4b1b      	ldr	r3, [pc, #108]	@ (801f344 <forward_dense+0xf0>)
 801f2d6:	459c      	cmp	ip, r3
 801f2d8:	d005      	beq.n	801f2e6 <forward_dense+0x92>
 801f2da:	b00f      	add	sp, #60	@ 0x3c
 801f2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f2e0:	2300      	movs	r3, #0
 801f2e2:	685b      	ldr	r3, [r3, #4]
 801f2e4:	deff      	udf	#255	@ 0xff
 801f2e6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801f2ea:	a807      	add	r0, sp, #28
 801f2ec:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 801f2f0:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 801f2f4:	9209      	str	r2, [sp, #36]	@ 0x24
 801f2f6:	f000 f965 	bl	801f5c4 <forward_lite_dense_if32of32wf32>
 801f2fa:	b00f      	add	sp, #60	@ 0x3c
 801f2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f300:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801f304:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801f308:	9400      	str	r4, [sp, #0]
 801f30a:	f000 fb35 	bl	801f978 <forward_lite_dense_if32of32wf32_lut4>
 801f30e:	b00f      	add	sp, #60	@ 0x3c
 801f310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f314:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801f318:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801f31c:	9400      	str	r4, [sp, #0]
 801f31e:	f000 fca7 	bl	801fc70 <forward_lite_dense_if32of32wf32_lut8>
 801f322:	b00f      	add	sp, #60	@ 0x3c
 801f324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f328:	4629      	mov	r1, r5
 801f32a:	e7ae      	b.n	801f28a <forward_dense+0x36>
 801f32c:	2300      	movs	r3, #0
 801f32e:	685b      	ldr	r3, [r3, #4]
 801f330:	deff      	udf	#255	@ 0xff
 801f332:	2500      	movs	r5, #0
 801f334:	e7a9      	b.n	801f28a <forward_dense+0x36>
 801f336:	2300      	movs	r3, #0
 801f338:	685b      	ldr	r3, [r3, #4]
 801f33a:	deff      	udf	#255	@ 0xff
 801f33c:	00d01040 	.word	0x00d01040
 801f340:	00f01040 	.word	0x00f01040
 801f344:	00821040 	.word	0x00821040

0801f348 <forward_sigmoid>:
 801f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f34a:	6982      	ldr	r2, [r0, #24]
 801f34c:	8813      	ldrh	r3, [r2, #0]
 801f34e:	2b00      	cmp	r3, #0
 801f350:	d038      	beq.n	801f3c4 <forward_sigmoid+0x7c>
 801f352:	6852      	ldr	r2, [r2, #4]
 801f354:	6854      	ldr	r4, [r2, #4]
 801f356:	b104      	cbz	r4, 801f35a <forward_sigmoid+0x12>
 801f358:	6824      	ldr	r4, [r4, #0]
 801f35a:	2b01      	cmp	r3, #1
 801f35c:	d031      	beq.n	801f3c2 <forward_sigmoid+0x7a>
 801f35e:	6915      	ldr	r5, [r2, #16]
 801f360:	b105      	cbz	r5, 801f364 <forward_sigmoid+0x1c>
 801f362:	682d      	ldr	r5, [r5, #0]
 801f364:	68a3      	ldr	r3, [r4, #8]
 801f366:	0a1b      	lsrs	r3, r3, #8
 801f368:	d02e      	beq.n	801f3c8 <forward_sigmoid+0x80>
 801f36a:	68e0      	ldr	r0, [r4, #12]
 801f36c:	2201      	movs	r2, #1
 801f36e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f376:	4298      	cmp	r0, r3
 801f378:	fb01 f202 	mul.w	r2, r1, r2
 801f37c:	d1f9      	bne.n	801f372 <forward_sigmoid+0x2a>
 801f37e:	69a7      	ldr	r7, [r4, #24]
 801f380:	69a9      	ldr	r1, [r5, #24]
 801f382:	68bb      	ldr	r3, [r7, #8]
 801f384:	688d      	ldr	r5, [r1, #8]
 801f386:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f38a:	3a01      	subs	r2, #1
 801f38c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f390:	42a3      	cmp	r3, r4
 801f392:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801f396:	d813      	bhi.n	801f3c0 <forward_sigmoid+0x78>
 801f398:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
 801f39c:	f854 0904 	ldr.w	r0, [r4], #-4
 801f3a0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 801f3a4:	f001 fec4 	bl	8021130 <expf>
 801f3a8:	4631      	mov	r1, r6
 801f3aa:	f7e1 f9b3 	bl	8000714 <__addsf3>
 801f3ae:	4601      	mov	r1, r0
 801f3b0:	4630      	mov	r0, r6
 801f3b2:	f7e1 fb6b 	bl	8000a8c <__aeabi_fdiv>
 801f3b6:	f845 0904 	str.w	r0, [r5], #-4
 801f3ba:	68bb      	ldr	r3, [r7, #8]
 801f3bc:	42a3      	cmp	r3, r4
 801f3be:	d9ed      	bls.n	801f39c <forward_sigmoid+0x54>
 801f3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3c2:	2300      	movs	r3, #0
 801f3c4:	685b      	ldr	r3, [r3, #4]
 801f3c6:	deff      	udf	#255	@ 0xff
 801f3c8:	69a7      	ldr	r7, [r4, #24]
 801f3ca:	69ab      	ldr	r3, [r5, #24]
 801f3cc:	68bc      	ldr	r4, [r7, #8]
 801f3ce:	689d      	ldr	r5, [r3, #8]
 801f3d0:	e7e2      	b.n	801f398 <forward_sigmoid+0x50>
 801f3d2:	bf00      	nop

0801f3d4 <forward_relu>:
 801f3d4:	6982      	ldr	r2, [r0, #24]
 801f3d6:	8813      	ldrh	r3, [r2, #0]
 801f3d8:	b90b      	cbnz	r3, 801f3de <forward_relu+0xa>
 801f3da:	685b      	ldr	r3, [r3, #4]
 801f3dc:	deff      	udf	#255	@ 0xff
 801f3de:	6852      	ldr	r2, [r2, #4]
 801f3e0:	6851      	ldr	r1, [r2, #4]
 801f3e2:	b101      	cbz	r1, 801f3e6 <forward_relu+0x12>
 801f3e4:	6809      	ldr	r1, [r1, #0]
 801f3e6:	2b01      	cmp	r3, #1
 801f3e8:	d07a      	beq.n	801f4e0 <forward_relu+0x10c>
 801f3ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3ee:	6913      	ldr	r3, [r2, #16]
 801f3f0:	b103      	cbz	r3, 801f3f4 <forward_relu+0x20>
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	699c      	ldr	r4, [r3, #24]
 801f3f6:	698a      	ldr	r2, [r1, #24]
 801f3f8:	688b      	ldr	r3, [r1, #8]
 801f3fa:	69c6      	ldr	r6, [r0, #28]
 801f3fc:	68a4      	ldr	r4, [r4, #8]
 801f3fe:	6895      	ldr	r5, [r2, #8]
 801f400:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801f404:	b1ae      	cbz	r6, 801f432 <forward_relu+0x5e>
 801f406:	6872      	ldr	r2, [r6, #4]
 801f408:	2a01      	cmp	r2, #1
 801f40a:	d037      	beq.n	801f47c <forward_relu+0xa8>
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d05e      	beq.n	801f4ce <forward_relu+0xfa>
 801f410:	68c8      	ldr	r0, [r1, #12]
 801f412:	2201      	movs	r2, #1
 801f414:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f418:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f41c:	4298      	cmp	r0, r3
 801f41e:	fb01 f202 	mul.w	r2, r1, r2
 801f422:	d1f9      	bne.n	801f418 <forward_relu+0x44>
 801f424:	68b3      	ldr	r3, [r6, #8]
 801f426:	4629      	mov	r1, r5
 801f428:	4620      	mov	r0, r4
 801f42a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f42e:	f000 b85b 	b.w	801f4e8 <forward_lite_nl_relu_generic_if32of32_kernel>
 801f432:	2b00      	cmp	r3, #0
 801f434:	d04d      	beq.n	801f4d2 <forward_relu+0xfe>
 801f436:	68c8      	ldr	r0, [r1, #12]
 801f438:	2201      	movs	r2, #1
 801f43a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f43e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f442:	4283      	cmp	r3, r0
 801f444:	fb01 f202 	mul.w	r2, r1, r2
 801f448:	d1f9      	bne.n	801f43e <forward_relu+0x6a>
 801f44a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f44e:	3a01      	subs	r2, #1
 801f450:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 801f454:	42af      	cmp	r7, r5
 801f456:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801f45a:	d30d      	bcc.n	801f478 <forward_relu+0xa4>
 801f45c:	f04f 0800 	mov.w	r8, #0
 801f460:	f857 6904 	ldr.w	r6, [r7], #-4
 801f464:	4641      	mov	r1, r8
 801f466:	4630      	mov	r0, r6
 801f468:	f7e1 fc0e 	bl	8000c88 <__aeabi_fcmpge>
 801f46c:	b900      	cbnz	r0, 801f470 <forward_relu+0x9c>
 801f46e:	4646      	mov	r6, r8
 801f470:	42bd      	cmp	r5, r7
 801f472:	f844 6904 	str.w	r6, [r4], #-4
 801f476:	d9f3      	bls.n	801f460 <forward_relu+0x8c>
 801f478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f47c:	b35b      	cbz	r3, 801f4d6 <forward_relu+0x102>
 801f47e:	68c8      	ldr	r0, [r1, #12]
 801f480:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f484:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f488:	4298      	cmp	r0, r3
 801f48a:	fb01 f202 	mul.w	r2, r1, r2
 801f48e:	d1f9      	bne.n	801f484 <forward_relu+0xb0>
 801f490:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f494:	3a01      	subs	r2, #1
 801f496:	68b3      	ldr	r3, [r6, #8]
 801f498:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 801f49c:	42ae      	cmp	r6, r5
 801f49e:	f8d3 8000 	ldr.w	r8, [r3]
 801f4a2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801f4a6:	d3e7      	bcc.n	801f478 <forward_relu+0xa4>
 801f4a8:	f04f 0900 	mov.w	r9, #0
 801f4ac:	f856 7904 	ldr.w	r7, [r6], #-4
 801f4b0:	4640      	mov	r0, r8
 801f4b2:	4639      	mov	r1, r7
 801f4b4:	f7e1 fbd4 	bl	8000c60 <__aeabi_fcmplt>
 801f4b8:	b120      	cbz	r0, 801f4c4 <forward_relu+0xf0>
 801f4ba:	42b5      	cmp	r5, r6
 801f4bc:	f844 7904 	str.w	r7, [r4], #-4
 801f4c0:	d9f4      	bls.n	801f4ac <forward_relu+0xd8>
 801f4c2:	e7d9      	b.n	801f478 <forward_relu+0xa4>
 801f4c4:	42b5      	cmp	r5, r6
 801f4c6:	f844 9904 	str.w	r9, [r4], #-4
 801f4ca:	d9ef      	bls.n	801f4ac <forward_relu+0xd8>
 801f4cc:	e7d4      	b.n	801f478 <forward_relu+0xa4>
 801f4ce:	2201      	movs	r2, #1
 801f4d0:	e7a8      	b.n	801f424 <forward_relu+0x50>
 801f4d2:	462f      	mov	r7, r5
 801f4d4:	e7c2      	b.n	801f45c <forward_relu+0x88>
 801f4d6:	68b3      	ldr	r3, [r6, #8]
 801f4d8:	462e      	mov	r6, r5
 801f4da:	f8d3 8000 	ldr.w	r8, [r3]
 801f4de:	e7e3      	b.n	801f4a8 <forward_relu+0xd4>
 801f4e0:	2300      	movs	r3, #0
 801f4e2:	685b      	ldr	r3, [r3, #4]
 801f4e4:	deff      	udf	#255	@ 0xff
 801f4e6:	bf00      	nop

0801f4e8 <forward_lite_nl_relu_generic_if32of32_kernel>:
 801f4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f4ec:	f102 4480 	add.w	r4, r2, #1073741824	@ 0x40000000
 801f4f0:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801f4f4:	681f      	ldr	r7, [r3, #0]
 801f4f6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801f4fa:	3c01      	subs	r4, #1
 801f4fc:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 801f500:	4688      	mov	r8, r1
 801f502:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f506:	4650      	mov	r0, sl
 801f508:	2100      	movs	r1, #0
 801f50a:	f7e1 fba9 	bl	8000c60 <__aeabi_fcmplt>
 801f50e:	bb20      	cbnz	r0, 801f55a <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801f510:	4544      	cmp	r4, r8
 801f512:	d210      	bcs.n	801f536 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801f514:	e01f      	b.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f516:	f7e1 fbb7 	bl	8000c88 <__aeabi_fcmpge>
 801f51a:	4603      	mov	r3, r0
 801f51c:	4639      	mov	r1, r7
 801f51e:	4628      	mov	r0, r5
 801f520:	b12b      	cbz	r3, 801f52e <forward_lite_nl_relu_generic_if32of32_kernel+0x46>
 801f522:	f7e1 f8f5 	bl	8000710 <__aeabi_fsub>
 801f526:	4649      	mov	r1, r9
 801f528:	f7e1 f9fc 	bl	8000924 <__aeabi_fmul>
 801f52c:	4605      	mov	r5, r0
 801f52e:	45a0      	cmp	r8, r4
 801f530:	f846 5904 	str.w	r5, [r6], #-4
 801f534:	d80f      	bhi.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f536:	f854 5904 	ldr.w	r5, [r4], #-4
 801f53a:	4650      	mov	r0, sl
 801f53c:	4629      	mov	r1, r5
 801f53e:	f7e1 fba3 	bl	8000c88 <__aeabi_fcmpge>
 801f542:	4603      	mov	r3, r0
 801f544:	4629      	mov	r1, r5
 801f546:	4638      	mov	r0, r7
 801f548:	2b00      	cmp	r3, #0
 801f54a:	d1e4      	bne.n	801f516 <forward_lite_nl_relu_generic_if32of32_kernel+0x2e>
 801f54c:	4655      	mov	r5, sl
 801f54e:	45a0      	cmp	r8, r4
 801f550:	f846 5904 	str.w	r5, [r6], #-4
 801f554:	d9ef      	bls.n	801f536 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801f556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f55a:	2100      	movs	r1, #0
 801f55c:	4648      	mov	r0, r9
 801f55e:	f7e1 fb75 	bl	8000c4c <__aeabi_fcmpeq>
 801f562:	b9d0      	cbnz	r0, 801f59a <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 801f564:	4544      	cmp	r4, r8
 801f566:	d3f6      	bcc.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f568:	f854 5904 	ldr.w	r5, [r4], #-4
 801f56c:	4639      	mov	r1, r7
 801f56e:	4628      	mov	r0, r5
 801f570:	f7e1 fb80 	bl	8000c74 <__aeabi_fcmple>
 801f574:	4603      	mov	r3, r0
 801f576:	4639      	mov	r1, r7
 801f578:	4628      	mov	r0, r5
 801f57a:	b14b      	cbz	r3, 801f590 <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 801f57c:	f7e1 f8c8 	bl	8000710 <__aeabi_fsub>
 801f580:	4649      	mov	r1, r9
 801f582:	f7e1 f9cf 	bl	8000924 <__aeabi_fmul>
 801f586:	45a0      	cmp	r8, r4
 801f588:	f846 0904 	str.w	r0, [r6], #-4
 801f58c:	d9ec      	bls.n	801f568 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801f58e:	e7e2      	b.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f590:	45a0      	cmp	r8, r4
 801f592:	f846 5904 	str.w	r5, [r6], #-4
 801f596:	d9e7      	bls.n	801f568 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801f598:	e7dd      	b.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f59a:	4544      	cmp	r4, r8
 801f59c:	d3db      	bcc.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f59e:	f04f 0900 	mov.w	r9, #0
 801f5a2:	f854 5904 	ldr.w	r5, [r4], #-4
 801f5a6:	4639      	mov	r1, r7
 801f5a8:	4628      	mov	r0, r5
 801f5aa:	f7e1 fb77 	bl	8000c9c <__aeabi_fcmpgt>
 801f5ae:	b120      	cbz	r0, 801f5ba <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 801f5b0:	45a0      	cmp	r8, r4
 801f5b2:	f846 5904 	str.w	r5, [r6], #-4
 801f5b6:	d9f4      	bls.n	801f5a2 <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801f5b8:	e7cd      	b.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801f5ba:	45a0      	cmp	r8, r4
 801f5bc:	f846 9904 	str.w	r9, [r6], #-4
 801f5c0:	d9ef      	bls.n	801f5a2 <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801f5c2:	e7c8      	b.n	801f556 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>

0801f5c4 <forward_lite_dense_if32of32wf32>:
 801f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c8:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 801f5cc:	6805      	ldr	r5, [r0, #0]
 801f5ce:	6841      	ldr	r1, [r0, #4]
 801f5d0:	fb03 f202 	mul.w	r2, r3, r2
 801f5d4:	b08b      	sub	sp, #44	@ 0x2c
 801f5d6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801f5da:	4295      	cmp	r5, r2
 801f5dc:	9209      	str	r2, [sp, #36]	@ 0x24
 801f5de:	9101      	str	r1, [sp, #4]
 801f5e0:	f080 81a8 	bcs.w	801f934 <forward_lite_dense_if32of32wf32+0x370>
 801f5e4:	f8d0 b010 	ldr.w	fp, [r0, #16]
 801f5e8:	4604      	mov	r4, r0
 801f5ea:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801f5ee:	462e      	mov	r6, r5
 801f5f0:	4619      	mov	r1, r3
 801f5f2:	44b6      	add	lr, r6
 801f5f4:	45b6      	cmp	lr, r6
 801f5f6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801f5fa:	f240 818b 	bls.w	801f914 <forward_lite_dense_if32of32wf32+0x350>
 801f5fe:	f1ab 0110 	sub.w	r1, fp, #16
 801f602:	0909      	lsrs	r1, r1, #4
 801f604:	3101      	adds	r1, #1
 801f606:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f60a:	9302      	str	r3, [sp, #8]
 801f60c:	018b      	lsls	r3, r1, #6
 801f60e:	9305      	str	r3, [sp, #20]
 801f610:	9b01      	ldr	r3, [sp, #4]
 801f612:	f8cd e00c 	str.w	lr, [sp, #12]
 801f616:	e9cd 6407 	strd	r6, r4, [sp, #28]
 801f61a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 801f61e:	9306      	str	r3, [sp, #24]
 801f620:	46b0      	mov	r8, r6
 801f622:	f1bb 0f0f 	cmp.w	fp, #15
 801f626:	f240 8188 	bls.w	801f93a <forward_lite_dense_if32of32wf32+0x376>
 801f62a:	9b01      	ldr	r3, [sp, #4]
 801f62c:	f109 0440 	add.w	r4, r9, #64	@ 0x40
 801f630:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 801f634:	46da      	mov	sl, fp
 801f636:	2600      	movs	r6, #0
 801f638:	f854 1c40 	ldr.w	r1, [r4, #-64]
 801f63c:	f855 0c40 	ldr.w	r0, [r5, #-64]
 801f640:	f7e1 f970 	bl	8000924 <__aeabi_fmul>
 801f644:	f854 1c3c 	ldr.w	r1, [r4, #-60]
 801f648:	4607      	mov	r7, r0
 801f64a:	f855 0c3c 	ldr.w	r0, [r5, #-60]
 801f64e:	f7e1 f969 	bl	8000924 <__aeabi_fmul>
 801f652:	4601      	mov	r1, r0
 801f654:	4638      	mov	r0, r7
 801f656:	f7e1 f85d 	bl	8000714 <__addsf3>
 801f65a:	f854 1c38 	ldr.w	r1, [r4, #-56]
 801f65e:	4607      	mov	r7, r0
 801f660:	f855 0c38 	ldr.w	r0, [r5, #-56]
 801f664:	f7e1 f95e 	bl	8000924 <__aeabi_fmul>
 801f668:	4601      	mov	r1, r0
 801f66a:	4638      	mov	r0, r7
 801f66c:	f7e1 f852 	bl	8000714 <__addsf3>
 801f670:	f854 1c34 	ldr.w	r1, [r4, #-52]
 801f674:	4607      	mov	r7, r0
 801f676:	f855 0c34 	ldr.w	r0, [r5, #-52]
 801f67a:	f7e1 f953 	bl	8000924 <__aeabi_fmul>
 801f67e:	4601      	mov	r1, r0
 801f680:	4638      	mov	r0, r7
 801f682:	f7e1 f847 	bl	8000714 <__addsf3>
 801f686:	f854 1c30 	ldr.w	r1, [r4, #-48]
 801f68a:	4607      	mov	r7, r0
 801f68c:	f855 0c30 	ldr.w	r0, [r5, #-48]
 801f690:	f7e1 f948 	bl	8000924 <__aeabi_fmul>
 801f694:	4601      	mov	r1, r0
 801f696:	4638      	mov	r0, r7
 801f698:	f7e1 f83c 	bl	8000714 <__addsf3>
 801f69c:	f854 1c2c 	ldr.w	r1, [r4, #-44]
 801f6a0:	4607      	mov	r7, r0
 801f6a2:	f855 0c2c 	ldr.w	r0, [r5, #-44]
 801f6a6:	f7e1 f93d 	bl	8000924 <__aeabi_fmul>
 801f6aa:	4601      	mov	r1, r0
 801f6ac:	4638      	mov	r0, r7
 801f6ae:	f7e1 f831 	bl	8000714 <__addsf3>
 801f6b2:	f854 1c28 	ldr.w	r1, [r4, #-40]
 801f6b6:	4607      	mov	r7, r0
 801f6b8:	f855 0c28 	ldr.w	r0, [r5, #-40]
 801f6bc:	f7e1 f932 	bl	8000924 <__aeabi_fmul>
 801f6c0:	4601      	mov	r1, r0
 801f6c2:	4638      	mov	r0, r7
 801f6c4:	f7e1 f826 	bl	8000714 <__addsf3>
 801f6c8:	f854 1c24 	ldr.w	r1, [r4, #-36]
 801f6cc:	4607      	mov	r7, r0
 801f6ce:	f855 0c24 	ldr.w	r0, [r5, #-36]
 801f6d2:	f7e1 f927 	bl	8000924 <__aeabi_fmul>
 801f6d6:	4601      	mov	r1, r0
 801f6d8:	4638      	mov	r0, r7
 801f6da:	f7e1 f81b 	bl	8000714 <__addsf3>
 801f6de:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801f6e2:	4607      	mov	r7, r0
 801f6e4:	f855 0c20 	ldr.w	r0, [r5, #-32]
 801f6e8:	f7e1 f91c 	bl	8000924 <__aeabi_fmul>
 801f6ec:	4601      	mov	r1, r0
 801f6ee:	4638      	mov	r0, r7
 801f6f0:	f7e1 f810 	bl	8000714 <__addsf3>
 801f6f4:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801f6f8:	4607      	mov	r7, r0
 801f6fa:	f855 0c1c 	ldr.w	r0, [r5, #-28]
 801f6fe:	f7e1 f911 	bl	8000924 <__aeabi_fmul>
 801f702:	4601      	mov	r1, r0
 801f704:	4638      	mov	r0, r7
 801f706:	f7e1 f805 	bl	8000714 <__addsf3>
 801f70a:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801f70e:	4607      	mov	r7, r0
 801f710:	f855 0c18 	ldr.w	r0, [r5, #-24]
 801f714:	f7e1 f906 	bl	8000924 <__aeabi_fmul>
 801f718:	4601      	mov	r1, r0
 801f71a:	4638      	mov	r0, r7
 801f71c:	f7e0 fffa 	bl	8000714 <__addsf3>
 801f720:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801f724:	4607      	mov	r7, r0
 801f726:	f855 0c14 	ldr.w	r0, [r5, #-20]
 801f72a:	f7e1 f8fb 	bl	8000924 <__aeabi_fmul>
 801f72e:	4601      	mov	r1, r0
 801f730:	4638      	mov	r0, r7
 801f732:	f7e0 ffef 	bl	8000714 <__addsf3>
 801f736:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801f73a:	4607      	mov	r7, r0
 801f73c:	f855 0c10 	ldr.w	r0, [r5, #-16]
 801f740:	f7e1 f8f0 	bl	8000924 <__aeabi_fmul>
 801f744:	4601      	mov	r1, r0
 801f746:	4638      	mov	r0, r7
 801f748:	f7e0 ffe4 	bl	8000714 <__addsf3>
 801f74c:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801f750:	4607      	mov	r7, r0
 801f752:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 801f756:	f7e1 f8e5 	bl	8000924 <__aeabi_fmul>
 801f75a:	4601      	mov	r1, r0
 801f75c:	4638      	mov	r0, r7
 801f75e:	f7e0 ffd9 	bl	8000714 <__addsf3>
 801f762:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801f766:	4607      	mov	r7, r0
 801f768:	f855 0c08 	ldr.w	r0, [r5, #-8]
 801f76c:	f7e1 f8da 	bl	8000924 <__aeabi_fmul>
 801f770:	4601      	mov	r1, r0
 801f772:	4638      	mov	r0, r7
 801f774:	f7e0 ffce 	bl	8000714 <__addsf3>
 801f778:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801f77c:	4607      	mov	r7, r0
 801f77e:	f855 0c04 	ldr.w	r0, [r5, #-4]
 801f782:	f7e1 f8cf 	bl	8000924 <__aeabi_fmul>
 801f786:	4601      	mov	r1, r0
 801f788:	4638      	mov	r0, r7
 801f78a:	f7e0 ffc3 	bl	8000714 <__addsf3>
 801f78e:	4601      	mov	r1, r0
 801f790:	4630      	mov	r0, r6
 801f792:	f7e0 ffbf 	bl	8000714 <__addsf3>
 801f796:	f1aa 0a10 	sub.w	sl, sl, #16
 801f79a:	f1ba 0f0f 	cmp.w	sl, #15
 801f79e:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 801f7a2:	4606      	mov	r6, r0
 801f7a4:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 801f7a8:	f63f af46 	bhi.w	801f638 <forward_lite_dense_if32of32wf32+0x74>
 801f7ac:	9b05      	ldr	r3, [sp, #20]
 801f7ae:	9c06      	ldr	r4, [sp, #24]
 801f7b0:	eb09 0503 	add.w	r5, r9, r3
 801f7b4:	f00b 0a0f 	and.w	sl, fp, #15
 801f7b8:	f1ba 0f03 	cmp.w	sl, #3
 801f7bc:	d97b      	bls.n	801f8b6 <forward_lite_dense_if32of32wf32+0x2f2>
 801f7be:	6869      	ldr	r1, [r5, #4]
 801f7c0:	6860      	ldr	r0, [r4, #4]
 801f7c2:	f7e1 f8af 	bl	8000924 <__aeabi_fmul>
 801f7c6:	6829      	ldr	r1, [r5, #0]
 801f7c8:	4607      	mov	r7, r0
 801f7ca:	6820      	ldr	r0, [r4, #0]
 801f7cc:	f7e1 f8aa 	bl	8000924 <__aeabi_fmul>
 801f7d0:	4601      	mov	r1, r0
 801f7d2:	4638      	mov	r0, r7
 801f7d4:	f7e0 ff9e 	bl	8000714 <__addsf3>
 801f7d8:	4631      	mov	r1, r6
 801f7da:	f7e0 ff9b 	bl	8000714 <__addsf3>
 801f7de:	68a9      	ldr	r1, [r5, #8]
 801f7e0:	4606      	mov	r6, r0
 801f7e2:	68a0      	ldr	r0, [r4, #8]
 801f7e4:	f7e1 f89e 	bl	8000924 <__aeabi_fmul>
 801f7e8:	4631      	mov	r1, r6
 801f7ea:	f7e0 ff93 	bl	8000714 <__addsf3>
 801f7ee:	68e9      	ldr	r1, [r5, #12]
 801f7f0:	4606      	mov	r6, r0
 801f7f2:	68e0      	ldr	r0, [r4, #12]
 801f7f4:	f7e1 f896 	bl	8000924 <__aeabi_fmul>
 801f7f8:	4631      	mov	r1, r6
 801f7fa:	f7e0 ff8b 	bl	8000714 <__addsf3>
 801f7fe:	f1aa 0204 	sub.w	r2, sl, #4
 801f802:	2a03      	cmp	r2, #3
 801f804:	4606      	mov	r6, r0
 801f806:	d94e      	bls.n	801f8a6 <forward_lite_dense_if32of32wf32+0x2e2>
 801f808:	6969      	ldr	r1, [r5, #20]
 801f80a:	6960      	ldr	r0, [r4, #20]
 801f80c:	9204      	str	r2, [sp, #16]
 801f80e:	f7e1 f889 	bl	8000924 <__aeabi_fmul>
 801f812:	6929      	ldr	r1, [r5, #16]
 801f814:	4607      	mov	r7, r0
 801f816:	6920      	ldr	r0, [r4, #16]
 801f818:	f7e1 f884 	bl	8000924 <__aeabi_fmul>
 801f81c:	4601      	mov	r1, r0
 801f81e:	4638      	mov	r0, r7
 801f820:	f7e0 ff78 	bl	8000714 <__addsf3>
 801f824:	69a9      	ldr	r1, [r5, #24]
 801f826:	4607      	mov	r7, r0
 801f828:	69a0      	ldr	r0, [r4, #24]
 801f82a:	f7e1 f87b 	bl	8000924 <__aeabi_fmul>
 801f82e:	4601      	mov	r1, r0
 801f830:	4638      	mov	r0, r7
 801f832:	f7e0 ff6f 	bl	8000714 <__addsf3>
 801f836:	69e9      	ldr	r1, [r5, #28]
 801f838:	4607      	mov	r7, r0
 801f83a:	69e0      	ldr	r0, [r4, #28]
 801f83c:	f7e1 f872 	bl	8000924 <__aeabi_fmul>
 801f840:	4601      	mov	r1, r0
 801f842:	4638      	mov	r0, r7
 801f844:	f7e0 ff66 	bl	8000714 <__addsf3>
 801f848:	4601      	mov	r1, r0
 801f84a:	4630      	mov	r0, r6
 801f84c:	f7e0 ff62 	bl	8000714 <__addsf3>
 801f850:	f1aa 0108 	sub.w	r1, sl, #8
 801f854:	2903      	cmp	r1, #3
 801f856:	9a04      	ldr	r2, [sp, #16]
 801f858:	4606      	mov	r6, r0
 801f85a:	d924      	bls.n	801f8a6 <forward_lite_dense_if32of32wf32+0x2e2>
 801f85c:	6a21      	ldr	r1, [r4, #32]
 801f85e:	6a28      	ldr	r0, [r5, #32]
 801f860:	f7e1 f860 	bl	8000924 <__aeabi_fmul>
 801f864:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801f866:	4607      	mov	r7, r0
 801f868:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801f86a:	f7e1 f85b 	bl	8000924 <__aeabi_fmul>
 801f86e:	4601      	mov	r1, r0
 801f870:	4638      	mov	r0, r7
 801f872:	f7e0 ff4f 	bl	8000714 <__addsf3>
 801f876:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801f878:	4607      	mov	r7, r0
 801f87a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801f87c:	f7e1 f852 	bl	8000924 <__aeabi_fmul>
 801f880:	4601      	mov	r1, r0
 801f882:	4638      	mov	r0, r7
 801f884:	f7e0 ff46 	bl	8000714 <__addsf3>
 801f888:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801f88a:	4607      	mov	r7, r0
 801f88c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801f88e:	f7e1 f849 	bl	8000924 <__aeabi_fmul>
 801f892:	4601      	mov	r1, r0
 801f894:	4638      	mov	r0, r7
 801f896:	f7e0 ff3d 	bl	8000714 <__addsf3>
 801f89a:	4601      	mov	r1, r0
 801f89c:	4630      	mov	r0, r6
 801f89e:	f7e0 ff39 	bl	8000714 <__addsf3>
 801f8a2:	9a04      	ldr	r2, [sp, #16]
 801f8a4:	4606      	mov	r6, r0
 801f8a6:	0892      	lsrs	r2, r2, #2
 801f8a8:	3201      	adds	r2, #1
 801f8aa:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 801f8ae:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 801f8b2:	f00a 0a03 	and.w	sl, sl, #3
 801f8b6:	f1ba 0f00 	cmp.w	sl, #0
 801f8ba:	d020      	beq.n	801f8fe <forward_lite_dense_if32of32wf32+0x33a>
 801f8bc:	6829      	ldr	r1, [r5, #0]
 801f8be:	6820      	ldr	r0, [r4, #0]
 801f8c0:	f7e1 f830 	bl	8000924 <__aeabi_fmul>
 801f8c4:	4601      	mov	r1, r0
 801f8c6:	4630      	mov	r0, r6
 801f8c8:	f7e0 ff24 	bl	8000714 <__addsf3>
 801f8cc:	f1ba 0f01 	cmp.w	sl, #1
 801f8d0:	4606      	mov	r6, r0
 801f8d2:	d014      	beq.n	801f8fe <forward_lite_dense_if32of32wf32+0x33a>
 801f8d4:	6869      	ldr	r1, [r5, #4]
 801f8d6:	6860      	ldr	r0, [r4, #4]
 801f8d8:	f7e1 f824 	bl	8000924 <__aeabi_fmul>
 801f8dc:	4601      	mov	r1, r0
 801f8de:	4630      	mov	r0, r6
 801f8e0:	f7e0 ff18 	bl	8000714 <__addsf3>
 801f8e4:	f1ba 0f02 	cmp.w	sl, #2
 801f8e8:	4606      	mov	r6, r0
 801f8ea:	d008      	beq.n	801f8fe <forward_lite_dense_if32of32wf32+0x33a>
 801f8ec:	68a1      	ldr	r1, [r4, #8]
 801f8ee:	68a8      	ldr	r0, [r5, #8]
 801f8f0:	f7e1 f818 	bl	8000924 <__aeabi_fmul>
 801f8f4:	4601      	mov	r1, r0
 801f8f6:	4630      	mov	r0, r6
 801f8f8:	f7e0 ff0c 	bl	8000714 <__addsf3>
 801f8fc:	4606      	mov	r6, r0
 801f8fe:	9b02      	ldr	r3, [sp, #8]
 801f900:	f848 6b04 	str.w	r6, [r8], #4
 801f904:	4499      	add	r9, r3
 801f906:	9b03      	ldr	r3, [sp, #12]
 801f908:	4543      	cmp	r3, r8
 801f90a:	f63f ae8a 	bhi.w	801f622 <forward_lite_dense_if32of32wf32+0x5e>
 801f90e:	e9dd 6407 	ldrd	r6, r4, [sp, #28]
 801f912:	6961      	ldr	r1, [r4, #20]
 801f914:	68e3      	ldr	r3, [r4, #12]
 801f916:	b9ab      	cbnz	r3, 801f944 <forward_lite_dense_if32of32wf32+0x380>
 801f918:	9b01      	ldr	r3, [sp, #4]
 801f91a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f91e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801f922:	9301      	str	r3, [sp, #4]
 801f924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f926:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 801f92a:	42b3      	cmp	r3, r6
 801f92c:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 801f930:	f63f ae5f 	bhi.w	801f5f2 <forward_lite_dense_if32of32wf32+0x2e>
 801f934:	b00b      	add	sp, #44	@ 0x2c
 801f936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f93a:	9c01      	ldr	r4, [sp, #4]
 801f93c:	46da      	mov	sl, fp
 801f93e:	464d      	mov	r5, r9
 801f940:	2600      	movs	r6, #0
 801f942:	e739      	b.n	801f7b8 <forward_lite_dense_if32of32wf32+0x1f4>
 801f944:	2900      	cmp	r1, #0
 801f946:	d0e7      	beq.n	801f918 <forward_lite_dense_if32of32wf32+0x354>
 801f948:	6819      	ldr	r1, [r3, #0]
 801f94a:	6830      	ldr	r0, [r6, #0]
 801f94c:	f7e0 fee2 	bl	8000714 <__addsf3>
 801f950:	6030      	str	r0, [r6, #0]
 801f952:	6961      	ldr	r1, [r4, #20]
 801f954:	2901      	cmp	r1, #1
 801f956:	d9df      	bls.n	801f918 <forward_lite_dense_if32of32wf32+0x354>
 801f958:	46b0      	mov	r8, r6
 801f95a:	2501      	movs	r5, #1
 801f95c:	68e3      	ldr	r3, [r4, #12]
 801f95e:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801f962:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801f966:	f7e0 fed5 	bl	8000714 <__addsf3>
 801f96a:	f8c8 0000 	str.w	r0, [r8]
 801f96e:	6961      	ldr	r1, [r4, #20]
 801f970:	3501      	adds	r5, #1
 801f972:	42a9      	cmp	r1, r5
 801f974:	d8f2      	bhi.n	801f95c <forward_lite_dense_if32of32wf32+0x398>
 801f976:	e7cf      	b.n	801f918 <forward_lite_dense_if32of32wf32+0x354>

0801f978 <forward_lite_dense_if32of32wf32_lut4>:
 801f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f97c:	b095      	sub	sp, #84	@ 0x54
 801f97e:	469b      	mov	fp, r3
 801f980:	9210      	str	r2, [sp, #64]	@ 0x40
 801f982:	e9dd 2321 	ldrd	r2, r3, [sp, #132]	@ 0x84
 801f986:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 801f988:	fb02 f303 	mul.w	r3, r2, r3
 801f98c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f990:	930c      	str	r3, [sp, #48]	@ 0x30
 801f992:	4606      	mov	r6, r0
 801f994:	e9dd 351f 	ldrd	r3, r5, [sp, #124]	@ 0x7c
 801f998:	460c      	mov	r4, r1
 801f99a:	b137      	cbz	r7, 801f9aa <forward_lite_dense_if32of32wf32_lut4+0x32>
 801f99c:	4658      	mov	r0, fp
 801f99e:	2240      	movs	r2, #64	@ 0x40
 801f9a0:	4639      	mov	r1, r7
 801f9a2:	f000 fb03 	bl	801ffac <st_int8_copy>
 801f9a6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f9a8:	46bb      	mov	fp, r7
 801f9aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9ac:	4296      	cmp	r6, r2
 801f9ae:	f080 813d 	bcs.w	801fc2c <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801f9b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f9b4:	960a      	str	r6, [sp, #40]	@ 0x28
 801f9b6:	f025 0101 	bic.w	r1, r5, #1
 801f9ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f9be:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 801f9c2:	9102      	str	r1, [sp, #8]
 801f9c4:	f06f 0103 	mvn.w	r1, #3
 801f9c8:	eba1 010a 	sub.w	r1, r1, sl
 801f9cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f9ce:	f005 0101 	and.w	r1, r5, #1
 801f9d2:	08ea      	lsrs	r2, r5, #3
 801f9d4:	9107      	str	r1, [sp, #28]
 801f9d6:	00a9      	lsls	r1, r5, #2
 801f9d8:	9206      	str	r2, [sp, #24]
 801f9da:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f9dc:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 801f9e0:	0092      	lsls	r2, r2, #2
 801f9e2:	9209      	str	r2, [sp, #36]	@ 0x24
 801f9e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f9e6:	9105      	str	r1, [sp, #20]
 801f9e8:	1f18      	subs	r0, r3, #4
 801f9ea:	e9cd aa0d 	strd	sl, sl, [sp, #52]	@ 0x34
 801f9ee:	f104 0120 	add.w	r1, r4, #32
 801f9f2:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 801f9f6:	9011      	str	r0, [sp, #68]	@ 0x44
 801f9f8:	9104      	str	r1, [sp, #16]
 801f9fa:	9412      	str	r4, [sp, #72]	@ 0x48
 801f9fc:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f9fe:	4632      	mov	r2, r6
 801fa00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa02:	9904      	ldr	r1, [sp, #16]
 801fa04:	18d3      	adds	r3, r2, r3
 801fa06:	3920      	subs	r1, #32
 801fa08:	4293      	cmp	r3, r2
 801fa0a:	9303      	str	r3, [sp, #12]
 801fa0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fa0e:	f240 8110 	bls.w	801fc32 <forward_lite_dense_if32of32wf32_lut4+0x2ba>
 801fa12:	9b02      	ldr	r3, [sp, #8]
 801fa14:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 801fa18:	9200      	str	r2, [sp, #0]
 801fa1a:	3b01      	subs	r3, #1
 801fa1c:	9308      	str	r3, [sp, #32]
 801fa1e:	9b06      	ldr	r3, [sp, #24]
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	f000 80e7 	beq.w	801fbf4 <forward_lite_dense_if32of32wf32_lut4+0x27c>
 801fa26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa28:	9c04      	ldr	r4, [sp, #16]
 801fa2a:	eb09 0a03 	add.w	sl, r9, r3
 801fa2e:	2500      	movs	r5, #0
 801fa30:	f899 6000 	ldrb.w	r6, [r9]
 801fa34:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801fa38:	0933      	lsrs	r3, r6, #4
 801fa3a:	f006 060f 	and.w	r6, r6, #15
 801fa3e:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fa42:	f7e0 ff6f 	bl	8000924 <__aeabi_fmul>
 801fa46:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801fa4a:	4607      	mov	r7, r0
 801fa4c:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801fa50:	f899 6001 	ldrb.w	r6, [r9, #1]
 801fa54:	f7e0 ff66 	bl	8000924 <__aeabi_fmul>
 801fa58:	4601      	mov	r1, r0
 801fa5a:	4638      	mov	r0, r7
 801fa5c:	f7e0 fe5a 	bl	8000714 <__addsf3>
 801fa60:	0933      	lsrs	r3, r6, #4
 801fa62:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801fa66:	4607      	mov	r7, r0
 801fa68:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fa6c:	f7e0 ff5a 	bl	8000924 <__aeabi_fmul>
 801fa70:	4601      	mov	r1, r0
 801fa72:	4638      	mov	r0, r7
 801fa74:	f7e0 fe4e 	bl	8000714 <__addsf3>
 801fa78:	f006 060f 	and.w	r6, r6, #15
 801fa7c:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801fa80:	4607      	mov	r7, r0
 801fa82:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801fa86:	f899 6002 	ldrb.w	r6, [r9, #2]
 801fa8a:	f7e0 ff4b 	bl	8000924 <__aeabi_fmul>
 801fa8e:	4601      	mov	r1, r0
 801fa90:	4638      	mov	r0, r7
 801fa92:	f7e0 fe3f 	bl	8000714 <__addsf3>
 801fa96:	0933      	lsrs	r3, r6, #4
 801fa98:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801fa9c:	4607      	mov	r7, r0
 801fa9e:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801faa2:	f7e0 ff3f 	bl	8000924 <__aeabi_fmul>
 801faa6:	4601      	mov	r1, r0
 801faa8:	4638      	mov	r0, r7
 801faaa:	f7e0 fe33 	bl	8000714 <__addsf3>
 801faae:	f006 060f 	and.w	r6, r6, #15
 801fab2:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801fab6:	4607      	mov	r7, r0
 801fab8:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801fabc:	f899 6003 	ldrb.w	r6, [r9, #3]
 801fac0:	f7e0 ff30 	bl	8000924 <__aeabi_fmul>
 801fac4:	4601      	mov	r1, r0
 801fac6:	4638      	mov	r0, r7
 801fac8:	f7e0 fe24 	bl	8000714 <__addsf3>
 801facc:	0933      	lsrs	r3, r6, #4
 801face:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801fad2:	4607      	mov	r7, r0
 801fad4:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fad8:	f7e0 ff24 	bl	8000924 <__aeabi_fmul>
 801fadc:	4601      	mov	r1, r0
 801fade:	4638      	mov	r0, r7
 801fae0:	f7e0 fe18 	bl	8000714 <__addsf3>
 801fae4:	f006 060f 	and.w	r6, r6, #15
 801fae8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801faec:	4607      	mov	r7, r0
 801faee:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801faf2:	f7e0 ff17 	bl	8000924 <__aeabi_fmul>
 801faf6:	4601      	mov	r1, r0
 801faf8:	4638      	mov	r0, r7
 801fafa:	f7e0 fe0b 	bl	8000714 <__addsf3>
 801fafe:	4601      	mov	r1, r0
 801fb00:	4628      	mov	r0, r5
 801fb02:	f7e0 fe07 	bl	8000714 <__addsf3>
 801fb06:	f109 0904 	add.w	r9, r9, #4
 801fb0a:	45d1      	cmp	r9, sl
 801fb0c:	4605      	mov	r5, r0
 801fb0e:	f104 0420 	add.w	r4, r4, #32
 801fb12:	d18d      	bne.n	801fa30 <forward_lite_dense_if32of32wf32_lut4+0xb8>
 801fb14:	9c05      	ldr	r4, [sp, #20]
 801fb16:	9b02      	ldr	r3, [sp, #8]
 801fb18:	429c      	cmp	r4, r3
 801fb1a:	d272      	bcs.n	801fc02 <forward_lite_dense_if32of32wf32_lut4+0x28a>
 801fb1c:	9b08      	ldr	r3, [sp, #32]
 801fb1e:	9401      	str	r4, [sp, #4]
 801fb20:	eba3 0804 	sub.w	r8, r3, r4
 801fb24:	f104 0608 	add.w	r6, r4, #8
 801fb28:	f10a 37ff 	add.w	r7, sl, #4294967295
 801fb2c:	ea4f 09d8 	mov.w	r9, r8, lsr #3
 801fb30:	463c      	mov	r4, r7
 801fb32:	eb0a 08d8 	add.w	r8, sl, r8, lsr #3
 801fb36:	4637      	mov	r7, r6
 801fb38:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 801fb3c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801fb40:	0932      	lsrs	r2, r6, #4
 801fb42:	3708      	adds	r7, #8
 801fb44:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801fb48:	f7e0 feec 	bl	8000924 <__aeabi_fmul>
 801fb4c:	f006 020f 	and.w	r2, r6, #15
 801fb50:	f857 1c0c 	ldr.w	r1, [r7, #-12]
 801fb54:	4606      	mov	r6, r0
 801fb56:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801fb5a:	f7e0 fee3 	bl	8000924 <__aeabi_fmul>
 801fb5e:	4601      	mov	r1, r0
 801fb60:	4630      	mov	r0, r6
 801fb62:	f7e0 fdd7 	bl	8000714 <__addsf3>
 801fb66:	4601      	mov	r1, r0
 801fb68:	4628      	mov	r0, r5
 801fb6a:	f7e0 fdd3 	bl	8000714 <__addsf3>
 801fb6e:	4544      	cmp	r4, r8
 801fb70:	4605      	mov	r5, r0
 801fb72:	d1e1      	bne.n	801fb38 <forward_lite_dense_if32of32wf32_lut4+0x1c0>
 801fb74:	9c01      	ldr	r4, [sp, #4]
 801fb76:	f109 0301 	add.w	r3, r9, #1
 801fb7a:	eb0a 0903 	add.w	r9, sl, r3
 801fb7e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 801fb82:	9b07      	ldr	r3, [sp, #28]
 801fb84:	b35b      	cbz	r3, 801fbde <forward_lite_dense_if32of32wf32_lut4+0x266>
 801fb86:	f819 3b01 	ldrb.w	r3, [r9], #1
 801fb8a:	6821      	ldr	r1, [r4, #0]
 801fb8c:	091b      	lsrs	r3, r3, #4
 801fb8e:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801fb92:	f7e0 fec7 	bl	8000924 <__aeabi_fmul>
 801fb96:	4629      	mov	r1, r5
 801fb98:	f7e0 fdbc 	bl	8000714 <__addsf3>
 801fb9c:	9b00      	ldr	r3, [sp, #0]
 801fb9e:	9a03      	ldr	r2, [sp, #12]
 801fba0:	f843 0b04 	str.w	r0, [r3], #4
 801fba4:	429a      	cmp	r2, r3
 801fba6:	9300      	str	r3, [sp, #0]
 801fba8:	f63f af39 	bhi.w	801fa1e <forward_lite_dense_if32of32wf32_lut4+0xa6>
 801fbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fbae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fbb0:	189c      	adds	r4, r3, r2
 801fbb2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fbb4:	bb3b      	cbnz	r3, 801fc06 <forward_lite_dense_if32of32wf32_lut4+0x28e>
 801fbb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fbb8:	42a3      	cmp	r3, r4
 801fbba:	d937      	bls.n	801fc2c <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801fbbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbbe:	9a02      	ldr	r2, [sp, #8]
 801fbc0:	441a      	add	r2, r3
 801fbc2:	9202      	str	r2, [sp, #8]
 801fbc4:	9a05      	ldr	r2, [sp, #20]
 801fbc6:	441a      	add	r2, r3
 801fbc8:	9205      	str	r2, [sp, #20]
 801fbca:	9a04      	ldr	r2, [sp, #16]
 801fbcc:	441a      	add	r2, r3
 801fbce:	9204      	str	r2, [sp, #16]
 801fbd0:	9b03      	ldr	r3, [sp, #12]
 801fbd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fbd4:	4293      	cmp	r3, r2
 801fbd6:	d92e      	bls.n	801fc36 <forward_lite_dense_if32of32wf32_lut4+0x2be>
 801fbd8:	940a      	str	r4, [sp, #40]	@ 0x28
 801fbda:	4622      	mov	r2, r4
 801fbdc:	e710      	b.n	801fa00 <forward_lite_dense_if32of32wf32_lut4+0x88>
 801fbde:	9b00      	ldr	r3, [sp, #0]
 801fbe0:	9a03      	ldr	r2, [sp, #12]
 801fbe2:	f843 5b04 	str.w	r5, [r3], #4
 801fbe6:	429a      	cmp	r2, r3
 801fbe8:	9300      	str	r3, [sp, #0]
 801fbea:	d9df      	bls.n	801fbac <forward_lite_dense_if32of32wf32_lut4+0x234>
 801fbec:	9b06      	ldr	r3, [sp, #24]
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	f47f af19 	bne.w	801fa26 <forward_lite_dense_if32of32wf32_lut4+0xae>
 801fbf4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fbf6:	9b02      	ldr	r3, [sp, #8]
 801fbf8:	429c      	cmp	r4, r3
 801fbfa:	46ca      	mov	sl, r9
 801fbfc:	f04f 0500 	mov.w	r5, #0
 801fc00:	d38c      	bcc.n	801fb1c <forward_lite_dense_if32of32wf32_lut4+0x1a4>
 801fc02:	46d1      	mov	r9, sl
 801fc04:	e7bd      	b.n	801fb82 <forward_lite_dense_if32of32wf32_lut4+0x20a>
 801fc06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	d0d4      	beq.n	801fbb6 <forward_lite_dense_if32of32wf32_lut4+0x23e>
 801fc0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc0e:	e9dd 5a11 	ldrd	r5, sl, [sp, #68]	@ 0x44
 801fc12:	18e6      	adds	r6, r4, r3
 801fc14:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801fc18:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801fc1c:	f7e0 fd7a 	bl	8000714 <__addsf3>
 801fc20:	4555      	cmp	r5, sl
 801fc22:	6030      	str	r0, [r6, #0]
 801fc24:	d1f6      	bne.n	801fc14 <forward_lite_dense_if32of32wf32_lut4+0x29c>
 801fc26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc28:	42a3      	cmp	r3, r4
 801fc2a:	d8c7      	bhi.n	801fbbc <forward_lite_dense_if32of32wf32_lut4+0x244>
 801fc2c:	b015      	add	sp, #84	@ 0x54
 801fc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc32:	4614      	mov	r4, r2
 801fc34:	e7bd      	b.n	801fbb2 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 801fc36:	46a1      	mov	r9, r4
 801fc38:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 801fc3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fc3e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fc40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fc42:	b903      	cbnz	r3, 801fc46 <forward_lite_dense_if32of32wf32_lut4+0x2ce>
 801fc44:	e7fe      	b.n	801fc44 <forward_lite_dense_if32of32wf32_lut4+0x2cc>
 801fc46:	2a00      	cmp	r2, #0
 801fc48:	d0fb      	beq.n	801fc42 <forward_lite_dense_if32of32wf32_lut4+0x2ca>
 801fc4a:	f06f 0703 	mvn.w	r7, #3
 801fc4e:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801fc52:	eba7 070a 	sub.w	r7, r7, sl
 801fc56:	eb09 0607 	add.w	r6, r9, r7
 801fc5a:	4645      	mov	r5, r8
 801fc5c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801fc60:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801fc64:	f7e0 fd56 	bl	8000714 <__addsf3>
 801fc68:	42ac      	cmp	r4, r5
 801fc6a:	6030      	str	r0, [r6, #0]
 801fc6c:	d1f6      	bne.n	801fc5c <forward_lite_dense_if32of32wf32_lut4+0x2e4>
 801fc6e:	e7f2      	b.n	801fc56 <forward_lite_dense_if32of32wf32_lut4+0x2de>

0801fc70 <forward_lite_dense_if32of32wf32_lut8>:
 801fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc74:	b091      	sub	sp, #68	@ 0x44
 801fc76:	461d      	mov	r5, r3
 801fc78:	920c      	str	r2, [sp, #48]	@ 0x30
 801fc7a:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801fc7e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801fc80:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801fc82:	fb02 f303 	mul.w	r3, r2, r3
 801fc86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801fc8a:	4682      	mov	sl, r0
 801fc8c:	460c      	mov	r4, r1
 801fc8e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc90:	b137      	cbz	r7, 801fca0 <forward_lite_dense_if32of32wf32_lut8+0x30>
 801fc92:	4628      	mov	r0, r5
 801fc94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801fc98:	4639      	mov	r1, r7
 801fc9a:	f000 f987 	bl	801ffac <st_int8_copy>
 801fc9e:	463d      	mov	r5, r7
 801fca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fca2:	459a      	cmp	sl, r3
 801fca4:	f080 8163 	bcs.w	801ff6e <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801fca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fcaa:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801fcac:	0099      	lsls	r1, r3, #2
 801fcae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fcb0:	9108      	str	r1, [sp, #32]
 801fcb2:	1f18      	subs	r0, r3, #4
 801fcb4:	f06f 0303 	mvn.w	r3, #3
 801fcb8:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 801fcbc:	08f2      	lsrs	r2, r6, #3
 801fcbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fcc0:	00b3      	lsls	r3, r6, #2
 801fcc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fcc4:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 801fcc8:	9303      	str	r3, [sp, #12]
 801fcca:	00d3      	lsls	r3, r2, #3
 801fccc:	9305      	str	r3, [sp, #20]
 801fcce:	9b08      	ldr	r3, [sp, #32]
 801fcd0:	9204      	str	r2, [sp, #16]
 801fcd2:	4652      	mov	r2, sl
 801fcd4:	eb02 0e03 	add.w	lr, r2, r3
 801fcd8:	f104 0c20 	add.w	ip, r4, #32
 801fcdc:	eb00 0887 	add.w	r8, r0, r7, lsl #2
 801fce0:	4596      	cmp	lr, r2
 801fce2:	900d      	str	r0, [sp, #52]	@ 0x34
 801fce4:	f006 0907 	and.w	r9, r6, #7
 801fce8:	910a      	str	r1, [sp, #40]	@ 0x28
 801fcea:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801fcee:	f1ac 0320 	sub.w	r3, ip, #32
 801fcf2:	f240 810a 	bls.w	801ff0a <forward_lite_dense_if32of32wf32_lut8+0x29a>
 801fcf6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fcf8:	f8cd e004 	str.w	lr, [sp, #4]
 801fcfc:	46b8      	mov	r8, r7
 801fcfe:	4693      	mov	fp, r2
 801fd00:	9306      	str	r3, [sp, #24]
 801fd02:	464f      	mov	r7, r9
 801fd04:	f8cd c008 	str.w	ip, [sp, #8]
 801fd08:	9207      	str	r2, [sp, #28]
 801fd0a:	9b04      	ldr	r3, [sp, #16]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	f000 810b 	beq.w	801ff28 <forward_lite_dense_if32of32wf32_lut8+0x2b8>
 801fd12:	9b05      	ldr	r3, [sp, #20]
 801fd14:	9c02      	ldr	r4, [sp, #8]
 801fd16:	9700      	str	r7, [sp, #0]
 801fd18:	eb08 0a03 	add.w	sl, r8, r3
 801fd1c:	2600      	movs	r6, #0
 801fd1e:	f898 2000 	ldrb.w	r2, [r8]
 801fd22:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801fd26:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd2a:	f7e0 fdfb 	bl	8000924 <__aeabi_fmul>
 801fd2e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fd32:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801fd36:	4607      	mov	r7, r0
 801fd38:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd3c:	f7e0 fdf2 	bl	8000924 <__aeabi_fmul>
 801fd40:	4601      	mov	r1, r0
 801fd42:	4638      	mov	r0, r7
 801fd44:	f7e0 fce6 	bl	8000714 <__addsf3>
 801fd48:	f898 2002 	ldrb.w	r2, [r8, #2]
 801fd4c:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801fd50:	4607      	mov	r7, r0
 801fd52:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd56:	f7e0 fde5 	bl	8000924 <__aeabi_fmul>
 801fd5a:	4601      	mov	r1, r0
 801fd5c:	4638      	mov	r0, r7
 801fd5e:	f7e0 fcd9 	bl	8000714 <__addsf3>
 801fd62:	f898 2003 	ldrb.w	r2, [r8, #3]
 801fd66:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801fd6a:	4607      	mov	r7, r0
 801fd6c:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd70:	f7e0 fdd8 	bl	8000924 <__aeabi_fmul>
 801fd74:	4601      	mov	r1, r0
 801fd76:	4638      	mov	r0, r7
 801fd78:	f7e0 fccc 	bl	8000714 <__addsf3>
 801fd7c:	f898 2004 	ldrb.w	r2, [r8, #4]
 801fd80:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801fd84:	4607      	mov	r7, r0
 801fd86:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fd8a:	f7e0 fdcb 	bl	8000924 <__aeabi_fmul>
 801fd8e:	4639      	mov	r1, r7
 801fd90:	f7e0 fcc0 	bl	8000714 <__addsf3>
 801fd94:	f898 2005 	ldrb.w	r2, [r8, #5]
 801fd98:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801fd9c:	4607      	mov	r7, r0
 801fd9e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801fda2:	f7e0 fdbf 	bl	8000924 <__aeabi_fmul>
 801fda6:	4601      	mov	r1, r0
 801fda8:	4638      	mov	r0, r7
 801fdaa:	f7e0 fcb3 	bl	8000714 <__addsf3>
 801fdae:	4607      	mov	r7, r0
 801fdb0:	f898 0006 	ldrb.w	r0, [r8, #6]
 801fdb4:	f898 9007 	ldrb.w	r9, [r8, #7]
 801fdb8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801fdbc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801fdc0:	f7e0 fdb0 	bl	8000924 <__aeabi_fmul>
 801fdc4:	4601      	mov	r1, r0
 801fdc6:	4638      	mov	r0, r7
 801fdc8:	f7e0 fca4 	bl	8000714 <__addsf3>
 801fdcc:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801fdd0:	4607      	mov	r7, r0
 801fdd2:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
 801fdd6:	f7e0 fda5 	bl	8000924 <__aeabi_fmul>
 801fdda:	4601      	mov	r1, r0
 801fddc:	4638      	mov	r0, r7
 801fdde:	f7e0 fc99 	bl	8000714 <__addsf3>
 801fde2:	4601      	mov	r1, r0
 801fde4:	4630      	mov	r0, r6
 801fde6:	f7e0 fc95 	bl	8000714 <__addsf3>
 801fdea:	f108 0808 	add.w	r8, r8, #8
 801fdee:	45d0      	cmp	r8, sl
 801fdf0:	4606      	mov	r6, r0
 801fdf2:	f104 0420 	add.w	r4, r4, #32
 801fdf6:	d192      	bne.n	801fd1e <forward_lite_dense_if32of32wf32_lut8+0xae>
 801fdf8:	9f00      	ldr	r7, [sp, #0]
 801fdfa:	9c03      	ldr	r4, [sp, #12]
 801fdfc:	2f00      	cmp	r7, #0
 801fdfe:	f000 8091 	beq.w	801ff24 <forward_lite_dense_if32of32wf32_lut8+0x2b4>
 801fe02:	f89a 3000 	ldrb.w	r3, [sl]
 801fe06:	6821      	ldr	r1, [r4, #0]
 801fe08:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe0c:	f7e0 fd8a 	bl	8000924 <__aeabi_fmul>
 801fe10:	4601      	mov	r1, r0
 801fe12:	4630      	mov	r0, r6
 801fe14:	f7e0 fc7e 	bl	8000714 <__addsf3>
 801fe18:	2f01      	cmp	r7, #1
 801fe1a:	4606      	mov	r6, r0
 801fe1c:	d051      	beq.n	801fec2 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe1e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801fe22:	6861      	ldr	r1, [r4, #4]
 801fe24:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe28:	f7e0 fd7c 	bl	8000924 <__aeabi_fmul>
 801fe2c:	4601      	mov	r1, r0
 801fe2e:	4630      	mov	r0, r6
 801fe30:	f7e0 fc70 	bl	8000714 <__addsf3>
 801fe34:	2f02      	cmp	r7, #2
 801fe36:	4606      	mov	r6, r0
 801fe38:	d043      	beq.n	801fec2 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe3a:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801fe3e:	68a1      	ldr	r1, [r4, #8]
 801fe40:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe44:	f7e0 fd6e 	bl	8000924 <__aeabi_fmul>
 801fe48:	4601      	mov	r1, r0
 801fe4a:	4630      	mov	r0, r6
 801fe4c:	f7e0 fc62 	bl	8000714 <__addsf3>
 801fe50:	2f03      	cmp	r7, #3
 801fe52:	4606      	mov	r6, r0
 801fe54:	d035      	beq.n	801fec2 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe56:	f89a 3003 	ldrb.w	r3, [sl, #3]
 801fe5a:	68e1      	ldr	r1, [r4, #12]
 801fe5c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe60:	f7e0 fd60 	bl	8000924 <__aeabi_fmul>
 801fe64:	4601      	mov	r1, r0
 801fe66:	4630      	mov	r0, r6
 801fe68:	f7e0 fc54 	bl	8000714 <__addsf3>
 801fe6c:	2f04      	cmp	r7, #4
 801fe6e:	4606      	mov	r6, r0
 801fe70:	d027      	beq.n	801fec2 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe72:	f89a 3004 	ldrb.w	r3, [sl, #4]
 801fe76:	6921      	ldr	r1, [r4, #16]
 801fe78:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe7c:	f7e0 fd52 	bl	8000924 <__aeabi_fmul>
 801fe80:	4601      	mov	r1, r0
 801fe82:	4630      	mov	r0, r6
 801fe84:	f7e0 fc46 	bl	8000714 <__addsf3>
 801fe88:	2f05      	cmp	r7, #5
 801fe8a:	4606      	mov	r6, r0
 801fe8c:	d019      	beq.n	801fec2 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801fe8e:	f89a 3005 	ldrb.w	r3, [sl, #5]
 801fe92:	6961      	ldr	r1, [r4, #20]
 801fe94:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801fe98:	f7e0 fd44 	bl	8000924 <__aeabi_fmul>
 801fe9c:	4601      	mov	r1, r0
 801fe9e:	4630      	mov	r0, r6
 801fea0:	f7e0 fc38 	bl	8000714 <__addsf3>
 801fea4:	2f06      	cmp	r7, #6
 801fea6:	4606      	mov	r6, r0
 801fea8:	d00b      	beq.n	801fec2 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801feaa:	f89a 3006 	ldrb.w	r3, [sl, #6]
 801feae:	69a1      	ldr	r1, [r4, #24]
 801feb0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801feb4:	f7e0 fd36 	bl	8000924 <__aeabi_fmul>
 801feb8:	4601      	mov	r1, r0
 801feba:	4630      	mov	r0, r6
 801febc:	f7e0 fc2a 	bl	8000714 <__addsf3>
 801fec0:	4606      	mov	r6, r0
 801fec2:	eb0a 0807 	add.w	r8, sl, r7
 801fec6:	f84b 6b04 	str.w	r6, [fp], #4
 801feca:	9b01      	ldr	r3, [sp, #4]
 801fecc:	455b      	cmp	r3, fp
 801fece:	f63f af1c 	bhi.w	801fd0a <forward_lite_dense_if32of32wf32_lut8+0x9a>
 801fed2:	9a07      	ldr	r2, [sp, #28]
 801fed4:	f8dd c008 	ldr.w	ip, [sp, #8]
 801fed8:	469e      	mov	lr, r3
 801feda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fedc:	46b9      	mov	r9, r7
 801fede:	18d7      	adds	r7, r2, r3
 801fee0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fee2:	bb33      	cbnz	r3, 801ff32 <forward_lite_dense_if32of32wf32_lut8+0x2c2>
 801fee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fee6:	42bb      	cmp	r3, r7
 801fee8:	d941      	bls.n	801ff6e <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801feea:	9b03      	ldr	r3, [sp, #12]
 801feec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801feee:	4596      	cmp	lr, r2
 801fef0:	440b      	add	r3, r1
 801fef2:	9303      	str	r3, [sp, #12]
 801fef4:	448c      	add	ip, r1
 801fef6:	d950      	bls.n	801ff9a <forward_lite_dense_if32of32wf32_lut8+0x32a>
 801fef8:	9b08      	ldr	r3, [sp, #32]
 801fefa:	463a      	mov	r2, r7
 801fefc:	eb02 0e03 	add.w	lr, r2, r3
 801ff00:	4596      	cmp	lr, r2
 801ff02:	f1ac 0320 	sub.w	r3, ip, #32
 801ff06:	f63f aef6 	bhi.w	801fcf6 <forward_lite_dense_if32of32wf32_lut8+0x86>
 801ff0a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff0c:	b983      	cbnz	r3, 801ff30 <forward_lite_dense_if32of32wf32_lut8+0x2c0>
 801ff0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff10:	9908      	ldr	r1, [sp, #32]
 801ff12:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801ff16:	4293      	cmp	r3, r2
 801ff18:	4692      	mov	sl, r2
 801ff1a:	d928      	bls.n	801ff6e <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801ff1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ff20:	bb43      	cbnz	r3, 801ff74 <forward_lite_dense_if32of32wf32_lut8+0x304>
 801ff22:	e7fe      	b.n	801ff22 <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801ff24:	46d0      	mov	r8, sl
 801ff26:	e7ce      	b.n	801fec6 <forward_lite_dense_if32of32wf32_lut8+0x256>
 801ff28:	9c06      	ldr	r4, [sp, #24]
 801ff2a:	46c2      	mov	sl, r8
 801ff2c:	2600      	movs	r6, #0
 801ff2e:	e765      	b.n	801fdfc <forward_lite_dense_if32of32wf32_lut8+0x18c>
 801ff30:	4617      	mov	r7, r2
 801ff32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d0d5      	beq.n	801fee4 <forward_lite_dense_if32of32wf32_lut8+0x274>
 801ff38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff3a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ff3c:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801ff40:	9500      	str	r5, [sp, #0]
 801ff42:	18fe      	adds	r6, r7, r3
 801ff44:	4625      	mov	r5, r4
 801ff46:	46f3      	mov	fp, lr
 801ff48:	4634      	mov	r4, r6
 801ff4a:	46e2      	mov	sl, ip
 801ff4c:	4616      	mov	r6, r2
 801ff4e:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801ff52:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801ff56:	f7e0 fbdd 	bl	8000714 <__addsf3>
 801ff5a:	4545      	cmp	r5, r8
 801ff5c:	6020      	str	r0, [r4, #0]
 801ff5e:	d1f6      	bne.n	801ff4e <forward_lite_dense_if32of32wf32_lut8+0x2de>
 801ff60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff62:	9d00      	ldr	r5, [sp, #0]
 801ff64:	42bb      	cmp	r3, r7
 801ff66:	46de      	mov	lr, fp
 801ff68:	46d4      	mov	ip, sl
 801ff6a:	4632      	mov	r2, r6
 801ff6c:	d8bd      	bhi.n	801feea <forward_lite_dense_if32of32wf32_lut8+0x27a>
 801ff6e:	b011      	add	sp, #68	@ 0x44
 801ff70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff74:	2a00      	cmp	r2, #0
 801ff76:	d0d3      	beq.n	801ff20 <forward_lite_dense_if32of32wf32_lut8+0x2b0>
 801ff78:	f06f 0603 	mvn.w	r6, #3
 801ff7c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ff7e:	1a76      	subs	r6, r6, r1
 801ff80:	eb0a 0506 	add.w	r5, sl, r6
 801ff84:	463c      	mov	r4, r7
 801ff86:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801ff8a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801ff8e:	f7e0 fbc1 	bl	8000714 <__addsf3>
 801ff92:	4544      	cmp	r4, r8
 801ff94:	6028      	str	r0, [r5, #0]
 801ff96:	d1f6      	bne.n	801ff86 <forward_lite_dense_if32of32wf32_lut8+0x316>
 801ff98:	e7f2      	b.n	801ff80 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801ff9a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff9c:	9908      	ldr	r1, [sp, #32]
 801ff9e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801ffa2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ffa4:	46ba      	mov	sl, r7
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d0bb      	beq.n	801ff22 <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801ffaa:	e7e3      	b.n	801ff74 <forward_lite_dense_if32of32wf32_lut8+0x304>

0801ffac <st_int8_copy>:
 801ffac:	4288      	cmp	r0, r1
 801ffae:	d021      	beq.n	801fff4 <st_int8_copy+0x48>
 801ffb0:	b302      	cbz	r2, 801fff4 <st_int8_copy+0x48>
 801ffb2:	4288      	cmp	r0, r1
 801ffb4:	d313      	bcc.n	801ffde <st_int8_copy+0x32>
 801ffb6:	2a03      	cmp	r2, #3
 801ffb8:	d81d      	bhi.n	801fff6 <st_int8_copy+0x4a>
 801ffba:	3a01      	subs	r2, #1
 801ffbc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffc0:	f801 3b01 	strb.w	r3, [r1], #1
 801ffc4:	b1b2      	cbz	r2, 801fff4 <st_int8_copy+0x48>
 801ffc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffca:	f801 3b01 	strb.w	r3, [r1], #1
 801ffce:	2a01      	cmp	r2, #1
 801ffd0:	f000 8088 	beq.w	80200e4 <st_int8_copy+0x138>
 801ffd4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffd8:	f801 3b01 	strb.w	r3, [r1], #1
 801ffdc:	4770      	bx	lr
 801ffde:	1883      	adds	r3, r0, r2
 801ffe0:	428b      	cmp	r3, r1
 801ffe2:	d9e8      	bls.n	801ffb6 <st_int8_copy+0xa>
 801ffe4:	440a      	add	r2, r1
 801ffe6:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801ffea:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801ffee:	4298      	cmp	r0, r3
 801fff0:	d1f9      	bne.n	801ffe6 <st_int8_copy+0x3a>
 801fff2:	4770      	bx	lr
 801fff4:	4770      	bx	lr
 801fff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fffa:	f001 0e03 	and.w	lr, r1, #3
 801fffe:	f1ce 0304 	rsb	r3, lr, #4
 8020002:	eba2 0c03 	sub.w	ip, r2, r3
 8020006:	f000 0803 	and.w	r8, r0, #3
 802000a:	f1ce 0203 	rsb	r2, lr, #3
 802000e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020012:	f801 3b01 	strb.w	r3, [r1], #1
 8020016:	b182      	cbz	r2, 802003a <st_int8_copy+0x8e>
 8020018:	f810 3b01 	ldrb.w	r3, [r0], #1
 802001c:	f801 3b01 	strb.w	r3, [r1], #1
 8020020:	2a01      	cmp	r2, #1
 8020022:	d00a      	beq.n	802003a <st_int8_copy+0x8e>
 8020024:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020028:	f801 3b01 	strb.w	r3, [r1], #1
 802002c:	f1be 0f01 	cmp.w	lr, #1
 8020030:	d003      	beq.n	802003a <st_int8_copy+0x8e>
 8020032:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020036:	f801 3b01 	strb.w	r3, [r1], #1
 802003a:	45c6      	cmp	lr, r8
 802003c:	d02a      	beq.n	8020094 <st_int8_copy+0xe8>
 802003e:	ea5f 121c 	movs.w	r2, ip, lsr #4
 8020042:	d00a      	beq.n	802005a <st_int8_copy+0xae>
 8020044:	f850 3b04 	ldr.w	r3, [r0], #4
 8020048:	f850 4b04 	ldr.w	r4, [r0], #4
 802004c:	f850 5b04 	ldr.w	r5, [r0], #4
 8020050:	f850 6b04 	ldr.w	r6, [r0], #4
 8020054:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8020056:	3a01      	subs	r2, #1
 8020058:	d1f4      	bne.n	8020044 <st_int8_copy+0x98>
 802005a:	f01c 0f08 	tst.w	ip, #8
 802005e:	d004      	beq.n	802006a <st_int8_copy+0xbe>
 8020060:	f850 3b04 	ldr.w	r3, [r0], #4
 8020064:	f850 4b04 	ldr.w	r4, [r0], #4
 8020068:	c118      	stmia	r1!, {r3, r4}
 802006a:	f01c 0f04 	tst.w	ip, #4
 802006e:	d003      	beq.n	8020078 <st_int8_copy+0xcc>
 8020070:	f850 3b04 	ldr.w	r3, [r0], #4
 8020074:	f841 3b04 	str.w	r3, [r1], #4
 8020078:	f01c 0f02 	tst.w	ip, #2
 802007c:	d003      	beq.n	8020086 <st_int8_copy+0xda>
 802007e:	f830 3b02 	ldrh.w	r3, [r0], #2
 8020082:	f821 3b02 	strh.w	r3, [r1], #2
 8020086:	f01c 0f01 	tst.w	ip, #1
 802008a:	d001      	beq.n	8020090 <st_int8_copy+0xe4>
 802008c:	7803      	ldrb	r3, [r0, #0]
 802008e:	700b      	strb	r3, [r1, #0]
 8020090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020094:	ea5f 199c 	movs.w	r9, ip, lsr #6
 8020098:	d00e      	beq.n	80200b8 <st_int8_copy+0x10c>
 802009a:	4688      	mov	r8, r1
 802009c:	4686      	mov	lr, r0
 802009e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200a2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200a6:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200aa:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200ae:	f1b9 0901 	subs.w	r9, r9, #1
 80200b2:	4641      	mov	r1, r8
 80200b4:	4670      	mov	r0, lr
 80200b6:	d1f0      	bne.n	802009a <st_int8_copy+0xee>
 80200b8:	f01c 0f20 	tst.w	ip, #32
 80200bc:	d007      	beq.n	80200ce <st_int8_copy+0x122>
 80200be:	4688      	mov	r8, r1
 80200c0:	4686      	mov	lr, r0
 80200c2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200c6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80200ca:	4641      	mov	r1, r8
 80200cc:	4670      	mov	r0, lr
 80200ce:	f01c 0f10 	tst.w	ip, #16
 80200d2:	d001      	beq.n	80200d8 <st_int8_copy+0x12c>
 80200d4:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 80200d6:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80200d8:	f01c 0f08 	tst.w	ip, #8
 80200dc:	d0c5      	beq.n	802006a <st_int8_copy+0xbe>
 80200de:	c818      	ldmia	r0!, {r3, r4}
 80200e0:	c118      	stmia	r1!, {r3, r4}
 80200e2:	e7c2      	b.n	802006a <st_int8_copy+0xbe>
 80200e4:	4770      	bx	lr
 80200e6:	bf00      	nop

080200e8 <ai_array_to_buffer_fmt>:
 80200e8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80200ec:	2b02      	cmp	r3, #2
 80200ee:	d055      	beq.n	802019c <ai_array_to_buffer_fmt+0xb4>
 80200f0:	4a2d      	ldr	r2, [pc, #180]	@ (80201a8 <ai_array_to_buffer_fmt+0xc0>)
 80200f2:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80200f6:	4293      	cmp	r3, r2
 80200f8:	d010      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 80200fa:	dc21      	bgt.n	8020140 <ai_array_to_buffer_fmt+0x58>
 80200fc:	4a2b      	ldr	r2, [pc, #172]	@ (80201ac <ai_array_to_buffer_fmt+0xc4>)
 80200fe:	4293      	cmp	r3, r2
 8020100:	d00c      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 8020102:	dd0f      	ble.n	8020124 <ai_array_to_buffer_fmt+0x3c>
 8020104:	4a2a      	ldr	r2, [pc, #168]	@ (80201b0 <ai_array_to_buffer_fmt+0xc8>)
 8020106:	4293      	cmp	r3, r2
 8020108:	d008      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 802010a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 802010e:	4293      	cmp	r3, r2
 8020110:	d004      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 8020112:	4a28      	ldr	r2, [pc, #160]	@ (80201b4 <ai_array_to_buffer_fmt+0xcc>)
 8020114:	4293      	cmp	r3, r2
 8020116:	bf0c      	ite	eq
 8020118:	4613      	moveq	r3, r2
 802011a:	2340      	movne	r3, #64	@ 0x40
 802011c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020120:	4318      	orrs	r0, r3
 8020122:	4770      	bx	lr
 8020124:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8020128:	4293      	cmp	r3, r2
 802012a:	d0f7      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 802012c:	dd2c      	ble.n	8020188 <ai_array_to_buffer_fmt+0xa0>
 802012e:	4a22      	ldr	r2, [pc, #136]	@ (80201b8 <ai_array_to_buffer_fmt+0xd0>)
 8020130:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020134:	4293      	cmp	r3, r2
 8020136:	bf0c      	ite	eq
 8020138:	4613      	moveq	r3, r2
 802013a:	2340      	movne	r3, #64	@ 0x40
 802013c:	4318      	orrs	r0, r3
 802013e:	4770      	bx	lr
 8020140:	4a1e      	ldr	r2, [pc, #120]	@ (80201bc <ai_array_to_buffer_fmt+0xd4>)
 8020142:	4293      	cmp	r3, r2
 8020144:	d0ea      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 8020146:	dd10      	ble.n	802016a <ai_array_to_buffer_fmt+0x82>
 8020148:	4a1d      	ldr	r2, [pc, #116]	@ (80201c0 <ai_array_to_buffer_fmt+0xd8>)
 802014a:	4293      	cmp	r3, r2
 802014c:	d0e6      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 802014e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8020152:	4293      	cmp	r3, r2
 8020154:	d0e2      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 8020156:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 802015a:	4293      	cmp	r3, r2
 802015c:	bf0c      	ite	eq
 802015e:	4613      	moveq	r3, r2
 8020160:	2340      	movne	r3, #64	@ 0x40
 8020162:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020166:	4318      	orrs	r0, r3
 8020168:	4770      	bx	lr
 802016a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 802016e:	4293      	cmp	r3, r2
 8020170:	d0d4      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 8020172:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8020176:	4293      	cmp	r3, r2
 8020178:	d0d0      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 802017a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 802017e:	4293      	cmp	r3, r2
 8020180:	bf0c      	ite	eq
 8020182:	4613      	moveq	r3, r2
 8020184:	2340      	movne	r3, #64	@ 0x40
 8020186:	e7c9      	b.n	802011c <ai_array_to_buffer_fmt+0x34>
 8020188:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 802018c:	4293      	cmp	r3, r2
 802018e:	d0c5      	beq.n	802011c <ai_array_to_buffer_fmt+0x34>
 8020190:	3280      	adds	r2, #128	@ 0x80
 8020192:	4293      	cmp	r3, r2
 8020194:	bf0c      	ite	eq
 8020196:	4613      	moveq	r3, r2
 8020198:	2340      	movne	r3, #64	@ 0x40
 802019a:	e7bf      	b.n	802011c <ai_array_to_buffer_fmt+0x34>
 802019c:	4b09      	ldr	r3, [pc, #36]	@ (80201c4 <ai_array_to_buffer_fmt+0xdc>)
 802019e:	4003      	ands	r3, r0
 80201a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80201a4:	e7ba      	b.n	802011c <ai_array_to_buffer_fmt+0x34>
 80201a6:	bf00      	nop
 80201a8:	00821040 	.word	0x00821040
 80201ac:	00040840 	.word	0x00040840
 80201b0:	00041040 	.word	0x00041040
 80201b4:	0004084f 	.word	0x0004084f
 80201b8:	00040447 	.word	0x00040447
 80201bc:	00840447 	.word	0x00840447
 80201c0:	0084084f 	.word	0x0084084f
 80201c4:	00803fff 	.word	0x00803fff

080201c8 <ai_array_get_data_byte_size>:
 80201c8:	b169      	cbz	r1, 80201e6 <ai_array_get_data_byte_size+0x1e>
 80201ca:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80201ce:	fb01 f303 	mul.w	r3, r1, r3
 80201d2:	3307      	adds	r3, #7
 80201d4:	f023 0307 	bic.w	r3, r3, #7
 80201d8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80201dc:	fa23 f000 	lsr.w	r0, r3, r0
 80201e0:	3007      	adds	r0, #7
 80201e2:	08c0      	lsrs	r0, r0, #3
 80201e4:	4770      	bx	lr
 80201e6:	4608      	mov	r0, r1
 80201e8:	4770      	bx	lr
 80201ea:	bf00      	nop

080201ec <ai_version_get>:
 80201ec:	0212      	lsls	r2, r2, #8
 80201ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80201f2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80201f6:	4770      	bx	lr

080201f8 <get_tensor_byte_size>:
 80201f8:	b410      	push	{r4}
 80201fa:	6983      	ldr	r3, [r0, #24]
 80201fc:	68c4      	ldr	r4, [r0, #12]
 80201fe:	6941      	ldr	r1, [r0, #20]
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	68e0      	ldr	r0, [r4, #12]
 8020204:	4a06      	ldr	r2, [pc, #24]	@ (8020220 <get_tensor_byte_size+0x28>)
 8020206:	68c9      	ldr	r1, [r1, #12]
 8020208:	bc10      	pop	{r4}
 802020a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 802020e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8020212:	fb01 f000 	mul.w	r0, r1, r0
 8020216:	4293      	cmp	r3, r2
 8020218:	bf04      	itt	eq
 802021a:	3007      	addeq	r0, #7
 802021c:	08c0      	lsreq	r0, r0, #3
 802021e:	4770      	bx	lr
 8020220:	000400c0 	.word	0x000400c0

08020224 <sbrk_aligned>:
 8020224:	b570      	push	{r4, r5, r6, lr}
 8020226:	4e0f      	ldr	r6, [pc, #60]	@ (8020264 <sbrk_aligned+0x40>)
 8020228:	460c      	mov	r4, r1
 802022a:	6831      	ldr	r1, [r6, #0]
 802022c:	4605      	mov	r5, r0
 802022e:	b911      	cbnz	r1, 8020236 <sbrk_aligned+0x12>
 8020230:	f000 faec 	bl	802080c <_sbrk_r>
 8020234:	6030      	str	r0, [r6, #0]
 8020236:	4621      	mov	r1, r4
 8020238:	4628      	mov	r0, r5
 802023a:	f000 fae7 	bl	802080c <_sbrk_r>
 802023e:	1c43      	adds	r3, r0, #1
 8020240:	d103      	bne.n	802024a <sbrk_aligned+0x26>
 8020242:	f04f 34ff 	mov.w	r4, #4294967295
 8020246:	4620      	mov	r0, r4
 8020248:	bd70      	pop	{r4, r5, r6, pc}
 802024a:	1cc4      	adds	r4, r0, #3
 802024c:	f024 0403 	bic.w	r4, r4, #3
 8020250:	42a0      	cmp	r0, r4
 8020252:	d0f8      	beq.n	8020246 <sbrk_aligned+0x22>
 8020254:	1a21      	subs	r1, r4, r0
 8020256:	4628      	mov	r0, r5
 8020258:	f000 fad8 	bl	802080c <_sbrk_r>
 802025c:	3001      	adds	r0, #1
 802025e:	d1f2      	bne.n	8020246 <sbrk_aligned+0x22>
 8020260:	e7ef      	b.n	8020242 <sbrk_aligned+0x1e>
 8020262:	bf00      	nop
 8020264:	20001ce8 	.word	0x20001ce8

08020268 <_malloc_r>:
 8020268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802026c:	1ccd      	adds	r5, r1, #3
 802026e:	f025 0503 	bic.w	r5, r5, #3
 8020272:	3508      	adds	r5, #8
 8020274:	2d0c      	cmp	r5, #12
 8020276:	bf38      	it	cc
 8020278:	250c      	movcc	r5, #12
 802027a:	2d00      	cmp	r5, #0
 802027c:	4606      	mov	r6, r0
 802027e:	db01      	blt.n	8020284 <_malloc_r+0x1c>
 8020280:	42a9      	cmp	r1, r5
 8020282:	d904      	bls.n	802028e <_malloc_r+0x26>
 8020284:	230c      	movs	r3, #12
 8020286:	6033      	str	r3, [r6, #0]
 8020288:	2000      	movs	r0, #0
 802028a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802028e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020364 <_malloc_r+0xfc>
 8020292:	f000 f869 	bl	8020368 <__malloc_lock>
 8020296:	f8d8 3000 	ldr.w	r3, [r8]
 802029a:	461c      	mov	r4, r3
 802029c:	bb44      	cbnz	r4, 80202f0 <_malloc_r+0x88>
 802029e:	4629      	mov	r1, r5
 80202a0:	4630      	mov	r0, r6
 80202a2:	f7ff ffbf 	bl	8020224 <sbrk_aligned>
 80202a6:	1c43      	adds	r3, r0, #1
 80202a8:	4604      	mov	r4, r0
 80202aa:	d158      	bne.n	802035e <_malloc_r+0xf6>
 80202ac:	f8d8 4000 	ldr.w	r4, [r8]
 80202b0:	4627      	mov	r7, r4
 80202b2:	2f00      	cmp	r7, #0
 80202b4:	d143      	bne.n	802033e <_malloc_r+0xd6>
 80202b6:	2c00      	cmp	r4, #0
 80202b8:	d04b      	beq.n	8020352 <_malloc_r+0xea>
 80202ba:	6823      	ldr	r3, [r4, #0]
 80202bc:	4639      	mov	r1, r7
 80202be:	4630      	mov	r0, r6
 80202c0:	eb04 0903 	add.w	r9, r4, r3
 80202c4:	f000 faa2 	bl	802080c <_sbrk_r>
 80202c8:	4581      	cmp	r9, r0
 80202ca:	d142      	bne.n	8020352 <_malloc_r+0xea>
 80202cc:	6821      	ldr	r1, [r4, #0]
 80202ce:	1a6d      	subs	r5, r5, r1
 80202d0:	4629      	mov	r1, r5
 80202d2:	4630      	mov	r0, r6
 80202d4:	f7ff ffa6 	bl	8020224 <sbrk_aligned>
 80202d8:	3001      	adds	r0, #1
 80202da:	d03a      	beq.n	8020352 <_malloc_r+0xea>
 80202dc:	6823      	ldr	r3, [r4, #0]
 80202de:	442b      	add	r3, r5
 80202e0:	6023      	str	r3, [r4, #0]
 80202e2:	f8d8 3000 	ldr.w	r3, [r8]
 80202e6:	685a      	ldr	r2, [r3, #4]
 80202e8:	bb62      	cbnz	r2, 8020344 <_malloc_r+0xdc>
 80202ea:	f8c8 7000 	str.w	r7, [r8]
 80202ee:	e00f      	b.n	8020310 <_malloc_r+0xa8>
 80202f0:	6822      	ldr	r2, [r4, #0]
 80202f2:	1b52      	subs	r2, r2, r5
 80202f4:	d420      	bmi.n	8020338 <_malloc_r+0xd0>
 80202f6:	2a0b      	cmp	r2, #11
 80202f8:	d917      	bls.n	802032a <_malloc_r+0xc2>
 80202fa:	1961      	adds	r1, r4, r5
 80202fc:	42a3      	cmp	r3, r4
 80202fe:	6025      	str	r5, [r4, #0]
 8020300:	bf18      	it	ne
 8020302:	6059      	strne	r1, [r3, #4]
 8020304:	6863      	ldr	r3, [r4, #4]
 8020306:	bf08      	it	eq
 8020308:	f8c8 1000 	streq.w	r1, [r8]
 802030c:	5162      	str	r2, [r4, r5]
 802030e:	604b      	str	r3, [r1, #4]
 8020310:	4630      	mov	r0, r6
 8020312:	f000 f82f 	bl	8020374 <__malloc_unlock>
 8020316:	f104 000b 	add.w	r0, r4, #11
 802031a:	1d23      	adds	r3, r4, #4
 802031c:	f020 0007 	bic.w	r0, r0, #7
 8020320:	1ac2      	subs	r2, r0, r3
 8020322:	bf1c      	itt	ne
 8020324:	1a1b      	subne	r3, r3, r0
 8020326:	50a3      	strne	r3, [r4, r2]
 8020328:	e7af      	b.n	802028a <_malloc_r+0x22>
 802032a:	6862      	ldr	r2, [r4, #4]
 802032c:	42a3      	cmp	r3, r4
 802032e:	bf0c      	ite	eq
 8020330:	f8c8 2000 	streq.w	r2, [r8]
 8020334:	605a      	strne	r2, [r3, #4]
 8020336:	e7eb      	b.n	8020310 <_malloc_r+0xa8>
 8020338:	4623      	mov	r3, r4
 802033a:	6864      	ldr	r4, [r4, #4]
 802033c:	e7ae      	b.n	802029c <_malloc_r+0x34>
 802033e:	463c      	mov	r4, r7
 8020340:	687f      	ldr	r7, [r7, #4]
 8020342:	e7b6      	b.n	80202b2 <_malloc_r+0x4a>
 8020344:	461a      	mov	r2, r3
 8020346:	685b      	ldr	r3, [r3, #4]
 8020348:	42a3      	cmp	r3, r4
 802034a:	d1fb      	bne.n	8020344 <_malloc_r+0xdc>
 802034c:	2300      	movs	r3, #0
 802034e:	6053      	str	r3, [r2, #4]
 8020350:	e7de      	b.n	8020310 <_malloc_r+0xa8>
 8020352:	230c      	movs	r3, #12
 8020354:	6033      	str	r3, [r6, #0]
 8020356:	4630      	mov	r0, r6
 8020358:	f000 f80c 	bl	8020374 <__malloc_unlock>
 802035c:	e794      	b.n	8020288 <_malloc_r+0x20>
 802035e:	6005      	str	r5, [r0, #0]
 8020360:	e7d6      	b.n	8020310 <_malloc_r+0xa8>
 8020362:	bf00      	nop
 8020364:	20001cec 	.word	0x20001cec

08020368 <__malloc_lock>:
 8020368:	4801      	ldr	r0, [pc, #4]	@ (8020370 <__malloc_lock+0x8>)
 802036a:	f000 ba9c 	b.w	80208a6 <__retarget_lock_acquire_recursive>
 802036e:	bf00      	nop
 8020370:	20001e30 	.word	0x20001e30

08020374 <__malloc_unlock>:
 8020374:	4801      	ldr	r0, [pc, #4]	@ (802037c <__malloc_unlock+0x8>)
 8020376:	f000 ba97 	b.w	80208a8 <__retarget_lock_release_recursive>
 802037a:	bf00      	nop
 802037c:	20001e30 	.word	0x20001e30

08020380 <std>:
 8020380:	2300      	movs	r3, #0
 8020382:	b510      	push	{r4, lr}
 8020384:	4604      	mov	r4, r0
 8020386:	e9c0 3300 	strd	r3, r3, [r0]
 802038a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802038e:	6083      	str	r3, [r0, #8]
 8020390:	8181      	strh	r1, [r0, #12]
 8020392:	6643      	str	r3, [r0, #100]	@ 0x64
 8020394:	81c2      	strh	r2, [r0, #14]
 8020396:	6183      	str	r3, [r0, #24]
 8020398:	4619      	mov	r1, r3
 802039a:	2208      	movs	r2, #8
 802039c:	305c      	adds	r0, #92	@ 0x5c
 802039e:	f000 f9f9 	bl	8020794 <memset>
 80203a2:	4b0d      	ldr	r3, [pc, #52]	@ (80203d8 <std+0x58>)
 80203a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80203a6:	4b0d      	ldr	r3, [pc, #52]	@ (80203dc <std+0x5c>)
 80203a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80203aa:	4b0d      	ldr	r3, [pc, #52]	@ (80203e0 <std+0x60>)
 80203ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80203ae:	4b0d      	ldr	r3, [pc, #52]	@ (80203e4 <std+0x64>)
 80203b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80203b2:	4b0d      	ldr	r3, [pc, #52]	@ (80203e8 <std+0x68>)
 80203b4:	6224      	str	r4, [r4, #32]
 80203b6:	429c      	cmp	r4, r3
 80203b8:	d006      	beq.n	80203c8 <std+0x48>
 80203ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80203be:	4294      	cmp	r4, r2
 80203c0:	d002      	beq.n	80203c8 <std+0x48>
 80203c2:	33d0      	adds	r3, #208	@ 0xd0
 80203c4:	429c      	cmp	r4, r3
 80203c6:	d105      	bne.n	80203d4 <std+0x54>
 80203c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80203cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203d0:	f000 ba68 	b.w	80208a4 <__retarget_lock_init_recursive>
 80203d4:	bd10      	pop	{r4, pc}
 80203d6:	bf00      	nop
 80203d8:	080205e5 	.word	0x080205e5
 80203dc:	08020607 	.word	0x08020607
 80203e0:	0802063f 	.word	0x0802063f
 80203e4:	08020663 	.word	0x08020663
 80203e8:	20001cf0 	.word	0x20001cf0

080203ec <stdio_exit_handler>:
 80203ec:	4a02      	ldr	r2, [pc, #8]	@ (80203f8 <stdio_exit_handler+0xc>)
 80203ee:	4903      	ldr	r1, [pc, #12]	@ (80203fc <stdio_exit_handler+0x10>)
 80203f0:	4803      	ldr	r0, [pc, #12]	@ (8020400 <stdio_exit_handler+0x14>)
 80203f2:	f000 b869 	b.w	80204c8 <_fwalk_sglue>
 80203f6:	bf00      	nop
 80203f8:	2000063c 	.word	0x2000063c
 80203fc:	08020fd9 	.word	0x08020fd9
 8020400:	2000064c 	.word	0x2000064c

08020404 <cleanup_stdio>:
 8020404:	6841      	ldr	r1, [r0, #4]
 8020406:	4b0c      	ldr	r3, [pc, #48]	@ (8020438 <cleanup_stdio+0x34>)
 8020408:	4299      	cmp	r1, r3
 802040a:	b510      	push	{r4, lr}
 802040c:	4604      	mov	r4, r0
 802040e:	d001      	beq.n	8020414 <cleanup_stdio+0x10>
 8020410:	f000 fde2 	bl	8020fd8 <_fflush_r>
 8020414:	68a1      	ldr	r1, [r4, #8]
 8020416:	4b09      	ldr	r3, [pc, #36]	@ (802043c <cleanup_stdio+0x38>)
 8020418:	4299      	cmp	r1, r3
 802041a:	d002      	beq.n	8020422 <cleanup_stdio+0x1e>
 802041c:	4620      	mov	r0, r4
 802041e:	f000 fddb 	bl	8020fd8 <_fflush_r>
 8020422:	68e1      	ldr	r1, [r4, #12]
 8020424:	4b06      	ldr	r3, [pc, #24]	@ (8020440 <cleanup_stdio+0x3c>)
 8020426:	4299      	cmp	r1, r3
 8020428:	d004      	beq.n	8020434 <cleanup_stdio+0x30>
 802042a:	4620      	mov	r0, r4
 802042c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020430:	f000 bdd2 	b.w	8020fd8 <_fflush_r>
 8020434:	bd10      	pop	{r4, pc}
 8020436:	bf00      	nop
 8020438:	20001cf0 	.word	0x20001cf0
 802043c:	20001d58 	.word	0x20001d58
 8020440:	20001dc0 	.word	0x20001dc0

08020444 <global_stdio_init.part.0>:
 8020444:	b510      	push	{r4, lr}
 8020446:	4b0b      	ldr	r3, [pc, #44]	@ (8020474 <global_stdio_init.part.0+0x30>)
 8020448:	4c0b      	ldr	r4, [pc, #44]	@ (8020478 <global_stdio_init.part.0+0x34>)
 802044a:	4a0c      	ldr	r2, [pc, #48]	@ (802047c <global_stdio_init.part.0+0x38>)
 802044c:	601a      	str	r2, [r3, #0]
 802044e:	4620      	mov	r0, r4
 8020450:	2200      	movs	r2, #0
 8020452:	2104      	movs	r1, #4
 8020454:	f7ff ff94 	bl	8020380 <std>
 8020458:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802045c:	2201      	movs	r2, #1
 802045e:	2109      	movs	r1, #9
 8020460:	f7ff ff8e 	bl	8020380 <std>
 8020464:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020468:	2202      	movs	r2, #2
 802046a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802046e:	2112      	movs	r1, #18
 8020470:	f7ff bf86 	b.w	8020380 <std>
 8020474:	20001e28 	.word	0x20001e28
 8020478:	20001cf0 	.word	0x20001cf0
 802047c:	080203ed 	.word	0x080203ed

08020480 <__sfp_lock_acquire>:
 8020480:	4801      	ldr	r0, [pc, #4]	@ (8020488 <__sfp_lock_acquire+0x8>)
 8020482:	f000 ba10 	b.w	80208a6 <__retarget_lock_acquire_recursive>
 8020486:	bf00      	nop
 8020488:	20001e31 	.word	0x20001e31

0802048c <__sfp_lock_release>:
 802048c:	4801      	ldr	r0, [pc, #4]	@ (8020494 <__sfp_lock_release+0x8>)
 802048e:	f000 ba0b 	b.w	80208a8 <__retarget_lock_release_recursive>
 8020492:	bf00      	nop
 8020494:	20001e31 	.word	0x20001e31

08020498 <__sinit>:
 8020498:	b510      	push	{r4, lr}
 802049a:	4604      	mov	r4, r0
 802049c:	f7ff fff0 	bl	8020480 <__sfp_lock_acquire>
 80204a0:	6a23      	ldr	r3, [r4, #32]
 80204a2:	b11b      	cbz	r3, 80204ac <__sinit+0x14>
 80204a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204a8:	f7ff bff0 	b.w	802048c <__sfp_lock_release>
 80204ac:	4b04      	ldr	r3, [pc, #16]	@ (80204c0 <__sinit+0x28>)
 80204ae:	6223      	str	r3, [r4, #32]
 80204b0:	4b04      	ldr	r3, [pc, #16]	@ (80204c4 <__sinit+0x2c>)
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d1f5      	bne.n	80204a4 <__sinit+0xc>
 80204b8:	f7ff ffc4 	bl	8020444 <global_stdio_init.part.0>
 80204bc:	e7f2      	b.n	80204a4 <__sinit+0xc>
 80204be:	bf00      	nop
 80204c0:	08020405 	.word	0x08020405
 80204c4:	20001e28 	.word	0x20001e28

080204c8 <_fwalk_sglue>:
 80204c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204cc:	4607      	mov	r7, r0
 80204ce:	4688      	mov	r8, r1
 80204d0:	4614      	mov	r4, r2
 80204d2:	2600      	movs	r6, #0
 80204d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80204d8:	f1b9 0901 	subs.w	r9, r9, #1
 80204dc:	d505      	bpl.n	80204ea <_fwalk_sglue+0x22>
 80204de:	6824      	ldr	r4, [r4, #0]
 80204e0:	2c00      	cmp	r4, #0
 80204e2:	d1f7      	bne.n	80204d4 <_fwalk_sglue+0xc>
 80204e4:	4630      	mov	r0, r6
 80204e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80204ea:	89ab      	ldrh	r3, [r5, #12]
 80204ec:	2b01      	cmp	r3, #1
 80204ee:	d907      	bls.n	8020500 <_fwalk_sglue+0x38>
 80204f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80204f4:	3301      	adds	r3, #1
 80204f6:	d003      	beq.n	8020500 <_fwalk_sglue+0x38>
 80204f8:	4629      	mov	r1, r5
 80204fa:	4638      	mov	r0, r7
 80204fc:	47c0      	blx	r8
 80204fe:	4306      	orrs	r6, r0
 8020500:	3568      	adds	r5, #104	@ 0x68
 8020502:	e7e9      	b.n	80204d8 <_fwalk_sglue+0x10>

08020504 <iprintf>:
 8020504:	b40f      	push	{r0, r1, r2, r3}
 8020506:	b507      	push	{r0, r1, r2, lr}
 8020508:	4906      	ldr	r1, [pc, #24]	@ (8020524 <iprintf+0x20>)
 802050a:	ab04      	add	r3, sp, #16
 802050c:	6808      	ldr	r0, [r1, #0]
 802050e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020512:	6881      	ldr	r1, [r0, #8]
 8020514:	9301      	str	r3, [sp, #4]
 8020516:	f000 fa3b 	bl	8020990 <_vfiprintf_r>
 802051a:	b003      	add	sp, #12
 802051c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020520:	b004      	add	sp, #16
 8020522:	4770      	bx	lr
 8020524:	20000648 	.word	0x20000648

08020528 <_puts_r>:
 8020528:	6a03      	ldr	r3, [r0, #32]
 802052a:	b570      	push	{r4, r5, r6, lr}
 802052c:	6884      	ldr	r4, [r0, #8]
 802052e:	4605      	mov	r5, r0
 8020530:	460e      	mov	r6, r1
 8020532:	b90b      	cbnz	r3, 8020538 <_puts_r+0x10>
 8020534:	f7ff ffb0 	bl	8020498 <__sinit>
 8020538:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802053a:	07db      	lsls	r3, r3, #31
 802053c:	d405      	bmi.n	802054a <_puts_r+0x22>
 802053e:	89a3      	ldrh	r3, [r4, #12]
 8020540:	0598      	lsls	r0, r3, #22
 8020542:	d402      	bmi.n	802054a <_puts_r+0x22>
 8020544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020546:	f000 f9ae 	bl	80208a6 <__retarget_lock_acquire_recursive>
 802054a:	89a3      	ldrh	r3, [r4, #12]
 802054c:	0719      	lsls	r1, r3, #28
 802054e:	d502      	bpl.n	8020556 <_puts_r+0x2e>
 8020550:	6923      	ldr	r3, [r4, #16]
 8020552:	2b00      	cmp	r3, #0
 8020554:	d135      	bne.n	80205c2 <_puts_r+0x9a>
 8020556:	4621      	mov	r1, r4
 8020558:	4628      	mov	r0, r5
 802055a:	f000 f8c5 	bl	80206e8 <__swsetup_r>
 802055e:	b380      	cbz	r0, 80205c2 <_puts_r+0x9a>
 8020560:	f04f 35ff 	mov.w	r5, #4294967295
 8020564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020566:	07da      	lsls	r2, r3, #31
 8020568:	d405      	bmi.n	8020576 <_puts_r+0x4e>
 802056a:	89a3      	ldrh	r3, [r4, #12]
 802056c:	059b      	lsls	r3, r3, #22
 802056e:	d402      	bmi.n	8020576 <_puts_r+0x4e>
 8020570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020572:	f000 f999 	bl	80208a8 <__retarget_lock_release_recursive>
 8020576:	4628      	mov	r0, r5
 8020578:	bd70      	pop	{r4, r5, r6, pc}
 802057a:	2b00      	cmp	r3, #0
 802057c:	da04      	bge.n	8020588 <_puts_r+0x60>
 802057e:	69a2      	ldr	r2, [r4, #24]
 8020580:	429a      	cmp	r2, r3
 8020582:	dc17      	bgt.n	80205b4 <_puts_r+0x8c>
 8020584:	290a      	cmp	r1, #10
 8020586:	d015      	beq.n	80205b4 <_puts_r+0x8c>
 8020588:	6823      	ldr	r3, [r4, #0]
 802058a:	1c5a      	adds	r2, r3, #1
 802058c:	6022      	str	r2, [r4, #0]
 802058e:	7019      	strb	r1, [r3, #0]
 8020590:	68a3      	ldr	r3, [r4, #8]
 8020592:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020596:	3b01      	subs	r3, #1
 8020598:	60a3      	str	r3, [r4, #8]
 802059a:	2900      	cmp	r1, #0
 802059c:	d1ed      	bne.n	802057a <_puts_r+0x52>
 802059e:	2b00      	cmp	r3, #0
 80205a0:	da11      	bge.n	80205c6 <_puts_r+0x9e>
 80205a2:	4622      	mov	r2, r4
 80205a4:	210a      	movs	r1, #10
 80205a6:	4628      	mov	r0, r5
 80205a8:	f000 f85f 	bl	802066a <__swbuf_r>
 80205ac:	3001      	adds	r0, #1
 80205ae:	d0d7      	beq.n	8020560 <_puts_r+0x38>
 80205b0:	250a      	movs	r5, #10
 80205b2:	e7d7      	b.n	8020564 <_puts_r+0x3c>
 80205b4:	4622      	mov	r2, r4
 80205b6:	4628      	mov	r0, r5
 80205b8:	f000 f857 	bl	802066a <__swbuf_r>
 80205bc:	3001      	adds	r0, #1
 80205be:	d1e7      	bne.n	8020590 <_puts_r+0x68>
 80205c0:	e7ce      	b.n	8020560 <_puts_r+0x38>
 80205c2:	3e01      	subs	r6, #1
 80205c4:	e7e4      	b.n	8020590 <_puts_r+0x68>
 80205c6:	6823      	ldr	r3, [r4, #0]
 80205c8:	1c5a      	adds	r2, r3, #1
 80205ca:	6022      	str	r2, [r4, #0]
 80205cc:	220a      	movs	r2, #10
 80205ce:	701a      	strb	r2, [r3, #0]
 80205d0:	e7ee      	b.n	80205b0 <_puts_r+0x88>
	...

080205d4 <puts>:
 80205d4:	4b02      	ldr	r3, [pc, #8]	@ (80205e0 <puts+0xc>)
 80205d6:	4601      	mov	r1, r0
 80205d8:	6818      	ldr	r0, [r3, #0]
 80205da:	f7ff bfa5 	b.w	8020528 <_puts_r>
 80205de:	bf00      	nop
 80205e0:	20000648 	.word	0x20000648

080205e4 <__sread>:
 80205e4:	b510      	push	{r4, lr}
 80205e6:	460c      	mov	r4, r1
 80205e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205ec:	f000 f8fc 	bl	80207e8 <_read_r>
 80205f0:	2800      	cmp	r0, #0
 80205f2:	bfab      	itete	ge
 80205f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80205f6:	89a3      	ldrhlt	r3, [r4, #12]
 80205f8:	181b      	addge	r3, r3, r0
 80205fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80205fe:	bfac      	ite	ge
 8020600:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020602:	81a3      	strhlt	r3, [r4, #12]
 8020604:	bd10      	pop	{r4, pc}

08020606 <__swrite>:
 8020606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802060a:	461f      	mov	r7, r3
 802060c:	898b      	ldrh	r3, [r1, #12]
 802060e:	05db      	lsls	r3, r3, #23
 8020610:	4605      	mov	r5, r0
 8020612:	460c      	mov	r4, r1
 8020614:	4616      	mov	r6, r2
 8020616:	d505      	bpl.n	8020624 <__swrite+0x1e>
 8020618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802061c:	2302      	movs	r3, #2
 802061e:	2200      	movs	r2, #0
 8020620:	f000 f8d0 	bl	80207c4 <_lseek_r>
 8020624:	89a3      	ldrh	r3, [r4, #12]
 8020626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802062a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802062e:	81a3      	strh	r3, [r4, #12]
 8020630:	4632      	mov	r2, r6
 8020632:	463b      	mov	r3, r7
 8020634:	4628      	mov	r0, r5
 8020636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802063a:	f000 b8f7 	b.w	802082c <_write_r>

0802063e <__sseek>:
 802063e:	b510      	push	{r4, lr}
 8020640:	460c      	mov	r4, r1
 8020642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020646:	f000 f8bd 	bl	80207c4 <_lseek_r>
 802064a:	1c43      	adds	r3, r0, #1
 802064c:	89a3      	ldrh	r3, [r4, #12]
 802064e:	bf15      	itete	ne
 8020650:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802065a:	81a3      	strheq	r3, [r4, #12]
 802065c:	bf18      	it	ne
 802065e:	81a3      	strhne	r3, [r4, #12]
 8020660:	bd10      	pop	{r4, pc}

08020662 <__sclose>:
 8020662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020666:	f000 b89d 	b.w	80207a4 <_close_r>

0802066a <__swbuf_r>:
 802066a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802066c:	460e      	mov	r6, r1
 802066e:	4614      	mov	r4, r2
 8020670:	4605      	mov	r5, r0
 8020672:	b118      	cbz	r0, 802067c <__swbuf_r+0x12>
 8020674:	6a03      	ldr	r3, [r0, #32]
 8020676:	b90b      	cbnz	r3, 802067c <__swbuf_r+0x12>
 8020678:	f7ff ff0e 	bl	8020498 <__sinit>
 802067c:	69a3      	ldr	r3, [r4, #24]
 802067e:	60a3      	str	r3, [r4, #8]
 8020680:	89a3      	ldrh	r3, [r4, #12]
 8020682:	071a      	lsls	r2, r3, #28
 8020684:	d501      	bpl.n	802068a <__swbuf_r+0x20>
 8020686:	6923      	ldr	r3, [r4, #16]
 8020688:	b943      	cbnz	r3, 802069c <__swbuf_r+0x32>
 802068a:	4621      	mov	r1, r4
 802068c:	4628      	mov	r0, r5
 802068e:	f000 f82b 	bl	80206e8 <__swsetup_r>
 8020692:	b118      	cbz	r0, 802069c <__swbuf_r+0x32>
 8020694:	f04f 37ff 	mov.w	r7, #4294967295
 8020698:	4638      	mov	r0, r7
 802069a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802069c:	6823      	ldr	r3, [r4, #0]
 802069e:	6922      	ldr	r2, [r4, #16]
 80206a0:	1a98      	subs	r0, r3, r2
 80206a2:	6963      	ldr	r3, [r4, #20]
 80206a4:	b2f6      	uxtb	r6, r6
 80206a6:	4283      	cmp	r3, r0
 80206a8:	4637      	mov	r7, r6
 80206aa:	dc05      	bgt.n	80206b8 <__swbuf_r+0x4e>
 80206ac:	4621      	mov	r1, r4
 80206ae:	4628      	mov	r0, r5
 80206b0:	f000 fc92 	bl	8020fd8 <_fflush_r>
 80206b4:	2800      	cmp	r0, #0
 80206b6:	d1ed      	bne.n	8020694 <__swbuf_r+0x2a>
 80206b8:	68a3      	ldr	r3, [r4, #8]
 80206ba:	3b01      	subs	r3, #1
 80206bc:	60a3      	str	r3, [r4, #8]
 80206be:	6823      	ldr	r3, [r4, #0]
 80206c0:	1c5a      	adds	r2, r3, #1
 80206c2:	6022      	str	r2, [r4, #0]
 80206c4:	701e      	strb	r6, [r3, #0]
 80206c6:	6962      	ldr	r2, [r4, #20]
 80206c8:	1c43      	adds	r3, r0, #1
 80206ca:	429a      	cmp	r2, r3
 80206cc:	d004      	beq.n	80206d8 <__swbuf_r+0x6e>
 80206ce:	89a3      	ldrh	r3, [r4, #12]
 80206d0:	07db      	lsls	r3, r3, #31
 80206d2:	d5e1      	bpl.n	8020698 <__swbuf_r+0x2e>
 80206d4:	2e0a      	cmp	r6, #10
 80206d6:	d1df      	bne.n	8020698 <__swbuf_r+0x2e>
 80206d8:	4621      	mov	r1, r4
 80206da:	4628      	mov	r0, r5
 80206dc:	f000 fc7c 	bl	8020fd8 <_fflush_r>
 80206e0:	2800      	cmp	r0, #0
 80206e2:	d0d9      	beq.n	8020698 <__swbuf_r+0x2e>
 80206e4:	e7d6      	b.n	8020694 <__swbuf_r+0x2a>
	...

080206e8 <__swsetup_r>:
 80206e8:	b538      	push	{r3, r4, r5, lr}
 80206ea:	4b29      	ldr	r3, [pc, #164]	@ (8020790 <__swsetup_r+0xa8>)
 80206ec:	4605      	mov	r5, r0
 80206ee:	6818      	ldr	r0, [r3, #0]
 80206f0:	460c      	mov	r4, r1
 80206f2:	b118      	cbz	r0, 80206fc <__swsetup_r+0x14>
 80206f4:	6a03      	ldr	r3, [r0, #32]
 80206f6:	b90b      	cbnz	r3, 80206fc <__swsetup_r+0x14>
 80206f8:	f7ff fece 	bl	8020498 <__sinit>
 80206fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020700:	0719      	lsls	r1, r3, #28
 8020702:	d422      	bmi.n	802074a <__swsetup_r+0x62>
 8020704:	06da      	lsls	r2, r3, #27
 8020706:	d407      	bmi.n	8020718 <__swsetup_r+0x30>
 8020708:	2209      	movs	r2, #9
 802070a:	602a      	str	r2, [r5, #0]
 802070c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020710:	81a3      	strh	r3, [r4, #12]
 8020712:	f04f 30ff 	mov.w	r0, #4294967295
 8020716:	e033      	b.n	8020780 <__swsetup_r+0x98>
 8020718:	0758      	lsls	r0, r3, #29
 802071a:	d512      	bpl.n	8020742 <__swsetup_r+0x5a>
 802071c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802071e:	b141      	cbz	r1, 8020732 <__swsetup_r+0x4a>
 8020720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020724:	4299      	cmp	r1, r3
 8020726:	d002      	beq.n	802072e <__swsetup_r+0x46>
 8020728:	4628      	mov	r0, r5
 802072a:	f000 f8bf 	bl	80208ac <_free_r>
 802072e:	2300      	movs	r3, #0
 8020730:	6363      	str	r3, [r4, #52]	@ 0x34
 8020732:	89a3      	ldrh	r3, [r4, #12]
 8020734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020738:	81a3      	strh	r3, [r4, #12]
 802073a:	2300      	movs	r3, #0
 802073c:	6063      	str	r3, [r4, #4]
 802073e:	6923      	ldr	r3, [r4, #16]
 8020740:	6023      	str	r3, [r4, #0]
 8020742:	89a3      	ldrh	r3, [r4, #12]
 8020744:	f043 0308 	orr.w	r3, r3, #8
 8020748:	81a3      	strh	r3, [r4, #12]
 802074a:	6923      	ldr	r3, [r4, #16]
 802074c:	b94b      	cbnz	r3, 8020762 <__swsetup_r+0x7a>
 802074e:	89a3      	ldrh	r3, [r4, #12]
 8020750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020758:	d003      	beq.n	8020762 <__swsetup_r+0x7a>
 802075a:	4621      	mov	r1, r4
 802075c:	4628      	mov	r0, r5
 802075e:	f000 fc89 	bl	8021074 <__smakebuf_r>
 8020762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020766:	f013 0201 	ands.w	r2, r3, #1
 802076a:	d00a      	beq.n	8020782 <__swsetup_r+0x9a>
 802076c:	2200      	movs	r2, #0
 802076e:	60a2      	str	r2, [r4, #8]
 8020770:	6962      	ldr	r2, [r4, #20]
 8020772:	4252      	negs	r2, r2
 8020774:	61a2      	str	r2, [r4, #24]
 8020776:	6922      	ldr	r2, [r4, #16]
 8020778:	b942      	cbnz	r2, 802078c <__swsetup_r+0xa4>
 802077a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802077e:	d1c5      	bne.n	802070c <__swsetup_r+0x24>
 8020780:	bd38      	pop	{r3, r4, r5, pc}
 8020782:	0799      	lsls	r1, r3, #30
 8020784:	bf58      	it	pl
 8020786:	6962      	ldrpl	r2, [r4, #20]
 8020788:	60a2      	str	r2, [r4, #8]
 802078a:	e7f4      	b.n	8020776 <__swsetup_r+0x8e>
 802078c:	2000      	movs	r0, #0
 802078e:	e7f7      	b.n	8020780 <__swsetup_r+0x98>
 8020790:	20000648 	.word	0x20000648

08020794 <memset>:
 8020794:	4402      	add	r2, r0
 8020796:	4603      	mov	r3, r0
 8020798:	4293      	cmp	r3, r2
 802079a:	d100      	bne.n	802079e <memset+0xa>
 802079c:	4770      	bx	lr
 802079e:	f803 1b01 	strb.w	r1, [r3], #1
 80207a2:	e7f9      	b.n	8020798 <memset+0x4>

080207a4 <_close_r>:
 80207a4:	b538      	push	{r3, r4, r5, lr}
 80207a6:	4d06      	ldr	r5, [pc, #24]	@ (80207c0 <_close_r+0x1c>)
 80207a8:	2300      	movs	r3, #0
 80207aa:	4604      	mov	r4, r0
 80207ac:	4608      	mov	r0, r1
 80207ae:	602b      	str	r3, [r5, #0]
 80207b0:	f7e1 f909 	bl	80019c6 <_close>
 80207b4:	1c43      	adds	r3, r0, #1
 80207b6:	d102      	bne.n	80207be <_close_r+0x1a>
 80207b8:	682b      	ldr	r3, [r5, #0]
 80207ba:	b103      	cbz	r3, 80207be <_close_r+0x1a>
 80207bc:	6023      	str	r3, [r4, #0]
 80207be:	bd38      	pop	{r3, r4, r5, pc}
 80207c0:	20001e2c 	.word	0x20001e2c

080207c4 <_lseek_r>:
 80207c4:	b538      	push	{r3, r4, r5, lr}
 80207c6:	4d07      	ldr	r5, [pc, #28]	@ (80207e4 <_lseek_r+0x20>)
 80207c8:	4604      	mov	r4, r0
 80207ca:	4608      	mov	r0, r1
 80207cc:	4611      	mov	r1, r2
 80207ce:	2200      	movs	r2, #0
 80207d0:	602a      	str	r2, [r5, #0]
 80207d2:	461a      	mov	r2, r3
 80207d4:	f7e1 f91b 	bl	8001a0e <_lseek>
 80207d8:	1c43      	adds	r3, r0, #1
 80207da:	d102      	bne.n	80207e2 <_lseek_r+0x1e>
 80207dc:	682b      	ldr	r3, [r5, #0]
 80207de:	b103      	cbz	r3, 80207e2 <_lseek_r+0x1e>
 80207e0:	6023      	str	r3, [r4, #0]
 80207e2:	bd38      	pop	{r3, r4, r5, pc}
 80207e4:	20001e2c 	.word	0x20001e2c

080207e8 <_read_r>:
 80207e8:	b538      	push	{r3, r4, r5, lr}
 80207ea:	4d07      	ldr	r5, [pc, #28]	@ (8020808 <_read_r+0x20>)
 80207ec:	4604      	mov	r4, r0
 80207ee:	4608      	mov	r0, r1
 80207f0:	4611      	mov	r1, r2
 80207f2:	2200      	movs	r2, #0
 80207f4:	602a      	str	r2, [r5, #0]
 80207f6:	461a      	mov	r2, r3
 80207f8:	f7e1 f8ac 	bl	8001954 <_read>
 80207fc:	1c43      	adds	r3, r0, #1
 80207fe:	d102      	bne.n	8020806 <_read_r+0x1e>
 8020800:	682b      	ldr	r3, [r5, #0]
 8020802:	b103      	cbz	r3, 8020806 <_read_r+0x1e>
 8020804:	6023      	str	r3, [r4, #0]
 8020806:	bd38      	pop	{r3, r4, r5, pc}
 8020808:	20001e2c 	.word	0x20001e2c

0802080c <_sbrk_r>:
 802080c:	b538      	push	{r3, r4, r5, lr}
 802080e:	4d06      	ldr	r5, [pc, #24]	@ (8020828 <_sbrk_r+0x1c>)
 8020810:	2300      	movs	r3, #0
 8020812:	4604      	mov	r4, r0
 8020814:	4608      	mov	r0, r1
 8020816:	602b      	str	r3, [r5, #0]
 8020818:	f7e1 f906 	bl	8001a28 <_sbrk>
 802081c:	1c43      	adds	r3, r0, #1
 802081e:	d102      	bne.n	8020826 <_sbrk_r+0x1a>
 8020820:	682b      	ldr	r3, [r5, #0]
 8020822:	b103      	cbz	r3, 8020826 <_sbrk_r+0x1a>
 8020824:	6023      	str	r3, [r4, #0]
 8020826:	bd38      	pop	{r3, r4, r5, pc}
 8020828:	20001e2c 	.word	0x20001e2c

0802082c <_write_r>:
 802082c:	b538      	push	{r3, r4, r5, lr}
 802082e:	4d07      	ldr	r5, [pc, #28]	@ (802084c <_write_r+0x20>)
 8020830:	4604      	mov	r4, r0
 8020832:	4608      	mov	r0, r1
 8020834:	4611      	mov	r1, r2
 8020836:	2200      	movs	r2, #0
 8020838:	602a      	str	r2, [r5, #0]
 802083a:	461a      	mov	r2, r3
 802083c:	f7e1 f8a7 	bl	800198e <_write>
 8020840:	1c43      	adds	r3, r0, #1
 8020842:	d102      	bne.n	802084a <_write_r+0x1e>
 8020844:	682b      	ldr	r3, [r5, #0]
 8020846:	b103      	cbz	r3, 802084a <_write_r+0x1e>
 8020848:	6023      	str	r3, [r4, #0]
 802084a:	bd38      	pop	{r3, r4, r5, pc}
 802084c:	20001e2c 	.word	0x20001e2c

08020850 <__errno>:
 8020850:	4b01      	ldr	r3, [pc, #4]	@ (8020858 <__errno+0x8>)
 8020852:	6818      	ldr	r0, [r3, #0]
 8020854:	4770      	bx	lr
 8020856:	bf00      	nop
 8020858:	20000648 	.word	0x20000648

0802085c <__libc_init_array>:
 802085c:	b570      	push	{r4, r5, r6, lr}
 802085e:	4d0d      	ldr	r5, [pc, #52]	@ (8020894 <__libc_init_array+0x38>)
 8020860:	4c0d      	ldr	r4, [pc, #52]	@ (8020898 <__libc_init_array+0x3c>)
 8020862:	1b64      	subs	r4, r4, r5
 8020864:	10a4      	asrs	r4, r4, #2
 8020866:	2600      	movs	r6, #0
 8020868:	42a6      	cmp	r6, r4
 802086a:	d109      	bne.n	8020880 <__libc_init_array+0x24>
 802086c:	4d0b      	ldr	r5, [pc, #44]	@ (802089c <__libc_init_array+0x40>)
 802086e:	4c0c      	ldr	r4, [pc, #48]	@ (80208a0 <__libc_init_array+0x44>)
 8020870:	f000 fe22 	bl	80214b8 <_init>
 8020874:	1b64      	subs	r4, r4, r5
 8020876:	10a4      	asrs	r4, r4, #2
 8020878:	2600      	movs	r6, #0
 802087a:	42a6      	cmp	r6, r4
 802087c:	d105      	bne.n	802088a <__libc_init_array+0x2e>
 802087e:	bd70      	pop	{r4, r5, r6, pc}
 8020880:	f855 3b04 	ldr.w	r3, [r5], #4
 8020884:	4798      	blx	r3
 8020886:	3601      	adds	r6, #1
 8020888:	e7ee      	b.n	8020868 <__libc_init_array+0xc>
 802088a:	f855 3b04 	ldr.w	r3, [r5], #4
 802088e:	4798      	blx	r3
 8020890:	3601      	adds	r6, #1
 8020892:	e7f2      	b.n	802087a <__libc_init_array+0x1e>
 8020894:	08022200 	.word	0x08022200
 8020898:	08022200 	.word	0x08022200
 802089c:	08022200 	.word	0x08022200
 80208a0:	08022204 	.word	0x08022204

080208a4 <__retarget_lock_init_recursive>:
 80208a4:	4770      	bx	lr

080208a6 <__retarget_lock_acquire_recursive>:
 80208a6:	4770      	bx	lr

080208a8 <__retarget_lock_release_recursive>:
 80208a8:	4770      	bx	lr
	...

080208ac <_free_r>:
 80208ac:	b538      	push	{r3, r4, r5, lr}
 80208ae:	4605      	mov	r5, r0
 80208b0:	2900      	cmp	r1, #0
 80208b2:	d041      	beq.n	8020938 <_free_r+0x8c>
 80208b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80208b8:	1f0c      	subs	r4, r1, #4
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	bfb8      	it	lt
 80208be:	18e4      	addlt	r4, r4, r3
 80208c0:	f7ff fd52 	bl	8020368 <__malloc_lock>
 80208c4:	4a1d      	ldr	r2, [pc, #116]	@ (802093c <_free_r+0x90>)
 80208c6:	6813      	ldr	r3, [r2, #0]
 80208c8:	b933      	cbnz	r3, 80208d8 <_free_r+0x2c>
 80208ca:	6063      	str	r3, [r4, #4]
 80208cc:	6014      	str	r4, [r2, #0]
 80208ce:	4628      	mov	r0, r5
 80208d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80208d4:	f7ff bd4e 	b.w	8020374 <__malloc_unlock>
 80208d8:	42a3      	cmp	r3, r4
 80208da:	d908      	bls.n	80208ee <_free_r+0x42>
 80208dc:	6820      	ldr	r0, [r4, #0]
 80208de:	1821      	adds	r1, r4, r0
 80208e0:	428b      	cmp	r3, r1
 80208e2:	bf01      	itttt	eq
 80208e4:	6819      	ldreq	r1, [r3, #0]
 80208e6:	685b      	ldreq	r3, [r3, #4]
 80208e8:	1809      	addeq	r1, r1, r0
 80208ea:	6021      	streq	r1, [r4, #0]
 80208ec:	e7ed      	b.n	80208ca <_free_r+0x1e>
 80208ee:	461a      	mov	r2, r3
 80208f0:	685b      	ldr	r3, [r3, #4]
 80208f2:	b10b      	cbz	r3, 80208f8 <_free_r+0x4c>
 80208f4:	42a3      	cmp	r3, r4
 80208f6:	d9fa      	bls.n	80208ee <_free_r+0x42>
 80208f8:	6811      	ldr	r1, [r2, #0]
 80208fa:	1850      	adds	r0, r2, r1
 80208fc:	42a0      	cmp	r0, r4
 80208fe:	d10b      	bne.n	8020918 <_free_r+0x6c>
 8020900:	6820      	ldr	r0, [r4, #0]
 8020902:	4401      	add	r1, r0
 8020904:	1850      	adds	r0, r2, r1
 8020906:	4283      	cmp	r3, r0
 8020908:	6011      	str	r1, [r2, #0]
 802090a:	d1e0      	bne.n	80208ce <_free_r+0x22>
 802090c:	6818      	ldr	r0, [r3, #0]
 802090e:	685b      	ldr	r3, [r3, #4]
 8020910:	6053      	str	r3, [r2, #4]
 8020912:	4408      	add	r0, r1
 8020914:	6010      	str	r0, [r2, #0]
 8020916:	e7da      	b.n	80208ce <_free_r+0x22>
 8020918:	d902      	bls.n	8020920 <_free_r+0x74>
 802091a:	230c      	movs	r3, #12
 802091c:	602b      	str	r3, [r5, #0]
 802091e:	e7d6      	b.n	80208ce <_free_r+0x22>
 8020920:	6820      	ldr	r0, [r4, #0]
 8020922:	1821      	adds	r1, r4, r0
 8020924:	428b      	cmp	r3, r1
 8020926:	bf04      	itt	eq
 8020928:	6819      	ldreq	r1, [r3, #0]
 802092a:	685b      	ldreq	r3, [r3, #4]
 802092c:	6063      	str	r3, [r4, #4]
 802092e:	bf04      	itt	eq
 8020930:	1809      	addeq	r1, r1, r0
 8020932:	6021      	streq	r1, [r4, #0]
 8020934:	6054      	str	r4, [r2, #4]
 8020936:	e7ca      	b.n	80208ce <_free_r+0x22>
 8020938:	bd38      	pop	{r3, r4, r5, pc}
 802093a:	bf00      	nop
 802093c:	20001cec 	.word	0x20001cec

08020940 <__sfputc_r>:
 8020940:	6893      	ldr	r3, [r2, #8]
 8020942:	3b01      	subs	r3, #1
 8020944:	2b00      	cmp	r3, #0
 8020946:	b410      	push	{r4}
 8020948:	6093      	str	r3, [r2, #8]
 802094a:	da07      	bge.n	802095c <__sfputc_r+0x1c>
 802094c:	6994      	ldr	r4, [r2, #24]
 802094e:	42a3      	cmp	r3, r4
 8020950:	db01      	blt.n	8020956 <__sfputc_r+0x16>
 8020952:	290a      	cmp	r1, #10
 8020954:	d102      	bne.n	802095c <__sfputc_r+0x1c>
 8020956:	bc10      	pop	{r4}
 8020958:	f7ff be87 	b.w	802066a <__swbuf_r>
 802095c:	6813      	ldr	r3, [r2, #0]
 802095e:	1c58      	adds	r0, r3, #1
 8020960:	6010      	str	r0, [r2, #0]
 8020962:	7019      	strb	r1, [r3, #0]
 8020964:	4608      	mov	r0, r1
 8020966:	bc10      	pop	{r4}
 8020968:	4770      	bx	lr

0802096a <__sfputs_r>:
 802096a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802096c:	4606      	mov	r6, r0
 802096e:	460f      	mov	r7, r1
 8020970:	4614      	mov	r4, r2
 8020972:	18d5      	adds	r5, r2, r3
 8020974:	42ac      	cmp	r4, r5
 8020976:	d101      	bne.n	802097c <__sfputs_r+0x12>
 8020978:	2000      	movs	r0, #0
 802097a:	e007      	b.n	802098c <__sfputs_r+0x22>
 802097c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020980:	463a      	mov	r2, r7
 8020982:	4630      	mov	r0, r6
 8020984:	f7ff ffdc 	bl	8020940 <__sfputc_r>
 8020988:	1c43      	adds	r3, r0, #1
 802098a:	d1f3      	bne.n	8020974 <__sfputs_r+0xa>
 802098c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020990 <_vfiprintf_r>:
 8020990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020994:	460d      	mov	r5, r1
 8020996:	b09d      	sub	sp, #116	@ 0x74
 8020998:	4614      	mov	r4, r2
 802099a:	4698      	mov	r8, r3
 802099c:	4606      	mov	r6, r0
 802099e:	b118      	cbz	r0, 80209a8 <_vfiprintf_r+0x18>
 80209a0:	6a03      	ldr	r3, [r0, #32]
 80209a2:	b90b      	cbnz	r3, 80209a8 <_vfiprintf_r+0x18>
 80209a4:	f7ff fd78 	bl	8020498 <__sinit>
 80209a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209aa:	07d9      	lsls	r1, r3, #31
 80209ac:	d405      	bmi.n	80209ba <_vfiprintf_r+0x2a>
 80209ae:	89ab      	ldrh	r3, [r5, #12]
 80209b0:	059a      	lsls	r2, r3, #22
 80209b2:	d402      	bmi.n	80209ba <_vfiprintf_r+0x2a>
 80209b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80209b6:	f7ff ff76 	bl	80208a6 <__retarget_lock_acquire_recursive>
 80209ba:	89ab      	ldrh	r3, [r5, #12]
 80209bc:	071b      	lsls	r3, r3, #28
 80209be:	d501      	bpl.n	80209c4 <_vfiprintf_r+0x34>
 80209c0:	692b      	ldr	r3, [r5, #16]
 80209c2:	b99b      	cbnz	r3, 80209ec <_vfiprintf_r+0x5c>
 80209c4:	4629      	mov	r1, r5
 80209c6:	4630      	mov	r0, r6
 80209c8:	f7ff fe8e 	bl	80206e8 <__swsetup_r>
 80209cc:	b170      	cbz	r0, 80209ec <_vfiprintf_r+0x5c>
 80209ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209d0:	07dc      	lsls	r4, r3, #31
 80209d2:	d504      	bpl.n	80209de <_vfiprintf_r+0x4e>
 80209d4:	f04f 30ff 	mov.w	r0, #4294967295
 80209d8:	b01d      	add	sp, #116	@ 0x74
 80209da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209de:	89ab      	ldrh	r3, [r5, #12]
 80209e0:	0598      	lsls	r0, r3, #22
 80209e2:	d4f7      	bmi.n	80209d4 <_vfiprintf_r+0x44>
 80209e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80209e6:	f7ff ff5f 	bl	80208a8 <__retarget_lock_release_recursive>
 80209ea:	e7f3      	b.n	80209d4 <_vfiprintf_r+0x44>
 80209ec:	2300      	movs	r3, #0
 80209ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80209f0:	2320      	movs	r3, #32
 80209f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80209f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80209fa:	2330      	movs	r3, #48	@ 0x30
 80209fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020bac <_vfiprintf_r+0x21c>
 8020a00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020a04:	f04f 0901 	mov.w	r9, #1
 8020a08:	4623      	mov	r3, r4
 8020a0a:	469a      	mov	sl, r3
 8020a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a10:	b10a      	cbz	r2, 8020a16 <_vfiprintf_r+0x86>
 8020a12:	2a25      	cmp	r2, #37	@ 0x25
 8020a14:	d1f9      	bne.n	8020a0a <_vfiprintf_r+0x7a>
 8020a16:	ebba 0b04 	subs.w	fp, sl, r4
 8020a1a:	d00b      	beq.n	8020a34 <_vfiprintf_r+0xa4>
 8020a1c:	465b      	mov	r3, fp
 8020a1e:	4622      	mov	r2, r4
 8020a20:	4629      	mov	r1, r5
 8020a22:	4630      	mov	r0, r6
 8020a24:	f7ff ffa1 	bl	802096a <__sfputs_r>
 8020a28:	3001      	adds	r0, #1
 8020a2a:	f000 80a7 	beq.w	8020b7c <_vfiprintf_r+0x1ec>
 8020a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a30:	445a      	add	r2, fp
 8020a32:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a34:	f89a 3000 	ldrb.w	r3, [sl]
 8020a38:	2b00      	cmp	r3, #0
 8020a3a:	f000 809f 	beq.w	8020b7c <_vfiprintf_r+0x1ec>
 8020a3e:	2300      	movs	r3, #0
 8020a40:	f04f 32ff 	mov.w	r2, #4294967295
 8020a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020a48:	f10a 0a01 	add.w	sl, sl, #1
 8020a4c:	9304      	str	r3, [sp, #16]
 8020a4e:	9307      	str	r3, [sp, #28]
 8020a50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8020a56:	4654      	mov	r4, sl
 8020a58:	2205      	movs	r2, #5
 8020a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a5e:	4853      	ldr	r0, [pc, #332]	@ (8020bac <_vfiprintf_r+0x21c>)
 8020a60:	f7df fb96 	bl	8000190 <memchr>
 8020a64:	9a04      	ldr	r2, [sp, #16]
 8020a66:	b9d8      	cbnz	r0, 8020aa0 <_vfiprintf_r+0x110>
 8020a68:	06d1      	lsls	r1, r2, #27
 8020a6a:	bf44      	itt	mi
 8020a6c:	2320      	movmi	r3, #32
 8020a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a72:	0713      	lsls	r3, r2, #28
 8020a74:	bf44      	itt	mi
 8020a76:	232b      	movmi	r3, #43	@ 0x2b
 8020a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8020a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a82:	d015      	beq.n	8020ab0 <_vfiprintf_r+0x120>
 8020a84:	9a07      	ldr	r2, [sp, #28]
 8020a86:	4654      	mov	r4, sl
 8020a88:	2000      	movs	r0, #0
 8020a8a:	f04f 0c0a 	mov.w	ip, #10
 8020a8e:	4621      	mov	r1, r4
 8020a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020a94:	3b30      	subs	r3, #48	@ 0x30
 8020a96:	2b09      	cmp	r3, #9
 8020a98:	d94b      	bls.n	8020b32 <_vfiprintf_r+0x1a2>
 8020a9a:	b1b0      	cbz	r0, 8020aca <_vfiprintf_r+0x13a>
 8020a9c:	9207      	str	r2, [sp, #28]
 8020a9e:	e014      	b.n	8020aca <_vfiprintf_r+0x13a>
 8020aa0:	eba0 0308 	sub.w	r3, r0, r8
 8020aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8020aa8:	4313      	orrs	r3, r2
 8020aaa:	9304      	str	r3, [sp, #16]
 8020aac:	46a2      	mov	sl, r4
 8020aae:	e7d2      	b.n	8020a56 <_vfiprintf_r+0xc6>
 8020ab0:	9b03      	ldr	r3, [sp, #12]
 8020ab2:	1d19      	adds	r1, r3, #4
 8020ab4:	681b      	ldr	r3, [r3, #0]
 8020ab6:	9103      	str	r1, [sp, #12]
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	bfbb      	ittet	lt
 8020abc:	425b      	neglt	r3, r3
 8020abe:	f042 0202 	orrlt.w	r2, r2, #2
 8020ac2:	9307      	strge	r3, [sp, #28]
 8020ac4:	9307      	strlt	r3, [sp, #28]
 8020ac6:	bfb8      	it	lt
 8020ac8:	9204      	strlt	r2, [sp, #16]
 8020aca:	7823      	ldrb	r3, [r4, #0]
 8020acc:	2b2e      	cmp	r3, #46	@ 0x2e
 8020ace:	d10a      	bne.n	8020ae6 <_vfiprintf_r+0x156>
 8020ad0:	7863      	ldrb	r3, [r4, #1]
 8020ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8020ad4:	d132      	bne.n	8020b3c <_vfiprintf_r+0x1ac>
 8020ad6:	9b03      	ldr	r3, [sp, #12]
 8020ad8:	1d1a      	adds	r2, r3, #4
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	9203      	str	r2, [sp, #12]
 8020ade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020ae2:	3402      	adds	r4, #2
 8020ae4:	9305      	str	r3, [sp, #20]
 8020ae6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8020bb0 <_vfiprintf_r+0x220>
 8020aea:	7821      	ldrb	r1, [r4, #0]
 8020aec:	2203      	movs	r2, #3
 8020aee:	4650      	mov	r0, sl
 8020af0:	f7df fb4e 	bl	8000190 <memchr>
 8020af4:	b138      	cbz	r0, 8020b06 <_vfiprintf_r+0x176>
 8020af6:	9b04      	ldr	r3, [sp, #16]
 8020af8:	eba0 000a 	sub.w	r0, r0, sl
 8020afc:	2240      	movs	r2, #64	@ 0x40
 8020afe:	4082      	lsls	r2, r0
 8020b00:	4313      	orrs	r3, r2
 8020b02:	3401      	adds	r4, #1
 8020b04:	9304      	str	r3, [sp, #16]
 8020b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b0a:	482a      	ldr	r0, [pc, #168]	@ (8020bb4 <_vfiprintf_r+0x224>)
 8020b0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020b10:	2206      	movs	r2, #6
 8020b12:	f7df fb3d 	bl	8000190 <memchr>
 8020b16:	2800      	cmp	r0, #0
 8020b18:	d03f      	beq.n	8020b9a <_vfiprintf_r+0x20a>
 8020b1a:	4b27      	ldr	r3, [pc, #156]	@ (8020bb8 <_vfiprintf_r+0x228>)
 8020b1c:	bb1b      	cbnz	r3, 8020b66 <_vfiprintf_r+0x1d6>
 8020b1e:	9b03      	ldr	r3, [sp, #12]
 8020b20:	3307      	adds	r3, #7
 8020b22:	f023 0307 	bic.w	r3, r3, #7
 8020b26:	3308      	adds	r3, #8
 8020b28:	9303      	str	r3, [sp, #12]
 8020b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b2c:	443b      	add	r3, r7
 8020b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b30:	e76a      	b.n	8020a08 <_vfiprintf_r+0x78>
 8020b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8020b36:	460c      	mov	r4, r1
 8020b38:	2001      	movs	r0, #1
 8020b3a:	e7a8      	b.n	8020a8e <_vfiprintf_r+0xfe>
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	3401      	adds	r4, #1
 8020b40:	9305      	str	r3, [sp, #20]
 8020b42:	4619      	mov	r1, r3
 8020b44:	f04f 0c0a 	mov.w	ip, #10
 8020b48:	4620      	mov	r0, r4
 8020b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b4e:	3a30      	subs	r2, #48	@ 0x30
 8020b50:	2a09      	cmp	r2, #9
 8020b52:	d903      	bls.n	8020b5c <_vfiprintf_r+0x1cc>
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d0c6      	beq.n	8020ae6 <_vfiprintf_r+0x156>
 8020b58:	9105      	str	r1, [sp, #20]
 8020b5a:	e7c4      	b.n	8020ae6 <_vfiprintf_r+0x156>
 8020b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020b60:	4604      	mov	r4, r0
 8020b62:	2301      	movs	r3, #1
 8020b64:	e7f0      	b.n	8020b48 <_vfiprintf_r+0x1b8>
 8020b66:	ab03      	add	r3, sp, #12
 8020b68:	9300      	str	r3, [sp, #0]
 8020b6a:	462a      	mov	r2, r5
 8020b6c:	4b13      	ldr	r3, [pc, #76]	@ (8020bbc <_vfiprintf_r+0x22c>)
 8020b6e:	a904      	add	r1, sp, #16
 8020b70:	4630      	mov	r0, r6
 8020b72:	f3af 8000 	nop.w
 8020b76:	4607      	mov	r7, r0
 8020b78:	1c78      	adds	r0, r7, #1
 8020b7a:	d1d6      	bne.n	8020b2a <_vfiprintf_r+0x19a>
 8020b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020b7e:	07d9      	lsls	r1, r3, #31
 8020b80:	d405      	bmi.n	8020b8e <_vfiprintf_r+0x1fe>
 8020b82:	89ab      	ldrh	r3, [r5, #12]
 8020b84:	059a      	lsls	r2, r3, #22
 8020b86:	d402      	bmi.n	8020b8e <_vfiprintf_r+0x1fe>
 8020b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020b8a:	f7ff fe8d 	bl	80208a8 <__retarget_lock_release_recursive>
 8020b8e:	89ab      	ldrh	r3, [r5, #12]
 8020b90:	065b      	lsls	r3, r3, #25
 8020b92:	f53f af1f 	bmi.w	80209d4 <_vfiprintf_r+0x44>
 8020b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020b98:	e71e      	b.n	80209d8 <_vfiprintf_r+0x48>
 8020b9a:	ab03      	add	r3, sp, #12
 8020b9c:	9300      	str	r3, [sp, #0]
 8020b9e:	462a      	mov	r2, r5
 8020ba0:	4b06      	ldr	r3, [pc, #24]	@ (8020bbc <_vfiprintf_r+0x22c>)
 8020ba2:	a904      	add	r1, sp, #16
 8020ba4:	4630      	mov	r0, r6
 8020ba6:	f000 f879 	bl	8020c9c <_printf_i>
 8020baa:	e7e4      	b.n	8020b76 <_vfiprintf_r+0x1e6>
 8020bac:	080221a8 	.word	0x080221a8
 8020bb0:	080221ae 	.word	0x080221ae
 8020bb4:	080221b2 	.word	0x080221b2
 8020bb8:	00000000 	.word	0x00000000
 8020bbc:	0802096b 	.word	0x0802096b

08020bc0 <_printf_common>:
 8020bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bc4:	4616      	mov	r6, r2
 8020bc6:	4698      	mov	r8, r3
 8020bc8:	688a      	ldr	r2, [r1, #8]
 8020bca:	690b      	ldr	r3, [r1, #16]
 8020bcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020bd0:	4293      	cmp	r3, r2
 8020bd2:	bfb8      	it	lt
 8020bd4:	4613      	movlt	r3, r2
 8020bd6:	6033      	str	r3, [r6, #0]
 8020bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020bdc:	4607      	mov	r7, r0
 8020bde:	460c      	mov	r4, r1
 8020be0:	b10a      	cbz	r2, 8020be6 <_printf_common+0x26>
 8020be2:	3301      	adds	r3, #1
 8020be4:	6033      	str	r3, [r6, #0]
 8020be6:	6823      	ldr	r3, [r4, #0]
 8020be8:	0699      	lsls	r1, r3, #26
 8020bea:	bf42      	ittt	mi
 8020bec:	6833      	ldrmi	r3, [r6, #0]
 8020bee:	3302      	addmi	r3, #2
 8020bf0:	6033      	strmi	r3, [r6, #0]
 8020bf2:	6825      	ldr	r5, [r4, #0]
 8020bf4:	f015 0506 	ands.w	r5, r5, #6
 8020bf8:	d106      	bne.n	8020c08 <_printf_common+0x48>
 8020bfa:	f104 0a19 	add.w	sl, r4, #25
 8020bfe:	68e3      	ldr	r3, [r4, #12]
 8020c00:	6832      	ldr	r2, [r6, #0]
 8020c02:	1a9b      	subs	r3, r3, r2
 8020c04:	42ab      	cmp	r3, r5
 8020c06:	dc26      	bgt.n	8020c56 <_printf_common+0x96>
 8020c08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020c0c:	6822      	ldr	r2, [r4, #0]
 8020c0e:	3b00      	subs	r3, #0
 8020c10:	bf18      	it	ne
 8020c12:	2301      	movne	r3, #1
 8020c14:	0692      	lsls	r2, r2, #26
 8020c16:	d42b      	bmi.n	8020c70 <_printf_common+0xb0>
 8020c18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020c1c:	4641      	mov	r1, r8
 8020c1e:	4638      	mov	r0, r7
 8020c20:	47c8      	blx	r9
 8020c22:	3001      	adds	r0, #1
 8020c24:	d01e      	beq.n	8020c64 <_printf_common+0xa4>
 8020c26:	6823      	ldr	r3, [r4, #0]
 8020c28:	6922      	ldr	r2, [r4, #16]
 8020c2a:	f003 0306 	and.w	r3, r3, #6
 8020c2e:	2b04      	cmp	r3, #4
 8020c30:	bf02      	ittt	eq
 8020c32:	68e5      	ldreq	r5, [r4, #12]
 8020c34:	6833      	ldreq	r3, [r6, #0]
 8020c36:	1aed      	subeq	r5, r5, r3
 8020c38:	68a3      	ldr	r3, [r4, #8]
 8020c3a:	bf0c      	ite	eq
 8020c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020c40:	2500      	movne	r5, #0
 8020c42:	4293      	cmp	r3, r2
 8020c44:	bfc4      	itt	gt
 8020c46:	1a9b      	subgt	r3, r3, r2
 8020c48:	18ed      	addgt	r5, r5, r3
 8020c4a:	2600      	movs	r6, #0
 8020c4c:	341a      	adds	r4, #26
 8020c4e:	42b5      	cmp	r5, r6
 8020c50:	d11a      	bne.n	8020c88 <_printf_common+0xc8>
 8020c52:	2000      	movs	r0, #0
 8020c54:	e008      	b.n	8020c68 <_printf_common+0xa8>
 8020c56:	2301      	movs	r3, #1
 8020c58:	4652      	mov	r2, sl
 8020c5a:	4641      	mov	r1, r8
 8020c5c:	4638      	mov	r0, r7
 8020c5e:	47c8      	blx	r9
 8020c60:	3001      	adds	r0, #1
 8020c62:	d103      	bne.n	8020c6c <_printf_common+0xac>
 8020c64:	f04f 30ff 	mov.w	r0, #4294967295
 8020c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c6c:	3501      	adds	r5, #1
 8020c6e:	e7c6      	b.n	8020bfe <_printf_common+0x3e>
 8020c70:	18e1      	adds	r1, r4, r3
 8020c72:	1c5a      	adds	r2, r3, #1
 8020c74:	2030      	movs	r0, #48	@ 0x30
 8020c76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020c7a:	4422      	add	r2, r4
 8020c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020c80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020c84:	3302      	adds	r3, #2
 8020c86:	e7c7      	b.n	8020c18 <_printf_common+0x58>
 8020c88:	2301      	movs	r3, #1
 8020c8a:	4622      	mov	r2, r4
 8020c8c:	4641      	mov	r1, r8
 8020c8e:	4638      	mov	r0, r7
 8020c90:	47c8      	blx	r9
 8020c92:	3001      	adds	r0, #1
 8020c94:	d0e6      	beq.n	8020c64 <_printf_common+0xa4>
 8020c96:	3601      	adds	r6, #1
 8020c98:	e7d9      	b.n	8020c4e <_printf_common+0x8e>
	...

08020c9c <_printf_i>:
 8020c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020ca0:	7e0f      	ldrb	r7, [r1, #24]
 8020ca2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020ca4:	2f78      	cmp	r7, #120	@ 0x78
 8020ca6:	4691      	mov	r9, r2
 8020ca8:	4680      	mov	r8, r0
 8020caa:	460c      	mov	r4, r1
 8020cac:	469a      	mov	sl, r3
 8020cae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020cb2:	d807      	bhi.n	8020cc4 <_printf_i+0x28>
 8020cb4:	2f62      	cmp	r7, #98	@ 0x62
 8020cb6:	d80a      	bhi.n	8020cce <_printf_i+0x32>
 8020cb8:	2f00      	cmp	r7, #0
 8020cba:	f000 80d1 	beq.w	8020e60 <_printf_i+0x1c4>
 8020cbe:	2f58      	cmp	r7, #88	@ 0x58
 8020cc0:	f000 80b8 	beq.w	8020e34 <_printf_i+0x198>
 8020cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020cc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020ccc:	e03a      	b.n	8020d44 <_printf_i+0xa8>
 8020cce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020cd2:	2b15      	cmp	r3, #21
 8020cd4:	d8f6      	bhi.n	8020cc4 <_printf_i+0x28>
 8020cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8020cdc <_printf_i+0x40>)
 8020cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020cdc:	08020d35 	.word	0x08020d35
 8020ce0:	08020d49 	.word	0x08020d49
 8020ce4:	08020cc5 	.word	0x08020cc5
 8020ce8:	08020cc5 	.word	0x08020cc5
 8020cec:	08020cc5 	.word	0x08020cc5
 8020cf0:	08020cc5 	.word	0x08020cc5
 8020cf4:	08020d49 	.word	0x08020d49
 8020cf8:	08020cc5 	.word	0x08020cc5
 8020cfc:	08020cc5 	.word	0x08020cc5
 8020d00:	08020cc5 	.word	0x08020cc5
 8020d04:	08020cc5 	.word	0x08020cc5
 8020d08:	08020e47 	.word	0x08020e47
 8020d0c:	08020d73 	.word	0x08020d73
 8020d10:	08020e01 	.word	0x08020e01
 8020d14:	08020cc5 	.word	0x08020cc5
 8020d18:	08020cc5 	.word	0x08020cc5
 8020d1c:	08020e69 	.word	0x08020e69
 8020d20:	08020cc5 	.word	0x08020cc5
 8020d24:	08020d73 	.word	0x08020d73
 8020d28:	08020cc5 	.word	0x08020cc5
 8020d2c:	08020cc5 	.word	0x08020cc5
 8020d30:	08020e09 	.word	0x08020e09
 8020d34:	6833      	ldr	r3, [r6, #0]
 8020d36:	1d1a      	adds	r2, r3, #4
 8020d38:	681b      	ldr	r3, [r3, #0]
 8020d3a:	6032      	str	r2, [r6, #0]
 8020d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020d44:	2301      	movs	r3, #1
 8020d46:	e09c      	b.n	8020e82 <_printf_i+0x1e6>
 8020d48:	6833      	ldr	r3, [r6, #0]
 8020d4a:	6820      	ldr	r0, [r4, #0]
 8020d4c:	1d19      	adds	r1, r3, #4
 8020d4e:	6031      	str	r1, [r6, #0]
 8020d50:	0606      	lsls	r6, r0, #24
 8020d52:	d501      	bpl.n	8020d58 <_printf_i+0xbc>
 8020d54:	681d      	ldr	r5, [r3, #0]
 8020d56:	e003      	b.n	8020d60 <_printf_i+0xc4>
 8020d58:	0645      	lsls	r5, r0, #25
 8020d5a:	d5fb      	bpl.n	8020d54 <_printf_i+0xb8>
 8020d5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020d60:	2d00      	cmp	r5, #0
 8020d62:	da03      	bge.n	8020d6c <_printf_i+0xd0>
 8020d64:	232d      	movs	r3, #45	@ 0x2d
 8020d66:	426d      	negs	r5, r5
 8020d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020d6c:	4858      	ldr	r0, [pc, #352]	@ (8020ed0 <_printf_i+0x234>)
 8020d6e:	230a      	movs	r3, #10
 8020d70:	e011      	b.n	8020d96 <_printf_i+0xfa>
 8020d72:	6821      	ldr	r1, [r4, #0]
 8020d74:	6833      	ldr	r3, [r6, #0]
 8020d76:	0608      	lsls	r0, r1, #24
 8020d78:	f853 5b04 	ldr.w	r5, [r3], #4
 8020d7c:	d402      	bmi.n	8020d84 <_printf_i+0xe8>
 8020d7e:	0649      	lsls	r1, r1, #25
 8020d80:	bf48      	it	mi
 8020d82:	b2ad      	uxthmi	r5, r5
 8020d84:	2f6f      	cmp	r7, #111	@ 0x6f
 8020d86:	4852      	ldr	r0, [pc, #328]	@ (8020ed0 <_printf_i+0x234>)
 8020d88:	6033      	str	r3, [r6, #0]
 8020d8a:	bf14      	ite	ne
 8020d8c:	230a      	movne	r3, #10
 8020d8e:	2308      	moveq	r3, #8
 8020d90:	2100      	movs	r1, #0
 8020d92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020d96:	6866      	ldr	r6, [r4, #4]
 8020d98:	60a6      	str	r6, [r4, #8]
 8020d9a:	2e00      	cmp	r6, #0
 8020d9c:	db05      	blt.n	8020daa <_printf_i+0x10e>
 8020d9e:	6821      	ldr	r1, [r4, #0]
 8020da0:	432e      	orrs	r6, r5
 8020da2:	f021 0104 	bic.w	r1, r1, #4
 8020da6:	6021      	str	r1, [r4, #0]
 8020da8:	d04b      	beq.n	8020e42 <_printf_i+0x1a6>
 8020daa:	4616      	mov	r6, r2
 8020dac:	fbb5 f1f3 	udiv	r1, r5, r3
 8020db0:	fb03 5711 	mls	r7, r3, r1, r5
 8020db4:	5dc7      	ldrb	r7, [r0, r7]
 8020db6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020dba:	462f      	mov	r7, r5
 8020dbc:	42bb      	cmp	r3, r7
 8020dbe:	460d      	mov	r5, r1
 8020dc0:	d9f4      	bls.n	8020dac <_printf_i+0x110>
 8020dc2:	2b08      	cmp	r3, #8
 8020dc4:	d10b      	bne.n	8020dde <_printf_i+0x142>
 8020dc6:	6823      	ldr	r3, [r4, #0]
 8020dc8:	07df      	lsls	r7, r3, #31
 8020dca:	d508      	bpl.n	8020dde <_printf_i+0x142>
 8020dcc:	6923      	ldr	r3, [r4, #16]
 8020dce:	6861      	ldr	r1, [r4, #4]
 8020dd0:	4299      	cmp	r1, r3
 8020dd2:	bfde      	ittt	le
 8020dd4:	2330      	movle	r3, #48	@ 0x30
 8020dd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020dda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020dde:	1b92      	subs	r2, r2, r6
 8020de0:	6122      	str	r2, [r4, #16]
 8020de2:	f8cd a000 	str.w	sl, [sp]
 8020de6:	464b      	mov	r3, r9
 8020de8:	aa03      	add	r2, sp, #12
 8020dea:	4621      	mov	r1, r4
 8020dec:	4640      	mov	r0, r8
 8020dee:	f7ff fee7 	bl	8020bc0 <_printf_common>
 8020df2:	3001      	adds	r0, #1
 8020df4:	d14a      	bne.n	8020e8c <_printf_i+0x1f0>
 8020df6:	f04f 30ff 	mov.w	r0, #4294967295
 8020dfa:	b004      	add	sp, #16
 8020dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e00:	6823      	ldr	r3, [r4, #0]
 8020e02:	f043 0320 	orr.w	r3, r3, #32
 8020e06:	6023      	str	r3, [r4, #0]
 8020e08:	4832      	ldr	r0, [pc, #200]	@ (8020ed4 <_printf_i+0x238>)
 8020e0a:	2778      	movs	r7, #120	@ 0x78
 8020e0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020e10:	6823      	ldr	r3, [r4, #0]
 8020e12:	6831      	ldr	r1, [r6, #0]
 8020e14:	061f      	lsls	r7, r3, #24
 8020e16:	f851 5b04 	ldr.w	r5, [r1], #4
 8020e1a:	d402      	bmi.n	8020e22 <_printf_i+0x186>
 8020e1c:	065f      	lsls	r7, r3, #25
 8020e1e:	bf48      	it	mi
 8020e20:	b2ad      	uxthmi	r5, r5
 8020e22:	6031      	str	r1, [r6, #0]
 8020e24:	07d9      	lsls	r1, r3, #31
 8020e26:	bf44      	itt	mi
 8020e28:	f043 0320 	orrmi.w	r3, r3, #32
 8020e2c:	6023      	strmi	r3, [r4, #0]
 8020e2e:	b11d      	cbz	r5, 8020e38 <_printf_i+0x19c>
 8020e30:	2310      	movs	r3, #16
 8020e32:	e7ad      	b.n	8020d90 <_printf_i+0xf4>
 8020e34:	4826      	ldr	r0, [pc, #152]	@ (8020ed0 <_printf_i+0x234>)
 8020e36:	e7e9      	b.n	8020e0c <_printf_i+0x170>
 8020e38:	6823      	ldr	r3, [r4, #0]
 8020e3a:	f023 0320 	bic.w	r3, r3, #32
 8020e3e:	6023      	str	r3, [r4, #0]
 8020e40:	e7f6      	b.n	8020e30 <_printf_i+0x194>
 8020e42:	4616      	mov	r6, r2
 8020e44:	e7bd      	b.n	8020dc2 <_printf_i+0x126>
 8020e46:	6833      	ldr	r3, [r6, #0]
 8020e48:	6825      	ldr	r5, [r4, #0]
 8020e4a:	6961      	ldr	r1, [r4, #20]
 8020e4c:	1d18      	adds	r0, r3, #4
 8020e4e:	6030      	str	r0, [r6, #0]
 8020e50:	062e      	lsls	r6, r5, #24
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	d501      	bpl.n	8020e5a <_printf_i+0x1be>
 8020e56:	6019      	str	r1, [r3, #0]
 8020e58:	e002      	b.n	8020e60 <_printf_i+0x1c4>
 8020e5a:	0668      	lsls	r0, r5, #25
 8020e5c:	d5fb      	bpl.n	8020e56 <_printf_i+0x1ba>
 8020e5e:	8019      	strh	r1, [r3, #0]
 8020e60:	2300      	movs	r3, #0
 8020e62:	6123      	str	r3, [r4, #16]
 8020e64:	4616      	mov	r6, r2
 8020e66:	e7bc      	b.n	8020de2 <_printf_i+0x146>
 8020e68:	6833      	ldr	r3, [r6, #0]
 8020e6a:	1d1a      	adds	r2, r3, #4
 8020e6c:	6032      	str	r2, [r6, #0]
 8020e6e:	681e      	ldr	r6, [r3, #0]
 8020e70:	6862      	ldr	r2, [r4, #4]
 8020e72:	2100      	movs	r1, #0
 8020e74:	4630      	mov	r0, r6
 8020e76:	f7df f98b 	bl	8000190 <memchr>
 8020e7a:	b108      	cbz	r0, 8020e80 <_printf_i+0x1e4>
 8020e7c:	1b80      	subs	r0, r0, r6
 8020e7e:	6060      	str	r0, [r4, #4]
 8020e80:	6863      	ldr	r3, [r4, #4]
 8020e82:	6123      	str	r3, [r4, #16]
 8020e84:	2300      	movs	r3, #0
 8020e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020e8a:	e7aa      	b.n	8020de2 <_printf_i+0x146>
 8020e8c:	6923      	ldr	r3, [r4, #16]
 8020e8e:	4632      	mov	r2, r6
 8020e90:	4649      	mov	r1, r9
 8020e92:	4640      	mov	r0, r8
 8020e94:	47d0      	blx	sl
 8020e96:	3001      	adds	r0, #1
 8020e98:	d0ad      	beq.n	8020df6 <_printf_i+0x15a>
 8020e9a:	6823      	ldr	r3, [r4, #0]
 8020e9c:	079b      	lsls	r3, r3, #30
 8020e9e:	d413      	bmi.n	8020ec8 <_printf_i+0x22c>
 8020ea0:	68e0      	ldr	r0, [r4, #12]
 8020ea2:	9b03      	ldr	r3, [sp, #12]
 8020ea4:	4298      	cmp	r0, r3
 8020ea6:	bfb8      	it	lt
 8020ea8:	4618      	movlt	r0, r3
 8020eaa:	e7a6      	b.n	8020dfa <_printf_i+0x15e>
 8020eac:	2301      	movs	r3, #1
 8020eae:	4632      	mov	r2, r6
 8020eb0:	4649      	mov	r1, r9
 8020eb2:	4640      	mov	r0, r8
 8020eb4:	47d0      	blx	sl
 8020eb6:	3001      	adds	r0, #1
 8020eb8:	d09d      	beq.n	8020df6 <_printf_i+0x15a>
 8020eba:	3501      	adds	r5, #1
 8020ebc:	68e3      	ldr	r3, [r4, #12]
 8020ebe:	9903      	ldr	r1, [sp, #12]
 8020ec0:	1a5b      	subs	r3, r3, r1
 8020ec2:	42ab      	cmp	r3, r5
 8020ec4:	dcf2      	bgt.n	8020eac <_printf_i+0x210>
 8020ec6:	e7eb      	b.n	8020ea0 <_printf_i+0x204>
 8020ec8:	2500      	movs	r5, #0
 8020eca:	f104 0619 	add.w	r6, r4, #25
 8020ece:	e7f5      	b.n	8020ebc <_printf_i+0x220>
 8020ed0:	080221b9 	.word	0x080221b9
 8020ed4:	080221ca 	.word	0x080221ca

08020ed8 <__sflush_r>:
 8020ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ede:	0716      	lsls	r6, r2, #28
 8020ee0:	4605      	mov	r5, r0
 8020ee2:	460c      	mov	r4, r1
 8020ee4:	d454      	bmi.n	8020f90 <__sflush_r+0xb8>
 8020ee6:	684b      	ldr	r3, [r1, #4]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	dc02      	bgt.n	8020ef2 <__sflush_r+0x1a>
 8020eec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	dd48      	ble.n	8020f84 <__sflush_r+0xac>
 8020ef2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020ef4:	2e00      	cmp	r6, #0
 8020ef6:	d045      	beq.n	8020f84 <__sflush_r+0xac>
 8020ef8:	2300      	movs	r3, #0
 8020efa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020efe:	682f      	ldr	r7, [r5, #0]
 8020f00:	6a21      	ldr	r1, [r4, #32]
 8020f02:	602b      	str	r3, [r5, #0]
 8020f04:	d030      	beq.n	8020f68 <__sflush_r+0x90>
 8020f06:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020f08:	89a3      	ldrh	r3, [r4, #12]
 8020f0a:	0759      	lsls	r1, r3, #29
 8020f0c:	d505      	bpl.n	8020f1a <__sflush_r+0x42>
 8020f0e:	6863      	ldr	r3, [r4, #4]
 8020f10:	1ad2      	subs	r2, r2, r3
 8020f12:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020f14:	b10b      	cbz	r3, 8020f1a <__sflush_r+0x42>
 8020f16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020f18:	1ad2      	subs	r2, r2, r3
 8020f1a:	2300      	movs	r3, #0
 8020f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020f1e:	6a21      	ldr	r1, [r4, #32]
 8020f20:	4628      	mov	r0, r5
 8020f22:	47b0      	blx	r6
 8020f24:	1c43      	adds	r3, r0, #1
 8020f26:	89a3      	ldrh	r3, [r4, #12]
 8020f28:	d106      	bne.n	8020f38 <__sflush_r+0x60>
 8020f2a:	6829      	ldr	r1, [r5, #0]
 8020f2c:	291d      	cmp	r1, #29
 8020f2e:	d82b      	bhi.n	8020f88 <__sflush_r+0xb0>
 8020f30:	4a28      	ldr	r2, [pc, #160]	@ (8020fd4 <__sflush_r+0xfc>)
 8020f32:	40ca      	lsrs	r2, r1
 8020f34:	07d6      	lsls	r6, r2, #31
 8020f36:	d527      	bpl.n	8020f88 <__sflush_r+0xb0>
 8020f38:	2200      	movs	r2, #0
 8020f3a:	6062      	str	r2, [r4, #4]
 8020f3c:	04d9      	lsls	r1, r3, #19
 8020f3e:	6922      	ldr	r2, [r4, #16]
 8020f40:	6022      	str	r2, [r4, #0]
 8020f42:	d504      	bpl.n	8020f4e <__sflush_r+0x76>
 8020f44:	1c42      	adds	r2, r0, #1
 8020f46:	d101      	bne.n	8020f4c <__sflush_r+0x74>
 8020f48:	682b      	ldr	r3, [r5, #0]
 8020f4a:	b903      	cbnz	r3, 8020f4e <__sflush_r+0x76>
 8020f4c:	6560      	str	r0, [r4, #84]	@ 0x54
 8020f4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020f50:	602f      	str	r7, [r5, #0]
 8020f52:	b1b9      	cbz	r1, 8020f84 <__sflush_r+0xac>
 8020f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020f58:	4299      	cmp	r1, r3
 8020f5a:	d002      	beq.n	8020f62 <__sflush_r+0x8a>
 8020f5c:	4628      	mov	r0, r5
 8020f5e:	f7ff fca5 	bl	80208ac <_free_r>
 8020f62:	2300      	movs	r3, #0
 8020f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8020f66:	e00d      	b.n	8020f84 <__sflush_r+0xac>
 8020f68:	2301      	movs	r3, #1
 8020f6a:	4628      	mov	r0, r5
 8020f6c:	47b0      	blx	r6
 8020f6e:	4602      	mov	r2, r0
 8020f70:	1c50      	adds	r0, r2, #1
 8020f72:	d1c9      	bne.n	8020f08 <__sflush_r+0x30>
 8020f74:	682b      	ldr	r3, [r5, #0]
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	d0c6      	beq.n	8020f08 <__sflush_r+0x30>
 8020f7a:	2b1d      	cmp	r3, #29
 8020f7c:	d001      	beq.n	8020f82 <__sflush_r+0xaa>
 8020f7e:	2b16      	cmp	r3, #22
 8020f80:	d11d      	bne.n	8020fbe <__sflush_r+0xe6>
 8020f82:	602f      	str	r7, [r5, #0]
 8020f84:	2000      	movs	r0, #0
 8020f86:	e021      	b.n	8020fcc <__sflush_r+0xf4>
 8020f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020f8c:	b21b      	sxth	r3, r3
 8020f8e:	e01a      	b.n	8020fc6 <__sflush_r+0xee>
 8020f90:	690f      	ldr	r7, [r1, #16]
 8020f92:	2f00      	cmp	r7, #0
 8020f94:	d0f6      	beq.n	8020f84 <__sflush_r+0xac>
 8020f96:	0793      	lsls	r3, r2, #30
 8020f98:	680e      	ldr	r6, [r1, #0]
 8020f9a:	bf08      	it	eq
 8020f9c:	694b      	ldreq	r3, [r1, #20]
 8020f9e:	600f      	str	r7, [r1, #0]
 8020fa0:	bf18      	it	ne
 8020fa2:	2300      	movne	r3, #0
 8020fa4:	1bf6      	subs	r6, r6, r7
 8020fa6:	608b      	str	r3, [r1, #8]
 8020fa8:	2e00      	cmp	r6, #0
 8020faa:	ddeb      	ble.n	8020f84 <__sflush_r+0xac>
 8020fac:	6a21      	ldr	r1, [r4, #32]
 8020fae:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8020fb2:	4633      	mov	r3, r6
 8020fb4:	463a      	mov	r2, r7
 8020fb6:	4628      	mov	r0, r5
 8020fb8:	47e0      	blx	ip
 8020fba:	2800      	cmp	r0, #0
 8020fbc:	dc07      	bgt.n	8020fce <__sflush_r+0xf6>
 8020fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020fc6:	81a3      	strh	r3, [r4, #12]
 8020fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8020fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020fce:	4407      	add	r7, r0
 8020fd0:	1a36      	subs	r6, r6, r0
 8020fd2:	e7e9      	b.n	8020fa8 <__sflush_r+0xd0>
 8020fd4:	20400001 	.word	0x20400001

08020fd8 <_fflush_r>:
 8020fd8:	b538      	push	{r3, r4, r5, lr}
 8020fda:	690b      	ldr	r3, [r1, #16]
 8020fdc:	4605      	mov	r5, r0
 8020fde:	460c      	mov	r4, r1
 8020fe0:	b913      	cbnz	r3, 8020fe8 <_fflush_r+0x10>
 8020fe2:	2500      	movs	r5, #0
 8020fe4:	4628      	mov	r0, r5
 8020fe6:	bd38      	pop	{r3, r4, r5, pc}
 8020fe8:	b118      	cbz	r0, 8020ff2 <_fflush_r+0x1a>
 8020fea:	6a03      	ldr	r3, [r0, #32]
 8020fec:	b90b      	cbnz	r3, 8020ff2 <_fflush_r+0x1a>
 8020fee:	f7ff fa53 	bl	8020498 <__sinit>
 8020ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d0f3      	beq.n	8020fe2 <_fflush_r+0xa>
 8020ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020ffc:	07d0      	lsls	r0, r2, #31
 8020ffe:	d404      	bmi.n	802100a <_fflush_r+0x32>
 8021000:	0599      	lsls	r1, r3, #22
 8021002:	d402      	bmi.n	802100a <_fflush_r+0x32>
 8021004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021006:	f7ff fc4e 	bl	80208a6 <__retarget_lock_acquire_recursive>
 802100a:	4628      	mov	r0, r5
 802100c:	4621      	mov	r1, r4
 802100e:	f7ff ff63 	bl	8020ed8 <__sflush_r>
 8021012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021014:	07da      	lsls	r2, r3, #31
 8021016:	4605      	mov	r5, r0
 8021018:	d4e4      	bmi.n	8020fe4 <_fflush_r+0xc>
 802101a:	89a3      	ldrh	r3, [r4, #12]
 802101c:	059b      	lsls	r3, r3, #22
 802101e:	d4e1      	bmi.n	8020fe4 <_fflush_r+0xc>
 8021020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021022:	f7ff fc41 	bl	80208a8 <__retarget_lock_release_recursive>
 8021026:	e7dd      	b.n	8020fe4 <_fflush_r+0xc>

08021028 <__swhatbuf_r>:
 8021028:	b570      	push	{r4, r5, r6, lr}
 802102a:	460c      	mov	r4, r1
 802102c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021030:	2900      	cmp	r1, #0
 8021032:	b096      	sub	sp, #88	@ 0x58
 8021034:	4615      	mov	r5, r2
 8021036:	461e      	mov	r6, r3
 8021038:	da0d      	bge.n	8021056 <__swhatbuf_r+0x2e>
 802103a:	89a3      	ldrh	r3, [r4, #12]
 802103c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021040:	f04f 0100 	mov.w	r1, #0
 8021044:	bf14      	ite	ne
 8021046:	2340      	movne	r3, #64	@ 0x40
 8021048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802104c:	2000      	movs	r0, #0
 802104e:	6031      	str	r1, [r6, #0]
 8021050:	602b      	str	r3, [r5, #0]
 8021052:	b016      	add	sp, #88	@ 0x58
 8021054:	bd70      	pop	{r4, r5, r6, pc}
 8021056:	466a      	mov	r2, sp
 8021058:	f000 f848 	bl	80210ec <_fstat_r>
 802105c:	2800      	cmp	r0, #0
 802105e:	dbec      	blt.n	802103a <__swhatbuf_r+0x12>
 8021060:	9901      	ldr	r1, [sp, #4]
 8021062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802106a:	4259      	negs	r1, r3
 802106c:	4159      	adcs	r1, r3
 802106e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021072:	e7eb      	b.n	802104c <__swhatbuf_r+0x24>

08021074 <__smakebuf_r>:
 8021074:	898b      	ldrh	r3, [r1, #12]
 8021076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021078:	079d      	lsls	r5, r3, #30
 802107a:	4606      	mov	r6, r0
 802107c:	460c      	mov	r4, r1
 802107e:	d507      	bpl.n	8021090 <__smakebuf_r+0x1c>
 8021080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021084:	6023      	str	r3, [r4, #0]
 8021086:	6123      	str	r3, [r4, #16]
 8021088:	2301      	movs	r3, #1
 802108a:	6163      	str	r3, [r4, #20]
 802108c:	b003      	add	sp, #12
 802108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021090:	ab01      	add	r3, sp, #4
 8021092:	466a      	mov	r2, sp
 8021094:	f7ff ffc8 	bl	8021028 <__swhatbuf_r>
 8021098:	9f00      	ldr	r7, [sp, #0]
 802109a:	4605      	mov	r5, r0
 802109c:	4639      	mov	r1, r7
 802109e:	4630      	mov	r0, r6
 80210a0:	f7ff f8e2 	bl	8020268 <_malloc_r>
 80210a4:	b948      	cbnz	r0, 80210ba <__smakebuf_r+0x46>
 80210a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210aa:	059a      	lsls	r2, r3, #22
 80210ac:	d4ee      	bmi.n	802108c <__smakebuf_r+0x18>
 80210ae:	f023 0303 	bic.w	r3, r3, #3
 80210b2:	f043 0302 	orr.w	r3, r3, #2
 80210b6:	81a3      	strh	r3, [r4, #12]
 80210b8:	e7e2      	b.n	8021080 <__smakebuf_r+0xc>
 80210ba:	89a3      	ldrh	r3, [r4, #12]
 80210bc:	6020      	str	r0, [r4, #0]
 80210be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80210c2:	81a3      	strh	r3, [r4, #12]
 80210c4:	9b01      	ldr	r3, [sp, #4]
 80210c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80210ca:	b15b      	cbz	r3, 80210e4 <__smakebuf_r+0x70>
 80210cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80210d0:	4630      	mov	r0, r6
 80210d2:	f000 f81d 	bl	8021110 <_isatty_r>
 80210d6:	b128      	cbz	r0, 80210e4 <__smakebuf_r+0x70>
 80210d8:	89a3      	ldrh	r3, [r4, #12]
 80210da:	f023 0303 	bic.w	r3, r3, #3
 80210de:	f043 0301 	orr.w	r3, r3, #1
 80210e2:	81a3      	strh	r3, [r4, #12]
 80210e4:	89a3      	ldrh	r3, [r4, #12]
 80210e6:	431d      	orrs	r5, r3
 80210e8:	81a5      	strh	r5, [r4, #12]
 80210ea:	e7cf      	b.n	802108c <__smakebuf_r+0x18>

080210ec <_fstat_r>:
 80210ec:	b538      	push	{r3, r4, r5, lr}
 80210ee:	4d07      	ldr	r5, [pc, #28]	@ (802110c <_fstat_r+0x20>)
 80210f0:	2300      	movs	r3, #0
 80210f2:	4604      	mov	r4, r0
 80210f4:	4608      	mov	r0, r1
 80210f6:	4611      	mov	r1, r2
 80210f8:	602b      	str	r3, [r5, #0]
 80210fa:	f7e0 fc6f 	bl	80019dc <_fstat>
 80210fe:	1c43      	adds	r3, r0, #1
 8021100:	d102      	bne.n	8021108 <_fstat_r+0x1c>
 8021102:	682b      	ldr	r3, [r5, #0]
 8021104:	b103      	cbz	r3, 8021108 <_fstat_r+0x1c>
 8021106:	6023      	str	r3, [r4, #0]
 8021108:	bd38      	pop	{r3, r4, r5, pc}
 802110a:	bf00      	nop
 802110c:	20001e2c 	.word	0x20001e2c

08021110 <_isatty_r>:
 8021110:	b538      	push	{r3, r4, r5, lr}
 8021112:	4d06      	ldr	r5, [pc, #24]	@ (802112c <_isatty_r+0x1c>)
 8021114:	2300      	movs	r3, #0
 8021116:	4604      	mov	r4, r0
 8021118:	4608      	mov	r0, r1
 802111a:	602b      	str	r3, [r5, #0]
 802111c:	f7e0 fc6d 	bl	80019fa <_isatty>
 8021120:	1c43      	adds	r3, r0, #1
 8021122:	d102      	bne.n	802112a <_isatty_r+0x1a>
 8021124:	682b      	ldr	r3, [r5, #0]
 8021126:	b103      	cbz	r3, 802112a <_isatty_r+0x1a>
 8021128:	6023      	str	r3, [r4, #0]
 802112a:	bd38      	pop	{r3, r4, r5, pc}
 802112c:	20001e2c 	.word	0x20001e2c

08021130 <expf>:
 8021130:	b538      	push	{r3, r4, r5, lr}
 8021132:	4605      	mov	r5, r0
 8021134:	f000 f8c8 	bl	80212c8 <__ieee754_expf>
 8021138:	4604      	mov	r4, r0
 802113a:	4628      	mov	r0, r5
 802113c:	f000 f81e 	bl	802117c <finitef>
 8021140:	b150      	cbz	r0, 8021158 <expf+0x28>
 8021142:	490c      	ldr	r1, [pc, #48]	@ (8021174 <expf+0x44>)
 8021144:	4628      	mov	r0, r5
 8021146:	f7df fda9 	bl	8000c9c <__aeabi_fcmpgt>
 802114a:	b138      	cbz	r0, 802115c <expf+0x2c>
 802114c:	f7ff fb80 	bl	8020850 <__errno>
 8021150:	2322      	movs	r3, #34	@ 0x22
 8021152:	6003      	str	r3, [r0, #0]
 8021154:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 8021158:	4620      	mov	r0, r4
 802115a:	bd38      	pop	{r3, r4, r5, pc}
 802115c:	4906      	ldr	r1, [pc, #24]	@ (8021178 <expf+0x48>)
 802115e:	4628      	mov	r0, r5
 8021160:	f7df fd7e 	bl	8000c60 <__aeabi_fcmplt>
 8021164:	2800      	cmp	r0, #0
 8021166:	d0f7      	beq.n	8021158 <expf+0x28>
 8021168:	f7ff fb72 	bl	8020850 <__errno>
 802116c:	2322      	movs	r3, #34	@ 0x22
 802116e:	6003      	str	r3, [r0, #0]
 8021170:	2400      	movs	r4, #0
 8021172:	e7f1      	b.n	8021158 <expf+0x28>
 8021174:	42b17217 	.word	0x42b17217
 8021178:	c2cff1b5 	.word	0xc2cff1b5

0802117c <finitef>:
 802117c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021180:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8021184:	bfac      	ite	ge
 8021186:	2000      	movge	r0, #0
 8021188:	2001      	movlt	r0, #1
 802118a:	4770      	bx	lr

0802118c <with_errnof>:
 802118c:	b538      	push	{r3, r4, r5, lr}
 802118e:	4604      	mov	r4, r0
 8021190:	460d      	mov	r5, r1
 8021192:	f7ff fb5d 	bl	8020850 <__errno>
 8021196:	6005      	str	r5, [r0, #0]
 8021198:	4620      	mov	r0, r4
 802119a:	bd38      	pop	{r3, r4, r5, pc}

0802119c <xflowf>:
 802119c:	b508      	push	{r3, lr}
 802119e:	b140      	cbz	r0, 80211b2 <xflowf+0x16>
 80211a0:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80211a4:	f7df fbbe 	bl	8000924 <__aeabi_fmul>
 80211a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80211ac:	2122      	movs	r1, #34	@ 0x22
 80211ae:	f7ff bfed 	b.w	802118c <with_errnof>
 80211b2:	4608      	mov	r0, r1
 80211b4:	e7f6      	b.n	80211a4 <xflowf+0x8>

080211b6 <__math_uflowf>:
 80211b6:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80211ba:	f7ff bfef 	b.w	802119c <xflowf>

080211be <__math_oflowf>:
 80211be:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80211c2:	f7ff bfeb 	b.w	802119c <xflowf>
	...

080211c8 <floor>:
 80211c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80211cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80211d0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80211d4:	2e13      	cmp	r6, #19
 80211d6:	4602      	mov	r2, r0
 80211d8:	460b      	mov	r3, r1
 80211da:	460c      	mov	r4, r1
 80211dc:	4605      	mov	r5, r0
 80211de:	4680      	mov	r8, r0
 80211e0:	dc35      	bgt.n	802124e <floor+0x86>
 80211e2:	2e00      	cmp	r6, #0
 80211e4:	da17      	bge.n	8021216 <floor+0x4e>
 80211e6:	a334      	add	r3, pc, #208	@ (adr r3, 80212b8 <floor+0xf0>)
 80211e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211ec:	f7df f826 	bl	800023c <__adddf3>
 80211f0:	2200      	movs	r2, #0
 80211f2:	2300      	movs	r3, #0
 80211f4:	f7df fa56 	bl	80006a4 <__aeabi_dcmpgt>
 80211f8:	b150      	cbz	r0, 8021210 <floor+0x48>
 80211fa:	2c00      	cmp	r4, #0
 80211fc:	da57      	bge.n	80212ae <floor+0xe6>
 80211fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8021202:	432c      	orrs	r4, r5
 8021204:	2500      	movs	r5, #0
 8021206:	42ac      	cmp	r4, r5
 8021208:	4c2d      	ldr	r4, [pc, #180]	@ (80212c0 <floor+0xf8>)
 802120a:	bf08      	it	eq
 802120c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8021210:	4623      	mov	r3, r4
 8021212:	462a      	mov	r2, r5
 8021214:	e024      	b.n	8021260 <floor+0x98>
 8021216:	4f2b      	ldr	r7, [pc, #172]	@ (80212c4 <floor+0xfc>)
 8021218:	4137      	asrs	r7, r6
 802121a:	ea01 0c07 	and.w	ip, r1, r7
 802121e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8021222:	d01d      	beq.n	8021260 <floor+0x98>
 8021224:	a324      	add	r3, pc, #144	@ (adr r3, 80212b8 <floor+0xf0>)
 8021226:	e9d3 2300 	ldrd	r2, r3, [r3]
 802122a:	f7df f807 	bl	800023c <__adddf3>
 802122e:	2200      	movs	r2, #0
 8021230:	2300      	movs	r3, #0
 8021232:	f7df fa37 	bl	80006a4 <__aeabi_dcmpgt>
 8021236:	2800      	cmp	r0, #0
 8021238:	d0ea      	beq.n	8021210 <floor+0x48>
 802123a:	2c00      	cmp	r4, #0
 802123c:	bfbe      	ittt	lt
 802123e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8021242:	4133      	asrlt	r3, r6
 8021244:	18e4      	addlt	r4, r4, r3
 8021246:	ea24 0407 	bic.w	r4, r4, r7
 802124a:	2500      	movs	r5, #0
 802124c:	e7e0      	b.n	8021210 <floor+0x48>
 802124e:	2e33      	cmp	r6, #51	@ 0x33
 8021250:	dd0a      	ble.n	8021268 <floor+0xa0>
 8021252:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021256:	d103      	bne.n	8021260 <floor+0x98>
 8021258:	f7de fff0 	bl	800023c <__adddf3>
 802125c:	4602      	mov	r2, r0
 802125e:	460b      	mov	r3, r1
 8021260:	4610      	mov	r0, r2
 8021262:	4619      	mov	r1, r3
 8021264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021268:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 802126c:	f04f 3cff 	mov.w	ip, #4294967295
 8021270:	fa2c f707 	lsr.w	r7, ip, r7
 8021274:	4207      	tst	r7, r0
 8021276:	d0f3      	beq.n	8021260 <floor+0x98>
 8021278:	a30f      	add	r3, pc, #60	@ (adr r3, 80212b8 <floor+0xf0>)
 802127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802127e:	f7de ffdd 	bl	800023c <__adddf3>
 8021282:	2200      	movs	r2, #0
 8021284:	2300      	movs	r3, #0
 8021286:	f7df fa0d 	bl	80006a4 <__aeabi_dcmpgt>
 802128a:	2800      	cmp	r0, #0
 802128c:	d0c0      	beq.n	8021210 <floor+0x48>
 802128e:	2c00      	cmp	r4, #0
 8021290:	da0a      	bge.n	80212a8 <floor+0xe0>
 8021292:	2e14      	cmp	r6, #20
 8021294:	d101      	bne.n	802129a <floor+0xd2>
 8021296:	3401      	adds	r4, #1
 8021298:	e006      	b.n	80212a8 <floor+0xe0>
 802129a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802129e:	2301      	movs	r3, #1
 80212a0:	40b3      	lsls	r3, r6
 80212a2:	441d      	add	r5, r3
 80212a4:	4545      	cmp	r5, r8
 80212a6:	d3f6      	bcc.n	8021296 <floor+0xce>
 80212a8:	ea25 0507 	bic.w	r5, r5, r7
 80212ac:	e7b0      	b.n	8021210 <floor+0x48>
 80212ae:	2500      	movs	r5, #0
 80212b0:	462c      	mov	r4, r5
 80212b2:	e7ad      	b.n	8021210 <floor+0x48>
 80212b4:	f3af 8000 	nop.w
 80212b8:	8800759c 	.word	0x8800759c
 80212bc:	7e37e43c 	.word	0x7e37e43c
 80212c0:	bff00000 	.word	0xbff00000
 80212c4:	000fffff 	.word	0x000fffff

080212c8 <__ieee754_expf>:
 80212c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80212d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80212d4:	4604      	mov	r4, r0
 80212d6:	d904      	bls.n	80212e2 <__ieee754_expf+0x1a>
 80212d8:	4601      	mov	r1, r0
 80212da:	f7df fa1b 	bl	8000714 <__addsf3>
 80212de:	4604      	mov	r4, r0
 80212e0:	e005      	b.n	80212ee <__ieee754_expf+0x26>
 80212e2:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 80212e6:	d105      	bne.n	80212f4 <__ieee754_expf+0x2c>
 80212e8:	2e00      	cmp	r6, #0
 80212ea:	f040 80c3 	bne.w	8021474 <__ieee754_expf+0x1ac>
 80212ee:	4620      	mov	r0, r4
 80212f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212f4:	4960      	ldr	r1, [pc, #384]	@ (8021478 <__ieee754_expf+0x1b0>)
 80212f6:	4288      	cmp	r0, r1
 80212f8:	dd04      	ble.n	8021304 <__ieee754_expf+0x3c>
 80212fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212fe:	2000      	movs	r0, #0
 8021300:	f7ff bf5d 	b.w	80211be <__math_oflowf>
 8021304:	2800      	cmp	r0, #0
 8021306:	da07      	bge.n	8021318 <__ieee754_expf+0x50>
 8021308:	4a5c      	ldr	r2, [pc, #368]	@ (802147c <__ieee754_expf+0x1b4>)
 802130a:	4293      	cmp	r3, r2
 802130c:	d904      	bls.n	8021318 <__ieee754_expf+0x50>
 802130e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021312:	2000      	movs	r0, #0
 8021314:	f7ff bf4f 	b.w	80211b6 <__math_uflowf>
 8021318:	4a59      	ldr	r2, [pc, #356]	@ (8021480 <__ieee754_expf+0x1b8>)
 802131a:	4293      	cmp	r3, r2
 802131c:	d971      	bls.n	8021402 <__ieee754_expf+0x13a>
 802131e:	4a59      	ldr	r2, [pc, #356]	@ (8021484 <__ieee754_expf+0x1bc>)
 8021320:	4293      	cmp	r3, r2
 8021322:	d851      	bhi.n	80213c8 <__ieee754_expf+0x100>
 8021324:	4b58      	ldr	r3, [pc, #352]	@ (8021488 <__ieee754_expf+0x1c0>)
 8021326:	4620      	mov	r0, r4
 8021328:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 802132c:	f7df f9f0 	bl	8000710 <__aeabi_fsub>
 8021330:	4b56      	ldr	r3, [pc, #344]	@ (802148c <__ieee754_expf+0x1c4>)
 8021332:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8021336:	f086 0301 	eor.w	r3, r6, #1
 802133a:	4605      	mov	r5, r0
 802133c:	eba3 0806 	sub.w	r8, r3, r6
 8021340:	4639      	mov	r1, r7
 8021342:	4628      	mov	r0, r5
 8021344:	f7df f9e4 	bl	8000710 <__aeabi_fsub>
 8021348:	4604      	mov	r4, r0
 802134a:	4621      	mov	r1, r4
 802134c:	4620      	mov	r0, r4
 802134e:	f7df fae9 	bl	8000924 <__aeabi_fmul>
 8021352:	494f      	ldr	r1, [pc, #316]	@ (8021490 <__ieee754_expf+0x1c8>)
 8021354:	4606      	mov	r6, r0
 8021356:	f7df fae5 	bl	8000924 <__aeabi_fmul>
 802135a:	494e      	ldr	r1, [pc, #312]	@ (8021494 <__ieee754_expf+0x1cc>)
 802135c:	f7df f9d8 	bl	8000710 <__aeabi_fsub>
 8021360:	4631      	mov	r1, r6
 8021362:	f7df fadf 	bl	8000924 <__aeabi_fmul>
 8021366:	494c      	ldr	r1, [pc, #304]	@ (8021498 <__ieee754_expf+0x1d0>)
 8021368:	f7df f9d4 	bl	8000714 <__addsf3>
 802136c:	4631      	mov	r1, r6
 802136e:	f7df fad9 	bl	8000924 <__aeabi_fmul>
 8021372:	494a      	ldr	r1, [pc, #296]	@ (802149c <__ieee754_expf+0x1d4>)
 8021374:	f7df f9cc 	bl	8000710 <__aeabi_fsub>
 8021378:	4631      	mov	r1, r6
 802137a:	f7df fad3 	bl	8000924 <__aeabi_fmul>
 802137e:	4948      	ldr	r1, [pc, #288]	@ (80214a0 <__ieee754_expf+0x1d8>)
 8021380:	f7df f9c8 	bl	8000714 <__addsf3>
 8021384:	4631      	mov	r1, r6
 8021386:	f7df facd 	bl	8000924 <__aeabi_fmul>
 802138a:	4601      	mov	r1, r0
 802138c:	4620      	mov	r0, r4
 802138e:	f7df f9bf 	bl	8000710 <__aeabi_fsub>
 8021392:	4601      	mov	r1, r0
 8021394:	4606      	mov	r6, r0
 8021396:	4620      	mov	r0, r4
 8021398:	f7df fac4 	bl	8000924 <__aeabi_fmul>
 802139c:	4681      	mov	r9, r0
 802139e:	f1b8 0f00 	cmp.w	r8, #0
 80213a2:	d143      	bne.n	802142c <__ieee754_expf+0x164>
 80213a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80213a8:	4630      	mov	r0, r6
 80213aa:	f7df f9b1 	bl	8000710 <__aeabi_fsub>
 80213ae:	4601      	mov	r1, r0
 80213b0:	4648      	mov	r0, r9
 80213b2:	f7df fb6b 	bl	8000a8c <__aeabi_fdiv>
 80213b6:	4621      	mov	r1, r4
 80213b8:	f7df f9aa 	bl	8000710 <__aeabi_fsub>
 80213bc:	4601      	mov	r1, r0
 80213be:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80213c2:	f7df f9a5 	bl	8000710 <__aeabi_fsub>
 80213c6:	e78a      	b.n	80212de <__ieee754_expf+0x16>
 80213c8:	4936      	ldr	r1, [pc, #216]	@ (80214a4 <__ieee754_expf+0x1dc>)
 80213ca:	4620      	mov	r0, r4
 80213cc:	f7df faaa 	bl	8000924 <__aeabi_fmul>
 80213d0:	4b35      	ldr	r3, [pc, #212]	@ (80214a8 <__ieee754_expf+0x1e0>)
 80213d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80213d6:	f7df f99d 	bl	8000714 <__addsf3>
 80213da:	f7df fc69 	bl	8000cb0 <__aeabi_f2iz>
 80213de:	4680      	mov	r8, r0
 80213e0:	f7df fa4c 	bl	800087c <__aeabi_i2f>
 80213e4:	4931      	ldr	r1, [pc, #196]	@ (80214ac <__ieee754_expf+0x1e4>)
 80213e6:	4606      	mov	r6, r0
 80213e8:	f7df fa9c 	bl	8000924 <__aeabi_fmul>
 80213ec:	4601      	mov	r1, r0
 80213ee:	4620      	mov	r0, r4
 80213f0:	f7df f98e 	bl	8000710 <__aeabi_fsub>
 80213f4:	492e      	ldr	r1, [pc, #184]	@ (80214b0 <__ieee754_expf+0x1e8>)
 80213f6:	4605      	mov	r5, r0
 80213f8:	4630      	mov	r0, r6
 80213fa:	f7df fa93 	bl	8000924 <__aeabi_fmul>
 80213fe:	4607      	mov	r7, r0
 8021400:	e79e      	b.n	8021340 <__ieee754_expf+0x78>
 8021402:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8021406:	d20c      	bcs.n	8021422 <__ieee754_expf+0x15a>
 8021408:	492a      	ldr	r1, [pc, #168]	@ (80214b4 <__ieee754_expf+0x1ec>)
 802140a:	4620      	mov	r0, r4
 802140c:	f7df f982 	bl	8000714 <__addsf3>
 8021410:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8021414:	f7df fc42 	bl	8000c9c <__aeabi_fcmpgt>
 8021418:	b130      	cbz	r0, 8021428 <__ieee754_expf+0x160>
 802141a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 802141e:	4620      	mov	r0, r4
 8021420:	e75b      	b.n	80212da <__ieee754_expf+0x12>
 8021422:	f04f 0800 	mov.w	r8, #0
 8021426:	e790      	b.n	802134a <__ieee754_expf+0x82>
 8021428:	4680      	mov	r8, r0
 802142a:	e78e      	b.n	802134a <__ieee754_expf+0x82>
 802142c:	4631      	mov	r1, r6
 802142e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8021432:	f7df f96d 	bl	8000710 <__aeabi_fsub>
 8021436:	4601      	mov	r1, r0
 8021438:	4648      	mov	r0, r9
 802143a:	f7df fb27 	bl	8000a8c <__aeabi_fdiv>
 802143e:	4601      	mov	r1, r0
 8021440:	4638      	mov	r0, r7
 8021442:	f7df f965 	bl	8000710 <__aeabi_fsub>
 8021446:	4629      	mov	r1, r5
 8021448:	f7df f962 	bl	8000710 <__aeabi_fsub>
 802144c:	4601      	mov	r1, r0
 802144e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8021452:	f7df f95d 	bl	8000710 <__aeabi_fsub>
 8021456:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 802145a:	db02      	blt.n	8021462 <__ieee754_expf+0x19a>
 802145c:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 8021460:	e745      	b.n	80212ee <__ieee754_expf+0x26>
 8021462:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 8021466:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 802146a:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 802146e:	f7df fa59 	bl	8000924 <__aeabi_fmul>
 8021472:	e734      	b.n	80212de <__ieee754_expf+0x16>
 8021474:	2400      	movs	r4, #0
 8021476:	e73a      	b.n	80212ee <__ieee754_expf+0x26>
 8021478:	42b17217 	.word	0x42b17217
 802147c:	42cff1b5 	.word	0x42cff1b5
 8021480:	3eb17218 	.word	0x3eb17218
 8021484:	3f851591 	.word	0x3f851591
 8021488:	080221e4 	.word	0x080221e4
 802148c:	080221dc 	.word	0x080221dc
 8021490:	3331bb4c 	.word	0x3331bb4c
 8021494:	35ddea0e 	.word	0x35ddea0e
 8021498:	388ab355 	.word	0x388ab355
 802149c:	3b360b61 	.word	0x3b360b61
 80214a0:	3e2aaaab 	.word	0x3e2aaaab
 80214a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80214a8:	080221ec 	.word	0x080221ec
 80214ac:	3f317180 	.word	0x3f317180
 80214b0:	3717f7d1 	.word	0x3717f7d1
 80214b4:	7149f2ca 	.word	0x7149f2ca

080214b8 <_init>:
 80214b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214ba:	bf00      	nop
 80214bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214be:	bc08      	pop	{r3}
 80214c0:	469e      	mov	lr, r3
 80214c2:	4770      	bx	lr

080214c4 <_fini>:
 80214c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214c6:	bf00      	nop
 80214c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214ca:	bc08      	pop	{r3}
 80214cc:	469e      	mov	lr, r3
 80214ce:	4770      	bx	lr
