
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ffe8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  08020140  08020140  00021140  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020e18  08020e18  000235d8  2**0
                  CONTENTS
  4 .ARM          00000008  08020e18  08020e18  00021e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020e20  08020e20  000235d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020e20  08020e20  00021e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020e28  08020e28  00021e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00023500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000698  20000000  08020e30  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .AI_SRAM1     0000002c  200006a0  080214c8  000226a0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 LW_NVM_RAM    00000b98  20008000  20008000  00024000  2**2
                  ALLOC
 12 .bss          00001704  200006cc  200006cc  000236cc  2**2
                  ALLOC
 13 RAM1_region   00000000  20001dd0  20001dd0  000235d8  2**0
                  CONTENTS
 14 RAM2_region   00000000  20009000  20009000  000235d8  2**0
                  CONTENTS
 15 ._user_heap_stack 00000a00  20001dd0  20001dd0  000236cc  2**0
                  ALLOC
 16 .ARM.attributes 0000002a  00000000  00000000  000235d8  2**0
                  CONTENTS, READONLY
 17 .debug_info   0004abcf  00000000  00000000  00023602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000ae13  00000000  00000000  0006e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003868  00000000  00000000  00078fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002ae6  00000000  00000000  0007c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00016ce1  00000000  00000000  0007f336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004ecce  00000000  00000000  00096017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f6072  00000000  00000000  000e4ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000086  00000000  00000000  001dad57  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f228  00000000  00000000  001dade0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000b0  00000000  00000000  001ea008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006cc 	.word	0x200006cc
 800015c:	00000000 	.word	0x00000000
 8000160:	08020110 	.word	0x08020110

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006d0 	.word	0x200006d0
 800017c:	08020110 	.word	0x08020110

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000976:	2afd      	cmp	r2, #253	@ 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	@ 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	@ 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	@ 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__gesf2>:
 8000bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__lesf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	e002      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bd2:	bf00      	nop

08000bd4 <__cmpsf2>:
 8000bd4:	f04f 0c01 	mov.w	ip, #1
 8000bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d011      	beq.n	8000c14 <__cmpsf2+0x40>
 8000bf0:	b001      	add	sp, #4
 8000bf2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bf6:	bf18      	it	ne
 8000bf8:	ea90 0f01 	teqne	r0, r1
 8000bfc:	bf58      	it	pl
 8000bfe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c02:	bf88      	it	hi
 8000c04:	17c8      	asrhi	r0, r1, #31
 8000c06:	bf38      	it	cc
 8000c08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c0c:	bf18      	it	ne
 8000c0e:	f040 0001 	orrne.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	d102      	bne.n	8000c20 <__cmpsf2+0x4c>
 8000c1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1e:	d105      	bne.n	8000c2c <__cmpsf2+0x58>
 8000c20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c24:	d1e4      	bne.n	8000bf0 <__cmpsf2+0x1c>
 8000c26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c2a:	d0e1      	beq.n	8000bf0 <__cmpsf2+0x1c>
 8000c2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_cfrcmple>:
 8000c34:	4684      	mov	ip, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4661      	mov	r1, ip
 8000c3a:	e7ff      	b.n	8000c3c <__aeabi_cfcmpeq>

08000c3c <__aeabi_cfcmpeq>:
 8000c3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c3e:	f7ff ffc9 	bl	8000bd4 <__cmpsf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	bf48      	it	mi
 8000c46:	f110 0f00 	cmnmi.w	r0, #0
 8000c4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c4c <__aeabi_fcmpeq>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff fff4 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fcmplt>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff ffea 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c68:	bf34      	ite	cc
 8000c6a:	2001      	movcc	r0, #1
 8000c6c:	2000      	movcs	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmple>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffe0 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c7c:	bf94      	ite	ls
 8000c7e:	2001      	movls	r0, #1
 8000c80:	2000      	movhi	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmpge>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffd2 	bl	8000c34 <__aeabi_cfrcmple>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpgt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffc8 	bl	8000c34 <__aeabi_cfrcmple>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_f2iz>:
 8000cb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cb8:	d30f      	bcc.n	8000cda <__aeabi_f2iz+0x2a>
 8000cba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc2:	d90d      	bls.n	8000ce0 <__aeabi_f2iz+0x30>
 8000cc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ccc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd4:	bf18      	it	ne
 8000cd6:	4240      	negne	r0, r0
 8000cd8:	4770      	bx	lr
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	4770      	bx	lr
 8000ce0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ce4:	d101      	bne.n	8000cea <__aeabi_f2iz+0x3a>
 8000ce6:	0242      	lsls	r2, r0, #9
 8000ce8:	d105      	bne.n	8000cf6 <__aeabi_f2iz+0x46>
 8000cea:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_f2uiz>:
 8000cfc:	0042      	lsls	r2, r0, #1
 8000cfe:	d20e      	bcs.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d00:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d04:	d30b      	bcc.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d06:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d0e:	d409      	bmi.n	8000d24 <__aeabi_f2uiz+0x28>
 8000d10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d18:	fa23 f002 	lsr.w	r0, r3, r2
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr
 8000d24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d28:	d101      	bne.n	8000d2e <__aeabi_f2uiz+0x32>
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	d102      	bne.n	8000d34 <__aeabi_f2uiz+0x38>
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	4770      	bx	lr
 8000d34:	f04f 0000 	mov.w	r0, #0
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b988 	b.w	8001064 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f806 	bl	8000d6c <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__udivmoddi4>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	9d08      	ldr	r5, [sp, #32]
 8000d72:	468e      	mov	lr, r1
 8000d74:	4604      	mov	r4, r0
 8000d76:	4688      	mov	r8, r1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d14a      	bne.n	8000e12 <__udivmoddi4+0xa6>
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	d962      	bls.n	8000e48 <__udivmoddi4+0xdc>
 8000d82:	fab2 f682 	clz	r6, r2
 8000d86:	b14e      	cbz	r6, 8000d9c <__udivmoddi4+0x30>
 8000d88:	f1c6 0320 	rsb	r3, r6, #32
 8000d8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d90:	fa20 f303 	lsr.w	r3, r0, r3
 8000d94:	40b7      	lsls	r7, r6
 8000d96:	ea43 0808 	orr.w	r8, r3, r8
 8000d9a:	40b4      	lsls	r4, r6
 8000d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fb01 f20c 	mul.w	r2, r1, ip
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d909      	bls.n	8000dce <__udivmoddi4+0x62>
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc0:	f080 80ea 	bcs.w	8000f98 <__udivmoddi4+0x22c>
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f240 80e7 	bls.w	8000f98 <__udivmoddi4+0x22c>
 8000dca:	3902      	subs	r1, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9a      	subs	r2, r3, r2
 8000dd0:	b2a3      	uxth	r3, r4
 8000dd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000de2:	459c      	cmp	ip, r3
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0x8e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	f080 80d6 	bcs.w	8000f9c <__udivmoddi4+0x230>
 8000df0:	459c      	cmp	ip, r3
 8000df2:	f240 80d3 	bls.w	8000f9c <__udivmoddi4+0x230>
 8000df6:	443b      	add	r3, r7
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfe:	eba3 030c 	sub.w	r3, r3, ip
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11d      	cbz	r5, 8000e0e <__udivmoddi4+0xa2>
 8000e06:	40f3      	lsrs	r3, r6
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d905      	bls.n	8000e22 <__udivmoddi4+0xb6>
 8000e16:	b10d      	cbz	r5, 8000e1c <__udivmoddi4+0xb0>
 8000e18:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e7f5      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e22:	fab3 f183 	clz	r1, r3
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d146      	bne.n	8000eb8 <__udivmoddi4+0x14c>
 8000e2a:	4573      	cmp	r3, lr
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xc8>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 8105 	bhi.w	800103e <__udivmoddi4+0x2d2>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0e5      	beq.n	8000e0e <__udivmoddi4+0xa2>
 8000e42:	e9c5 4800 	strd	r4, r8, [r5]
 8000e46:	e7e2      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f000 8090 	beq.w	8000f6e <__udivmoddi4+0x202>
 8000e4e:	fab2 f682 	clz	r6, r2
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	f040 80a4 	bne.w	8000fa0 <__udivmoddi4+0x234>
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	0c03      	lsrs	r3, r0, #16
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	b280      	uxth	r0, r0
 8000e62:	b2bc      	uxth	r4, r7
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e72:	fb04 f20c 	mul.w	r2, r4, ip
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x11e>
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x11c>
 8000e82:	429a      	cmp	r2, r3
 8000e84:	f200 80e0 	bhi.w	8001048 <__udivmoddi4+0x2dc>
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	1a9b      	subs	r3, r3, r2
 8000e8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e98:	fb02 f404 	mul.w	r4, r2, r4
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x144>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x142>
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	f200 80ca 	bhi.w	8001042 <__udivmoddi4+0x2d6>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	1b1b      	subs	r3, r3, r4
 8000eb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0x98>
 8000eb8:	f1c1 0620 	rsb	r6, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ecc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	fa00 f801 	lsl.w	r8, r0, r1
 8000eda:	fa1f fc87 	uxth.w	ip, r7
 8000ede:	fbbe f0f9 	udiv	r0, lr, r9
 8000ee2:	0c1c      	lsrs	r4, r3, #16
 8000ee4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x1a0>
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000efe:	f080 809c 	bcs.w	800103a <__udivmoddi4+0x2ce>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f240 8099 	bls.w	800103a <__udivmoddi4+0x2ce>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	eba4 040e 	sub.w	r4, r4, lr
 8000f10:	fa1f fe83 	uxth.w	lr, r3
 8000f14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f18:	fb09 4413 	mls	r4, r9, r3, r4
 8000f1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f24:	45a4      	cmp	ip, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1ce>
 8000f28:	193c      	adds	r4, r7, r4
 8000f2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f2e:	f080 8082 	bcs.w	8001036 <__udivmoddi4+0x2ca>
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d97f      	bls.n	8001036 <__udivmoddi4+0x2ca>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f46:	4564      	cmp	r4, ip
 8000f48:	4673      	mov	r3, lr
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	d362      	bcc.n	8001014 <__udivmoddi4+0x2a8>
 8000f4e:	d05f      	beq.n	8001010 <__udivmoddi4+0x2a4>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x1fe>
 8000f52:	ebb8 0203 	subs.w	r2, r8, r3
 8000f56:	eb64 0409 	sbc.w	r4, r4, r9
 8000f5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f62:	431e      	orrs	r6, r3
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	e74f      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000f6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f72:	0c01      	lsrs	r1, r0, #16
 8000f74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f78:	b280      	uxth	r0, r0
 8000f7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4638      	mov	r0, r7
 8000f82:	463c      	mov	r4, r7
 8000f84:	46b8      	mov	r8, r7
 8000f86:	46be      	mov	lr, r7
 8000f88:	2620      	movs	r6, #32
 8000f8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f8e:	eba2 0208 	sub.w	r2, r2, r8
 8000f92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f96:	e766      	b.n	8000e66 <__udivmoddi4+0xfa>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	e718      	b.n	8000dce <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e72c      	b.n	8000dfa <__udivmoddi4+0x8e>
 8000fa0:	f1c6 0220 	rsb	r2, r6, #32
 8000fa4:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa8:	40b7      	lsls	r7, r6
 8000faa:	40b1      	lsls	r1, r6
 8000fac:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fba:	b2bc      	uxth	r4, r7
 8000fbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc0:	0c11      	lsrs	r1, r2, #16
 8000fc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc6:	fb08 f904 	mul.w	r9, r8, r4
 8000fca:	40b0      	lsls	r0, r6
 8000fcc:	4589      	cmp	r9, r1
 8000fce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fd2:	b280      	uxth	r0, r0
 8000fd4:	d93e      	bls.n	8001054 <__udivmoddi4+0x2e8>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fdc:	d201      	bcs.n	8000fe2 <__udivmoddi4+0x276>
 8000fde:	4589      	cmp	r9, r1
 8000fe0:	d81f      	bhi.n	8001022 <__udivmoddi4+0x2b6>
 8000fe2:	eba1 0109 	sub.w	r1, r1, r9
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff8:	4542      	cmp	r2, r8
 8000ffa:	d229      	bcs.n	8001050 <__udivmoddi4+0x2e4>
 8000ffc:	18ba      	adds	r2, r7, r2
 8000ffe:	f109 31ff 	add.w	r1, r9, #4294967295
 8001002:	d2c4      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001004:	4542      	cmp	r2, r8
 8001006:	d2c2      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001008:	f1a9 0102 	sub.w	r1, r9, #2
 800100c:	443a      	add	r2, r7
 800100e:	e7be      	b.n	8000f8e <__udivmoddi4+0x222>
 8001010:	45f0      	cmp	r8, lr
 8001012:	d29d      	bcs.n	8000f50 <__udivmoddi4+0x1e4>
 8001014:	ebbe 0302 	subs.w	r3, lr, r2
 8001018:	eb6c 0c07 	sbc.w	ip, ip, r7
 800101c:	3801      	subs	r0, #1
 800101e:	46e1      	mov	r9, ip
 8001020:	e796      	b.n	8000f50 <__udivmoddi4+0x1e4>
 8001022:	eba7 0909 	sub.w	r9, r7, r9
 8001026:	4449      	add	r1, r9
 8001028:	f1a8 0c02 	sub.w	ip, r8, #2
 800102c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001030:	fb09 f804 	mul.w	r8, r9, r4
 8001034:	e7db      	b.n	8000fee <__udivmoddi4+0x282>
 8001036:	4673      	mov	r3, lr
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1ce>
 800103a:	4650      	mov	r0, sl
 800103c:	e766      	b.n	8000f0c <__udivmoddi4+0x1a0>
 800103e:	4608      	mov	r0, r1
 8001040:	e6fd      	b.n	8000e3e <__udivmoddi4+0xd2>
 8001042:	443b      	add	r3, r7
 8001044:	3a02      	subs	r2, #2
 8001046:	e733      	b.n	8000eb0 <__udivmoddi4+0x144>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	443b      	add	r3, r7
 800104e:	e71c      	b.n	8000e8a <__udivmoddi4+0x11e>
 8001050:	4649      	mov	r1, r9
 8001052:	e79c      	b.n	8000f8e <__udivmoddi4+0x222>
 8001054:	eba1 0109 	sub.w	r1, r1, r9
 8001058:	46c4      	mov	ip, r8
 800105a:	fbb1 f9fe 	udiv	r9, r1, lr
 800105e:	fb09 f804 	mul.w	r8, r9, r4
 8001062:	e7c4      	b.n	8000fee <__udivmoddi4+0x282>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001074:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800109c:	2004      	movs	r0, #4
 800109e:	f7ff ffe3 	bl	8001068 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff ffe0 	bl	8001068 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2102      	movs	r1, #2
 80010ac:	200f      	movs	r0, #15
 80010ae:	f001 fd24 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f001 fd3b 	bl	8002b2e <HAL_NVIC_EnableIRQ>

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e0:	68fb      	ldr	r3, [r7, #12]
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
#endif

#if MY_TX
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	2001      	movs	r0, #1
 8001102:	f7ff ffdb 	bl	80010bc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff ffd8 	bl	80010bc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800110c:	2004      	movs	r0, #4
 800110e:	f7ff ffd5 	bl	80010bc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2080      	movs	r0, #128	@ 0x80
 8001114:	f7ff ffd2 	bl	80010bc <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pins : PA14 PA12 PA15 PA13
                             PA11 PA10 PA0 PA9
                             PA6 PA1 PA7 PA4
                             PA5 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13
 8001118:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 800111c:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_9
			|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_4
			|GPIO_PIN_5|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112e:	f002 f941 	bl	80033b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB15 PB3 PB4 PB7
                             PB9 PB14 PB5 PB8
                             PB13 PB2 PB6 PB12
                             PB1 PB11 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001132:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001136:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_8
			|GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_12
			|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001138:	2303      	movs	r3, #3
 800113a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	480e      	ldr	r0, [pc, #56]	@ (8001180 <MX_GPIO_Init+0x94>)
 8001146:	f002 f935 	bl	80033b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC2 PC1 PC0
                             PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 800114a:	f242 0347 	movw	r3, #8263	@ 0x2047
 800114e:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	2303      	movs	r3, #3
 8001152:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4809      	ldr	r0, [pc, #36]	@ (8001184 <MX_GPIO_Init+0x98>)
 800115e:	f002 f929 	bl	80033b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001162:	2308      	movs	r3, #8
 8001164:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_GPIO_Init+0x9c>)
 8001174:	f002 f91e 	bl	80033b4 <HAL_GPIO_Init>

#endif

#endif

}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	48001c00 	.word	0x48001c00

0800118c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_Init();														// Configure HAL
	HAL_PWR_EnablePVD();											// Enable PVD
#endif

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 8001190:	f01a feaa 	bl	801bee8 <My_Set_All_GPIO_To_Analog_Mode>
#endif

	My_PS_Detection();												// Power Supply (PS) Detection Function: Detects if the System is Supplied by a Power Supply with a voltage > 2.9 V or by an Harvester
 8001194:	f01b f9ee 	bl	801c574 <My_PS_Detection>

#if MY_UNDERVOLTING_FEATURE

	My_SystemClock_Config(); 										// Configure the System Clock Frequency Below 16 MHz to allow Undervolting
 8001198:	f01b f93a 	bl	801c410 <My_SystemClock_Config>
	my_SystemClock_Config_done = 1;									// SystemClock is Configures
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <main+0x38>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);	// Configure Undervolting
 80011a2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80011a6:	f003 fa35 	bl	8004614 <HAL_PWREx_ControlVoltageScaling>
	my_SystemClock_Config_done = 1;	// SystemClock is Configured

#endif

#if MY_TX_ABP
	MX_RTC_Init();
 80011aa:	f000 f83b 	bl	8001224 <MX_RTC_Init>
#endif

	MX_LPTIM1_Init();
 80011ae:	f019 fd21 	bl	801abf4 <MX_LPTIM1_Init>

#if !MY_DEBUGGER_ENABLED
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011b2:	f7ff ff9b 	bl	80010ec <MX_GPIO_Init>
	MX_X_CUBE_AI_Init(); 				// initialization AI
 80011b6:	f019 faaf 	bl	801a718 <MX_X_CUBE_AI_Init>
	MX_LoRaWAN_Init();
 80011ba:	f000 ffab 	bl	8002114 <MX_LoRaWAN_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_LoRaWAN_Process();
 80011be:	f000 ffb7 	bl	8002130 <MX_LoRaWAN_Process>
 80011c2:	e7fc      	b.n	80011be <main+0x32>
 80011c4:	200006e8 	.word	0x200006e8

080011c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001200:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4313      	orrs	r3, r2
 800120a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001210:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

#if MY_TX_ABP
	My_RTC_Init();
 8001228:	f01a f8c4 	bl	801b3b4 <My_RTC_Init>
	    Error_Handler();
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
#endif

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b090      	sub	sp, #64	@ 0x40
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	2238      	movs	r2, #56	@ 0x38
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f01e f83c 	bl	801f2be <memset>
	if(rtcHandle->Instance==RTC)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a15      	ldr	r2, [pc, #84]	@ (80012a0 <HAL_RTC_MspInit+0x70>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d122      	bne.n	8001296 <HAL_RTC_MspInit+0x66>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clocks
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001250:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001254:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125a:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fcdd 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_RTC_MspInit+0x40>
		{
			Error_Handler();
 800126c:	f7ff ffac 	bl	80011c8 <Error_Handler>
		}

		/* RTC clock enable */
		__HAL_RCC_RTC_ENABLE();
 8001270:	f7ff ffb0 	bl	80011d4 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 8001274:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001278:	f7ff ffbc 	bl	80011f4 <LL_APB1_GRP1_EnableClock>

		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2002      	movs	r0, #2
 8001282:	f001 fc3a 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	202a      	movs	r0, #42	@ 0x2a
 800128c:	f001 fc35 	bl	8002afa <HAL_NVIC_SetPriority>
#if MY_TX_OTAA
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
#endif
		/* USER CODE BEGIN RTC_MspInit 1 */
		HAL_RTCEx_EnableBypassShadow(rtcHandle);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f005 fa51 	bl	8006738 <HAL_RTCEx_EnableBypassShadow>
		/* USER CODE END RTC_MspInit 1 */
	}
}
 8001296:	bf00      	nop
 8001298:	3740      	adds	r7, #64	@ 0x40
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40002800 	.word	0x40002800

080012a4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	58000400 	.word	0x58000400

080012bc <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80012d8:	f001 faea 	bl	80028b0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80012dc:	f7ff ffe2 	bl	80012a4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f003 fa57 	bl	8004794 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}

080012ea <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80012ee:	f001 faed 	bl	80028cc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80012f2:	f000 feb9 	bl	8002068 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80012fe:	f001 fad7 	bl	80028b0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001302:	2101      	movs	r1, #1
 8001304:	2000      	movs	r0, #0
 8001306:	f003 f909 	bl	800451c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}

0800130e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001312:	f001 fadb 	bl	80028cc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2001      	movs	r0, #1
 8001324:	f001 fbe9 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001328:	2001      	movs	r0, #1
 800132a:	f001 fc00 	bl	8002b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}

08001332 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001336:	bf00      	nop
 8001338:	e7fd      	b.n	8001336 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	bf00      	nop
 8001340:	e7fd      	b.n	800133e <HardFault_Handler+0x4>

08001342 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001346:	bf00      	nop
 8001348:	e7fd      	b.n	8001346 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	bf00      	nop
 8001350:	e7fd      	b.n	800134e <BusFault_Handler+0x4>

08001352 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001356:	bf00      	nop
 8001358:	e7fd      	b.n	8001356 <UsageFault_Handler+0x4>

0800135a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD and PVM detector.
  */
void PVD_PVM_IRQHandler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 800138e:	f003 fa2b 	bl	80047e8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800139e:	f005 f9fd 	bl	800679c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200006ec 	.word	0x200006ec

080013ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f002 fa45 	bl	8003840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}

080013ba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80013be:	2002      	movs	r0, #2
 80013c0:	f002 fa3e 	bl	8003840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Channel5_IRQHandler+0x10>)
 80013ce:	f001 fe53 	bl	8003078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200007d4 	.word	0x200007d4

080013dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80013e0:	2040      	movs	r0, #64	@ 0x40
 80013e2:	f002 fa2d 	bl	8003840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <USART2_IRQHandler+0x10>)
 80013f2:	f006 f81d 	bl	8007430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000740 	.word	0x20000740

08001400 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <RTC_Alarm_IRQHandler+0x10>)
 8001406:	f005 f893 	bl	8006530 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200006ec 	.word	0x200006ec

08001414 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <SUBGHZ_Radio_IRQHandler+0x10>)
 800141a:	f005 fd23 	bl	8006e64 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000724 	.word	0x20000724

08001428 <LPTIM1_IRQHandler>:

/* USER CODE BEGIN 1 */
void LPTIM1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

	HAL_LPTIM_IRQHandler(&hlptim1);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <LPTIM1_IRQHandler+0x10>)
 800142e:	f01b fcf3 	bl	801ce18 <HAL_LPTIM_IRQHandler>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20001adc 	.word	0x20001adc

0800143c <LPTIM2_IRQHandler>:

void LPTIM2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	HAL_LPTIM_IRQHandler(&hlptim2);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <LPTIM2_IRQHandler+0x10>)
 8001442:	f01b fce9 	bl	801ce18 <HAL_LPTIM_IRQHandler>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20001b18 	.word	0x20001b18

08001450 <COMP_IRQHandler>:

void COMP_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001454:	4803      	ldr	r0, [pc, #12]	@ (8001464 <COMP_IRQHandler+0x14>)
 8001456:	f01b f9fb 	bl	801c850 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 800145a:	4803      	ldr	r0, [pc, #12]	@ (8001468 <COMP_IRQHandler+0x18>)
 800145c:	f01b f9f8 	bl	801c850 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20001a84 	.word	0x20001a84
 8001468:	20001ab0 	.word	0x20001ab0

0800146c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001478:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800147a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001490:	68fb      	ldr	r3, [r7, #12]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_SUBGHZ_Init+0x20>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_SUBGHZ_Init+0x20>)
 80014a8:	f005 fa5a 	bl	8006960 <HAL_SUBGHZ_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80014b2:	f7ff fe89 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000724 	.word	0x20000724

080014c0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff ffcf 	bl	800146c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2032      	movs	r0, #50	@ 0x32
 80014d4:	f001 fb11 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80014d8:	2032      	movs	r0, #50	@ 0x32
 80014da:	f001 fb28 	bl	8002b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80014f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
//	DBG_Init();

	/* USER CODE END SystemApp_Init_1 */

	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff ffe8 	bl	80014e6 <LL_RCC_SetClkAfterWakeFromStop>

	/*Initialize timer and RTC*/
	UTIL_TIMER_Init();
 8001516:	f018 fb97 	bl	8019c48 <UTIL_TIMER_Init>
	SYS_TimerInitialisedFlag = 1;
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <SystemApp_Init+0x40>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
	/* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
	DBG_Init();
 8001520:	f000 f8a8 	bl	8001674 <DBG_Init>

	/*Initialize the terminal */
	UTIL_ADV_TRACE_Init();
 8001524:	f017 fd3c 	bl	8018fa0 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001528:	4809      	ldr	r0, [pc, #36]	@ (8001550 <SystemApp_Init+0x44>)
 800152a:	f017 fde7 	bl	80190fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

	/* #warning "should be removed when proper obl is done" */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <SystemApp_Init+0x48>)
 8001530:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001534:	611a      	str	r2, [r3, #16]

	/*Set verbose LEVEL*/
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001536:	2002      	movs	r0, #2
 8001538:	f017 fdee 	bl	8019118 <UTIL_ADV_TRACE_SetVerboseLevel>

	/*Initialize the Sensors */
//	EnvSensors_Init();

	/*Init low power manager*/
	UTIL_LPM_Init();
 800153c:	f017 ffd6 	bl	80194ec <UTIL_LPM_Init>
	/* Disable Stand-by mode */
	UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001540:	2101      	movs	r1, #1
 8001542:	2001      	movs	r0, #1
 8001544:	f018 f812 	bl	801956c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

	/* USER CODE BEGIN SystemApp_Init_2 */

	/* USER CODE END SystemApp_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000730 	.word	0x20000730
 8001550:	08001565 	.word	0x08001565
 8001554:	58004000 	.word	0x58004000

08001558 <UTIL_SEQ_Idle>:

/**
 * @brief redefines __weak function in stm32_seq.c such to enter low power
 */
void UTIL_SEQ_Idle(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_SEQ_Idle_1 */

	/* USER CODE END UTIL_SEQ_Idle_1 */
	UTIL_LPM_EnterLowPower();
 800155c:	f018 f836 	bl	80195cc <UTIL_LPM_EnterLowPower>
	/* USER CODE BEGIN UTIL_SEQ_Idle_2 */

	/* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <TimestampNow>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af02      	add	r7, sp, #8
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TimestampNow_1 */

	/* USER CODE END TimestampNow_1 */
	SysTime_t curtime = SysTimeGet();
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4618      	mov	r0, r3
 8001574:	f018 faaa 	bl	8019acc <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <TimestampNow+0x3c>)
 8001582:	2110      	movs	r1, #16
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f81d 	bl	80015c4 <tiny_snprintf_like>
	*size = strlen((char *)buff);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7fe fdf8 	bl	8000180 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN TimestampNow_2 */

	/* USER CODE END TimestampNow_2 */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	08020140 	.word	0x08020140

080015a4 <UTIL_ADV_TRACE_PreSendHook>:
/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80015a8:	2101      	movs	r1, #1
 80015aa:	2002      	movs	r0, #2
 80015ac:	f017 ffae 	bl	801950c <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

	/* USER CODE END UTIL_LPM_SetStopMode_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2002      	movs	r0, #2
 80015bc:	f017 ffa6 	bl	801950c <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

	/* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80015c4:	b40c      	push	{r2, r3}
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN tiny_snprintf_like_1 */

	/* USER CODE END tiny_snprintf_like_1 */
	va_list vaArgs;
	va_start(vaArgs, strFormat);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	60fb      	str	r3, [r7, #12]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80015d6:	6839      	ldr	r1, [r7, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f018 fe57 	bl	801a290 <tiny_vsnprintf_like>
	va_end(vaArgs);
	/* USER CODE BEGIN tiny_snprintf_like_2 */

	/* USER CODE END tiny_snprintf_like_2 */
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ec:	b002      	add	sp, #8
 80015ee:	4770      	bx	lr

080015f0 <HAL_InitTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	/*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
	/* USER CODE BEGIN HAL_InitTick_1 */

	/* USER CODE END HAL_InitTick_1 */
	return HAL_OK;
 80015f8:	2300      	movs	r3, #0
	/* USER CODE BEGIN HAL_InitTick_2 */

	/* USER CODE END HAL_InitTick_2 */
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_GetTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
uint32_t HAL_GetTick(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_GetTick_1 */

	/* USER CODE END HAL_GetTick_1 */
	if (SYS_TimerInitialisedFlag == 0)
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_GetTick+0x24>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <HAL_GetTick+0x18>

		/* USER CODE END HAL_GetTick_EarlyCall */
	}
	else
	{
		ret = TIMER_IF_GetTimerValue();
 8001616:	f000 f9c7 	bl	80019a8 <TIMER_IF_GetTimerValue>
 800161a:	6078      	str	r0, [r7, #4]
	}
	/* USER CODE BEGIN HAL_GetTick_2 */

	/* USER CODE END HAL_GetTick_2 */
	return ret;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000730 	.word	0x20000730

0800162c <HAL_Delay>:

/**
 * @note This function overwrites the __weak one from HAL
 */
void HAL_Delay(__IO uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fa3d 	bl	8001ab6 <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LL_AHB2_GRP1_EnableClock>:
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001650:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4313      	orrs	r3, r2
 800165a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001660:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001668:	68fb      	ldr	r3, [r7, #12]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
#define DEBUGGER_ENABLED MY_DEBUGGER_ENABLED
  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800167a:	f001 f935 	bl	80028e8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800167e:	f001 f939 	bl	80028f4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001682:	f001 f93d 	bl	8002900 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80016a0:	2002      	movs	r0, #2
 80016a2:	f7ff ffcf 	bl	8001644 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80016a6:	2002      	movs	r0, #2
 80016a8:	f7ff ffcc 	bl	8001644 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <DBG_Init+0x78>)
 80016b8:	f001 fe7c 	bl	80033b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80016bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4809      	ldr	r0, [pc, #36]	@ (80016ec <DBG_Init+0x78>)
 80016c8:	f001 fe74 	bl	80033b4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <DBG_Init+0x78>)
 80016d4:	f002 f89c 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016de:	4803      	ldr	r0, [pc, #12]	@ (80016ec <DBG_Init+0x78>)
 80016e0:	f002 f896 	bl	8003810 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	48000400 	.word	0x48000400

080016f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
  }

  return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
  }
  return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <_isatty>:

int _isatty(int file)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f01d fdc2 	bl	801f37c <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20008000 	.word	0x20008000
 8001824:	00000800 	.word	0x00000800
 8001828:	20000734 	.word	0x20000734
 800182c:	20001dd0 	.word	0x20001dd0

08001830 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
	...

08001848 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <TIMER_IF_Init+0x5c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f083 0301 	eor.w	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01b      	beq.n	8001898 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <TIMER_IF_Init+0x60>)
 8001862:	f04f 32ff 	mov.w	r2, #4294967295
 8001866:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001868:	f7ff fcdc 	bl	8001224 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800186c:	f000 f856 	bl	800191c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001870:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <TIMER_IF_Init+0x60>)
 8001876:	f004 fdff 	bl	8006478 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <TIMER_IF_Init+0x60>)
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001882:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <TIMER_IF_Init+0x60>)
 8001884:	f004 ff58 	bl	8006738 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001888:	2000      	movs	r0, #0
 800188a:	f000 f9c9 	bl	8001c20 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800188e:	f000 f85f 	bl	8001950 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001892:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <TIMER_IF_Init+0x5c>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001898:	79fb      	ldrb	r3, [r7, #7]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000738 	.word	0x20000738
 80018a8:	200006ec 	.word	0x200006ec

080018ac <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	@ 0x38
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	222c      	movs	r2, #44	@ 0x2c
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f01d fcfb 	bl	801f2be <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80018c8:	f000 f828 	bl	800191c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <TIMER_IF_StartTimer+0x68>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	43db      	mvns	r3, r3
 80018de:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80018e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018e8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80018ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	@ (8001918 <TIMER_IF_StartTimer+0x6c>)
 80018fa:	f004 fcb1 	bl	8006260 <HAL_RTC_SetAlarm_IT>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001904:	f7ff fc60 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001908:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800190c:	4618      	mov	r0, r3
 800190e:	3738      	adds	r7, #56	@ 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000073c 	.word	0x2000073c
 8001918:	200006ec 	.word	0x200006ec

0800191c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <TIMER_IF_StopTimer+0x2c>)
 8001928:	2201      	movs	r2, #1
 800192a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800192c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001930:	4806      	ldr	r0, [pc, #24]	@ (800194c <TIMER_IF_StopTimer+0x30>)
 8001932:	f004 fda1 	bl	8006478 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <TIMER_IF_StopTimer+0x30>)
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800193e:	79fb      	ldrb	r3, [r7, #7]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40002800 	.word	0x40002800
 800194c:	200006ec 	.word	0x200006ec

08001950 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001954:	f000 f984 	bl	8001c60 <GetTimerTicks>
 8001958:	4603      	mov	r3, r0
 800195a:	4a03      	ldr	r2, [pc, #12]	@ (8001968 <TIMER_IF_SetTimerContext+0x18>)
 800195c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800195e:	4b02      	ldr	r3, [pc, #8]	@ (8001968 <TIMER_IF_SetTimerContext+0x18>)
 8001960:	681b      	ldr	r3, [r3, #0]
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000073c 	.word	0x2000073c

0800196c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001970:	4b02      	ldr	r3, [pc, #8]	@ (800197c <TIMER_IF_GetTimerContext+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000073c 	.word	0x2000073c

08001980 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800198a:	f000 f969 	bl	8001c60 <GetTimerTicks>
 800198e:	4602      	mov	r2, r0
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000073c 	.word	0x2000073c

080019a8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <TIMER_IF_GetTimerValue+0x24>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80019ba:	f000 f951 	bl	8001c60 <GetTimerTicks>
 80019be:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000738 	.word	0x20000738

080019d0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80019da:	2303      	movs	r3, #3
 80019dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80019de:	687b      	ldr	r3, [r7, #4]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80019ea:	b5b0      	push	{r4, r5, r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80019f2:	2100      	movs	r1, #0
 80019f4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	2000      	movs	r0, #0
 80019fa:	460a      	mov	r2, r1
 80019fc:	4603      	mov	r3, r0
 80019fe:	0d95      	lsrs	r5, r2, #22
 8001a00:	0294      	lsls	r4, r2, #10
 8001a02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7ff f995 	bl	8000d3c <__aeabi_uldivmod>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4613      	mov	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}

08001a24 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001a24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001a2e:	2100      	movs	r1, #0
 8001a30:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	2000      	movs	r0, #0
 8001a36:	460c      	mov	r4, r1
 8001a38:	4605      	mov	r5, r0
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f04f 0a00 	mov.w	sl, #0
 8001a42:	f04f 0b00 	mov.w	fp, #0
 8001a46:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001a4a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001a4e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001a52:	4650      	mov	r0, sl
 8001a54:	4659      	mov	r1, fp
 8001a56:	1b02      	subs	r2, r0, r4
 8001a58:	eb61 0305 	sbc.w	r3, r1, r5
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0099      	lsls	r1, r3, #2
 8001a66:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001a6a:	0090      	lsls	r0, r2, #2
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	eb12 0804 	adds.w	r8, r2, r4
 8001a74:	eb43 0905 	adc.w	r9, r3, r5
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a8c:	4690      	mov	r8, r2
 8001a8e:	4699      	mov	r9, r3
 8001a90:	4640      	mov	r0, r8
 8001a92:	4649      	mov	r1, r9
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	0a82      	lsrs	r2, r0, #10
 8001a9e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001aa2:	0a8b      	lsrs	r3, r1, #10
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ab4:	4770      	bx	lr

08001ab6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff93 	bl	80019ea <TIMER_IF_Convert_ms2Tick>
 8001ac4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001ac6:	f000 f8cb 	bl	8001c60 <GetTimerTicks>
 8001aca:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001acc:	e000      	b.n	8001ad0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001ace:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001ad0:	f000 f8c6 	bl	8001c60 <GetTimerTicks>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f6      	bhi.n	8001ace <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_RTCEx_SSRUEventCallback>:
//
//	/* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
//}

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001af2:	f000 f8a5 	bl	8001c40 <TIMER_IF_BkUp_Read_MSBticks>
 8001af6:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f88f 	bl	8001c20 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001b0a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b0e:	b08c      	sub	sp, #48	@ 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001b18:	f000 f8a2 	bl	8001c60 <GetTimerTicks>
 8001b1c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001b1e:	f000 f88f 	bl	8001c40 <TIMER_IF_BkUp_Read_MSBticks>
 8001b22:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	2200      	movs	r2, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	60fa      	str	r2, [r7, #12]
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	000b      	movs	r3, r1
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4605      	mov	r5, r0
 8001b42:	eb12 0804 	adds.w	r8, r2, r4
 8001b46:	eb43 0905 	adc.w	r9, r3, r5
 8001b4a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001b4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	0a82      	lsrs	r2, r0, #10
 8001b5c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001b60:	0a8b      	lsrs	r3, r1, #10
 8001b62:	4613      	mov	r3, r2
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001b74:	f04f 0b00 	mov.w	fp, #0
 8001b78:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff50 	bl	8001a24 <TIMER_IF_Convert_Tick2ms>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3730      	adds	r7, #48	@ 0x30
 8001b92:	46bd      	mov	sp, r7
 8001b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b98 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001ba6:	f004 fe13 	bl	80067d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200006ec 	.word	0x200006ec

08001bb8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001bc6:	f004 fe03 	bl	80067d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200006ec 	.word	0x200006ec

08001bd8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001be2:	2100      	movs	r1, #0
 8001be4:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001be6:	f004 fe0b 	bl	8006800 <HAL_RTCEx_BKUPRead>
 8001bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200006ec 	.word	0x200006ec

08001bfc <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001c06:	2101      	movs	r1, #1
 8001c08:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001c0a:	f004 fdf9 	bl	8006800 <HAL_RTCEx_BKUPRead>
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200006ec 	.word	0x200006ec

08001c20 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001c2e:	f004 fdcf 	bl	80067d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200006ec 	.word	0x200006ec

08001c40 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001c46:	2102      	movs	r1, #2
 8001c48:	4804      	ldr	r0, [pc, #16]	@ (8001c5c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001c4a:	f004 fdd9 	bl	8006800 <HAL_RTCEx_BKUPRead>
 8001c4e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001c50:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200006ec 	.word	0x200006ec

08001c60 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001c66:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <GetTimerTicks+0x34>)
 8001c68:	f7ff fde2 	bl	8001830 <LL_RTC_TIME_GetSubSecond>
 8001c6c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c6e:	e003      	b.n	8001c78 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001c70:	4808      	ldr	r0, [pc, #32]	@ (8001c94 <GetTimerTicks+0x34>)
 8001c72:	f7ff fddd 	bl	8001830 <LL_RTC_TIME_GetSubSecond>
 8001c76:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c78:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <GetTimerTicks+0x34>)
 8001c7a:	f7ff fdd9 	bl	8001830 <LL_RTC_TIME_GetSubSecond>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d1f4      	bne.n	8001c70 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40002800 	.word	0x40002800

08001c98 <LL_AHB2_GRP1_EnableClock>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <LL_APB1_GRP1_EnableClock>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cec:	68fb      	ldr	r3, [r7, #12]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <LL_APB1_GRP1_DisableClock>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d0e:	4013      	ands	r3, r2
 8001d10:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d22:	4a23      	ldr	r2, [pc, #140]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d64:	4811      	ldr	r0, [pc, #68]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d66:	f005 fa46 	bl	80071f6 <HAL_UART_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d70:	f7ff fa2a 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d74:	2100      	movs	r1, #0
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d78:	f007 fb69 	bl	800944e <HAL_UARTEx_SetTxFifoThreshold>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d82:	f7ff fa21 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d86:	2100      	movs	r1, #0
 8001d88:	4808      	ldr	r0, [pc, #32]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d8a:	f007 fb9e 	bl	80094ca <HAL_UARTEx_SetRxFifoThreshold>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d94:	f7ff fa18 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <MX_USART2_UART_Init+0x90>)
 8001d9a:	f007 fb1d 	bl	80093d8 <HAL_UARTEx_EnableFifoMode>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001da4:	f7ff fa10 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000740 	.word	0x20000740
 8001db0:	40004400 	.word	0x40004400

08001db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b096      	sub	sp, #88	@ 0x58
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2238      	movs	r2, #56	@ 0x38
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f01d fa72 	bl	801f2be <memset>
  if(uartHandle->Instance==USART2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a33      	ldr	r2, [pc, #204]	@ (8001eac <HAL_UART_MspInit+0xf8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d15f      	bne.n	8001ea4 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001de8:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <HAL_UART_MspInit+0xfc>)
 8001dea:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 ff15 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dfc:	f7ff f9e4 	bl	80011c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e00:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001e04:	f7ff ff60 	bl	8001cc8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff ff45 	bl	8001c98 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001e0e:	230c      	movs	r3, #12
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e2c:	f001 fac2 	bl	80033b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001e30:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e32:	4a21      	ldr	r2, [pc, #132]	@ (8001eb8 <HAL_UART_MspInit+0x104>)
 8001e34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001e36:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e38:	2214      	movs	r2, #20
 8001e3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e3e:	2210      	movs	r2, #16
 8001e40:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e66:	4813      	ldr	r0, [pc, #76]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e68:	f000 fe8c 	bl	8002b84 <HAL_DMA_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001e72:	f7ff f9a9 	bl	80011c8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e76:	2110      	movs	r1, #16
 8001e78:	480e      	ldr	r0, [pc, #56]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e7a:	f001 f9c3 	bl	8003204 <HAL_DMA_ConfigChannelAttributes>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001e84:	f7ff f9a0 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e8c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <HAL_UART_MspInit+0x100>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2102      	movs	r1, #2
 8001e98:	2025      	movs	r0, #37	@ 0x25
 8001e9a:	f000 fe2e 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e9e:	2025      	movs	r0, #37	@ 0x25
 8001ea0:	f000 fe45 	bl	8002b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3758      	adds	r7, #88	@ 0x58
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40004400 	.word	0x40004400
 8001eb0:	000c0004 	.word	0x000c0004
 8001eb4:	200007d4 	.word	0x200007d4
 8001eb8:	40020058 	.word	0x40020058

08001ebc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_UART_MspDeInit+0x3c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d110      	bne.n	8001ef0 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ece:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001ed2:	f7ff ff11 	bl	8001cf8 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001ed6:	210c      	movs	r1, #12
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001edc:	f001 fbca 	bl	8003674 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fef5 	bl	8002cd4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001eea:	2025      	movs	r0, #37	@ 0x25
 8001eec:	f000 fe2d 	bl	8002b4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40004400 	.word	0x40004400

08001efc <LL_APB1_GRP1_ForceReset>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <LL_APB1_GRP1_ReleaseReset>:
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f34:	4013      	ands	r3, r2
 8001f36:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <LL_EXTI_EnableIT_0_31+0x24>)
 8001f4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001f52:	4905      	ldr	r1, [pc, #20]	@ (8001f68 <LL_EXTI_EnableIT_0_31+0x24>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	58000800 	.word	0x58000800

08001f6c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <vcom_Init+0x28>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8001f7a:	f7ff f88d 	bl	8001098 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f7e:	f7ff fecd 	bl	8001d1c <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001f82:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001f86:	f7ff ffdd 	bl	8001f44 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8001f8a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000838 	.word	0x20000838

08001f98 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001f9c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001fa0:	f7ff ffac 	bl	8001efc <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8001fa4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001fa8:	f7ff ffb9 	bl	8001f1e <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001fac:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <vcom_DeInit+0x28>)
 8001fae:	f7ff ff85 	bl	8001ebc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f000 fdc9 	bl	8002b4a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001fb8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000740 	.word	0x20000740

08001fc4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <vcom_Trace_DMA+0x24>)
 8001fd8:	f005 f9aa 	bl	8007330 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001fdc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000740 	.word	0x20000740

08001fec <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <vcom_ReceiveInit+0x70>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001ffa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ffe:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002008:	4815      	ldr	r0, [pc, #84]	@ (8002060 <vcom_ReceiveInit+0x74>)
 800200a:	f007 f958 	bl	80092be <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800200e:	bf00      	nop
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <vcom_ReceiveInit+0x74>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800201e:	d0f7      	beq.n	8002010 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002020:	bf00      	nop
 8002022:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <vcom_ReceiveInit+0x74>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800202c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002030:	d1f7      	bne.n	8002022 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002032:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <vcom_ReceiveInit+0x74>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <vcom_ReceiveInit+0x74>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002040:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002042:	4807      	ldr	r0, [pc, #28]	@ (8002060 <vcom_ReceiveInit+0x74>)
 8002044:	f007 f996 	bl	8009374 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002048:	2201      	movs	r2, #1
 800204a:	4906      	ldr	r1, [pc, #24]	@ (8002064 <vcom_ReceiveInit+0x78>)
 800204c:	4804      	ldr	r0, [pc, #16]	@ (8002060 <vcom_ReceiveInit+0x74>)
 800204e:	f005 f923 	bl	8007298 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002052:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000083c 	.word	0x2000083c
 8002060:	20000740 	.word	0x20000740
 8002064:	20000834 	.word	0x20000834

08002068 <vcom_Resume>:

void vcom_Resume(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206c:	4808      	ldr	r0, [pc, #32]	@ (8002090 <vcom_Resume+0x28>)
 800206e:	f005 f8c2 	bl	80071f6 <HAL_UART_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <vcom_Resume+0x14>
  {
    Error_Handler();
 8002078:	f7ff f8a6 	bl	80011c8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800207c:	4805      	ldr	r0, [pc, #20]	@ (8002094 <vcom_Resume+0x2c>)
 800207e:	f000 fd81 	bl	8002b84 <HAL_DMA_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <vcom_Resume+0x24>
  {
    Error_Handler();
 8002088:	f7ff f89e 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000740 	.word	0x20000740
 8002094:	200007d4 	.word	0x200007d4

08002098 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <HAL_UART_TxCpltCallback+0x24>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d103      	bne.n	80020b2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80020aa:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_UART_TxCpltCallback+0x28>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2000      	movs	r0, #0
 80020b0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40004400 	.word	0x40004400
 80020c0:	20000838 	.word	0x20000838

080020c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <HAL_UART_RxCpltCallback+0x44>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d113      	bne.n	80020fe <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80020d6:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_UART_RxCpltCallback+0x48>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_UART_RxCpltCallback+0x30>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_UART_RxCpltCallback+0x48>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2101      	movs	r1, #1
 80020f0:	4807      	ldr	r0, [pc, #28]	@ (8002110 <HAL_UART_RxCpltCallback+0x4c>)
 80020f2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80020f4:	2201      	movs	r2, #1
 80020f6:	4906      	ldr	r1, [pc, #24]	@ (8002110 <HAL_UART_RxCpltCallback+0x4c>)
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f005 f8cd 	bl	8007298 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40004400 	.word	0x40004400
 800210c:	2000083c 	.word	0x2000083c
 8002110:	20000834 	.word	0x20000834

08002114 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */
	my_MX_GPIO_Init_done = 1;
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <MX_LoRaWAN_Init+0x18>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800211e:	f7ff f9f5 	bl	800150c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002122:	f000 f80d 	bl	8002140 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000840 	.word	0x20000840

08002130 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f017 fa9a 	bl	8019670 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
#endif

#if MY_TX

#if MY_TX_ABP
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RTF), UTIL_SEQ_RFU, SendTxData);	// Register task for: SendTxData
 8002144:	4a1e      	ldr	r2, [pc, #120]	@ (80021c0 <LoRaWAN_Init+0x80>)
 8002146:	2100      	movs	r1, #0
 8002148:	2010      	movs	r0, #16
 800214a:	f017 fb8d 	bl	8019868 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
 800214e:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <LoRaWAN_Init+0x84>)
 8002150:	2100      	movs	r1, #0
 8002152:	2020      	movs	r0, #32
 8002154:	f017 fb88 	bl	8019868 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
 8002158:	4a1b      	ldr	r2, [pc, #108]	@ (80021c8 <LoRaWAN_Init+0x88>)
 800215a:	2100      	movs	r1, #0
 800215c:	2040      	movs	r0, #64	@ 0x40
 800215e:	f017 fb83 	bl	8019868 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
 8002162:	4a1a      	ldr	r2, [pc, #104]	@ (80021cc <LoRaWAN_Init+0x8c>)
 8002164:	2100      	movs	r1, #0
 8002166:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800216a:	f017 fb7d 	bl	8019868 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_AIF), UTIL_SEQ_RFU, My_AIF);		// Register Task for: My_AIF
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <LoRaWAN_Init+0x90>)
 8002170:	2100      	movs	r1, #0
 8002172:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002176:	f017 fb77 	bl	8019868 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
#endif

	LoraInfo_Init();									 					// LoRaWAN info (Region, ClassB, Kms(Key Management Service))
 800217a:	f000 f9b1 	bl	80024e0 <LoraInfo_Init>

	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);     					// LoRaMacPrimitives: Used to notify LmHandler of LoRaMac events and LoRaMacCallbacks On MacProcessNotify:
 800217e:	4915      	ldr	r1, [pc, #84]	@ (80021d4 <LoRaWAN_Init+0x94>)
 8002180:	4815      	ldr	r0, [pc, #84]	@ (80021d8 <LoRaWAN_Init+0x98>)
 8002182:	f007 fa4f 	bl	8009624 <LmHandlerInit>
	// When a radio interrupt (IRQ) occurs, it means that the radio has finished transmitting or receiving a message and needs to be handled by the MAC layer

	//LmHandlerParams.TxDatarate = 2;
	LmHandlerConfigure(&LmHandlerParams);                					// LoRaWAN Configuration using LmHandlerParams
 8002186:	4815      	ldr	r0, [pc, #84]	@ (80021dc <LoRaWAN_Init+0x9c>)
 8002188:	f007 fa7a 	bl	8009680 <LmHandlerConfigure>

	LmHandlerJoin(ActivationType, ForceRejoin);          					// LoRaWAN network ACTIVATION_TYPE_ABP file  (LmHandlerJoin) is modified, to work only with ABP no need to OTAA activation
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <LoRaWAN_Init+0xa0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <LoRaWAN_Init+0xa4>)
 8002192:	7812      	ldrb	r2, [r2, #0]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f007 fb94 	bl	80098c4 <LmHandlerJoin>

	if (my_Current_State != PSS)
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <LoRaWAN_Init+0xa8>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d002      	beq.n	80021aa <LoRaWAN_Init+0x6a>
	{
		my_SubghzApp_Init_done = 1;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <LoRaWAN_Init+0xac>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
#if MY_RADIO_DEACTIVATION
		Radio.Sleep();
#endif
	}
#if MY_TX_ABP
	SendTxData();
 80021aa:	f000 f92d 	bl	8002408 <SendTxData>
#endif
	my_LoRAWAN_Init++;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <LoRaWAN_Init+0xb0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <LoRaWAN_Init+0xb0>)
 80021b8:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END LoRaWAN_Init_Last */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	08002409 	.word	0x08002409
 80021c4:	0801b4e9 	.word	0x0801b4e9
 80021c8:	0801b691 	.word	0x0801b691
 80021cc:	0801b7d1 	.word	0x0801b7d1
 80021d0:	0801b871 	.word	0x0801b871
 80021d4:	01030000 	.word	0x01030000
 80021d8:	20000004 	.word	0x20000004
 80021dc:	20000050 	.word	0x20000050
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000842 	.word	0x20000842
 80021e8:	20001b85 	.word	0x20001b85
 80021ec:	20000843 	.word	0x20000843
 80021f0:	20000841 	.word	0x20000841

080021f4 <My_Adv_Data_Init>:


#if MY_TX

void My_Adv_Data_Init(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]

	if (my_LoRAWAN_Init++ > N_LORA_TX)
 80021fe:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <My_Adv_Data_Init+0x170>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	b2d1      	uxtb	r1, r2
 8002206:	4a57      	ldr	r2, [pc, #348]	@ (8002364 <My_Adv_Data_Init+0x170>)
 8002208:	7011      	strb	r1, [r2, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	f240 809a 	bls.w	8002344 <My_Adv_Data_Init+0x150>
	{
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time >> 8) & 0xFF); 			// 0
 8002210:	4b55      	ldr	r3, [pc, #340]	@ (8002368 <My_Adv_Data_Init+0x174>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	b298      	uxth	r0, r3
 8002218:	4b54      	ldr	r3, [pc, #336]	@ (800236c <My_Adv_Data_Init+0x178>)
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	1c59      	adds	r1, r3, #1
 8002220:	6079      	str	r1, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	b2c2      	uxtb	r2, r0
 8002226:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time & 0xFF); 					// 1
 8002228:	4b4f      	ldr	r3, [pc, #316]	@ (8002368 <My_Adv_Data_Init+0x174>)
 800222a:	8818      	ldrh	r0, [r3, #0]
 800222c:	4b4f      	ldr	r3, [pc, #316]	@ (800236c <My_Adv_Data_Init+0x178>)
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	1c59      	adds	r1, r3, #1
 8002234:	6079      	str	r1, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	b2c2      	uxtb	r2, r0
 800223a:	701a      	strb	r2, [r3, #0]

#if MY_ES_FEATURE_ENABLE

		if(my_Cmode == DCM)
 800223c:	4b4c      	ldr	r3, [pc, #304]	@ (8002370 <My_Adv_Data_Init+0x17c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <My_Adv_Data_Init+0x58>
		{
			my_ESD_Level = 0;
 8002244:	4b4b      	ldr	r3, [pc, #300]	@ (8002374 <My_Adv_Data_Init+0x180>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e00a      	b.n	8002262 <My_Adv_Data_Init+0x6e>
		}
		else if (my_Cmode == CCM)
 800224c:	4b48      	ldr	r3, [pc, #288]	@ (8002370 <My_Adv_Data_Init+0x17c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d103      	bne.n	800225c <My_Adv_Data_Init+0x68>
		{
			my_ESD_Level = 1;
 8002254:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <My_Adv_Data_Init+0x180>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e002      	b.n	8002262 <My_Adv_Data_Init+0x6e>
		}
		else
		{
			my_ESD_Level = 2;
 800225c:	4b45      	ldr	r3, [pc, #276]	@ (8002374 <My_Adv_Data_Init+0x180>)
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
		}
		AppData.Buffer[i++] = (uint8_t)(my_ESD_Level & 0xFF); 					// 2
 8002262:	4b42      	ldr	r3, [pc, #264]	@ (800236c <My_Adv_Data_Init+0x178>)
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	6079      	str	r1, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a41      	ldr	r2, [pc, #260]	@ (8002374 <My_Adv_Data_Init+0x180>)
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(My_EBK_status & 0xFF); 					// 3
 8002274:	4b3d      	ldr	r3, [pc, #244]	@ (800236c <My_Adv_Data_Init+0x178>)
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	6079      	str	r1, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	4a3d      	ldr	r2, [pc, #244]	@ (8002378 <My_Adv_Data_Init+0x184>)
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE

#if MY_SHT40
		/**** Get Temperature from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 24) & 0xFF); 			// 4
 8002286:	4b3d      	ldr	r3, [pc, #244]	@ (800237c <My_Adv_Data_Init+0x188>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0e18      	lsrs	r0, r3, #24
 800228c:	4b37      	ldr	r3, [pc, #220]	@ (800236c <My_Adv_Data_Init+0x178>)
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	1c59      	adds	r1, r3, #1
 8002294:	6079      	str	r1, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	b2c2      	uxtb	r2, r0
 800229a:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 16) & 0xFF); 			// 5
 800229c:	4b37      	ldr	r3, [pc, #220]	@ (800237c <My_Adv_Data_Init+0x188>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0c18      	lsrs	r0, r3, #16
 80022a2:	4b32      	ldr	r3, [pc, #200]	@ (800236c <My_Adv_Data_Init+0x178>)
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1c59      	adds	r1, r3, #1
 80022aa:	6079      	str	r1, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	b2c2      	uxtb	r2, r0
 80022b0:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 8) & 0xFF); 			// 6
 80022b2:	4b32      	ldr	r3, [pc, #200]	@ (800237c <My_Adv_Data_Init+0x188>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0a18      	lsrs	r0, r3, #8
 80022b8:	4b2c      	ldr	r3, [pc, #176]	@ (800236c <My_Adv_Data_Init+0x178>)
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1c59      	adds	r1, r3, #1
 80022c0:	6079      	str	r1, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	b2c2      	uxtb	r2, r0
 80022c6:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Temp & 0xFF); 					// 7
 80022c8:	4b2c      	ldr	r3, [pc, #176]	@ (800237c <My_Adv_Data_Init+0x188>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <My_Adv_Data_Init+0x178>)
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	6079      	str	r1, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	b2c2      	uxtb	r2, r0
 80022da:	701a      	strb	r2, [r3, #0]

		/**** Get RH from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 24) & 0xFF); 		// 8
 80022dc:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <My_Adv_Data_Init+0x18c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e18      	lsrs	r0, r3, #24
 80022e2:	4b22      	ldr	r3, [pc, #136]	@ (800236c <My_Adv_Data_Init+0x178>)
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	6079      	str	r1, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	b2c2      	uxtb	r2, r0
 80022f0:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 16) & 0xFF); 		// 9
 80022f2:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <My_Adv_Data_Init+0x18c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0c18      	lsrs	r0, r3, #16
 80022f8:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <My_Adv_Data_Init+0x178>)
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1c59      	adds	r1, r3, #1
 8002300:	6079      	str	r1, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	b2c2      	uxtb	r2, r0
 8002306:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 8) & 0xFF); 			// 10
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <My_Adv_Data_Init+0x18c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0a18      	lsrs	r0, r3, #8
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <My_Adv_Data_Init+0x178>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1c59      	adds	r1, r3, #1
 8002316:	6079      	str	r1, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	b2c2      	uxtb	r2, r0
 800231c:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Humid & 0xFF); 				// 11
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <My_Adv_Data_Init+0x18c>)
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <My_Adv_Data_Init+0x178>)
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1c59      	adds	r1, r3, #1
 800232a:	6079      	str	r1, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	b2c2      	uxtb	r2, r0
 8002330:	701a      	strb	r2, [r3, #0]

		AppData.Buffer[i++] = (uint8_t)((my_Trise_time_stop >> 8) & 0xFF); 		// 43
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time_stop & 0xFF); 			// 44
#endif
		/* Send the result of the neural network*/
		AppData.Buffer[i++] =(uint8_t)(result_nn);
 8002332:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <My_Adv_Data_Init+0x178>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1c59      	adds	r1, r3, #1
 800233a:	6079      	str	r1, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a11      	ldr	r2, [pc, #68]	@ (8002384 <My_Adv_Data_Init+0x190>)
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	701a      	strb	r2, [r3, #0]
	}

	AppData.BufferSize = i;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <My_Adv_Data_Init+0x178>)
 800234a:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <My_Adv_Data_Init+0x178>)
 800234e:	2202      	movs	r2, #2
 8002350:	701a      	strb	r2, [r3, #0]
	my_Trise_time = 0;
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <My_Adv_Data_Init+0x174>)
 8002354:	2200      	movs	r2, #0
 8002356:	801a      	strh	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000841 	.word	0x20000841
 8002368:	20001b62 	.word	0x20001b62
 800236c:	20000068 	.word	0x20000068
 8002370:	20001b86 	.word	0x20001b86
 8002374:	20001b54 	.word	0x20001b54
 8002378:	20001b55 	.word	0x20001b55
 800237c:	20001b90 	.word	0x20001b90
 8002380:	20001b94 	.word	0x20001b94
 8002384:	200019e4 	.word	0x200019e4

08002388 <My_EMS_Adv_Data_Init>:

void My_EMS_Adv_Data_Init(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
	uint8_t j = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	70fb      	strb	r3, [r7, #3]

	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 8002396:	2300      	movs	r3, #0
 8002398:	70fb      	strb	r3, [r7, #3]
 800239a:	e021      	b.n	80023e0 <My_EMS_Adv_Data_Init+0x58>
	{
		AppData.Buffer[i++] = (uint8_t)((my_ems_buffer[j] >> 8) & 0xFF);
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	4a18      	ldr	r2, [pc, #96]	@ (8002400 <My_EMS_Adv_Data_Init+0x78>)
 80023a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b298      	uxth	r0, r3
 80023a8:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <My_EMS_Adv_Data_Init+0x7c>)
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	6079      	str	r1, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	b2c2      	uxtb	r2, r0
 80023b6:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_ems_buffer[j] & 0xFF);
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	4a11      	ldr	r2, [pc, #68]	@ (8002400 <My_EMS_Adv_Data_Init+0x78>)
 80023bc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80023c0:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <My_EMS_Adv_Data_Init+0x7c>)
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1c59      	adds	r1, r3, #1
 80023c8:	6079      	str	r1, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	b2c2      	uxtb	r2, r0
 80023ce:	701a      	strb	r2, [r3, #0]
		my_ems_buffer[j] = 0;
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002400 <My_EMS_Adv_Data_Init+0x78>)
 80023d4:	2100      	movs	r1, #0
 80023d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	3301      	adds	r3, #1
 80023de:	70fb      	strb	r3, [r7, #3]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d9da      	bls.n	800239c <My_EMS_Adv_Data_Init+0x14>
	}
	AppData.BufferSize = i;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <My_EMS_Adv_Data_Init+0x7c>)
 80023ec:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 80023ee:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <My_EMS_Adv_Data_Init+0x7c>)
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]

}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20001b68 	.word	0x20001b68
 8002404:	20000068 	.word	0x20000068

08002408 <SendTxData>:

void SendTxData(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 800240c:	f019 fd6c 	bl	801bee8 <My_Set_All_GPIO_To_Analog_Mode>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);											// Open VDD to ES Switch
 8002410:	2000      	movs	r0, #0
 8002412:	f01a f8d3 	bl	801c5bc <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_OPEN);										// unBias the Sensors
#endif

	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0); 	// Configure Radio Interrupt with the Highest Priority
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2032      	movs	r0, #50	@ 0x32
 800241c:	f000 fb6d 	bl	8002afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);			// Set Radio Interrupt
 8002420:	2032      	movs	r0, #50	@ 0x32
 8002422:	f000 fb84 	bl	8002b2e <HAL_NVIC_EnableIRQ>

	if (my_Current_State == PSS)
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <SendTxData+0xa0>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d113      	bne.n	8002456 <SendTxData+0x4e>
	{
		HAL_ResumeTick();
 800242e:	f000 fa4d 	bl	80028cc <HAL_ResumeTick>
		while(1)
		{
			My_Adv_Data_Init();
 8002432:	f7ff fedf 	bl	80021f4 <My_Adv_Data_Init>
			HAL_Delay(3000);			// If Supplied by a Battery --> Add a delay for the Idle time between TX
 8002436:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800243a:	f7ff f8f7 	bl	800162c <HAL_Delay>
			my_Previous_State = PSS;
 800243e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <SendTxData+0xa4>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
			LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 8002444:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <SendTxData+0xa8>)
 8002446:	78db      	ldrb	r3, [r3, #3]
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	4819      	ldr	r0, [pc, #100]	@ (80024b4 <SendTxData+0xac>)
 800244e:	f007 fa75 	bl	800993c <LmHandlerSend>
			My_Adv_Data_Init();
 8002452:	bf00      	nop
 8002454:	e7ed      	b.n	8002432 <SendTxData+0x2a>
		}
	}
	else
	{
		My_Exit_Stop2_Mode_WFI();
 8002456:	f019 fe01 	bl	801c05c <My_Exit_Stop2_Mode_WFI>

		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);	// Clear LPTIM1 Interrupt
 800245a:	2027      	movs	r0, #39	@ 0x27
 800245c:	f000 fb83 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);		// Disable LPTIM1 Interrupt
 8002460:	2027      	movs	r0, #39	@ 0x27
 8002462:	f000 fb72 	bl	8002b4a <HAL_NVIC_DisableIRQ>

		if (my_Current_State != SMS)
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <SendTxData+0xa0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b07      	cmp	r3, #7
 800246c:	d005      	beq.n	800247a <SendTxData+0x72>
		{
			my_Previous_State = EHS;
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <SendTxData+0xa4>)
 8002470:	2203      	movs	r2, #3
 8002472:	701a      	strb	r2, [r3, #0]
			my_Current_State = RTS;				// EHS --> RTS
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <SendTxData+0xa0>)
 8002476:	2202      	movs	r2, #2
 8002478:	701a      	strb	r2, [r3, #0]
		}

		/*Check if it is the first Wake-up event after the Energy Missing State (EMS)
		 *If the system just woke up from EMS it sends the buffer that has been filled during the night
		 */
		if(my_Previous_State == EMS)
 800247a:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <SendTxData+0xa4>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d102      	bne.n	8002488 <SendTxData+0x80>
		{
			My_EMS_Adv_Data_Init();
 8002482:	f7ff ff81 	bl	8002388 <My_EMS_Adv_Data_Init>
 8002486:	e001      	b.n	800248c <SendTxData+0x84>
		}
		else 									// Otherwise it sends the last measurement
		{
			My_Adv_Data_Init();
 8002488:	f7ff feb4 	bl	80021f4 <My_Adv_Data_Init>
		}

		BSP_RADIO_Init();
 800248c:	f000 f8de 	bl	800264c <BSP_RADIO_Init>
		LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 8002490:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <SendTxData+0xa8>)
 8002492:	78db      	ldrb	r3, [r3, #3]
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	4806      	ldr	r0, [pc, #24]	@ (80024b4 <SendTxData+0xac>)
 800249a:	f007 fa4f 	bl	800993c <LmHandlerSend>
		BSP_RADIO_DeInit();
 800249e:	f000 f913 	bl	80026c8 <BSP_RADIO_DeInit>
	}
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20001b85 	.word	0x20001b85
 80024ac:	20001b84 	.word	0x20001b84
 80024b0:	20000050 	.word	0x20000050
 80024b4:	20000068 	.word	0x20000068

080024b8 <OnTxData>:

}
#endif
#if MY_TX_ABP
static void OnTxData(LmHandlerTxParams_t *params)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnTxData_1 */

	/* USER CODE END OnTxData_1 */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <OnMacProcessNotify>:
}
#endif

#if MY_TX
static void OnMacProcessNotify(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
#if MY_TX_ABP
	/* USER CODE BEGIN OnMacProcessNotify_1 */
	LoRaMacProcess( );                                                            // should be Called at first the LoRaMAC process before to run all package process features
 80024ce:	f009 f8a7 	bl	800b620 <LoRaMacProcess>

	/* USER CODE END OnMacProcessNotify_1 */

	/* USER CODE BEGIN OnMacProcessNotify_2 */
	UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
 80024d2:	2100      	movs	r1, #0
 80024d4:	2020      	movs	r0, #32
 80024d6:	f017 f9e9 	bl	80198ac <UTIL_SEQ_SetTask>
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
		}
	/* USER CODE END OnMacProcessNotify_2 */
#endif
	/* USER CODE END OnMacProcessNotify_2 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 80024e4:	4b15      	ldr	r3, [pc, #84]	@ (800253c <LoraInfo_Init+0x5c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80024ea:	4b14      	ldr	r3, [pc, #80]	@ (800253c <LoraInfo_Init+0x5c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <LoraInfo_Init+0x5c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <LoraInfo_Init+0x5c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80024fc:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <LoraInfo_Init+0x5c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f043 0320 	orr.w	r3, r3, #32
 8002504:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <LoraInfo_Init+0x5c>)
 8002506:	6053      	str	r3, [r2, #4]
#endif
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <LoraInfo_Init+0x5c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10d      	bne.n	800252c <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <LoraInfo_Init+0x60>)
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2000      	movs	r0, #0
 8002518:	f016 fd70 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800251c:	bf00      	nop
 800251e:	f016 fd5b 	bl	8018fd8 <UTIL_ADV_TRACE_IsBufferEmpty>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d1fa      	bne.n	800251e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <LoraInfo_Init+0x5c>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002532:	4b02      	ldr	r3, [pc, #8]	@ (800253c <LoraInfo_Init+0x5c>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000938 	.word	0x20000938
 8002540:	0802014c 	.word	0x0802014c

08002544 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8002548:	4b02      	ldr	r3, [pc, #8]	@ (8002554 <LoraInfo_GetPtr+0x10>)
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000938 	.word	0x20000938

08002558 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800255c:	f000 f876 	bl	800264c <BSP_RADIO_Init>
 8002560:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}

08002566 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f8ce 	bl	8002714 <BSP_RADIO_ConfigRFSwitch>
 8002578:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002586:	f000 f921 	bl	80027cc <BSP_RADIO_GetTxConfig>
 800258a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}

08002590 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002594:	f000 f921 	bl	80027da <BSP_RADIO_IsTCXO>
 8002598:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800259a:	4618      	mov	r0, r3
 800259c:	bd80      	pop	{r7, pc}

0800259e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80025a2:	f000 f921 	bl	80027e8 <BSP_RADIO_IsDCDC>
 80025a6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}

080025ac <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f91c 	bl	80027f6 <BSP_RADIO_GetRFOMaxPowerConfig>
 80025be:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025c8:	480d      	ldr	r0, [pc, #52]	@ (8002600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025cc:	f01a f8fe 	bl	801c7cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d0:	480c      	ldr	r0, [pc, #48]	@ (8002604 <LoopForever+0x6>)
  ldr r1, =_edata
 80025d2:	490d      	ldr	r1, [pc, #52]	@ (8002608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025d4:	4a0d      	ldr	r2, [pc, #52]	@ (800260c <LoopForever+0xe>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002614 <LoopForever+0x16>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025f6:	f01c fec7 	bl	801f388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fa:	f7fe fdc7 	bl	800118c <main>

080025fe <LoopForever>:

LoopForever:
    b LoopForever
 80025fe:	e7fe      	b.n	80025fe <LoopForever>
  ldr   r0, =_estack
 8002600:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002608:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 800260c:	08020e30 	.word	0x08020e30
  ldr r2, =_sbss
 8002610:	200006cc 	.word	0x200006cc
  ldr r4, =_ebss
 8002614:	20001dd0 	.word	0x20001dd0

08002618 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC_IRQHandler>

0800261a <LL_AHB2_GRP1_EnableClock>:
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4313      	orrs	r3, r2
 8002630:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4013      	ands	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002660:	2004      	movs	r0, #4
 8002662:	f7ff ffda 	bl	800261a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002666:	2310      	movs	r3, #16
 8002668:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800266a:	2301      	movs	r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4812      	ldr	r0, [pc, #72]	@ (80026c4 <BSP_RADIO_Init+0x78>)
 800267c:	f000 fe9a 	bl	80033b4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002680:	2320      	movs	r3, #32
 8002682:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4619      	mov	r1, r3
 8002688:	480e      	ldr	r0, [pc, #56]	@ (80026c4 <BSP_RADIO_Init+0x78>)
 800268a:	f000 fe93 	bl	80033b4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800268e:	2308      	movs	r3, #8
 8002690:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	4619      	mov	r1, r3
 8002696:	480b      	ldr	r0, [pc, #44]	@ (80026c4 <BSP_RADIO_Init+0x78>)
 8002698:	f000 fe8c 	bl	80033b4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800269c:	2200      	movs	r2, #0
 800269e:	2120      	movs	r1, #32
 80026a0:	4808      	ldr	r0, [pc, #32]	@ (80026c4 <BSP_RADIO_Init+0x78>)
 80026a2:	f001 f8b5 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80026a6:	2200      	movs	r2, #0
 80026a8:	2110      	movs	r1, #16
 80026aa:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <BSP_RADIO_Init+0x78>)
 80026ac:	f001 f8b0 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80026b0:	2200      	movs	r2, #0
 80026b2:	2108      	movs	r1, #8
 80026b4:	4803      	ldr	r0, [pc, #12]	@ (80026c4 <BSP_RADIO_Init+0x78>)
 80026b6:	f001 f8ab 	bl	8003810 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	48000800 	.word	0x48000800

080026c8 <BSP_RADIO_DeInit>:
/**
  * @brief  DeInit Radio Switch
  * @retval BSP status
  */
int32_t BSP_RADIO_DeInit(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80026cc:	2004      	movs	r0, #4
 80026ce:	f7ff ffa4 	bl	800261a <LL_AHB2_GRP1_EnableClock>

  /* Turn off switch */
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80026d2:	2200      	movs	r2, #0
 80026d4:	2110      	movs	r1, #16
 80026d6:	480e      	ldr	r0, [pc, #56]	@ (8002710 <BSP_RADIO_DeInit+0x48>)
 80026d8:	f001 f89a 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80026dc:	2200      	movs	r2, #0
 80026de:	2120      	movs	r1, #32
 80026e0:	480b      	ldr	r0, [pc, #44]	@ (8002710 <BSP_RADIO_DeInit+0x48>)
 80026e2:	f001 f895 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80026e6:	2200      	movs	r2, #0
 80026e8:	2108      	movs	r1, #8
 80026ea:	4809      	ldr	r0, [pc, #36]	@ (8002710 <BSP_RADIO_DeInit+0x48>)
 80026ec:	f001 f890 	bl	8003810 <HAL_GPIO_WritePin>
  
  /* DeInit the Radio Switch pin */
  HAL_GPIO_DeInit(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN);
 80026f0:	2110      	movs	r1, #16
 80026f2:	4807      	ldr	r0, [pc, #28]	@ (8002710 <BSP_RADIO_DeInit+0x48>)
 80026f4:	f000 ffbe 	bl	8003674 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN);
 80026f8:	2120      	movs	r1, #32
 80026fa:	4805      	ldr	r0, [pc, #20]	@ (8002710 <BSP_RADIO_DeInit+0x48>)
 80026fc:	f000 ffba 	bl	8003674 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN);
 8002700:	2108      	movs	r1, #8
 8002702:	4803      	ldr	r0, [pc, #12]	@ (8002710 <BSP_RADIO_DeInit+0x48>)
 8002704:	f000 ffb6 	bl	8003674 <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	48000800 	.word	0x48000800

08002714 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d84b      	bhi.n	80027bc <BSP_RADIO_ConfigRFSwitch+0xa8>
 8002724:	a201      	add	r2, pc, #4	@ (adr r2, 800272c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	0800273d 	.word	0x0800273d
 8002730:	0800275d 	.word	0x0800275d
 8002734:	0800277d 	.word	0x0800277d
 8002738:	0800279d 	.word	0x0800279d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	2108      	movs	r1, #8
 8002740:	4821      	ldr	r0, [pc, #132]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002742:	f001 f865 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	2110      	movs	r1, #16
 800274a:	481f      	ldr	r0, [pc, #124]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800274c:	f001 f860 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002750:	2200      	movs	r2, #0
 8002752:	2120      	movs	r1, #32
 8002754:	481c      	ldr	r0, [pc, #112]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002756:	f001 f85b 	bl	8003810 <HAL_GPIO_WritePin>
      break;      
 800275a:	e030      	b.n	80027be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	2108      	movs	r1, #8
 8002760:	4819      	ldr	r0, [pc, #100]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002762:	f001 f855 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002766:	2201      	movs	r2, #1
 8002768:	2110      	movs	r1, #16
 800276a:	4817      	ldr	r0, [pc, #92]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800276c:	f001 f850 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002770:	2200      	movs	r2, #0
 8002772:	2120      	movs	r1, #32
 8002774:	4814      	ldr	r0, [pc, #80]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002776:	f001 f84b 	bl	8003810 <HAL_GPIO_WritePin>
      break;
 800277a:	e020      	b.n	80027be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800277c:	2201      	movs	r2, #1
 800277e:	2108      	movs	r1, #8
 8002780:	4811      	ldr	r0, [pc, #68]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002782:	f001 f845 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002786:	2201      	movs	r2, #1
 8002788:	2110      	movs	r1, #16
 800278a:	480f      	ldr	r0, [pc, #60]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800278c:	f001 f840 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002790:	2201      	movs	r2, #1
 8002792:	2120      	movs	r1, #32
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002796:	f001 f83b 	bl	8003810 <HAL_GPIO_WritePin>
      break;
 800279a:	e010      	b.n	80027be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	2108      	movs	r1, #8
 80027a0:	4809      	ldr	r0, [pc, #36]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80027a2:	f001 f835 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80027a6:	2200      	movs	r2, #0
 80027a8:	2110      	movs	r1, #16
 80027aa:	4807      	ldr	r0, [pc, #28]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80027ac:	f001 f830 	bl	8003810 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80027b0:	2201      	movs	r2, #1
 80027b2:	2120      	movs	r1, #32
 80027b4:	4804      	ldr	r0, [pc, #16]	@ (80027c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80027b6:	f001 f82b 	bl	8003810 <HAL_GPIO_WritePin>
      break;
 80027ba:	e000      	b.n	80027be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80027bc:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	48000800 	.word	0x48000800

080027cc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80027ec:	2301      	movs	r3, #1
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002806:	230f      	movs	r3, #15
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e001      	b.n	8002810 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800280c:	2316      	movs	r3, #22
 800280e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002810:	68fb      	ldr	r3, [r7, #12]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a03      	ldr	r2, [pc, #12]	@ (8002834 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	6053      	str	r3, [r2, #4]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	e0042000 	.word	0xe0042000

08002838 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a03      	ldr	r2, [pc, #12]	@ (8002850 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002842:	f023 0302 	bic.w	r3, r3, #2
 8002846:	6053      	str	r3, [r2, #4]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	e0042000 	.word	0xe0042000

08002854 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a03      	ldr	r2, [pc, #12]	@ (800286c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800285e:	f023 0304 	bic.w	r3, r3, #4
 8002862:	6053      	str	r3, [r2, #4]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	e0042000 	.word	0xe0042000

08002870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287a:	2003      	movs	r0, #3
 800287c:	f000 f932 	bl	8002ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002880:	f002 fff0 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 8002884:	4603      	mov	r3, r0
 8002886:	4a09      	ldr	r2, [pc, #36]	@ (80028ac <HAL_Init+0x3c>)
 8002888:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800288a:	200f      	movs	r0, #15
 800288c:	f7fe feb0 	bl	80015f0 <HAL_InitTick>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	71fb      	strb	r3, [r7, #7]
 800289a:	e001      	b.n	80028a0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800289c:	f7fe fd3d 	bl	800131a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028a0:	79fb      	ldrb	r3, [r7, #7]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000070 	.word	0x20000070

080028b0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <HAL_SuspendTick+0x18>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a03      	ldr	r2, [pc, #12]	@ (80028c8 <HAL_SuspendTick+0x18>)
 80028ba:	f023 0302 	bic.w	r3, r3, #2
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <HAL_ResumeTick+0x18>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a03      	ldr	r2, [pc, #12]	@ (80028e4 <HAL_ResumeTick+0x18>)
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	e000e010 	.word	0xe000e010

080028e8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80028ec:	f7ff ff96 	bl	800281c <LL_DBGMCU_DisableDBGSleepMode>
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80028f8:	f7ff ff9e 	bl	8002838 <LL_DBGMCU_DisableDBGStopMode>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002904:	f7ff ffa6 	bl	8002854 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4906      	ldr	r1, [pc, #24]	@ (80029a4 <__NVIC_EnableIRQ+0x34>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db12      	blt.n	80029e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	490a      	ldr	r1, [pc, #40]	@ (80029ec <__NVIC_DisableIRQ+0x44>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	3320      	adds	r3, #32
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029d4:	f3bf 8f4f 	dsb	sy
}
 80029d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029da:	f3bf 8f6f 	isb	sy
}
 80029de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0c      	blt.n	8002a1c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <__NVIC_ClearPendingIRQ+0x38>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	3360      	adds	r3, #96	@ 0x60
 8002a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	@ (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	@ (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff0d 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b08:	f7ff ff24 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7ff ffb4 	bl	8002a80 <NVIC_EncodePriority>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff83 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff17 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff25 	bl	80029a8 <__NVIC_DisableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff3b 	bl	80029f0 <__NVIC_ClearPendingIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e08e      	b.n	8002cb4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b47      	ldr	r3, [pc, #284]	@ (8002cbc <HAL_DMA_Init+0x138>)
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d80f      	bhi.n	8002bc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b45      	ldr	r3, [pc, #276]	@ (8002cc0 <HAL_DMA_Init+0x13c>)
 8002baa:	4413      	add	r3, r2
 8002bac:	4a45      	ldr	r2, [pc, #276]	@ (8002cc4 <HAL_DMA_Init+0x140>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	009a      	lsls	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a42      	ldr	r2, [pc, #264]	@ (8002cc8 <HAL_DMA_Init+0x144>)
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bc0:	e00e      	b.n	8002be0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <HAL_DMA_Init+0x148>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc4 <HAL_DMA_Init+0x140>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd0 <HAL_DMA_Init+0x14c>)
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bfa:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fb52 	bl	80032dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c40:	d102      	bne.n	8002c48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c54:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c5e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_DMA_Init+0x106>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d80c      	bhi.n	8002c8a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fb7b 	bl	800336c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	e008      	b.n	8002c9c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40020407 	.word	0x40020407
 8002cc0:	bffdfff8 	.word	0xbffdfff8
 8002cc4:	cccccccd 	.word	0xcccccccd
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	bffdfbf8 	.word	0xbffdfbf8
 8002cd0:	40020400 	.word	0x40020400

08002cd4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e07b      	b.n	8002dde <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002de8 <HAL_DMA_DeInit+0x114>)
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d80f      	bhi.n	8002d22 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <HAL_DMA_DeInit+0x118>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a38      	ldr	r2, [pc, #224]	@ (8002df0 <HAL_DMA_DeInit+0x11c>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a35      	ldr	r2, [pc, #212]	@ (8002df4 <HAL_DMA_DeInit+0x120>)
 8002d1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d20:	e00e      	b.n	8002d40 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b33      	ldr	r3, [pc, #204]	@ (8002df8 <HAL_DMA_DeInit+0x124>)
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a30      	ldr	r2, [pc, #192]	@ (8002df0 <HAL_DMA_DeInit+0x11c>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	009a      	lsls	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <HAL_DMA_DeInit+0x128>)
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4c:	f003 021c 	and.w	r2, r3, #28
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fabd 	bl	80032dc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d72:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00f      	beq.n	8002d9c <HAL_DMA_DeInit+0xc8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d80b      	bhi.n	8002d9c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 faf1 	bl	800336c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020407 	.word	0x40020407
 8002dec:	bffdfff8 	.word	0xbffdfff8
 8002df0:	cccccccd 	.word	0xcccccccd
 8002df4:	40020000 	.word	0x40020000
 8002df8:	bffdfbf8 	.word	0xbffdfbf8
 8002dfc:	40020400 	.word	0x40020400

08002e00 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_DMA_Start_IT+0x20>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e069      	b.n	8002ef4 <HAL_DMA_Start_IT+0xf4>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d155      	bne.n	8002ee0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fa02 	bl	8003262 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 020e 	orr.w	r2, r2, #14
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00f      	b.n	8002e98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 020a 	orr.w	r2, r2, #10
 8002e96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ecc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e008      	b.n	8002ef2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e04f      	b.n	8002fae <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d008      	beq.n	8002f2c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e040      	b.n	8002fae <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 020e 	bic.w	r2, r2, #14
 8002f3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	f003 021c 	and.w	r2, r3, #28
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d005      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e047      	b.n	800306c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 020e 	bic.w	r2, r2, #14
 8002fea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003006:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800300a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003010:	f003 021c 	and.w	r2, r3, #28
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	2101      	movs	r1, #1
 800301a:	fa01 f202 	lsl.w	r2, r1, r2
 800301e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003028:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003040:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800304a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
    }
  }
  return status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003094:	f003 031c 	and.w	r3, r3, #28
 8003098:	2204      	movs	r2, #4
 800309a:	409a      	lsls	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d027      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x7c>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d022      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0204 	bic.w	r2, r2, #4
 80030ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	f003 021c 	and.w	r2, r3, #28
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	2104      	movs	r1, #4
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8081 	beq.w	80031ec <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80030f2:	e07b      	b.n	80031ec <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	f003 031c 	and.w	r3, r3, #28
 80030fc:	2202      	movs	r2, #2
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03d      	beq.n	8003184 <HAL_DMA_IRQHandler+0x10c>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d038      	beq.n	8003184 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 020a 	bic.w	r2, r2, #10
 800312e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4b2e      	ldr	r3, [pc, #184]	@ (80031f8 <HAL_DMA_IRQHandler+0x180>)
 8003140:	429a      	cmp	r2, r3
 8003142:	d909      	bls.n	8003158 <HAL_DMA_IRQHandler+0xe0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003148:	f003 031c 	and.w	r3, r3, #28
 800314c:	4a2b      	ldr	r2, [pc, #172]	@ (80031fc <HAL_DMA_IRQHandler+0x184>)
 800314e:	2102      	movs	r1, #2
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	6053      	str	r3, [r2, #4]
 8003156:	e008      	b.n	800316a <HAL_DMA_IRQHandler+0xf2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315c:	f003 031c 	and.w	r3, r3, #28
 8003160:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <HAL_DMA_IRQHandler+0x188>)
 8003162:	2102      	movs	r1, #2
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d038      	beq.n	80031ec <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003182:	e033      	b.n	80031ec <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003188:	f003 031c 	and.w	r3, r3, #28
 800318c:	2208      	movs	r2, #8
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02a      	beq.n	80031ee <HAL_DMA_IRQHandler+0x176>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d025      	beq.n	80031ee <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 020e 	bic.w	r2, r2, #14
 80031b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f003 021c 	and.w	r2, r3, #28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
}
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40020080 	.word	0x40020080
 80031fc:	40020400 	.word	0x40020400
 8003200:	40020000 	.word	0x40020000

08003204 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	72fb      	strb	r3, [r7, #11]
    return status;
 800321c:	7afb      	ldrb	r3, [r7, #11]
 800321e:	e01b      	b.n	8003258 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e003      	b.n	800324e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800324c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]

  return status;
 8003256:	7afb      	ldrb	r3, [r7, #11]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003278:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	f003 021c 	and.w	r2, r3, #28
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f202 	lsl.w	r2, r1, r2
 800329e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d108      	bne.n	80032c2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032c0:	e007      	b.n	80032d2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	60da      	str	r2, [r3, #12]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d813      	bhi.n	8003318 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032fc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3b08      	subs	r3, #8
 800330c:	4a14      	ldr	r2, [pc, #80]	@ (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e011      	b.n	800333c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	009a      	lsls	r2, r3, #2
 8003320:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003322:	4413      	add	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3b08      	subs	r3, #8
 8003330:	4a0b      	ldr	r2, [pc, #44]	@ (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	3307      	adds	r3, #7
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003340:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2201      	movs	r2, #1
 800334a:	409a      	lsls	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40020407 	.word	0x40020407
 8003360:	cccccccd 	.word	0xcccccccd
 8003364:	4002081c 	.word	0x4002081c
 8003368:	40020880 	.word	0x40020880

0800336c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800337c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a08      	ldr	r2, [pc, #32]	@ (80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003390:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3b01      	subs	r3, #1
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	1000823f 	.word	0x1000823f
 80033b0:	40020940 	.word	0x40020940

080033b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c2:	e140      	b.n	8003646 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8132 	beq.w	8003640 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d005      	beq.n	80033f4 <HAL_GPIO_Init+0x40>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d130      	bne.n	8003456 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800342a:	2201      	movs	r2, #1
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 0201 	and.w	r2, r3, #1
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b03      	cmp	r3, #3
 8003460:	d017      	beq.n	8003492 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d123      	bne.n	80034e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	220f      	movs	r2, #15
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	08da      	lsrs	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3208      	adds	r2, #8
 80034e0:	6939      	ldr	r1, [r7, #16]
 80034e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0203 	and.w	r2, r3, #3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 808c 	beq.w	8003640 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003528:	4a4e      	ldr	r2, [pc, #312]	@ (8003664 <HAL_GPIO_Init+0x2b0>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	2207      	movs	r2, #7
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003552:	d00d      	beq.n	8003570 <HAL_GPIO_Init+0x1bc>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a44      	ldr	r2, [pc, #272]	@ (8003668 <HAL_GPIO_Init+0x2b4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <HAL_GPIO_Init+0x1b8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a43      	ldr	r2, [pc, #268]	@ (800366c <HAL_GPIO_Init+0x2b8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_GPIO_Init+0x1b4>
 8003564:	2302      	movs	r3, #2
 8003566:	e004      	b.n	8003572 <HAL_GPIO_Init+0x1be>
 8003568:	2307      	movs	r3, #7
 800356a:	e002      	b.n	8003572 <HAL_GPIO_Init+0x1be>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_GPIO_Init+0x1be>
 8003570:	2300      	movs	r3, #0
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	f002 0203 	and.w	r2, r2, #3
 8003578:	0092      	lsls	r2, r2, #2
 800357a:	4093      	lsls	r3, r2
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003582:	4938      	ldr	r1, [pc, #224]	@ (8003664 <HAL_GPIO_Init+0x2b0>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003590:	4b37      	ldr	r3, [pc, #220]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43db      	mvns	r3, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035de:	4a24      	ldr	r2, [pc, #144]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80035e4:	4b22      	ldr	r3, [pc, #136]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ea:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800360a:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003612:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 8003614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003618:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <HAL_GPIO_Init+0x2bc>)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3301      	adds	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f47f aeb7 	bne.w	80033c4 <HAL_GPIO_Init+0x10>
  }
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40010000 	.word	0x40010000
 8003668:	48000400 	.word	0x48000400
 800366c:	48000800 	.word	0x48000800
 8003670:	58000800 	.word	0x58000800

08003674 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003682:	e0af      	b.n	80037e4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003684:	2201      	movs	r2, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a2 	beq.w	80037de <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800369a:	4a59      	ldr	r2, [pc, #356]	@ (8003800 <HAL_GPIO_DeInit+0x18c>)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	2207      	movs	r2, #7
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036c2:	d00d      	beq.n	80036e0 <HAL_GPIO_DeInit+0x6c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003804 <HAL_GPIO_DeInit+0x190>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <HAL_GPIO_DeInit+0x68>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003808 <HAL_GPIO_DeInit+0x194>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_GPIO_DeInit+0x64>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e004      	b.n	80036e2 <HAL_GPIO_DeInit+0x6e>
 80036d8:	2307      	movs	r3, #7
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_DeInit+0x6e>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_GPIO_DeInit+0x6e>
 80036e0:	2300      	movs	r3, #0
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	f002 0203 	and.w	r2, r2, #3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4093      	lsls	r3, r2
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d136      	bne.n	8003760 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80036f2:	4b46      	ldr	r3, [pc, #280]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 80036f4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	4943      	ldr	r1, [pc, #268]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 80036fe:	4013      	ands	r3, r2
 8003700:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003704:	4b41      	ldr	r3, [pc, #260]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 8003706:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	43db      	mvns	r3, r3
 800370e:	493f      	ldr	r1, [pc, #252]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 8003710:	4013      	ands	r3, r2
 8003712:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003716:	4b3d      	ldr	r3, [pc, #244]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	493b      	ldr	r1, [pc, #236]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 8003720:	4013      	ands	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003724:	4b39      	ldr	r3, [pc, #228]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	4937      	ldr	r1, [pc, #220]	@ (800380c <HAL_GPIO_DeInit+0x198>)
 800372e:	4013      	ands	r3, r2
 8003730:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	2207      	movs	r2, #7
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003742:	4a2f      	ldr	r2, [pc, #188]	@ (8003800 <HAL_GPIO_DeInit+0x18c>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	43da      	mvns	r2, r3
 8003752:	482b      	ldr	r0, [pc, #172]	@ (8003800 <HAL_GPIO_DeInit+0x18c>)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	400a      	ands	r2, r1
 800375a:	3302      	adds	r3, #2
 800375c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2103      	movs	r1, #3
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	08da      	lsrs	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3208      	adds	r2, #8
 800377c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	220f      	movs	r2, #15
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	08d2      	lsrs	r2, r2, #3
 8003794:	4019      	ands	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3208      	adds	r2, #8
 800379a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2103      	movs	r1, #3
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	2101      	movs	r1, #1
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	401a      	ands	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	2103      	movs	r1, #3
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	401a      	ands	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60da      	str	r2, [r3, #12]
    }

    position++;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	3301      	adds	r3, #1
 80037e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f af49 	bne.w	8003684 <HAL_GPIO_DeInit+0x10>
  }
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	48000400 	.word	0x48000400
 8003808:	48000800 	.word	0x48000800
 800380c:	58000800 	.word	0x58000800

08003810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	807b      	strh	r3, [r7, #2]
 800381c:	4613      	mov	r3, r2
 800381e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003820:	787b      	ldrb	r3, [r7, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800382c:	e002      	b.n	8003834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
	...

08003840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800384a:	4b08      	ldr	r3, [pc, #32]	@ (800386c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f806 	bl	8003870 <HAL_GPIO_EXTI_Callback>
  }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	58000800 	.word	0x58000800

08003870 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e081      	b.n	800399a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f879 	bl	80039a2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	@ 0x24
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	e006      	b.n	800390c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800390a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d104      	bne.n	800391e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800391c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800392c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003930:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003940:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	461a      	mov	r2, r3
 80039c0:	460b      	mov	r3, r1
 80039c2:	817b      	strh	r3, [r7, #10]
 80039c4:	4613      	mov	r3, r2
 80039c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	f040 80da 	bne.w	8003b8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2C_Master_Transmit+0x30>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0d3      	b.n	8003b8c <HAL_I2C_Master_Transmit+0x1d8>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd fe0a 	bl	8001604 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2319      	movs	r3, #25
 80039f8:	2201      	movs	r2, #1
 80039fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f9e5 	bl	8003dce <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0be      	b.n	8003b8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	@ 0x21
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	893a      	ldrh	r2, [r7, #8]
 8003a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2bff      	cmp	r3, #255	@ 0xff
 8003a3e:	d90e      	bls.n	8003a5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	22ff      	movs	r2, #255	@ 0xff
 8003a44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	8979      	ldrh	r1, [r7, #10]
 8003a4e:	4b51      	ldr	r3, [pc, #324]	@ (8003b94 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fbd0 	bl	80041fc <I2C_TransferConfig>
 8003a5c:	e06c      	b.n	8003b38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	8979      	ldrh	r1, [r7, #10]
 8003a70:	4b48      	ldr	r3, [pc, #288]	@ (8003b94 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fbbf 	bl	80041fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a7e:	e05b      	b.n	8003b38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	6a39      	ldr	r1, [r7, #32]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f9e2 	bl	8003e4e <I2C_WaitOnTXISFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e07b      	b.n	8003b8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d034      	beq.n	8003b38 <HAL_I2C_Master_Transmit+0x184>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d130      	bne.n	8003b38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	@ 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f974 	bl	8003dce <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e04d      	b.n	8003b8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2bff      	cmp	r3, #255	@ 0xff
 8003af8:	d90e      	bls.n	8003b18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	22ff      	movs	r2, #255	@ 0xff
 8003afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fb73 	bl	80041fc <I2C_TransferConfig>
 8003b16:	e00f      	b.n	8003b38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	8979      	ldrh	r1, [r7, #10]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fb62 	bl	80041fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d19e      	bne.n	8003a80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	6a39      	ldr	r1, [r7, #32]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f9c1 	bl	8003ece <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e01a      	b.n	8003b8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_I2C_Master_Transmit+0x1e4>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	80002000 	.word	0x80002000
 8003b98:	fe00e800 	.word	0xfe00e800

08003b9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	817b      	strh	r3, [r7, #10]
 8003bac:	4613      	mov	r3, r2
 8003bae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	f040 80db 	bne.w	8003d74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2C_Master_Receive+0x30>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e0d4      	b.n	8003d76 <HAL_I2C_Master_Receive+0x1da>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fd16 	bl	8001604 <HAL_GetTick>
 8003bd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2319      	movs	r3, #25
 8003be0:	2201      	movs	r2, #1
 8003be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f8f1 	bl	8003dce <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0bf      	b.n	8003d76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2222      	movs	r2, #34	@ 0x22
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2210      	movs	r2, #16
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	893a      	ldrh	r2, [r7, #8]
 8003c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2bff      	cmp	r3, #255	@ 0xff
 8003c26:	d90e      	bls.n	8003c46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	22ff      	movs	r2, #255	@ 0xff
 8003c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	8979      	ldrh	r1, [r7, #10]
 8003c36:	4b52      	ldr	r3, [pc, #328]	@ (8003d80 <HAL_I2C_Master_Receive+0x1e4>)
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fadc 	bl	80041fc <I2C_TransferConfig>
 8003c44:	e06d      	b.n	8003d22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	8979      	ldrh	r1, [r7, #10]
 8003c58:	4b49      	ldr	r3, [pc, #292]	@ (8003d80 <HAL_I2C_Master_Receive+0x1e4>)
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 facb 	bl	80041fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003c66:	e05c      	b.n	8003d22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	6a39      	ldr	r1, [r7, #32]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f96b 	bl	8003f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e07c      	b.n	8003d76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d034      	beq.n	8003d22 <HAL_I2C_Master_Receive+0x186>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d130      	bne.n	8003d22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2180      	movs	r1, #128	@ 0x80
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f87f 	bl	8003dce <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e04d      	b.n	8003d76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2bff      	cmp	r3, #255	@ 0xff
 8003ce2:	d90e      	bls.n	8003d02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	22ff      	movs	r2, #255	@ 0xff
 8003ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	8979      	ldrh	r1, [r7, #10]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa7e 	bl	80041fc <I2C_TransferConfig>
 8003d00:	e00f      	b.n	8003d22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	8979      	ldrh	r1, [r7, #10]
 8003d14:	2300      	movs	r3, #0
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fa6d 	bl	80041fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d19d      	bne.n	8003c68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	6a39      	ldr	r1, [r7, #32]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f8cc 	bl	8003ece <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e01a      	b.n	8003d76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2220      	movs	r2, #32
 8003d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <HAL_I2C_Master_Receive+0x1e8>)
 8003d54:	400b      	ands	r3, r1
 8003d56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	80002400 	.word	0x80002400
 8003d84:	fe00e800 	.word	0xfe00e800

08003d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d103      	bne.n	8003da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d007      	beq.n	8003dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	619a      	str	r2, [r3, #24]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dde:	e022      	b.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d01e      	beq.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de8:	f7fd fc0c 	bl	8001604 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d302      	bcc.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d113      	bne.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d0cd      	beq.n	8003de0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e5a:	e02c      	b.n	8003eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f8eb 	bl	800403c <I2C_IsErrorOccurred>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e02a      	b.n	8003ec6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d01e      	beq.n	8003eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e78:	f7fd fbc4 	bl	8001604 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d113      	bne.n	8003eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0220 	orr.w	r2, r3, #32
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e007      	b.n	8003ec6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d1cb      	bne.n	8003e5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eda:	e028      	b.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f8ab 	bl	800403c <I2C_IsErrorOccurred>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e026      	b.n	8003f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef0:	f7fd fb88 	bl	8001604 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d113      	bne.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e007      	b.n	8003f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d1cf      	bne.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f54:	e064      	b.n	8004020 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f86e 	bl	800403c <I2C_IsErrorOccurred>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e062      	b.n	8004030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d138      	bne.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d105      	bne.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e04e      	b.n	8004030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d107      	bne.n	8003fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2204      	movs	r2, #4
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fae:	e002      	b.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003fca:	400b      	ands	r3, r1
 8003fcc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e022      	b.n	8004030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fd fb0b 	bl	8001604 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10f      	bne.n	8004020 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e007      	b.n	8004030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d193      	bne.n	8003f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	fe00e800 	.word	0xfe00e800

0800403c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	d068      	beq.n	800413a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2210      	movs	r2, #16
 800406e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004070:	e049      	b.n	8004106 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d045      	beq.n	8004106 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fd fac3 	bl	8001604 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <I2C_IsErrorOccurred+0x54>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d13a      	bne.n	8004106 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b2:	d121      	bne.n	80040f8 <I2C_IsErrorOccurred+0xbc>
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ba:	d01d      	beq.n	80040f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d01a      	beq.n	80040f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040d2:	f7fd fa97 	bl	8001604 <HAL_GetTick>
 80040d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d8:	e00e      	b.n	80040f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040da:	f7fd fa93 	bl	8001604 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b19      	cmp	r3, #25
 80040e6:	d907      	bls.n	80040f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f043 0320 	orr.w	r3, r3, #32
 80040ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80040f6:	e006      	b.n	8004106 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b20      	cmp	r3, #32
 8004104:	d1e9      	bne.n	80040da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b20      	cmp	r3, #32
 8004112:	d003      	beq.n	800411c <I2C_IsErrorOccurred+0xe0>
 8004114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0aa      	beq.n	8004072 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800411c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2220      	movs	r2, #32
 800412a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	f043 0304 	orr.w	r3, r3, #4
 8004132:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800415c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f043 0308 	orr.w	r3, r3, #8
 8004174:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800417e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80041a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01c      	beq.n	80041ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff fde9 	bl	8003d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <I2C_IsErrorOccurred+0x1bc>)
 80041c2:	400b      	ands	r3, r1
 80041c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80041ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3728      	adds	r7, #40	@ 0x28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	fe00e800 	.word	0xfe00e800

080041fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	817b      	strh	r3, [r7, #10]
 800420a:	4613      	mov	r3, r2
 800420c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004214:	7a7b      	ldrb	r3, [r7, #9]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800421c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	4313      	orrs	r3, r2
 8004226:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800422a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	0d5b      	lsrs	r3, r3, #21
 8004236:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800423a:	4b07      	ldr	r3, [pc, #28]	@ (8004258 <I2C_TransferConfig+0x5c>)
 800423c:	430b      	orrs	r3, r1
 800423e:	43db      	mvns	r3, r3
 8004240:	ea02 0103 	and.w	r1, r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	03ff63ff 	.word	0x03ff63ff

0800425c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	d138      	bne.n	80042e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800427c:	2302      	movs	r3, #2
 800427e:	e032      	b.n	80042e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	@ 0x24
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b20      	cmp	r3, #32
 8004304:	d139      	bne.n	800437a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004310:	2302      	movs	r3, #2
 8004312:	e033      	b.n	800437c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	@ 0x24
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004342:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
	...

08004388 <LL_EXTI_EnableIT_0_31>:
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <LL_EXTI_EnableIT_0_31+0x24>)
 8004392:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004396:	4905      	ldr	r1, [pc, #20]	@ (80043ac <LL_EXTI_EnableIT_0_31+0x24>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	58000800 	.word	0x58000800

080043b0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80043ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	4904      	ldr	r1, [pc, #16]	@ (80043d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	58000800 	.word	0x58000800

080043d8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4904      	ldr	r1, [pc, #16]	@ (80043f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]

}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	58000800 	.word	0x58000800

080043fc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	43db      	mvns	r3, r3
 800440c:	4903      	ldr	r1, [pc, #12]	@ (800441c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800440e:	4013      	ands	r3, r2
 8004410:	600b      	str	r3, [r1, #0]

}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	58000800 	.word	0x58000800

08004420 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4904      	ldr	r1, [pc, #16]	@ (8004440 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	58000800 	.word	0x58000800

08004444 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	43db      	mvns	r3, r3
 8004454:	4903      	ldr	r1, [pc, #12]	@ (8004464 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004456:	4013      	ands	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	58000800 	.word	0x58000800

08004468 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446c:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <HAL_PWR_EnableBkUpAccess+0x18>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a03      	ldr	r2, [pc, #12]	@ (8004480 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr
 8004480:	58000400 	.word	0x58000400

08004484 <HAL_PWR_ConfigPVD>:
  * @note   For devices dual core: if "sConfigPVD->Mode" is set to PVD_MODE_IT,
  *         wake-up target is set to wake-up the selected CPU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800448c:	4b1b      	ldr	r3, [pc, #108]	@ (80044fc <HAL_PWR_ConfigPVD+0x78>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 020e 	bic.w	r2, r3, #14
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4918      	ldr	r1, [pc, #96]	@ (80044fc <HAL_PWR_ConfigPVD+0x78>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WL series, power PVD event is not available on EXTI lines   */
  /*       (only interruption is available through EXTI line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800449e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80044a2:	f7ff ff85 	bl	80043b0 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80044a6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80044aa:	f7ff ffcb 	bl	8004444 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80044ae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80044b2:	f7ff ffa3 	bl	80043fc <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_PWR_ConfigPVD+0x46>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80044c2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80044c6:	f7ff ff5f 	bl	8004388 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_PWR_ConfigPVD+0x5a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80044d6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80044da:	f7ff ffa1 	bl	8004420 <LL_EXTI_EnableFallingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_PWR_ConfigPVD+0x6e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80044ea:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80044ee:	f7ff ff73 	bl	80043d8 <LL_EXTI_EnableRisingTrig_0_31>
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	58000400 	.word	0x58000400

08004500 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004504:	4b04      	ldr	r3, [pc, #16]	@ (8004518 <HAL_PWR_EnablePVD+0x18>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a03      	ldr	r2, [pc, #12]	@ (8004518 <HAL_PWR_EnablePVD+0x18>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6053      	str	r3, [r2, #4]
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	58000400 	.word	0x58000400

0800451c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800452e:	4b13      	ldr	r3, [pc, #76]	@ (800457c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800453a:	d10d      	bne.n	8004558 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800453c:	f000 f8cc 	bl	80046d8 <HAL_PWREx_DisableLowPowerRunMode>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004546:	e015      	b.n	8004574 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <HAL_PWR_EnterSLEEPMode+0x60>)
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004554:	f000 f8b2 	bl	80046bc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004558:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <HAL_PWR_EnterSLEEPMode+0x64>)
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	4a08      	ldr	r2, [pc, #32]	@ (8004580 <HAL_PWR_EnterSLEEPMode+0x64>)
 800455e:	f023 0304 	bic.w	r3, r3, #4
 8004562:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800456a:	bf30      	wfi
 800456c:	e002      	b.n	8004574 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800456e:	bf40      	sev
    __WFE();
 8004570:	bf20      	wfe
    __WFE();
 8004572:	bf20      	wfe
  }
}
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	58000400 	.word	0x58000400
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800458c:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <LL_EXTI_ReadFlag_0_31+0x1c>)
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4013      	ands	r3, r2
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58000800 	.word	0x58000800

080045a4 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80045ac:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80045ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4013      	ands	r3, r2
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	58000800 	.word	0x58000800

080045c4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80045cc:	4a03      	ldr	r2, [pc, #12]	@ (80045dc <LL_EXTI_ClearFlag_0_31+0x18>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60d3      	str	r3, [r2, #12]
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	58000800 	.word	0x58000800

080045e0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80045e8:	4a03      	ldr	r2, [pc, #12]	@ (80045f8 <LL_EXTI_ClearFlag_32_63+0x18>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	58000800 	.word	0x58000800

080045fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004600:	4b03      	ldr	r3, [pc, #12]	@ (8004610 <HAL_PWREx_GetVoltageRange+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	58000400 	.word	0x58000400

08004614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004622:	d12f      	bne.n	8004684 <HAL_PWREx_ControlVoltageScaling+0x70>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004624:	4b22      	ldr	r3, [pc, #136]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800462c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004630:	d037      	beq.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004632:	4b1f      	ldr	r3, [pc, #124]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800463a:	4a1d      	ldr	r2, [pc, #116]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800463c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004642:	4b1c      	ldr	r3, [pc, #112]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2232      	movs	r2, #50	@ 0x32
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	4a1a      	ldr	r2, [pc, #104]	@ (80046b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0c9b      	lsrs	r3, r3, #18
 8004654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004656:	e002      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b01      	subs	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800465e:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466a:	d102      	bne.n	8004672 <HAL_PWREx_ControlVoltageScaling+0x5e>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f2      	bne.n	8004658 <HAL_PWREx_ControlVoltageScaling+0x44>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004672:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467e:	d110      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x8e>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e00f      	b.n	80046a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004684:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800468c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004690:	d007      	beq.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004692:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800469a:	4a05      	ldr	r2, [pc, #20]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800469c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	58000400 	.word	0x58000400
 80046b4:	20000070 	.word	0x20000070
 80046b8:	431bde83 	.word	0x431bde83

080046bc <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80046c0:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a03      	ldr	r2, [pc, #12]	@ (80046d4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80046c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	58000400 	.word	0x58000400

080046d8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80046de:	4b16      	ldr	r3, [pc, #88]	@ (8004738 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a15      	ldr	r2, [pc, #84]	@ (8004738 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80046e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046e8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80046ea:	4b14      	ldr	r3, [pc, #80]	@ (800473c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2232      	movs	r2, #50	@ 0x32
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0c9b      	lsrs	r3, r3, #18
 80046fc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80046fe:	e002      	b.n	8004706 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004706:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800470e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004712:	d102      	bne.n	800471a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f2      	bne.n	8004700 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800471a:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004726:	d101      	bne.n	800472c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e000      	b.n	800472e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	58000400 	.word	0x58000400
 800473c:	20000070 	.word	0x20000070
 8004740:	431bde83 	.word	0x431bde83

08004744 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP0);

#else
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800474e:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a0e      	ldr	r2, [pc, #56]	@ (800478c <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8004754:	f023 0307 	bic.w	r3, r3, #7
 8004758:	6013      	str	r3, [r2, #0]

#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	4a0c      	ldr	r2, [pc, #48]	@ (8004790 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800476c:	bf30      	wfi
 800476e:	e002      	b.n	8004776 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004770:	bf40      	sev
    __WFE();
 8004772:	bf20      	wfe
    __WFE();
 8004774:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	4a05      	ldr	r2, [pc, #20]	@ (8004790 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	6113      	str	r3, [r2, #16]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr
 800478c:	58000400 	.word	0x58000400
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 0307 	bic.w	r3, r3, #7
 80047a6:	4a0e      	ldr	r2, [pc, #56]	@ (80047e0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	4a0c      	ldr	r2, [pc, #48]	@ (80047e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80047c0:	bf30      	wfi
 80047c2:	e002      	b.n	80047ca <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80047c4:	bf40      	sev
    __WFE();
 80047c6:	bf20      	wfe
    __WFE();
 80047c8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	4a05      	ldr	r2, [pc, #20]	@ (80047e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6113      	str	r3, [r2, #16]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	58000400 	.word	0x58000400
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0UL)
 80047ec:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80047f0:	f7ff fec8 	bl	8004584 <LL_EXTI_ReadFlag_0_31>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80047fa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80047fe:	f7ff fee1 	bl	80045c4 <LL_EXTI_ClearFlag_0_31>

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004802:	f016 fb61 	bl	801aec8 <HAL_PWR_PVDCallback>
  }

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0UL)
 8004806:	2004      	movs	r0, #4
 8004808:	f7ff fecc 	bl	80045a4 <LL_EXTI_ReadFlag_32_63>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
  {
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004812:	2004      	movs	r0, #4
 8004814:	f7ff fee4 	bl	80045e0 <LL_EXTI_ClearFlag_32_63>

    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004818:	f000 f802 	bl	8004820 <HAL_PWREx_PVM3Callback>
  }
}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <LL_PWR_IsEnabledBkUpAccess>:
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483c:	d101      	bne.n	8004842 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	58000400 	.word	0x58000400

08004850 <LL_RCC_HSE_EnableTcxo>:
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800485e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <LL_RCC_HSE_DisableTcxo>:
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800487a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489a:	d101      	bne.n	80048a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <LL_RCC_HSE_Enable>:
{
 80048aa:	b480      	push	{r7}
 80048ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
}
 80048be:	bf00      	nop
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <LL_RCC_HSE_Disable>:
{
 80048c6:	b480      	push	{r7}
 80048c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <LL_RCC_HSE_IsReady>:
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048f4:	d101      	bne.n	80048fa <LL_RCC_HSE_IsReady+0x18>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <LL_RCC_HSE_IsReady+0x1a>
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <LL_RCC_HSI_Enable>:
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004916:	6013      	str	r3, [r2, #0]
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <LL_RCC_HSI_Disable>:
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800492e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004932:	6013      	str	r3, [r2, #0]
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <LL_RCC_HSI_IsReady>:
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494e:	d101      	bne.n	8004954 <LL_RCC_HSI_IsReady+0x18>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <LL_RCC_HSI_IsReady+0x1a>
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <LL_RCC_HSI_SetCalibTrimming>:
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <LL_RCC_LSE_IsReady>:
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d101      	bne.n	800499e <LL_RCC_LSE_IsReady+0x18>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <LL_RCC_LSE_IsReady+0x1a>
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <LL_RCC_LSI_Enable>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_LSI_Disable>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <LL_RCC_LSI_IsReady>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d101      	bne.n	8004a00 <LL_RCC_LSI_IsReady+0x18>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <LL_RCC_LSI_IsReady+0x1a>
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <LL_RCC_MSI_Enable>:
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <LL_RCC_MSI_Disable>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6013      	str	r3, [r2, #0]
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_MSI_IsReady>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d101      	bne.n	8004a58 <LL_RCC_MSI_IsReady+0x16>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <LL_RCC_MSI_IsReady+0x18>
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d101      	bne.n	8004a78 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <LL_RCC_MSI_GetRange>:
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aa4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <LL_RCC_SetSysClkSource>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <LL_RCC_GetSysClkSource>:
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_SetAHBPrescaler>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <LL_C2_RCC_SetAHBPrescaler>:
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <LL_RCC_SetAHB3Prescaler>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b70:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b74:	f023 020f 	bic.w	r2, r3, #15
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_SetAPB1Prescaler>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	608b      	str	r3, [r1, #8]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_SetAPB2Prescaler>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <LL_RCC_GetAHBPrescaler>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <LL_RCC_GetAHB3Prescaler>:
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_GetAPB1Prescaler>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr

08004c22 <LL_RCC_GetAPB2Prescaler>:
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c4a:	6013      	str	r3, [r2, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c66:	6013      	str	r3, [r2, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c82:	d101      	bne.n	8004c88 <LL_RCC_PLL_IsReady+0x18>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <LL_RCC_PLL_IsReady+0x1a>
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004c92:	b480      	push	{r7}
 8004c94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfe:	d101      	bne.n	8004d04 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d16:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d22:	d101      	bne.n	8004d28 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr

08004d32 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d46:	d101      	bne.n	8004d4c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d68:	d101      	bne.n	8004d6e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d8a:	d101      	bne.n	8004d90 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e36f      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dae:	f7ff fea6 	bl	8004afe <LL_RCC_GetSysClkSource>
 8004db2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db4:	f7ff ff8f 	bl	8004cd6 <LL_RCC_PLL_GetMainSource>
 8004db8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80c4 	beq.w	8004f50 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x3e>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d176      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d173      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e353      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_OscConfig+0x68>
 8004df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e02:	e006      	b.n	8004e12 <HAL_RCC_OscConfig+0x76>
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d222      	bcs.n	8004e5c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fd5a 	bl	80058d4 <RCC_SetFlashLatencyFromMSIRange>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e331      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e34:	f043 0308 	orr.w	r3, r3, #8
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fe2b 	bl	8004ab0 <LL_RCC_MSI_SetCalibTrimming>
 8004e5a:	e021      	b.n	8004ea0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e66:	f043 0308 	orr.w	r3, r3, #8
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fe12 	bl	8004ab0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fd1f 	bl	80058d4 <RCC_SetFlashLatencyFromMSIRange>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e2f6      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ea0:	f000 fce0 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4aa7      	ldr	r2, [pc, #668]	@ (8005144 <HAL_RCC_OscConfig+0x3a8>)
 8004ea8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004eaa:	4ba7      	ldr	r3, [pc, #668]	@ (8005148 <HAL_RCC_OscConfig+0x3ac>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fc fb9e 	bl	80015f0 <HAL_InitTick>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d047      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	e2e5      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02c      	beq.n	8004f24 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004eca:	f7ff fd9e 	bl	8004a0a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ece:	f7fc fb99 	bl	8001604 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ed6:	f7fc fb95 	bl	8001604 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e2d2      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ee8:	f7ff fdab 	bl	8004a42 <LL_RCC_MSI_IsReady>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f1      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fdc7 	bl	8004ab0 <LL_RCC_MSI_SetCalibTrimming>
 8004f22:	e015      	b.n	8004f50 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f24:	f7ff fd7f 	bl	8004a26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f28:	f7fc fb6c 	bl	8001604 <HAL_GetTick>
 8004f2c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f30:	f7fc fb68 	bl	8001604 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e2a5      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f42:	f7ff fd7e 	bl	8004a42 <LL_RCC_MSI_IsReady>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f1      	bne.n	8004f30 <HAL_RCC_OscConfig+0x194>
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f4e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d058      	beq.n	800500e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d005      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1d2>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d108      	bne.n	8004f7a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d105      	bne.n	8004f7a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d14b      	bne.n	800500e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e289      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x204>
 8004f9a:	f7ff fc86 	bl	80048aa <LL_RCC_HSE_Enable>
 8004f9e:	e00d      	b.n	8004fbc <HAL_RCC_OscConfig+0x220>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004fa8:	d104      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x218>
 8004faa:	f7ff fc51 	bl	8004850 <LL_RCC_HSE_EnableTcxo>
 8004fae:	f7ff fc7c 	bl	80048aa <LL_RCC_HSE_Enable>
 8004fb2:	e003      	b.n	8004fbc <HAL_RCC_OscConfig+0x220>
 8004fb4:	f7ff fc87 	bl	80048c6 <LL_RCC_HSE_Disable>
 8004fb8:	f7ff fc58 	bl	800486c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d012      	beq.n	8004fea <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fc fb1e 	bl	8001604 <HAL_GetTick>
 8004fc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fc fb1a 	bl	8001604 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	@ 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e257      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004fde:	f7ff fc80 	bl	80048e2 <LL_RCC_HSE_IsReady>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f1      	beq.n	8004fcc <HAL_RCC_OscConfig+0x230>
 8004fe8:	e011      	b.n	800500e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fea:	f7fc fb0b 	bl	8001604 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff2:	f7fc fb07 	bl	8001604 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b64      	cmp	r3, #100	@ 0x64
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e244      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005004:	f7ff fc6d 	bl	80048e2 <LL_RCC_HSE_IsReady>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f1      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d046      	beq.n	80050a8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d005      	beq.n	800502c <HAL_RCC_OscConfig+0x290>
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d10e      	bne.n	8005044 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d10b      	bne.n	8005044 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e22a      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fc8e 	bl	800495e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005042:	e031      	b.n	80050a8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d019      	beq.n	8005080 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504c:	f7ff fc5a 	bl	8004904 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fc fad8 	bl	8001604 <HAL_GetTick>
 8005054:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005058:	f7fc fad4 	bl	8001604 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e211      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800506a:	f7ff fc67 	bl	800493c <LL_RCC_HSI_IsReady>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f1      	beq.n	8005058 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fc70 	bl	800495e <LL_RCC_HSI_SetCalibTrimming>
 800507e:	e013      	b.n	80050a8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005080:	f7ff fc4e 	bl	8004920 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fc fabe 	bl	8001604 <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508c:	f7fc faba 	bl	8001604 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e1f7      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800509e:	f7ff fc4d 	bl	800493c <LL_RCC_HSI_IsReady>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f1      	bne.n	800508c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d06e      	beq.n	8005192 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d056      	beq.n	800516a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d031      	beq.n	8005138 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e1d0      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80050f6:	f7ff fc67 	bl	80049c8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050fa:	f7fc fa83 	bl	8001604 <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005102:	f7fc fa7f 	bl	8001604 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b11      	cmp	r3, #17
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e1bc      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005114:	f7ff fc68 	bl	80049e8 <LL_RCC_LSI_IsReady>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f1      	bne.n	8005102 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005126:	f023 0210 	bic.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005138:	f7ff fc36 	bl	80049a8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513c:	f7fc fa62 	bl	8001604 <HAL_GetTick>
 8005140:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005142:	e00c      	b.n	800515e <HAL_RCC_OscConfig+0x3c2>
 8005144:	20000070 	.word	0x20000070
 8005148:	20000074 	.word	0x20000074
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514c:	f7fc fa5a 	bl	8001604 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b11      	cmp	r3, #17
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e197      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800515e:	f7ff fc43 	bl	80049e8 <LL_RCC_LSI_IsReady>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f1      	beq.n	800514c <HAL_RCC_OscConfig+0x3b0>
 8005168:	e013      	b.n	8005192 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516a:	f7ff fc2d 	bl	80049c8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516e:	f7fc fa49 	bl	8001604 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005176:	f7fc fa45 	bl	8001604 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b11      	cmp	r3, #17
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e182      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005188:	f7ff fc2e 	bl	80049e8 <LL_RCC_LSI_IsReady>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f1      	bne.n	8005176 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80d8 	beq.w	8005350 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80051a0:	f7ff fb44 	bl	800482c <LL_PWR_IsEnabledBkUpAccess>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d113      	bne.n	80051d2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80051aa:	f7ff f95d 	bl	8004468 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ae:	f7fc fa29 	bl	8001604 <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b6:	f7fc fa25 	bl	8001604 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e162      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80051c8:	f7ff fb30 	bl	800482c <LL_PWR_IsEnabledBkUpAccess>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f1      	beq.n	80051b6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d07b      	beq.n	80052d2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b85      	cmp	r3, #133	@ 0x85
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d109      	bne.n	80051fe <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7fc fa01 	bl	8001604 <HAL_GetTick>
 8005202:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005218:	e00a      	b.n	8005230 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fc f9f3 	bl	8001604 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e12e      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005230:	f7ff fba9 	bl	8004986 <LL_RCC_LSE_IsReady>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0ef      	beq.n	800521a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b81      	cmp	r3, #129	@ 0x81
 8005240:	d003      	beq.n	800524a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b85      	cmp	r3, #133	@ 0x85
 8005248:	d121      	bne.n	800528e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fc f9db 	bl	8001604 <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005264:	e00a      	b.n	800527c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fc f9cd 	bl	8001604 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e108      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800527c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ec      	beq.n	8005266 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800528c:	e060      	b.n	8005350 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fc f9b9 	bl	8001604 <HAL_GetTick>
 8005292:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fc f9ab 	bl	8001604 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e0e6      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ec      	bne.n	80052aa <HAL_RCC_OscConfig+0x50e>
 80052d0:	e03e      	b.n	8005350 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d2:	f7fc f997 	bl	8001604 <HAL_GetTick>
 80052d6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052ec:	e00a      	b.n	8005304 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fc f989 	bl	8001604 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e0c4      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ec      	bne.n	80052ee <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005314:	f7fc f976 	bl	8001604 <HAL_GetTick>
 8005318:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800532e:	e00a      	b.n	8005346 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fc f968 	bl	8001604 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0a3      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005346:	f7ff fb1e 	bl	8004986 <LL_RCC_LSE_IsReady>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ef      	bne.n	8005330 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8099 	beq.w	800548c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d06c      	beq.n	800543a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	2b02      	cmp	r3, #2
 8005366:	d14b      	bne.n	8005400 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005368:	f7ff fc74 	bl	8004c54 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536c:	f7fc f94a 	bl	8001604 <HAL_GetTick>
 8005370:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005374:	f7fc f946 	bl	8001604 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b0a      	cmp	r3, #10
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e083      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005386:	f7ff fc73 	bl	8004c70 <LL_RCC_PLL_IsReady>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f1      	bne.n	8005374 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	4b40      	ldr	r3, [pc, #256]	@ (8005498 <HAL_RCC_OscConfig+0x6fc>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053a2:	4311      	orrs	r1, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053a8:	0212      	lsls	r2, r2, #8
 80053aa:	4311      	orrs	r1, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053b0:	4311      	orrs	r1, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80053b6:	4311      	orrs	r1, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80053bc:	430a      	orrs	r2, r1
 80053be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c6:	f7ff fc37 	bl	8004c38 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fc f913 	bl	8001604 <HAL_GetTick>
 80053de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e2:	f7fc f90f 	bl	8001604 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b0a      	cmp	r3, #10
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e04c      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80053f4:	f7ff fc3c 	bl	8004c70 <LL_RCC_PLL_IsReady>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f1      	beq.n	80053e2 <HAL_RCC_OscConfig+0x646>
 80053fe:	e045      	b.n	800548c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005400:	f7ff fc28 	bl	8004c54 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fc f8fe 	bl	8001604 <HAL_GetTick>
 8005408:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540c:	f7fc f8fa 	bl	8001604 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b0a      	cmp	r3, #10
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e037      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800541e:	f7ff fc27 	bl	8004c70 <LL_RCC_PLL_IsReady>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f1      	bne.n	800540c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005432:	4b1a      	ldr	r3, [pc, #104]	@ (800549c <HAL_RCC_OscConfig+0x700>)
 8005434:	4013      	ands	r3, r2
 8005436:	60cb      	str	r3, [r1, #12]
 8005438:	e028      	b.n	800548c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e023      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f003 0203 	and.w	r2, r3, #3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	429a      	cmp	r2, r3
 800545a:	d115      	bne.n	8005488 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005466:	429a      	cmp	r2, r3
 8005468:	d10e      	bne.n	8005488 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	429a      	cmp	r2, r3
 8005478:	d106      	bne.n	8005488 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	11c1808c 	.word	0x11c1808c
 800549c:	eefefffc 	.word	0xeefefffc

080054a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e12c      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054b4:	4b98      	ldr	r3, [pc, #608]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d91b      	bls.n	80054fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c2:	4b95      	ldr	r3, [pc, #596]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 0207 	bic.w	r2, r3, #7
 80054ca:	4993      	ldr	r1, [pc, #588]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054d2:	f7fc f897 	bl	8001604 <HAL_GetTick>
 80054d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054da:	f7fc f893 	bl	8001604 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e110      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d1ef      	bne.n	80054da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d016      	beq.n	8005534 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fb02 	bl	8004b14 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005510:	f7fc f878 	bl	8001604 <HAL_GetTick>
 8005514:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005518:	f7fc f874 	bl	8001604 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0f1      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800552a:	f7ff fbdf 	bl	8004cec <LL_RCC_IsActiveFlag_HPRE>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f1      	beq.n	8005518 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d016      	beq.n	800556e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff faf8 	bl	8004b3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800554a:	f7fc f85b 	bl	8001604 <HAL_GetTick>
 800554e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005552:	f7fc f857 	bl	8001604 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e0d4      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005564:	f7ff fbd3 	bl	8004d0e <LL_RCC_IsActiveFlag_C2HPRE>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f1      	beq.n	8005552 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d016      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff faf0 	bl	8004b64 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005584:	f7fc f83e 	bl	8001604 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800558c:	f7fc f83a 	bl	8001604 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0b7      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800559e:	f7ff fbc8 	bl	8004d32 <LL_RCC_IsActiveFlag_SHDHPRE>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f1      	beq.n	800558c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d016      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fae9 	bl	8004b90 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055be:	f7fc f821 	bl	8001604 <HAL_GetTick>
 80055c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055c6:	f7fc f81d 	bl	8001604 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e09a      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80055d8:	f7ff fbbd 	bl	8004d56 <LL_RCC_IsActiveFlag_PPRE1>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f1      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d017      	beq.n	800561e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fade 	bl	8004bb6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055fa:	f7fc f803 	bl	8001604 <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005602:	f7fb ffff 	bl	8001604 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e07c      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005614:	f7ff fbb0 	bl	8004d78 <LL_RCC_IsActiveFlag_PPRE2>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f1      	beq.n	8005602 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d043      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d106      	bne.n	8005640 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005632:	f7ff f956 	bl	80048e2 <LL_RCC_HSE_IsReady>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d11e      	bne.n	800567a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e066      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d106      	bne.n	8005656 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005648:	f7ff fb12 	bl	8004c70 <LL_RCC_PLL_IsReady>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d113      	bne.n	800567a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e05b      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800565e:	f7ff f9f0 	bl	8004a42 <LL_RCC_MSI_IsReady>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d108      	bne.n	800567a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e050      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800566c:	f7ff f966 	bl	800493c <LL_RCC_HSI_IsReady>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e049      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fa2a 	bl	8004ad8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005684:	f7fb ffbe 	bl	8001604 <HAL_GetTick>
 8005688:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	e00a      	b.n	80056a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800568c:	f7fb ffba 	bl	8001604 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800569a:	4293      	cmp	r3, r2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e035      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a2:	f7ff fa2c 	bl	8004afe <LL_RCC_GetSysClkSource>
 80056a6:	4602      	mov	r2, r0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d1ec      	bne.n	800568c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056b2:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d21b      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c0:	4b15      	ldr	r3, [pc, #84]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f023 0207 	bic.w	r2, r3, #7
 80056c8:	4913      	ldr	r1, [pc, #76]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d0:	f7fb ff98 	bl	8001604 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056d8:	f7fb ff94 	bl	8001604 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e011      	b.n	800570e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <HAL_RCC_ClockConfig+0x278>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d1ef      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056f8:	f000 f8b4 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 80056fc:	4603      	mov	r3, r0
 80056fe:	4a07      	ldr	r2, [pc, #28]	@ (800571c <HAL_RCC_ClockConfig+0x27c>)
 8005700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <HAL_RCC_ClockConfig+0x280>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fb ff72 	bl	80015f0 <HAL_InitTick>
 800570c:	4603      	mov	r3, r0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	58004000 	.word	0x58004000
 800571c:	20000070 	.word	0x20000070
 8005720:	20000074 	.word	0x20000074

08005724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005732:	f7ff f9e4 	bl	8004afe <LL_RCC_GetSysClkSource>
 8005736:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005738:	f7ff facd 	bl	8004cd6 <LL_RCC_PLL_GetMainSource>
 800573c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x2c>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b0c      	cmp	r3, #12
 8005748:	d139      	bne.n	80057be <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d136      	bne.n	80057be <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005750:	f7ff f987 	bl	8004a62 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d115      	bne.n	8005786 <HAL_RCC_GetSysClockFreq+0x62>
 800575a:	f7ff f982 	bl	8004a62 <LL_RCC_MSI_IsEnabledRangeSelect>
 800575e:	4603      	mov	r3, r0
 8005760:	2b01      	cmp	r3, #1
 8005762:	d106      	bne.n	8005772 <HAL_RCC_GetSysClockFreq+0x4e>
 8005764:	f7ff f98d 	bl	8004a82 <LL_RCC_MSI_GetRange>
 8005768:	4603      	mov	r3, r0
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	e005      	b.n	800577e <HAL_RCC_GetSysClockFreq+0x5a>
 8005772:	f7ff f991 	bl	8004a98 <LL_RCC_MSI_GetRangeAfterStandby>
 8005776:	4603      	mov	r3, r0
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	4a36      	ldr	r2, [pc, #216]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x134>)
 8005780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005784:	e014      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x8c>
 8005786:	f7ff f96c 	bl	8004a62 <LL_RCC_MSI_IsEnabledRangeSelect>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d106      	bne.n	800579e <HAL_RCC_GetSysClockFreq+0x7a>
 8005790:	f7ff f977 	bl	8004a82 <LL_RCC_MSI_GetRange>
 8005794:	4603      	mov	r3, r0
 8005796:	091b      	lsrs	r3, r3, #4
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	e005      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x86>
 800579e:	f7ff f97b 	bl	8004a98 <LL_RCC_MSI_GetRangeAfterStandby>
 80057a2:	4603      	mov	r3, r0
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x134>)
 80057ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d115      	bne.n	80057e4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057bc:	e012      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d102      	bne.n	80057ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057c4:	4b25      	ldr	r3, [pc, #148]	@ (800585c <HAL_RCC_GetSysClockFreq+0x138>)
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e00c      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d109      	bne.n	80057e4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80057d0:	f7ff f85a 	bl	8004888 <LL_RCC_HSE_IsEnabledDiv2>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d102      	bne.n	80057e0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80057da:	4b20      	ldr	r3, [pc, #128]	@ (800585c <HAL_RCC_GetSysClockFreq+0x138>)
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e001      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80057e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x13c>)
 80057e2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e4:	f7ff f98b 	bl	8004afe <LL_RCC_GetSysClkSource>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b0c      	cmp	r3, #12
 80057ec:	d12f      	bne.n	800584e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80057ee:	f7ff fa72 	bl	8004cd6 <LL_RCC_PLL_GetMainSource>
 80057f2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d003      	beq.n	8005802 <HAL_RCC_GetSysClockFreq+0xde>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d003      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0xe4>
 8005800:	e00d      	b.n	800581e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005802:	4b16      	ldr	r3, [pc, #88]	@ (800585c <HAL_RCC_GetSysClockFreq+0x138>)
 8005804:	60fb      	str	r3, [r7, #12]
        break;
 8005806:	e00d      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005808:	f7ff f83e 	bl	8004888 <LL_RCC_HSE_IsEnabledDiv2>
 800580c:	4603      	mov	r3, r0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d102      	bne.n	8005818 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005812:	4b12      	ldr	r3, [pc, #72]	@ (800585c <HAL_RCC_GetSysClockFreq+0x138>)
 8005814:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005816:	e005      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005818:	4b11      	ldr	r3, [pc, #68]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x13c>)
 800581a:	60fb      	str	r3, [r7, #12]
        break;
 800581c:	e002      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	60fb      	str	r3, [r7, #12]
        break;
 8005822:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005824:	f7ff fa35 	bl	8004c92 <LL_RCC_PLL_GetN>
 8005828:	4602      	mov	r2, r0
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	fb03 f402 	mul.w	r4, r3, r2
 8005830:	f7ff fa46 	bl	8004cc0 <LL_RCC_PLL_GetDivider>
 8005834:	4603      	mov	r3, r0
 8005836:	091b      	lsrs	r3, r3, #4
 8005838:	3301      	adds	r3, #1
 800583a:	fbb4 f4f3 	udiv	r4, r4, r3
 800583e:	f7ff fa34 	bl	8004caa <LL_RCC_PLL_GetR>
 8005842:	4603      	mov	r3, r0
 8005844:	0f5b      	lsrs	r3, r3, #29
 8005846:	3301      	adds	r3, #1
 8005848:	fbb4 f3f3 	udiv	r3, r4, r3
 800584c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800584e:	697b      	ldr	r3, [r7, #20]
}
 8005850:	4618      	mov	r0, r3
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	bd90      	pop	{r4, r7, pc}
 8005858:	080206f4 	.word	0x080206f4
 800585c:	00f42400 	.word	0x00f42400
 8005860:	01e84800 	.word	0x01e84800

08005864 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005864:	b598      	push	{r3, r4, r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005868:	f7ff ff5c 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 800586c:	4604      	mov	r4, r0
 800586e:	f7ff f9b5 	bl	8004bdc <LL_RCC_GetAHBPrescaler>
 8005872:	4603      	mov	r3, r0
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	4a03      	ldr	r2, [pc, #12]	@ (8005888 <HAL_RCC_GetHCLKFreq+0x24>)
 800587c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005880:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd98      	pop	{r3, r4, r7, pc}
 8005888:	08020694 	.word	0x08020694

0800588c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800588c:	b598      	push	{r3, r4, r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005890:	f7ff ffe8 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 8005894:	4604      	mov	r4, r0
 8005896:	f7ff f9b9 	bl	8004c0c <LL_RCC_GetAPB1Prescaler>
 800589a:	4603      	mov	r3, r0
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	4a03      	ldr	r2, [pc, #12]	@ (80058ac <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd98      	pop	{r3, r4, r7, pc}
 80058ac:	080206d4 	.word	0x080206d4

080058b0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b0:	b598      	push	{r3, r4, r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80058b4:	f7ff ffd6 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 80058b8:	4604      	mov	r4, r0
 80058ba:	f7ff f9b2 	bl	8004c22 <LL_RCC_GetAPB2Prescaler>
 80058be:	4603      	mov	r3, r0
 80058c0:	0adb      	lsrs	r3, r3, #11
 80058c2:	4a03      	ldr	r2, [pc, #12]	@ (80058d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd98      	pop	{r3, r4, r7, pc}
 80058d0:	080206d4 	.word	0x080206d4

080058d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	4a10      	ldr	r2, [pc, #64]	@ (8005928 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80058ec:	f7ff f981 	bl	8004bf2 <LL_RCC_GetAHB3Prescaler>
 80058f0:	4603      	mov	r3, r0
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	4a0c      	ldr	r2, [pc, #48]	@ (800592c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80058fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4a09      	ldr	r2, [pc, #36]	@ (8005930 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	0c9c      	lsrs	r4, r3, #18
 8005910:	f7fe fe74 	bl	80045fc <HAL_PWREx_GetVoltageRange>
 8005914:	4603      	mov	r3, r0
 8005916:	4619      	mov	r1, r3
 8005918:	4620      	mov	r0, r4
 800591a:	f000 f80b 	bl	8005934 <RCC_SetFlashLatency>
 800591e:	4603      	mov	r3, r0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	bd90      	pop	{r4, r7, pc}
 8005928:	080206f4 	.word	0x080206f4
 800592c:	08020694 	.word	0x08020694
 8005930:	431bde83 	.word	0x431bde83

08005934 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	@ 0x38
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800593e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a28 <RCC_SetFlashLatency+0xf4>)
 8005940:	f107 0320 	add.w	r3, r7, #32
 8005944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005948:	6018      	str	r0, [r3, #0]
 800594a:	3304      	adds	r3, #4
 800594c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800594e:	4a37      	ldr	r2, [pc, #220]	@ (8005a2c <RCC_SetFlashLatency+0xf8>)
 8005950:	f107 0318 	add.w	r3, r7, #24
 8005954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005958:	6018      	str	r0, [r3, #0]
 800595a:	3304      	adds	r3, #4
 800595c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800595e:	4a34      	ldr	r2, [pc, #208]	@ (8005a30 <RCC_SetFlashLatency+0xfc>)
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	ca07      	ldmia	r2, {r0, r1, r2}
 8005966:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800596a:	2300      	movs	r3, #0
 800596c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005974:	d11b      	bne.n	80059ae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005976:	2300      	movs	r3, #0
 8005978:	633b      	str	r3, [r7, #48]	@ 0x30
 800597a:	e014      	b.n	80059a6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	3338      	adds	r3, #56	@ 0x38
 8005982:	443b      	add	r3, r7
 8005984:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4293      	cmp	r3, r2
 800598e:	d807      	bhi.n	80059a0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	3338      	adds	r3, #56	@ 0x38
 8005996:	443b      	add	r3, r7
 8005998:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800599e:	e021      	b.n	80059e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	3301      	adds	r3, #1
 80059a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d9e7      	bls.n	800597c <RCC_SetFlashLatency+0x48>
 80059ac:	e01a      	b.n	80059e4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80059ae:	2300      	movs	r3, #0
 80059b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059b2:	e014      	b.n	80059de <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	3338      	adds	r3, #56	@ 0x38
 80059ba:	443b      	add	r3, r7
 80059bc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80059c0:	461a      	mov	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d807      	bhi.n	80059d8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	3338      	adds	r3, #56	@ 0x38
 80059ce:	443b      	add	r3, r7
 80059d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059d6:	e005      	b.n	80059e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	3301      	adds	r3, #1
 80059dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d9e7      	bls.n	80059b4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059e4:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <RCC_SetFlashLatency+0x100>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 0207 	bic.w	r2, r3, #7
 80059ec:	4911      	ldr	r1, [pc, #68]	@ (8005a34 <RCC_SetFlashLatency+0x100>)
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	4313      	orrs	r3, r2
 80059f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059f4:	f7fb fe06 	bl	8001604 <HAL_GetTick>
 80059f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80059fa:	e008      	b.n	8005a0e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059fc:	f7fb fe02 	bl	8001604 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e007      	b.n	8005a1e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a0e:	4b09      	ldr	r3, [pc, #36]	@ (8005a34 <RCC_SetFlashLatency+0x100>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d1ef      	bne.n	80059fc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3738      	adds	r7, #56	@ 0x38
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	0802019c 	.word	0x0802019c
 8005a2c:	080201a4 	.word	0x080201a4
 8005a30:	080201ac 	.word	0x080201ac
 8005a34:	58004000 	.word	0x58004000

08005a38 <LL_RCC_LSE_IsReady>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d101      	bne.n	8005a50 <LL_RCC_LSE_IsReady+0x18>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <LL_RCC_LSE_IsReady+0x1a>
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_SetUSARTClockSource>:
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	401a      	ands	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr

08005a8a <LL_RCC_SetI2SClockSource>:
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_SetLPUARTClockSource>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ac8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_SetI2CClockSource>:
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005af6:	43db      	mvns	r3, r3
 8005af8:	401a      	ands	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005b02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <LL_RCC_SetLPTIMClockSource>:
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	401a      	ands	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <LL_RCC_SetRNGClockSource>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b58:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_SetADCClockSource>:
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_SetRTCClockSource>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <LL_RCC_GetRTCClockSource>:
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <LL_RCC_ForceBackupDomainReset>:
{
 8005bde:	b480      	push	{r7}
 8005be0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <LL_RCC_ReleaseBackupDomainReset>:
{
 8005bfe:	b480      	push	{r7}
 8005c00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005c30:	2300      	movs	r3, #0
 8005c32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d058      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005c40:	f7fe fc12 	bl	8004468 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c44:	f7fb fcde 	bl	8001604 <HAL_GetTick>
 8005c48:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005c4a:	e009      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fb fcda 	bl	8001604 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d902      	bls.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	74fb      	strb	r3, [r7, #19]
        break;
 8005c5e:	e006      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005c60:	4b7b      	ldr	r3, [pc, #492]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c6c:	d1ee      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005c6e:	7cfb      	ldrb	r3, [r7, #19]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d13c      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005c74:	f7ff ffa7 	bl	8005bc6 <LL_RCC_GetRTCClockSource>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d00f      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c90:	f7ff ffa5 	bl	8005bde <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c94:	f7ff ffb3 	bl	8005bfe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d014      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fb fcaa 	bl	8001604 <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005cb2:	e00b      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb4:	f7fb fca6 	bl	8001604 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d902      	bls.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	74fb      	strb	r3, [r7, #19]
            break;
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005ccc:	f7ff feb4 	bl	8005a38 <LL_RCC_LSE_IsReady>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d1ee      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff5b 	bl	8005b9c <LL_RCC_SetRTCClockSource>
 8005ce6:	e004      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	74bb      	strb	r3, [r7, #18]
 8005cec:	e001      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fea9 	bl	8005a5a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fe9e 	bl	8005a5a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fec0 	bl	8005ab4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff fee6 	bl	8005b16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d004      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fedb 	bl	8005b16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff fed0 	bl	8005b16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fea9 	bl	8005ade <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fe9e 	bl	8005ade <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fe93 	bl	8005ade <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d011      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fe5e 	bl	8005a8a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005de2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005de6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d010      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fea5 	bl	8005b48 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d011      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fea3 	bl	8005b72 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e34:	d107      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e44:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005e46:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	58000400 	.word	0x58000400

08005e54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d071      	beq.n	8005f4a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fb f9d8 	bl	8001230 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005e88:	4b32      	ldr	r3, [pc, #200]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d051      	beq.n	8005f38 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e94:	4b2f      	ldr	r3, [pc, #188]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005e96:	22ca      	movs	r2, #202	@ 0xca
 8005e98:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005e9c:	2253      	movs	r2, #83	@ 0x53
 8005e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fb9d 	bl	80065e0 <RTC_EnterInitMode>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d13f      	bne.n	8005f30 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005eb0:	4b28      	ldr	r3, [pc, #160]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	4a27      	ldr	r2, [pc, #156]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005eb6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ebe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005ec0:	4b24      	ldr	r3, [pc, #144]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6859      	ldr	r1, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	4319      	orrs	r1, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	491f      	ldr	r1, [pc, #124]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	491b      	ldr	r1, [pc, #108]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005eea:	4b1a      	ldr	r3, [pc, #104]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	430b      	orrs	r3, r1
 8005efc:	4915      	ldr	r1, [pc, #84]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fba0 	bl	8006648 <RTC_ExitInitMode>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10e      	bne.n	8005f30 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8005f12:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a19      	ldr	r1, [r3, #32]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	4319      	orrs	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	490a      	ldr	r1, [pc, #40]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f30:	4b08      	ldr	r3, [pc, #32]	@ (8005f54 <HAL_RTC_Init+0x100>)
 8005f32:	22ff      	movs	r2, #255	@ 0xff
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f36:	e001      	b.n	8005f3c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40002800 	.word	0x40002800

08005f58 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f58:	b590      	push	{r4, r7, lr}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_RTC_SetTime+0x1a>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e088      	b.n	8006084 <HAL_RTC_SetTime+0x12c>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f82:	4b42      	ldr	r3, [pc, #264]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8005f84:	22ca      	movs	r2, #202	@ 0xca
 8005f86:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f88:	4b40      	ldr	r3, [pc, #256]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8005f8a:	2253      	movs	r2, #83	@ 0x53
 8005f8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fb26 	bl	80065e0 <RTC_EnterInitMode>
 8005f94:	4603      	mov	r3, r0
 8005f96:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d15e      	bne.n	800605c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005faa:	d057      	beq.n	800605c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d125      	bne.n	8005ffe <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005fb2:	4b36      	ldr	r3, [pc, #216]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fb7b 	bl	80066c4 <RTC_ByteToBcd2>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fb74 	bl	80066c4 <RTC_ByteToBcd2>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fe0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	789b      	ldrb	r3, [r3, #2]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fb6c 	bl	80066c4 <RTC_ByteToBcd2>
 8005fec:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fee:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	78db      	ldrb	r3, [r3, #3]
 8005ff6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e017      	b.n	800602e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005ffe:	4b23      	ldr	r3, [pc, #140]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800601c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006022:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	78db      	ldrb	r3, [r3, #3]
 8006028:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800602e:	4a17      	ldr	r2, [pc, #92]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006036:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800603a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800603c:	4b13      	ldr	r3, [pc, #76]	@ (800608c <HAL_RTC_SetTime+0x134>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	4a12      	ldr	r2, [pc, #72]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8006042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006046:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006048:	4b10      	ldr	r3, [pc, #64]	@ (800608c <HAL_RTC_SetTime+0x134>)
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	68d9      	ldr	r1, [r3, #12]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	430b      	orrs	r3, r1
 8006056:	490d      	ldr	r1, [pc, #52]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8006058:	4313      	orrs	r3, r2
 800605a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 faf3 	bl	8006648 <RTC_ExitInitMode>
 8006062:	4603      	mov	r3, r0
 8006064:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006066:	4b09      	ldr	r3, [pc, #36]	@ (800608c <HAL_RTC_SetTime+0x134>)
 8006068:	22ff      	movs	r2, #255	@ 0xff
 800606a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006082:	7cfb      	ldrb	r3, [r7, #19]
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd90      	pop	{r4, r7, pc}
 800608c:	40002800 	.word	0x40002800

08006090 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800609c:	4b2c      	ldr	r3, [pc, #176]	@ (8006150 <HAL_RTC_GetTime+0xc0>)
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80060a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006150 <HAL_RTC_GetTime+0xc0>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b0:	d049      	beq.n	8006146 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80060b2:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <HAL_RTC_GetTime+0xc0>)
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80060be:	4b24      	ldr	r3, [pc, #144]	@ (8006150 <HAL_RTC_GetTime+0xc0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80060c6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80060ca:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	0d9b      	lsrs	r3, r3, #22
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	b2da      	uxtb	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d11a      	bne.n	8006146 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 faf4 	bl	8006702 <RTC_Bcd2ToByte>
 800611a:	4603      	mov	r3, r0
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 faeb 	bl	8006702 <RTC_Bcd2ToByte>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	789b      	ldrb	r3, [r3, #2]
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fae2 	bl	8006702 <RTC_Bcd2ToByte>
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40002800 	.word	0x40002800

08006154 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006154:	b590      	push	{r4, r7, lr}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_RTC_SetDate+0x1a>
 800616a:	2302      	movs	r3, #2
 800616c:	e071      	b.n	8006252 <HAL_RTC_SetDate+0xfe>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10e      	bne.n	80061a2 <HAL_RTC_SetDate+0x4e>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	b2db      	uxtb	r3, r3
 800619a:	330a      	adds	r3, #10
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11c      	bne.n	80061e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	78db      	ldrb	r3, [r3, #3]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fa89 	bl	80066c4 <RTC_ByteToBcd2>
 80061b2:	4603      	mov	r3, r0
 80061b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fa82 	bl	80066c4 <RTC_ByteToBcd2>
 80061c0:	4603      	mov	r3, r0
 80061c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80061c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	789b      	ldrb	r3, [r3, #2]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fa7a 	bl	80066c4 <RTC_ByteToBcd2>
 80061d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e00e      	b.n	8006200 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80061f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006200:	4b16      	ldr	r3, [pc, #88]	@ (800625c <HAL_RTC_SetDate+0x108>)
 8006202:	22ca      	movs	r2, #202	@ 0xca
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24
 8006206:	4b15      	ldr	r3, [pc, #84]	@ (800625c <HAL_RTC_SetDate+0x108>)
 8006208:	2253      	movs	r2, #83	@ 0x53
 800620a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f9e7 	bl	80065e0 <RTC_EnterInitMode>
 8006212:	4603      	mov	r3, r0
 8006214:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006216:	7cfb      	ldrb	r3, [r7, #19]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800621c:	4a0f      	ldr	r2, [pc, #60]	@ (800625c <HAL_RTC_SetDate+0x108>)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006224:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006228:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fa0c 	bl	8006648 <RTC_ExitInitMode>
 8006230:	4603      	mov	r3, r0
 8006232:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006234:	4b09      	ldr	r3, [pc, #36]	@ (800625c <HAL_RTC_SetDate+0x108>)
 8006236:	22ff      	movs	r2, #255	@ 0xff
 8006238:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800623a:	7cfb      	ldrb	r3, [r7, #19]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006250:	7cfb      	ldrb	r3, [r7, #19]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}
 800625a:	bf00      	nop
 800625c:	40002800 	.word	0x40002800

08006260 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_RTC_SetAlarm_IT+0x1e>
 800627a:	2302      	movs	r3, #2
 800627c:	e0f3      	b.n	8006466 <HAL_RTC_SetAlarm_IT+0x206>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800628e:	4b78      	ldr	r3, [pc, #480]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006296:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629e:	d06a      	beq.n	8006376 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d13a      	bne.n	800631c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80062a6:	4b72      	ldr	r3, [pc, #456]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2200      	movs	r2, #0
 80062b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 f9fd 	bl	80066c4 <RTC_ByteToBcd2>
 80062ca:	4603      	mov	r3, r0
 80062cc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f9f6 	bl	80066c4 <RTC_ByteToBcd2>
 80062d8:	4603      	mov	r3, r0
 80062da:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062dc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	789b      	ldrb	r3, [r3, #2]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f9ee 	bl	80066c4 <RTC_ByteToBcd2>
 80062e8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062ea:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	78db      	ldrb	r3, [r3, #3]
 80062f2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062f4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f9e0 	bl	80066c4 <RTC_ByteToBcd2>
 8006304:	4603      	mov	r3, r0
 8006306:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006308:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006310:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e02c      	b.n	8006376 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006324:	d00d      	beq.n	8006342 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800632e:	d008      	beq.n	8006342 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006330:	4b4f      	ldr	r3, [pc, #316]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800634e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006354:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	78db      	ldrb	r3, [r3, #3]
 800635a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800635c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006364:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006366:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800636c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006376:	4b3e      	ldr	r3, [pc, #248]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006378:	22ca      	movs	r2, #202	@ 0xca
 800637a:	625a      	str	r2, [r3, #36]	@ 0x24
 800637c:	4b3c      	ldr	r3, [pc, #240]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 800637e:	2253      	movs	r2, #83	@ 0x53
 8006380:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638a:	d12c      	bne.n	80063e6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800638c:	4b38      	ldr	r3, [pc, #224]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	4a37      	ldr	r2, [pc, #220]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006392:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006396:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006398:	4b35      	ldr	r3, [pc, #212]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 800639a:	2201      	movs	r2, #1
 800639c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063a4:	d107      	bne.n	80063b6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	4930      	ldr	r1, [pc, #192]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	644b      	str	r3, [r1, #68]	@ 0x44
 80063b4:	e006      	b.n	80063c4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80063b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80063bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80063c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d0:	f043 0201 	orr.w	r2, r3, #1
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80063d8:	4b25      	ldr	r3, [pc, #148]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	4a24      	ldr	r2, [pc, #144]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063de:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80063e2:	6193      	str	r3, [r2, #24]
 80063e4:	e02b      	b.n	800643e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80063e6:	4b22      	ldr	r3, [pc, #136]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	4a21      	ldr	r2, [pc, #132]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063ec:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80063f0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80063f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 80063f4:	2202      	movs	r2, #2
 80063f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fe:	d107      	bne.n	8006410 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	4919      	ldr	r1, [pc, #100]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 800640a:	4313      	orrs	r3, r2
 800640c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800640e:	e006      	b.n	800641e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006410:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006416:	4a16      	ldr	r2, [pc, #88]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800641e:	4a14      	ldr	r2, [pc, #80]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642a:	f043 0202 	orr.w	r2, r3, #2
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	4a0e      	ldr	r2, [pc, #56]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006438:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800643c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800643e:	4b0d      	ldr	r3, [pc, #52]	@ (8006474 <HAL_RTC_SetAlarm_IT+0x214>)
 8006440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006444:	4a0b      	ldr	r2, [pc, #44]	@ (8006474 <HAL_RTC_SetAlarm_IT+0x214>)
 8006446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800644e:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <HAL_RTC_SetAlarm_IT+0x210>)
 8006450:	22ff      	movs	r2, #255	@ 0xff
 8006452:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	bd90      	pop	{r4, r7, pc}
 800646e:	bf00      	nop
 8006470:	40002800 	.word	0x40002800
 8006474:	58000800 	.word	0x58000800

08006478 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_RTC_DeactivateAlarm+0x18>
 800648c:	2302      	movs	r3, #2
 800648e:	e048      	b.n	8006522 <HAL_RTC_DeactivateAlarm+0xaa>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064a0:	4b22      	ldr	r3, [pc, #136]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064a2:	22ca      	movs	r2, #202	@ 0xca
 80064a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80064a6:	4b21      	ldr	r3, [pc, #132]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064a8:	2253      	movs	r2, #83	@ 0x53
 80064aa:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b2:	d115      	bne.n	80064e0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80064b4:	4b1d      	ldr	r3, [pc, #116]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	4a1c      	ldr	r2, [pc, #112]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80064be:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80064c0:	4b1a      	ldr	r3, [pc, #104]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c4:	4a19      	ldr	r2, [pc, #100]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064ca:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d0:	f023 0201 	bic.w	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80064d8:	4b14      	ldr	r3, [pc, #80]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064da:	2201      	movs	r2, #1
 80064dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064de:	e014      	b.n	800650a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80064e0:	4b12      	ldr	r3, [pc, #72]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	4a11      	ldr	r2, [pc, #68]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064e6:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80064ea:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80064ec:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f0:	4a0e      	ldr	r2, [pc, #56]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 80064f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064f6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fc:	f023 0202 	bic.w	r2, r3, #2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006504:	4b09      	ldr	r3, [pc, #36]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006506:	2202      	movs	r2, #2
 8006508:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800650a:	4b08      	ldr	r3, [pc, #32]	@ (800652c <HAL_RTC_DeactivateAlarm+0xb4>)
 800650c:	22ff      	movs	r2, #255	@ 0xff
 800650e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr
 800652c:	40002800 	.word	0x40002800

08006530 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	cnt++;
 8006538:	4b14      	ldr	r3, [pc, #80]	@ (800658c <HAL_RTC_AlarmIRQHandler+0x5c>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	4b12      	ldr	r3, [pc, #72]	@ (800658c <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006542:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006544:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006546:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654c:	4013      	ands	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_RTC_AlarmIRQHandler+0x36>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <HAL_RTC_AlarmIRQHandler+0x60>)
 800655c:	2201      	movs	r2, #1
 800655e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f014 fe6b 	bl	801b23c <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_RTC_AlarmIRQHandler+0x4c>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006570:	4b07      	ldr	r3, [pc, #28]	@ (8006590 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006572:	2202      	movs	r2, #2
 8006574:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f014 fe8c 	bl	801b294 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000948 	.word	0x20000948
 8006590:	40002800 	.word	0x40002800

08006594 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800659c:	4b0f      	ldr	r3, [pc, #60]	@ (80065dc <HAL_RTC_WaitForSynchro+0x48>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	4a0e      	ldr	r2, [pc, #56]	@ (80065dc <HAL_RTC_WaitForSynchro+0x48>)
 80065a2:	f023 0320 	bic.w	r3, r3, #32
 80065a6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80065a8:	f7fb f82c 	bl	8001604 <HAL_GetTick>
 80065ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80065ae:	e009      	b.n	80065c4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065b0:	f7fb f828 	bl	8001604 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065be:	d901      	bls.n	80065c4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e006      	b.n	80065d2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <HAL_RTC_WaitForSynchro+0x48>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ef      	beq.n	80065b0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40002800 	.word	0x40002800

080065e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80065ec:	4b15      	ldr	r3, [pc, #84]	@ (8006644 <RTC_EnterInitMode+0x64>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d120      	bne.n	800663a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80065f8:	4b12      	ldr	r3, [pc, #72]	@ (8006644 <RTC_EnterInitMode+0x64>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	4a11      	ldr	r2, [pc, #68]	@ (8006644 <RTC_EnterInitMode+0x64>)
 80065fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006602:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006604:	f7fa fffe 	bl	8001604 <HAL_GetTick>
 8006608:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800660a:	e00d      	b.n	8006628 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800660c:	f7fa fffa 	bl	8001604 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800661a:	d905      	bls.n	8006628 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2203      	movs	r2, #3
 8006624:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006628:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <RTC_EnterInitMode+0x64>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <RTC_EnterInitMode+0x5a>
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d1e8      	bne.n	800660c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40002800 	.word	0x40002800

08006648 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006654:	4b1a      	ldr	r3, [pc, #104]	@ (80066c0 <RTC_ExitInitMode+0x78>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	4a19      	ldr	r2, [pc, #100]	@ (80066c0 <RTC_ExitInitMode+0x78>)
 800665a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800665e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006660:	4b17      	ldr	r3, [pc, #92]	@ (80066c0 <RTC_ExitInitMode+0x78>)
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10c      	bne.n	8006686 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff91 	bl	8006594 <HAL_RTC_WaitForSynchro>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01e      	beq.n	80066b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2203      	movs	r2, #3
 800667c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	73fb      	strb	r3, [r7, #15]
 8006684:	e017      	b.n	80066b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006686:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <RTC_ExitInitMode+0x78>)
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	4a0d      	ldr	r2, [pc, #52]	@ (80066c0 <RTC_ExitInitMode+0x78>)
 800668c:	f023 0320 	bic.w	r3, r3, #32
 8006690:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ff7e 	bl	8006594 <HAL_RTC_WaitForSynchro>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2203      	movs	r2, #3
 80066a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066aa:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <RTC_ExitInitMode+0x78>)
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	4a04      	ldr	r2, [pc, #16]	@ (80066c0 <RTC_ExitInitMode+0x78>)
 80066b0:	f043 0320 	orr.w	r3, r3, #32
 80066b4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40002800 	.word	0x40002800

080066c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80066d6:	e005      	b.n	80066e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80066de:	7afb      	ldrb	r3, [r7, #11]
 80066e0:	3b0a      	subs	r3, #10
 80066e2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	d8f6      	bhi.n	80066d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	7afb      	ldrb	r3, [r7, #11]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b2db      	uxtb	r3, r3
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr

08006702 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	4603      	mov	r3, r0
 800670a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	091b      	lsrs	r3, r3, #4
 8006710:	b2db      	uxtb	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	b2db      	uxtb	r3, r3
 800672a:	4413      	add	r3, r2
 800672c:	b2db      	uxtb	r3, r3
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_RTCEx_EnableBypassShadow+0x16>
 800674a:	2302      	movs	r3, #2
 800674c:	e01f      	b.n	800678e <HAL_RTCEx_EnableBypassShadow+0x56>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800675e:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006760:	22ca      	movs	r2, #202	@ 0xca
 8006762:	625a      	str	r2, [r3, #36]	@ 0x24
 8006764:	4b0c      	ldr	r3, [pc, #48]	@ (8006798 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006766:	2253      	movs	r2, #83	@ 0x53
 8006768:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800676a:	4b0b      	ldr	r3, [pc, #44]	@ (8006798 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	4a0a      	ldr	r2, [pc, #40]	@ (8006798 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006770:	f043 0320 	orr.w	r3, r3, #32
 8006774:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006776:	4b08      	ldr	r3, [pc, #32]	@ (8006798 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006778:	22ff      	movs	r2, #255	@ 0xff
 800677a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr
 8006798:	40002800 	.word	0x40002800

0800679c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80067a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80067b0:	4b06      	ldr	r3, [pc, #24]	@ (80067cc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80067b2:	2240      	movs	r2, #64	@ 0x40
 80067b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fb f997 	bl	8001aea <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40002800 	.word	0x40002800

080067d0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80067dc:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <HAL_RTCEx_BKUPWrite+0x2c>)
 80067de:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4413      	add	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	601a      	str	r2, [r3, #0]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	4000b100 	.word	0x4000b100

08006800 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800680a:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <HAL_RTCEx_BKUPRead+0x28>)
 800680c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	4000b100 	.word	0x4000b100

0800682c <LL_PWR_SetRadioBusyTrigger>:
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006834:	4b06      	ldr	r3, [pc, #24]	@ (8006850 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800683c:	4904      	ldr	r1, [pc, #16]	@ (8006850 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4313      	orrs	r3, r2
 8006842:	608b      	str	r3, [r1, #8]
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	58000400 	.word	0x58000400

08006854 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006858:	4b05      	ldr	r3, [pc, #20]	@ (8006870 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685e:	4a04      	ldr	r2, [pc, #16]	@ (8006870 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006868:	bf00      	nop
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	58000400 	.word	0x58000400

08006874 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006878:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687e:	4a04      	ldr	r2, [pc, #16]	@ (8006890 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006880:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006888:	bf00      	nop
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr
 8006890:	58000400 	.word	0x58000400

08006894 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006898:	4b03      	ldr	r3, [pc, #12]	@ (80068a8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800689a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800689e:	619a      	str	r2, [r3, #24]
}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr
 80068a8:	58000400 	.word	0x58000400

080068ac <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80068b0:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d101      	bne.n	80068c0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	58000400 	.word	0x58000400

080068d0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80068d4:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d101      	bne.n	80068e4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e000      	b.n	80068e6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58000400 	.word	0x58000400

080068f4 <LL_RCC_RF_DisableReset>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006904:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr

08006914 <LL_RCC_IsRFUnderReset>:
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800691c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006928:	d101      	bne.n	800692e <LL_RCC_IsRFUnderReset+0x1a>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <LL_RCC_IsRFUnderReset+0x1c>
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <LL_EXTI_EnableIT_32_63>:
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006940:	4b06      	ldr	r3, [pc, #24]	@ (800695c <LL_EXTI_EnableIT_32_63+0x24>)
 8006942:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006946:	4905      	ldr	r1, [pc, #20]	@ (800695c <LL_EXTI_EnableIT_32_63+0x24>)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	58000800 	.word	0x58000800

08006960 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
    return status;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	e052      	b.n	8006a1c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	799b      	ldrb	r3, [r3, #6]
 800697e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_SUBGHZ_Init+0x2c>
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d109      	bne.n	80069a0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fa fd94 	bl	80014c0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006998:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800699c:	f7ff ffcc 	bl	8006938 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d126      	bne.n	80069f4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2202      	movs	r2, #2
 80069aa:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80069ac:	f7ff ffa2 	bl	80068f4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80069b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a24 <HAL_SUBGHZ_Init+0xc4>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	0cdb      	lsrs	r3, r3, #19
 80069be:	2264      	movs	r2, #100	@ 0x64
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	609a      	str	r2, [r3, #8]
        break;
 80069d6:	e007      	b.n	80069e8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	3b01      	subs	r3, #1
 80069dc:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80069de:	f7ff ff99 	bl	8006914 <LL_RCC_IsRFUnderReset>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1ee      	bne.n	80069c6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80069e8:	f7ff ff34 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80069ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80069f0:	f7ff ff1c 	bl	800682c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80069f4:	f7ff ff4e 	bl	8006894 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fab6 	bl	8006f74 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	719a      	strb	r2, [r3, #6]

  return status;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000070 	.word	0x20000070

08006a28 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	461a      	mov	r2, r3
 8006a34:	460b      	mov	r3, r1
 8006a36:	817b      	strh	r3, [r7, #10]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	799b      	ldrb	r3, [r3, #6]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d14a      	bne.n	8006adc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	795b      	ldrb	r3, [r3, #5]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e045      	b.n	8006ade <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fb56 	bl	8007110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006a64:	f7ff ff06 	bl	8006874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006a68:	210d      	movs	r1, #13
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 faa2 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006a70:	897b      	ldrh	r3, [r7, #10]
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fa9a 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006a80:	897b      	ldrh	r3, [r7, #10]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fa94 	bl	8006fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	82bb      	strh	r3, [r7, #20]
 8006a90:	e00a      	b.n	8006aa8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006a92:	8abb      	ldrh	r3, [r7, #20]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4413      	add	r3, r2
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fa89 	bl	8006fb4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006aa2:	8abb      	ldrh	r3, [r7, #20]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	82bb      	strh	r3, [r7, #20]
 8006aa8:	8aba      	ldrh	r2, [r7, #20]
 8006aaa:	893b      	ldrh	r3, [r7, #8]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d3f0      	bcc.n	8006a92 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ab0:	f7ff fed0 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fb4f 	bl	8007158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
 8006ac6:	e001      	b.n	8006acc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	715a      	strb	r2, [r3, #5]

    return status;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	e000      	b.n	8006ade <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b088      	sub	sp, #32
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	461a      	mov	r2, r3
 8006af2:	460b      	mov	r3, r1
 8006af4:	817b      	strh	r3, [r7, #10]
 8006af6:	4613      	mov	r3, r2
 8006af8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	799b      	ldrb	r3, [r3, #6]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d14a      	bne.n	8006b9e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	795b      	ldrb	r3, [r3, #5]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e045      	b.n	8006ba0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 faf8 	bl	8007110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b20:	f7ff fea8 	bl	8006874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006b24:	211d      	movs	r1, #29
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fa44 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006b2c:	897b      	ldrh	r3, [r7, #10]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	4619      	mov	r1, r3
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fa3c 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006b3c:	897b      	ldrh	r3, [r7, #10]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fa36 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006b48:	2100      	movs	r1, #0
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fa32 	bl	8006fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	82fb      	strh	r3, [r7, #22]
 8006b54:	e009      	b.n	8006b6a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006b56:	69b9      	ldr	r1, [r7, #24]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fa81 	bl	8007060 <SUBGHZSPI_Receive>
      pData++;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	3301      	adds	r3, #1
 8006b62:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006b64:	8afb      	ldrh	r3, [r7, #22]
 8006b66:	3301      	adds	r3, #1
 8006b68:	82fb      	strh	r3, [r7, #22]
 8006b6a:	8afa      	ldrh	r2, [r7, #22]
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d3f1      	bcc.n	8006b56 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b72:	f7ff fe6f 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 faee 	bl	8007158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e001      	b.n	8006b8e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	715a      	strb	r2, [r3, #5]

    return status;
 8006b9a:	7ffb      	ldrb	r3, [r7, #31]
 8006b9c:	e000      	b.n	8006ba0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	72fb      	strb	r3, [r7, #11]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	799b      	ldrb	r3, [r3, #6]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d14a      	bne.n	8006c5c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	795b      	ldrb	r3, [r3, #5]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e045      	b.n	8006c5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fa99 	bl	8007110 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b84      	cmp	r3, #132	@ 0x84
 8006be2:	d002      	beq.n	8006bea <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	2b94      	cmp	r3, #148	@ 0x94
 8006be8:	d103      	bne.n	8006bf2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	711a      	strb	r2, [r3, #4]
 8006bf0:	e002      	b.n	8006bf8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006bf8:	f7ff fe3c 	bl	8006874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f9d7 	bl	8006fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006c06:	2300      	movs	r3, #0
 8006c08:	82bb      	strh	r3, [r7, #20]
 8006c0a:	e00a      	b.n	8006c22 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c0c:	8abb      	ldrh	r3, [r7, #20]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f9cc 	bl	8006fb4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c1c:	8abb      	ldrh	r3, [r7, #20]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	82bb      	strh	r3, [r7, #20]
 8006c22:	8aba      	ldrh	r2, [r7, #20]
 8006c24:	893b      	ldrh	r3, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d3f0      	bcc.n	8006c0c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c2a:	f7ff fe13 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	2b84      	cmp	r3, #132	@ 0x84
 8006c32:	d002      	beq.n	8006c3a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fa8f 	bl	8007158 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
 8006c46:	e001      	b.n	8006c4c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	715a      	strb	r2, [r3, #5]

    return status;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	e000      	b.n	8006c5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
  }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b088      	sub	sp, #32
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	461a      	mov	r2, r3
 8006c72:	460b      	mov	r3, r1
 8006c74:	72fb      	strb	r3, [r7, #11]
 8006c76:	4613      	mov	r3, r2
 8006c78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	799b      	ldrb	r3, [r3, #6]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d13d      	bne.n	8006d04 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	795b      	ldrb	r3, [r3, #5]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e038      	b.n	8006d06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fa38 	bl	8007110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ca0:	f7ff fde8 	bl	8006874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f983 	bl	8006fb4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006cae:	2100      	movs	r1, #0
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f97f 	bl	8006fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	82fb      	strh	r3, [r7, #22]
 8006cba:	e009      	b.n	8006cd0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f9ce 	bl	8007060 <SUBGHZSPI_Receive>
      pData++;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006cca:	8afb      	ldrh	r3, [r7, #22]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	82fb      	strh	r3, [r7, #22]
 8006cd0:	8afa      	ldrh	r2, [r7, #22]
 8006cd2:	893b      	ldrh	r3, [r7, #8]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3f1      	bcc.n	8006cbc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006cd8:	f7ff fdbc 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 fa3b 	bl	8007158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	77fb      	strb	r3, [r7, #31]
 8006cee:	e001      	b.n	8006cf4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	715a      	strb	r2, [r3, #5]

    return status;
 8006d00:	7ffb      	ldrb	r3, [r7, #31]
 8006d02:	e000      	b.n	8006d06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	72fb      	strb	r3, [r7, #11]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	799b      	ldrb	r3, [r3, #6]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d13e      	bne.n	8006daa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	795b      	ldrb	r3, [r3, #5]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e039      	b.n	8006dac <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f9e6 	bl	8007110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d44:	f7ff fd96 	bl	8006874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006d48:	210e      	movs	r1, #14
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f932 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	4619      	mov	r1, r3
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f92d 	bl	8006fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	82bb      	strh	r3, [r7, #20]
 8006d5e:	e00a      	b.n	8006d76 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d60:	8abb      	ldrh	r3, [r7, #20]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	4413      	add	r3, r2
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f922 	bl	8006fb4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d70:	8abb      	ldrh	r3, [r7, #20]
 8006d72:	3301      	adds	r3, #1
 8006d74:	82bb      	strh	r3, [r7, #20]
 8006d76:	8aba      	ldrh	r2, [r7, #20]
 8006d78:	893b      	ldrh	r3, [r7, #8]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d3f0      	bcc.n	8006d60 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d7e:	f7ff fd69 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 f9e8 	bl	8007158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
 8006d94:	e001      	b.n	8006d9a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	715a      	strb	r2, [r3, #5]

    return status;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	e000      	b.n	8006dac <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006daa:	2302      	movs	r3, #2
  }
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	72fb      	strb	r3, [r7, #11]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	799b      	ldrb	r3, [r3, #6]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d141      	bne.n	8006e5a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	795b      	ldrb	r3, [r3, #5]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e03c      	b.n	8006e5c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f991 	bl	8007110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006dee:	f7ff fd41 	bl	8006874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006df2:	211e      	movs	r1, #30
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f8dd 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f8d8 	bl	8006fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006e04:	2100      	movs	r1, #0
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f8d4 	bl	8006fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	82fb      	strh	r3, [r7, #22]
 8006e10:	e009      	b.n	8006e26 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e12:	69b9      	ldr	r1, [r7, #24]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f923 	bl	8007060 <SUBGHZSPI_Receive>
      pData++;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006e20:	8afb      	ldrh	r3, [r7, #22]
 8006e22:	3301      	adds	r3, #1
 8006e24:	82fb      	strh	r3, [r7, #22]
 8006e26:	8afa      	ldrh	r2, [r7, #22]
 8006e28:	893b      	ldrh	r3, [r7, #8]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d3f1      	bcc.n	8006e12 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e2e:	f7ff fd11 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f990 	bl	8007158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e001      	b.n	8006e4a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	715a      	strb	r2, [r3, #5]

    return status;
 8006e56:	7ffb      	ldrb	r3, [r7, #31]
 8006e58:	e000      	b.n	8006e5c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006e5a:	2302      	movs	r3, #2
  }
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006e70:	f107 020c 	add.w	r2, r7, #12
 8006e74:	2302      	movs	r3, #2
 8006e76:	2112      	movs	r1, #18
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff fef4 	bl	8006c66 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006e7e:	7b3b      	ldrb	r3, [r7, #12]
 8006e80:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b21a      	sxth	r2, r3
 8006e8a:	7b7b      	ldrb	r3, [r7, #13]
 8006e8c:	b21b      	sxth	r3, r3
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	b21b      	sxth	r3, r3
 8006e92:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006e94:	f107 020c 	add.w	r2, r7, #12
 8006e98:	2302      	movs	r3, #2
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff fe83 	bl	8006ba8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006ea2:	89fb      	ldrh	r3, [r7, #14]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f011 fea9 	bl	8018c04 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006eb2:	89fb      	ldrh	r3, [r7, #14]
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_SUBGHZ_IRQHandler+0x60>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f011 feae 	bl	8018c20 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_SUBGHZ_IRQHandler+0x72>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f011 fefd 	bl	8018cd0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006ed6:	89fb      	ldrh	r3, [r7, #14]
 8006ed8:	08db      	lsrs	r3, r3, #3
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f011 ff02 	bl	8018cec <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006ee8:	89fb      	ldrh	r3, [r7, #14]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f011 ff07 	bl	8018d08 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006efa:	89fb      	ldrh	r3, [r7, #14]
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_SUBGHZ_IRQHandler+0xa8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f011 fed4 	bl	8018cb4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006f0c:	89fb      	ldrh	r3, [r7, #14]
 8006f0e:	099b      	lsrs	r3, r3, #6
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <HAL_SUBGHZ_IRQHandler+0xba>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f011 fe8f 	bl	8018c3c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006f1e:	89fb      	ldrh	r3, [r7, #14]
 8006f20:	09db      	lsrs	r3, r3, #7
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00e      	beq.n	8006f48 <HAL_SUBGHZ_IRQHandler+0xe4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006f2a:	89fb      	ldrh	r3, [r7, #14]
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006f36:	2101      	movs	r1, #1
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f011 fe8d 	bl	8018c58 <HAL_SUBGHZ_CADStatusCallback>
 8006f3e:	e003      	b.n	8006f48 <HAL_SUBGHZ_IRQHandler+0xe4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006f40:	2100      	movs	r1, #0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f011 fe88 	bl	8018c58 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006f48:	89fb      	ldrh	r3, [r7, #14]
 8006f4a:	0a5b      	lsrs	r3, r3, #9
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <HAL_SUBGHZ_IRQHandler+0xf6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f011 fe9d 	bl	8018c94 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006f5a:	89fb      	ldrh	r3, [r7, #14]
 8006f5c:	0b9b      	lsrs	r3, r3, #14
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <HAL_SUBGHZ_IRQHandler+0x108>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f011 fedc 	bl	8018d24 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb0 <SUBGHZSPI_Init+0x3c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0b      	ldr	r2, [pc, #44]	@ (8006fb0 <SUBGHZSPI_Init+0x3c>)
 8006f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f86:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006f88:	4a09      	ldr	r2, [pc, #36]	@ (8006fb0 <SUBGHZSPI_Init+0x3c>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8006f90:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006f92:	4b07      	ldr	r3, [pc, #28]	@ (8006fb0 <SUBGHZSPI_Init+0x3c>)
 8006f94:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8006f98:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006f9a:	4b05      	ldr	r3, [pc, #20]	@ (8006fb0 <SUBGHZSPI_Init+0x3c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a04      	ldr	r2, [pc, #16]	@ (8006fb0 <SUBGHZSPI_Init+0x3c>)
 8006fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa4:	6013      	str	r3, [r2, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bc80      	pop	{r7}
 8006fae:	4770      	bx	lr
 8006fb0:	58010000 	.word	0x58010000

08006fb4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006fc4:	4b23      	ldr	r3, [pc, #140]	@ (8007054 <SUBGHZSPI_Transmit+0xa0>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	0cdb      	lsrs	r3, r3, #19
 8006fd2:	2264      	movs	r2, #100	@ 0x64
 8006fd4:	fb02 f303 	mul.w	r3, r2, r3
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	609a      	str	r2, [r3, #8]
      break;
 8006fea:	e008      	b.n	8006ffe <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006ff2:	4b19      	ldr	r3, [pc, #100]	@ (8007058 <SUBGHZSPI_Transmit+0xa4>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d1ed      	bne.n	8006fda <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006ffe:	4b17      	ldr	r3, [pc, #92]	@ (800705c <SUBGHZSPI_Transmit+0xa8>)
 8007000:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007008:	4b12      	ldr	r3, [pc, #72]	@ (8007054 <SUBGHZSPI_Transmit+0xa0>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	0cdb      	lsrs	r3, r3, #19
 8007016:	2264      	movs	r2, #100	@ 0x64
 8007018:	fb02 f303 	mul.w	r3, r2, r3
 800701c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	609a      	str	r2, [r3, #8]
      break;
 800702e:	e008      	b.n	8007042 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3b01      	subs	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007036:	4b08      	ldr	r3, [pc, #32]	@ (8007058 <SUBGHZSPI_Transmit+0xa4>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b01      	cmp	r3, #1
 8007040:	d1ed      	bne.n	800701e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007042:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <SUBGHZSPI_Transmit+0xa4>)
 8007044:	68db      	ldr	r3, [r3, #12]

  return status;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000070 	.word	0x20000070
 8007058:	58010000 	.word	0x58010000
 800705c:	5801000c 	.word	0x5801000c

08007060 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800706e:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <SUBGHZSPI_Receive+0xa4>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	1a9b      	subs	r3, r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	0cdb      	lsrs	r3, r3, #19
 800707c:	2264      	movs	r2, #100	@ 0x64
 800707e:	fb02 f303 	mul.w	r3, r2, r3
 8007082:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	609a      	str	r2, [r3, #8]
      break;
 8007094:	e008      	b.n	80070a8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3b01      	subs	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800709c:	4b1a      	ldr	r3, [pc, #104]	@ (8007108 <SUBGHZSPI_Receive+0xa8>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d1ed      	bne.n	8007084 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80070a8:	4b18      	ldr	r3, [pc, #96]	@ (800710c <SUBGHZSPI_Receive+0xac>)
 80070aa:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	22ff      	movs	r2, #255	@ 0xff
 80070b0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80070b2:	4b14      	ldr	r3, [pc, #80]	@ (8007104 <SUBGHZSPI_Receive+0xa4>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4613      	mov	r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	0cdb      	lsrs	r3, r3, #19
 80070c0:	2264      	movs	r2, #100	@ 0x64
 80070c2:	fb02 f303 	mul.w	r3, r2, r3
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	609a      	str	r2, [r3, #8]
      break;
 80070d8:	e008      	b.n	80070ec <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3b01      	subs	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80070e0:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <SUBGHZSPI_Receive+0xa8>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d1ed      	bne.n	80070c8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80070ec:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <SUBGHZSPI_Receive+0xa8>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	701a      	strb	r2, [r3, #0]

  return status;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000070 	.word	0x20000070
 8007108:	58010000 	.word	0x58010000
 800710c:	5801000c 	.word	0x5801000c

08007110 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d111      	bne.n	8007144 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007120:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <SUBGHZ_CheckDeviceReady+0x44>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	4413      	add	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007130:	f7ff fba0 	bl	8006874 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3b01      	subs	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f9      	bne.n	8007134 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007140:	f7ff fb88 	bl	8006854 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f807 	bl	8007158 <SUBGHZ_WaitOnBusy>
 800714a:	4603      	mov	r3, r0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000070 	.word	0x20000070

08007158 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007164:	4b12      	ldr	r3, [pc, #72]	@ (80071b0 <SUBGHZ_WaitOnBusy+0x58>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	4413      	add	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	0d1b      	lsrs	r3, r3, #20
 8007172:	2264      	movs	r2, #100	@ 0x64
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800717a:	f7ff fba9 	bl	80068d0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800717e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	609a      	str	r2, [r3, #8]
      break;
 8007190:	e009      	b.n	80071a6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b01      	subs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007198:	f7ff fb88 	bl	80068ac <LL_PWR_IsActiveFlag_RFBUSYS>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d0e9      	beq.n	800717a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20000070 	.word	0x20000070

080071b4 <LL_RCC_GetUSARTClockSource>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80071bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	401a      	ands	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	4313      	orrs	r3, r2
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <LL_RCC_GetLPUARTClockSource>:
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80071e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4013      	ands	r3, r2
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bc80      	pop	{r7}
 80071f4:	4770      	bx	lr

080071f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e042      	b.n	800728e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa fdca 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2224      	movs	r2, #36	@ 0x24
 8007224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0201 	bic.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fc3b 	bl	8007ab4 <UART_SetConfig>
 800723e:	4603      	mov	r3, r0
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e022      	b.n	800728e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fea3 	bl	8007f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007264:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007274:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0201 	orr.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 ff29 	bl	80080de <UART_CheckIdleState>
 800728c:	4603      	mov	r3, r0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	@ 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d137      	bne.n	8007320 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_UART_Receive_IT+0x24>
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e030      	b.n	8007322 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a18      	ldr	r2, [pc, #96]	@ (800732c <HAL_UART_Receive_IT+0x94>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d01f      	beq.n	8007310 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d018      	beq.n	8007310 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	613b      	str	r3, [r7, #16]
   return(result);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	6a3a      	ldr	r2, [r7, #32]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	61bb      	str	r3, [r7, #24]
   return(result);
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e6      	bne.n	80072de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	461a      	mov	r2, r3
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fff8 	bl	800830c <UART_Start_Receive_IT>
 800731c:	4603      	mov	r3, r0
 800731e:	e000      	b.n	8007322 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3728      	adds	r7, #40	@ 0x28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40008000 	.word	0x40008000

08007330 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	@ 0x28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007344:	2b20      	cmp	r3, #32
 8007346:	d167      	bne.n	8007418 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_UART_Transmit_DMA+0x24>
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e060      	b.n	800741a <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	88fa      	ldrh	r2, [r7, #6]
 8007362:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	88fa      	ldrh	r2, [r7, #6]
 800736a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2221      	movs	r2, #33	@ 0x21
 800737a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d028      	beq.n	80073d8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800738a:	4a26      	ldr	r2, [pc, #152]	@ (8007424 <HAL_UART_Transmit_DMA+0xf4>)
 800738c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007392:	4a25      	ldr	r2, [pc, #148]	@ (8007428 <HAL_UART_Transmit_DMA+0xf8>)
 8007394:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800739a:	4a24      	ldr	r2, [pc, #144]	@ (800742c <HAL_UART_Transmit_DMA+0xfc>)
 800739c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073a2:	2200      	movs	r2, #0
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ae:	4619      	mov	r1, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3328      	adds	r3, #40	@ 0x28
 80073b6:	461a      	mov	r2, r3
 80073b8:	88fb      	ldrh	r3, [r7, #6]
 80073ba:	f7fb fd21 	bl	8002e00 <HAL_DMA_Start_IT>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2210      	movs	r2, #16
 80073c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e020      	b.n	800741a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2240      	movs	r2, #64	@ 0x40
 80073de:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3308      	adds	r3, #8
 80073e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	613b      	str	r3, [r7, #16]
   return(result);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007400:	623a      	str	r2, [r7, #32]
 8007402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	69f9      	ldr	r1, [r7, #28]
 8007406:	6a3a      	ldr	r2, [r7, #32]
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	61bb      	str	r3, [r7, #24]
   return(result);
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e5      	bne.n	80073e0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e000      	b.n	800741a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007418:	2302      	movs	r3, #2
  }
}
 800741a:	4618      	mov	r0, r3
 800741c:	3728      	adds	r7, #40	@ 0x28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	08008697 	.word	0x08008697
 8007428:	08008731 	.word	0x08008731
 800742c:	0800874d 	.word	0x0800874d

08007430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b0ba      	sub	sp, #232	@ 0xe8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007456:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800745a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800745e:	4013      	ands	r3, r2
 8007460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d11b      	bne.n	80074a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d015      	beq.n	80074a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 82e3 	beq.w	8007a60 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
      }
      return;
 80074a2:	e2dd      	b.n	8007a60 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8123 	beq.w	80076f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074b2:	4b8d      	ldr	r3, [pc, #564]	@ (80076e8 <HAL_UART_IRQHandler+0x2b8>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80074be:	4b8b      	ldr	r3, [pc, #556]	@ (80076ec <HAL_UART_IRQHandler+0x2bc>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 8116 	beq.w	80076f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d011      	beq.n	80074f8 <HAL_UART_IRQHandler+0xc8>
 80074d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ee:	f043 0201 	orr.w	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d011      	beq.n	8007528 <HAL_UART_IRQHandler+0xf8>
 8007504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2202      	movs	r2, #2
 8007516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751e:	f043 0204 	orr.w	r2, r3, #4
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d011      	beq.n	8007558 <HAL_UART_IRQHandler+0x128>
 8007534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2204      	movs	r2, #4
 8007546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d017      	beq.n	8007594 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007570:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007574:	4b5c      	ldr	r3, [pc, #368]	@ (80076e8 <HAL_UART_IRQHandler+0x2b8>)
 8007576:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2208      	movs	r2, #8
 8007582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758a:	f043 0208 	orr.w	r2, r3, #8
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800759c:	2b00      	cmp	r3, #0
 800759e:	d012      	beq.n	80075c6 <HAL_UART_IRQHandler+0x196>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075bc:	f043 0220 	orr.w	r2, r3, #32
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 8249 	beq.w	8007a64 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d105      	bne.n	80075f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761a:	2b40      	cmp	r3, #64	@ 0x40
 800761c:	d005      	beq.n	800762a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800761e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007626:	2b00      	cmp	r3, #0
 8007628:	d054      	beq.n	80076d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 ffce 	bl	80085cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763a:	2b40      	cmp	r3, #64	@ 0x40
 800763c:	d146      	bne.n	80076cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3308      	adds	r3, #8
 8007644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800765c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800766a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800766e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1d9      	bne.n	800763e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007690:	2b00      	cmp	r3, #0
 8007692:	d017      	beq.n	80076c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769a:	4a15      	ldr	r2, [pc, #84]	@ (80076f0 <HAL_UART_IRQHandler+0x2c0>)
 800769c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fb fc87 	bl	8002fb8 <HAL_DMA_Abort_IT>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d019      	beq.n	80076e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80076be:	4610      	mov	r0, r2
 80076c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c2:	e00f      	b.n	80076e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f9e0 	bl	8007a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ca:	e00b      	b.n	80076e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f9dc 	bl	8007a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d2:	e007      	b.n	80076e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f9d8 	bl	8007a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80076e2:	e1bf      	b.n	8007a64 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	bf00      	nop
    return;
 80076e6:	e1bd      	b.n	8007a64 <HAL_UART_IRQHandler+0x634>
 80076e8:	10000001 	.word	0x10000001
 80076ec:	04000120 	.word	0x04000120
 80076f0:	080087cd 	.word	0x080087cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f040 8153 	bne.w	80079a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 814c 	beq.w	80079a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8145 	beq.w	80079a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2210      	movs	r2, #16
 8007720:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772c:	2b40      	cmp	r3, #64	@ 0x40
 800772e:	f040 80bb 	bne.w	80078a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 818f 	beq.w	8007a68 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007750:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007754:	429a      	cmp	r2, r3
 8007756:	f080 8187 	bcs.w	8007a68 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007760:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	f040 8087 	bne.w	8007886 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800778c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1da      	bne.n	8007778 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e1      	bne.n	80077c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800780e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007814:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3308      	adds	r3, #8
 800781e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007822:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007824:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007828:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e3      	bne.n	80077fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007854:	f023 0310 	bic.w	r3, r3, #16
 8007858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007866:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007868:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800786c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e4      	bne.n	8007844 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007880:	4618      	mov	r0, r3
 8007882:	f7fb fb3b 	bl	8002efc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2202      	movs	r2, #2
 800788a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007898:	b29b      	uxth	r3, r3
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	b29b      	uxth	r3, r3
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8fb 	bl	8007a9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078a6:	e0df      	b.n	8007a68 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80d1 	beq.w	8007a6c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80078ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80cc 	beq.w	8007a6c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80078f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e4      	bne.n	80078d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3308      	adds	r3, #8
 8007910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	623b      	str	r3, [r7, #32]
   return(result);
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3308      	adds	r3, #8
 800792e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007932:	633a      	str	r2, [r7, #48]	@ 0x30
 8007934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e1      	bne.n	800790a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	60fb      	str	r3, [r7, #12]
   return(result);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	69b9      	ldr	r1, [r7, #24]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	617b      	str	r3, [r7, #20]
   return(result);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e4      	bne.n	800795a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007996:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f87d 	bl	8007a9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079a2:	e063      	b.n	8007a6c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00e      	beq.n	80079ce <HAL_UART_IRQHandler+0x59e>
 80079b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d008      	beq.n	80079ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fc5e 	bl	8009288 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079cc:	e051      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d014      	beq.n	8007a04 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d008      	beq.n	8007a04 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d03a      	beq.n	8007a70 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
    }
    return;
 8007a02:	e035      	b.n	8007a70 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <HAL_UART_IRQHandler+0x5f4>
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 feeb 	bl	80087f8 <UART_EndTransmit_IT>
    return;
 8007a22:	e026      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d009      	beq.n	8007a44 <HAL_UART_IRQHandler+0x614>
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fc35 	bl	80092ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a42:	e016      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d010      	beq.n	8007a72 <HAL_UART_IRQHandler+0x642>
 8007a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	da0c      	bge.n	8007a72 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fc1e 	bl	800929a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a5e:	e008      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
      return;
 8007a60:	bf00      	nop
 8007a62:	e006      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
    return;
 8007a64:	bf00      	nop
 8007a66:	e004      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
      return;
 8007a68:	bf00      	nop
 8007a6a:	e002      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
      return;
 8007a6c:	bf00      	nop
 8007a6e:	e000      	b.n	8007a72 <HAL_UART_IRQHandler+0x642>
    return;
 8007a70:	bf00      	nop
  }
}
 8007a72:	37e8      	adds	r7, #232	@ 0xe8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr
	...

08007ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab8:	b08c      	sub	sp, #48	@ 0x30
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	431a      	orrs	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	4b94      	ldr	r3, [pc, #592]	@ (8007d34 <UART_SetConfig+0x280>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a89      	ldr	r2, [pc, #548]	@ (8007d38 <UART_SetConfig+0x284>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d004      	beq.n	8007b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007b2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b34:	430b      	orrs	r3, r1
 8007b36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3e:	f023 010f 	bic.w	r1, r3, #15
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a7a      	ldr	r2, [pc, #488]	@ (8007d3c <UART_SetConfig+0x288>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d127      	bne.n	8007ba8 <UART_SetConfig+0xf4>
 8007b58:	2003      	movs	r0, #3
 8007b5a:	f7ff fb2b 	bl	80071b4 <LL_RCC_GetUSARTClockSource>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d81b      	bhi.n	8007ba0 <UART_SetConfig+0xec>
 8007b68:	a201      	add	r2, pc, #4	@ (adr r2, 8007b70 <UART_SetConfig+0xbc>)
 8007b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6e:	bf00      	nop
 8007b70:	08007b81 	.word	0x08007b81
 8007b74:	08007b91 	.word	0x08007b91
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b99 	.word	0x08007b99
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b86:	e080      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8e:	e07c      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007b90:	2304      	movs	r3, #4
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	e078      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007b98:	2308      	movs	r3, #8
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9e:	e074      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba6:	e070      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a64      	ldr	r2, [pc, #400]	@ (8007d40 <UART_SetConfig+0x28c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d138      	bne.n	8007c24 <UART_SetConfig+0x170>
 8007bb2:	200c      	movs	r0, #12
 8007bb4:	f7ff fafe 	bl	80071b4 <LL_RCC_GetUSARTClockSource>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8007bbe:	2b0c      	cmp	r3, #12
 8007bc0:	d82c      	bhi.n	8007c1c <UART_SetConfig+0x168>
 8007bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc8 <UART_SetConfig+0x114>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007bfd 	.word	0x08007bfd
 8007bcc:	08007c1d 	.word	0x08007c1d
 8007bd0:	08007c1d 	.word	0x08007c1d
 8007bd4:	08007c1d 	.word	0x08007c1d
 8007bd8:	08007c0d 	.word	0x08007c0d
 8007bdc:	08007c1d 	.word	0x08007c1d
 8007be0:	08007c1d 	.word	0x08007c1d
 8007be4:	08007c1d 	.word	0x08007c1d
 8007be8:	08007c05 	.word	0x08007c05
 8007bec:	08007c1d 	.word	0x08007c1d
 8007bf0:	08007c1d 	.word	0x08007c1d
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c15 	.word	0x08007c15
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c02:	e042      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c04:	2302      	movs	r3, #2
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0a:	e03e      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	e03a      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c14:	2308      	movs	r3, #8
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1a:	e036      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c22:	e032      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a43      	ldr	r2, [pc, #268]	@ (8007d38 <UART_SetConfig+0x284>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d12a      	bne.n	8007c84 <UART_SetConfig+0x1d0>
 8007c2e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007c32:	f7ff fad1 	bl	80071d8 <LL_RCC_GetLPUARTClockSource>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c3c:	d01a      	beq.n	8007c74 <UART_SetConfig+0x1c0>
 8007c3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c42:	d81b      	bhi.n	8007c7c <UART_SetConfig+0x1c8>
 8007c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c48:	d00c      	beq.n	8007c64 <UART_SetConfig+0x1b0>
 8007c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c4e:	d815      	bhi.n	8007c7c <UART_SetConfig+0x1c8>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <UART_SetConfig+0x1a8>
 8007c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c58:	d008      	beq.n	8007c6c <UART_SetConfig+0x1b8>
 8007c5a:	e00f      	b.n	8007c7c <UART_SetConfig+0x1c8>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c62:	e012      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c64:	2302      	movs	r3, #2
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6a:	e00e      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c72:	e00a      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c74:	2308      	movs	r3, #8
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c7a:	e006      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c7c:	2310      	movs	r3, #16
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c82:	e002      	b.n	8007c8a <UART_SetConfig+0x1d6>
 8007c84:	2310      	movs	r3, #16
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d38 <UART_SetConfig+0x284>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	f040 80a4 	bne.w	8007dde <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d823      	bhi.n	8007ce6 <UART_SetConfig+0x232>
 8007c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <UART_SetConfig+0x1f0>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007ce7 	.word	0x08007ce7
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007ce7 	.word	0x08007ce7
 8007cb4:	08007cd7 	.word	0x08007cd7
 8007cb8:	08007ce7 	.word	0x08007ce7
 8007cbc:	08007ce7 	.word	0x08007ce7
 8007cc0:	08007ce7 	.word	0x08007ce7
 8007cc4:	08007cdf 	.word	0x08007cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc8:	f7fd fde0 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8007ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cce:	e010      	b.n	8007cf2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d44 <UART_SetConfig+0x290>)
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cd4:	e00d      	b.n	8007cf2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd6:	f7fd fd25 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8007cda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cdc:	e009      	b.n	8007cf2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ce4:	e005      	b.n	8007cf2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8137 	beq.w	8007f68 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfe:	4a12      	ldr	r2, [pc, #72]	@ (8007d48 <UART_SetConfig+0x294>)
 8007d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d305      	bcc.n	8007d2a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d910      	bls.n	8007d4c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d30:	e11a      	b.n	8007f68 <UART_SetConfig+0x4b4>
 8007d32:	bf00      	nop
 8007d34:	cfff69f3 	.word	0xcfff69f3
 8007d38:	40008000 	.word	0x40008000
 8007d3c:	40013800 	.word	0x40013800
 8007d40:	40004400 	.word	0x40004400
 8007d44:	00f42400 	.word	0x00f42400
 8007d48:	08020734 	.word	0x08020734
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	2200      	movs	r2, #0
 8007d50:	60bb      	str	r3, [r7, #8]
 8007d52:	60fa      	str	r2, [r7, #12]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	4a8e      	ldr	r2, [pc, #568]	@ (8007f94 <UART_SetConfig+0x4e0>)
 8007d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2200      	movs	r2, #0
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d6e:	f7f8 ffe5 	bl	8000d3c <__aeabi_uldivmod>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4610      	mov	r0, r2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f04f 0200 	mov.w	r2, #0
 8007d7e:	f04f 0300 	mov.w	r3, #0
 8007d82:	020b      	lsls	r3, r1, #8
 8007d84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d88:	0202      	lsls	r2, r0, #8
 8007d8a:	6979      	ldr	r1, [r7, #20]
 8007d8c:	6849      	ldr	r1, [r1, #4]
 8007d8e:	0849      	lsrs	r1, r1, #1
 8007d90:	2000      	movs	r0, #0
 8007d92:	460c      	mov	r4, r1
 8007d94:	4605      	mov	r5, r0
 8007d96:	eb12 0804 	adds.w	r8, r2, r4
 8007d9a:	eb43 0905 	adc.w	r9, r3, r5
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	469a      	mov	sl, r3
 8007da6:	4693      	mov	fp, r2
 8007da8:	4652      	mov	r2, sl
 8007daa:	465b      	mov	r3, fp
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7f8 ffc4 	bl	8000d3c <__aeabi_uldivmod>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4613      	mov	r3, r2
 8007dba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dc2:	d308      	bcc.n	8007dd6 <UART_SetConfig+0x322>
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dca:	d204      	bcs.n	8007dd6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6a3a      	ldr	r2, [r7, #32]
 8007dd2:	60da      	str	r2, [r3, #12]
 8007dd4:	e0c8      	b.n	8007f68 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ddc:	e0c4      	b.n	8007f68 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007de6:	d167      	bne.n	8007eb8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007de8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d828      	bhi.n	8007e42 <UART_SetConfig+0x38e>
 8007df0:	a201      	add	r2, pc, #4	@ (adr r2, 8007df8 <UART_SetConfig+0x344>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e1d 	.word	0x08007e1d
 8007dfc:	08007e25 	.word	0x08007e25
 8007e00:	08007e2d 	.word	0x08007e2d
 8007e04:	08007e43 	.word	0x08007e43
 8007e08:	08007e33 	.word	0x08007e33
 8007e0c:	08007e43 	.word	0x08007e43
 8007e10:	08007e43 	.word	0x08007e43
 8007e14:	08007e43 	.word	0x08007e43
 8007e18:	08007e3b 	.word	0x08007e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e1c:	f7fd fd36 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8007e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e22:	e014      	b.n	8007e4e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e24:	f7fd fd44 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8007e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e2a:	e010      	b.n	8007e4e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8007f98 <UART_SetConfig+0x4e4>)
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e30:	e00d      	b.n	8007e4e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e32:	f7fd fc77 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8007e36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e38:	e009      	b.n	8007e4e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e40:	e005      	b.n	8007e4e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 8089 	beq.w	8007f68 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	4a4e      	ldr	r2, [pc, #312]	@ (8007f94 <UART_SetConfig+0x4e0>)
 8007e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e60:	461a      	mov	r2, r3
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e68:	005a      	lsls	r2, r3, #1
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	085b      	lsrs	r3, r3, #1
 8007e70:	441a      	add	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	2b0f      	cmp	r3, #15
 8007e80:	d916      	bls.n	8007eb0 <UART_SetConfig+0x3fc>
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e88:	d212      	bcs.n	8007eb0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f023 030f 	bic.w	r3, r3, #15
 8007e92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	8bfb      	ldrh	r3, [r7, #30]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	8bfa      	ldrh	r2, [r7, #30]
 8007eac:	60da      	str	r2, [r3, #12]
 8007eae:	e05b      	b.n	8007f68 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007eb6:	e057      	b.n	8007f68 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d828      	bhi.n	8007f12 <UART_SetConfig+0x45e>
 8007ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec8 <UART_SetConfig+0x414>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08007eed 	.word	0x08007eed
 8007ecc:	08007ef5 	.word	0x08007ef5
 8007ed0:	08007efd 	.word	0x08007efd
 8007ed4:	08007f13 	.word	0x08007f13
 8007ed8:	08007f03 	.word	0x08007f03
 8007edc:	08007f13 	.word	0x08007f13
 8007ee0:	08007f13 	.word	0x08007f13
 8007ee4:	08007f13 	.word	0x08007f13
 8007ee8:	08007f0b 	.word	0x08007f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eec:	f7fd fcce 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8007ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ef2:	e014      	b.n	8007f1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ef4:	f7fd fcdc 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8007ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007efa:	e010      	b.n	8007f1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007efc:	4b26      	ldr	r3, [pc, #152]	@ (8007f98 <UART_SetConfig+0x4e4>)
 8007efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f00:	e00d      	b.n	8007f1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f02:	f7fd fc0f 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8007f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f08:	e009      	b.n	8007f1e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f10:	e005      	b.n	8007f1e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d021      	beq.n	8007f68 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f28:	4a1a      	ldr	r2, [pc, #104]	@ (8007f94 <UART_SetConfig+0x4e0>)
 8007f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	441a      	add	r2, r3
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	2b0f      	cmp	r3, #15
 8007f4c:	d909      	bls.n	8007f62 <UART_SetConfig+0x4ae>
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f54:	d205      	bcs.n	8007f62 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60da      	str	r2, [r3, #12]
 8007f60:	e002      	b.n	8007f68 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2200      	movs	r2, #0
 8007f82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3730      	adds	r7, #48	@ 0x30
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f92:	bf00      	nop
 8007f94:	08020734 	.word	0x08020734
 8007f98:	00f42400 	.word	0x00f42400

08007f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00a      	beq.n	8007fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01a      	beq.n	80080b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800809a:	d10a      	bne.n	80080b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]
  }
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr

080080de <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b086      	sub	sp, #24
 80080e2:	af02      	add	r7, sp, #8
 80080e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080ee:	f7f9 fa89 	bl	8001604 <HAL_GetTick>
 80080f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b08      	cmp	r3, #8
 8008100:	d10e      	bne.n	8008120 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008102:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f832 	bl	800817a <UART_WaitOnFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e028      	b.n	8008172 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b04      	cmp	r3, #4
 800812c:	d10e      	bne.n	800814c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f81c 	bl	800817a <UART_WaitOnFlagUntilTimeout>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e012      	b.n	8008172 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b09c      	sub	sp, #112	@ 0x70
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	603b      	str	r3, [r7, #0]
 8008186:	4613      	mov	r3, r2
 8008188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800818a:	e0a9      	b.n	80082e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	f000 80a5 	beq.w	80082e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008196:	f7f9 fa35 	bl	8001604 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d302      	bcc.n	80081ac <UART_WaitOnFlagUntilTimeout+0x32>
 80081a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d140      	bne.n	800822e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80081ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081bc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80081c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081cc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80081d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80081d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e6      	bne.n	80081ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3308      	adds	r3, #8
 80081fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081fe:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008200:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800820c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e5      	bne.n	80081de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e069      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d051      	beq.n	80082e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800824a:	d149      	bne.n	80082e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008254:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	e853 3f00 	ldrex	r3, [r3]
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800826a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
 8008276:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800827a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e6      	bne.n	8008256 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	613b      	str	r3, [r7, #16]
   return(result);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f023 0301 	bic.w	r3, r3, #1
 800829e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80082a8:	623a      	str	r2, [r7, #32]
 80082aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	69f9      	ldr	r1, [r7, #28]
 80082ae:	6a3a      	ldr	r2, [r7, #32]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e010      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69da      	ldr	r2, [r3, #28]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	4013      	ands	r3, r2
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	bf0c      	ite	eq
 80082f0:	2301      	moveq	r3, #1
 80082f2:	2300      	movne	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	461a      	mov	r2, r3
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	f43f af46 	beq.w	800818c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3770      	adds	r7, #112	@ 0x70
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800830c:	b480      	push	{r7}
 800830e:	b0a3      	sub	sp, #140	@ 0x8c
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	88fa      	ldrh	r2, [r7, #6]
 8008324:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	88fa      	ldrh	r2, [r7, #6]
 800832c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800833e:	d10e      	bne.n	800835e <UART_Start_Receive_IT+0x52>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <UART_Start_Receive_IT+0x48>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800834e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008352:	e02d      	b.n	80083b0 <UART_Start_Receive_IT+0xa4>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	22ff      	movs	r2, #255	@ 0xff
 8008358:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800835c:	e028      	b.n	80083b0 <UART_Start_Receive_IT+0xa4>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10d      	bne.n	8008382 <UART_Start_Receive_IT+0x76>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d104      	bne.n	8008378 <UART_Start_Receive_IT+0x6c>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	22ff      	movs	r2, #255	@ 0xff
 8008372:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008376:	e01b      	b.n	80083b0 <UART_Start_Receive_IT+0xa4>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	227f      	movs	r2, #127	@ 0x7f
 800837c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008380:	e016      	b.n	80083b0 <UART_Start_Receive_IT+0xa4>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800838a:	d10d      	bne.n	80083a8 <UART_Start_Receive_IT+0x9c>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <UART_Start_Receive_IT+0x92>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	227f      	movs	r2, #127	@ 0x7f
 8008398:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800839c:	e008      	b.n	80083b0 <UART_Start_Receive_IT+0xa4>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	223f      	movs	r2, #63	@ 0x3f
 80083a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80083a6:	e003      	b.n	80083b0 <UART_Start_Receive_IT+0xa4>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2222      	movs	r2, #34	@ 0x22
 80083bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80083d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80083e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80083e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80083ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80083f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e3      	bne.n	80083c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008400:	d14f      	bne.n	80084a2 <UART_Start_Receive_IT+0x196>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008408:	88fa      	ldrh	r2, [r7, #6]
 800840a:	429a      	cmp	r2, r3
 800840c:	d349      	bcc.n	80084a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008416:	d107      	bne.n	8008428 <UART_Start_Receive_IT+0x11c>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4a46      	ldr	r2, [pc, #280]	@ (800853c <UART_Start_Receive_IT+0x230>)
 8008424:	675a      	str	r2, [r3, #116]	@ 0x74
 8008426:	e002      	b.n	800842e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4a45      	ldr	r2, [pc, #276]	@ (8008540 <UART_Start_Receive_IT+0x234>)
 800842c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01a      	beq.n	800846c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800844a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800845a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800845e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e4      	bne.n	8008436 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008482:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3308      	adds	r3, #8
 800848a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800848c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800848e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800849a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e5      	bne.n	800846c <UART_Start_Receive_IT+0x160>
 80084a0:	e046      	b.n	8008530 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084aa:	d107      	bne.n	80084bc <UART_Start_Receive_IT+0x1b0>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d103      	bne.n	80084bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4a23      	ldr	r2, [pc, #140]	@ (8008544 <UART_Start_Receive_IT+0x238>)
 80084b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80084ba:	e002      	b.n	80084c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4a22      	ldr	r2, [pc, #136]	@ (8008548 <UART_Start_Receive_IT+0x23c>)
 80084c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d019      	beq.n	80084fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d2:	e853 3f00 	ldrex	r3, [r3]
 80084d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80084de:	677b      	str	r3, [r7, #116]	@ 0x74
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e6      	bne.n	80084ca <UART_Start_Receive_IT+0x1be>
 80084fc:	e018      	b.n	8008530 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	613b      	str	r3, [r7, #16]
   return(result);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f043 0320 	orr.w	r3, r3, #32
 8008512:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800851c:	623b      	str	r3, [r7, #32]
 800851e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	69f9      	ldr	r1, [r7, #28]
 8008522:	6a3a      	ldr	r2, [r7, #32]
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	61bb      	str	r3, [r7, #24]
   return(result);
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	378c      	adds	r7, #140	@ 0x8c
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr
 800853c:	08008f21 	.word	0x08008f21
 8008540:	08008bc1 	.word	0x08008bc1
 8008544:	08008a09 	.word	0x08008a09
 8008548:	08008851 	.word	0x08008851

0800854c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b08f      	sub	sp, #60	@ 0x3c
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	61fb      	str	r3, [r7, #28]
   return(result);
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008568:	637b      	str	r3, [r7, #52]	@ 0x34
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008574:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e6      	bne.n	8008554 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	60bb      	str	r3, [r7, #8]
   return(result);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800859c:	633b      	str	r3, [r7, #48]	@ 0x30
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085a6:	61ba      	str	r2, [r7, #24]
 80085a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6979      	ldr	r1, [r7, #20]
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	613b      	str	r3, [r7, #16]
   return(result);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e5      	bne.n	8008586 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80085c2:	bf00      	nop
 80085c4:	373c      	adds	r7, #60	@ 0x3c
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr

080085cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b095      	sub	sp, #84	@ 0x54
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80085f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e6      	bne.n	80085d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3308      	adds	r3, #8
 800860c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	61fb      	str	r3, [r7, #28]
   return(result);
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800862a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800862c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e3      	bne.n	8008606 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d118      	bne.n	8008678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	60bb      	str	r3, [r7, #8]
   return(result);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f023 0310 	bic.w	r3, r3, #16
 800865a:	647b      	str	r3, [r7, #68]	@ 0x44
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6979      	ldr	r1, [r7, #20]
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	613b      	str	r3, [r7, #16]
   return(result);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e6      	bne.n	8008646 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800868c:	bf00      	nop
 800868e:	3754      	adds	r7, #84	@ 0x54
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr

08008696 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b090      	sub	sp, #64	@ 0x40
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d137      	bne.n	8008722 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80086b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	623b      	str	r3, [r7, #32]
   return(result);
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086da:	633a      	str	r2, [r7, #48]	@ 0x30
 80086dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e5      	bne.n	80086ba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008702:	637b      	str	r3, [r7, #52]	@ 0x34
 8008704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	69b9      	ldr	r1, [r7, #24]
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	617b      	str	r3, [r7, #20]
   return(result);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e6      	bne.n	80086ee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008720:	e002      	b.n	8008728 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008722:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008724:	f7f9 fcb8 	bl	8002098 <HAL_UART_TxCpltCallback>
}
 8008728:	bf00      	nop
 800872a:	3740      	adds	r7, #64	@ 0x40
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff f99a 	bl	8007a78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008744:	bf00      	nop
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008758:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008760:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008768:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008774:	2b80      	cmp	r3, #128	@ 0x80
 8008776:	d109      	bne.n	800878c <UART_DMAError+0x40>
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b21      	cmp	r3, #33	@ 0x21
 800877c:	d106      	bne.n	800878c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2200      	movs	r2, #0
 8008782:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008786:	6978      	ldr	r0, [r7, #20]
 8008788:	f7ff fee0 	bl	800854c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008796:	2b40      	cmp	r3, #64	@ 0x40
 8008798:	d109      	bne.n	80087ae <UART_DMAError+0x62>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b22      	cmp	r3, #34	@ 0x22
 800879e:	d106      	bne.n	80087ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80087a8:	6978      	ldr	r0, [r7, #20]
 80087aa:	f7ff ff0f 	bl	80085cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b4:	f043 0210 	orr.w	r2, r3, #16
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087be:	6978      	ldr	r0, [r7, #20]
 80087c0:	f7ff f963 	bl	8007a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c4:	bf00      	nop
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff f94d 	bl	8007a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	60bb      	str	r3, [r7, #8]
   return(result);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6979      	ldr	r1, [r7, #20]
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	613b      	str	r3, [r7, #16]
   return(result);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7f9 fc29 	bl	8002098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008846:	bf00      	nop
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b09c      	sub	sp, #112	@ 0x70
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800885e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008868:	2b22      	cmp	r3, #34	@ 0x22
 800886a:	f040 80be 	bne.w	80089ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008874:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800887c:	b2d9      	uxtb	r1, r3
 800887e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008882:	b2da      	uxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008888:	400a      	ands	r2, r1
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 80a1 	bne.w	80089fa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e6      	bne.n	80088b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	667b      	str	r3, [r7, #100]	@ 0x64
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800890a:	647a      	str	r2, [r7, #68]	@ 0x44
 800890c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e5      	bne.n	80088ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a33      	ldr	r2, [pc, #204]	@ (8008a04 <UART_RxISR_8BIT+0x1b4>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d01f      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	623b      	str	r3, [r7, #32]
   return(result);
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800895e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008968:	633b      	str	r3, [r7, #48]	@ 0x30
 800896a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800896e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008980:	2b01      	cmp	r3, #1
 8008982:	d12e      	bne.n	80089e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	60fb      	str	r3, [r7, #12]
   return(result);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0310 	bic.w	r3, r3, #16
 800899e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	617b      	str	r3, [r7, #20]
   return(result);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f003 0310 	and.w	r3, r3, #16
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	d103      	bne.n	80089d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2210      	movs	r2, #16
 80089d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff f85e 	bl	8007a9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089e0:	e00b      	b.n	80089fa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7f9 fb6e 	bl	80020c4 <HAL_UART_RxCpltCallback>
}
 80089e8:	e007      	b.n	80089fa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699a      	ldr	r2, [r3, #24]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0208 	orr.w	r2, r2, #8
 80089f8:	619a      	str	r2, [r3, #24]
}
 80089fa:	bf00      	nop
 80089fc:	3770      	adds	r7, #112	@ 0x70
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40008000 	.word	0x40008000

08008a08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b09c      	sub	sp, #112	@ 0x70
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a20:	2b22      	cmp	r3, #34	@ 0x22
 8008a22:	f040 80be 	bne.w	8008ba2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a3e:	4013      	ands	r3, r2
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a4a:	1c9a      	adds	r2, r3, #2
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f040 80a1 	bne.w	8008bb2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a84:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e6      	bne.n	8008a70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	f023 0301 	bic.w	r3, r3, #1
 8008ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ac2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a33      	ldr	r2, [pc, #204]	@ (8008bbc <UART_RxISR_16BIT+0x1b4>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d01f      	beq.n	8008b34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d018      	beq.n	8008b34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d12e      	bne.n	8008b9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f023 0310 	bic.w	r3, r3, #16
 8008b56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6979      	ldr	r1, [r7, #20]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e6      	bne.n	8008b42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f003 0310 	and.w	r3, r3, #16
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d103      	bne.n	8008b8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2210      	movs	r2, #16
 8008b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7fe ff82 	bl	8007a9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b98:	e00b      	b.n	8008bb2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f9 fa92 	bl	80020c4 <HAL_UART_RxCpltCallback>
}
 8008ba0:	e007      	b.n	8008bb2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0208 	orr.w	r2, r2, #8
 8008bb0:	619a      	str	r2, [r3, #24]
}
 8008bb2:	bf00      	nop
 8008bb4:	3770      	adds	r7, #112	@ 0x70
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40008000 	.word	0x40008000

08008bc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b0ac      	sub	sp, #176	@ 0xb0
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bce:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bf6:	2b22      	cmp	r3, #34	@ 0x22
 8008bf8:	f040 8182 	bne.w	8008f00 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c02:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c06:	e125      	b.n	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c16:	b2d9      	uxtb	r1, r3
 8008c18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c22:	400a      	ands	r2, r1
 8008c24:	b2d2      	uxtb	r2, r2
 8008c26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d053      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d011      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2201      	movs	r2, #1
 8008c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c80:	f043 0201 	orr.w	r2, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d011      	beq.n	8008cba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00b      	beq.n	8008cba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb0:	f043 0204 	orr.w	r2, r3, #4
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d011      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00b      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce0:	f043 0202 	orr.w	r2, r3, #2
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d006      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe fec8 	bl	8007a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 80a2 	bne.w	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d34:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e4      	bne.n	8008d10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d5c:	f023 0301 	bic.w	r3, r3, #1
 8008d60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d6e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d70:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e1      	bne.n	8008d46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8008f18 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d021      	beq.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01a      	beq.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dd2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e4      	bne.n	8008dae <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d130      	bne.n	8008e4e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	f023 0310 	bic.w	r3, r3, #16
 8008e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e4      	bne.n	8008df2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d103      	bne.n	8008e3e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fe fe28 	bl	8007a9c <HAL_UARTEx_RxEventCallback>
 8008e4c:	e002      	b.n	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7f9 f938 	bl	80020c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e54:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f47f aecf 	bne.w	8008c08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d049      	beq.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e82:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d242      	bcs.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e3      	bne.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a15      	ldr	r2, [pc, #84]	@ (8008f1c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008ec6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f043 0320 	orr.w	r3, r3, #32
 8008edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6979      	ldr	r1, [r7, #20]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e4      	bne.n	8008ec8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008efe:	e007      	b.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0208 	orr.w	r2, r2, #8
 8008f0e:	619a      	str	r2, [r3, #24]
}
 8008f10:	bf00      	nop
 8008f12:	37b0      	adds	r7, #176	@ 0xb0
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40008000 	.word	0x40008000
 8008f1c:	08008851 	.word	0x08008851

08008f20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b0ae      	sub	sp, #184	@ 0xb8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f2e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f56:	2b22      	cmp	r3, #34	@ 0x22
 8008f58:	f040 8186 	bne.w	8009268 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f62:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f66:	e129      	b.n	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f7a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f82:	4013      	ands	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f90:	1c9a      	adds	r2, r3, #2
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d053      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d011      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe4:	f043 0201 	orr.w	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2202      	movs	r2, #2
 800900c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009014:	f043 0204 	orr.w	r2, r3, #4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800901e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800902a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2204      	movs	r2, #4
 800903c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009044:	f043 0202 	orr.w	r2, r3, #2
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7fe fd16 	bl	8007a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	f040 80a4 	bne.w	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009088:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800909a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800909e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e2      	bne.n	8009074 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80090d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e1      	bne.n	80090ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a5f      	ldr	r2, [pc, #380]	@ (8009280 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d021      	beq.n	800914c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01a      	beq.n	800914c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009126:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800912a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800913a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800913e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e4      	bne.n	8009116 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009150:	2b01      	cmp	r3, #1
 8009152:	d130      	bne.n	80091b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916a:	f023 0310 	bic.w	r3, r3, #16
 800916e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800917c:	647b      	str	r3, [r7, #68]	@ 0x44
 800917e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800918a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e4      	bne.n	800915a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b10      	cmp	r3, #16
 800919c:	d103      	bne.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2210      	movs	r2, #16
 80091a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7fe fc74 	bl	8007a9c <HAL_UARTEx_RxEventCallback>
 80091b4:	e002      	b.n	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7f8 ff84 	bl	80020c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d006      	beq.n	80091d2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80091c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f aecb 	bne.w	8008f68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d049      	beq.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091ea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d242      	bcs.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	623b      	str	r3, [r7, #32]
   return(result);
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009216:	633a      	str	r2, [r7, #48]	@ 0x30
 8009218:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800921c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e3      	bne.n	80091f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a15      	ldr	r2, [pc, #84]	@ (8009284 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800922e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	60fb      	str	r3, [r7, #12]
   return(result);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f043 0320 	orr.w	r3, r3, #32
 8009244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	69b9      	ldr	r1, [r7, #24]
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	617b      	str	r3, [r7, #20]
   return(result);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e4      	bne.n	8009230 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009266:	e007      	b.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0208 	orr.w	r2, r2, #8
 8009276:	619a      	str	r2, [r3, #24]
}
 8009278:	bf00      	nop
 800927a:	37b8      	adds	r7, #184	@ 0xb8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40008000 	.word	0x40008000
 8009284:	08008a09 	.word	0x08008a09

08009288 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr

0800929a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr

080092ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr

080092be <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b088      	sub	sp, #32
 80092c2:	af02      	add	r7, sp, #8
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	1d3b      	adds	r3, r7, #4
 80092c8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80092da:	2302      	movs	r3, #2
 80092dc:	e046      	b.n	800936c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2224      	movs	r2, #36	@ 0x24
 80092ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0201 	bic.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d105      	bne.n	8009324 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009318:	1d3b      	adds	r3, r7, #4
 800931a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f911 	bl	8009546 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009334:	f7f8 f966 	bl	8001604 <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800933a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2200      	movs	r2, #0
 8009344:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7fe ff16 	bl	800817a <UART_WaitOnFlagUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	75fb      	strb	r3, [r7, #23]
 8009358:	e003      	b.n	8009362 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2220      	movs	r2, #32
 800935e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009374:	b480      	push	{r7}
 8009376:	b089      	sub	sp, #36	@ 0x24
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009382:	2b01      	cmp	r3, #1
 8009384:	d101      	bne.n	800938a <HAL_UARTEx_EnableStopMode+0x16>
 8009386:	2302      	movs	r3, #2
 8009388:	e021      	b.n	80093ce <HAL_UARTEx_EnableStopMode+0x5a>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f043 0302 	orr.w	r3, r3, #2
 80093a6:	61fb      	str	r3, [r7, #28]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	61bb      	str	r3, [r7, #24]
 80093b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6979      	ldr	r1, [r7, #20]
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	613b      	str	r3, [r7, #16]
   return(result);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e6      	bne.n	8009392 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3724      	adds	r7, #36	@ 0x24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc80      	pop	{r7}
 80093d6:	4770      	bx	lr

080093d8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <HAL_UARTEx_EnableFifoMode+0x16>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e02b      	b.n	8009446 <HAL_UARTEx_EnableFifoMode+0x6e>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2224      	movs	r2, #36	@ 0x24
 80093fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0201 	bic.w	r2, r2, #1
 8009414:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800941c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009424:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f8ac 	bl	800958c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2220      	movs	r2, #32
 8009438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009462:	2302      	movs	r3, #2
 8009464:	e02d      	b.n	80094c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2224      	movs	r2, #36	@ 0x24
 8009472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0201 	bic.w	r2, r2, #1
 800948c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f872 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094de:	2302      	movs	r3, #2
 80094e0:	e02d      	b.n	800953e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2224      	movs	r2, #36	@ 0x24
 80094ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f834 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2220      	movs	r2, #32
 8009530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	1d3b      	adds	r3, r7, #4
 8009550:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f023 0210 	bic.w	r2, r3, #16
 800955e:	893b      	ldrh	r3, [r7, #8]
 8009560:	4619      	mov	r1, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009574:	7abb      	ldrb	r3, [r7, #10]
 8009576:	061a      	lsls	r2, r3, #24
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	605a      	str	r2, [r3, #4]
}
 8009580:	bf00      	nop
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	bc80      	pop	{r7}
 8009588:	4770      	bx	lr
	...

0800958c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009598:	2b00      	cmp	r3, #0
 800959a:	d108      	bne.n	80095ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095ac:	e031      	b.n	8009612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095ae:	2308      	movs	r3, #8
 80095b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095b2:	2308      	movs	r3, #8
 80095b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	0e5b      	lsrs	r3, r3, #25
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	0f5b      	lsrs	r3, r3, #29
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	7b3a      	ldrb	r2, [r7, #12]
 80095da:	4910      	ldr	r1, [pc, #64]	@ (800961c <UARTEx_SetNbDataToProcess+0x90>)
 80095dc:	5c8a      	ldrb	r2, [r1, r2]
 80095de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095e2:	7b3a      	ldrb	r2, [r7, #12]
 80095e4:	490e      	ldr	r1, [pc, #56]	@ (8009620 <UARTEx_SetNbDataToProcess+0x94>)
 80095e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	7b7a      	ldrb	r2, [r7, #13]
 80095f8:	4908      	ldr	r1, [pc, #32]	@ (800961c <UARTEx_SetNbDataToProcess+0x90>)
 80095fa:	5c8a      	ldrb	r2, [r1, r2]
 80095fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009600:	7b7a      	ldrb	r2, [r7, #13]
 8009602:	4907      	ldr	r1, [pc, #28]	@ (8009620 <UARTEx_SetNbDataToProcess+0x94>)
 8009604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009606:	fb93 f3f2 	sdiv	r3, r3, r2
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009612:	bf00      	nop
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr
 800961c:	0802074c 	.word	0x0802074c
 8009620:	08020754 	.word	0x08020754

08009624 <LmHandlerInit>:
}
#endif

#if MY_TX
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800962e:	4a0d      	ldr	r2, [pc, #52]	@ (8009664 <LmHandlerInit+0x40>)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6013      	str	r3, [r2, #0]

#if MY_TX_ABP
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8009634:	4b0c      	ldr	r3, [pc, #48]	@ (8009668 <LmHandlerInit+0x44>)
 8009636:	4a0d      	ldr	r2, [pc, #52]	@ (800966c <LmHandlerInit+0x48>)
 8009638:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800963a:	4b0b      	ldr	r3, [pc, #44]	@ (8009668 <LmHandlerInit+0x44>)
 800963c:	4a0c      	ldr	r2, [pc, #48]	@ (8009670 <LmHandlerInit+0x4c>)
 800963e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8009640:	4b09      	ldr	r3, [pc, #36]	@ (8009668 <LmHandlerInit+0x44>)
 8009642:	4a0c      	ldr	r2, [pc, #48]	@ (8009674 <LmHandlerInit+0x50>)
 8009644:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8009646:	4b08      	ldr	r3, [pc, #32]	@ (8009668 <LmHandlerInit+0x44>)
 8009648:	4a0b      	ldr	r2, [pc, #44]	@ (8009678 <LmHandlerInit+0x54>)
 800964a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800964c:	4b05      	ldr	r3, [pc, #20]	@ (8009664 <LmHandlerInit+0x40>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	4a0a      	ldr	r2, [pc, #40]	@ (800967c <LmHandlerInit+0x58>)
 8009654:	6153      	str	r3, [r2, #20]
		LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
		LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
		LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
		LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
#endif
    return LORAMAC_HANDLER_SUCCESS;
 8009656:	2300      	movs	r3, #0

}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bc80      	pop	{r7}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000990 	.word	0x20000990
 8009668:	20000994 	.word	0x20000994
 800966c:	08009cf9 	.word	0x08009cf9
 8009670:	08009d6d 	.word	0x08009d6d
 8009674:	08009e3d 	.word	0x08009e3d
 8009678:	08009f8d 	.word	0x08009f8d
 800967c:	200009a4 	.word	0x200009a4

08009680 <LmHandlerConfigure>:
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b092      	sub	sp, #72	@ 0x48
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
	MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8009688:	2218      	movs	r2, #24
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	4884      	ldr	r0, [pc, #528]	@ (80098a0 <LmHandlerConfigure+0x220>)
 800968e:	f00c ff50 	bl	8016532 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 8009692:	4b84      	ldr	r3, [pc, #528]	@ (80098a4 <LmHandlerConfigure+0x224>)
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 8009698:	f7f8 ff54 	bl	8002544 <LoraInfo_GetPtr>
 800969c:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800969e:	4b80      	ldr	r3, [pc, #512]	@ (80098a0 <LmHandlerConfigure+0x220>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	2301      	movs	r3, #1
 80096a6:	4093      	lsls	r3, r2
 80096a8:	461a      	mov	r2, r3
 80096aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	4013      	ands	r3, r2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d107      	bne.n	80096c4 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 80096b4:	4b7c      	ldr	r3, [pc, #496]	@ (80098a8 <LmHandlerConfigure+0x228>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	2100      	movs	r1, #0
 80096ba:	2000      	movs	r0, #0
 80096bc:	f00f fc9e 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 80096c4:	4b76      	ldr	r3, [pc, #472]	@ (80098a0 <LmHandlerConfigure+0x220>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	4978      	ldr	r1, [pc, #480]	@ (80098ac <LmHandlerConfigure+0x22c>)
 80096cc:	4878      	ldr	r0, [pc, #480]	@ (80098b0 <LmHandlerConfigure+0x230>)
 80096ce:	f004 f83f 	bl	800d750 <LoRaMacInitialization>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	e0dc      	b.n	8009898 <LmHandlerConfigure+0x218>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 80096de:	2327      	movs	r3, #39	@ 0x27
 80096e0:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80096e2:	f107 0318 	add.w	r3, r7, #24
 80096e6:	4618      	mov	r0, r3
 80096e8:	f004 fd5e 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 80096f2:	4b70      	ldr	r3, [pc, #448]	@ (80098b4 <LmHandlerConfigure+0x234>)
 80096f4:	2201      	movs	r2, #1
 80096f6:	701a      	strb	r2, [r3, #0]
 80096f8:	e02a      	b.n	8009750 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 80096fa:	2328      	movs	r3, #40	@ 0x28
 80096fc:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 80096fe:	4b6e      	ldr	r3, [pc, #440]	@ (80098b8 <LmHandlerConfigure+0x238>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00c      	beq.n	8009722 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009708:	f107 0318 	add.w	r3, r7, #24
 800970c:	4618      	mov	r0, r3
 800970e:	f004 fb73 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8009712:	4b69      	ldr	r3, [pc, #420]	@ (80098b8 <LmHandlerConfigure+0x238>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 800971e:	4610      	mov	r0, r2
 8009720:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 8009722:	2327      	movs	r3, #39	@ 0x27
 8009724:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009726:	f107 0318 	add.w	r3, r7, #24
 800972a:	4618      	mov	r0, r3
 800972c:	f004 fd3c 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10c      	bne.n	8009750 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009736:	2301      	movs	r3, #1
 8009738:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800973a:	f107 0318 	add.w	r3, r7, #24
 800973e:	4618      	mov	r0, r3
 8009740:	f004 fb5a 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009744:	7f3b      	ldrb	r3, [r7, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800974a:	4b5a      	ldr	r3, [pc, #360]	@ (80098b4 <LmHandlerConfigure+0x234>)
 800974c:	2201      	movs	r2, #1
 800974e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 8009750:	4b58      	ldr	r3, [pc, #352]	@ (80098b4 <LmHandlerConfigure+0x234>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d022      	beq.n	800979e <LmHandlerConfigure+0x11e>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8009758:	4b57      	ldr	r3, [pc, #348]	@ (80098b8 <LmHandlerConfigure+0x238>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d004      	beq.n	800976c <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8009762:	4b55      	ldr	r3, [pc, #340]	@ (80098b8 <LmHandlerConfigure+0x238>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	2000      	movs	r0, #0
 800976a:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800976c:	2327      	movs	r3, #39	@ 0x27
 800976e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8009770:	f107 0318 	add.w	r3, r7, #24
 8009774:	4618      	mov	r0, r3
 8009776:	f004 fb3f 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800977e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009780:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009784:	4b46      	ldr	r3, [pc, #280]	@ (80098a0 <LmHandlerConfigure+0x220>)
 8009786:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8009788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800978a:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800978e:	4b44      	ldr	r3, [pc, #272]	@ (80098a0 <LmHandlerConfigure+0x220>)
 8009790:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8009792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009794:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8009798:	4b41      	ldr	r3, [pc, #260]	@ (80098a0 <LmHandlerConfigure+0x220>)
 800979a:	709a      	strb	r2, [r3, #2]
 800979c:	e008      	b.n	80097b0 <LmHandlerConfigure+0x130>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800979e:	2305      	movs	r3, #5
 80097a0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80097a6:	f107 0318 	add.w	r3, r7, #24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f004 fcfc 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 80097b0:	4b3e      	ldr	r3, [pc, #248]	@ (80098ac <LmHandlerConfigure+0x22c>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	4a3d      	ldr	r2, [pc, #244]	@ (80098ac <LmHandlerConfigure+0x22c>)
 80097b6:	68d2      	ldr	r2, [r2, #12]
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f00c fb4c 	bl	8015e58 <SecureElementInitMcuID>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <LmHandlerConfigure+0x14c>
    {
        return LORAMAC_HANDLER_ERROR;
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	e065      	b.n	8009898 <LmHandlerConfigure+0x218>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 80097cc:	2306      	movs	r3, #6
 80097ce:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80097d0:	f107 0318 	add.w	r3, r7, #24
 80097d4:	4618      	mov	r0, r3
 80097d6:	f004 fb0f 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	4a37      	ldr	r2, [pc, #220]	@ (80098bc <LmHandlerConfigure+0x23c>)
 80097de:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 80097e0:	f107 0318 	add.w	r3, r7, #24
 80097e4:	4618      	mov	r0, r3
 80097e6:	f004 fcdf 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 80097ea:	2302      	movs	r3, #2
 80097ec:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 80097ee:	4b33      	ldr	r3, [pc, #204]	@ (80098bc <LmHandlerConfigure+0x23c>)
 80097f0:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80097f2:	f107 0318 	add.w	r3, r7, #24
 80097f6:	4618      	mov	r0, r3
 80097f8:	f004 fafe 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 80097fc:	2303      	movs	r3, #3
 80097fe:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8009800:	4b2f      	ldr	r3, [pc, #188]	@ (80098c0 <LmHandlerConfigure+0x240>)
 8009802:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009804:	f107 0318 	add.w	r3, r7, #24
 8009808:	4618      	mov	r0, r3
 800980a:	f004 faf5 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800980e:	f00c fba3 	bl	8015f58 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 8009812:	230f      	movs	r3, #15
 8009814:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8009816:	2301      	movs	r3, #1
 8009818:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800981a:	f107 0318 	add.w	r3, r7, #24
 800981e:	4618      	mov	r0, r3
 8009820:	f004 fcc2 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 8009824:	2310      	movs	r3, #16
 8009826:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8009828:	2300      	movs	r3, #0
 800982a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800982c:	f107 0318 	add.w	r3, r7, #24
 8009830:	4618      	mov	r0, r3
 8009832:	f004 fcb9 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 8009836:	2304      	movs	r3, #4
 8009838:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800983a:	4b19      	ldr	r3, [pc, #100]	@ (80098a0 <LmHandlerConfigure+0x220>)
 800983c:	789b      	ldrb	r3, [r3, #2]
 800983e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009840:	f107 0318 	add.w	r3, r7, #24
 8009844:	4618      	mov	r0, r3
 8009846:	f004 fcaf 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800984a:	233a      	movs	r3, #58	@ 0x3a
 800984c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800984e:	4b14      	ldr	r3, [pc, #80]	@ (80098a0 <LmHandlerConfigure+0x220>)
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009854:	f107 0318 	add.w	r3, r7, #24
 8009858:	4618      	mov	r0, r3
 800985a:	f004 fca5 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800985e:	230f      	movs	r3, #15
 8009860:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8009862:	4b0f      	ldr	r3, [pc, #60]	@ (80098a0 <LmHandlerConfigure+0x220>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	f107 0210 	add.w	r2, r7, #16
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f007 fbc2 	bl	8010ff6 <RegionGetPhyParam>
 8009872:	4603      	mov	r3, r0
 8009874:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	bf14      	ite	ne
 800987c:	2301      	movne	r3, #1
 800987e:	2300      	moveq	r3, #0
 8009880:	b2da      	uxtb	r2, r3
 8009882:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <LmHandlerConfigure+0x220>)
 8009884:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 8009886:	2014      	movs	r0, #20
 8009888:	f000 fa1e 	bl	8009cc8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800988c:	4b04      	ldr	r3, [pc, #16]	@ (80098a0 <LmHandlerConfigure+0x220>)
 800988e:	79db      	ldrb	r3, [r3, #7]
 8009890:	4618      	mov	r0, r3
 8009892:	f005 fb03 	bl	800ee9c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3748      	adds	r7, #72	@ 0x48
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20000978 	.word	0x20000978
 80098a4:	200009c0 	.word	0x200009c0
 80098a8:	080201b8 	.word	0x080201b8
 80098ac:	200009a4 	.word	0x200009a4
 80098b0:	20000994 	.word	0x20000994
 80098b4:	200009c1 	.word	0x200009c1
 80098b8:	20000990 	.word	0x20000990
 80098bc:	2000094c 	.word	0x2000094c
 80098c0:	20000954 	.word	0x20000954

080098c4 <LmHandlerJoin>:
    return DutyCycleWaitTime;
}
#if MY_TX
#if MY_TX_ABP
void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08c      	sub	sp, #48	@ 0x30
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	460a      	mov	r2, r1
 80098ce:	71fb      	strb	r3, [r7, #7]
 80098d0:	4613      	mov	r3, r2
 80098d2:	71bb      	strb	r3, [r7, #6]

	if( mode == ACTIVATION_TYPE_ABP )
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d10d      	bne.n	80098f6 <LmHandlerJoin+0x32>
	{

		MibRequestConfirm_t mibReq;

		JoinParams.forceRejoin = forceRejoin;
 80098da:	4a09      	ldr	r2, [pc, #36]	@ (8009900 <LmHandlerJoin+0x3c>)
 80098dc:	79bb      	ldrb	r3, [r7, #6]
 80098de:	7213      	strb	r3, [r2, #8]

		LoRaMacStart();
 80098e0:	f004 f9ec 	bl	800dcbc <LoRaMacStart>

		mibReq.Type = MIB_NETWORK_ACTIVATION;
 80098e4:	2301      	movs	r3, #1
 80098e6:	723b      	strb	r3, [r7, #8]
		mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80098e8:	2301      	movs	r3, #1
 80098ea:	733b      	strb	r3, [r7, #12]
		LoRaMacMibSetRequestConfirm( &mibReq );
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	4618      	mov	r0, r3
 80098f2:	f004 fc59 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>
	}
}
 80098f6:	bf00      	nop
 80098f8:	3730      	adds	r7, #48	@ 0x30
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000078 	.word	0x20000078

08009904 <LmHandlerJoinStatus>:
#endif /* LORAMAC_VERSION */
}
#endif

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08c      	sub	sp, #48	@ 0x30
 8009908:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800990a:	2301      	movs	r3, #1
 800990c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800990e:	1d3b      	adds	r3, r7, #4
 8009910:	4618      	mov	r0, r3
 8009912:	f004 fa71 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800991c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009924:	7a3b      	ldrb	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800992a:	2300      	movs	r3, #0
 800992c:	e002      	b.n	8009934 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8009932:	2300      	movs	r3, #0
    }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3730      	adds	r7, #48	@ 0x30
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <LmHandlerSend>:
LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08a      	sub	sp, #40	@ 0x28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
 8009948:	4613      	mov	r3, r2
 800994a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800994c:	23ff      	movs	r3, #255	@ 0xff
 800994e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 8009952:	f001 fbbf 	bl	800b0d4 <LoRaMacIsBusy>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800995c:	f06f 0301 	mvn.w	r3, #1
 8009960:	e0ab      	b.n	8009aba <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 8009962:	f001 fbdf 	bl	800b124 <LoRaMacIsStopped>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800996c:	f06f 0302 	mvn.w	r3, #2
 8009970:	e0a3      	b.n	8009aba <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8009972:	f7ff ffc7 	bl	8009904 <LmHandlerJoinStatus>
 8009976:	4603      	mov	r3, r0
 8009978:	2b01      	cmp	r3, #1
 800997a:	d00a      	beq.n	8009992 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800997c:	4b51      	ldr	r3, [pc, #324]	@ (8009ac4 <LmHandlerSend+0x188>)
 800997e:	79db      	ldrb	r3, [r3, #7]
 8009980:	4a50      	ldr	r2, [pc, #320]	@ (8009ac4 <LmHandlerSend+0x188>)
 8009982:	7a12      	ldrb	r2, [r2, #8]
 8009984:	4611      	mov	r1, r2
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff ff9c 	bl	80098c4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800998c:	f06f 0302 	mvn.w	r3, #2
 8009990:	e093      	b.n	8009aba <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 8009992:	4a4d      	ldr	r2, [pc, #308]	@ (8009ac8 <LmHandlerSend+0x18c>)
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	2b00      	cmp	r3, #0
 800999c:	bf14      	ite	ne
 800999e:	2301      	movne	r3, #1
 80099a0:	2300      	moveq	r3, #0
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80099a6:	4b49      	ldr	r3, [pc, #292]	@ (8009acc <LmHandlerSend+0x190>)
 80099a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80099ac:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	785b      	ldrb	r3, [r3, #1]
 80099b2:	f107 020c 	add.w	r2, r7, #12
 80099b6:	4611      	mov	r1, r2
 80099b8:	4618      	mov	r0, r3
 80099ba:	f004 f98d 	bl	800dcd8 <LoRaMacQueryTxPossible>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80099c4:	2300      	movs	r3, #0
 80099c6:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80099d0:	23f9      	movs	r3, #249	@ 0xf9
 80099d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80099d6:	e008      	b.n	80099ea <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	785b      	ldrb	r3, [r3, #1]
 80099e2:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 80099ea:	4b37      	ldr	r3, [pc, #220]	@ (8009ac8 <LmHandlerSend+0x18c>)
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	3310      	adds	r3, #16
 80099f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099f4:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80099f8:	4b34      	ldr	r3, [pc, #208]	@ (8009acc <LmHandlerSend+0x190>)
 80099fa:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80099fe:	4b32      	ldr	r3, [pc, #200]	@ (8009ac8 <LmHandlerSend+0x18c>)
 8009a00:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8009a02:	78ba      	ldrb	r2, [r7, #2]
 8009a04:	f107 0310 	add.w	r3, r7, #16
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f005 f90e 	bl	800ec2c <LoRaMacMcpsRequest>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	4a2d      	ldr	r2, [pc, #180]	@ (8009ad0 <LmHandlerSend+0x194>)
 8009a1a:	6013      	str	r3, [r2, #0]

    switch( status )
 8009a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a20:	2b11      	cmp	r3, #17
 8009a22:	d843      	bhi.n	8009aac <LmHandlerSend+0x170>
 8009a24:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <LmHandlerSend+0xf0>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a75 	.word	0x08009a75
 8009a30:	08009a8d 	.word	0x08009a8d
 8009a34:	08009aad 	.word	0x08009aad
 8009a38:	08009aad 	.word	0x08009aad
 8009a3c:	08009aad 	.word	0x08009aad
 8009a40:	08009aad 	.word	0x08009aad
 8009a44:	08009aad 	.word	0x08009aad
 8009a48:	08009a95 	.word	0x08009a95
 8009a4c:	08009aad 	.word	0x08009aad
 8009a50:	08009aad 	.word	0x08009aad
 8009a54:	08009aad 	.word	0x08009aad
 8009a58:	08009aa5 	.word	0x08009aa5
 8009a5c:	08009aad 	.word	0x08009aad
 8009a60:	08009aad 	.word	0x08009aad
 8009a64:	08009a8d 	.word	0x08009a8d
 8009a68:	08009a8d 	.word	0x08009a8d
 8009a6c:	08009a8d 	.word	0x08009a8d
 8009a70:	08009a9d 	.word	0x08009a9d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 8009a74:	4b17      	ldr	r3, [pc, #92]	@ (8009ad4 <LmHandlerSend+0x198>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8009a7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009a7e:	f113 0f07 	cmn.w	r3, #7
 8009a82:	d017      	beq.n	8009ab4 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8009a84:	2300      	movs	r3, #0
 8009a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8009a8a:	e013      	b.n	8009ab4 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8009a8c:	23fe      	movs	r3, #254	@ 0xfe
 8009a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009a92:	e010      	b.n	8009ab6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009a94:	23fd      	movs	r3, #253	@ 0xfd
 8009a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009a9a:	e00c      	b.n	8009ab6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8009a9c:	23fb      	movs	r3, #251	@ 0xfb
 8009a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009aa2:	e008      	b.n	8009ab6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8009aa4:	23fa      	movs	r3, #250	@ 0xfa
 8009aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009aaa:	e004      	b.n	8009ab6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8009aac:	23ff      	movs	r3, #255	@ 0xff
 8009aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009ab2:	e000      	b.n	8009ab6 <LmHandlerSend+0x17a>
            break;
 8009ab4:	bf00      	nop
    }

    return lmhStatus;
 8009ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	@ 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20000078 	.word	0x20000078
 8009ac8:	20000084 	.word	0x20000084
 8009acc:	20000978 	.word	0x20000978
 8009ad0:	200009bc 	.word	0x200009bc
 8009ad4:	200009c0 	.word	0x200009c0

08009ad8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8009ade:	2309      	movs	r3, #9
 8009ae0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f004 ff09 	bl	800e8fc <LoRaMacMlmeRequest>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	4a06      	ldr	r2, [pc, #24]	@ (8009b0c <LmHandlerDeviceTimeReq+0x34>)
 8009af2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8009afa:	2300      	movs	r3, #0
 8009afc:	e001      	b.n	8009b02 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8009afe:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200009bc 	.word	0x200009bc

08009b10 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8009b1a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bc80      	pop	{r7}
 8009b26:	4770      	bx	lr

08009b28 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08e      	sub	sp, #56	@ 0x38
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009b32:	2300      	movs	r3, #0
 8009b34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 8009b38:	f001 facc 	bl	800b0d4 <LoRaMacIsBusy>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009b42:	f06f 0301 	mvn.w	r3, #1
 8009b46:	e071      	b.n	8009c2c <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8009b48:	f7ff fedc 	bl	8009904 <LmHandlerJoinStatus>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d002      	beq.n	8009b58 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009b52:	f06f 0302 	mvn.w	r3, #2
 8009b56:	e069      	b.n	8009c2c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009b5c:	f107 030c 	add.w	r3, r7, #12
 8009b60:	4618      	mov	r0, r3
 8009b62:	f004 f949 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8009b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b70:	e05c      	b.n	8009c2c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 8009b72:	7c3b      	ldrb	r3, [r7, #16]
 8009b74:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 8009b78:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d052      	beq.n	8009c28 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d028      	beq.n	8009bda <LmHandlerRequestClass+0xb2>
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	dc48      	bgt.n	8009c1e <LmHandlerRequestClass+0xf6>
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <LmHandlerRequestClass+0x6e>
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d01e      	beq.n	8009bd2 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 8009b94:	e043      	b.n	8009c1e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 8009b96:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d041      	beq.n	8009c22 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009ba2:	f107 030c 	add.w	r3, r7, #12
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f004 fafe 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8009bb2:	4b20      	ldr	r3, [pc, #128]	@ (8009c34 <LmHandlerRequestClass+0x10c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d032      	beq.n	8009c22 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8009bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c34 <LmHandlerRequestClass+0x10c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	79fa      	ldrb	r2, [r7, #7]
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
                break;
 8009bc8:	e02b      	b.n	8009c22 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8009bca:	23ff      	movs	r3, #255	@ 0xff
 8009bcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8009bd0:	e027      	b.n	8009c22 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8009bd2:	23ff      	movs	r3, #255	@ 0xff
 8009bd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8009bd8:	e026      	b.n	8009c28 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 8009bda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8009be2:	23ff      	movs	r3, #255	@ 0xff
 8009be4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8009be8:	e01d      	b.n	8009c26 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009bee:	f107 030c 	add.w	r3, r7, #12
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f004 fad8 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10b      	bne.n	8009c16 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009c34 <LmHandlerRequestClass+0x10c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00e      	beq.n	8009c26 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8009c08:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <LmHandlerRequestClass+0x10c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0e:	79fa      	ldrb	r2, [r7, #7]
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
                break;
 8009c14:	e007      	b.n	8009c26 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8009c16:	23ff      	movs	r3, #255	@ 0xff
 8009c18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8009c1c:	e003      	b.n	8009c26 <LmHandlerRequestClass+0xfe>
                break;
 8009c1e:	bf00      	nop
 8009c20:	e002      	b.n	8009c28 <LmHandlerRequestClass+0x100>
                break;
 8009c22:	bf00      	nop
 8009c24:	e000      	b.n	8009c28 <LmHandlerRequestClass+0x100>
                break;
 8009c26:	bf00      	nop
        }
    }
    return errorStatus;
 8009c28:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3738      	adds	r7, #56	@ 0x38
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000990 	.word	0x20000990

08009c38 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08c      	sub	sp, #48	@ 0x30
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4a:	e010      	b.n	8009c6e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009c50:	f107 0308 	add.w	r3, r7, #8
 8009c54:	4618      	mov	r0, r3
 8009c56:	f004 f8cf 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8009c60:	f04f 33ff 	mov.w	r3, #4294967295
 8009c64:	e003      	b.n	8009c6e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8009c66:	7b3a      	ldrb	r2, [r7, #12]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3730      	adds	r7, #48	@ 0x30
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08c      	sub	sp, #48	@ 0x30
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d102      	bne.n	8009c8c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8009c86:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8a:	e016      	b.n	8009cba <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	4618      	mov	r0, r3
 8009c96:	f004 f8af 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8009ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca4:	e009      	b.n	8009cba <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 8009ca6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f993 2000 	ldrsb.w	r2, [r3]
 8009cb4:	4b03      	ldr	r3, [pc, #12]	@ (8009cc4 <LmHandlerGetTxDatarate+0x4c>)
 8009cb6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3730      	adds	r7, #48	@ 0x30
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000978 	.word	0x20000978

08009cc8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08c      	sub	sp, #48	@ 0x30
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8009cd0:	2323      	movs	r3, #35	@ 0x23
 8009cd2:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009cd8:	f107 0308 	add.w	r3, r7, #8
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f004 fa63 	bl	800e1a8 <LoRaMacMibSetRequestConfirm>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8009ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cec:	e000      	b.n	8009cf0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3730      	adds	r7, #48	@ 0x30
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8009d00:	4b18      	ldr	r3, [pc, #96]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d02:	2201      	movs	r2, #1
 8009d04:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	785a      	ldrb	r2, [r3, #1]
 8009d0a:	4b16      	ldr	r3, [pc, #88]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d0c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	789b      	ldrb	r3, [r3, #2]
 8009d12:	b25a      	sxtb	r2, r3
 8009d14:	4b13      	ldr	r3, [pc, #76]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d16:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	4a11      	ldr	r2, [pc, #68]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d1e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8009d26:	4b0f      	ldr	r3, [pc, #60]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d28:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	4b0c      	ldr	r3, [pc, #48]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d32:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	791b      	ldrb	r3, [r3, #4]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d3c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 8009d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d68 <McpsConfirm+0x70>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d004      	beq.n	8009d52 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8009d48:	4b07      	ldr	r3, [pc, #28]	@ (8009d68 <McpsConfirm+0x70>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4e:	4805      	ldr	r0, [pc, #20]	@ (8009d64 <McpsConfirm+0x6c>)
 8009d50:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	2000      	movs	r0, #0
 8009d56:	f000 f963 	bl	800a020 <LmHandlerPackagesNotify>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000084 	.word	0x20000084
 8009d68:	20000990 	.word	0x20000990

08009d6c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 8009d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8009e30 <McpsIndication+0xc4>)
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	785a      	ldrb	r2, [r3, #1]
 8009d84:	4b2a      	ldr	r3, [pc, #168]	@ (8009e30 <McpsIndication+0xc4>)
 8009d86:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8009d88:	4b29      	ldr	r3, [pc, #164]	@ (8009e30 <McpsIndication+0xc4>)
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d14b      	bne.n	8009e28 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	791b      	ldrb	r3, [r3, #4]
 8009d94:	b25a      	sxtb	r2, r3
 8009d96:	4b26      	ldr	r3, [pc, #152]	@ (8009e30 <McpsIndication+0xc4>)
 8009d98:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009da0:	b25a      	sxtb	r2, r3
 8009da2:	4b23      	ldr	r3, [pc, #140]	@ (8009e30 <McpsIndication+0xc4>)
 8009da4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8009dac:	4b20      	ldr	r3, [pc, #128]	@ (8009e30 <McpsIndication+0xc4>)
 8009dae:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	78da      	ldrb	r2, [r3, #3]
 8009db4:	4b1e      	ldr	r3, [pc, #120]	@ (8009e30 <McpsIndication+0xc4>)
 8009db6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8009e30 <McpsIndication+0xc4>)
 8009dbe:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	78db      	ldrb	r3, [r3, #3]
 8009dc4:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	7b1b      	ldrb	r3, [r3, #12]
 8009dca:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 8009dd2:	4b18      	ldr	r3, [pc, #96]	@ (8009e34 <McpsIndication+0xc8>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d007      	beq.n	8009dec <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8009ddc:	4b15      	ldr	r3, [pc, #84]	@ (8009e34 <McpsIndication+0xc8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de2:	f107 0210 	add.w	r2, r7, #16
 8009de6:	4912      	ldr	r1, [pc, #72]	@ (8009e30 <McpsIndication+0xc4>)
 8009de8:	4610      	mov	r0, r2
 8009dea:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8009dec:	4b11      	ldr	r3, [pc, #68]	@ (8009e34 <McpsIndication+0xc8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <McpsIndication+0x9a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7e1b      	ldrb	r3, [r3, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8009dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009e34 <McpsIndication+0xc8>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e04:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	2001      	movs	r0, #1
 8009e0a:	f000 f909 	bl	800a020 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 8009e0e:	f107 030f 	add.w	r3, r7, #15
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff ff10 	bl	8009c38 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	795b      	ldrb	r3, [r3, #5]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 8009e20:	4b05      	ldr	r3, [pc, #20]	@ (8009e38 <McpsIndication+0xcc>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	701a      	strb	r2, [r3, #0]
 8009e26:	e000      	b.n	8009e2a <McpsIndication+0xbe>
        return;
 8009e28:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	200000a0 	.word	0x200000a0
 8009e34:	20000990 	.word	0x20000990
 8009e38:	200009c0 	.word	0x200009c0

08009e3c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08c      	sub	sp, #48	@ 0x30
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8009e44:	4b49      	ldr	r3, [pc, #292]	@ (8009f6c <MlmeConfirm+0x130>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	785a      	ldrb	r2, [r3, #1]
 8009e4e:	4b47      	ldr	r3, [pc, #284]	@ (8009f6c <MlmeConfirm+0x130>)
 8009e50:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8009e52:	4b47      	ldr	r3, [pc, #284]	@ (8009f70 <MlmeConfirm+0x134>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8009e5c:	4b44      	ldr	r3, [pc, #272]	@ (8009f70 <MlmeConfirm+0x134>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e62:	4842      	ldr	r0, [pc, #264]	@ (8009f6c <MlmeConfirm+0x130>)
 8009e64:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	2002      	movs	r0, #2
 8009e6a:	f000 f8d9 	bl	800a020 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	2b0b      	cmp	r3, #11
 8009e76:	d872      	bhi.n	8009f5e <MlmeConfirm+0x122>
 8009e78:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <MlmeConfirm+0x44>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009eb1 	.word	0x08009eb1
 8009e84:	08009f5f 	.word	0x08009f5f
 8009e88:	08009f5f 	.word	0x08009f5f
 8009e8c:	08009f5f 	.word	0x08009f5f
 8009e90:	08009f2d 	.word	0x08009f2d
 8009e94:	08009f5f 	.word	0x08009f5f
 8009e98:	08009f5f 	.word	0x08009f5f
 8009e9c:	08009f5f 	.word	0x08009f5f
 8009ea0:	08009f5f 	.word	0x08009f5f
 8009ea4:	08009f5f 	.word	0x08009f5f
 8009ea8:	08009f45 	.word	0x08009f45
 8009eac:	08009f5f 	.word	0x08009f5f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8009eb0:	2306      	movs	r3, #6
 8009eb2:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8009eb4:	f107 0308 	add.w	r3, r7, #8
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f003 ff9d 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8009ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8009f74 <MlmeConfirm+0x138>)
 8009ec0:	79db      	ldrb	r3, [r3, #7]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f00c fa98 	bl	80163fc <SecureElementSetDevAddr>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4a28      	ldr	r2, [pc, #160]	@ (8009f78 <MlmeConfirm+0x13c>)
 8009ed6:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8009ed8:	4828      	ldr	r0, [pc, #160]	@ (8009f7c <MlmeConfirm+0x140>)
 8009eda:	f7ff fecd 	bl	8009c78 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8009ede:	4828      	ldr	r0, [pc, #160]	@ (8009f80 <MlmeConfirm+0x144>)
 8009ee0:	f000 f91a 	bl	800a118 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009ee4:	4b21      	ldr	r3, [pc, #132]	@ (8009f6c <MlmeConfirm+0x130>)
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d108      	bne.n	8009efe <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009eec:	4b21      	ldr	r3, [pc, #132]	@ (8009f74 <MlmeConfirm+0x138>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8009ef2:	4b24      	ldr	r3, [pc, #144]	@ (8009f84 <MlmeConfirm+0x148>)
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff fe16 	bl	8009b28 <LmHandlerRequestClass>
 8009efc:	e002      	b.n	8009f04 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8009efe:	4b1d      	ldr	r3, [pc, #116]	@ (8009f74 <MlmeConfirm+0x138>)
 8009f00:	22ff      	movs	r2, #255	@ 0xff
 8009f02:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8009f04:	4b1a      	ldr	r3, [pc, #104]	@ (8009f70 <MlmeConfirm+0x134>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8009f0e:	4b18      	ldr	r3, [pc, #96]	@ (8009f70 <MlmeConfirm+0x134>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f14:	4817      	ldr	r0, [pc, #92]	@ (8009f74 <MlmeConfirm+0x138>)
 8009f16:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009f18:	4b14      	ldr	r3, [pc, #80]	@ (8009f6c <MlmeConfirm+0x130>)
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d120      	bne.n	8009f62 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8009f20:	4b14      	ldr	r3, [pc, #80]	@ (8009f74 <MlmeConfirm+0x138>)
 8009f22:	79db      	ldrb	r3, [r3, #7]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f00c f82b 	bl	8015f80 <SecureElementPrintSessionKeys>
                }
            }
            break;
 8009f2a:	e01a      	b.n	8009f62 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8009f2c:	4b16      	ldr	r3, [pc, #88]	@ (8009f88 <MlmeConfirm+0x14c>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	7a1a      	ldrb	r2, [r3, #8]
 8009f36:	4b14      	ldr	r3, [pc, #80]	@ (8009f88 <MlmeConfirm+0x14c>)
 8009f38:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7a5a      	ldrb	r2, [r3, #9]
 8009f3e:	4b12      	ldr	r3, [pc, #72]	@ (8009f88 <MlmeConfirm+0x14c>)
 8009f40:	74da      	strb	r2, [r3, #19]
            }
            break;
 8009f42:	e00f      	b.n	8009f64 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8009f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f84 <MlmeConfirm+0x148>)
 8009f4e:	7c1b      	ldrb	r3, [r3, #16]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fddd 	bl	8009b10 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 8009f56:	e005      	b.n	8009f64 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 8009f58:	f7ff fdbe 	bl	8009ad8 <LmHandlerDeviceTimeReq>
            break;
 8009f5c:	e002      	b.n	8009f64 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8009f5e:	bf00      	nop
 8009f60:	e000      	b.n	8009f64 <MlmeConfirm+0x128>
            break;
 8009f62:	bf00      	nop
    }
}
 8009f64:	bf00      	nop
 8009f66:	3730      	adds	r7, #48	@ 0x30
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000084 	.word	0x20000084
 8009f70:	20000990 	.word	0x20000990
 8009f74:	20000078 	.word	0x20000078
 8009f78:	2000094c 	.word	0x2000094c
 8009f7c:	2000007c 	.word	0x2000007c
 8009f80:	2000007d 	.word	0x2000007d
 8009f84:	20000978 	.word	0x20000978
 8009f88:	200000a0 	.word	0x200000a0

08009f8c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 8009f96:	4b20      	ldr	r3, [pc, #128]	@ (800a018 <MlmeIndication+0x8c>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	785a      	ldrb	r2, [r3, #1]
 8009fa0:	4b1d      	ldr	r3, [pc, #116]	@ (800a018 <MlmeIndication+0x8c>)
 8009fa2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	789b      	ldrb	r3, [r3, #2]
 8009fa8:	b25a      	sxtb	r2, r3
 8009faa:	4b1b      	ldr	r3, [pc, #108]	@ (800a018 <MlmeIndication+0x8c>)
 8009fac:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fb4:	b25a      	sxtb	r2, r3
 8009fb6:	4b18      	ldr	r3, [pc, #96]	@ (800a018 <MlmeIndication+0x8c>)
 8009fb8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8009fc0:	4b15      	ldr	r3, [pc, #84]	@ (800a018 <MlmeIndication+0x8c>)
 8009fc2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	78da      	ldrb	r2, [r3, #3]
 8009fc8:	4b13      	ldr	r3, [pc, #76]	@ (800a018 <MlmeIndication+0x8c>)
 8009fca:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	4a11      	ldr	r2, [pc, #68]	@ (800a018 <MlmeIndication+0x8c>)
 8009fd2:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8009fd4:	4b11      	ldr	r3, [pc, #68]	@ (800a01c <MlmeIndication+0x90>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00d      	beq.n	8009ffa <MlmeIndication+0x6e>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	2b0a      	cmp	r3, #10
 8009fe4:	d009      	beq.n	8009ffa <MlmeIndication+0x6e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b0e      	cmp	r3, #14
 8009fec:	d005      	beq.n	8009ffa <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8009fee:	4b0b      	ldr	r3, [pc, #44]	@ (800a01c <MlmeIndication+0x90>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff4:	4908      	ldr	r1, [pc, #32]	@ (800a018 <MlmeIndication+0x8c>)
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	2003      	movs	r0, #3
 8009ffe:	f000 f80f 	bl	800a020 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b0a      	cmp	r3, #10
 800a008:	d001      	beq.n	800a00e <MlmeIndication+0x82>
 800a00a:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800a00c:	e000      	b.n	800a010 <MlmeIndication+0x84>
            break;
 800a00e:	bf00      	nop
    }
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200000a0 	.word	0x200000a0
 800a01c:	20000990 	.word	0x20000990

0800a020 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a02c:	2300      	movs	r3, #0
 800a02e:	73fb      	strb	r3, [r7, #15]
 800a030:	e067      	b.n	800a102 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800a032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a036:	4a37      	ldr	r2, [pc, #220]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d05a      	beq.n	800a0f6 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b03      	cmp	r3, #3
 800a044:	d84e      	bhi.n	800a0e4 <LmHandlerPackagesNotify+0xc4>
 800a046:	a201      	add	r2, pc, #4	@ (adr r2, 800a04c <LmHandlerPackagesNotify+0x2c>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a05d 	.word	0x0800a05d
 800a050:	0800a07f 	.word	0x0800a07f
 800a054:	0800a0a1 	.word	0x0800a0a1
 800a058:	0800a0c3 	.word	0x0800a0c3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800a05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a060:	4a2c      	ldr	r2, [pc, #176]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d03d      	beq.n	800a0e8 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800a06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a070:	4a28      	ldr	r2, [pc, #160]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	6838      	ldr	r0, [r7, #0]
 800a07a:	4798      	blx	r3
                        }
                        break;
 800a07c:	e034      	b.n	800a0e8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800a07e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a082:	4a24      	ldr	r2, [pc, #144]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d02e      	beq.n	800a0ec <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800a08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a092:	4a20      	ldr	r2, [pc, #128]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	6838      	ldr	r0, [r7, #0]
 800a09c:	4798      	blx	r3
                        }
                        break;
 800a09e:	e025      	b.n	800a0ec <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d01f      	beq.n	800a0f0 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800a0b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b4:	4a17      	ldr	r2, [pc, #92]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	6838      	ldr	r0, [r7, #0]
 800a0be:	4798      	blx	r3
                        }
                        break;
 800a0c0:	e016      	b.n	800a0f0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800a0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0c6:	4a13      	ldr	r2, [pc, #76]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d010      	beq.n	800a0f4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800a0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a114 <LmHandlerPackagesNotify+0xf4>)
 800a0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0de:	6838      	ldr	r0, [r7, #0]
 800a0e0:	4798      	blx	r3
                        }
                        break;
 800a0e2:	e007      	b.n	800a0f4 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800a0e4:	bf00      	nop
 800a0e6:	e006      	b.n	800a0f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a0e8:	bf00      	nop
 800a0ea:	e004      	b.n	800a0f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a0ec:	bf00      	nop
 800a0ee:	e002      	b.n	800a0f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a0f0:	bf00      	nop
 800a0f2:	e000      	b.n	800a0f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a0f4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	73fb      	strb	r3, [r7, #15]
 800a102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a106:	2b04      	cmp	r3, #4
 800a108:	dd93      	ble.n	800a032 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	20000964 	.word	0x20000964

0800a118 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08c      	sub	sp, #48	@ 0x30
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d102      	bne.n	800a12c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800a126:	f04f 33ff 	mov.w	r3, #4294967295
 800a12a:	e016      	b.n	800a15a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800a12c:	2321      	movs	r3, #33	@ 0x21
 800a12e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	4618      	mov	r0, r3
 800a136:	f003 fe5f 	bl	800ddf8 <LoRaMacMibGetRequestConfirm>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800a140:	f04f 33ff 	mov.w	r3, #4294967295
 800a144:	e009      	b.n	800a15a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800a146:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f993 2000 	ldrsb.w	r2, [r3]
 800a154:	4b03      	ldr	r3, [pc, #12]	@ (800a164 <LmHandlerGetTxPower+0x4c>)
 800a156:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3730      	adds	r7, #48	@ 0x30
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000978 	.word	0x20000978

0800a168 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a16e:	f00f feb9 	bl	8019ee4 <UTIL_TIMER_GetCurrentTime>
 800a172:	4603      	mov	r3, r0
 800a174:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a8 <OnRadioTxDone+0x40>)
 800a176:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800a178:	4c0c      	ldr	r4, [pc, #48]	@ (800a1ac <OnRadioTxDone+0x44>)
 800a17a:	463b      	mov	r3, r7
 800a17c:	4618      	mov	r0, r3
 800a17e:	f00f fca5 	bl	8019acc <SysTimeGet>
 800a182:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800a186:	463a      	mov	r2, r7
 800a188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a18c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800a190:	4a07      	ldr	r2, [pc, #28]	@ (800a1b0 <OnRadioTxDone+0x48>)
 800a192:	7813      	ldrb	r3, [r2, #0]
 800a194:	f043 0320 	orr.w	r3, r3, #32
 800a198:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a19a:	f003 fa89 	bl	800d6b0 <OnMacProcessNotify>
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );

}
 800a19e:	bf00      	nop
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd90      	pop	{r4, r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000f74 	.word	0x20000f74
 800a1ac:	200009c4 	.word	0x200009c4
 800a1b0:	20000f70 	.word	0x20000f70

0800a1b4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	817b      	strh	r3, [r7, #10]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	813b      	strh	r3, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a1ce:	f00f fe89 	bl	8019ee4 <UTIL_TIMER_GetCurrentTime>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4a11      	ldr	r2, [pc, #68]	@ (800a21c <OnRadioRxDone+0x68>)
 800a1d6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800a1d8:	4a10      	ldr	r2, [pc, #64]	@ (800a21c <OnRadioRxDone+0x68>)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800a1de:	4a0f      	ldr	r2, [pc, #60]	@ (800a21c <OnRadioRxDone+0x68>)
 800a1e0:	897b      	ldrh	r3, [r7, #10]
 800a1e2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800a1e4:	4a0d      	ldr	r2, [pc, #52]	@ (800a21c <OnRadioRxDone+0x68>)
 800a1e6:	893b      	ldrh	r3, [r7, #8]
 800a1e8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800a1ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a21c <OnRadioRxDone+0x68>)
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800a1f0:	4a0b      	ldr	r2, [pc, #44]	@ (800a220 <OnRadioRxDone+0x6c>)
 800a1f2:	7813      	ldrb	r3, [r2, #0]
 800a1f4:	f043 0310 	orr.w	r3, r3, #16
 800a1f8:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800a1fa:	4a09      	ldr	r2, [pc, #36]	@ (800a220 <OnRadioRxDone+0x6c>)
 800a1fc:	7813      	ldrb	r3, [r2, #0]
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800a204:	f003 fa54 	bl	800d6b0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800a208:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <OnRadioRxDone+0x70>)
 800a20a:	2201      	movs	r2, #1
 800a20c:	2100      	movs	r1, #0
 800a20e:	2002      	movs	r0, #2
 800a210:	f00e fef4 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
}
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000f78 	.word	0x20000f78
 800a220:	20000f70 	.word	0x20000f70
 800a224:	08020204 	.word	0x08020204

0800a228 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a22c:	4a07      	ldr	r2, [pc, #28]	@ (800a24c <OnRadioTxTimeout+0x24>)
 800a22e:	7813      	ldrb	r3, [r2, #0]
 800a230:	f043 0308 	orr.w	r3, r3, #8
 800a234:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a236:	f003 fa3b 	bl	800d6b0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800a23a:	4b05      	ldr	r3, [pc, #20]	@ (800a250 <OnRadioTxTimeout+0x28>)
 800a23c:	2201      	movs	r2, #1
 800a23e:	2100      	movs	r1, #0
 800a240:	2002      	movs	r0, #2
 800a242:	f00e fedb 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>

}
 800a246:	bf00      	nop
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20000f70 	.word	0x20000f70
 800a250:	08020214 	.word	0x08020214

0800a254 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800a258:	4a04      	ldr	r2, [pc, #16]	@ (800a26c <OnRadioRxError+0x18>)
 800a25a:	7813      	ldrb	r3, [r2, #0]
 800a25c:	f043 0304 	orr.w	r3, r3, #4
 800a260:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a262:	f003 fa25 	bl	800d6b0 <OnMacProcessNotify>
}
 800a266:	bf00      	nop
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000f70 	.word	0x20000f70

0800a270 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a274:	4a07      	ldr	r2, [pc, #28]	@ (800a294 <OnRadioRxTimeout+0x24>)
 800a276:	7813      	ldrb	r3, [r2, #0]
 800a278:	f043 0302 	orr.w	r3, r3, #2
 800a27c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a27e:	f003 fa17 	bl	800d6b0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800a282:	4b05      	ldr	r3, [pc, #20]	@ (800a298 <OnRadioRxTimeout+0x28>)
 800a284:	2201      	movs	r2, #1
 800a286:	2100      	movs	r1, #0
 800a288:	2002      	movs	r0, #2
 800a28a:	f00e feb7 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
}
 800a28e:	bf00      	nop
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20000f70 	.word	0x20000f70
 800a298:	08020224 	.word	0x08020224

0800a29c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a2a0:	4b08      	ldr	r3, [pc, #32]	@ (800a2c4 <UpdateRxSlotIdleState+0x28>)
 800a2a2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d004      	beq.n	800a2b4 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800a2aa:	4b07      	ldr	r3, [pc, #28]	@ (800a2c8 <UpdateRxSlotIdleState+0x2c>)
 800a2ac:	2206      	movs	r2, #6
 800a2ae:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800a2b2:	e003      	b.n	800a2bc <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a2b4:	4b04      	ldr	r3, [pc, #16]	@ (800a2c8 <UpdateRxSlotIdleState+0x2c>)
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800a2bc:	bf00      	nop
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bc80      	pop	{r7}
 800a2c2:	4770      	bx	lr
 800a2c4:	20008000 	.word	0x20008000
 800a2c8:	200009c4 	.word	0x200009c4

0800a2cc <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b092      	sub	sp, #72	@ 0x48
 800a2d0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a2d2:	4b54      	ldr	r3, [pc, #336]	@ (800a424 <ProcessRadioTxDone+0x158>)
 800a2d4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d002      	beq.n	800a2e2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800a2dc:	4b52      	ldr	r3, [pc, #328]	@ (800a428 <ProcessRadioTxDone+0x15c>)
 800a2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e0:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
    TimerStart( &MacCtx.RxWindowTimer2 );
    CRITICAL_SECTION_END( );
#else
    if (Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE)
 800a2e2:	4b50      	ldr	r3, [pc, #320]	@ (800a424 <ProcessRadioTxDone+0x158>)
 800a2e4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d12b      	bne.n	800a344 <ProcessRadioTxDone+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a2f0:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    {
        // Setup timers
        CRITICAL_SECTION_BEGIN( );
 800a2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800a2f6:	b672      	cpsid	i
}
 800a2f8:	bf00      	nop
        uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800a2fa:	f00f fdf3 	bl	8019ee4 <UTIL_TIMER_GetCurrentTime>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b4a      	ldr	r3, [pc, #296]	@ (800a42c <ProcessRadioTxDone+0x160>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	63bb      	str	r3, [r7, #56]	@ 0x38
        TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800a308:	4b49      	ldr	r3, [pc, #292]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a30a:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800a30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4619      	mov	r1, r3
 800a314:	4847      	ldr	r0, [pc, #284]	@ (800a434 <ProcessRadioTxDone+0x168>)
 800a316:	f00f fdbb 	bl	8019e90 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer1 );
 800a31a:	4846      	ldr	r0, [pc, #280]	@ (800a434 <ProcessRadioTxDone+0x168>)
 800a31c:	f00f fcda 	bl	8019cd4 <UTIL_TIMER_Start>
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800a320:	4b43      	ldr	r3, [pc, #268]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a322:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800a326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	4619      	mov	r1, r3
 800a32c:	4842      	ldr	r0, [pc, #264]	@ (800a438 <ProcessRadioTxDone+0x16c>)
 800a32e:	f00f fdaf 	bl	8019e90 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800a332:	4841      	ldr	r0, [pc, #260]	@ (800a438 <ProcessRadioTxDone+0x16c>)
 800a334:	f00f fcce 	bl	8019cd4 <UTIL_TIMER_Start>
 800a338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a33a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33e:	f383 8810 	msr	PRIMASK, r3
}
 800a342:	e00e      	b.n	800a362 <ProcessRadioTxDone+0x96>
        CRITICAL_SECTION_END( );
    }
    else
    {
        MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a344:	4b3a      	ldr	r3, [pc, #232]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a346:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a34e:	4a38      	ldr	r2, [pc, #224]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a350:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a354:	4a36      	ldr	r2, [pc, #216]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a356:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a35a:	f043 0310 	orr.w	r3, r3, #16
 800a35e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800a362:	4b33      	ldr	r3, [pc, #204]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a364:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01a      	beq.n	800a3a2 <ProcessRadioTxDone+0xd6>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800a36c:	2315      	movs	r3, #21
 800a36e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a372:	4b2c      	ldr	r3, [pc, #176]	@ (800a424 <ProcessRadioTxDone+0x158>)
 800a374:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a378:	f107 0220 	add.w	r2, r7, #32
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f006 fe39 	bl	8010ff6 <RegionGetPhyParam>
 800a384:	4603      	mov	r3, r0
 800a386:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a388:	4b29      	ldr	r3, [pc, #164]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a38a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	4413      	add	r3, r2
 800a392:	4619      	mov	r1, r3
 800a394:	4829      	ldr	r0, [pc, #164]	@ (800a43c <ProcessRadioTxDone+0x170>)
 800a396:	f00f fd7b 	bl	8019e90 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800a39a:	4828      	ldr	r0, [pc, #160]	@ (800a43c <ProcessRadioTxDone+0x170>)
 800a39c:	f00f fc9a 	bl	8019cd4 <UTIL_TIMER_Start>
 800a3a0:	e003      	b.n	800a3aa <ProcessRadioTxDone+0xde>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a3a2:	4b23      	ldr	r3, [pc, #140]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800a3aa:	4b20      	ldr	r3, [pc, #128]	@ (800a42c <ProcessRadioTxDone+0x160>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1d      	ldr	r2, [pc, #116]	@ (800a424 <ProcessRadioTxDone+0x158>)
 800a3b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

     //Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800a3b2:	4b1f      	ldr	r3, [pc, #124]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a3b4:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800a3b8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a3ba:	4b1c      	ldr	r3, [pc, #112]	@ (800a42c <ProcessRadioTxDone+0x160>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800a3c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f00f fbb9 	bl	8019b3c <SysTimeGetMcuTime>
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	4b15      	ldr	r3, [pc, #84]	@ (800a424 <ProcessRadioTxDone+0x158>)
 800a3ce:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800a3d2:	9200      	str	r2, [sp, #0]
 800a3d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a3d8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a3dc:	ca06      	ldmia	r2, {r1, r2}
 800a3de:	f00f fb0e 	bl	80199fe <SysTimeSub>
 800a3e2:	f107 0314 	add.w	r3, r7, #20
 800a3e6:	463a      	mov	r2, r7
 800a3e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3ec:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800a3f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a430 <ProcessRadioTxDone+0x164>)
 800a3f2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800a3f6:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a3fc:	4b09      	ldr	r3, [pc, #36]	@ (800a424 <ProcessRadioTxDone+0x158>)
 800a3fe:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <ProcessRadioTxDone+0x13e>
    {
        txDone.Joined  = false;
 800a406:	2300      	movs	r3, #0
 800a408:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800a40a:	4b06      	ldr	r3, [pc, #24]	@ (800a424 <ProcessRadioTxDone+0x158>)
 800a40c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a410:	f107 0208 	add.w	r2, r7, #8
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f006 fe0e 	bl	8011038 <RegionSetBandTxDone>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

}
 800a41c:	bf00      	nop
 800a41e:	3740      	adds	r7, #64	@ 0x40
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	20008000 	.word	0x20008000
 800a428:	08020bac 	.word	0x08020bac
 800a42c:	20000f74 	.word	0x20000f74
 800a430:	200009c4 	.word	0x200009c4
 800a434:	20000d44 	.word	0x20000d44
 800a438:	20000d5c 	.word	0x20000d5c
 800a43c:	20000dc4 	.word	0x20000dc4

0800a440 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a444:	4b10      	ldr	r3, [pc, #64]	@ (800a488 <PrepareRxDoneAbort+0x48>)
 800a446:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44e:	4a0e      	ldr	r2, [pc, #56]	@ (800a488 <PrepareRxDoneAbort+0x48>)
 800a450:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800a454:	4b0c      	ldr	r3, [pc, #48]	@ (800a488 <PrepareRxDoneAbort+0x48>)
 800a456:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800a45e:	2000      	movs	r0, #0
 800a460:	f001 f9fa 	bl	800b858 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800a464:	4a08      	ldr	r2, [pc, #32]	@ (800a488 <PrepareRxDoneAbort+0x48>)
 800a466:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a46a:	f043 0302 	orr.w	r3, r3, #2
 800a46e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a472:	4a05      	ldr	r2, [pc, #20]	@ (800a488 <PrepareRxDoneAbort+0x48>)
 800a474:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a478:	f043 0310 	orr.w	r3, r3, #16
 800a47c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800a480:	f7ff ff0c 	bl	800a29c <UpdateRxSlotIdleState>
}
 800a484:	bf00      	nop
 800a486:	bd80      	pop	{r7, pc}
 800a488:	200009c4 	.word	0x200009c4

0800a48c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800a48c:	b590      	push	{r4, r7, lr}
 800a48e:	b0ab      	sub	sp, #172	@ 0xac
 800a490:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800a492:	2312      	movs	r3, #18
 800a494:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800a498:	4b81      	ldr	r3, [pc, #516]	@ (800a6a0 <ProcessRadioRxDone+0x214>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint16_t size = RxDoneParams.Size;
 800a4a0:	4b7f      	ldr	r3, [pc, #508]	@ (800a6a0 <ProcessRadioRxDone+0x214>)
 800a4a2:	891b      	ldrh	r3, [r3, #8]
 800a4a4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800a4a8:	4b7d      	ldr	r3, [pc, #500]	@ (800a6a0 <ProcessRadioRxDone+0x214>)
 800a4aa:	895b      	ldrh	r3, [r3, #10]
 800a4ac:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    int8_t snr = RxDoneParams.Snr;
 800a4b0:	4b7b      	ldr	r3, [pc, #492]	@ (800a6a0 <ProcessRadioRxDone+0x214>)
 800a4b2:	7b1b      	ldrb	r3, [r3, #12]
 800a4b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    uint8_t pktHeaderLen = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    uint32_t downLinkCounter = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800a4c2:	4b78      	ldr	r3, [pc, #480]	@ (800a6a4 <ProcessRadioRxDone+0x218>)
 800a4c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a4c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint8_t multicast = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800a4de:	4a72      	ldr	r2, [pc, #456]	@ (800a6a8 <ProcessRadioRxDone+0x21c>)
 800a4e0:	7813      	ldrb	r3, [r2, #0]
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800a4e8:	4b70      	ldr	r3, [pc, #448]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800a4f0:	4a6e      	ldr	r2, [pc, #440]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a4f2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a4f6:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800a4fa:	4a6c      	ldr	r2, [pc, #432]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a4fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a500:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800a504:	4b69      	ldr	r3, [pc, #420]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a506:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800a50a:	4b68      	ldr	r3, [pc, #416]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a50c:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800a510:	4b66      	ldr	r3, [pc, #408]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800a518:	4b64      	ldr	r3, [pc, #400]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800a520:	4b62      	ldr	r3, [pc, #392]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800a528:	4b60      	ldr	r3, [pc, #384]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800a530:	4b5e      	ldr	r3, [pc, #376]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a532:	2200      	movs	r2, #0
 800a534:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800a538:	4b5c      	ldr	r3, [pc, #368]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800a540:	4b5a      	ldr	r3, [pc, #360]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a542:	2200      	movs	r2, #0
 800a544:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a548:	4b58      	ldr	r3, [pc, #352]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a550:	4b56      	ldr	r3, [pc, #344]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a552:	2200      	movs	r2, #0
 800a554:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800a558:	4b54      	ldr	r3, [pc, #336]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a560:	4b52      	ldr	r3, [pc, #328]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800a568:	4b50      	ldr	r3, [pc, #320]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800a570:	4b4f      	ldr	r3, [pc, #316]	@ (800a6b0 <ProcessRadioRxDone+0x224>)
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800a576:	4b4d      	ldr	r3, [pc, #308]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a578:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800a580:	484c      	ldr	r0, [pc, #304]	@ (800a6b4 <ProcessRadioRxDone+0x228>)
 800a582:	f00f fc15 	bl	8019db0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a586:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a58a:	4619      	mov	r1, r3
 800a58c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a590:	f004 fdae 	bl	800f0f0 <LoRaMacClassBRxBeacon>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00b      	beq.n	800a5b2 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a59a:	4a44      	ldr	r2, [pc, #272]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a59c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a5a0:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a5a4:	4a41      	ldr	r2, [pc, #260]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a5a6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a5aa:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800a5ae:	f000 bc75 	b.w	800ae9c <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a5b2:	4b3c      	ldr	r3, [pc, #240]	@ (800a6a4 <ProcessRadioRxDone+0x218>)
 800a5b4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d11e      	bne.n	800a5fa <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a5bc:	f004 fdab 	bl	800f116 <LoRaMacClassBIsPingExpected>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f004 fd5c 	bl	800f084 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	f004 fd7d 	bl	800f0cc <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a5d2:	4b36      	ldr	r3, [pc, #216]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a5d4:	2204      	movs	r2, #4
 800a5d6:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800a5da:	e00e      	b.n	800a5fa <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a5dc:	f004 fda2 	bl	800f124 <LoRaMacClassBIsMulticastExpected>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f004 fd56 	bl	800f098 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	f004 fd76 	bl	800f0de <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a5f2:	4b2e      	ldr	r3, [pc, #184]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a5f4:	2205      	movs	r2, #5
 800a5f6:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800a5fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d107      	bne.n	800a612 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a602:	4b2a      	ldr	r3, [pc, #168]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800a60a:	f7ff ff19 	bl	800a440 <PrepareRxDoneAbort>
        return;
 800a60e:	f000 bc45 	b.w	800ae9c <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800a612:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	f887 208e 	strb.w	r2, [r7, #142]	@ 0x8e
 800a61c:	461a      	mov	r2, r3
 800a61e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a622:	4413      	add	r3, r2
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800a62a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800a62e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800a632:	b2db      	uxtb	r3, r3
 800a634:	3b01      	subs	r3, #1
 800a636:	2b06      	cmp	r3, #6
 800a638:	f200 8403 	bhi.w	800ae42 <ProcessRadioRxDone+0x9b6>
 800a63c:	a201      	add	r2, pc, #4	@ (adr r2, 800a644 <ProcessRadioRxDone+0x1b8>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a661 	.word	0x0800a661
 800a648:	0800ae43 	.word	0x0800ae43
 800a64c:	0800a85f 	.word	0x0800a85f
 800a650:	0800ae43 	.word	0x0800ae43
 800a654:	0800a857 	.word	0x0800a857
 800a658:	0800ae43 	.word	0x0800ae43
 800a65c:	0800ade7 	.word	0x0800ade7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a660:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a664:	2b10      	cmp	r3, #16
 800a666:	d807      	bhi.n	800a678 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a668:	4b10      	ldr	r3, [pc, #64]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a670:	f7ff fee6 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800a674:	f000 bc12 	b.w	800ae9c <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800a678:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a67c:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800a67e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a682:	b2db      	uxtb	r3, r3
 800a684:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a686:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <ProcessRadioRxDone+0x218>)
 800a688:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d013      	beq.n	800a6b8 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a690:	4b06      	ldr	r3, [pc, #24]	@ (800a6ac <ProcessRadioRxDone+0x220>)
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a698:	f7ff fed2 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800a69c:	e3fe      	b.n	800ae9c <ProcessRadioRxDone+0xa10>
 800a69e:	bf00      	nop
 800a6a0:	20000f78 	.word	0x20000f78
 800a6a4:	20008000 	.word	0x20008000
 800a6a8:	20000f70 	.word	0x20000f70
 800a6ac:	200009c4 	.word	0x200009c4
 800a6b0:	08020bac 	.word	0x08020bac
 800a6b4:	20000d5c 	.word	0x20000d5c
            }

            SecureElementGetJoinEui( joinEui );
 800a6b8:	f107 0308 	add.w	r3, r7, #8
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f00b feb7 	bl	8016430 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800a6c2:	f107 0218 	add.w	r2, r7, #24
 800a6c6:	f107 0308 	add.w	r3, r7, #8
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	20ff      	movs	r0, #255	@ 0xff
 800a6ce:	f005 ff17 	bl	8010500 <LoRaMacCryptoHandleJoinAccept>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a6de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a6e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	b25b      	sxtb	r3, r3
 800a6ea:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a6ec:	4bb1      	ldr	r3, [pc, #708]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a6ee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800a6f2:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800a6f4:	4baf      	ldr	r3, [pc, #700]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a6f6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a6fa:	1d39      	adds	r1, r7, #4
 800a6fc:	2207      	movs	r2, #7
 800a6fe:	4618      	mov	r0, r3
 800a700:	f006 fcc7 	bl	8011092 <RegionVerify>
 800a704:	4603      	mov	r3, r0
 800a706:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800a70a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f040 8095 	bne.w	800a83e <ProcessRadioRxDone+0x3b2>
 800a714:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 8090 	beq.w	800a83e <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a71e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a722:	461a      	mov	r2, r3
 800a724:	4ba3      	ldr	r3, [pc, #652]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a726:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a72a:	4ba2      	ldr	r3, [pc, #648]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a72c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a730:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a734:	021b      	lsls	r3, r3, #8
 800a736:	4313      	orrs	r3, r2
 800a738:	4a9e      	ldr	r2, [pc, #632]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a73a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a73e:	4b9d      	ldr	r3, [pc, #628]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a740:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a748:	041b      	lsls	r3, r3, #16
 800a74a:	4313      	orrs	r3, r2
 800a74c:	4a99      	ldr	r2, [pc, #612]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a74e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a754:	4a97      	ldr	r2, [pc, #604]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a756:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800a75a:	4b96      	ldr	r3, [pc, #600]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a75c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a760:	4619      	mov	r1, r3
 800a762:	2002      	movs	r0, #2
 800a764:	f00b fe4a 	bl	80163fc <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a768:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a76c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a770:	b2db      	uxtb	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	4b8f      	ldr	r3, [pc, #572]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a776:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a77a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a77e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a782:	b2db      	uxtb	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	4b8b      	ldr	r3, [pc, #556]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a788:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a78c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a790:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a794:	b2db      	uxtb	r3, r3
 800a796:	461a      	mov	r2, r3
 800a798:	4b86      	ldr	r3, [pc, #536]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a79a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a79e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	4b83      	ldr	r3, [pc, #524]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7a6:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a7a8:	4b82      	ldr	r3, [pc, #520]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a7b0:	4b80      	ldr	r3, [pc, #512]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a7b6:	4b7f      	ldr	r3, [pc, #508]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a7be:	fb02 f303 	mul.w	r3, r2, r3
 800a7c2:	4a7c      	ldr	r2, [pc, #496]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7c4:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a7c6:	4b7b      	ldr	r3, [pc, #492]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800a7ce:	4a79      	ldr	r2, [pc, #484]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800a7d2:	4b78      	ldr	r3, [pc, #480]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a7da:	4b76      	ldr	r3, [pc, #472]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a7e2:	f107 0318 	add.w	r3, r7, #24
 800a7e6:	3312      	adds	r3, #18
 800a7e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800a7ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	3b11      	subs	r3, #17
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800a7fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a7fc:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800a800:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a804:	4b6b      	ldr	r3, [pc, #428]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a806:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a80a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f006 fc5f 	bl	80110d4 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a816:	4b67      	ldr	r3, [pc, #412]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a818:	2202      	movs	r2, #2
 800a81a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800a81e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800a822:	4618      	mov	r0, r3
 800a824:	f005 f97a 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 8311 	beq.w	800ae52 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800a830:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800a834:	4619      	mov	r1, r3
 800a836:	2000      	movs	r0, #0
 800a838:	f005 f8e4 	bl	800fa04 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800a83c:	e309      	b.n	800ae52 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a83e:	2001      	movs	r0, #1
 800a840:	f005 f96c 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 8302 	beq.w	800ae50 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a84c:	2101      	movs	r1, #1
 800a84e:	2007      	movs	r0, #7
 800a850:	f005 f8d8 	bl	800fa04 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800a854:	e2fc      	b.n	800ae50 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a856:	4b58      	ldr	r3, [pc, #352]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a85e:	4b55      	ldr	r3, [pc, #340]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a860:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800a864:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a868:	4b53      	ldr	r3, [pc, #332]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a86a:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a874:	230d      	movs	r3, #13
 800a876:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a87a:	4b4e      	ldr	r3, [pc, #312]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a87c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a884:	230e      	movs	r3, #14
 800a886:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a88a:	4b4a      	ldr	r3, [pc, #296]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a88c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a890:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f006 fbad 	bl	8010ff6 <RegionGetPhyParam>
 800a89c:	4603      	mov	r3, r0
 800a89e:	673b      	str	r3, [r7, #112]	@ 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a8a0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a8a4:	3b0d      	subs	r3, #13
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	b21b      	sxth	r3, r3
 800a8aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8ae:	b21a      	sxth	r2, r3
 800a8b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8b2:	b21b      	sxth	r3, r3
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	dc03      	bgt.n	800a8c0 <ProcessRadioRxDone+0x434>
 800a8b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a8bc:	2b0b      	cmp	r3, #11
 800a8be:	d806      	bhi.n	800a8ce <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8c0:	4b3d      	ldr	r3, [pc, #244]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a8c8:	f7ff fdba 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800a8cc:	e2e6      	b.n	800ae9c <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800a8ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a8d2:	643b      	str	r3, [r7, #64]	@ 0x40
            macMsgData.BufSize = size;
 800a8d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a8de:	4b37      	ldr	r3, [pc, #220]	@ (800a9bc <ProcessRadioRxDone+0x530>)
 800a8e0:	667b      	str	r3, [r7, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a8e2:	23ff      	movs	r3, #255	@ 0xff
 800a8e4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a8e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f006 f904 	bl	8010afa <LoRaMacParserData>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d006      	beq.n	800a906 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8f8:	4b2f      	ldr	r3, [pc, #188]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a900:	f7ff fd9e 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800a904:	e2ca      	b.n	800ae9c <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a906:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b4 <ProcessRadioRxDone+0x528>)
 800a908:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d132      	bne.n	800a976 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800a910:	f004 fc01 	bl	800f116 <LoRaMacClassBIsPingExpected>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d014      	beq.n	800a944 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a91a:	2000      	movs	r0, #0
 800a91c:	f004 fbb2 	bl	800f084 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800a920:	2000      	movs	r0, #0
 800a922:	f004 fbd3 	bl	800f0cc <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a926:	4b24      	ldr	r3, [pc, #144]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a928:	2204      	movs	r2, #4
 800a92a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a92e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a930:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800a934:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	4619      	mov	r1, r3
 800a93c:	4610      	mov	r0, r2
 800a93e:	f004 fc73 	bl	800f228 <LoRaMacClassBSetFPendingBit>
 800a942:	e018      	b.n	800a976 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a944:	f004 fbee 	bl	800f124 <LoRaMacClassBIsMulticastExpected>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d013      	beq.n	800a976 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a94e:	2000      	movs	r0, #0
 800a950:	f004 fba2 	bl	800f098 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a954:	2000      	movs	r0, #0
 800a956:	f004 fbc2 	bl	800f0de <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a95a:	4b17      	ldr	r3, [pc, #92]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a95c:	2205      	movs	r2, #5
 800a95e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a964:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800a968:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f004 fc59 	bl	800f228 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a978:	4a0f      	ldr	r2, [pc, #60]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a97a:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a97e:	f107 0212 	add.w	r2, r7, #18
 800a982:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f002 fd8d 	bl	800d4a8 <DetermineFrameType>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a994:	4b08      	ldr	r3, [pc, #32]	@ (800a9b8 <ProcessRadioRxDone+0x52c>)
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a99c:	f7ff fd50 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800a9a0:	e27c      	b.n	800ae9c <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            downLinkCounter = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800a9b2:	e055      	b.n	800aa60 <ProcessRadioRxDone+0x5d4>
 800a9b4:	20008000 	.word	0x20008000
 800a9b8:	200009c4 	.word	0x200009c4
 800a9bc:	20000bfc 	.word	0x20000bfc
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a9c0:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800a9c4:	499f      	ldr	r1, [pc, #636]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	440b      	add	r3, r1
 800a9d0:	33ec      	adds	r3, #236	@ 0xec
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d13d      	bne.n	800aa56 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a9da:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800a9de:	4999      	ldr	r1, [pc, #612]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	4413      	add	r3, r2
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	440b      	add	r3, r1
 800a9ea:	33e9      	adds	r3, #233	@ 0xe9
 800a9ec:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d031      	beq.n	800aa56 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a9f8:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800a9fc:	4991      	ldr	r1, [pc, #580]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800a9fe:	4613      	mov	r3, r2
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	4413      	add	r3, r2
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	440b      	add	r3, r1
 800aa08:	33ea      	adds	r3, #234	@ 0xea
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800aa10:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800aa14:	498b      	ldr	r1, [pc, #556]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800aa16:	4613      	mov	r3, r2
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	4413      	add	r3, r2
 800aa1c:	011b      	lsls	r3, r3, #4
 800aa1e:	440b      	add	r3, r1
 800aa20:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800aa2a:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800aa2e:	4985      	ldr	r1, [pc, #532]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800aa30:	4613      	mov	r3, r2
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	4413      	add	r3, r2
 800aa36:	011b      	lsls	r3, r3, #4
 800aa38:	440b      	add	r3, r1
 800aa3a:	33ec      	adds	r3, #236	@ 0xec
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800aa42:	4b80      	ldr	r3, [pc, #512]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800aa44:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d10e      	bne.n	800aa6a <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800aa4c:	4b7e      	ldr	r3, [pc, #504]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800aa4e:	2203      	movs	r2, #3
 800aa50:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800aa54:	e009      	b.n	800aa6a <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aa56:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800aa60:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0ab      	beq.n	800a9c0 <ProcessRadioRxDone+0x534>
 800aa68:	e000      	b.n	800aa6c <ProcessRadioRxDone+0x5e0>
                    break;
 800aa6a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800aa6c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d117      	bne.n	800aaa4 <ProcessRadioRxDone+0x618>
 800aa74:	7cbb      	ldrb	r3, [r7, #18]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d10d      	bne.n	800aa96 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800aa7a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d106      	bne.n	800aa96 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800aa88:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800aa8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa90:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d006      	beq.n	800aaa4 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa96:	4b6c      	ldr	r3, [pc, #432]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800aa9e:	f7ff fccf 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800aaa2:	e1fb      	b.n	800ae9c <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800aaa4:	7cb9      	ldrb	r1, [r7, #18]
 800aaa6:	4c67      	ldr	r4, [pc, #412]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800aaa8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800aaac:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800aab0:	f107 0314 	add.w	r3, r7, #20
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	f107 0313 	add.w	r3, r7, #19
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800aac0:	f000 fee4 	bl	800b88c <GetFCntDown>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800aaca:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d017      	beq.n	800ab02 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800aad2:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800aad6:	2b07      	cmp	r3, #7
 800aad8:	d104      	bne.n	800aae4 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800aada:	4b5b      	ldr	r3, [pc, #364]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800aadc:	2208      	movs	r2, #8
 800aade:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800aae2:	e003      	b.n	800aaec <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aae4:	4b58      	ldr	r3, [pc, #352]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	4a56      	ldr	r2, [pc, #344]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800aaf0:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	4a54      	ldr	r2, [pc, #336]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800aaf8:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800aafc:	f7ff fca0 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800ab00:	e1cc      	b.n	800ae9c <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ab02:	7cfa      	ldrb	r2, [r7, #19]
 800ab04:	6979      	ldr	r1, [r7, #20]
 800ab06:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800ab0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	460b      	mov	r3, r1
 800ab12:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800ab16:	f005 fe53 	bl	80107c0 <LoRaMacCryptoUnsecureMessage>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ab20:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00f      	beq.n	800ab48 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ab28:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d104      	bne.n	800ab3a <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ab30:	4b45      	ldr	r3, [pc, #276]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab32:	220a      	movs	r2, #10
 800ab34:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800ab38:	e003      	b.n	800ab42 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ab3a:	4b43      	ldr	r3, [pc, #268]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab3c:	220b      	movs	r2, #11
 800ab3e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800ab42:	f7ff fc7d 	bl	800a440 <PrepareRxDoneAbort>
                return;
 800ab46:	e1a9      	b.n	800ae9c <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ab48:	4b3f      	ldr	r3, [pc, #252]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800ab50:	4a3d      	ldr	r2, [pc, #244]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab52:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800ab56:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800ab5a:	4b3b      	ldr	r3, [pc, #236]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800ab62:	4b39      	ldr	r3, [pc, #228]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	4a36      	ldr	r2, [pc, #216]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab6e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	4a34      	ldr	r2, [pc, #208]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab76:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ab7a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ab7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bf14      	ite	ne
 800ab88:	2301      	movne	r3, #1
 800ab8a:	2300      	moveq	r3, #0
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	4b2e      	ldr	r3, [pc, #184]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab90:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ab94:	4b2c      	ldr	r3, [pc, #176]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ab9c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800aba0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bf14      	ite	ne
 800abaa:	2301      	movne	r3, #1
 800abac:	2300      	moveq	r3, #0
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	4b25      	ldr	r3, [pc, #148]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800abb2:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800abb6:	4b24      	ldr	r3, [pc, #144]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800abb8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d004      	beq.n	800abca <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800abc0:	4b21      	ldr	r3, [pc, #132]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800abc2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d106      	bne.n	800abd8 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800abca:	4b1e      	ldr	r3, [pc, #120]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800abcc:	2200      	movs	r2, #0
 800abce:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800abd0:	4b1c      	ldr	r3, [pc, #112]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800abd8:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d104      	bne.n	800abea <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800abe0:	4b19      	ldr	r3, [pc, #100]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800abe8:	e03a      	b.n	800ac60 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800abea:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800abee:	f023 031f 	bic.w	r3, r3, #31
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2ba0      	cmp	r3, #160	@ 0xa0
 800abf6:	d12b      	bne.n	800ac50 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800abf8:	4b12      	ldr	r3, [pc, #72]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ac00:	4b10      	ldr	r3, [pc, #64]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800ac02:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d102      	bne.n	800ac10 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ac0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800ac0e:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ac10:	4b0d      	ldr	r3, [pc, #52]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ac18:	4b0b      	ldr	r3, [pc, #44]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ac1a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01e      	beq.n	800ac60 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ac22:	4b09      	ldr	r3, [pc, #36]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ac24:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d019      	beq.n	800ac60 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ac2c:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <ProcessRadioRxDone+0x7b8>)
 800ac2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac32:	4a05      	ldr	r2, [pc, #20]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ac34:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ac38:	4b04      	ldr	r3, [pc, #16]	@ (800ac4c <ProcessRadioRxDone+0x7c0>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a02      	ldr	r2, [pc, #8]	@ (800ac48 <ProcessRadioRxDone+0x7bc>)
 800ac3e:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800ac42:	e00d      	b.n	800ac60 <ProcessRadioRxDone+0x7d4>
 800ac44:	20008000 	.word	0x20008000
 800ac48:	200009c4 	.word	0x200009c4
 800ac4c:	20000f78 	.word	0x20000f78
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ac50:	4b94      	ldr	r3, [pc, #592]	@ (800aea4 <ProcessRadioRxDone+0xa18>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ac58:	4b93      	ldr	r3, [pc, #588]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800ac60:	4b90      	ldr	r3, [pc, #576]	@ (800aea4 <ProcessRadioRxDone+0xa18>)
 800ac62:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <ProcessRadioRxDone+0x7ec>
 800ac6a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ac6e:	f003 0310 	and.w	r3, r3, #16
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <ProcessRadioRxDone+0x7fe>
 800ac78:	4b8a      	ldr	r3, [pc, #552]	@ (800aea4 <ProcessRadioRxDone+0xa18>)
 800ac7a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800ac82:	4b89      	ldr	r3, [pc, #548]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ac8a:	4b87      	ldr	r3, [pc, #540]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ac8c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ac90:	4a85      	ldr	r2, [pc, #532]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ac92:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800ac96:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 ff98 	bl	800cbd0 <RemoveMacCommands>

            switch( fType )
 800aca0:	7cbb      	ldrb	r3, [r7, #18]
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d873      	bhi.n	800ad8e <ProcessRadioRxDone+0x902>
 800aca6:	a201      	add	r2, pc, #4	@ (adr r2, 800acac <ProcessRadioRxDone+0x820>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800acbd 	.word	0x0800acbd
 800acb0:	0800ad0d 	.word	0x0800ad0d
 800acb4:	0800ad43 	.word	0x0800ad43
 800acb8:	0800ad69 	.word	0x0800ad69
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800acbc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800acc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	461c      	mov	r4, r3
 800acc8:	4b77      	ldr	r3, [pc, #476]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800acca:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800acce:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800acd2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800acd6:	f102 0010 	add.w	r0, r2, #16
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	460b      	mov	r3, r1
 800acde:	4622      	mov	r2, r4
 800ace0:	2100      	movs	r1, #0
 800ace2:	f000 ff4f 	bl	800bb84 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ace6:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800acea:	4b6f      	ldr	r3, [pc, #444]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800acec:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800acf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acf2:	4a6d      	ldr	r2, [pc, #436]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800acf4:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800acf8:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800acfc:	4b6a      	ldr	r3, [pc, #424]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800acfe:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ad02:	4b69      	ldr	r3, [pc, #420]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800ad0a:	e047      	b.n	800ad9c <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ad0c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ad10:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	461c      	mov	r4, r3
 800ad18:	4b63      	ldr	r3, [pc, #396]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad1a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ad1e:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800ad22:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800ad26:	f102 0010 	add.w	r0, r2, #16
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4622      	mov	r2, r4
 800ad30:	2100      	movs	r1, #0
 800ad32:	f000 ff27 	bl	800bb84 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ad36:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800ad3a:	4b5b      	ldr	r3, [pc, #364]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad3c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800ad40:	e02c      	b.n	800ad9c <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ad42:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ad44:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800ad48:	4b57      	ldr	r3, [pc, #348]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad4a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ad4e:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	460b      	mov	r3, r1
 800ad56:	2100      	movs	r1, #0
 800ad58:	f000 ff14 	bl	800bb84 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ad5c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800ad60:	4b51      	ldr	r3, [pc, #324]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad62:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800ad66:	e019      	b.n	800ad9c <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ad68:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800ad6c:	4b4e      	ldr	r3, [pc, #312]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad6e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ad72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad74:	4a4c      	ldr	r2, [pc, #304]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad76:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ad7a:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800ad7e:	4b4a      	ldr	r3, [pc, #296]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad80:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ad84:	4b48      	ldr	r3, [pc, #288]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800ad8c:	e006      	b.n	800ad9c <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad8e:	4b46      	ldr	r3, [pc, #280]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800ad96:	f7ff fb53 	bl	800a440 <PrepareRxDoneAbort>
                    break;
 800ad9a:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ad9c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800ada0:	2be0      	cmp	r3, #224	@ 0xe0
 800ada2:	d118      	bne.n	800add6 <ProcessRadioRxDone+0x94a>
 800ada4:	4b3f      	ldr	r3, [pc, #252]	@ (800aea4 <ProcessRadioRxDone+0xa18>)
 800ada6:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800adaa:	f083 0301 	eor.w	r3, r3, #1
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d010      	beq.n	800add6 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800adb4:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800adb8:	4b3b      	ldr	r3, [pc, #236]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800adba:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800adbe:	4b3a      	ldr	r3, [pc, #232]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800adc6:	4b38      	ldr	r3, [pc, #224]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800adce:	4b36      	ldr	r3, [pc, #216]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800add0:	2200      	movs	r2, #0
 800add2:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800add6:	4a34      	ldr	r2, [pc, #208]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800add8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800addc:	f043 0302 	orr.w	r3, r3, #2
 800ade0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800ade4:	e035      	b.n	800ae52 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ade6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800adea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800adee:	18d1      	adds	r1, r2, r3
 800adf0:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	461a      	mov	r2, r3
 800ae00:	482a      	ldr	r0, [pc, #168]	@ (800aeac <ProcessRadioRxDone+0xa20>)
 800ae02:	f00b fb96 	bl	8016532 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ae06:	4b28      	ldr	r3, [pc, #160]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae08:	2203      	movs	r2, #3
 800ae0a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ae0e:	4b26      	ldr	r3, [pc, #152]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800ae16:	4b24      	ldr	r3, [pc, #144]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae18:	4a24      	ldr	r2, [pc, #144]	@ (800aeac <ProcessRadioRxDone+0xa20>)
 800ae1a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800ae1e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	4b1e      	ldr	r3, [pc, #120]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae2e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ae32:	4a1d      	ldr	r2, [pc, #116]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae34:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800ae40:	e007      	b.n	800ae52 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ae42:	4b19      	ldr	r3, [pc, #100]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800ae4a:	f7ff faf9 	bl	800a440 <PrepareRxDoneAbort>
            break;
 800ae4e:	e000      	b.n	800ae52 <ProcessRadioRxDone+0x9c6>
            break;
 800ae50:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ae52:	4b15      	ldr	r3, [pc, #84]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae54:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d004      	beq.n	800ae66 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ae5c:	4b12      	ldr	r3, [pc, #72]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae5e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d10c      	bne.n	800ae80 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800ae66:	4b10      	ldr	r3, [pc, #64]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae68:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800ae70:	4b0d      	ldr	r3, [pc, #52]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae72:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	f000 fcec 	bl	800b858 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800ae80:	4b09      	ldr	r3, [pc, #36]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae82:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d006      	beq.n	800ae98 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ae8a:	4a07      	ldr	r2, [pc, #28]	@ (800aea8 <ProcessRadioRxDone+0xa1c>)
 800ae8c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ae90:	f043 0310 	orr.w	r3, r3, #16
 800ae94:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800ae98:	f7ff fa00 	bl	800a29c <UpdateRxSlotIdleState>
}
 800ae9c:	37a4      	adds	r7, #164	@ 0xa4
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd90      	pop	{r4, r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20008000 	.word	0x20008000
 800aea8:	200009c4 	.word	0x200009c4
 800aeac:	20000bfc 	.word	0x20000bfc

0800aeb0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800aeb4:	4b11      	ldr	r3, [pc, #68]	@ (800aefc <ProcessRadioTxTimeout+0x4c>)
 800aeb6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d002      	beq.n	800aec4 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800aebe:	4b10      	ldr	r3, [pc, #64]	@ (800af00 <ProcessRadioTxTimeout+0x50>)
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800aec4:	f7ff f9ea 	bl	800a29c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800aec8:	4b0e      	ldr	r3, [pc, #56]	@ (800af04 <ProcessRadioTxTimeout+0x54>)
 800aeca:	2202      	movs	r2, #2
 800aecc:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800aed0:	2002      	movs	r0, #2
 800aed2:	f004 fdef 	bl	800fab4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800aed6:	4b0b      	ldr	r3, [pc, #44]	@ (800af04 <ProcessRadioTxTimeout+0x54>)
 800aed8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800aee0:	4b08      	ldr	r3, [pc, #32]	@ (800af04 <ProcessRadioTxTimeout+0x54>)
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800aee8:	4a06      	ldr	r2, [pc, #24]	@ (800af04 <ProcessRadioTxTimeout+0x54>)
 800aeea:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800aeee:	f043 0310 	orr.w	r3, r3, #16
 800aef2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800aef6:	bf00      	nop
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20008000 	.word	0x20008000
 800af00:	08020bac 	.word	0x08020bac
 800af04:	200009c4 	.word	0x200009c4

0800af08 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	460a      	mov	r2, r1
 800af12:	71fb      	strb	r3, [r7, #7]
 800af14:	4613      	mov	r3, r2
 800af16:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800af1c:	4b3d      	ldr	r3, [pc, #244]	@ (800b014 <HandleRadioRxErrorTimeout+0x10c>)
 800af1e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800af22:	2b02      	cmp	r3, #2
 800af24:	d002      	beq.n	800af2c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800af26:	4b3c      	ldr	r3, [pc, #240]	@ (800b018 <HandleRadioRxErrorTimeout+0x110>)
 800af28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800af2c:	f004 f8ec 	bl	800f108 <LoRaMacClassBIsBeaconExpected>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d007      	beq.n	800af46 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800af36:	2002      	movs	r0, #2
 800af38:	f004 f89a 	bl	800f070 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800af3c:	2000      	movs	r0, #0
 800af3e:	f004 f8bc 	bl	800f0ba <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800af42:	2301      	movs	r3, #1
 800af44:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800af46:	4b33      	ldr	r3, [pc, #204]	@ (800b014 <HandleRadioRxErrorTimeout+0x10c>)
 800af48:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d119      	bne.n	800af84 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800af50:	f004 f8e1 	bl	800f116 <LoRaMacClassBIsPingExpected>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d007      	beq.n	800af6a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800af5a:	2000      	movs	r0, #0
 800af5c:	f004 f892 	bl	800f084 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800af60:	2000      	movs	r0, #0
 800af62:	f004 f8b3 	bl	800f0cc <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800af66:	2301      	movs	r3, #1
 800af68:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800af6a:	f004 f8db 	bl	800f124 <LoRaMacClassBIsMulticastExpected>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d007      	beq.n	800af84 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800af74:	2000      	movs	r0, #0
 800af76:	f004 f88f 	bl	800f098 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800af7a:	2000      	movs	r0, #0
 800af7c:	f004 f8af 	bl	800f0de <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800af80:	2301      	movs	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	f083 0301 	eor.w	r3, r3, #1
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d03b      	beq.n	800b008 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800af90:	4b22      	ldr	r3, [pc, #136]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800af92:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800af96:	2b00      	cmp	r3, #0
 800af98:	d122      	bne.n	800afe0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800af9a:	4b20      	ldr	r3, [pc, #128]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800af9c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800afa4:	4a1d      	ldr	r2, [pc, #116]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	4618      	mov	r0, r3
 800afb0:	f004 fd80 	bl	800fab4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800afb4:	4b17      	ldr	r3, [pc, #92]	@ (800b014 <HandleRadioRxErrorTimeout+0x10c>)
 800afb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb8:	4618      	mov	r0, r3
 800afba:	f00e ffa5 	bl	8019f08 <UTIL_TIMER_GetElapsedTime>
 800afbe:	4602      	mov	r2, r0
 800afc0:	4b16      	ldr	r3, [pc, #88]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800afc2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d31e      	bcc.n	800b008 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800afca:	4815      	ldr	r0, [pc, #84]	@ (800b020 <HandleRadioRxErrorTimeout+0x118>)
 800afcc:	f00e fef0 	bl	8019db0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800afd0:	4a12      	ldr	r2, [pc, #72]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800afd2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800afd6:	f043 0310 	orr.w	r3, r3, #16
 800afda:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800afde:	e013      	b.n	800b008 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800afe0:	4b0e      	ldr	r3, [pc, #56]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800afe2:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800afea:	4a0c      	ldr	r2, [pc, #48]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800afec:	79bb      	ldrb	r3, [r7, #6]
 800afee:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800aff2:	79bb      	ldrb	r3, [r7, #6]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f004 fd5d 	bl	800fab4 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800affa:	4a08      	ldr	r2, [pc, #32]	@ (800b01c <HandleRadioRxErrorTimeout+0x114>)
 800affc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b000:	f043 0310 	orr.w	r3, r3, #16
 800b004:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800b008:	f7ff f948 	bl	800a29c <UpdateRxSlotIdleState>
}
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20008000 	.word	0x20008000
 800b018:	08020bac 	.word	0x08020bac
 800b01c:	200009c4 	.word	0x200009c4
 800b020:	20000d5c 	.word	0x20000d5c

0800b024 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800b028:	2106      	movs	r1, #6
 800b02a:	2005      	movs	r0, #5
 800b02c:	f7ff ff6c 	bl	800af08 <HandleRadioRxErrorTimeout>
}
 800b030:	bf00      	nop
 800b032:	bd80      	pop	{r7, pc}

0800b034 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800b038:	2104      	movs	r1, #4
 800b03a:	2003      	movs	r0, #3
 800b03c:	f7ff ff64 	bl	800af08 <HandleRadioRxErrorTimeout>
}
 800b040:	bf00      	nop
 800b042:	bd80      	pop	{r7, pc}

0800b044 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b04a:	f3ef 8310 	mrs	r3, PRIMASK
 800b04e:	607b      	str	r3, [r7, #4]
  return(result);
 800b050:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800b052:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b054:	b672      	cpsid	i
}
 800b056:	bf00      	nop
    events = LoRaMacRadioEvents;
 800b058:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <LoRaMacHandleIrqEvents+0x8c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800b05e:	4b1c      	ldr	r3, [pc, #112]	@ (800b0d0 <LoRaMacHandleIrqEvents+0x8c>)
 800b060:	2200      	movs	r2, #0
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f383 8810 	msr	PRIMASK, r3
}
 800b06e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d027      	beq.n	800b0c6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800b076:	783b      	ldrb	r3, [r7, #0]
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800b082:	f7ff f923 	bl	800a2cc <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800b086:	783b      	ldrb	r3, [r7, #0]
 800b088:	f003 0310 	and.w	r3, r3, #16
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800b092:	f7ff f9fb 	bl	800a48c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800b096:	783b      	ldrb	r3, [r7, #0]
 800b098:	f003 0308 	and.w	r3, r3, #8
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800b0a2:	f7ff ff05 	bl	800aeb0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800b0a6:	783b      	ldrb	r3, [r7, #0]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800b0b2:	f7ff ffb7 	bl	800b024 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800b0b6:	783b      	ldrb	r3, [r7, #0]
 800b0b8:	f003 0302 	and.w	r3, r3, #2
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800b0c2:	f7ff ffb7 	bl	800b034 <ProcessRadioRxTimeout>
        }
    }
}
 800b0c6:	bf00      	nop
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000f70 	.word	0x20000f70

0800b0d4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b0d8:	4b10      	ldr	r3, [pc, #64]	@ (800b11c <LoRaMacIsBusy+0x48>)
 800b0da:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d101      	bne.n	800b0e6 <LoRaMacIsBusy+0x12>
    {
        return false;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	e015      	b.n	800b112 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800b0e6:	4b0e      	ldr	r3, [pc, #56]	@ (800b120 <LoRaMacIsBusy+0x4c>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <LoRaMacIsBusy+0x24>
    {
        return true;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e00c      	b.n	800b112 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b0f8:	4b08      	ldr	r3, [pc, #32]	@ (800b11c <LoRaMacIsBusy+0x48>)
 800b0fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b102:	4b06      	ldr	r3, [pc, #24]	@ (800b11c <LoRaMacIsBusy+0x48>)
 800b104:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d101      	bne.n	800b110 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800b10c:	2300      	movs	r3, #0
 800b10e:	e000      	b.n	800b112 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800b110:	2301      	movs	r3, #1
}
 800b112:	4618      	mov	r0, r3
 800b114:	46bd      	mov	sp, r7
 800b116:	bc80      	pop	{r7}
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	200009c4 	.word	0x200009c4
 800b120:	20000f70 	.word	0x20000f70

0800b124 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b128:	4b05      	ldr	r3, [pc, #20]	@ (800b140 <LoRaMacIsStopped+0x1c>)
 800b12a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d101      	bne.n	800b136 <LoRaMacIsStopped+0x12>
    {
        return true;
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <LoRaMacIsStopped+0x14>
    }
    return false;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bc80      	pop	{r7}
 800b13e:	4770      	bx	lr
 800b140:	200009c4 	.word	0x200009c4

0800b144 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	4603      	mov	r3, r0
 800b14c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800b14e:	4a04      	ldr	r2, [pc, #16]	@ (800b160 <LoRaMacEnableRequests+0x1c>)
 800b150:	79fb      	ldrb	r3, [r7, #7]
 800b152:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr
 800b160:	200009c4 	.word	0x200009c4

0800b164 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800b16a:	4b2c      	ldr	r3, [pc, #176]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b16c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b170:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800b172:	4b2a      	ldr	r3, [pc, #168]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b174:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d14a      	bne.n	800b212 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b17c:	4b27      	ldr	r3, [pc, #156]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b17e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d006      	beq.n	800b19a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b18c:	4a23      	ldr	r2, [pc, #140]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b18e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b192:	f023 0301 	bic.w	r3, r3, #1
 800b196:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b19a:	4b20      	ldr	r3, [pc, #128]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b19c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d006      	beq.n	800b1b8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b1aa:	4a1c      	ldr	r2, [pc, #112]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b1ac:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b1b0:	f023 0304 	bic.w	r3, r3, #4
 800b1b4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	f7ff ffc3 	bl	800b144 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800b1be:	793b      	ldrb	r3, [r7, #4]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b1ca:	4b14      	ldr	r3, [pc, #80]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b1cc:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4813      	ldr	r0, [pc, #76]	@ (800b220 <LoRaMacHandleRequestEvents+0xbc>)
 800b1d4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800b1d6:	793b      	ldrb	r3, [r7, #4]
 800b1d8:	f003 0304 	and.w	r3, r3, #4
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00e      	beq.n	800b200 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b1e2:	4810      	ldr	r0, [pc, #64]	@ (800b224 <LoRaMacHandleRequestEvents+0xc0>)
 800b1e4:	f004 fcb4 	bl	800fb50 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b1e8:	f004 fd04 	bl	800fbf4 <LoRaMacConfirmQueueGetCnt>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d006      	beq.n	800b200 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b1f2:	4a0a      	ldr	r2, [pc, #40]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b1f4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b1f8:	f043 0304 	orr.w	r3, r3, #4
 800b1fc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800b200:	f003 ffae 	bl	800f160 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b204:	4a05      	ldr	r2, [pc, #20]	@ (800b21c <LoRaMacHandleRequestEvents+0xb8>)
 800b206:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b20a:	f023 0310 	bic.w	r3, r3, #16
 800b20e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	200009c4 	.word	0x200009c4
 800b220:	20000e04 	.word	0x20000e04
 800b224:	20000e18 	.word	0x20000e18

0800b228 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b22c:	4b16      	ldr	r3, [pc, #88]	@ (800b288 <LoRaMacHandleIndicationEvents+0x60>)
 800b22e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b232:	f003 0308 	and.w	r3, r3, #8
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00d      	beq.n	800b258 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b23c:	4a12      	ldr	r2, [pc, #72]	@ (800b288 <LoRaMacHandleIndicationEvents+0x60>)
 800b23e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b242:	f023 0308 	bic.w	r3, r3, #8
 800b246:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800b24a:	4b0f      	ldr	r3, [pc, #60]	@ (800b288 <LoRaMacHandleIndicationEvents+0x60>)
 800b24c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	490e      	ldr	r1, [pc, #56]	@ (800b28c <LoRaMacHandleIndicationEvents+0x64>)
 800b254:	480e      	ldr	r0, [pc, #56]	@ (800b290 <LoRaMacHandleIndicationEvents+0x68>)
 800b256:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b258:	4b0b      	ldr	r3, [pc, #44]	@ (800b288 <LoRaMacHandleIndicationEvents+0x60>)
 800b25a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00d      	beq.n	800b284 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b268:	4a07      	ldr	r2, [pc, #28]	@ (800b288 <LoRaMacHandleIndicationEvents+0x60>)
 800b26a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b26e:	f023 0302 	bic.w	r3, r3, #2
 800b272:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800b276:	4b04      	ldr	r3, [pc, #16]	@ (800b288 <LoRaMacHandleIndicationEvents+0x60>)
 800b278:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	4903      	ldr	r1, [pc, #12]	@ (800b28c <LoRaMacHandleIndicationEvents+0x64>)
 800b280:	4804      	ldr	r0, [pc, #16]	@ (800b294 <LoRaMacHandleIndicationEvents+0x6c>)
 800b282:	4798      	blx	r3
    }
}
 800b284:	bf00      	nop
 800b286:	bd80      	pop	{r7, pc}
 800b288:	200009c4 	.word	0x200009c4
 800b28c:	20000e50 	.word	0x20000e50
 800b290:	20000e2c 	.word	0x20000e2c
 800b294:	20000de4 	.word	0x20000de4

0800b298 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b29e:	4b2a      	ldr	r3, [pc, #168]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b2a0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d048      	beq.n	800b340 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b2b6:	4b24      	ldr	r3, [pc, #144]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b2b8:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800b2c0:	4b21      	ldr	r3, [pc, #132]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b2c2:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d104      	bne.n	800b2d4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b2ca:	f002 f94f 	bl	800d56c <CheckRetransUnconfirmedUplink>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	71fb      	strb	r3, [r7, #7]
 800b2d2:	e010      	b.n	800b2f6 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b2d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b2d6:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d10b      	bne.n	800b2f6 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800b2de:	4b1a      	ldr	r3, [pc, #104]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b2e0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d004      	beq.n	800b2f2 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b2e8:	f002 f96c 	bl	800d5c4 <CheckRetransConfirmedUplink>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	71fb      	strb	r3, [r7, #7]
 800b2f0:	e001      	b.n	800b2f6 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00d      	beq.n	800b318 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800b2fc:	4813      	ldr	r0, [pc, #76]	@ (800b34c <LoRaMacHandleMcpsRequest+0xb4>)
 800b2fe:	f00e fd57 	bl	8019db0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b302:	4b11      	ldr	r3, [pc, #68]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b304:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b308:	f023 0320 	bic.w	r3, r3, #32
 800b30c:	4a0e      	ldr	r2, [pc, #56]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b30e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800b312:	f002 f991 	bl	800d638 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800b316:	e013      	b.n	800b340 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800b318:	79bb      	ldrb	r3, [r7, #6]
 800b31a:	f083 0301 	eor.w	r3, r3, #1
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00d      	beq.n	800b340 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b324:	4a08      	ldr	r2, [pc, #32]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b326:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b32a:	f023 0310 	bic.w	r3, r3, #16
 800b32e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800b332:	4b05      	ldr	r3, [pc, #20]	@ (800b348 <LoRaMacHandleMcpsRequest+0xb0>)
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800b33a:	2000      	movs	r0, #0
 800b33c:	f000 f9c8 	bl	800b6d0 <OnTxDelayedTimerEvent>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	200009c4 	.word	0x200009c4
 800b34c:	20000d2c 	.word	0x20000d2c

0800b350 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b354:	4b18      	ldr	r3, [pc, #96]	@ (800b3b8 <LoRaMacHandleMlmeRequest+0x68>)
 800b356:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	d026      	beq.n	800b3b2 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800b364:	2001      	movs	r0, #1
 800b366:	f004 fbd9 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d012      	beq.n	800b396 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800b370:	2001      	movs	r0, #1
 800b372:	f004 fb75 	bl	800fa60 <LoRaMacConfirmQueueGetStatus>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d103      	bne.n	800b384 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800b37c:	4b0e      	ldr	r3, [pc, #56]	@ (800b3b8 <LoRaMacHandleMlmeRequest+0x68>)
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b384:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b8 <LoRaMacHandleMlmeRequest+0x68>)
 800b386:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b38a:	f023 0302 	bic.w	r3, r3, #2
 800b38e:	4a0a      	ldr	r2, [pc, #40]	@ (800b3b8 <LoRaMacHandleMlmeRequest+0x68>)
 800b390:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800b394:	e00d      	b.n	800b3b2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800b396:	2006      	movs	r0, #6
 800b398:	f004 fbc0 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d007      	beq.n	800b3b2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b3a2:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <LoRaMacHandleMlmeRequest+0x68>)
 800b3a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b3a8:	f023 0302 	bic.w	r3, r3, #2
 800b3ac:	4a02      	ldr	r2, [pc, #8]	@ (800b3b8 <LoRaMacHandleMlmeRequest+0x68>)
 800b3ae:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800b3b2:	bf00      	nop
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	200009c4 	.word	0x200009c4

0800b3bc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b3c0:	200b      	movs	r0, #11
 800b3c2:	f004 fbab 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d019      	beq.n	800b400 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b3cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b408 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b3ce:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d111      	bne.n	800b400 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b408 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b3de:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b3e2:	f003 0304 	and.w	r3, r3, #4
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d009      	beq.n	800b400 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	@ (800b408 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b3ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b3f2:	f023 0302 	bic.w	r3, r3, #2
 800b3f6:	4a04      	ldr	r2, [pc, #16]	@ (800b408 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b3f8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e000      	b.n	800b402 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	200009c4 	.word	0x200009c4

0800b40c <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	71fb      	strb	r3, [r7, #7]
 800b416:	460b      	mov	r3, r1
 800b418:	71bb      	strb	r3, [r7, #6]
 800b41a:	4613      	mov	r3, r2
 800b41c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00a      	beq.n	800b43a <CheckForMinimumAbpDatarate+0x2e>
 800b424:	79bb      	ldrb	r3, [r7, #6]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d107      	bne.n	800b43a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800b42a:	797b      	ldrb	r3, [r7, #5]
 800b42c:	f083 0301 	eor.w	r3, r3, #1
 800b430:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800b436:	2301      	movs	r3, #1
 800b438:	e000      	b.n	800b43c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	bc80      	pop	{r7}
 800b444:	4770      	bx	lr
	...

0800b448 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800b448:	b480      	push	{r7}
 800b44a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b44c:	4b0d      	ldr	r3, [pc, #52]	@ (800b484 <LoRaMacCheckForRxAbort+0x3c>)
 800b44e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00f      	beq.n	800b47a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b45a:	4b0a      	ldr	r3, [pc, #40]	@ (800b484 <LoRaMacCheckForRxAbort+0x3c>)
 800b45c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b464:	4a07      	ldr	r2, [pc, #28]	@ (800b484 <LoRaMacCheckForRxAbort+0x3c>)
 800b466:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b46a:	4b06      	ldr	r3, [pc, #24]	@ (800b484 <LoRaMacCheckForRxAbort+0x3c>)
 800b46c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b470:	f023 0302 	bic.w	r3, r3, #2
 800b474:	4a03      	ldr	r2, [pc, #12]	@ (800b484 <LoRaMacCheckForRxAbort+0x3c>)
 800b476:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800b47a:	bf00      	nop
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bc80      	pop	{r7}
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	200009c4 	.word	0x200009c4

0800b488 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b494:	2300      	movs	r3, #0
 800b496:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800b498:	4b51      	ldr	r3, [pc, #324]	@ (800b5e0 <LoRaMacHandleNvm+0x158>)
 800b49a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f040 8099 	bne.w	800b5d6 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2124      	movs	r1, #36	@ 0x24
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f00b f897 	bl	80165dc <Crc32>
 800b4ae:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d006      	beq.n	800b4c8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800b4c0:	89fb      	ldrh	r3, [r7, #14]
 800b4c2:	f043 0301 	orr.w	r3, r3, #1
 800b4c6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3328      	adds	r3, #40	@ 0x28
 800b4cc:	211c      	movs	r1, #28
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f00b f884 	bl	80165dc <Crc32>
 800b4d4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d006      	beq.n	800b4ee <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800b4e6:	89fb      	ldrh	r3, [r7, #14]
 800b4e8:	f043 0302 	orr.w	r3, r3, #2
 800b4ec:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3348      	adds	r3, #72	@ 0x48
 800b4f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f00b f870 	bl	80165dc <Crc32>
 800b4fc:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	429a      	cmp	r2, r3
 800b508:	d007      	beq.n	800b51a <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800b512:	89fb      	ldrh	r3, [r7, #14]
 800b514:	f043 0304 	orr.w	r3, r3, #4
 800b518:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800b520:	21d4      	movs	r1, #212	@ 0xd4
 800b522:	4618      	mov	r0, r3
 800b524:	f00b f85a 	bl	80165dc <Crc32>
 800b528:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	429a      	cmp	r2, r3
 800b534:	d007      	beq.n	800b546 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800b53e:	89fb      	ldrh	r3, [r7, #14]
 800b540:	f043 0308 	orr.w	r3, r3, #8
 800b544:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800b54c:	2110      	movs	r1, #16
 800b54e:	4618      	mov	r0, r3
 800b550:	f00b f844 	bl	80165dc <Crc32>
 800b554:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d007      	beq.n	800b572 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800b56a:	89fb      	ldrh	r3, [r7, #14]
 800b56c:	f043 0310 	orr.w	r3, r3, #16
 800b570:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800b578:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800b57c:	4618      	mov	r0, r3
 800b57e:	f00b f82d 	bl	80165dc <Crc32>
 800b582:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d007      	beq.n	800b5a0 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800b598:	89fb      	ldrh	r3, [r7, #14]
 800b59a:	f043 0320 	orr.w	r3, r3, #32
 800b59e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 800b5a6:	2114      	movs	r1, #20
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f00b f817 	bl	80165dc <Crc32>
 800b5ae:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d007      	beq.n	800b5cc <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	f8c3 25c8 	str.w	r2, [r3, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800b5c4:	89fb      	ldrh	r3, [r7, #14]
 800b5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5ca:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800b5cc:	89fb      	ldrh	r3, [r7, #14]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f002 f884 	bl	800d6dc <CallNvmDataChangeCallback>
 800b5d4:	e000      	b.n	800b5d8 <LoRaMacHandleNvm+0x150>
        return;
 800b5d6:	bf00      	nop
}
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	200009c4 	.word	0x200009c4

0800b5e4 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00d      	beq.n	800b610 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800b5f4:	6838      	ldr	r0, [r7, #0]
 800b5f6:	f00e fc87 	bl	8019f08 <UTIL_TIMER_GetElapsedTime>
 800b5fa:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d905      	bls.n	800b610 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800b604:	4b05      	ldr	r3, [pc, #20]	@ (800b61c <LoRaMacHandleResponseTimeout+0x38>)
 800b606:	2200      	movs	r2, #0
 800b608:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e000      	b.n	800b612 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20008000 	.word	0x20008000

0800b620 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800b626:	2300      	movs	r3, #0
 800b628:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800b62a:	f7ff fd0b 	bl	800b044 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b62e:	f003 fe06 	bl	800f23e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b632:	4b25      	ldr	r3, [pc, #148]	@ (800b6c8 <LoRaMacProcess+0xa8>)
 800b634:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b638:	f003 0310 	and.w	r3, r3, #16
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d023      	beq.n	800b68a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b642:	2000      	movs	r0, #0
 800b644:	f7ff fd7e 	bl	800b144 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b648:	f7ff fefe 	bl	800b448 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800b64c:	f002 f864 	bl	800d718 <IsRequestPending>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d006      	beq.n	800b664 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b656:	f7ff feb1 	bl	800b3bc <LoRaMacCheckForBeaconAcquisition>
 800b65a:	4603      	mov	r3, r0
 800b65c:	461a      	mov	r2, r3
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	4313      	orrs	r3, r2
 800b662:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d103      	bne.n	800b672 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800b66a:	f7ff fe71 	bl	800b350 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800b66e:	f7ff fe13 	bl	800b298 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800b672:	f7ff fd77 	bl	800b164 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b676:	2001      	movs	r0, #1
 800b678:	f7ff fd64 	bl	800b144 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b67c:	4a12      	ldr	r2, [pc, #72]	@ (800b6c8 <LoRaMacProcess+0xa8>)
 800b67e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b682:	f043 0320 	orr.w	r3, r3, #32
 800b686:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800b68a:	f7ff fdcd 	bl	800b228 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800b68e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c8 <LoRaMacProcess+0xa8>)
 800b690:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800b694:	2b02      	cmp	r3, #2
 800b696:	d101      	bne.n	800b69c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800b698:	f001 fc28 	bl	800ceec <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800b69c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c8 <LoRaMacProcess+0xa8>)
 800b69e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b6a2:	f003 0320 	and.w	r3, r3, #32
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800b6ac:	4a06      	ldr	r2, [pc, #24]	@ (800b6c8 <LoRaMacProcess+0xa8>)
 800b6ae:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b6b2:	f023 0320 	bic.w	r3, r3, #32
 800b6b6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800b6ba:	4804      	ldr	r0, [pc, #16]	@ (800b6cc <LoRaMacProcess+0xac>)
 800b6bc:	f7ff fee4 	bl	800b488 <LoRaMacHandleNvm>
    }
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	200009c4 	.word	0x200009c4
 800b6cc:	20008000 	.word	0x20008000

0800b6d0 <OnTxDelayedTimerEvent>:


static void OnTxDelayedTimerEvent( void* context )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800b6d8:	481e      	ldr	r0, [pc, #120]	@ (800b754 <OnTxDelayedTimerEvent+0x84>)
 800b6da:	f00e fb69 	bl	8019db0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b6de:	4b1e      	ldr	r3, [pc, #120]	@ (800b758 <OnTxDelayedTimerEvent+0x88>)
 800b6e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b6e4:	f023 0320 	bic.w	r3, r3, #32
 800b6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800b758 <OnTxDelayedTimerEvent+0x88>)
 800b6ea:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b6ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b75c <OnTxDelayedTimerEvent+0x8c>)
 800b6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f4:	4a18      	ldr	r2, [pc, #96]	@ (800b758 <OnTxDelayedTimerEvent+0x88>)
 800b6f6:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7ff ff71 	bl	800b5e4 <LoRaMacHandleResponseTimeout>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d11e      	bne.n	800b746 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800b708:	2001      	movs	r0, #1
 800b70a:	f001 f939 	bl	800c980 <ScheduleTx>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01a      	beq.n	800b74a <OnTxDelayedTimerEvent+0x7a>
 800b714:	2b0b      	cmp	r3, #11
 800b716:	d018      	beq.n	800b74a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b718:	4b10      	ldr	r3, [pc, #64]	@ (800b75c <OnTxDelayedTimerEvent+0x8c>)
 800b71a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	4b0d      	ldr	r3, [pc, #52]	@ (800b758 <OnTxDelayedTimerEvent+0x88>)
 800b722:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800b726:	4b0c      	ldr	r3, [pc, #48]	@ (800b758 <OnTxDelayedTimerEvent+0x88>)
 800b728:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800b72c:	4b0a      	ldr	r3, [pc, #40]	@ (800b758 <OnTxDelayedTimerEvent+0x88>)
 800b72e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800b732:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <OnTxDelayedTimerEvent+0x88>)
 800b734:	2209      	movs	r2, #9
 800b736:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800b73a:	2009      	movs	r0, #9
 800b73c:	f004 f9ba 	bl	800fab4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800b740:	f001 ff7a 	bl	800d638 <StopRetransmission>
            break;
 800b744:	e002      	b.n	800b74c <OnTxDelayedTimerEvent+0x7c>
        return;
 800b746:	bf00      	nop
 800b748:	e000      	b.n	800b74c <OnTxDelayedTimerEvent+0x7c>
            break;
 800b74a:	bf00      	nop
        }
    }
}
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20000d2c 	.word	0x20000d2c
 800b758:	200009c4 	.word	0x200009c4
 800b75c:	20008000 	.word	0x20008000

0800b760 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800b768:	4b17      	ldr	r3, [pc, #92]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b76a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800b76e:	4b16      	ldr	r3, [pc, #88]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b770:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800b774:	4b15      	ldr	r3, [pc, #84]	@ (800b7cc <OnRxWindow1TimerEvent+0x6c>)
 800b776:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800b77a:	b25a      	sxtb	r2, r3
 800b77c:	4b12      	ldr	r3, [pc, #72]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b77e:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b782:	4b12      	ldr	r3, [pc, #72]	@ (800b7cc <OnRxWindow1TimerEvent+0x6c>)
 800b784:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b788:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b78a:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b78e:	4b0f      	ldr	r3, [pc, #60]	@ (800b7cc <OnRxWindow1TimerEvent+0x6c>)
 800b790:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800b794:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b796:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b79a:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800b7a2:	4b09      	ldr	r3, [pc, #36]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b7aa:	4b08      	ldr	r3, [pc, #32]	@ (800b7cc <OnRxWindow1TimerEvent+0x6c>)
 800b7ac:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800b7b0:	4b05      	ldr	r3, [pc, #20]	@ (800b7c8 <OnRxWindow1TimerEvent+0x68>)
 800b7b2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800b7b6:	4906      	ldr	r1, [pc, #24]	@ (800b7d0 <OnRxWindow1TimerEvent+0x70>)
 800b7b8:	4806      	ldr	r0, [pc, #24]	@ (800b7d4 <OnRxWindow1TimerEvent+0x74>)
 800b7ba:	f001 fb63 	bl	800ce84 <RxWindowSetup>
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	200009c4 	.word	0x200009c4
 800b7cc:	20008000 	.word	0x20008000
 800b7d0:	20000d7c 	.word	0x20000d7c
 800b7d4:	20000d44 	.word	0x20000d44

0800b7d8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b7e0:	4b19      	ldr	r3, [pc, #100]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b7e2:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d029      	beq.n	800b83e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b7ea:	4b17      	ldr	r3, [pc, #92]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b7ec:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800b7f0:	4b15      	ldr	r3, [pc, #84]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b7f2:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b7f6:	4b15      	ldr	r3, [pc, #84]	@ (800b84c <OnRxWindow2TimerEvent+0x74>)
 800b7f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7fa:	4a13      	ldr	r2, [pc, #76]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b7fc:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b800:	4b12      	ldr	r3, [pc, #72]	@ (800b84c <OnRxWindow2TimerEvent+0x74>)
 800b802:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b806:	4b10      	ldr	r3, [pc, #64]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b808:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b80c:	4b0f      	ldr	r3, [pc, #60]	@ (800b84c <OnRxWindow2TimerEvent+0x74>)
 800b80e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800b812:	4b0d      	ldr	r3, [pc, #52]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b814:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b818:	4b0b      	ldr	r3, [pc, #44]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b820:	4b09      	ldr	r3, [pc, #36]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b822:	2201      	movs	r2, #1
 800b824:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b828:	4b08      	ldr	r3, [pc, #32]	@ (800b84c <OnRxWindow2TimerEvent+0x74>)
 800b82a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800b82e:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <OnRxWindow2TimerEvent+0x70>)
 800b830:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800b834:	4906      	ldr	r1, [pc, #24]	@ (800b850 <OnRxWindow2TimerEvent+0x78>)
 800b836:	4807      	ldr	r0, [pc, #28]	@ (800b854 <OnRxWindow2TimerEvent+0x7c>)
 800b838:	f001 fb24 	bl	800ce84 <RxWindowSetup>
 800b83c:	e000      	b.n	800b840 <OnRxWindow2TimerEvent+0x68>
        return;
 800b83e:	bf00      	nop
}
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	200009c4 	.word	0x200009c4
 800b84c:	20008000 	.word	0x20008000
 800b850:	20000d94 	.word	0x20000d94
 800b854:	20000d5c 	.word	0x20000d5c

0800b858 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800b860:	4808      	ldr	r0, [pc, #32]	@ (800b884 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800b862:	f00e faa5 	bl	8019db0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800b866:	4b08      	ldr	r3, [pc, #32]	@ (800b888 <OnRetransmitTimeoutTimerEvent+0x30>)
 800b868:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d003      	beq.n	800b878 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800b870:	4b05      	ldr	r3, [pc, #20]	@ (800b888 <OnRetransmitTimeoutTimerEvent+0x30>)
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800b878:	f001 ff1a 	bl	800d6b0 <OnMacProcessNotify>
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	20000dc4 	.word	0x20000dc4
 800b888:	200009c4 	.word	0x200009c4

0800b88c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	60ba      	str	r2, [r7, #8]
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	4603      	mov	r3, r0
 800b898:	73fb      	strb	r3, [r7, #15]
 800b89a:	460b      	mov	r3, r1
 800b89c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d005      	beq.n	800b8b0 <GetFCntDown+0x24>
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <GetFCntDown+0x24>
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b8b0:	2309      	movs	r3, #9
 800b8b2:	e028      	b.n	800b906 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d016      	beq.n	800b8e8 <GetFCntDown+0x5c>
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d118      	bne.n	800b8f0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800b8be:	79bb      	ldrb	r3, [r7, #6]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d10d      	bne.n	800b8e0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <GetFCntDown+0x44>
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d103      	bne.n	800b8d8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800b8d6:	e00d      	b.n	800b8f4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	701a      	strb	r2, [r3, #0]
            break;
 800b8de:	e009      	b.n	800b8f4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	2203      	movs	r2, #3
 800b8e4:	701a      	strb	r2, [r3, #0]
            break;
 800b8e6:	e005      	b.n	800b8f4 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	701a      	strb	r2, [r3, #0]
            break;
 800b8ee:	e001      	b.n	800b8f4 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800b8f0:	2305      	movs	r3, #5
 800b8f2:	e008      	b.n	800b906 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	7818      	ldrb	r0, [r3, #0]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	89db      	ldrh	r3, [r3, #14]
 800b8fc:	69fa      	ldr	r2, [r7, #28]
 800b8fe:	4619      	mov	r1, r3
 800b900:	f004 fd12 	bl	8010328 <LoRaMacCryptoGetFCntDown>
 800b904:	4603      	mov	r3, r0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
	...

0800b910 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800b910:	b5b0      	push	{r4, r5, r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b91a:	2303      	movs	r3, #3
 800b91c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800b91e:	4b6e      	ldr	r3, [pc, #440]	@ (800bad8 <SwitchClass+0x1c8>)
 800b920:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b924:	2b02      	cmp	r3, #2
 800b926:	f000 80bb 	beq.w	800baa0 <SwitchClass+0x190>
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	f300 80ce 	bgt.w	800bacc <SwitchClass+0x1bc>
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <SwitchClass+0x2c>
 800b934:	2b01      	cmp	r3, #1
 800b936:	f000 80a5 	beq.w	800ba84 <SwitchClass+0x174>
 800b93a:	e0c7      	b.n	800bacc <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800b93c:	79fb      	ldrb	r3, [r7, #7]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b942:	4b65      	ldr	r3, [pc, #404]	@ (800bad8 <SwitchClass+0x1c8>)
 800b944:	4a64      	ldr	r2, [pc, #400]	@ (800bad8 <SwitchClass+0x1c8>)
 800b946:	3374      	adds	r3, #116	@ 0x74
 800b948:	326c      	adds	r2, #108	@ 0x6c
 800b94a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b94e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800b956:	79fb      	ldrb	r3, [r7, #7]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d10c      	bne.n	800b976 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	4618      	mov	r0, r3
 800b960:	f003 fc04 	bl	800f16c <LoRaMacClassBSwitchClass>
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d103      	bne.n	800b976 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b96e:	4a5a      	ldr	r2, [pc, #360]	@ (800bad8 <SwitchClass+0x1c8>)
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	f040 80a2 	bne.w	800bac2 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b97e:	4a56      	ldr	r2, [pc, #344]	@ (800bad8 <SwitchClass+0x1c8>)
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b986:	4a55      	ldr	r2, [pc, #340]	@ (800badc <SwitchClass+0x1cc>)
 800b988:	4b54      	ldr	r3, [pc, #336]	@ (800badc <SwitchClass+0x1cc>)
 800b98a:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800b98e:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800b992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b996:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b99a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b99e:	4b4f      	ldr	r3, [pc, #316]	@ (800badc <SwitchClass+0x1cc>)
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	73bb      	strb	r3, [r7, #14]
 800b9aa:	e05b      	b.n	800ba64 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b9ac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800b9b0:	4949      	ldr	r1, [pc, #292]	@ (800bad8 <SwitchClass+0x1c8>)
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	4413      	add	r3, r2
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	440b      	add	r3, r1
 800b9bc:	33e9      	adds	r3, #233	@ 0xe9
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d049      	beq.n	800ba58 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800b9c4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800b9c8:	4943      	ldr	r1, [pc, #268]	@ (800bad8 <SwitchClass+0x1c8>)
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	4413      	add	r3, r2
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	440b      	add	r3, r1
 800b9d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b9d8:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d13c      	bne.n	800ba58 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800b9de:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800b9e2:	493d      	ldr	r1, [pc, #244]	@ (800bad8 <SwitchClass+0x1c8>)
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	4413      	add	r3, r2
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	440b      	add	r3, r1
 800b9ee:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a38      	ldr	r2, [pc, #224]	@ (800bad8 <SwitchClass+0x1c8>)
 800b9f6:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800b9f8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800b9fc:	4936      	ldr	r1, [pc, #216]	@ (800bad8 <SwitchClass+0x1c8>)
 800b9fe:	4613      	mov	r3, r2
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	4413      	add	r3, r2
 800ba04:	011b      	lsls	r3, r3, #4
 800ba06:	440b      	add	r3, r1
 800ba08:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ba0c:	f993 3000 	ldrsb.w	r3, [r3]
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	4b31      	ldr	r3, [pc, #196]	@ (800bad8 <SwitchClass+0x1c8>)
 800ba14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ba18:	4b30      	ldr	r3, [pc, #192]	@ (800badc <SwitchClass+0x1cc>)
 800ba1a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800ba1e:	4b2f      	ldr	r3, [pc, #188]	@ (800badc <SwitchClass+0x1cc>)
 800ba20:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ba24:	4b2c      	ldr	r3, [pc, #176]	@ (800bad8 <SwitchClass+0x1c8>)
 800ba26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba28:	4a2c      	ldr	r2, [pc, #176]	@ (800badc <SwitchClass+0x1cc>)
 800ba2a:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ba2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bad8 <SwitchClass+0x1c8>)
 800ba30:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ba34:	4b29      	ldr	r3, [pc, #164]	@ (800badc <SwitchClass+0x1cc>)
 800ba36:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ba3a:	4b27      	ldr	r3, [pc, #156]	@ (800bad8 <SwitchClass+0x1c8>)
 800ba3c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800ba40:	4b26      	ldr	r3, [pc, #152]	@ (800badc <SwitchClass+0x1cc>)
 800ba42:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ba46:	4b25      	ldr	r3, [pc, #148]	@ (800badc <SwitchClass+0x1cc>)
 800ba48:	2203      	movs	r2, #3
 800ba4a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ba4e:	4b23      	ldr	r3, [pc, #140]	@ (800badc <SwitchClass+0x1cc>)
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800ba56:	e009      	b.n	800ba6c <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ba58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	3301      	adds	r3, #1
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	73bb      	strb	r3, [r7, #14]
 800ba64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dd9f      	ble.n	800b9ac <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ba6c:	4b1b      	ldr	r3, [pc, #108]	@ (800badc <SwitchClass+0x1cc>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ba74:	4b1a      	ldr	r3, [pc, #104]	@ (800bae0 <SwitchClass+0x1d0>)
 800ba76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba78:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ba7a:	f001 fa37 	bl	800ceec <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ba82:	e01e      	b.n	800bac2 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f003 fb70 	bl	800f16c <LoRaMacClassBSwitchClass>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d117      	bne.n	800bac6 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ba96:	4a10      	ldr	r2, [pc, #64]	@ (800bad8 <SwitchClass+0x1c8>)
 800ba98:	79fb      	ldrb	r3, [r7, #7]
 800ba9a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800ba9e:	e012      	b.n	800bac6 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800baa0:	79fb      	ldrb	r3, [r7, #7]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d111      	bne.n	800baca <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800baa6:	4b0d      	ldr	r3, [pc, #52]	@ (800badc <SwitchClass+0x1cc>)
 800baa8:	2206      	movs	r2, #6
 800baaa:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800baae:	4a0a      	ldr	r2, [pc, #40]	@ (800bad8 <SwitchClass+0x1c8>)
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800bab6:	4b0a      	ldr	r3, [pc, #40]	@ (800bae0 <SwitchClass+0x1d0>)
 800bab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baba:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800bac0:	e003      	b.n	800baca <SwitchClass+0x1ba>
            break;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <SwitchClass+0x1bc>
            break;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <SwitchClass+0x1bc>
            break;
 800baca:	bf00      	nop
        }
    }

    return status;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bdb0      	pop	{r4, r5, r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20008000 	.word	0x20008000
 800badc:	200009c4 	.word	0x200009c4
 800bae0:	08020bac 	.word	0x08020bac

0800bae4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800baee:	4b10      	ldr	r3, [pc, #64]	@ (800bb30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800baf0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800baf4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bafa:	230d      	movs	r3, #13
 800bafc:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800bafe:	4b0c      	ldr	r3, [pc, #48]	@ (800bb30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800bb00:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bb08:	230e      	movs	r3, #14
 800bb0a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb0c:	4b08      	ldr	r3, [pc, #32]	@ (800bb30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800bb0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bb12:	f107 0210 	add.w	r2, r7, #16
 800bb16:	4611      	mov	r1, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f005 fa6c 	bl	8010ff6 <RegionGetPhyParam>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	b2db      	uxtb	r3, r3
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20008000 	.word	0x20008000

0800bb34 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	71fb      	strb	r3, [r7, #7]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	71bb      	strb	r3, [r7, #6]
 800bb42:	4613      	mov	r3, r2
 800bb44:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bb4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7ff ffc6 	bl	800bae4 <GetMaxAppPayloadWithoutFOptsLength>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	797b      	ldrb	r3, [r7, #5]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	4413      	add	r3, r2
 800bb66:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800bb68:	89ba      	ldrh	r2, [r7, #12]
 800bb6a:	89fb      	ldrh	r3, [r7, #14]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d804      	bhi.n	800bb7a <ValidatePayloadLength+0x46>
 800bb70:	89bb      	ldrh	r3, [r7, #12]
 800bb72:	2bff      	cmp	r3, #255	@ 0xff
 800bb74:	d801      	bhi.n	800bb7a <ValidatePayloadLength+0x46>
    {
        return true;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e000      	b.n	800bb7c <ValidatePayloadLength+0x48>
    }
    return false;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800bb84:	b590      	push	{r4, r7, lr}
 800bb86:	b0a5      	sub	sp, #148	@ 0x94
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	4608      	mov	r0, r1
 800bb8e:	4611      	mov	r1, r2
 800bb90:	461a      	mov	r2, r3
 800bb92:	4603      	mov	r3, r0
 800bb94:	70fb      	strb	r3, [r7, #3]
 800bb96:	460b      	mov	r3, r1
 800bb98:	70bb      	strb	r3, [r7, #2]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800bba4:	2300      	movs	r3, #0
 800bba6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800bbb0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 84b9 	beq.w	800c52c <ProcessMacCommands+0x9a8>
 800bbba:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	f040 84ba 	bne.w	800c538 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800bbc4:	f000 bcb2 	b.w	800c52c <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800bbc8:	78fb      	ldrb	r3, [r7, #3]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	4413      	add	r3, r2
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f003 fdcb 	bl	800f76c <LoRaMacCommandsGetCmdSize>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	461a      	mov	r2, r3
 800bbda:	78fb      	ldrb	r3, [r7, #3]
 800bbdc:	441a      	add	r2, r3
 800bbde:	78bb      	ldrb	r3, [r7, #2]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	f300 84ab 	bgt.w	800c53c <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	70fa      	strb	r2, [r7, #3]
 800bbec:	461a      	mov	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	3b02      	subs	r3, #2
 800bbf6:	2b11      	cmp	r3, #17
 800bbf8:	f200 84a2 	bhi.w	800c540 <ProcessMacCommands+0x9bc>
 800bbfc:	a201      	add	r2, pc, #4	@ (adr r2, 800bc04 <ProcessMacCommands+0x80>)
 800bbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc02:	bf00      	nop
 800bc04:	0800bc4d 	.word	0x0800bc4d
 800bc08:	0800bc8f 	.word	0x0800bc8f
 800bc0c:	0800be0b 	.word	0x0800be0b
 800bc10:	0800be49 	.word	0x0800be49
 800bc14:	0800bf41 	.word	0x0800bf41
 800bc18:	0800bf91 	.word	0x0800bf91
 800bc1c:	0800c04d 	.word	0x0800c04d
 800bc20:	0800c0a3 	.word	0x0800c0a3
 800bc24:	0800c189 	.word	0x0800c189
 800bc28:	0800c541 	.word	0x0800c541
 800bc2c:	0800c541 	.word	0x0800c541
 800bc30:	0800c231 	.word	0x0800c231
 800bc34:	0800c541 	.word	0x0800c541
 800bc38:	0800c541 	.word	0x0800c541
 800bc3c:	0800c351 	.word	0x0800c351
 800bc40:	0800c385 	.word	0x0800c385
 800bc44:	0800c415 	.word	0x0800c415
 800bc48:	0800c48d 	.word	0x0800c48d
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800bc4c:	2005      	movs	r0, #5
 800bc4e:	f003 ff65 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 845c 	beq.w	800c512 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800bc5a:	2105      	movs	r1, #5
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f003 fed1 	bl	800fa04 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	70fa      	strb	r2, [r7, #3]
 800bc68:	461a      	mov	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	781a      	ldrb	r2, [r3, #0]
 800bc70:	4bb0      	ldr	r3, [pc, #704]	@ (800bf34 <ProcessMacCommands+0x3b0>)
 800bc72:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	1c5a      	adds	r2, r3, #1
 800bc7a:	70fa      	strb	r2, [r7, #3]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4413      	add	r3, r2
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	4bab      	ldr	r3, [pc, #684]	@ (800bf34 <ProcessMacCommands+0x3b0>)
 800bc86:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 800bc8a:	f000 bc42 	b.w	800c512 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800bca6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800bcaa:	f083 0301 	eor.w	r3, r3, #1
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 80a6 	beq.w	800be02 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800bcbc:	78fb      	ldrb	r3, [r7, #3]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800bcc6:	4b9c      	ldr	r3, [pc, #624]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bcc8:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800bccc:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bcd0:	4b99      	ldr	r3, [pc, #612]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bcd2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800bcd6:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800bcda:	4b97      	ldr	r3, [pc, #604]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bcdc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800bce0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bce4:	4b94      	ldr	r3, [pc, #592]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bce6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800bcea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800bcee:	4b92      	ldr	r3, [pc, #584]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bcf0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800bcf4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800bcf8:	4b8f      	ldr	r3, [pc, #572]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bcfa:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800bcfe:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800bd00:	4b8d      	ldr	r3, [pc, #564]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bd02:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d008      	beq.n	800bd1c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800bd0a:	78ba      	ldrb	r2, [r7, #2]
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	3301      	adds	r3, #1
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800bd1a:	e002      	b.n	800bd22 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800bd1c:	2305      	movs	r3, #5
 800bd1e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800bd22:	4b85      	ldr	r3, [pc, #532]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bd24:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bd28:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800bd2c:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800bd30:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bd34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	4623      	mov	r3, r4
 800bd42:	f005 fa5b 	bl	80111fc <RegionLinkAdrReq>
 800bd46:	4603      	mov	r3, r0
 800bd48:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800bd4c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800bd50:	f003 0307 	and.w	r3, r3, #7
 800bd54:	2b07      	cmp	r3, #7
 800bd56:	d119      	bne.n	800bd8c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800bd58:	4b77      	ldr	r3, [pc, #476]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bd5a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800bd5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd62:	429a      	cmp	r2, r3
 800bd64:	da03      	bge.n	800bd6e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800bd66:	4b74      	ldr	r3, [pc, #464]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800bd6e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800bd72:	4b71      	ldr	r3, [pc, #452]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bd74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800bd78:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800bd7c:	4b6e      	ldr	r3, [pc, #440]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bd7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800bd82:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800bd86:	4b6c      	ldr	r3, [pc, #432]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bd88:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800bd92:	e00b      	b.n	800bdac <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800bd94:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800bd98:	2201      	movs	r2, #1
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	2003      	movs	r0, #3
 800bd9e:	f003 fb85 	bl	800f4ac <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bda2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800bda6:	3301      	adds	r3, #1
 800bda8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800bdac:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800bdb0:	4a62      	ldr	r2, [pc, #392]	@ (800bf3c <ProcessMacCommands+0x3b8>)
 800bdb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb6:	089b      	lsrs	r3, r3, #2
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d3e8      	bcc.n	800bd94 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800bdc2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800bdc6:	78fb      	ldrb	r3, [r7, #3]
 800bdc8:	4413      	add	r3, r2
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800bdd0:	78fa      	ldrb	r2, [r7, #3]
 800bdd2:	78bb      	ldrb	r3, [r7, #2]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d20a      	bcs.n	800bdee <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800bdd8:	78fb      	ldrb	r3, [r7, #3]
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	70fa      	strb	r2, [r7, #3]
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4413      	add	r3, r2
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	f43f af68 	beq.w	800bcbc <ProcessMacCommands+0x138>
 800bdec:	e000      	b.n	800bdf0 <ProcessMacCommands+0x26c>
                            break;
 800bdee:	bf00      	nop

                    if( macIndex < commandsSize )
 800bdf0:	78fa      	ldrb	r2, [r7, #3]
 800bdf2:	78bb      	ldrb	r3, [r7, #2]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	f080 838e 	bcs.w	800c516 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800be00:	e389      	b.n	800c516 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800be02:	78fb      	ldrb	r3, [r7, #3]
 800be04:	3304      	adds	r3, #4
 800be06:	70fb      	strb	r3, [r7, #3]
                break;
 800be08:	e385      	b.n	800c516 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800be0a:	78fb      	ldrb	r3, [r7, #3]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	70fa      	strb	r2, [r7, #3]
 800be10:	461a      	mov	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4413      	add	r3, r2
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	f003 030f 	and.w	r3, r3, #15
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	4b46      	ldr	r3, [pc, #280]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800be20:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800be24:	4b44      	ldr	r3, [pc, #272]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800be26:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800be2a:	461a      	mov	r2, r3
 800be2c:	2301      	movs	r3, #1
 800be2e:	4093      	lsls	r3, r2
 800be30:	b29a      	uxth	r2, r3
 800be32:	4b41      	ldr	r3, [pc, #260]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800be34:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800be38:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800be3c:	2200      	movs	r2, #0
 800be3e:	4619      	mov	r1, r3
 800be40:	2004      	movs	r0, #4
 800be42:	f003 fb33 	bl	800f4ac <LoRaMacCommandsAddCmd>
                break;
 800be46:	e371      	b.n	800c52c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800be48:	2307      	movs	r3, #7
 800be4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	4413      	add	r3, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	091b      	lsrs	r3, r3, #4
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	b25b      	sxtb	r3, r3
 800be5c:	f003 0307 	and.w	r3, r3, #7
 800be60:	b25b      	sxtb	r3, r3
 800be62:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800be66:	78fb      	ldrb	r3, [r7, #3]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	4413      	add	r3, r2
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	b25b      	sxtb	r3, r3
 800be70:	f003 030f 	and.w	r3, r3, #15
 800be74:	b25b      	sxtb	r3, r3
 800be76:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	3301      	adds	r3, #1
 800be7e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800be80:	78fb      	ldrb	r3, [r7, #3]
 800be82:	1c5a      	adds	r2, r3, #1
 800be84:	70fa      	strb	r2, [r7, #3]
 800be86:	461a      	mov	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4413      	add	r3, r2
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	70fa      	strb	r2, [r7, #3]
 800be96:	461a      	mov	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4413      	add	r3, r2
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	021a      	lsls	r2, r3, #8
 800bea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea2:	4313      	orrs	r3, r2
 800bea4:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bea6:	78fb      	ldrb	r3, [r7, #3]
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	70fa      	strb	r2, [r7, #3]
 800beac:	461a      	mov	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4413      	add	r3, r2
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	041a      	lsls	r2, r3, #16
 800beb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beb8:	4313      	orrs	r3, r2
 800beba:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800bebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bebe:	2264      	movs	r2, #100	@ 0x64
 800bec0:	fb02 f303 	mul.w	r3, r2, r3
 800bec4:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800bec6:	4b1c      	ldr	r3, [pc, #112]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bec8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800becc:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800bed0:	4611      	mov	r1, r2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f005 f9b9 	bl	801124a <RegionRxParamSetupReq>
 800bed8:	4603      	mov	r3, r0
 800beda:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800bede:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	2b07      	cmp	r3, #7
 800bee8:	d117      	bne.n	800bf1a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800beea:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	4b11      	ldr	r3, [pc, #68]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bef2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800bef6:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800befa:	b2da      	uxtb	r2, r3
 800befc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800befe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800bf02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf04:	4a0c      	ldr	r2, [pc, #48]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bf06:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800bf08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf0a:	4a0b      	ldr	r2, [pc, #44]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bf0c:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800bf0e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800bf12:	b2da      	uxtb	r2, r3
 800bf14:	4b08      	ldr	r3, [pc, #32]	@ (800bf38 <ProcessMacCommands+0x3b4>)
 800bf16:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800bf1a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800bf1e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800bf22:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800bf26:	2201      	movs	r2, #1
 800bf28:	4619      	mov	r1, r3
 800bf2a:	2005      	movs	r0, #5
 800bf2c:	f003 fabe 	bl	800f4ac <LoRaMacCommandsAddCmd>
                break;
 800bf30:	e2fc      	b.n	800c52c <ProcessMacCommands+0x9a8>
 800bf32:	bf00      	nop
 800bf34:	200009c4 	.word	0x200009c4
 800bf38:	20008000 	.word	0x20008000
 800bf3c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800bf40:	23ff      	movs	r3, #255	@ 0xff
 800bf42:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800bf46:	4bb7      	ldr	r3, [pc, #732]	@ (800c224 <ProcessMacCommands+0x6a0>)
 800bf48:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00d      	beq.n	800bf6c <ProcessMacCommands+0x3e8>
 800bf50:	4bb4      	ldr	r3, [pc, #720]	@ (800c224 <ProcessMacCommands+0x6a0>)
 800bf52:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800bf5c:	4bb1      	ldr	r3, [pc, #708]	@ (800c224 <ProcessMacCommands+0x6a0>)
 800bf5e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4798      	blx	r3
 800bf66:	4603      	mov	r3, r0
 800bf68:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800bf6c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800bf70:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800bf74:	787b      	ldrb	r3, [r7, #1]
 800bf76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800bf80:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800bf84:	2202      	movs	r2, #2
 800bf86:	4619      	mov	r1, r3
 800bf88:	2006      	movs	r0, #6
 800bf8a:	f003 fa8f 	bl	800f4ac <LoRaMacCommandsAddCmd>
                break;
 800bf8e:	e2cd      	b.n	800c52c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800bf90:	2303      	movs	r3, #3
 800bf92:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800bf96:	78fb      	ldrb	r3, [r7, #3]
 800bf98:	1c5a      	adds	r2, r3, #1
 800bf9a:	70fa      	strb	r2, [r7, #3]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	b25b      	sxtb	r3, r3
 800bfa6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800bfaa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800bfae:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	70fa      	strb	r2, [r7, #3]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4413      	add	r3, r2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bfc0:	78fb      	ldrb	r3, [r7, #3]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	70fa      	strb	r2, [r7, #3]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4413      	add	r3, r2
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	021a      	lsls	r2, r3, #8
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bfd6:	78fb      	ldrb	r3, [r7, #3]
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	70fa      	strb	r2, [r7, #3]
 800bfdc:	461a      	mov	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	041a      	lsls	r2, r3, #16
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800bfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfee:	2264      	movs	r2, #100	@ 0x64
 800bff0:	fb02 f303 	mul.w	r3, r2, r3
 800bff4:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800bffa:	78fb      	ldrb	r3, [r7, #3]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	70fa      	strb	r2, [r7, #3]
 800c000:	461a      	mov	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4413      	add	r3, r2
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	b25b      	sxtb	r3, r3
 800c00a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800c00e:	4b86      	ldr	r3, [pc, #536]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c010:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c014:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c018:	4611      	mov	r1, r2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f005 f930 	bl	8011280 <RegionNewChannelReq>
 800c020:	4603      	mov	r3, r0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800c028:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c02c:	b25b      	sxtb	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f2c0 8273 	blt.w	800c51a <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800c034:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c038:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c03c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c040:	2201      	movs	r2, #1
 800c042:	4619      	mov	r1, r3
 800c044:	2007      	movs	r0, #7
 800c046:	f003 fa31 	bl	800f4ac <LoRaMacCommandsAddCmd>
                }
                break;
 800c04a:	e266      	b.n	800c51a <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c04c:	78fb      	ldrb	r3, [r7, #3]
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	70fa      	strb	r2, [r7, #3]
 800c052:	461a      	mov	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4413      	add	r3, r2
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	f003 030f 	and.w	r3, r3, #15
 800c05e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800c062:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c066:	2b00      	cmp	r3, #0
 800c068:	d104      	bne.n	800c074 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800c06a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c06e:	3301      	adds	r3, #1
 800c070:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800c074:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c078:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c07c:	fb02 f303 	mul.w	r3, r2, r3
 800c080:	461a      	mov	r2, r3
 800c082:	4b69      	ldr	r3, [pc, #420]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c084:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c086:	4b68      	ldr	r3, [pc, #416]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c08a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c08e:	4a66      	ldr	r2, [pc, #408]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c090:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c092:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c096:	2200      	movs	r2, #0
 800c098:	4619      	mov	r1, r3
 800c09a:	2008      	movs	r0, #8
 800c09c:	f003 fa06 	bl	800f4ac <LoRaMacCommandsAddCmd>
                break;
 800c0a0:	e244      	b.n	800c52c <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800c0a2:	78fb      	ldrb	r3, [r7, #3]
 800c0a4:	1c5a      	adds	r2, r3, #1
 800c0a6:	70fa      	strb	r2, [r7, #3]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c0c0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c0c4:	f003 0320 	and.w	r3, r3, #32
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c0d2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c0d6:	f003 0310 	and.w	r3, r3, #16
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c0e4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c0e8:	f003 030f 	and.w	r3, r3, #15
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800c0f2:	4b4d      	ldr	r3, [pc, #308]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c0f4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c0f8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f005 f8d9 	bl	80112b6 <RegionTxParamSetupReq>
 800c104:	4603      	mov	r3, r0
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	f000 8208 	beq.w	800c51e <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c10e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800c112:	4b45      	ldr	r3, [pc, #276]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c114:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c118:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800c11c:	4b42      	ldr	r3, [pc, #264]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c11e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c122:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c126:	461a      	mov	r2, r3
 800c128:	4b40      	ldr	r3, [pc, #256]	@ (800c22c <ProcessMacCommands+0x6a8>)
 800c12a:	5c9b      	ldrb	r3, [r3, r2]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f4 fba1 	bl	8000874 <__aeabi_ui2f>
 800c132:	4603      	mov	r3, r0
 800c134:	4a3c      	ldr	r2, [pc, #240]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c136:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c13a:	2302      	movs	r3, #2
 800c13c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c140:	4b39      	ldr	r3, [pc, #228]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c142:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c146:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c14a:	4b37      	ldr	r3, [pc, #220]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c14c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c150:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c154:	4611      	mov	r1, r2
 800c156:	4618      	mov	r0, r3
 800c158:	f004 ff4d 	bl	8010ff6 <RegionGetPhyParam>
 800c15c:	4603      	mov	r3, r0
 800c15e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c162:	b25a      	sxtb	r2, r3
 800c164:	4b30      	ldr	r3, [pc, #192]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c166:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800c16a:	4293      	cmp	r3, r2
 800c16c:	bfb8      	it	lt
 800c16e:	4613      	movlt	r3, r2
 800c170:	b25a      	sxtb	r2, r3
 800c172:	4b2d      	ldr	r3, [pc, #180]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c174:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c178:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c17c:	2200      	movs	r2, #0
 800c17e:	4619      	mov	r1, r3
 800c180:	2009      	movs	r0, #9
 800c182:	f003 f993 	bl	800f4ac <LoRaMacCommandsAddCmd>
                }
                break;
 800c186:	e1ca      	b.n	800c51e <ProcessMacCommands+0x99a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800c188:	2303      	movs	r3, #3
 800c18a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800c18e:	78fb      	ldrb	r3, [r7, #3]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	70fa      	strb	r2, [r7, #3]
 800c194:	461a      	mov	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4413      	add	r3, r2
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	1c5a      	adds	r2, r3, #1
 800c1a4:	70fa      	strb	r2, [r7, #3]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	1c5a      	adds	r2, r3, #1
 800c1b4:	70fa      	strb	r2, [r7, #3]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	021a      	lsls	r2, r3, #8
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	70fa      	strb	r2, [r7, #3]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	041a      	lsls	r2, r3, #16
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1de:	2264      	movs	r2, #100	@ 0x64
 800c1e0:	fb02 f303 	mul.w	r3, r2, r3
 800c1e4:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800c1e6:	4b10      	ldr	r3, [pc, #64]	@ (800c228 <ProcessMacCommands+0x6a4>)
 800c1e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c1ec:	f107 0220 	add.w	r2, r7, #32
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f005 f87a 	bl	80112ec <RegionDlChannelReq>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800c200:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c204:	b25b      	sxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	f2c0 818b 	blt.w	800c522 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800c20c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c210:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c214:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c218:	2201      	movs	r2, #1
 800c21a:	4619      	mov	r1, r3
 800c21c:	200a      	movs	r0, #10
 800c21e:	f003 f945 	bl	800f4ac <LoRaMacCommandsAddCmd>
                }
                break;
 800c222:	e17e      	b.n	800c522 <ProcessMacCommands+0x99e>
 800c224:	200009c4 	.word	0x200009c4
 800c228:	20008000 	.word	0x20008000
 800c22c:	0802075c 	.word	0x0802075c
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c230:	2009      	movs	r0, #9
 800c232:	f003 fc73 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f000 8084 	beq.w	800c346 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c23e:	2109      	movs	r1, #9
 800c240:	2000      	movs	r0, #0
 800c242:	f003 fbdf 	bl	800fa04 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800c246:	f107 0318 	add.w	r3, r7, #24
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800c250:	f107 0310 	add.w	r3, r7, #16
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800c25a:	f107 0308 	add.w	r3, r7, #8
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c264:	78fb      	ldrb	r3, [r7, #3]
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	70fa      	strb	r2, [r7, #3]
 800c26a:	461a      	mov	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4413      	add	r3, r2
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c274:	78fb      	ldrb	r3, [r7, #3]
 800c276:	1c5a      	adds	r2, r3, #1
 800c278:	70fa      	strb	r2, [r7, #3]
 800c27a:	461a      	mov	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4413      	add	r3, r2
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	021a      	lsls	r2, r3, #8
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	4313      	orrs	r3, r2
 800c288:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c28a:	78fb      	ldrb	r3, [r7, #3]
 800c28c:	1c5a      	adds	r2, r3, #1
 800c28e:	70fa      	strb	r2, [r7, #3]
 800c290:	461a      	mov	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4413      	add	r3, r2
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	041a      	lsls	r2, r3, #16
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	70fa      	strb	r2, [r7, #3]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	061a      	lsls	r2, r3, #24
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800c2b6:	78fb      	ldrb	r3, [r7, #3]
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	70fa      	strb	r2, [r7, #3]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	b21b      	sxth	r3, r3
 800c2c6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c2c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2d2:	fb02 f303 	mul.w	r3, r2, r3
 800c2d6:	121b      	asrs	r3, r3, #8
 800c2d8:	b21b      	sxth	r3, r3
 800c2da:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800c2dc:	f107 0310 	add.w	r3, r7, #16
 800c2e0:	f107 0218 	add.w	r2, r7, #24
 800c2e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2e8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4b96      	ldr	r3, [pc, #600]	@ (800c548 <ProcessMacCommands+0x9c4>)
 800c2f0:	4413      	add	r3, r2
 800c2f2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800c2f4:	f107 0308 	add.w	r3, r7, #8
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f00d fbe7 	bl	8019acc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c2fe:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800c302:	4b92      	ldr	r3, [pc, #584]	@ (800c54c <ProcessMacCommands+0x9c8>)
 800c304:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800c308:	9200      	str	r2, [sp, #0]
 800c30a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800c30e:	f107 0210 	add.w	r2, r7, #16
 800c312:	ca06      	ldmia	r2, {r1, r2}
 800c314:	f00d fb73 	bl	80199fe <SysTimeSub>
 800c318:	f107 0010 	add.w	r0, r7, #16
 800c31c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c322:	f107 0208 	add.w	r2, r7, #8
 800c326:	ca06      	ldmia	r2, {r1, r2}
 800c328:	f00d fb30 	bl	801998c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800c32c:	f107 0310 	add.w	r3, r7, #16
 800c330:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c334:	f00d fb9c 	bl	8019a70 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800c338:	f002 ff56 	bl	800f1e8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800c33c:	4b83      	ldr	r3, [pc, #524]	@ (800c54c <ProcessMacCommands+0x9c8>)
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800c344:	e0f2      	b.n	800c52c <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c346:	4b81      	ldr	r3, [pc, #516]	@ (800c54c <ProcessMacCommands+0x9c8>)
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 800c34e:	e0ed      	b.n	800c52c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800c350:	200c      	movs	r0, #12
 800c352:	f003 fbe3 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 80e4 	beq.w	800c526 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800c35e:	210c      	movs	r1, #12
 800c360:	2000      	movs	r0, #0
 800c362:	f003 fb4f 	bl	800fa04 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800c366:	4b79      	ldr	r3, [pc, #484]	@ (800c54c <ProcessMacCommands+0x9c8>)
 800c368:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	f000 80da 	beq.w	800c526 <ProcessMacCommands+0x9a2>
 800c372:	4b76      	ldr	r3, [pc, #472]	@ (800c54c <ProcessMacCommands+0x9c8>)
 800c374:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c378:	2b05      	cmp	r3, #5
 800c37a:	f000 80d4 	beq.w	800c526 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800c37e:	f002 ff14 	bl	800f1aa <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800c382:	e0d0      	b.n	800c526 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800c384:	2303      	movs	r3, #3
 800c386:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	70fa      	strb	r2, [r7, #3]
 800c394:	461a      	mov	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4413      	add	r3, r2
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	70fa      	strb	r2, [r7, #3]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	70fa      	strb	r2, [r7, #3]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4413      	add	r3, r2
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	041b      	lsls	r3, r3, #16
 800c3c4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800c3ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c3cc:	2264      	movs	r2, #100	@ 0x64
 800c3ce:	fb02 f303 	mul.w	r3, r2, r3
 800c3d2:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800c3d4:	78fb      	ldrb	r3, [r7, #3]
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	70fa      	strb	r2, [r7, #3]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4413      	add	r3, r2
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 030f 	and.w	r3, r3, #15
 800c3e6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800c3ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3ee:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f002 fee0 	bl	800f1b6 <LoRaMacClassBPingSlotChannelReq>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800c3fc:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800c400:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800c404:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c408:	2201      	movs	r2, #1
 800c40a:	4619      	mov	r1, r3
 800c40c:	2011      	movs	r0, #17
 800c40e:	f003 f84d 	bl	800f4ac <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 800c412:	e08b      	b.n	800c52c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c414:	200d      	movs	r0, #13
 800c416:	f003 fb81 	bl	800fb1c <LoRaMacConfirmQueueIsCmdActive>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 8084 	beq.w	800c52a <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c422:	210d      	movs	r1, #13
 800c424:	2000      	movs	r0, #0
 800c426:	f003 faed 	bl	800fa04 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800c436:	78fb      	ldrb	r3, [r7, #3]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	70fa      	strb	r2, [r7, #3]
 800c43c:	461a      	mov	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4413      	add	r3, r2
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	70fa      	strb	r2, [r7, #3]
 800c44e:	461a      	mov	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4413      	add	r3, r2
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	021b      	lsls	r3, r3, #8
 800c458:	b21a      	sxth	r2, r3
 800c45a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800c45e:	4313      	orrs	r3, r2
 800c460:	b21b      	sxth	r3, r3
 800c462:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800c466:	78fb      	ldrb	r3, [r7, #3]
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	70fa      	strb	r2, [r7, #3]
 800c46c:	461a      	mov	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4413      	add	r3, r2
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800c478:	4b35      	ldr	r3, [pc, #212]	@ (800c550 <ProcessMacCommands+0x9cc>)
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800c480:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800c484:	4618      	mov	r0, r3
 800c486:	f002 fea2 	bl	800f1ce <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800c48a:	e04e      	b.n	800c52a <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800c492:	78fb      	ldrb	r3, [r7, #3]
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	70fa      	strb	r2, [r7, #3]
 800c498:	461a      	mov	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4413      	add	r3, r2
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	70fa      	strb	r2, [r7, #3]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	021b      	lsls	r3, r3, #8
 800c4b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	70fa      	strb	r2, [r7, #3]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	041b      	lsls	r3, r3, #16
 800c4ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800c4d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c4dc:	2264      	movs	r2, #100	@ 0x64
 800c4de:	fb02 f303 	mul.w	r3, r2, r3
 800c4e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800c4e6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800c4ea:	f002 fe83 	bl	800f1f4 <LoRaMacClassBBeaconFreqReq>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d003      	beq.n	800c4fc <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800c4fa:	e002      	b.n	800c502 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800c502:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c506:	2201      	movs	r2, #1
 800c508:	4619      	mov	r1, r3
 800c50a:	2013      	movs	r0, #19
 800c50c:	f002 ffce 	bl	800f4ac <LoRaMacCommandsAddCmd>
                }
                break;
 800c510:	e00c      	b.n	800c52c <ProcessMacCommands+0x9a8>
                break;
 800c512:	bf00      	nop
 800c514:	e00a      	b.n	800c52c <ProcessMacCommands+0x9a8>
                break;
 800c516:	bf00      	nop
 800c518:	e008      	b.n	800c52c <ProcessMacCommands+0x9a8>
                break;
 800c51a:	bf00      	nop
 800c51c:	e006      	b.n	800c52c <ProcessMacCommands+0x9a8>
                break;
 800c51e:	bf00      	nop
 800c520:	e004      	b.n	800c52c <ProcessMacCommands+0x9a8>
                break;
 800c522:	bf00      	nop
 800c524:	e002      	b.n	800c52c <ProcessMacCommands+0x9a8>
                break;
 800c526:	bf00      	nop
 800c528:	e000      	b.n	800c52c <ProcessMacCommands+0x9a8>
                break;
 800c52a:	bf00      	nop
    while( macIndex < commandsSize )
 800c52c:	78fa      	ldrb	r2, [r7, #3]
 800c52e:	78bb      	ldrb	r3, [r7, #2]
 800c530:	429a      	cmp	r2, r3
 800c532:	f4ff ab49 	bcc.w	800bbc8 <ProcessMacCommands+0x44>
 800c536:	e004      	b.n	800c542 <ProcessMacCommands+0x9be>
        return;
 800c538:	bf00      	nop
 800c53a:	e002      	b.n	800c542 <ProcessMacCommands+0x9be>
            return;
 800c53c:	bf00      	nop
 800c53e:	e000      	b.n	800c542 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800c540:	bf00      	nop
        }
    }
}
 800c542:	378c      	adds	r7, #140	@ 0x8c
 800c544:	46bd      	mov	sp, r7
 800c546:	bd90      	pop	{r4, r7, pc}
 800c548:	12d53d80 	.word	0x12d53d80
 800c54c:	200009c4 	.word	0x200009c4
 800c550:	20000f78 	.word	0x20000f78

0800c554 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08e      	sub	sp, #56	@ 0x38
 800c558:	af02      	add	r7, sp, #8
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	607a      	str	r2, [r7, #4]
 800c55e:	461a      	mov	r2, r3
 800c560:	460b      	mov	r3, r1
 800c562:	72fb      	strb	r3, [r7, #11]
 800c564:	4613      	mov	r3, r2
 800c566:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c568:	2303      	movs	r3, #3
 800c56a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c56e:	4b66      	ldr	r3, [pc, #408]	@ (800c708 <Send+0x1b4>)
 800c570:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c574:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800c578:	4b63      	ldr	r3, [pc, #396]	@ (800c708 <Send+0x1b4>)
 800c57a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c57e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c582:	4b61      	ldr	r3, [pc, #388]	@ (800c708 <Send+0x1b4>)
 800c584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c586:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c588:	4b5f      	ldr	r3, [pc, #380]	@ (800c708 <Send+0x1b4>)
 800c58a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800c592:	2307      	movs	r3, #7
 800c594:	e0b4      	b.n	800c700 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800c596:	4b5c      	ldr	r3, [pc, #368]	@ (800c708 <Send+0x1b4>)
 800c598:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800c5a0:	4b59      	ldr	r3, [pc, #356]	@ (800c708 <Send+0x1b4>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800c5ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c5b0:	f023 030f 	bic.w	r3, r3, #15
 800c5b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800c5b8:	4b53      	ldr	r3, [pc, #332]	@ (800c708 <Send+0x1b4>)
 800c5ba:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800c5be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c5c2:	f362 13c7 	bfi	r3, r2, #7, #1
 800c5c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c5ca:	4b4f      	ldr	r3, [pc, #316]	@ (800c708 <Send+0x1b4>)
 800c5cc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d106      	bne.n	800c5e2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800c5d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c5d8:	f043 0310 	orr.w	r3, r3, #16
 800c5dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800c5e0:	e005      	b.n	800c5ee <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800c5e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c5e6:	f023 0310 	bic.w	r3, r3, #16
 800c5ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800c5ee:	4b46      	ldr	r3, [pc, #280]	@ (800c708 <Send+0x1b4>)
 800c5f0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800c5f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c5fc:	f043 0320 	orr.w	r3, r3, #32
 800c600:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800c604:	2301      	movs	r3, #1
 800c606:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800c608:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c60c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	bf14      	ite	ne
 800c616:	2301      	movne	r3, #1
 800c618:	2300      	moveq	r3, #0
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c61e:	4b3a      	ldr	r3, [pc, #232]	@ (800c708 <Send+0x1b4>)
 800c620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c622:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800c624:	4b38      	ldr	r3, [pc, #224]	@ (800c708 <Send+0x1b4>)
 800c626:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800c62a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800c62c:	4b36      	ldr	r3, [pc, #216]	@ (800c708 <Send+0x1b4>)
 800c62e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800c632:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c634:	4b34      	ldr	r3, [pc, #208]	@ (800c708 <Send+0x1b4>)
 800c636:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800c63a:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c63e:	4b32      	ldr	r3, [pc, #200]	@ (800c708 <Send+0x1b4>)
 800c640:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800c644:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c648:	4b2f      	ldr	r3, [pc, #188]	@ (800c708 <Send+0x1b4>)
 800c64a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c64e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800c652:	4b2d      	ldr	r3, [pc, #180]	@ (800c708 <Send+0x1b4>)
 800c654:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c658:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c65c:	4b2a      	ldr	r3, [pc, #168]	@ (800c708 <Send+0x1b4>)
 800c65e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c662:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800c666:	f107 0014 	add.w	r0, r7, #20
 800c66a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	4b26      	ldr	r3, [pc, #152]	@ (800c70c <Send+0x1b8>)
 800c672:	4a27      	ldr	r2, [pc, #156]	@ (800c710 <Send+0x1bc>)
 800c674:	4927      	ldr	r1, [pc, #156]	@ (800c714 <Send+0x1c0>)
 800c676:	f002 fc37 	bl	800eee8 <LoRaMacAdrCalcNext>
 800c67a:	4603      	mov	r3, r0
 800c67c:	461a      	mov	r2, r3
 800c67e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c682:	f362 1386 	bfi	r3, r2, #6, #1
 800c686:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800c68a:	7afa      	ldrb	r2, [r7, #11]
 800c68c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800c690:	893b      	ldrh	r3, [r7, #8]
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f000 fc72 	bl	800cf80 <PrepareFrame>
 800c69c:	4603      	mov	r3, r0
 800c69e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800c6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <Send+0x15e>
 800c6aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6ae:	2b0a      	cmp	r3, #10
 800c6b0:	d107      	bne.n	800c6c2 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800c6b2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f962 	bl	800c980 <ScheduleTx>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800c6c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800c6ca:	4a0f      	ldr	r2, [pc, #60]	@ (800c708 <Send+0x1b4>)
 800c6cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c6d0:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800c6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800c708 <Send+0x1b4>)
 800c6d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c6da:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800c6de:	e00d      	b.n	800c6fc <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800c6e0:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <Send+0x1b4>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	4a07      	ldr	r2, [pc, #28]	@ (800c708 <Send+0x1b4>)
 800c6ec:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800c6ee:	f002 ff83 	bl	800f5f8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c6f8:	2313      	movs	r3, #19
 800c6fa:	e001      	b.n	800c700 <Send+0x1ac>
        }
    }
    return status;
 800c6fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c700:	4618      	mov	r0, r3
 800c702:	3730      	adds	r7, #48	@ 0x30
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	20008000 	.word	0x20008000
 800c70c:	20008068 	.word	0x20008068
 800c710:	20008038 	.word	0x20008038
 800c714:	20008039 	.word	0x20008039

0800c718 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800c72a:	2301      	movs	r3, #1
 800c72c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	2bff      	cmp	r3, #255	@ 0xff
 800c732:	d11f      	bne.n	800c774 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800c734:	2000      	movs	r0, #0
 800c736:	f7ff f8eb 	bl	800b910 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800c73a:	4b15      	ldr	r3, [pc, #84]	@ (800c790 <SendReJoinReq+0x78>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800c742:	4b13      	ldr	r3, [pc, #76]	@ (800c790 <SendReJoinReq+0x78>)
 800c744:	4a13      	ldr	r2, [pc, #76]	@ (800c794 <SendReJoinReq+0x7c>)
 800c746:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800c74a:	4b11      	ldr	r3, [pc, #68]	@ (800c790 <SendReJoinReq+0x78>)
 800c74c:	22ff      	movs	r2, #255	@ 0xff
 800c74e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800c752:	7b3b      	ldrb	r3, [r7, #12]
 800c754:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800c758:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800c75a:	7b3a      	ldrb	r2, [r7, #12]
 800c75c:	4b0c      	ldr	r3, [pc, #48]	@ (800c790 <SendReJoinReq+0x78>)
 800c75e:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800c762:	480d      	ldr	r0, [pc, #52]	@ (800c798 <SendReJoinReq+0x80>)
 800c764:	f009 fe64 	bl	8016430 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800c768:	480c      	ldr	r0, [pc, #48]	@ (800c79c <SendReJoinReq+0x84>)
 800c76a:	f009 fe17 	bl	801639c <SecureElementGetDevEui>

            allowDelayedTx = false;
 800c76e:	2300      	movs	r3, #0
 800c770:	73fb      	strb	r3, [r7, #15]

            break;
 800c772:	e002      	b.n	800c77a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c774:	2302      	movs	r3, #2
 800c776:	73bb      	strb	r3, [r7, #14]
            break;
 800c778:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 f8ff 	bl	800c980 <ScheduleTx>
 800c782:	4603      	mov	r3, r0
 800c784:	73bb      	strb	r3, [r7, #14]
    return status;
 800c786:	7bbb      	ldrb	r3, [r7, #14]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	200009c4 	.word	0x200009c4
 800c794:	200009c6 	.word	0x200009c6
 800c798:	20000ad2 	.word	0x20000ad2
 800c79c:	20000ada 	.word	0x20000ada

0800c7a0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c7a4:	f002 fcb0 	bl	800f108 <LoRaMacClassBIsBeaconExpected>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d001      	beq.n	800c7b2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800c7ae:	230e      	movs	r3, #14
 800c7b0:	e013      	b.n	800c7da <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c7e0 <CheckForClassBCollision+0x40>)
 800c7b4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d10d      	bne.n	800c7d8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c7bc:	f002 fcab 	bl	800f116 <LoRaMacClassBIsPingExpected>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c7c6:	230f      	movs	r3, #15
 800c7c8:	e007      	b.n	800c7da <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c7ca:	f002 fcab 	bl	800f124 <LoRaMacClassBIsMulticastExpected>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c7d4:	230f      	movs	r3, #15
 800c7d6:	e000      	b.n	800c7da <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20008000 	.word	0x20008000

0800c7e4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c7ea:	4b2d      	ldr	r3, [pc, #180]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c7ec:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800c7f0:	4b2b      	ldr	r3, [pc, #172]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c7f2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c7f6:	4b2a      	ldr	r3, [pc, #168]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c7f8:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800c7fc:	4b28      	ldr	r3, [pc, #160]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c7fe:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800c802:	4b27      	ldr	r3, [pc, #156]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c804:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800c808:	b25b      	sxtb	r3, r3
 800c80a:	f004 fdd3 	bl	80113b4 <RegionApplyDrOffset>
 800c80e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c810:	b259      	sxtb	r1, r3
 800c812:	4b23      	ldr	r3, [pc, #140]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c814:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800c818:	4b21      	ldr	r3, [pc, #132]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c81a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c81c:	4821      	ldr	r0, [pc, #132]	@ (800c8a4 <ComputeRxWindowParameters+0xc0>)
 800c81e:	9000      	str	r0, [sp, #0]
 800c820:	4620      	mov	r0, r4
 800c822:	f004 fc89 	bl	8011138 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c826:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c828:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800c82c:	4b1c      	ldr	r3, [pc, #112]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c82e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c832:	b259      	sxtb	r1, r3
 800c834:	4b1a      	ldr	r3, [pc, #104]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c836:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800c83a:	4b19      	ldr	r3, [pc, #100]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c83c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c83e:	4c1a      	ldr	r4, [pc, #104]	@ (800c8a8 <ComputeRxWindowParameters+0xc4>)
 800c840:	9400      	str	r4, [sp, #0]
 800c842:	f004 fc79 	bl	8011138 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c846:	4b16      	ldr	r3, [pc, #88]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c84a:	4a18      	ldr	r2, [pc, #96]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c84c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800c850:	4413      	add	r3, r2
 800c852:	4a16      	ldr	r2, [pc, #88]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c854:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c858:	4b11      	ldr	r3, [pc, #68]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c85a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c85c:	4a13      	ldr	r2, [pc, #76]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c85e:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800c862:	4413      	add	r3, r2
 800c864:	4a11      	ldr	r2, [pc, #68]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c866:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800c86a:	4b10      	ldr	r3, [pc, #64]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c86c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800c870:	2b04      	cmp	r3, #4
 800c872:	d011      	beq.n	800c898 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c874:	4b0a      	ldr	r3, [pc, #40]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c878:	4a0c      	ldr	r2, [pc, #48]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c87a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800c87e:	4413      	add	r3, r2
 800c880:	4a0a      	ldr	r2, [pc, #40]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c882:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c886:	4b06      	ldr	r3, [pc, #24]	@ (800c8a0 <ComputeRxWindowParameters+0xbc>)
 800c888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c88a:	4a08      	ldr	r2, [pc, #32]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c88c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800c890:	4413      	add	r3, r2
 800c892:	4a06      	ldr	r2, [pc, #24]	@ (800c8ac <ComputeRxWindowParameters+0xc8>)
 800c894:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800c898:	bf00      	nop
 800c89a:	3704      	adds	r7, #4
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd90      	pop	{r4, r7, pc}
 800c8a0:	20008000 	.word	0x20008000
 800c8a4:	20000d7c 	.word	0x20000d7c
 800c8a8:	20000d94 	.word	0x20000d94
 800c8ac:	200009c4 	.word	0x200009c4

0800c8b0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c8ba:	4b13      	ldr	r3, [pc, #76]	@ (800c908 <VerifyTxFrame+0x58>)
 800c8bc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d01b      	beq.n	800c8fc <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c8c4:	1d3b      	adds	r3, r7, #4
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f002 fee6 	bl	800f698 <LoRaMacCommandsGetSizeSerializedCmds>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c8d2:	2313      	movs	r3, #19
 800c8d4:	e013      	b.n	800c8fe <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800c8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c90c <VerifyTxFrame+0x5c>)
 800c8d8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800c8dc:	4a0a      	ldr	r2, [pc, #40]	@ (800c908 <VerifyTxFrame+0x58>)
 800c8de:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff f924 	bl	800bb34 <ValidatePayloadLength>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	f083 0301 	eor.w	r3, r3, #1
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800c8f8:	2308      	movs	r3, #8
 800c8fa:	e000      	b.n	800c8fe <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20008000 	.word	0x20008000
 800c90c:	200009c4 	.word	0x200009c4

0800c910 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800c916:	4b18      	ldr	r3, [pc, #96]	@ (800c978 <SerializeTxFrame+0x68>)
 800c918:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <SerializeTxFrame+0x16>
 800c920:	2b04      	cmp	r3, #4
 800c922:	d011      	beq.n	800c948 <SerializeTxFrame+0x38>
 800c924:	e021      	b.n	800c96a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c926:	4815      	ldr	r0, [pc, #84]	@ (800c97c <SerializeTxFrame+0x6c>)
 800c928:	f004 f9d9 	bl	8010cde <LoRaMacSerializerJoinRequest>
 800c92c:	4603      	mov	r3, r0
 800c92e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c930:	79fb      	ldrb	r3, [r7, #7]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c936:	2311      	movs	r3, #17
 800c938:	e01a      	b.n	800c970 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c93a:	4b0f      	ldr	r3, [pc, #60]	@ (800c978 <SerializeTxFrame+0x68>)
 800c93c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800c940:	461a      	mov	r2, r3
 800c942:	4b0d      	ldr	r3, [pc, #52]	@ (800c978 <SerializeTxFrame+0x68>)
 800c944:	801a      	strh	r2, [r3, #0]
            break;
 800c946:	e012      	b.n	800c96e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800c948:	480c      	ldr	r0, [pc, #48]	@ (800c97c <SerializeTxFrame+0x6c>)
 800c94a:	f004 fa4a 	bl	8010de2 <LoRaMacSerializerData>
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c952:	79fb      	ldrb	r3, [r7, #7]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c958:	2311      	movs	r3, #17
 800c95a:	e009      	b.n	800c970 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c95c:	4b06      	ldr	r3, [pc, #24]	@ (800c978 <SerializeTxFrame+0x68>)
 800c95e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800c962:	461a      	mov	r2, r3
 800c964:	4b04      	ldr	r3, [pc, #16]	@ (800c978 <SerializeTxFrame+0x68>)
 800c966:	801a      	strh	r2, [r3, #0]
            break;
 800c968:	e001      	b.n	800c96e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800c96a:	2303      	movs	r3, #3
 800c96c:	e000      	b.n	800c970 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	200009c4 	.word	0x200009c4
 800c97c:	20000acc 	.word	0x20000acc

0800c980 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b090      	sub	sp, #64	@ 0x40
 800c984:	af02      	add	r7, sp, #8
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c98a:	2303      	movs	r3, #3
 800c98c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800c990:	f7ff ff06 	bl	800c7a0 <CheckForClassBCollision>
 800c994:	4603      	mov	r3, r0
 800c996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800c99a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <ScheduleTx+0x28>
    {
        return status;
 800c9a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9a6:	e092      	b.n	800cace <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800c9a8:	f000 f8f8 	bl	800cb9c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800c9ac:	f7ff ffb0 	bl	800c910 <SerializeTxFrame>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800c9b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d002      	beq.n	800c9c4 <ScheduleTx+0x44>
    {
        return status;
 800c9be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9c2:	e084      	b.n	800cace <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800c9c4:	4b44      	ldr	r3, [pc, #272]	@ (800cad8 <ScheduleTx+0x158>)
 800c9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9c8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c9ca:	4b43      	ldr	r3, [pc, #268]	@ (800cad8 <ScheduleTx+0x158>)
 800c9cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800c9d0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800c9d2:	4b41      	ldr	r3, [pc, #260]	@ (800cad8 <ScheduleTx+0x158>)
 800c9d4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c9d8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c9da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f00d f8ac 	bl	8019b3c <SysTimeGetMcuTime>
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	4b3c      	ldr	r3, [pc, #240]	@ (800cad8 <ScheduleTx+0x158>)
 800c9e8:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800c9ec:	9200      	str	r2, [sp, #0]
 800c9ee:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c9f2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c9f6:	ca06      	ldmia	r2, {r1, r2}
 800c9f8:	f00d f801 	bl	80199fe <SysTimeSub>
 800c9fc:	f107 0320 	add.w	r3, r7, #32
 800ca00:	463a      	mov	r2, r7
 800ca02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca06:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800ca0a:	4b33      	ldr	r3, [pc, #204]	@ (800cad8 <ScheduleTx+0x158>)
 800ca0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca0e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800ca10:	2300      	movs	r3, #0
 800ca12:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800ca16:	2301      	movs	r3, #1
 800ca18:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800ca1a:	4b30      	ldr	r3, [pc, #192]	@ (800cadc <ScheduleTx+0x15c>)
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ca20:	4b2d      	ldr	r3, [pc, #180]	@ (800cad8 <ScheduleTx+0x158>)
 800ca22:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d104      	bne.n	800ca34 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800ca30:	2300      	movs	r3, #0
 800ca32:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ca34:	4b28      	ldr	r3, [pc, #160]	@ (800cad8 <ScheduleTx+0x158>)
 800ca36:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ca3a:	f107 0114 	add.w	r1, r7, #20
 800ca3e:	4b28      	ldr	r3, [pc, #160]	@ (800cae0 <ScheduleTx+0x160>)
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	4b28      	ldr	r3, [pc, #160]	@ (800cae4 <ScheduleTx+0x164>)
 800ca44:	4a28      	ldr	r2, [pc, #160]	@ (800cae8 <ScheduleTx+0x168>)
 800ca46:	f004 fc92 	bl	801136e <RegionNextChannel>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800ca50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d025      	beq.n	800caa4 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800ca58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca5c:	2b0b      	cmp	r3, #11
 800ca5e:	d11e      	bne.n	800ca9e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ca60:	4b1e      	ldr	r3, [pc, #120]	@ (800cadc <ScheduleTx+0x15c>)
 800ca62:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d01c      	beq.n	800caa4 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d013      	beq.n	800ca98 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800ca70:	4b1a      	ldr	r3, [pc, #104]	@ (800cadc <ScheduleTx+0x15c>)
 800ca72:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ca76:	f043 0320 	orr.w	r3, r3, #32
 800ca7a:	4a18      	ldr	r2, [pc, #96]	@ (800cadc <ScheduleTx+0x15c>)
 800ca7c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800ca80:	4b16      	ldr	r3, [pc, #88]	@ (800cadc <ScheduleTx+0x15c>)
 800ca82:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800ca86:	4619      	mov	r1, r3
 800ca88:	4818      	ldr	r0, [pc, #96]	@ (800caec <ScheduleTx+0x16c>)
 800ca8a:	f00d fa01 	bl	8019e90 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800ca8e:	4817      	ldr	r0, [pc, #92]	@ (800caec <ScheduleTx+0x16c>)
 800ca90:	f00d f920 	bl	8019cd4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	e01a      	b.n	800cace <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800ca98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca9c:	e017      	b.n	800cace <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800ca9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800caa2:	e014      	b.n	800cace <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800caa4:	f7ff fe9e 	bl	800c7e4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800caa8:	f7ff ff02 	bl	800c8b0 <VerifyTxFrame>
 800caac:	4603      	mov	r3, r0
 800caae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800cab2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d002      	beq.n	800cac0 <ScheduleTx+0x140>
    {
        return status;
 800caba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cabe:	e006      	b.n	800cace <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800cac0:	4b06      	ldr	r3, [pc, #24]	@ (800cadc <ScheduleTx+0x15c>)
 800cac2:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fb74 	bl	800d1b4 <SendFrameOnChannel>
 800cacc:	4603      	mov	r3, r0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3738      	adds	r7, #56	@ 0x38
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20008000 	.word	0x20008000
 800cadc:	200009c4 	.word	0x200009c4
 800cae0:	20008030 	.word	0x20008030
 800cae4:	20000e58 	.word	0x20000e58
 800cae8:	20000ddf 	.word	0x20000ddf
 800caec:	20000d2c 	.word	0x20000d2c

0800caf0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	4603      	mov	r3, r0
 800caf8:	460a      	mov	r2, r1
 800cafa:	71fb      	strb	r3, [r7, #7]
 800cafc:	4613      	mov	r3, r2
 800cafe:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800cb00:	2312      	movs	r3, #18
 800cb02:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800cb08:	4b22      	ldr	r3, [pc, #136]	@ (800cb94 <SecureFrame+0xa4>)
 800cb0a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <SecureFrame+0x28>
 800cb12:	2b04      	cmp	r3, #4
 800cb14:	d011      	beq.n	800cb3a <SecureFrame+0x4a>
 800cb16:	e036      	b.n	800cb86 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800cb18:	481f      	ldr	r0, [pc, #124]	@ (800cb98 <SecureFrame+0xa8>)
 800cb1a:	f003 fcb3 	bl	8010484 <LoRaMacCryptoPrepareJoinRequest>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d001      	beq.n	800cb2c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cb28:	2311      	movs	r3, #17
 800cb2a:	e02f      	b.n	800cb8c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800cb2c:	4b19      	ldr	r3, [pc, #100]	@ (800cb94 <SecureFrame+0xa4>)
 800cb2e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800cb32:	461a      	mov	r2, r3
 800cb34:	4b17      	ldr	r3, [pc, #92]	@ (800cb94 <SecureFrame+0xa4>)
 800cb36:	801a      	strh	r2, [r3, #0]
            break;
 800cb38:	e027      	b.n	800cb8a <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800cb3a:	f107 0308 	add.w	r3, r7, #8
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f003 fbda 	bl	80102f8 <LoRaMacCryptoGetFCntUp>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d001      	beq.n	800cb4e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800cb4a:	2312      	movs	r3, #18
 800cb4c:	e01e      	b.n	800cb8c <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800cb4e:	4b11      	ldr	r3, [pc, #68]	@ (800cb94 <SecureFrame+0xa4>)
 800cb50:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800cb5e:	68b8      	ldr	r0, [r7, #8]
 800cb60:	79ba      	ldrb	r2, [r7, #6]
 800cb62:	79f9      	ldrb	r1, [r7, #7]
 800cb64:	4b0c      	ldr	r3, [pc, #48]	@ (800cb98 <SecureFrame+0xa8>)
 800cb66:	f003 fdb3 	bl	80106d0 <LoRaMacCryptoSecureMessage>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d001      	beq.n	800cb78 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cb74:	2311      	movs	r3, #17
 800cb76:	e009      	b.n	800cb8c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800cb78:	4b06      	ldr	r3, [pc, #24]	@ (800cb94 <SecureFrame+0xa4>)
 800cb7a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800cb7e:	461a      	mov	r2, r3
 800cb80:	4b04      	ldr	r3, [pc, #16]	@ (800cb94 <SecureFrame+0xa4>)
 800cb82:	801a      	strh	r2, [r3, #0]
            break;
 800cb84:	e001      	b.n	800cb8a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800cb86:	2303      	movs	r3, #3
 800cb88:	e000      	b.n	800cb8c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	200009c4 	.word	0x200009c4
 800cb98:	20000acc 	.word	0x20000acc

0800cb9c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800cba0:	4b09      	ldr	r3, [pc, #36]	@ (800cbc8 <CalculateBackOff+0x2c>)
 800cba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10a      	bne.n	800cbbe <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800cba8:	4b07      	ldr	r3, [pc, #28]	@ (800cbc8 <CalculateBackOff+0x2c>)
 800cbaa:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	4a06      	ldr	r2, [pc, #24]	@ (800cbcc <CalculateBackOff+0x30>)
 800cbb2:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 800cbb6:	fb02 f303 	mul.w	r3, r2, r3
 800cbba:	4a03      	ldr	r2, [pc, #12]	@ (800cbc8 <CalculateBackOff+0x2c>)
 800cbbc:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800cbbe:	bf00      	nop
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bc80      	pop	{r7}
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	20008000 	.word	0x20008000
 800cbcc:	200009c4 	.word	0x200009c4

0800cbd0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	7139      	strb	r1, [r7, #4]
 800cbda:	71fb      	strb	r3, [r7, #7]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800cbe0:	79fb      	ldrb	r3, [r7, #7]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d002      	beq.n	800cbec <RemoveMacCommands+0x1c>
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d10d      	bne.n	800cc08 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800cbec:	79bb      	ldrb	r3, [r7, #6]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d108      	bne.n	800cc04 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800cbf2:	793b      	ldrb	r3, [r7, #4]
 800cbf4:	f003 0320 	and.w	r3, r3, #32
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d004      	beq.n	800cc08 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800cbfe:	f002 fd1f 	bl	800f640 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800cc02:	e001      	b.n	800cc08 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800cc04:	f002 fd1c 	bl	800f640 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800cc10:	b5b0      	push	{r4, r5, r7, lr}
 800cc12:	b092      	sub	sp, #72	@ 0x48
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800cc1a:	79fb      	ldrb	r3, [r7, #7]
 800cc1c:	f083 0301 	eor.w	r3, r3, #1
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d003      	beq.n	800cc2e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800cc26:	4b88      	ldr	r3, [pc, #544]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800cc2e:	4b86      	ldr	r3, [pc, #536]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800cc34:	4b85      	ldr	r3, [pc, #532]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800cc3c:	4b83      	ldr	r3, [pc, #524]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800cc44:	4b81      	ldr	r3, [pc, #516]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800cc4c:	4b7e      	ldr	r3, [pc, #504]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800cc54:	4b7c      	ldr	r3, [pc, #496]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800cc5c:	4b7a      	ldr	r3, [pc, #488]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc5e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800cc62:	4b79      	ldr	r3, [pc, #484]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800cc68:	4b77      	ldr	r3, [pc, #476]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc6a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800cc6e:	4b76      	ldr	r3, [pc, #472]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800cc74:	4b74      	ldr	r3, [pc, #464]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc76:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800cc7a:	4b73      	ldr	r3, [pc, #460]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc7c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800cc80:	4b71      	ldr	r3, [pc, #452]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc82:	4a71      	ldr	r2, [pc, #452]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc84:	336c      	adds	r3, #108	@ 0x6c
 800cc86:	32b4      	adds	r2, #180	@ 0xb4
 800cc88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc8c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800cc90:	4b6d      	ldr	r3, [pc, #436]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc92:	4a6d      	ldr	r2, [pc, #436]	@ (800ce48 <ResetMacParameters+0x238>)
 800cc94:	3374      	adds	r3, #116	@ 0x74
 800cc96:	32bc      	adds	r2, #188	@ 0xbc
 800cc98:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc9c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800cca0:	4b69      	ldr	r3, [pc, #420]	@ (800ce48 <ResetMacParameters+0x238>)
 800cca2:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800cca6:	4b68      	ldr	r3, [pc, #416]	@ (800ce48 <ResetMacParameters+0x238>)
 800cca8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800ccac:	4b66      	ldr	r3, [pc, #408]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccae:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800ccb2:	4b65      	ldr	r3, [pc, #404]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccb4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800ccb8:	4b63      	ldr	r3, [pc, #396]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ccbe:	4a62      	ldr	r2, [pc, #392]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ccc4:	4b60      	ldr	r3, [pc, #384]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccc6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ccca:	4a5f      	ldr	r2, [pc, #380]	@ (800ce48 <ResetMacParameters+0x238>)
 800cccc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800ccd0:	4b5d      	ldr	r3, [pc, #372]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccd2:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800ccd6:	4b5c      	ldr	r3, [pc, #368]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccd8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ccdc:	4b5a      	ldr	r3, [pc, #360]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccde:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800cce2:	4b59      	ldr	r3, [pc, #356]	@ (800ce48 <ResetMacParameters+0x238>)
 800cce4:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800cce8:	4b58      	ldr	r3, [pc, #352]	@ (800ce4c <ResetMacParameters+0x23c>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800ccf0:	4b55      	ldr	r3, [pc, #340]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ccf8:	4b53      	ldr	r3, [pc, #332]	@ (800ce48 <ResetMacParameters+0x238>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800cd00:	4b51      	ldr	r3, [pc, #324]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800cd08:	4b4f      	ldr	r3, [pc, #316]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800cd10:	4b4d      	ldr	r3, [pc, #308]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800cd18:	4b4b      	ldr	r3, [pc, #300]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800cd20:	4b49      	ldr	r3, [pc, #292]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800cd28:	4b47      	ldr	r3, [pc, #284]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800cd30:	4b45      	ldr	r3, [pc, #276]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800cd38:	4b43      	ldr	r3, [pc, #268]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800cd40:	4b41      	ldr	r3, [pc, #260]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800cd4c:	4b40      	ldr	r3, [pc, #256]	@ (800ce50 <ResetMacParameters+0x240>)
 800cd4e:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800cd50:	4b40      	ldr	r3, [pc, #256]	@ (800ce54 <ResetMacParameters+0x244>)
 800cd52:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 800cd54:	4b40      	ldr	r3, [pc, #256]	@ (800ce58 <ResetMacParameters+0x248>)
 800cd56:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800cd58:	4b3b      	ldr	r3, [pc, #236]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd5a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cd5e:	f107 020c 	add.w	r2, r7, #12
 800cd62:	4611      	mov	r1, r2
 800cd64:	4618      	mov	r0, r3
 800cd66:	f004 f97d 	bl	8011064 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800cd6a:	4b38      	ldr	r3, [pc, #224]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cd72:	4b36      	ldr	r3, [pc, #216]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cd74:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800cd78:	4b34      	ldr	r3, [pc, #208]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cd7a:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800cd7e:	4b32      	ldr	r3, [pc, #200]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd82:	4a32      	ldr	r2, [pc, #200]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cd84:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd88:	4b2f      	ldr	r3, [pc, #188]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd8a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cd8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cd90:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cd94:	4b2c      	ldr	r3, [pc, #176]	@ (800ce48 <ResetMacParameters+0x238>)
 800cd96:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800cd9a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cd9c:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cda0:	4b2a      	ldr	r3, [pc, #168]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cda8:	4b28      	ldr	r3, [pc, #160]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cdb0:	4b25      	ldr	r3, [pc, #148]	@ (800ce48 <ResetMacParameters+0x238>)
 800cdb2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800cdb6:	4b25      	ldr	r3, [pc, #148]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdb8:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800cdbc:	4a23      	ldr	r2, [pc, #140]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdbe:	4b23      	ldr	r3, [pc, #140]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdc0:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800cdc4:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800cdc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cdd0:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800cdd4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cddc:	4b1b      	ldr	r3, [pc, #108]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdde:	2202      	movs	r2, #2
 800cde0:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800cde4:	2300      	movs	r3, #0
 800cde6:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 800cde8:	2300      	movs	r3, #0
 800cdea:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 800cdec:	4b17      	ldr	r3, [pc, #92]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d009      	beq.n	800ce0a <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800cdf6:	4b15      	ldr	r3, [pc, #84]	@ (800ce4c <ResetMacParameters+0x23c>)
 800cdf8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800ce00:	4b12      	ldr	r3, [pc, #72]	@ (800ce4c <ResetMacParameters+0x23c>)
 800ce02:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ce06:	695b      	ldr	r3, [r3, #20]
 800ce08:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800ce0a:	4b14      	ldr	r3, [pc, #80]	@ (800ce5c <ResetMacParameters+0x24c>)
 800ce0c:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800ce0e:	4b14      	ldr	r3, [pc, #80]	@ (800ce60 <ResetMacParameters+0x250>)
 800ce10:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800ce12:	4b14      	ldr	r3, [pc, #80]	@ (800ce64 <ResetMacParameters+0x254>)
 800ce14:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800ce16:	4b14      	ldr	r3, [pc, #80]	@ (800ce68 <ResetMacParameters+0x258>)
 800ce18:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800ce1a:	4b14      	ldr	r3, [pc, #80]	@ (800ce6c <ResetMacParameters+0x25c>)
 800ce1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800ce1e:	4b14      	ldr	r3, [pc, #80]	@ (800ce70 <ResetMacParameters+0x260>)
 800ce20:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800ce22:	4b14      	ldr	r3, [pc, #80]	@ (800ce74 <ResetMacParameters+0x264>)
 800ce24:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800ce26:	4b14      	ldr	r3, [pc, #80]	@ (800ce78 <ResetMacParameters+0x268>)
 800ce28:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800ce2a:	4b14      	ldr	r3, [pc, #80]	@ (800ce7c <ResetMacParameters+0x26c>)
 800ce2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800ce2e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800ce32:	f107 031c 	add.w	r3, r7, #28
 800ce36:	4a12      	ldr	r2, [pc, #72]	@ (800ce80 <ResetMacParameters+0x270>)
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f002 f90e 	bl	800f05a <LoRaMacClassBInit>
}
 800ce3e:	bf00      	nop
 800ce40:	3748      	adds	r7, #72	@ 0x48
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bdb0      	pop	{r4, r5, r7, pc}
 800ce46:	bf00      	nop
 800ce48:	20008000 	.word	0x20008000
 800ce4c:	200009c4 	.word	0x200009c4
 800ce50:	20008224 	.word	0x20008224
 800ce54:	20008238 	.word	0x20008238
 800ce58:	20000ee0 	.word	0x20000ee0
 800ce5c:	20000e2c 	.word	0x20000e2c
 800ce60:	20000de4 	.word	0x20000de4
 800ce64:	20000e18 	.word	0x20000e18
 800ce68:	20000e55 	.word	0x20000e55
 800ce6c:	200080e4 	.word	0x200080e4
 800ce70:	20008048 	.word	0x20008048
 800ce74:	2000804c 	.word	0x2000804c
 800ce78:	200080e8 	.word	0x200080e8
 800ce7c:	20008130 	.word	0x20008130
 800ce80:	200085b4 	.word	0x200085b4

0800ce84 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f00c ff8e 	bl	8019db0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800ce94:	4b11      	ldr	r3, [pc, #68]	@ (800cedc <RxWindowSetup+0x58>)
 800ce96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce98:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ce9a:	4b11      	ldr	r3, [pc, #68]	@ (800cee0 <RxWindowSetup+0x5c>)
 800ce9c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cea0:	4a10      	ldr	r2, [pc, #64]	@ (800cee4 <RxWindowSetup+0x60>)
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f004 f96a 	bl	801117e <RegionRxConfig>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d010      	beq.n	800ced2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ceb0:	4b0d      	ldr	r3, [pc, #52]	@ (800cee8 <RxWindowSetup+0x64>)
 800ceb2:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cee8 <RxWindowSetup+0x64>)
 800ceb8:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800cebc:	4b07      	ldr	r3, [pc, #28]	@ (800cedc <RxWindowSetup+0x58>)
 800cebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cec0:	4a07      	ldr	r2, [pc, #28]	@ (800cee0 <RxWindowSetup+0x5c>)
 800cec2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800cec4:	4610      	mov	r0, r2
 800cec6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	7cda      	ldrb	r2, [r3, #19]
 800cecc:	4b06      	ldr	r3, [pc, #24]	@ (800cee8 <RxWindowSetup+0x64>)
 800cece:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	08020bac 	.word	0x08020bac
 800cee0:	20008000 	.word	0x20008000
 800cee4:	20000de8 	.word	0x20000de8
 800cee8:	200009c4 	.word	0x200009c4

0800ceec <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800ceec:	b590      	push	{r4, r7, lr}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cef2:	4b1e      	ldr	r3, [pc, #120]	@ (800cf6c <OpenContinuousRxCWindow+0x80>)
 800cef4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800cef8:	4b1c      	ldr	r3, [pc, #112]	@ (800cf6c <OpenContinuousRxCWindow+0x80>)
 800cefa:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cefe:	b259      	sxtb	r1, r3
 800cf00:	4b1a      	ldr	r3, [pc, #104]	@ (800cf6c <OpenContinuousRxCWindow+0x80>)
 800cf02:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800cf06:	4b19      	ldr	r3, [pc, #100]	@ (800cf6c <OpenContinuousRxCWindow+0x80>)
 800cf08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf0a:	4c19      	ldr	r4, [pc, #100]	@ (800cf70 <OpenContinuousRxCWindow+0x84>)
 800cf0c:	9400      	str	r4, [sp, #0]
 800cf0e:	f004 f913 	bl	8011138 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cf12:	4b18      	ldr	r3, [pc, #96]	@ (800cf74 <OpenContinuousRxCWindow+0x88>)
 800cf14:	2202      	movs	r2, #2
 800cf16:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cf1a:	4b14      	ldr	r3, [pc, #80]	@ (800cf6c <OpenContinuousRxCWindow+0x80>)
 800cf1c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800cf20:	4b14      	ldr	r3, [pc, #80]	@ (800cf74 <OpenContinuousRxCWindow+0x88>)
 800cf22:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800cf26:	4b13      	ldr	r3, [pc, #76]	@ (800cf74 <OpenContinuousRxCWindow+0x88>)
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800cf2e:	4b0f      	ldr	r3, [pc, #60]	@ (800cf6c <OpenContinuousRxCWindow+0x80>)
 800cf30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cf34:	4a10      	ldr	r2, [pc, #64]	@ (800cf78 <OpenContinuousRxCWindow+0x8c>)
 800cf36:	490e      	ldr	r1, [pc, #56]	@ (800cf70 <OpenContinuousRxCWindow+0x84>)
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f004 f920 	bl	801117e <RegionRxConfig>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00f      	beq.n	800cf64 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800cf44:	4b0b      	ldr	r3, [pc, #44]	@ (800cf74 <OpenContinuousRxCWindow+0x88>)
 800cf46:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800cf4a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf74 <OpenContinuousRxCWindow+0x88>)
 800cf4c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800cf50:	4b0a      	ldr	r3, [pc, #40]	@ (800cf7c <OpenContinuousRxCWindow+0x90>)
 800cf52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf54:	2000      	movs	r0, #0
 800cf56:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800cf58:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <OpenContinuousRxCWindow+0x88>)
 800cf5a:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 800cf5e:	4b05      	ldr	r3, [pc, #20]	@ (800cf74 <OpenContinuousRxCWindow+0x88>)
 800cf60:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800cf64:	bf00      	nop
 800cf66:	3704      	adds	r7, #4
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd90      	pop	{r4, r7, pc}
 800cf6c:	20008000 	.word	0x20008000
 800cf70:	20000dac 	.word	0x20000dac
 800cf74:	200009c4 	.word	0x200009c4
 800cf78:	20000de8 	.word	0x20000de8
 800cf7c:	08020bac 	.word	0x08020bac

0800cf80 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800cf90:	4b81      	ldr	r3, [pc, #516]	@ (800d198 <PrepareFrame+0x218>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800cf96:	4b80      	ldr	r3, [pc, #512]	@ (800d198 <PrepareFrame+0x218>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800cfb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	4878      	ldr	r0, [pc, #480]	@ (800d19c <PrepareFrame+0x21c>)
 800cfbc:	f009 fab9 	bl	8016532 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800cfc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfc2:	b2da      	uxtb	r2, r3
 800cfc4:	4b74      	ldr	r3, [pc, #464]	@ (800d198 <PrepareFrame+0x218>)
 800cfc6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	781a      	ldrb	r2, [r3, #0]
 800cfce:	4b72      	ldr	r3, [pc, #456]	@ (800d198 <PrepareFrame+0x218>)
 800cfd0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b07      	cmp	r3, #7
 800cfde:	f000 80b9 	beq.w	800d154 <PrepareFrame+0x1d4>
 800cfe2:	2b07      	cmp	r3, #7
 800cfe4:	f300 80ce 	bgt.w	800d184 <PrepareFrame+0x204>
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d006      	beq.n	800cffa <PrepareFrame+0x7a>
 800cfec:	2b04      	cmp	r3, #4
 800cfee:	f040 80c9 	bne.w	800d184 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800cff2:	4b69      	ldr	r3, [pc, #420]	@ (800d198 <PrepareFrame+0x218>)
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800cffa:	4b67      	ldr	r3, [pc, #412]	@ (800d198 <PrepareFrame+0x218>)
 800cffc:	2204      	movs	r2, #4
 800cffe:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d002:	4b65      	ldr	r3, [pc, #404]	@ (800d198 <PrepareFrame+0x218>)
 800d004:	4a66      	ldr	r2, [pc, #408]	@ (800d1a0 <PrepareFrame+0x220>)
 800d006:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d00a:	4b63      	ldr	r3, [pc, #396]	@ (800d198 <PrepareFrame+0x218>)
 800d00c:	22ff      	movs	r2, #255	@ 0xff
 800d00e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	781a      	ldrb	r2, [r3, #0]
 800d016:	4b60      	ldr	r3, [pc, #384]	@ (800d198 <PrepareFrame+0x218>)
 800d018:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d01c:	4a5e      	ldr	r2, [pc, #376]	@ (800d198 <PrepareFrame+0x218>)
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800d024:	4b5f      	ldr	r3, [pc, #380]	@ (800d1a4 <PrepareFrame+0x224>)
 800d026:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d02a:	4a5b      	ldr	r2, [pc, #364]	@ (800d198 <PrepareFrame+0x218>)
 800d02c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	781a      	ldrb	r2, [r3, #0]
 800d034:	4b58      	ldr	r3, [pc, #352]	@ (800d198 <PrepareFrame+0x218>)
 800d036:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d03a:	4b57      	ldr	r3, [pc, #348]	@ (800d198 <PrepareFrame+0x218>)
 800d03c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800d040:	4b55      	ldr	r3, [pc, #340]	@ (800d198 <PrepareFrame+0x218>)
 800d042:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d046:	4b54      	ldr	r3, [pc, #336]	@ (800d198 <PrepareFrame+0x218>)
 800d048:	4a54      	ldr	r2, [pc, #336]	@ (800d19c <PrepareFrame+0x21c>)
 800d04a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d04e:	f107 0318 	add.w	r3, r7, #24
 800d052:	4618      	mov	r0, r3
 800d054:	f003 f950 	bl	80102f8 <LoRaMacCryptoGetFCntUp>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d05e:	2312      	movs	r3, #18
 800d060:	e096      	b.n	800d190 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	b29a      	uxth	r2, r3
 800d066:	4b4c      	ldr	r3, [pc, #304]	@ (800d198 <PrepareFrame+0x218>)
 800d068:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 800d06c:	4b4a      	ldr	r3, [pc, #296]	@ (800d198 <PrepareFrame+0x218>)
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800d074:	4b48      	ldr	r3, [pc, #288]	@ (800d198 <PrepareFrame+0x218>)
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	4a46      	ldr	r2, [pc, #280]	@ (800d198 <PrepareFrame+0x218>)
 800d080:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d084:	f107 0314 	add.w	r3, r7, #20
 800d088:	4618      	mov	r0, r3
 800d08a:	f002 fb05 	bl	800f698 <LoRaMacCommandsGetSizeSerializedCmds>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d094:	2313      	movs	r3, #19
 800d096:	e07b      	b.n	800d190 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d074      	beq.n	800d188 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d09e:	4b41      	ldr	r3, [pc, #260]	@ (800d1a4 <PrepareFrame+0x224>)
 800d0a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fe fd1d 	bl	800bae4 <GetMaxAppPayloadWithoutFOptsLength>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d0ae:	4b3a      	ldr	r3, [pc, #232]	@ (800d198 <PrepareFrame+0x218>)
 800d0b0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d01d      	beq.n	800d0f4 <PrepareFrame+0x174>
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	2b0f      	cmp	r3, #15
 800d0bc:	d81a      	bhi.n	800d0f4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d0be:	f107 0314 	add.w	r3, r7, #20
 800d0c2:	4a39      	ldr	r2, [pc, #228]	@ (800d1a8 <PrepareFrame+0x228>)
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	200f      	movs	r0, #15
 800d0c8:	f002 fafc 	bl	800f6c4 <LoRaMacCommandsSerializeCmds>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d0d2:	2313      	movs	r3, #19
 800d0d4:	e05c      	b.n	800d190 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f003 030f 	and.w	r3, r3, #15
 800d0dc:	b2d9      	uxtb	r1, r3
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	7813      	ldrb	r3, [r2, #0]
 800d0e2:	f361 0303 	bfi	r3, r1, #0, #4
 800d0e6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	781a      	ldrb	r2, [r3, #0]
 800d0ec:	4b2a      	ldr	r3, [pc, #168]	@ (800d198 <PrepareFrame+0x218>)
 800d0ee:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800d0f2:	e049      	b.n	800d188 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d0f4:	4b28      	ldr	r3, [pc, #160]	@ (800d198 <PrepareFrame+0x218>)
 800d0f6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d010      	beq.n	800d120 <PrepareFrame+0x1a0>
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2b0f      	cmp	r3, #15
 800d102:	d90d      	bls.n	800d120 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d104:	7ffb      	ldrb	r3, [r7, #31]
 800d106:	f107 0114 	add.w	r1, r7, #20
 800d10a:	4a28      	ldr	r2, [pc, #160]	@ (800d1ac <PrepareFrame+0x22c>)
 800d10c:	4618      	mov	r0, r3
 800d10e:	f002 fad9 	bl	800f6c4 <LoRaMacCommandsSerializeCmds>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d118:	2313      	movs	r3, #19
 800d11a:	e039      	b.n	800d190 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d11c:	230a      	movs	r3, #10
 800d11e:	e037      	b.n	800d190 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d120:	7ffb      	ldrb	r3, [r7, #31]
 800d122:	f107 0114 	add.w	r1, r7, #20
 800d126:	4a21      	ldr	r2, [pc, #132]	@ (800d1ac <PrepareFrame+0x22c>)
 800d128:	4618      	mov	r0, r3
 800d12a:	f002 facb 	bl	800f6c4 <LoRaMacCommandsSerializeCmds>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d134:	2313      	movs	r3, #19
 800d136:	e02b      	b.n	800d190 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d138:	4b17      	ldr	r3, [pc, #92]	@ (800d198 <PrepareFrame+0x218>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800d140:	4b15      	ldr	r3, [pc, #84]	@ (800d198 <PrepareFrame+0x218>)
 800d142:	4a1a      	ldr	r2, [pc, #104]	@ (800d1ac <PrepareFrame+0x22c>)
 800d144:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	4b12      	ldr	r3, [pc, #72]	@ (800d198 <PrepareFrame+0x218>)
 800d14e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800d152:	e019      	b.n	800d188 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d018      	beq.n	800d18c <PrepareFrame+0x20c>
 800d15a:	4b0f      	ldr	r3, [pc, #60]	@ (800d198 <PrepareFrame+0x218>)
 800d15c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d160:	2b00      	cmp	r3, #0
 800d162:	d013      	beq.n	800d18c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d164:	4812      	ldr	r0, [pc, #72]	@ (800d1b0 <PrepareFrame+0x230>)
 800d166:	4b0c      	ldr	r3, [pc, #48]	@ (800d198 <PrepareFrame+0x218>)
 800d168:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d16c:	461a      	mov	r2, r3
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	f009 f9df 	bl	8016532 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d174:	4b08      	ldr	r3, [pc, #32]	@ (800d198 <PrepareFrame+0x218>)
 800d176:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d17a:	3301      	adds	r3, #1
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	4b06      	ldr	r3, [pc, #24]	@ (800d198 <PrepareFrame+0x218>)
 800d180:	801a      	strh	r2, [r3, #0]
            }
            break;
 800d182:	e003      	b.n	800d18c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d184:	2302      	movs	r3, #2
 800d186:	e003      	b.n	800d190 <PrepareFrame+0x210>
            break;
 800d188:	bf00      	nop
 800d18a:	e000      	b.n	800d18e <PrepareFrame+0x20e>
            break;
 800d18c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3720      	adds	r7, #32
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	200009c4 	.word	0x200009c4
 800d19c:	20000afc 	.word	0x20000afc
 800d1a0:	200009c6 	.word	0x200009c6
 800d1a4:	20008000 	.word	0x20008000
 800d1a8:	20000adc 	.word	0x20000adc
 800d1ac:	20000e60 	.word	0x20000e60
 800d1b0:	200009c7 	.word	0x200009c7

0800d1b4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08a      	sub	sp, #40	@ 0x28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d1cc:	4b4b      	ldr	r3, [pc, #300]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d1ce:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d1d2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d1d4:	4b49      	ldr	r3, [pc, #292]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d1d6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800d1da:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800d1dc:	4b47      	ldr	r3, [pc, #284]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1e2:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d1e4:	4b45      	ldr	r3, [pc, #276]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1ea:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d1ec:	4b44      	ldr	r3, [pc, #272]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d1f2:	4b42      	ldr	r3, [pc, #264]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d1f4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d1f8:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d1fa:	4b40      	ldr	r3, [pc, #256]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d1fc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d200:	f107 020f 	add.w	r2, r7, #15
 800d204:	f107 0110 	add.w	r1, r7, #16
 800d208:	4b3e      	ldr	r3, [pc, #248]	@ (800d304 <SendFrameOnChannel+0x150>)
 800d20a:	f003 ffd6 	bl	80111ba <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d20e:	4b3c      	ldr	r3, [pc, #240]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d210:	2201      	movs	r2, #1
 800d212:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d216:	4b39      	ldr	r3, [pc, #228]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d218:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	4b38      	ldr	r3, [pc, #224]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d220:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800d224:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800d228:	4b35      	ldr	r3, [pc, #212]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d22a:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	4a33      	ldr	r2, [pc, #204]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d232:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d236:	4b32      	ldr	r3, [pc, #200]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d238:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800d23c:	4a30      	ldr	r2, [pc, #192]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d23e:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d242:	4b2f      	ldr	r3, [pc, #188]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d244:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800d248:	4a2d      	ldr	r2, [pc, #180]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d24a:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d24e:	f001 ff70 	bl	800f132 <LoRaMacClassBIsBeaconModeActive>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00b      	beq.n	800d270 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d258:	4b29      	ldr	r3, [pc, #164]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d25a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800d25e:	4618      	mov	r0, r3
 800d260:	f001 ffd2 	bl	800f208 <LoRaMacClassBIsUplinkCollision>
 800d264:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800d26c:	2310      	movs	r3, #16
 800d26e:	e040      	b.n	800d2f2 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d270:	4b22      	ldr	r3, [pc, #136]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d272:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d276:	2b01      	cmp	r3, #1
 800d278:	d101      	bne.n	800d27e <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800d27a:	f001 ffcf 	bl	800f21c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800d27e:	f001 ff69 	bl	800f154 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800d282:	4b1e      	ldr	r3, [pc, #120]	@ (800d2fc <SendFrameOnChannel+0x148>)
 800d284:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	4a1d      	ldr	r2, [pc, #116]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d28c:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff fc2c 	bl	800caf0 <SecureFrame>
 800d298:	4603      	mov	r3, r0
 800d29a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800d29e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <SendFrameOnChannel+0xf8>
    {
        return status;
 800d2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2aa:	e022      	b.n	800d2f2 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d2ac:	4b14      	ldr	r3, [pc, #80]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d2b2:	f043 0302 	orr.w	r3, r3, #2
 800d2b6:	4a12      	ldr	r2, [pc, #72]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2b8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 800d2bc:	4b10      	ldr	r3, [pc, #64]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2be:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	4b0e      	ldr	r3, [pc, #56]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2c8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800d2d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2d4:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800d2d8:	4b09      	ldr	r3, [pc, #36]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800d2e0:	4b09      	ldr	r3, [pc, #36]	@ (800d308 <SendFrameOnChannel+0x154>)
 800d2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e4:	4a06      	ldr	r2, [pc, #24]	@ (800d300 <SendFrameOnChannel+0x14c>)
 800d2e6:	8812      	ldrh	r2, [r2, #0]
 800d2e8:	b2d2      	uxtb	r2, r2
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	4807      	ldr	r0, [pc, #28]	@ (800d30c <SendFrameOnChannel+0x158>)
 800d2ee:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3728      	adds	r7, #40	@ 0x28
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20008000 	.word	0x20008000
 800d300:	200009c4 	.word	0x200009c4
 800d304:	20000de0 	.word	0x20000de0
 800d308:	08020bac 	.word	0x08020bac
 800d30c:	200009c6 	.word	0x200009c6

0800d310 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	6039      	str	r1, [r7, #0]
 800d31a:	80fb      	strh	r3, [r7, #6]
 800d31c:	4613      	mov	r3, r2
 800d31e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800d320:	4b09      	ldr	r3, [pc, #36]	@ (800d348 <SetTxContinuousWave+0x38>)
 800d322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d324:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800d328:	88fa      	ldrh	r2, [r7, #6]
 800d32a:	6838      	ldr	r0, [r7, #0]
 800d32c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d32e:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <SetTxContinuousWave+0x3c>)
 800d330:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d334:	f043 0302 	orr.w	r3, r3, #2
 800d338:	4a04      	ldr	r2, [pc, #16]	@ (800d34c <SetTxContinuousWave+0x3c>)
 800d33a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	08020bac 	.word	0x08020bac
 800d34c:	200009c4 	.word	0x200009c4

0800d350 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800d35a:	4b49      	ldr	r3, [pc, #292]	@ (800d480 <RestoreNvmData+0x130>)
 800d35c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d360:	2b01      	cmp	r3, #1
 800d362:	d001      	beq.n	800d368 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800d364:	2301      	movs	r3, #1
 800d366:	e087      	b.n	800d478 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800d368:	2124      	movs	r1, #36	@ 0x24
 800d36a:	4846      	ldr	r0, [pc, #280]	@ (800d484 <RestoreNvmData+0x134>)
 800d36c:	f009 f936 	bl	80165dc <Crc32>
 800d370:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800d372:	4b44      	ldr	r3, [pc, #272]	@ (800d484 <RestoreNvmData+0x134>)
 800d374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d001      	beq.n	800d380 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d37c:	2317      	movs	r3, #23
 800d37e:	e07b      	b.n	800d478 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800d380:	211c      	movs	r1, #28
 800d382:	4841      	ldr	r0, [pc, #260]	@ (800d488 <RestoreNvmData+0x138>)
 800d384:	f009 f92a 	bl	80165dc <Crc32>
 800d388:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800d38a:	4b3e      	ldr	r3, [pc, #248]	@ (800d484 <RestoreNvmData+0x134>)
 800d38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	429a      	cmp	r2, r3
 800d392:	d001      	beq.n	800d398 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d394:	2317      	movs	r3, #23
 800d396:	e06f      	b.n	800d478 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800d398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d39c:	483b      	ldr	r0, [pc, #236]	@ (800d48c <RestoreNvmData+0x13c>)
 800d39e:	f009 f91d 	bl	80165dc <Crc32>
 800d3a2:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800d3a4:	4b37      	ldr	r3, [pc, #220]	@ (800d484 <RestoreNvmData+0x134>)
 800d3a6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d001      	beq.n	800d3b4 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d3b0:	2317      	movs	r3, #23
 800d3b2:	e061      	b.n	800d478 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800d3b4:	21d4      	movs	r1, #212	@ 0xd4
 800d3b6:	4836      	ldr	r0, [pc, #216]	@ (800d490 <RestoreNvmData+0x140>)
 800d3b8:	f009 f910 	bl	80165dc <Crc32>
 800d3bc:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800d3be:	4b31      	ldr	r3, [pc, #196]	@ (800d484 <RestoreNvmData+0x134>)
 800d3c0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d001      	beq.n	800d3ce <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d3ca:	2317      	movs	r3, #23
 800d3cc:	e054      	b.n	800d478 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800d3ce:	2110      	movs	r1, #16
 800d3d0:	4830      	ldr	r0, [pc, #192]	@ (800d494 <RestoreNvmData+0x144>)
 800d3d2:	f009 f903 	bl	80165dc <Crc32>
 800d3d6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800d3d8:	4b2a      	ldr	r3, [pc, #168]	@ (800d484 <RestoreNvmData+0x134>)
 800d3da:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d001      	beq.n	800d3e8 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d3e4:	2317      	movs	r3, #23
 800d3e6:	e047      	b.n	800d478 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800d3e8:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800d3ec:	482a      	ldr	r0, [pc, #168]	@ (800d498 <RestoreNvmData+0x148>)
 800d3ee:	f009 f8f5 	bl	80165dc <Crc32>
 800d3f2:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800d3f4:	4b23      	ldr	r3, [pc, #140]	@ (800d484 <RestoreNvmData+0x134>)
 800d3f6:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d001      	beq.n	800d404 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d400:	2317      	movs	r3, #23
 800d402:	e039      	b.n	800d478 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800d404:	2114      	movs	r1, #20
 800d406:	4825      	ldr	r0, [pc, #148]	@ (800d49c <RestoreNvmData+0x14c>)
 800d408:	f009 f8e8 	bl	80165dc <Crc32>
 800d40c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800d40e:	4b1d      	ldr	r3, [pc, #116]	@ (800d484 <RestoreNvmData+0x134>)
 800d410:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	429a      	cmp	r2, r3
 800d418:	d001      	beq.n	800d41e <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d41a:	2317      	movs	r3, #23
 800d41c:	e02c      	b.n	800d478 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800d41e:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800d422:	4918      	ldr	r1, [pc, #96]	@ (800d484 <RestoreNvmData+0x134>)
 800d424:	481e      	ldr	r0, [pc, #120]	@ (800d4a0 <RestoreNvmData+0x150>)
 800d426:	f009 f884 	bl	8016532 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800d42a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800d42e:	2100      	movs	r1, #0
 800d430:	4814      	ldr	r0, [pc, #80]	@ (800d484 <RestoreNvmData+0x134>)
 800d432:	f009 f8b9 	bl	80165a8 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800d436:	4b12      	ldr	r3, [pc, #72]	@ (800d480 <RestoreNvmData+0x130>)
 800d438:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800d43c:	4b10      	ldr	r3, [pc, #64]	@ (800d480 <RestoreNvmData+0x130>)
 800d43e:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d442:	4b17      	ldr	r3, [pc, #92]	@ (800d4a0 <RestoreNvmData+0x150>)
 800d444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d446:	4a0e      	ldr	r2, [pc, #56]	@ (800d480 <RestoreNvmData+0x130>)
 800d448:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d44c:	4b14      	ldr	r3, [pc, #80]	@ (800d4a0 <RestoreNvmData+0x150>)
 800d44e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800d452:	4b0b      	ldr	r3, [pc, #44]	@ (800d480 <RestoreNvmData+0x130>)
 800d454:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d458:	4b09      	ldr	r3, [pc, #36]	@ (800d480 <RestoreNvmData+0x130>)
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d460:	4b07      	ldr	r3, [pc, #28]	@ (800d480 <RestoreNvmData+0x130>)
 800d462:	2202      	movs	r2, #2
 800d464:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d468:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a4 <RestoreNvmData+0x154>)
 800d46a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d46c:	4a0c      	ldr	r2, [pc, #48]	@ (800d4a0 <RestoreNvmData+0x150>)
 800d46e:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800d472:	4610      	mov	r0, r2
 800d474:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	200009c4 	.word	0x200009c4
 800d484:	200085cc 	.word	0x200085cc
 800d488:	200085f4 	.word	0x200085f4
 800d48c:	20008614 	.word	0x20008614
 800d490:	20008718 	.word	0x20008718
 800d494:	200087f0 	.word	0x200087f0
 800d498:	20008804 	.word	0x20008804
 800d49c:	20008b80 	.word	0x20008b80
 800d4a0:	20008000 	.word	0x20008000
 800d4a4:	08020bac 	.word	0x08020bac

0800d4a8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d002      	beq.n	800d4be <DetermineFrameType+0x16>
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e03b      	b.n	800d53a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	7b1b      	ldrb	r3, [r3, #12]
 800d4c6:	f003 030f 	and.w	r3, r3, #15
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d008      	beq.n	800d4e2 <DetermineFrameType+0x3a>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d003      	beq.n	800d4e2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	e02a      	b.n	800d538 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d103      	bne.n	800d4f4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	701a      	strb	r2, [r3, #0]
 800d4f2:	e021      	b.n	800d538 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7b1b      	ldrb	r3, [r3, #12]
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d108      	bne.n	800d514 <DetermineFrameType+0x6c>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d103      	bne.n	800d514 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2202      	movs	r2, #2
 800d510:	701a      	strb	r2, [r3, #0]
 800d512:	e011      	b.n	800d538 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	7b1b      	ldrb	r3, [r3, #12]
 800d518:	f003 030f 	and.w	r3, r3, #15
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d108      	bne.n	800d534 <DetermineFrameType+0x8c>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2203      	movs	r2, #3
 800d530:	701a      	strb	r2, [r3, #0]
 800d532:	e001      	b.n	800d538 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800d534:	2318      	movs	r3, #24
 800d536:	e000      	b.n	800d53a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	370c      	adds	r7, #12
 800d53e:	46bd      	mov	sp, r7
 800d540:	bc80      	pop	{r7}
 800d542:	4770      	bx	lr

0800d544 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	460a      	mov	r2, r1
 800d54e:	71fb      	strb	r3, [r7, #7]
 800d550:	4613      	mov	r3, r2
 800d552:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 800d554:	79fa      	ldrb	r2, [r7, #7]
 800d556:	79bb      	ldrb	r3, [r7, #6]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d301      	bcc.n	800d560 <CheckRetrans+0x1c>
    {
        return true;
 800d55c:	2301      	movs	r3, #1
 800d55e:	e000      	b.n	800d562 <CheckRetrans+0x1e>
    }
    return false;
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	370c      	adds	r7, #12
 800d566:	46bd      	mov	sp, r7
 800d568:	bc80      	pop	{r7}
 800d56a:	4770      	bx	lr

0800d56c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800d570:	4b12      	ldr	r3, [pc, #72]	@ (800d5bc <CheckRetransUnconfirmedUplink+0x50>)
 800d572:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800d576:	4a12      	ldr	r2, [pc, #72]	@ (800d5c0 <CheckRetransUnconfirmedUplink+0x54>)
 800d578:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800d57c:	4611      	mov	r1, r2
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff ffe0 	bl	800d544 <CheckRetrans>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e014      	b.n	800d5b8 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d58e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5bc <CheckRetransUnconfirmedUplink+0x50>)
 800d590:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800d594:	f003 0302 	and.w	r3, r3, #2
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00b      	beq.n	800d5b6 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d59e:	4b07      	ldr	r3, [pc, #28]	@ (800d5bc <CheckRetransUnconfirmedUplink+0x50>)
 800d5a0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d004      	beq.n	800d5b2 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d5a8:	4b04      	ldr	r3, [pc, #16]	@ (800d5bc <CheckRetransUnconfirmedUplink+0x50>)
 800d5aa:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d101      	bne.n	800d5b6 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e000      	b.n	800d5b8 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	200009c4 	.word	0x200009c4
 800d5c0:	20008000 	.word	0x20008000

0800d5c4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800d5c8:	4b10      	ldr	r3, [pc, #64]	@ (800d60c <CheckRetransConfirmedUplink+0x48>)
 800d5ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800d5ce:	4a10      	ldr	r2, [pc, #64]	@ (800d610 <CheckRetransConfirmedUplink+0x4c>)
 800d5d0:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff ffb4 	bl	800d544 <CheckRetrans>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e00f      	b.n	800d606 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d5e6:	4b09      	ldr	r3, [pc, #36]	@ (800d60c <CheckRetransConfirmedUplink+0x48>)
 800d5e8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800d5ec:	f003 0302 	and.w	r3, r3, #2
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d006      	beq.n	800d604 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d5f6:	4b05      	ldr	r3, [pc, #20]	@ (800d60c <CheckRetransConfirmedUplink+0x48>)
 800d5f8:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d001      	beq.n	800d604 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 800d600:	2301      	movs	r3, #1
 800d602:	e000      	b.n	800d606 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	200009c4 	.word	0x200009c4
 800d610:	20008000 	.word	0x20008000

0800d614 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d622:	d002      	beq.n	800d62a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	3301      	adds	r3, #1
 800d628:	607b      	str	r3, [r7, #4]
    }
    return counter;
 800d62a:	687b      	ldr	r3, [r7, #4]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	bc80      	pop	{r7}
 800d634:	4770      	bx	lr
	...

0800d638 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800d63c:	4b1a      	ldr	r3, [pc, #104]	@ (800d6a8 <StopRetransmission+0x70>)
 800d63e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800d642:	f003 0302 	and.w	r3, r3, #2
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d009      	beq.n	800d660 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800d64c:	4b16      	ldr	r3, [pc, #88]	@ (800d6a8 <StopRetransmission+0x70>)
 800d64e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800d652:	2b00      	cmp	r3, #0
 800d654:	d011      	beq.n	800d67a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800d656:	4b14      	ldr	r3, [pc, #80]	@ (800d6a8 <StopRetransmission+0x70>)
 800d658:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d00c      	beq.n	800d67a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800d660:	4b12      	ldr	r3, [pc, #72]	@ (800d6ac <StopRetransmission+0x74>)
 800d662:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800d666:	2b00      	cmp	r3, #0
 800d668:	d007      	beq.n	800d67a <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800d66a:	4b10      	ldr	r3, [pc, #64]	@ (800d6ac <StopRetransmission+0x74>)
 800d66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff ffd0 	bl	800d614 <IncreaseAdrAckCounter>
 800d674:	4603      	mov	r3, r0
 800d676:	4a0d      	ldr	r2, [pc, #52]	@ (800d6ac <StopRetransmission+0x74>)
 800d678:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800d67a:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a8 <StopRetransmission+0x70>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 800d682:	4b09      	ldr	r3, [pc, #36]	@ (800d6a8 <StopRetransmission+0x70>)
 800d684:	2200      	movs	r2, #0
 800d686:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800d68a:	4b07      	ldr	r3, [pc, #28]	@ (800d6a8 <StopRetransmission+0x70>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d692:	4b05      	ldr	r3, [pc, #20]	@ (800d6a8 <StopRetransmission+0x70>)
 800d694:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d698:	f023 0302 	bic.w	r3, r3, #2
 800d69c:	4a02      	ldr	r2, [pc, #8]	@ (800d6a8 <StopRetransmission+0x70>)
 800d69e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800d6a2:	2301      	movs	r3, #1
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	200009c4 	.word	0x200009c4
 800d6ac:	20008000 	.word	0x20008000

0800d6b0 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d6b4:	4b08      	ldr	r3, [pc, #32]	@ (800d6d8 <OnMacProcessNotify+0x28>)
 800d6b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00a      	beq.n	800d6d4 <OnMacProcessNotify+0x24>
 800d6be:	4b06      	ldr	r3, [pc, #24]	@ (800d6d8 <OnMacProcessNotify+0x28>)
 800d6c0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d004      	beq.n	800d6d4 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d6ca:	4b03      	ldr	r3, [pc, #12]	@ (800d6d8 <OnMacProcessNotify+0x28>)
 800d6cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6d0:	695b      	ldr	r3, [r3, #20]
 800d6d2:	4798      	blx	r3
    }
}
 800d6d4:	bf00      	nop
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	200009c4 	.word	0x200009c4

0800d6dc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800d6e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d714 <CallNvmDataChangeCallback+0x38>)
 800d6e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00c      	beq.n	800d70a <CallNvmDataChangeCallback+0x2e>
 800d6f0:	4b08      	ldr	r3, [pc, #32]	@ (800d714 <CallNvmDataChangeCallback+0x38>)
 800d6f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d006      	beq.n	800d70a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800d6fc:	4b05      	ldr	r3, [pc, #20]	@ (800d714 <CallNvmDataChangeCallback+0x38>)
 800d6fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	88fa      	ldrh	r2, [r7, #6]
 800d706:	4610      	mov	r0, r2
 800d708:	4798      	blx	r3
    }
}
 800d70a:	bf00      	nop
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	200009c4 	.word	0x200009c4

0800d718 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 800d718:	b480      	push	{r7}
 800d71a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800d71c:	4b0b      	ldr	r3, [pc, #44]	@ (800d74c <IsRequestPending+0x34>)
 800d71e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800d722:	f003 0304 	and.w	r3, r3, #4
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d107      	bne.n	800d73c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800d72c:	4b07      	ldr	r3, [pc, #28]	@ (800d74c <IsRequestPending+0x34>)
 800d72e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <IsRequestPending+0x28>
    {
        return 1;
 800d73c:	2301      	movs	r3, #1
 800d73e:	e000      	b.n	800d742 <IsRequestPending+0x2a>
    }
    return 0;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	46bd      	mov	sp, r7
 800d746:	bc80      	pop	{r7}
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	200009c4 	.word	0x200009c4

0800d750 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d750:	b590      	push	{r4, r7, lr}
 800d752:	b091      	sub	sp, #68	@ 0x44
 800d754:	af02      	add	r7, sp, #8
 800d756:	6178      	str	r0, [r7, #20]
 800d758:	6139      	str	r1, [r7, #16]
 800d75a:	4613      	mov	r3, r2
 800d75c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d002      	beq.n	800d76a <LoRaMacInitialization+0x1a>
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d101      	bne.n	800d76e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d76a:	2303      	movs	r3, #3
 800d76c:	e27a      	b.n	800dc64 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00b      	beq.n	800d78e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d007      	beq.n	800d78e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d78e:	2303      	movs	r3, #3
 800d790:	e268      	b.n	800dc64 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	4618      	mov	r0, r3
 800d796:	f003 fc19 	bl	8010fcc <RegionIsActive>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f083 0301 	eor.w	r3, r3, #1
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d7a6:	2309      	movs	r3, #9
 800d7a8:	e25c      	b.n	800dc64 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800d7aa:	6978      	ldr	r0, [r7, #20]
 800d7ac:	f002 f8ac 	bl	800f908 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800d7b0:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	48c7      	ldr	r0, [pc, #796]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d7b8:	f008 fef6 	bl	80165a8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d7bc:	f240 521c 	movw	r2, #1308	@ 0x51c
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	48c5      	ldr	r0, [pc, #788]	@ (800dad8 <LoRaMacInitialization+0x388>)
 800d7c4:	f008 fef0 	bl	80165a8 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800d7c8:	4ac2      	ldr	r2, [pc, #776]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800d7d0:	4bc0      	ldr	r3, [pc, #768]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800d7d8:	4bbe      	ldr	r3, [pc, #760]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800d7e0:	4bbc      	ldr	r3, [pc, #752]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d7e2:	4abe      	ldr	r2, [pc, #760]	@ (800dadc <LoRaMacInitialization+0x38c>)
 800d7e4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d7ee:	4bbc      	ldr	r3, [pc, #752]	@ (800dae0 <LoRaMacInitialization+0x390>)
 800d7f0:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d7f2:	4bbc      	ldr	r3, [pc, #752]	@ (800dae4 <LoRaMacInitialization+0x394>)
 800d7f4:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 800d7f6:	4bbc      	ldr	r3, [pc, #752]	@ (800dae8 <LoRaMacInitialization+0x398>)
 800d7f8:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d7fa:	4bb6      	ldr	r3, [pc, #728]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d7fc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d800:	f107 021c 	add.w	r2, r7, #28
 800d804:	4611      	mov	r1, r2
 800d806:	4618      	mov	r0, r3
 800d808:	f003 fc2c 	bl	8011064 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d80c:	230f      	movs	r3, #15
 800d80e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d812:	4bb0      	ldr	r3, [pc, #704]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d814:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d818:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f003 fbe9 	bl	8010ff6 <RegionGetPhyParam>
 800d824:	4603      	mov	r3, r0
 800d826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800d828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	bf14      	ite	ne
 800d82e:	2301      	movne	r3, #1
 800d830:	2300      	moveq	r3, #0
 800d832:	b2da      	uxtb	r2, r3
 800d834:	4ba7      	ldr	r3, [pc, #668]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d836:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d83a:	230a      	movs	r3, #10
 800d83c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d840:	4ba4      	ldr	r3, [pc, #656]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d842:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d846:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f003 fbd2 	bl	8010ff6 <RegionGetPhyParam>
 800d852:	4603      	mov	r3, r0
 800d854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800d856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d858:	b25a      	sxtb	r2, r3
 800d85a:	4b9e      	ldr	r3, [pc, #632]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d85c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d860:	2306      	movs	r3, #6
 800d862:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d866:	4b9b      	ldr	r3, [pc, #620]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d868:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d86c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d870:	4611      	mov	r1, r2
 800d872:	4618      	mov	r0, r3
 800d874:	f003 fbbf 	bl	8010ff6 <RegionGetPhyParam>
 800d878:	4603      	mov	r3, r0
 800d87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800d87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87e:	b25a      	sxtb	r2, r3
 800d880:	4b94      	ldr	r3, [pc, #592]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d882:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d886:	2310      	movs	r3, #16
 800d888:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d88c:	4b91      	ldr	r3, [pc, #580]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d88e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d892:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f003 fbac 	bl	8010ff6 <RegionGetPhyParam>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a4:	4a8b      	ldr	r2, [pc, #556]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d8a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d8aa:	2311      	movs	r3, #17
 800d8ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8b0:	4b88      	ldr	r3, [pc, #544]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d8b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d8b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f003 fb9a 	bl	8010ff6 <RegionGetPhyParam>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c8:	4a82      	ldr	r2, [pc, #520]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d8ca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d8ce:	2312      	movs	r3, #18
 800d8d0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8d4:	4b7f      	ldr	r3, [pc, #508]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d8d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d8da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d8de:	4611      	mov	r1, r2
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f003 fb88 	bl	8010ff6 <RegionGetPhyParam>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	4a79      	ldr	r2, [pc, #484]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d8ee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d8f2:	2313      	movs	r3, #19
 800d8f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8f8:	4b76      	ldr	r3, [pc, #472]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d8fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d8fe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d902:	4611      	mov	r1, r2
 800d904:	4618      	mov	r0, r3
 800d906:	f003 fb76 	bl	8010ff6 <RegionGetPhyParam>
 800d90a:	4603      	mov	r3, r0
 800d90c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	4a70      	ldr	r2, [pc, #448]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d912:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d916:	2314      	movs	r3, #20
 800d918:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d91c:	4b6d      	ldr	r3, [pc, #436]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d91e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d922:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d926:	4611      	mov	r1, r2
 800d928:	4618      	mov	r0, r3
 800d92a:	f003 fb64 	bl	8010ff6 <RegionGetPhyParam>
 800d92e:	4603      	mov	r3, r0
 800d930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d934:	4a67      	ldr	r2, [pc, #412]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d936:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d93a:	2316      	movs	r3, #22
 800d93c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d940:	4b64      	ldr	r3, [pc, #400]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d942:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d946:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f003 fb52 	bl	8010ff6 <RegionGetPhyParam>
 800d952:	4603      	mov	r3, r0
 800d954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800d956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	4b5e      	ldr	r3, [pc, #376]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d95c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800d960:	2317      	movs	r3, #23
 800d962:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d966:	4b5b      	ldr	r3, [pc, #364]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d968:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d96c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d970:	4611      	mov	r1, r2
 800d972:	4618      	mov	r0, r3
 800d974:	f003 fb3f 	bl	8010ff6 <RegionGetPhyParam>
 800d978:	4603      	mov	r3, r0
 800d97a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800d97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97e:	4a55      	ldr	r2, [pc, #340]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d980:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800d984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d986:	4a53      	ldr	r2, [pc, #332]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d988:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800d98c:	2318      	movs	r3, #24
 800d98e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d992:	4b50      	ldr	r3, [pc, #320]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d994:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d998:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f003 fb29 	bl	8010ff6 <RegionGetPhyParam>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800d9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	4b49      	ldr	r3, [pc, #292]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d9ae:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800d9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	4b47      	ldr	r3, [pc, #284]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d9b8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800d9bc:	231d      	movs	r3, #29
 800d9be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9c2:	4b44      	ldr	r3, [pc, #272]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d9c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d9c8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f003 fb11 	bl	8010ff6 <RegionGetPhyParam>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800d9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	4b3d      	ldr	r3, [pc, #244]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d9de:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800d9e2:	231e      	movs	r3, #30
 800d9e4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9e8:	4b3a      	ldr	r3, [pc, #232]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800d9ea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d9ee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f003 fafe 	bl	8010ff6 <RegionGetPhyParam>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800d9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da00:	b2da      	uxtb	r2, r3
 800da02:	4b34      	ldr	r3, [pc, #208]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da04:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800da08:	231f      	movs	r3, #31
 800da0a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da0e:	4b31      	ldr	r3, [pc, #196]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da10:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da14:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800da18:	4611      	mov	r1, r2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f003 faeb 	bl	8010ff6 <RegionGetPhyParam>
 800da20:	4603      	mov	r3, r0
 800da22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800da24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da26:	4a2b      	ldr	r2, [pc, #172]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da28:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800da2c:	2320      	movs	r3, #32
 800da2e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da32:	4b28      	ldr	r3, [pc, #160]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da34:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da38:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800da3c:	4611      	mov	r1, r2
 800da3e:	4618      	mov	r0, r3
 800da40:	f003 fad9 	bl	8010ff6 <RegionGetPhyParam>
 800da44:	4603      	mov	r3, r0
 800da46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800da48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da4a:	4a22      	ldr	r2, [pc, #136]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da4c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800da50:	230b      	movs	r3, #11
 800da52:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da56:	4b1f      	ldr	r3, [pc, #124]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da58:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da5c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800da60:	4611      	mov	r1, r2
 800da62:	4618      	mov	r0, r3
 800da64:	f003 fac7 	bl	8010ff6 <RegionGetPhyParam>
 800da68:	4603      	mov	r3, r0
 800da6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800da6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da6e:	b29a      	uxth	r2, r3
 800da70:	4b18      	ldr	r3, [pc, #96]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da72:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800da76:	230c      	movs	r3, #12
 800da78:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da7c:	4b15      	ldr	r3, [pc, #84]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da7e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da82:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800da86:	4611      	mov	r1, r2
 800da88:	4618      	mov	r0, r3
 800da8a:	f003 fab4 	bl	8010ff6 <RegionGetPhyParam>
 800da8e:	4603      	mov	r3, r0
 800da90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800da92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da94:	b29a      	uxth	r2, r3
 800da96:	4b0f      	ldr	r3, [pc, #60]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da98:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800da9c:	4b0d      	ldr	r3, [pc, #52]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800daa4:	4b0b      	ldr	r3, [pc, #44]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800daa6:	220a      	movs	r2, #10
 800daa8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800daac:	4b09      	ldr	r3, [pc, #36]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800daae:	2206      	movs	r2, #6
 800dab0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800dab4:	4b07      	ldr	r3, [pc, #28]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800dab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800daba:	4a06      	ldr	r2, [pc, #24]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800dabc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800dabe:	4b05      	ldr	r3, [pc, #20]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800dac0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800dac4:	4b03      	ldr	r3, [pc, #12]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800dac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800daca:	4b02      	ldr	r3, [pc, #8]	@ (800dad4 <LoRaMacInitialization+0x384>)
 800dacc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dad0:	e00c      	b.n	800daec <LoRaMacInitialization+0x39c>
 800dad2:	bf00      	nop
 800dad4:	20008000 	.word	0x20008000
 800dad8:	200009c4 	.word	0x200009c4
 800dadc:	01000400 	.word	0x01000400
 800dae0:	20008224 	.word	0x20008224
 800dae4:	20008238 	.word	0x20008238
 800dae8:	20000ee0 	.word	0x20000ee0
 800daec:	4a5f      	ldr	r2, [pc, #380]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800daee:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800daf0:	4b5e      	ldr	r3, [pc, #376]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800daf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800daf6:	4a5d      	ldr	r2, [pc, #372]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800daf8:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800dafa:	4b5c      	ldr	r3, [pc, #368]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800dafc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db00:	4a5a      	ldr	r2, [pc, #360]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db02:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800db04:	4b59      	ldr	r3, [pc, #356]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db0a:	4a58      	ldr	r2, [pc, #352]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db0c:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800db0e:	4b57      	ldr	r3, [pc, #348]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800db14:	4a55      	ldr	r2, [pc, #340]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db16:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800db18:	4b54      	ldr	r3, [pc, #336]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db1a:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 800db1e:	4b53      	ldr	r3, [pc, #332]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800db24:	4b51      	ldr	r3, [pc, #324]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db26:	2201      	movs	r2, #1
 800db28:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800db2c:	4a50      	ldr	r2, [pc, #320]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 800db34:	2000      	movs	r0, #0
 800db36:	f7ff f86b 	bl	800cc10 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800db3a:	4b4c      	ldr	r3, [pc, #304]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800db42:	4a4b      	ldr	r2, [pc, #300]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800db4a:	4b49      	ldr	r3, [pc, #292]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800db52:	4b47      	ldr	r3, [pc, #284]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800db54:	2201      	movs	r2, #1
 800db56:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800db5a:	4b44      	ldr	r3, [pc, #272]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800db60:	4b42      	ldr	r3, [pc, #264]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800db62:	2200      	movs	r2, #0
 800db64:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800db66:	2300      	movs	r3, #0
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	4b42      	ldr	r3, [pc, #264]	@ (800dc74 <LoRaMacInitialization+0x524>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	f04f 31ff 	mov.w	r1, #4294967295
 800db72:	4841      	ldr	r0, [pc, #260]	@ (800dc78 <LoRaMacInitialization+0x528>)
 800db74:	f00c f878 	bl	8019c68 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800db78:	2300      	movs	r3, #0
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	4b3f      	ldr	r3, [pc, #252]	@ (800dc7c <LoRaMacInitialization+0x52c>)
 800db7e:	2200      	movs	r2, #0
 800db80:	f04f 31ff 	mov.w	r1, #4294967295
 800db84:	483e      	ldr	r0, [pc, #248]	@ (800dc80 <LoRaMacInitialization+0x530>)
 800db86:	f00c f86f 	bl	8019c68 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800db8a:	2300      	movs	r3, #0
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	4b3d      	ldr	r3, [pc, #244]	@ (800dc84 <LoRaMacInitialization+0x534>)
 800db90:	2200      	movs	r2, #0
 800db92:	f04f 31ff 	mov.w	r1, #4294967295
 800db96:	483c      	ldr	r0, [pc, #240]	@ (800dc88 <LoRaMacInitialization+0x538>)
 800db98:	f00c f866 	bl	8019c68 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800db9c:	2300      	movs	r3, #0
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	4b3a      	ldr	r3, [pc, #232]	@ (800dc8c <LoRaMacInitialization+0x53c>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	f04f 31ff 	mov.w	r1, #4294967295
 800dba8:	4839      	ldr	r0, [pc, #228]	@ (800dc90 <LoRaMacInitialization+0x540>)
 800dbaa:	f00c f85d 	bl	8019c68 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800dbae:	4c2f      	ldr	r4, [pc, #188]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800dbb0:	463b      	mov	r3, r7
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f00b ffc2 	bl	8019b3c <SysTimeGetMcuTime>
 800dbb8:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800dbbc:	463a      	mov	r2, r7
 800dbbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbc2:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800dbc6:	4b33      	ldr	r3, [pc, #204]	@ (800dc94 <LoRaMacInitialization+0x544>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800dbcc:	4b28      	ldr	r3, [pc, #160]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800dbce:	4a32      	ldr	r2, [pc, #200]	@ (800dc98 <LoRaMacInitialization+0x548>)
 800dbd0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800dbd4:	4b26      	ldr	r3, [pc, #152]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800dbd6:	4a31      	ldr	r2, [pc, #196]	@ (800dc9c <LoRaMacInitialization+0x54c>)
 800dbd8:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800dbdc:	4b24      	ldr	r3, [pc, #144]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800dbde:	4a30      	ldr	r2, [pc, #192]	@ (800dca0 <LoRaMacInitialization+0x550>)
 800dbe0:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800dbe4:	4b22      	ldr	r3, [pc, #136]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800dbe6:	4a2f      	ldr	r2, [pc, #188]	@ (800dca4 <LoRaMacInitialization+0x554>)
 800dbe8:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800dbec:	4b20      	ldr	r3, [pc, #128]	@ (800dc70 <LoRaMacInitialization+0x520>)
 800dbee:	4a2e      	ldr	r2, [pc, #184]	@ (800dca8 <LoRaMacInitialization+0x558>)
 800dbf0:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800dbf4:	4b2d      	ldr	r3, [pc, #180]	@ (800dcac <LoRaMacInitialization+0x55c>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	482d      	ldr	r0, [pc, #180]	@ (800dcb0 <LoRaMacInitialization+0x560>)
 800dbfa:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800dbfc:	482d      	ldr	r0, [pc, #180]	@ (800dcb4 <LoRaMacInitialization+0x564>)
 800dbfe:	f008 f90f 	bl	8015e20 <SecureElementInit>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc08:	2311      	movs	r3, #17
 800dc0a:	e02b      	b.n	800dc64 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800dc0c:	4817      	ldr	r0, [pc, #92]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800dc0e:	f002 fb37 	bl	8010280 <LoRaMacCryptoInit>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d001      	beq.n	800dc1c <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc18:	2311      	movs	r3, #17
 800dc1a:	e023      	b.n	800dc64 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800dc1c:	f001 fc36 	bl	800f48c <LoRaMacCommandsInit>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d001      	beq.n	800dc2a <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dc26:	2313      	movs	r3, #19
 800dc28:	e01c      	b.n	800dc64 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800dc2a:	4823      	ldr	r0, [pc, #140]	@ (800dcb8 <LoRaMacInitialization+0x568>)
 800dc2c:	f002 fbc8 	bl	80103c0 <LoRaMacCryptoSetMulticastReference>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc36:	2311      	movs	r3, #17
 800dc38:	e014      	b.n	800dc64 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800dc3a:	4b1c      	ldr	r3, [pc, #112]	@ (800dcac <LoRaMacInitialization+0x55c>)
 800dc3c:	695b      	ldr	r3, [r3, #20]
 800dc3e:	4798      	blx	r3
 800dc40:	4603      	mov	r3, r0
 800dc42:	4618      	mov	r0, r3
 800dc44:	f008 fc50 	bl	80164e8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800dc48:	4b18      	ldr	r3, [pc, #96]	@ (800dcac <LoRaMacInitialization+0x55c>)
 800dc4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc4c:	4a07      	ldr	r2, [pc, #28]	@ (800dc6c <LoRaMacInitialization+0x51c>)
 800dc4e:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800dc52:	4610      	mov	r0, r2
 800dc54:	4798      	blx	r3
    Radio.Sleep( );
 800dc56:	4b15      	ldr	r3, [pc, #84]	@ (800dcac <LoRaMacInitialization+0x55c>)
 800dc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	f7fd fa71 	bl	800b144 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	373c      	adds	r7, #60	@ 0x3c
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd90      	pop	{r4, r7, pc}
 800dc6c:	20008000 	.word	0x20008000
 800dc70:	200009c4 	.word	0x200009c4
 800dc74:	0800b6d1 	.word	0x0800b6d1
 800dc78:	20000d2c 	.word	0x20000d2c
 800dc7c:	0800b761 	.word	0x0800b761
 800dc80:	20000d44 	.word	0x20000d44
 800dc84:	0800b7d9 	.word	0x0800b7d9
 800dc88:	20000d5c 	.word	0x20000d5c
 800dc8c:	0800b859 	.word	0x0800b859
 800dc90:	20000dc4 	.word	0x20000dc4
 800dc94:	20000f70 	.word	0x20000f70
 800dc98:	0800a169 	.word	0x0800a169
 800dc9c:	0800a1b5 	.word	0x0800a1b5
 800dca0:	0800a255 	.word	0x0800a255
 800dca4:	0800a229 	.word	0x0800a229
 800dca8:	0800a271 	.word	0x0800a271
 800dcac:	08020bac 	.word	0x08020bac
 800dcb0:	20000d10 	.word	0x20000d10
 800dcb4:	2000814c 	.word	0x2000814c
 800dcb8:	200080e8 	.word	0x200080e8

0800dcbc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800dcc0:	4b04      	ldr	r3, [pc, #16]	@ (800dcd4 <LoRaMacStart+0x18>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800dcc8:	f7fc fae8 	bl	800a29c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	200009c4 	.word	0x200009c4

0800dcd8 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800dcd8:	b590      	push	{r4, r7, lr}
 800dcda:	b08d      	sub	sp, #52	@ 0x34
 800dcdc:	af02      	add	r7, sp, #8
 800dcde:	4603      	mov	r3, r0
 800dce0:	6039      	str	r1, [r7, #0]
 800dce2:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800dce4:	4b42      	ldr	r3, [pc, #264]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce8:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800dcea:	4b41      	ldr	r3, [pc, #260]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dcec:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800dcf0:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800dcf2:	4b3f      	ldr	r3, [pc, #252]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dcf4:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800dcf8:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800dcfa:	4b3e      	ldr	r3, [pc, #248]	@ (800ddf4 <LoRaMacQueryTxPossible+0x11c>)
 800dcfc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800dd00:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	e06b      	b.n	800dde8 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800dd10:	2300      	movs	r3, #0
 800dd12:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800dd14:	4b36      	ldr	r3, [pc, #216]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd16:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800dd1a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800dd1c:	4b34      	ldr	r3, [pc, #208]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd20:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800dd22:	4b33      	ldr	r3, [pc, #204]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd24:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800dd28:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800dd2a:	4b31      	ldr	r3, [pc, #196]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd2c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800dd30:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dd32:	4b2f      	ldr	r3, [pc, #188]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd34:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800dd38:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800dd3c:	4b2c      	ldr	r3, [pc, #176]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd3e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800dd42:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800dd46:	4b2b      	ldr	r3, [pc, #172]	@ (800ddf4 <LoRaMacQueryTxPossible+0x11c>)
 800dd48:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800dd4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800dd50:	4b27      	ldr	r3, [pc, #156]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd52:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800dd56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800dd5a:	4b25      	ldr	r3, [pc, #148]	@ (800ddf0 <LoRaMacQueryTxPossible+0x118>)
 800dd5c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dd60:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800dd64:	f107 040d 	add.w	r4, r7, #13
 800dd68:	f107 020e 	add.w	r2, r7, #14
 800dd6c:	f107 010f 	add.w	r1, r7, #15
 800dd70:	f107 0014 	add.w	r0, r7, #20
 800dd74:	f107 0310 	add.w	r3, r7, #16
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	4623      	mov	r3, r4
 800dd7c:	f001 f8b4 	bl	800eee8 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800dd80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fd fead 	bl	800bae4 <GetMaxAppPayloadWithoutFOptsLength>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800dd92:	f107 0308 	add.w	r3, r7, #8
 800dd96:	4618      	mov	r0, r3
 800dd98:	f001 fc7e 	bl	800f698 <LoRaMacCommandsGetSizeSerializedCmds>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dda2:	2313      	movs	r3, #19
 800dda4:	e020      	b.n	800dde8 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b0f      	cmp	r3, #15
 800ddaa:	d819      	bhi.n	800dde0 <LoRaMacQueryTxPossible+0x108>
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	785b      	ldrb	r3, [r3, #1]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d313      	bcc.n	800dde0 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	785a      	ldrb	r2, [r3, #1]
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	785b      	ldrb	r3, [r3, #1]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	79fa      	ldrb	r2, [r7, #7]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	4299      	cmp	r1, r3
 800ddd6:	d301      	bcc.n	800dddc <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	e005      	b.n	800dde8 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800dddc:	2308      	movs	r3, #8
 800ddde:	e003      	b.n	800dde8 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	2200      	movs	r2, #0
 800dde4:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800dde6:	2308      	movs	r3, #8
    }
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	372c      	adds	r7, #44	@ 0x2c
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd90      	pop	{r4, r7, pc}
 800ddf0:	20008000 	.word	0x20008000
 800ddf4:	200009c4 	.word	0x200009c4

0800ddf8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800ddf8:	b590      	push	{r4, r7, lr}
 800ddfa:	b087      	sub	sp, #28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d101      	bne.n	800de0e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800de0a:	2303      	movs	r3, #3
 800de0c:	e1c4      	b.n	800e198 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b41      	cmp	r3, #65	@ 0x41
 800de14:	f200 81b9 	bhi.w	800e18a <LoRaMacMibGetRequestConfirm+0x392>
 800de18:	a201      	add	r2, pc, #4	@ (adr r2, 800de20 <LoRaMacMibGetRequestConfirm+0x28>)
 800de1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1e:	bf00      	nop
 800de20:	0800df29 	.word	0x0800df29
 800de24:	0800df35 	.word	0x0800df35
 800de28:	0800df41 	.word	0x0800df41
 800de2c:	0800df4d 	.word	0x0800df4d
 800de30:	0800df59 	.word	0x0800df59
 800de34:	0800df65 	.word	0x0800df65
 800de38:	0800df71 	.word	0x0800df71
 800de3c:	0800e18b 	.word	0x0800e18b
 800de40:	0800e18b 	.word	0x0800e18b
 800de44:	0800e18b 	.word	0x0800e18b
 800de48:	0800e18b 	.word	0x0800e18b
 800de4c:	0800e18b 	.word	0x0800e18b
 800de50:	0800e18b 	.word	0x0800e18b
 800de54:	0800e18b 	.word	0x0800e18b
 800de58:	0800e18b 	.word	0x0800e18b
 800de5c:	0800df85 	.word	0x0800df85
 800de60:	0800df91 	.word	0x0800df91
 800de64:	0800df9d 	.word	0x0800df9d
 800de68:	0800dfbf 	.word	0x0800dfbf
 800de6c:	0800dfd1 	.word	0x0800dfd1
 800de70:	0800dfe3 	.word	0x0800dfe3
 800de74:	0800dff5 	.word	0x0800dff5
 800de78:	0800e029 	.word	0x0800e029
 800de7c:	0800e007 	.word	0x0800e007
 800de80:	0800e04b 	.word	0x0800e04b
 800de84:	0800e057 	.word	0x0800e057
 800de88:	0800e061 	.word	0x0800e061
 800de8c:	0800e06b 	.word	0x0800e06b
 800de90:	0800e075 	.word	0x0800e075
 800de94:	0800e07f 	.word	0x0800e07f
 800de98:	0800e089 	.word	0x0800e089
 800de9c:	0800e0b5 	.word	0x0800e0b5
 800dea0:	0800e0c1 	.word	0x0800e0c1
 800dea4:	0800e0d9 	.word	0x0800e0d9
 800dea8:	0800e0cd 	.word	0x0800e0cd
 800deac:	0800e0e5 	.word	0x0800e0e5
 800deb0:	0800e0ef 	.word	0x0800e0ef
 800deb4:	0800e0fb 	.word	0x0800e0fb
 800deb8:	0800e117 	.word	0x0800e117
 800debc:	0800e107 	.word	0x0800e107
 800dec0:	0800e10f 	.word	0x0800e10f
 800dec4:	0800e18b 	.word	0x0800e18b
 800dec8:	0800e123 	.word	0x0800e123
 800decc:	0800e18b 	.word	0x0800e18b
 800ded0:	0800e18b 	.word	0x0800e18b
 800ded4:	0800e18b 	.word	0x0800e18b
 800ded8:	0800e18b 	.word	0x0800e18b
 800dedc:	0800e18b 	.word	0x0800e18b
 800dee0:	0800e18b 	.word	0x0800e18b
 800dee4:	0800e18b 	.word	0x0800e18b
 800dee8:	0800e18b 	.word	0x0800e18b
 800deec:	0800e18b 	.word	0x0800e18b
 800def0:	0800e18b 	.word	0x0800e18b
 800def4:	0800e18b 	.word	0x0800e18b
 800def8:	0800e18b 	.word	0x0800e18b
 800defc:	0800e18b 	.word	0x0800e18b
 800df00:	0800e18b 	.word	0x0800e18b
 800df04:	0800e18b 	.word	0x0800e18b
 800df08:	0800e137 	.word	0x0800e137
 800df0c:	0800e143 	.word	0x0800e143
 800df10:	0800e14f 	.word	0x0800e14f
 800df14:	0800e15b 	.word	0x0800e15b
 800df18:	0800e167 	.word	0x0800e167
 800df1c:	0800e173 	.word	0x0800e173
 800df20:	0800e17f 	.word	0x0800e17f
 800df24:	0800e185 	.word	0x0800e185
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800df28:	4b9d      	ldr	r3, [pc, #628]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800df2a:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	711a      	strb	r2, [r3, #4]
            break;
 800df32:	e130      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800df34:	4b9a      	ldr	r3, [pc, #616]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800df36:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	711a      	strb	r2, [r3, #4]
            break;
 800df3e:	e12a      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	f008 fa29 	bl	801639c <SecureElementGetDevEui>
            break;
 800df4a:	e124      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	4618      	mov	r0, r3
 800df52:	f008 fa6d 	bl	8016430 <SecureElementGetJoinEui>
            break;
 800df56:	e11e      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800df58:	4b91      	ldr	r3, [pc, #580]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800df5a:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	711a      	strb	r2, [r3, #4]
            break;
 800df62:	e118      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800df64:	4b8e      	ldr	r3, [pc, #568]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800df66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	605a      	str	r2, [r3, #4]
            break;
 800df6e:	e112      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800df70:	4b8b      	ldr	r3, [pc, #556]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800df72:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	3304      	adds	r3, #4
 800df7a:	4619      	mov	r1, r3
 800df7c:	4610      	mov	r0, r2
 800df7e:	f008 fa6f 	bl	8016460 <SecureElementGetDevAddr>
            break;
 800df82:	e108      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800df84:	4b86      	ldr	r3, [pc, #536]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800df86:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	711a      	strb	r2, [r3, #4]
            break;
 800df8e:	e102      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800df90:	4b83      	ldr	r3, [pc, #524]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800df92:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	711a      	strb	r2, [r3, #4]
            break;
 800df9a:	e0fc      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800df9c:	231c      	movs	r3, #28
 800df9e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dfa0:	4b7f      	ldr	r3, [pc, #508]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800dfa2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dfa6:	f107 0210 	add.w	r2, r7, #16
 800dfaa:	4611      	mov	r1, r2
 800dfac:	4618      	mov	r0, r3
 800dfae:	f003 f822 	bl	8010ff6 <RegionGetPhyParam>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	605a      	str	r2, [r3, #4]
            break;
 800dfbc:	e0eb      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a77      	ldr	r2, [pc, #476]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	326c      	adds	r2, #108	@ 0x6c
 800dfc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800dfce:	e0e2      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a73      	ldr	r2, [pc, #460]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	32b4      	adds	r2, #180	@ 0xb4
 800dfd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfdc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800dfe0:	e0d9      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4a6e      	ldr	r2, [pc, #440]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	3274      	adds	r2, #116	@ 0x74
 800dfea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfee:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800dff2:	e0d0      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a6a      	ldr	r2, [pc, #424]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800dff8:	3304      	adds	r3, #4
 800dffa:	32bc      	adds	r2, #188	@ 0xbc
 800dffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e000:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e004:	e0c7      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e006:	231a      	movs	r3, #26
 800e008:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e00a:	4b65      	ldr	r3, [pc, #404]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e00c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e010:	f107 0210 	add.w	r2, r7, #16
 800e014:	4611      	mov	r1, r2
 800e016:	4618      	mov	r0, r3
 800e018:	f002 ffed 	bl	8010ff6 <RegionGetPhyParam>
 800e01c:	4603      	mov	r3, r0
 800e01e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	605a      	str	r2, [r3, #4]
            break;
 800e026:	e0b6      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800e028:	2319      	movs	r3, #25
 800e02a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e02c:	4b5c      	ldr	r3, [pc, #368]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e02e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e032:	f107 0210 	add.w	r2, r7, #16
 800e036:	4611      	mov	r1, r2
 800e038:	4618      	mov	r0, r3
 800e03a:	f002 ffdc 	bl	8010ff6 <RegionGetPhyParam>
 800e03e:	4603      	mov	r3, r0
 800e040:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	605a      	str	r2, [r3, #4]
            break;
 800e048:	e0a5      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e04a:	4b55      	ldr	r3, [pc, #340]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e04c:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	711a      	strb	r2, [r3, #4]
            break;
 800e054:	e09f      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800e056:	4b52      	ldr	r3, [pc, #328]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e058:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	605a      	str	r2, [r3, #4]
            break;
 800e05e:	e09a      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800e060:	4b4f      	ldr	r3, [pc, #316]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e062:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	605a      	str	r2, [r3, #4]
            break;
 800e068:	e095      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800e06a:	4b4d      	ldr	r3, [pc, #308]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e06c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	605a      	str	r2, [r3, #4]
            break;
 800e072:	e090      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800e074:	4b4a      	ldr	r3, [pc, #296]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e076:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	605a      	str	r2, [r3, #4]
            break;
 800e07c:	e08b      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800e07e:	4b48      	ldr	r3, [pc, #288]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e080:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	605a      	str	r2, [r3, #4]
            break;
 800e086:	e086      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800e088:	2302      	movs	r3, #2
 800e08a:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e08c:	4b44      	ldr	r3, [pc, #272]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e08e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e092:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e094:	4b42      	ldr	r3, [pc, #264]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e096:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e09a:	f107 0210 	add.w	r2, r7, #16
 800e09e:	4611      	mov	r1, r2
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f002 ffa8 	bl	8010ff6 <RegionGetPhyParam>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	b25a      	sxtb	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	711a      	strb	r2, [r3, #4]
            break;
 800e0b2:	e070      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e0b4:	4b3a      	ldr	r3, [pc, #232]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e0b6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	711a      	strb	r2, [r3, #4]
            break;
 800e0be:	e06a      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e0c0:	4b37      	ldr	r3, [pc, #220]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e0c2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	711a      	strb	r2, [r3, #4]
            break;
 800e0ca:	e064      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e0cc:	4b34      	ldr	r3, [pc, #208]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e0ce:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	711a      	strb	r2, [r3, #4]
            break;
 800e0d6:	e05e      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e0d8:	4b31      	ldr	r3, [pc, #196]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e0da:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	711a      	strb	r2, [r3, #4]
            break;
 800e0e2:	e058      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800e0e4:	4b2e      	ldr	r3, [pc, #184]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e0e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	605a      	str	r2, [r3, #4]
            break;
 800e0ec:	e053      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800e0ee:	4b2c      	ldr	r3, [pc, #176]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e0f0:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	711a      	strb	r2, [r3, #4]
            break;
 800e0f8:	e04d      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e0fa:	4b29      	ldr	r3, [pc, #164]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e0fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	605a      	str	r2, [r3, #4]
            break;
 800e104:	e047      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4a25      	ldr	r2, [pc, #148]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e10a:	605a      	str	r2, [r3, #4]
            break;
 800e10c:	e043      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4a24      	ldr	r2, [pc, #144]	@ (800e1a4 <LoRaMacMibGetRequestConfirm+0x3ac>)
 800e112:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800e114:	e03f      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e116:	4b22      	ldr	r3, [pc, #136]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e118:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	605a      	str	r2, [r3, #4]
            break;
 800e120:	e039      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a1e      	ldr	r2, [pc, #120]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e126:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 800e12a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800e12c:	687c      	ldr	r4, [r7, #4]
 800e12e:	f003 f96f 	bl	8011410 <RegionGetVersion>
 800e132:	60a0      	str	r0, [r4, #8]
            break;
 800e134:	e02f      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e136:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e138:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	605a      	str	r2, [r3, #4]
            break;
 800e140:	e029      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800e142:	4b17      	ldr	r3, [pc, #92]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e144:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	711a      	strb	r2, [r3, #4]
            break;
 800e14c:	e023      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e14e:	4b14      	ldr	r3, [pc, #80]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e150:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	809a      	strh	r2, [r3, #4]
            break;
 800e158:	e01d      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e15a:	4b11      	ldr	r3, [pc, #68]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e15c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	809a      	strh	r2, [r3, #4]
            break;
 800e164:	e017      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e166:	4b0e      	ldr	r3, [pc, #56]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e168:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	809a      	strh	r2, [r3, #4]
            break;
 800e170:	e011      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e172:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e174:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	809a      	strh	r2, [r3, #4]
            break;
 800e17c:	e00b      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800e17e:	2318      	movs	r3, #24
 800e180:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800e182:	e008      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800e184:	2318      	movs	r3, #24
 800e186:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800e188:	e005      	b.n	800e196 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fff9 	bl	800f182 <LoRaMacClassBMibGetRequestConfirm>
 800e190:	4603      	mov	r3, r0
 800e192:	75fb      	strb	r3, [r7, #23]
            break;
 800e194:	bf00      	nop
        }
    }
    return status;
 800e196:	7dfb      	ldrb	r3, [r7, #23]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	371c      	adds	r7, #28
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd90      	pop	{r4, r7, pc}
 800e1a0:	20008000 	.word	0x20008000
 800e1a4:	200085cc 	.word	0x200085cc

0800e1a8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	e396      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e1be:	4bbd      	ldr	r3, [pc, #756]	@ (800e4b4 <LoRaMacMibSetRequestConfirm+0x30c>)
 800e1c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e38d      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	2b41      	cmp	r3, #65	@ 0x41
 800e1d6:	f200 835d 	bhi.w	800e894 <LoRaMacMibSetRequestConfirm+0x6ec>
 800e1da:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e0 <LoRaMacMibSetRequestConfirm+0x38>)
 800e1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e0:	0800e2e9 	.word	0x0800e2e9
 800e1e4:	0800e2f9 	.word	0x0800e2f9
 800e1e8:	0800e313 	.word	0x0800e313
 800e1ec:	0800e32b 	.word	0x0800e32b
 800e1f0:	0800e343 	.word	0x0800e343
 800e1f4:	0800e34f 	.word	0x0800e34f
 800e1f8:	0800e35b 	.word	0x0800e35b
 800e1fc:	0800e385 	.word	0x0800e385
 800e200:	0800e3ab 	.word	0x0800e3ab
 800e204:	0800e3d1 	.word	0x0800e3d1
 800e208:	0800e3f7 	.word	0x0800e3f7
 800e20c:	0800e41d 	.word	0x0800e41d
 800e210:	0800e443 	.word	0x0800e443
 800e214:	0800e469 	.word	0x0800e469
 800e218:	0800e48f 	.word	0x0800e48f
 800e21c:	0800e4bd 	.word	0x0800e4bd
 800e220:	0800e4dd 	.word	0x0800e4dd
 800e224:	0800e895 	.word	0x0800e895
 800e228:	0800e4e9 	.word	0x0800e4e9
 800e22c:	0800e559 	.word	0x0800e559
 800e230:	0800e599 	.word	0x0800e599
 800e234:	0800e5fb 	.word	0x0800e5fb
 800e238:	0800e66b 	.word	0x0800e66b
 800e23c:	0800e63b 	.word	0x0800e63b
 800e240:	0800e69b 	.word	0x0800e69b
 800e244:	0800e6bd 	.word	0x0800e6bd
 800e248:	0800e6c7 	.word	0x0800e6c7
 800e24c:	0800e6d1 	.word	0x0800e6d1
 800e250:	0800e6db 	.word	0x0800e6db
 800e254:	0800e6e5 	.word	0x0800e6e5
 800e258:	0800e895 	.word	0x0800e895
 800e25c:	0800e6ef 	.word	0x0800e6ef
 800e260:	0800e721 	.word	0x0800e721
 800e264:	0800e795 	.word	0x0800e795
 800e268:	0800e75b 	.word	0x0800e75b
 800e26c:	0800e7c7 	.word	0x0800e7c7
 800e270:	0800e7dd 	.word	0x0800e7dd
 800e274:	0800e7f5 	.word	0x0800e7f5
 800e278:	0800e801 	.word	0x0800e801
 800e27c:	0800e80d 	.word	0x0800e80d
 800e280:	0800e895 	.word	0x0800e895
 800e284:	0800e817 	.word	0x0800e817
 800e288:	0800e895 	.word	0x0800e895
 800e28c:	0800e895 	.word	0x0800e895
 800e290:	0800e895 	.word	0x0800e895
 800e294:	0800e895 	.word	0x0800e895
 800e298:	0800e895 	.word	0x0800e895
 800e29c:	0800e895 	.word	0x0800e895
 800e2a0:	0800e895 	.word	0x0800e895
 800e2a4:	0800e895 	.word	0x0800e895
 800e2a8:	0800e895 	.word	0x0800e895
 800e2ac:	0800e895 	.word	0x0800e895
 800e2b0:	0800e895 	.word	0x0800e895
 800e2b4:	0800e895 	.word	0x0800e895
 800e2b8:	0800e895 	.word	0x0800e895
 800e2bc:	0800e895 	.word	0x0800e895
 800e2c0:	0800e895 	.word	0x0800e895
 800e2c4:	0800e895 	.word	0x0800e895
 800e2c8:	0800e841 	.word	0x0800e841
 800e2cc:	0800e84d 	.word	0x0800e84d
 800e2d0:	0800e859 	.word	0x0800e859
 800e2d4:	0800e865 	.word	0x0800e865
 800e2d8:	0800e871 	.word	0x0800e871
 800e2dc:	0800e87d 	.word	0x0800e87d
 800e2e0:	0800e889 	.word	0x0800e889
 800e2e4:	0800e88f 	.word	0x0800e88f
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	791b      	ldrb	r3, [r3, #4]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fd fb0f 	bl	800b910 <SwitchClass>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	75fb      	strb	r3, [r7, #23]
            break;
 800e2f6:	e2ee      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	791b      	ldrb	r3, [r3, #4]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d005      	beq.n	800e30c <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	791a      	ldrb	r2, [r3, #4]
 800e304:	4b6c      	ldr	r3, [pc, #432]	@ (800e4b8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e306:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e30a:	e2e4      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e30c:	2303      	movs	r3, #3
 800e30e:	75fb      	strb	r3, [r7, #23]
            break;
 800e310:	e2e1      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	4618      	mov	r0, r3
 800e318:	f008 f828 	bl	801636c <SecureElementSetDevEui>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f000 82be 	beq.w	800e8a0 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e324:	2303      	movs	r3, #3
 800e326:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e328:	e2ba      	b.n	800e8a0 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	4618      	mov	r0, r3
 800e330:	f008 f84c 	bl	80163cc <SecureElementSetJoinEui>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 82b4 	beq.w	800e8a4 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e33c:	2303      	movs	r3, #3
 800e33e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e340:	e2b0      	b.n	800e8a4 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	791a      	ldrb	r2, [r3, #4]
 800e346:	4b5c      	ldr	r3, [pc, #368]	@ (800e4b8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e348:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 800e34c:	e2c3      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	4a59      	ldr	r2, [pc, #356]	@ (800e4b8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 800e358:	e2bd      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800e35a:	4b57      	ldr	r3, [pc, #348]	@ (800e4b8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e35c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	4619      	mov	r1, r3
 800e366:	4610      	mov	r0, r2
 800e368:	f008 f848 	bl	80163fc <SecureElementSetDevAddr>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e372:	2303      	movs	r3, #3
 800e374:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 800e376:	e2ae      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	4a4e      	ldr	r2, [pc, #312]	@ (800e4b8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e37e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 800e382:	e2a8      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	4619      	mov	r1, r3
 800e392:	2000      	movs	r0, #0
 800e394:	f002 f83e 	bl	8010414 <LoRaMacCryptoSetKey>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f000 8284 	beq.w	800e8a8 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e3a0:	2311      	movs	r3, #17
 800e3a2:	e2a3      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e3a8:	e27e      	b.n	800e8a8 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00b      	beq.n	800e3ca <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	2001      	movs	r0, #1
 800e3ba:	f002 f82b 	bl	8010414 <LoRaMacCryptoSetKey>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 8273 	beq.w	800e8ac <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e3c6:	2311      	movs	r3, #17
 800e3c8:	e290      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3ca:	2303      	movs	r3, #3
 800e3cc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e3ce:	e26d      	b.n	800e8ac <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00b      	beq.n	800e3f0 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	2008      	movs	r0, #8
 800e3e0:	f002 f818 	bl	8010414 <LoRaMacCryptoSetKey>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f000 8262 	beq.w	800e8b0 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e3ec:	2311      	movs	r3, #17
 800e3ee:	e27d      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e3f4:	e25c      	b.n	800e8b0 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00b      	beq.n	800e416 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	4619      	mov	r1, r3
 800e404:	2009      	movs	r0, #9
 800e406:	f002 f805 	bl	8010414 <LoRaMacCryptoSetKey>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f000 8251 	beq.w	800e8b4 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e412:	2311      	movs	r3, #17
 800e414:	e26a      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e416:	2303      	movs	r3, #3
 800e418:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e41a:	e24b      	b.n	800e8b4 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00b      	beq.n	800e43c <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	4619      	mov	r1, r3
 800e42a:	200c      	movs	r0, #12
 800e42c:	f001 fff2 	bl	8010414 <LoRaMacCryptoSetKey>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	f000 8240 	beq.w	800e8b8 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e438:	2311      	movs	r3, #17
 800e43a:	e257      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e43c:	2303      	movs	r3, #3
 800e43e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e440:	e23a      	b.n	800e8b8 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00b      	beq.n	800e462 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	4619      	mov	r1, r3
 800e450:	200d      	movs	r0, #13
 800e452:	f001 ffdf 	bl	8010414 <LoRaMacCryptoSetKey>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f000 822f 	beq.w	800e8bc <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e45e:	2311      	movs	r3, #17
 800e460:	e244      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e462:	2303      	movs	r3, #3
 800e464:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e466:	e229      	b.n	800e8bc <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00b      	beq.n	800e488 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	4619      	mov	r1, r3
 800e476:	200e      	movs	r0, #14
 800e478:	f001 ffcc 	bl	8010414 <LoRaMacCryptoSetKey>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f000 821e 	beq.w	800e8c0 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e484:	2311      	movs	r3, #17
 800e486:	e231      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e488:	2303      	movs	r3, #3
 800e48a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e48c:	e218      	b.n	800e8c0 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00b      	beq.n	800e4ae <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	4619      	mov	r1, r3
 800e49c:	200f      	movs	r0, #15
 800e49e:	f001 ffb9 	bl	8010414 <LoRaMacCryptoSetKey>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 820d 	beq.w	800e8c4 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e4aa:	2311      	movs	r3, #17
 800e4ac:	e21e      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e4b2:	e207      	b.n	800e8c4 <LoRaMacMibSetRequestConfirm+0x71c>
 800e4b4:	200009c4 	.word	0x200009c4
 800e4b8:	20008000 	.word	0x20008000
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	791a      	ldrb	r2, [r3, #4]
 800e4c0:	4bb2      	ldr	r3, [pc, #712]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e4c2:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e4c6:	4bb2      	ldr	r3, [pc, #712]	@ (800e790 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800e4c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ca:	4ab0      	ldr	r2, [pc, #704]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e4cc:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	4798      	blx	r3
            Radio.Sleep( );
 800e4d4:	4bae      	ldr	r3, [pc, #696]	@ (800e790 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800e4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d8:	4798      	blx	r3
            break;
 800e4da:	e1fc      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	791a      	ldrb	r2, [r3, #4]
 800e4e0:	4baa      	ldr	r3, [pc, #680]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e4e2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 800e4e6:	e1f6      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	7a1b      	ldrb	r3, [r3, #8]
 800e4ec:	b25b      	sxtb	r3, r3
 800e4ee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e4f0:	4ba6      	ldr	r3, [pc, #664]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e4f2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e4f6:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800e4f8:	4ba4      	ldr	r3, [pc, #656]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e4fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e4fe:	f107 0108 	add.w	r1, r7, #8
 800e502:	2207      	movs	r2, #7
 800e504:	4618      	mov	r0, r3
 800e506:	f002 fdc4 	bl	8011092 <RegionVerify>
 800e50a:	4603      	mov	r3, r0
 800e50c:	f083 0301 	eor.w	r3, r3, #1
 800e510:	b2db      	uxtb	r3, r3
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e516:	2303      	movs	r3, #3
 800e518:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 800e51a:	e1dc      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800e522:	4b9a      	ldr	r3, [pc, #616]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e524:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e528:	f107 0108 	add.w	r1, r7, #8
 800e52c:	2200      	movs	r2, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f002 fdaf 	bl	8011092 <RegionVerify>
 800e534:	4603      	mov	r3, r0
 800e536:	f083 0301 	eor.w	r3, r3, #1
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e540:	2303      	movs	r3, #3
 800e542:	75fb      	strb	r3, [r7, #23]
            break;
 800e544:	e1c7      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800e546:	4b91      	ldr	r3, [pc, #580]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	336c      	adds	r3, #108	@ 0x6c
 800e54c:	3204      	adds	r2, #4
 800e54e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e552:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e556:	e1be      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	7a1b      	ldrb	r3, [r3, #8]
 800e55c:	b25b      	sxtb	r3, r3
 800e55e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e560:	4b8a      	ldr	r3, [pc, #552]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e562:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e566:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e568:	4b88      	ldr	r3, [pc, #544]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e56a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e56e:	f107 0108 	add.w	r1, r7, #8
 800e572:	2207      	movs	r2, #7
 800e574:	4618      	mov	r0, r3
 800e576:	f002 fd8c 	bl	8011092 <RegionVerify>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d008      	beq.n	800e592 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800e580:	4b82      	ldr	r3, [pc, #520]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	33b4      	adds	r3, #180	@ 0xb4
 800e586:	3204      	adds	r2, #4
 800e588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e58c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e590:	e1a1      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e592:	2303      	movs	r3, #3
 800e594:	75fb      	strb	r3, [r7, #23]
            break;
 800e596:	e19e      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7a1b      	ldrb	r3, [r3, #8]
 800e59c:	b25b      	sxtb	r3, r3
 800e59e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e5a0:	4b7a      	ldr	r3, [pc, #488]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e5a2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e5a6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e5a8:	4b78      	ldr	r3, [pc, #480]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e5aa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e5ae:	f107 0108 	add.w	r1, r7, #8
 800e5b2:	2207      	movs	r2, #7
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f002 fd6c 	bl	8011092 <RegionVerify>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d019      	beq.n	800e5f4 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800e5c0:	4b72      	ldr	r3, [pc, #456]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	3374      	adds	r3, #116	@ 0x74
 800e5c6:	3204      	adds	r2, #4
 800e5c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5cc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e5d0:	4b6e      	ldr	r3, [pc, #440]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e5d2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	f040 8176 	bne.w	800e8c8 <LoRaMacMibSetRequestConfirm+0x720>
 800e5dc:	4b6b      	ldr	r3, [pc, #428]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e5de:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f000 8170 	beq.w	800e8c8 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800e5e8:	4b69      	ldr	r3, [pc, #420]	@ (800e790 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800e5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ec:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800e5ee:	f7fe fc7d 	bl	800ceec <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e5f2:	e169      	b.n	800e8c8 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5f4:	2303      	movs	r3, #3
 800e5f6:	75fb      	strb	r3, [r7, #23]
            break;
 800e5f8:	e166      	b.n	800e8c8 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	7a1b      	ldrb	r3, [r3, #8]
 800e5fe:	b25b      	sxtb	r3, r3
 800e600:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e602:	4b62      	ldr	r3, [pc, #392]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e604:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e608:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e60a:	4b60      	ldr	r3, [pc, #384]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e60c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e610:	f107 0108 	add.w	r1, r7, #8
 800e614:	2207      	movs	r2, #7
 800e616:	4618      	mov	r0, r3
 800e618:	f002 fd3b 	bl	8011092 <RegionVerify>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d008      	beq.n	800e634 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800e622:	4b5a      	ldr	r3, [pc, #360]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	33bc      	adds	r3, #188	@ 0xbc
 800e628:	3204      	adds	r2, #4
 800e62a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e62e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e632:	e150      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e634:	2303      	movs	r3, #3
 800e636:	75fb      	strb	r3, [r7, #23]
            break;
 800e638:	e14d      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800e640:	2301      	movs	r3, #1
 800e642:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e644:	4b51      	ldr	r3, [pc, #324]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e646:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e64a:	f107 020c 	add.w	r2, r7, #12
 800e64e:	4611      	mov	r1, r2
 800e650:	4618      	mov	r0, r3
 800e652:	f002 fd56 	bl	8011102 <RegionChanMaskSet>
 800e656:	4603      	mov	r3, r0
 800e658:	f083 0301 	eor.w	r3, r3, #1
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f000 8134 	beq.w	800e8cc <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e664:	2303      	movs	r3, #3
 800e666:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e668:	e130      	b.n	800e8cc <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800e670:	2300      	movs	r3, #0
 800e672:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e674:	4b45      	ldr	r3, [pc, #276]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e676:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e67a:	f107 020c 	add.w	r2, r7, #12
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f002 fd3e 	bl	8011102 <RegionChanMaskSet>
 800e686:	4603      	mov	r3, r0
 800e688:	f083 0301 	eor.w	r3, r3, #1
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f000 811e 	beq.w	800e8d0 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e694:	2303      	movs	r3, #3
 800e696:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e698:	e11a      	b.n	800e8d0 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	791b      	ldrb	r3, [r3, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d009      	beq.n	800e6b6 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e6a6:	2b0f      	cmp	r3, #15
 800e6a8:	d805      	bhi.n	800e6b6 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	791a      	ldrb	r2, [r3, #4]
 800e6ae:	4b37      	ldr	r3, [pc, #220]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e6b0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e6b4:	e10f      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e6b6:	2303      	movs	r3, #3
 800e6b8:	75fb      	strb	r3, [r7, #23]
            break;
 800e6ba:	e10c      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	4a32      	ldr	r2, [pc, #200]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e6c2:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 800e6c4:	e107      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	4a30      	ldr	r2, [pc, #192]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e6cc:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 800e6ce:	e102      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	4a2d      	ldr	r2, [pc, #180]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e6d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 800e6d8:	e0fd      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	4a2b      	ldr	r2, [pc, #172]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e6e0:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 800e6e2:	e0f8      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	4a28      	ldr	r2, [pc, #160]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e6ea:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 800e6ec:	e0f3      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e6f4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800e6f6:	4b25      	ldr	r3, [pc, #148]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e6f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e6fc:	f107 0108 	add.w	r1, r7, #8
 800e700:	2206      	movs	r2, #6
 800e702:	4618      	mov	r0, r3
 800e704:	f002 fcc5 	bl	8011092 <RegionVerify>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d005      	beq.n	800e71a <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800e70e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e712:	4b1e      	ldr	r3, [pc, #120]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e714:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e718:	e0dd      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e71a:	2303      	movs	r3, #3
 800e71c:	75fb      	strb	r3, [r7, #23]
            break;
 800e71e:	e0da      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e726:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e728:	4b18      	ldr	r3, [pc, #96]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e72a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e72e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800e730:	4b16      	ldr	r3, [pc, #88]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e732:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e736:	f107 0108 	add.w	r1, r7, #8
 800e73a:	2205      	movs	r2, #5
 800e73c:	4618      	mov	r0, r3
 800e73e:	f002 fca8 	bl	8011092 <RegionVerify>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d005      	beq.n	800e754 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e748:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e74c:	4b0f      	ldr	r3, [pc, #60]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e74e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e752:	e0c0      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e754:	2303      	movs	r3, #3
 800e756:	75fb      	strb	r3, [r7, #23]
            break;
 800e758:	e0bd      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e760:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800e762:	4b0a      	ldr	r3, [pc, #40]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e764:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e768:	f107 0108 	add.w	r1, r7, #8
 800e76c:	220a      	movs	r2, #10
 800e76e:	4618      	mov	r0, r3
 800e770:	f002 fc8f 	bl	8011092 <RegionVerify>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d005      	beq.n	800e786 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800e77a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e77e:	4b03      	ldr	r3, [pc, #12]	@ (800e78c <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e780:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e784:	e0a7      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e786:	2303      	movs	r3, #3
 800e788:	75fb      	strb	r3, [r7, #23]
            break;
 800e78a:	e0a4      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
 800e78c:	20008000 	.word	0x20008000
 800e790:	08020bac 	.word	0x08020bac
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e79a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800e79c:	4b55      	ldr	r3, [pc, #340]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e79e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e7a2:	f107 0108 	add.w	r1, r7, #8
 800e7a6:	2209      	movs	r2, #9
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f002 fc72 	bl	8011092 <RegionVerify>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d005      	beq.n	800e7c0 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800e7b4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e7b8:	4b4e      	ldr	r3, [pc, #312]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e7be:	e08a      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e7c0:	2303      	movs	r3, #3
 800e7c2:	75fb      	strb	r3, [r7, #23]
            break;
 800e7c4:	e087      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	4a4a      	ldr	r2, [pc, #296]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800e7d0:	4b48      	ldr	r3, [pc, #288]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7d6:	4a47      	ldr	r2, [pc, #284]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 800e7da:	e07c      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	791a      	ldrb	r2, [r3, #4]
 800e7e0:	4b44      	ldr	r3, [pc, #272]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7e2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800e7e6:	4b43      	ldr	r3, [pc, #268]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7e8:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800e7ec:	4b41      	ldr	r3, [pc, #260]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 800e7f2:	e070      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	4a3e      	ldr	r2, [pc, #248]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e7fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 800e7fe:	e06a      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	4a3b      	ldr	r2, [pc, #236]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e806:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 800e80a:	e064      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800e80c:	f7fe fda0 	bl	800d350 <RestoreNvmData>
 800e810:	4603      	mov	r3, r0
 800e812:	75fb      	strb	r3, [r7, #23]
            break;
 800e814:	e05f      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	799b      	ldrb	r3, [r3, #6]
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d80d      	bhi.n	800e83a <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800e81e:	4a35      	ldr	r2, [pc, #212]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6858      	ldr	r0, [r3, #4]
 800e82c:	f001 fd54 	bl	80102d8 <LoRaMacCryptoSetLrWanVersion>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d04e      	beq.n	800e8d4 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e836:	2311      	movs	r3, #17
 800e838:	e058      	b.n	800e8ec <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e83a:	2303      	movs	r3, #3
 800e83c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e83e:	e049      	b.n	800e8d4 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	4a2b      	ldr	r2, [pc, #172]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e846:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 800e84a:	e044      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	791a      	ldrb	r2, [r3, #4]
 800e850:	4b28      	ldr	r3, [pc, #160]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e852:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 800e856:	e03e      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	889a      	ldrh	r2, [r3, #4]
 800e85c:	4b25      	ldr	r3, [pc, #148]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e85e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 800e862:	e038      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	889a      	ldrh	r2, [r3, #4]
 800e868:	4b22      	ldr	r3, [pc, #136]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e86a:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 800e86e:	e032      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	889a      	ldrh	r2, [r3, #4]
 800e874:	4b1f      	ldr	r3, [pc, #124]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e876:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 800e87a:	e02c      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	889a      	ldrh	r2, [r3, #4]
 800e880:	4b1c      	ldr	r3, [pc, #112]	@ (800e8f4 <LoRaMacMibSetRequestConfirm+0x74c>)
 800e882:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 800e886:	e026      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800e888:	2318      	movs	r3, #24
 800e88a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800e88c:	e023      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800e88e:	2318      	movs	r3, #24
 800e890:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800e892:	e020      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fc7e 	bl	800f196 <LoRaMacMibClassBSetRequestConfirm>
 800e89a:	4603      	mov	r3, r0
 800e89c:	75fb      	strb	r3, [r7, #23]
            break;
 800e89e:	e01a      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8a0:	bf00      	nop
 800e8a2:	e018      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8a4:	bf00      	nop
 800e8a6:	e016      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8a8:	bf00      	nop
 800e8aa:	e014      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8ac:	bf00      	nop
 800e8ae:	e012      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8b0:	bf00      	nop
 800e8b2:	e010      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8b4:	bf00      	nop
 800e8b6:	e00e      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8b8:	bf00      	nop
 800e8ba:	e00c      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8bc:	bf00      	nop
 800e8be:	e00a      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8c0:	bf00      	nop
 800e8c2:	e008      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8c4:	bf00      	nop
 800e8c6:	e006      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8c8:	bf00      	nop
 800e8ca:	e004      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8cc:	bf00      	nop
 800e8ce:	e002      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8d0:	bf00      	nop
 800e8d2:	e000      	b.n	800e8d6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800e8d4:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800e8d6:	7dfb      	ldrb	r3, [r7, #23]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d106      	bne.n	800e8ea <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e8dc:	4a06      	ldr	r2, [pc, #24]	@ (800e8f8 <LoRaMacMibSetRequestConfirm+0x750>)
 800e8de:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e8e2:	f043 0320 	orr.w	r3, r3, #32
 800e8e6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	20008000 	.word	0x20008000
 800e8f8:	200009c4 	.word	0x200009c4

0800e8fc <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08a      	sub	sp, #40	@ 0x28
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e904:	2302      	movs	r3, #2
 800e906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e90a:	2300      	movs	r3, #0
 800e90c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d101      	bne.n	800e918 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e914:	2303      	movs	r3, #3
 800e916:	e17e      	b.n	800ec16 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800e91e:	f7fc fbd9 	bl	800b0d4 <LoRaMacIsBusy>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800e928:	2301      	movs	r3, #1
 800e92a:	e174      	b.n	800ec16 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800e92c:	f001 f96e 	bl	800fc0c <LoRaMacConfirmQueueIsFull>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 800e936:	2301      	movs	r3, #1
 800e938:	e16d      	b.n	800ec16 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e93a:	f001 f95b 	bl	800fbf4 <LoRaMacConfirmQueueGetCnt>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d104      	bne.n	800e94e <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e944:	2214      	movs	r2, #20
 800e946:	2100      	movs	r1, #0
 800e948:	48b5      	ldr	r0, [pc, #724]	@ (800ec20 <LoRaMacMlmeRequest+0x324>)
 800e94a:	f007 fe2d 	bl	80165a8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e94e:	4bb5      	ldr	r3, [pc, #724]	@ (800ec24 <LoRaMacMlmeRequest+0x328>)
 800e950:	2201      	movs	r2, #1
 800e952:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e956:	4ab3      	ldr	r2, [pc, #716]	@ (800ec24 <LoRaMacMlmeRequest+0x328>)
 800e958:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e95c:	f043 0304 	orr.w	r3, r3, #4
 800e960:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e96c:	2301      	movs	r3, #1
 800e96e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 800e972:	2300      	movs	r3, #0
 800e974:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 800e978:	2300      	movs	r3, #0
 800e97a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	3b01      	subs	r3, #1
 800e984:	2b0c      	cmp	r3, #12
 800e986:	f200 811a 	bhi.w	800ebbe <LoRaMacMlmeRequest+0x2c2>
 800e98a:	a201      	add	r2, pc, #4	@ (adr r2, 800e990 <LoRaMacMlmeRequest+0x94>)
 800e98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e990:	0800e9c5 	.word	0x0800e9c5
 800e994:	0800ebbf 	.word	0x0800ebbf
 800e998:	0800ebbf 	.word	0x0800ebbf
 800e99c:	0800ebbf 	.word	0x0800ebbf
 800e9a0:	0800eaa3 	.word	0x0800eaa3
 800e9a4:	0800eac7 	.word	0x0800eac7
 800e9a8:	0800ebbf 	.word	0x0800ebbf
 800e9ac:	0800ebbf 	.word	0x0800ebbf
 800e9b0:	0800eae5 	.word	0x0800eae5
 800e9b4:	0800ebbf 	.word	0x0800ebbf
 800e9b8:	0800eb8d 	.word	0x0800eb8d
 800e9bc:	0800eb21 	.word	0x0800eb21
 800e9c0:	0800eb6b 	.word	0x0800eb6b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800e9c4:	4b97      	ldr	r3, [pc, #604]	@ (800ec24 <LoRaMacMlmeRequest+0x328>)
 800e9c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9ca:	f003 0320 	and.w	r3, r3, #32
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e11f      	b.n	800ec16 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	791b      	ldrb	r3, [r3, #4]
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	d135      	bne.n	800ea4a <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 800e9de:	2000      	movs	r0, #0
 800e9e0:	f7fe f916 	bl	800cc10 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800e9e4:	4b90      	ldr	r3, [pc, #576]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800e9e6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	795b      	ldrb	r3, [r3, #5]
 800e9ee:	b25b      	sxtb	r3, r3
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	f002 fc95 	bl	8011322 <RegionAlternateDr>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	4b8a      	ldr	r3, [pc, #552]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800e9fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800ea08:	4b87      	ldr	r3, [pc, #540]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800ea0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ea0e:	2307      	movs	r3, #7
 800ea10:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 800ea14:	20ff      	movs	r0, #255	@ 0xff
 800ea16:	f7fd fe7f 	bl	800c718 <SendReJoinReq>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 800ea20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f000 80cc 	beq.w	800ebc2 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ea2a:	4b7f      	ldr	r3, [pc, #508]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800ea2c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	795b      	ldrb	r3, [r3, #5]
 800ea34:	b25b      	sxtb	r3, r3
 800ea36:	2201      	movs	r2, #1
 800ea38:	4619      	mov	r1, r3
 800ea3a:	f002 fc72 	bl	8011322 <RegionAlternateDr>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	461a      	mov	r2, r3
 800ea42:	4b79      	ldr	r3, [pc, #484]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800ea44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 800ea48:	e0bb      	b.n	800ebc2 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	791b      	ldrb	r3, [r3, #4]
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	f040 80b7 	bne.w	800ebc2 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ea54:	4b74      	ldr	r3, [pc, #464]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ea60:	4b71      	ldr	r3, [pc, #452]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800ea62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ea66:	f107 020c 	add.w	r2, r7, #12
 800ea6a:	4611      	mov	r1, r2
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f002 faf9 	bl	8011064 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	791a      	ldrb	r2, [r3, #4]
 800ea76:	4b6c      	ldr	r3, [pc, #432]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800ea78:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 800ea82:	2301      	movs	r3, #1
 800ea84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 800ea88:	f7fe fe12 	bl	800d6b0 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ea8c:	4a65      	ldr	r2, [pc, #404]	@ (800ec24 <LoRaMacMlmeRequest+0x328>)
 800ea8e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ea92:	f043 0310 	orr.w	r3, r3, #16
 800ea96:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800eaa0:	e08f      	b.n	800ebc2 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eaa8:	f107 031c 	add.w	r3, r7, #28
 800eaac:	2200      	movs	r2, #0
 800eaae:	4619      	mov	r1, r3
 800eab0:	2002      	movs	r0, #2
 800eab2:	f000 fcfb 	bl	800f4ac <LoRaMacCommandsAddCmd>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f000 8084 	beq.w	800ebc6 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eabe:	2313      	movs	r3, #19
 800eac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800eac4:	e07f      	b.n	800ebc6 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	8898      	ldrh	r0, [r3, #4]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6899      	ldr	r1, [r3, #8]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	461a      	mov	r2, r3
 800ead8:	f7fe fc1a 	bl	800d310 <SetTxContinuousWave>
 800eadc:	4603      	mov	r3, r0
 800eade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800eae2:	e077      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	4619      	mov	r1, r3
 800eaf0:	200d      	movs	r0, #13
 800eaf2:	f000 fd5b 	bl	800f5ac <LoRaMacCommandsGetCmd>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d103      	bne.n	800eb04 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 800eb02:	e062      	b.n	800ebca <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb04:	f107 031c 	add.w	r3, r7, #28
 800eb08:	2200      	movs	r2, #0
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	200d      	movs	r0, #13
 800eb0e:	f000 fccd 	bl	800f4ac <LoRaMacCommandsAddCmd>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d058      	beq.n	800ebca <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb18:	2313      	movs	r3, #19
 800eb1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800eb1e:	e054      	b.n	800ebca <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800eb20:	4b41      	ldr	r3, [pc, #260]	@ (800ec28 <LoRaMacMlmeRequest+0x32c>)
 800eb22:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d151      	bne.n	800ebce <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	791b      	ldrb	r3, [r3, #4]
 800eb2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	791b      	ldrb	r3, [r3, #4]
 800eb36:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f000 faff 	bl	800f140 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800eb42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eb46:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb4e:	f107 031c 	add.w	r3, r7, #28
 800eb52:	2201      	movs	r2, #1
 800eb54:	4619      	mov	r1, r3
 800eb56:	2010      	movs	r0, #16
 800eb58:	f000 fca8 	bl	800f4ac <LoRaMacCommandsAddCmd>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d035      	beq.n	800ebce <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb62:	2313      	movs	r3, #19
 800eb64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 800eb68:	e031      	b.n	800ebce <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eb70:	f107 031c 	add.w	r3, r7, #28
 800eb74:	2200      	movs	r2, #0
 800eb76:	4619      	mov	r1, r3
 800eb78:	2012      	movs	r0, #18
 800eb7a:	f000 fc97 	bl	800f4ac <LoRaMacCommandsAddCmd>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d026      	beq.n	800ebd2 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eb84:	2313      	movs	r3, #19
 800eb86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800eb8a:	e022      	b.n	800ebd2 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800eb92:	f000 fa8b 	bl	800f0ac <LoRaMacClassBIsAcquisitionInProgress>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f083 0301 	eor.w	r3, r3, #1
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d009      	beq.n	800ebb6 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800eba2:	2000      	movs	r0, #0
 800eba4:	f000 fa64 	bl	800f070 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800eba8:	2000      	movs	r0, #0
 800ebaa:	f000 fa86 	bl	800f0ba <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800ebb4:	e00e      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ebbc:	e00a      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 800ebbe:	bf00      	nop
 800ebc0:	e008      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ebc2:	bf00      	nop
 800ebc4:	e006      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ebc6:	bf00      	nop
 800ebc8:	e004      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ebca:	bf00      	nop
 800ebcc:	e002      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ebce:	bf00      	nop
 800ebd0:	e000      	b.n	800ebd4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800ebd2:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ebd4:	4b13      	ldr	r3, [pc, #76]	@ (800ec24 <LoRaMacMlmeRequest+0x328>)
 800ebd6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800ebde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d010      	beq.n	800ec08 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ebe6:	f001 f805 	bl	800fbf4 <LoRaMacConfirmQueueGetCnt>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d110      	bne.n	800ec12 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 800ebf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ec24 <LoRaMacMlmeRequest+0x328>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ebf8:	4a0a      	ldr	r2, [pc, #40]	@ (800ec24 <LoRaMacMlmeRequest+0x328>)
 800ebfa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ebfe:	f023 0304 	bic.w	r3, r3, #4
 800ec02:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800ec06:	e004      	b.n	800ec12 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800ec08:	f107 0320 	add.w	r3, r7, #32
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 fe9d 	bl	800f94c <LoRaMacConfirmQueueAdd>
    }
    return status;
 800ec12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3728      	adds	r7, #40	@ 0x28
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	20000e18 	.word	0x20000e18
 800ec24:	200009c4 	.word	0x200009c4
 800ec28:	20008000 	.word	0x20008000

0800ec2c <LoRaMacMcpsRequest>:
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800ec2c:	b5b0      	push	{r4, r5, r7, lr}
 800ec2e:	b092      	sub	sp, #72	@ 0x48
 800ec30:	af02      	add	r7, sp, #8
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	460b      	mov	r3, r1
 800ec36:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ec38:	2302      	movs	r3, #2
 800ec3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 800ec44:	2300      	movs	r3, #0
 800ec46:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d101      	bne.n	800ec5e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	e113      	b.n	800ee86 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 800ec64:	f7fc fa36 	bl	800b0d4 <LoRaMacIsBusy>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d001      	beq.n	800ec72 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e109      	b.n	800ee86 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f107 040c 	add.w	r4, r7, #12
 800ec78:	461d      	mov	r5, r3
 800ec7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec7e:	682b      	ldr	r3, [r5, #0]
 800ec80:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800ec88:	2214      	movs	r2, #20
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	4880      	ldr	r0, [pc, #512]	@ (800ee90 <LoRaMacMcpsRequest+0x264>)
 800ec8e:	f007 fc8b 	bl	80165a8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec92:	4b80      	ldr	r3, [pc, #512]	@ (800ee94 <LoRaMacMcpsRequest+0x268>)
 800ec94:	2201      	movs	r2, #1
 800ec96:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ec9a:	4b7f      	ldr	r3, [pc, #508]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ec9c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800eca0:	2b02      	cmp	r3, #2
 800eca2:	d111      	bne.n	800ecc8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800eca4:	4b7c      	ldr	r3, [pc, #496]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800eca6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d10c      	bne.n	800ecc8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ecae:	4b7a      	ldr	r3, [pc, #488]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ecb0:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 800ecb4:	f083 0301 	eor.w	r3, r3, #1
 800ecb8:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d004      	beq.n	800ecc8 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800ecbe:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 800ecc8:	7b3b      	ldrb	r3, [r7, #12]
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	d030      	beq.n	800ed30 <LoRaMacMcpsRequest+0x104>
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	dc3f      	bgt.n	800ed52 <LoRaMacMcpsRequest+0x126>
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d002      	beq.n	800ecdc <LoRaMacMcpsRequest+0xb0>
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d015      	beq.n	800ed06 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800ecda:	e03a      	b.n	800ed52 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ece2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ece6:	2202      	movs	r2, #2
 800ece8:	f362 1347 	bfi	r3, r2, #5, #3
 800ecec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 800ecf0:	7c3b      	ldrb	r3, [r7, #16]
 800ecf2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800ecfa:	8b3b      	ldrh	r3, [r7, #24]
 800ecfc:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 800ecfe:	7ebb      	ldrb	r3, [r7, #26]
 800ed00:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800ed04:	e026      	b.n	800ed54 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 800ed06:	2301      	movs	r3, #1
 800ed08:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ed0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ed10:	2204      	movs	r2, #4
 800ed12:	f362 1347 	bfi	r3, r2, #5, #3
 800ed16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 800ed1a:	7c3b      	ldrb	r3, [r7, #16]
 800ed1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800ed24:	8b3b      	ldrh	r3, [r7, #24]
 800ed26:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 800ed28:	7ebb      	ldrb	r3, [r7, #26]
 800ed2a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800ed2e:	e011      	b.n	800ed54 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 800ed30:	2301      	movs	r3, #1
 800ed32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ed36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ed3a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800ed3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800ed46:	8abb      	ldrh	r3, [r7, #20]
 800ed48:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 800ed4a:	7dbb      	ldrb	r3, [r7, #22]
 800ed4c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800ed50:	e000      	b.n	800ed54 <LoRaMacMcpsRequest+0x128>
            break;
 800ed52:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ed54:	2302      	movs	r3, #2
 800ed56:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ed5a:	4b4f      	ldr	r3, [pc, #316]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ed5c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ed60:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed64:	4b4c      	ldr	r3, [pc, #304]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ed66:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ed6a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ed6e:	4611      	mov	r1, r2
 800ed70:	4618      	mov	r0, r3
 800ed72:	f002 f940 	bl	8010ff6 <RegionGetPhyParam>
 800ed76:	4603      	mov	r3, r0
 800ed78:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ed7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed7c:	b25b      	sxtb	r3, r3
 800ed7e:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 800ed82:	4293      	cmp	r3, r2
 800ed84:	bfb8      	it	lt
 800ed86:	4613      	movlt	r3, r2
 800ed88:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800ed8c:	4b42      	ldr	r3, [pc, #264]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ed8e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800ed92:	4a41      	ldr	r2, [pc, #260]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ed94:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 800ed98:	4a3f      	ldr	r2, [pc, #252]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ed9a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fc fb34 	bl	800b40c <CheckForMinimumAbpDatarate>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d002      	beq.n	800edb0 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 800edaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 800edb0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d05f      	beq.n	800ee78 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800edb8:	4b37      	ldr	r3, [pc, #220]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800edba:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800edbe:	f083 0301 	eor.w	r3, r3, #1
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10e      	bne.n	800ede6 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800edc8:	4b33      	ldr	r3, [pc, #204]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800edca:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800edce:	4a32      	ldr	r2, [pc, #200]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800edd0:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 800edd4:	4a30      	ldr	r2, [pc, #192]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800edd6:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fc fb16 	bl	800b40c <CheckForMinimumAbpDatarate>
 800ede0:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d01c      	beq.n	800ee20 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 800ede6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800edea:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800edee:	4b2a      	ldr	r3, [pc, #168]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800edf0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800edf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800edf8:	4b27      	ldr	r3, [pc, #156]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800edfa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800edfe:	f107 0120 	add.w	r1, r7, #32
 800ee02:	2205      	movs	r2, #5
 800ee04:	4618      	mov	r0, r3
 800ee06:	f002 f944 	bl	8011092 <RegionVerify>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d005      	beq.n	800ee1c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ee10:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800ee14:	4b20      	ldr	r3, [pc, #128]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ee16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ee1a:	e001      	b.n	800ee20 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	e032      	b.n	800ee86 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ee20:	4b1d      	ldr	r3, [pc, #116]	@ (800ee98 <LoRaMacMcpsRequest+0x26c>)
 800ee22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee26:	4a1b      	ldr	r2, [pc, #108]	@ (800ee94 <LoRaMacMcpsRequest+0x268>)
 800ee28:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fc fbd8 	bl	800b5e4 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800ee34:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ee36:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 800ee3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ee3e:	78fb      	ldrb	r3, [r7, #3]
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	4613      	mov	r3, r2
 800ee44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee46:	f7fd fb85 	bl	800c554 <Send>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( status == LORAMAC_STATUS_OK )
 800ee50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d10b      	bne.n	800ee70 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800ee58:	7b3a      	ldrb	r2, [r7, #12]
 800ee5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ee94 <LoRaMacMcpsRequest+0x268>)
 800ee5c:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ee60:	4a0c      	ldr	r2, [pc, #48]	@ (800ee94 <LoRaMacMcpsRequest+0x268>)
 800ee62:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ee66:	f043 0301 	orr.w	r3, r3, #1
 800ee6a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800ee6e:	e003      	b.n	800ee78 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800ee70:	4b08      	ldr	r3, [pc, #32]	@ (800ee94 <LoRaMacMcpsRequest+0x268>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

     // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ee78:	4b06      	ldr	r3, [pc, #24]	@ (800ee94 <LoRaMacMcpsRequest+0x268>)
 800ee7a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	611a      	str	r2, [r3, #16]

    return status;
 800ee82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3740      	adds	r7, #64	@ 0x40
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20000e04 	.word	0x20000e04
 800ee94:	200009c4 	.word	0x200009c4
 800ee98:	20008000 	.word	0x20008000

0800ee9c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	4603      	mov	r3, r0
 800eea4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800eea6:	79fb      	ldrb	r3, [r7, #7]
 800eea8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800eeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800eee0 <LoRaMacTestSetDutyCycleOn+0x44>)
 800eeac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eeb0:	f107 010c 	add.w	r1, r7, #12
 800eeb4:	220f      	movs	r2, #15
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f002 f8eb 	bl	8011092 <RegionVerify>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00a      	beq.n	800eed8 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800eec2:	4a07      	ldr	r2, [pc, #28]	@ (800eee0 <LoRaMacTestSetDutyCycleOn+0x44>)
 800eec4:	79fb      	ldrb	r3, [r7, #7]
 800eec6:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800eeca:	4a06      	ldr	r2, [pc, #24]	@ (800eee4 <LoRaMacTestSetDutyCycleOn+0x48>)
 800eecc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800eed0:	f043 0320 	orr.w	r3, r3, #32
 800eed4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800eed8:	bf00      	nop
 800eeda:	3710      	adds	r7, #16
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20008000 	.word	0x20008000
 800eee4:	200009c4 	.word	0x200009c4

0800eee8 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08c      	sub	sp, #48	@ 0x30
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
 800eef4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800eef6:	2300      	movs	r3, #0
 800eef8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	7b1b      	ldrb	r3, [r3, #12]
 800ef00:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	7b5b      	ldrb	r3, [r3, #13]
 800ef08:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	7b9b      	ldrb	r3, [r3, #14]
 800ef10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	685a      	ldr	r2, [r3, #4]
 800ef18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef1a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	785b      	ldrb	r3, [r3, #1]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f000 8088 	beq.w	800f036 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ef26:	2302      	movs	r3, #2
 800ef28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	7bdb      	ldrb	r3, [r3, #15]
 800ef30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	7c1b      	ldrb	r3, [r3, #16]
 800ef38:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f002 f859 	bl	8010ff6 <RegionGetPhyParam>
 800ef44:	4603      	mov	r3, r0
 800ef46:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 800ef4e:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 800ef52:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 800ef56:	4293      	cmp	r3, r2
 800ef58:	bfb8      	it	lt
 800ef5a:	4613      	movlt	r3, r2
 800ef5c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	8912      	ldrh	r2, [r2, #8]
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d302      	bcc.n	800ef72 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	8912      	ldrh	r2, [r2, #8]
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	8952      	ldrh	r2, [r2, #10]
 800ef80:	440a      	add	r2, r1
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d30f      	bcc.n	800efa6 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800ef86:	230a      	movs	r3, #10
 800ef88:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	7c1b      	ldrb	r3, [r3, #16]
 800ef90:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ef94:	4611      	mov	r1, r2
 800ef96:	4618      	mov	r0, r3
 800ef98:	f002 f82d 	bl	8010ff6 <RegionGetPhyParam>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	8912      	ldrh	r2, [r2, #8]
 800efae:	4611      	mov	r1, r2
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	8952      	ldrh	r2, [r2, #10]
 800efb4:	0052      	lsls	r2, r2, #1
 800efb6:	440a      	add	r2, r1
 800efb8:	4293      	cmp	r3, r2
 800efba:	d33c      	bcc.n	800f036 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	8912      	ldrh	r2, [r2, #8]
 800efc4:	1a9b      	subs	r3, r3, r2
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	8952      	ldrh	r2, [r2, #10]
 800efca:	fbb3 f1f2 	udiv	r1, r3, r2
 800efce:	fb01 f202 	mul.w	r2, r1, r2
 800efd2:	1a9b      	subs	r3, r3, r2
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d12e      	bne.n	800f036 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 800efd8:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 800efdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d110      	bne.n	800f006 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d009      	beq.n	800f000 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800efec:	2302      	movs	r3, #2
 800efee:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	7c1b      	ldrb	r3, [r3, #16]
 800eff4:	f107 0210 	add.w	r2, r7, #16
 800eff8:	4611      	mov	r1, r2
 800effa:	4618      	mov	r0, r3
 800effc:	f002 f832 	bl	8011064 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 800f000:	2301      	movs	r3, #1
 800f002:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f006:	2321      	movs	r3, #33	@ 0x21
 800f008:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 800f00c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f010:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	7bdb      	ldrb	r3, [r3, #15]
 800f018:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	7c1b      	ldrb	r3, [r3, #16]
 800f020:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f024:	4611      	mov	r1, r2
 800f026:	4618      	mov	r0, r3
 800f028:	f001 ffe5 	bl	8010ff6 <RegionGetPhyParam>
 800f02c:	4603      	mov	r3, r0
 800f02e:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 800f030:	6a3b      	ldr	r3, [r7, #32]
 800f032:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800f03c:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800f044:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f04c:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800f04e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f052:	4618      	mov	r0, r3
 800f054:	3730      	adds	r7, #48	@ 0x30
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 800f05a:	b480      	push	{r7}
 800f05c:	b085      	sub	sp, #20
 800f05e:	af00      	add	r7, sp, #0
 800f060:	60f8      	str	r0, [r7, #12]
 800f062:	60b9      	str	r1, [r7, #8]
 800f064:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f066:	bf00      	nop
 800f068:	3714      	adds	r7, #20
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bc80      	pop	{r7}
 800f06e:	4770      	bx	lr

0800f070 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f07a:	bf00      	nop
 800f07c:	370c      	adds	r7, #12
 800f07e:	46bd      	mov	sp, r7
 800f080:	bc80      	pop	{r7}
 800f082:	4770      	bx	lr

0800f084 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f08e:	bf00      	nop
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	bc80      	pop	{r7}
 800f096:	4770      	bx	lr

0800f098 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f0a2:	bf00      	nop
 800f0a4:	370c      	adds	r7, #12
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bc80      	pop	{r7}
 800f0aa:	4770      	bx	lr

0800f0ac <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800f0b0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bc80      	pop	{r7}
 800f0b8:	4770      	bx	lr

0800f0ba <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800f0ba:	b480      	push	{r7}
 800f0bc:	b083      	sub	sp, #12
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f0c2:	bf00      	nop
 800f0c4:	370c      	adds	r7, #12
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bc80      	pop	{r7}
 800f0ca:	4770      	bx	lr

0800f0cc <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f0d4:	bf00      	nop
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bc80      	pop	{r7}
 800f0dc:	4770      	bx	lr

0800f0de <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f0e6:	bf00      	nop
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bc80      	pop	{r7}
 800f0ee:	4770      	bx	lr

0800f0f0 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 800f0fc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	370c      	adds	r7, #12
 800f102:	46bd      	mov	sp, r7
 800f104:	bc80      	pop	{r7}
 800f106:	4770      	bx	lr

0800f108 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800f108:	b480      	push	{r7}
 800f10a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f10c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f10e:	4618      	mov	r0, r3
 800f110:	46bd      	mov	sp, r7
 800f112:	bc80      	pop	{r7}
 800f114:	4770      	bx	lr

0800f116 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800f116:	b480      	push	{r7}
 800f118:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f11a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	46bd      	mov	sp, r7
 800f120:	bc80      	pop	{r7}
 800f122:	4770      	bx	lr

0800f124 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800f124:	b480      	push	{r7}
 800f126:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f128:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bc80      	pop	{r7}
 800f130:	4770      	bx	lr

0800f132 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800f132:	b480      	push	{r7}
 800f134:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f136:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f138:	4618      	mov	r0, r3
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bc80      	pop	{r7}
 800f13e:	4770      	bx	lr

0800f140 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f14a:	bf00      	nop
 800f14c:	370c      	adds	r7, #12
 800f14e:	46bd      	mov	sp, r7
 800f150:	bc80      	pop	{r7}
 800f152:	4770      	bx	lr

0800f154 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800f154:	b480      	push	{r7}
 800f156:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f158:	bf00      	nop
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bc80      	pop	{r7}
 800f15e:	4770      	bx	lr

0800f160 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800f160:	b480      	push	{r7}
 800f162:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f164:	bf00      	nop
 800f166:	46bd      	mov	sp, r7
 800f168:	bc80      	pop	{r7}
 800f16a:	4770      	bx	lr

0800f16c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	4603      	mov	r3, r0
 800f174:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f176:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f178:	4618      	mov	r0, r3
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bc80      	pop	{r7}
 800f180:	4770      	bx	lr

0800f182 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800f182:	b480      	push	{r7}
 800f184:	b083      	sub	sp, #12
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f18a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	bc80      	pop	{r7}
 800f194:	4770      	bx	lr

0800f196 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800f196:	b480      	push	{r7}
 800f198:	b083      	sub	sp, #12
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f19e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bc80      	pop	{r7}
 800f1a8:	4770      	bx	lr

0800f1aa <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800f1aa:	b480      	push	{r7}
 800f1ac:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f1ae:	bf00      	nop
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bc80      	pop	{r7}
 800f1b4:	4770      	bx	lr

0800f1b6 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b083      	sub	sp, #12
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	4603      	mov	r3, r0
 800f1be:	6039      	str	r1, [r7, #0]
 800f1c0:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 800f1c2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bc80      	pop	{r7}
 800f1cc:	4770      	bx	lr

0800f1ce <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800f1ce:	b480      	push	{r7}
 800f1d0:	b083      	sub	sp, #12
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	603a      	str	r2, [r7, #0]
 800f1d8:	80fb      	strh	r3, [r7, #6]
 800f1da:	460b      	mov	r3, r1
 800f1dc:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f1de:	bf00      	nop
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bc80      	pop	{r7}
 800f1e6:	4770      	bx	lr

0800f1e8 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f1ec:	bf00      	nop
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bc80      	pop	{r7}
 800f1f2:	4770      	bx	lr

0800f1f4 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 800f1fc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	bc80      	pop	{r7}
 800f206:	4770      	bx	lr

0800f208 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800f210:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f212:	4618      	mov	r0, r3
 800f214:	370c      	adds	r7, #12
 800f216:	46bd      	mov	sp, r7
 800f218:	bc80      	pop	{r7}
 800f21a:	4770      	bx	lr

0800f21c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800f21c:	b480      	push	{r7}
 800f21e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f220:	bf00      	nop
 800f222:	46bd      	mov	sp, r7
 800f224:	bc80      	pop	{r7}
 800f226:	4770      	bx	lr

0800f228 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 800f228:	b480      	push	{r7}
 800f22a:	b083      	sub	sp, #12
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	bc80      	pop	{r7}
 800f23c:	4770      	bx	lr

0800f23e <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 800f23e:	b480      	push	{r7}
 800f240:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f242:	bf00      	nop
 800f244:	46bd      	mov	sp, r7
 800f246:	bc80      	pop	{r7}
 800f248:	4770      	bx	lr

0800f24a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 800f24a:	b480      	push	{r7}
 800f24c:	b085      	sub	sp, #20
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f256:	2300      	movs	r3, #0
 800f258:	81fb      	strh	r3, [r7, #14]
 800f25a:	e00a      	b.n	800f272 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	4413      	add	r3, r2
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d001      	beq.n	800f26c <IsSlotFree+0x22>
        {
            return false;
 800f268:	2300      	movs	r3, #0
 800f26a:	e006      	b.n	800f27a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f26c:	89fb      	ldrh	r3, [r7, #14]
 800f26e:	3301      	adds	r3, #1
 800f270:	81fb      	strh	r3, [r7, #14]
 800f272:	89fb      	ldrh	r3, [r7, #14]
 800f274:	2b0f      	cmp	r3, #15
 800f276:	d9f1      	bls.n	800f25c <IsSlotFree+0x12>
        }
    }
    return true;
 800f278:	2301      	movs	r3, #1
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3714      	adds	r7, #20
 800f27e:	46bd      	mov	sp, r7
 800f280:	bc80      	pop	{r7}
 800f282:	4770      	bx	lr

0800f284 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800f28e:	e007      	b.n	800f2a0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 800f290:	79fb      	ldrb	r3, [r7, #7]
 800f292:	3301      	adds	r3, #1
 800f294:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 800f296:	79fb      	ldrb	r3, [r7, #7]
 800f298:	2b20      	cmp	r3, #32
 800f29a:	d101      	bne.n	800f2a0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 800f29c:	2300      	movs	r3, #0
 800f29e:	e012      	b.n	800f2c6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800f2a0:	79fb      	ldrb	r3, [r7, #7]
 800f2a2:	011b      	lsls	r3, r3, #4
 800f2a4:	3308      	adds	r3, #8
 800f2a6:	4a0a      	ldr	r2, [pc, #40]	@ (800f2d0 <MallocNewMacCommandSlot+0x4c>)
 800f2a8:	4413      	add	r3, r2
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff ffcd 	bl	800f24a <IsSlotFree>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	f083 0301 	eor.w	r3, r3, #1
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1e9      	bne.n	800f290 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
 800f2be:	011b      	lsls	r3, r3, #4
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	4a03      	ldr	r2, [pc, #12]	@ (800f2d0 <MallocNewMacCommandSlot+0x4c>)
 800f2c4:	4413      	add	r3, r2
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20000f88 	.word	0x20000f88

0800f2d4 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d101      	bne.n	800f2e6 <FreeMacCommandSlot+0x12>
    {
        return false;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	e005      	b.n	800f2f2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800f2e6:	2210      	movs	r2, #16
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f007 f95c 	bl	80165a8 <memset1>

    return true;
 800f2f0:	2301      	movs	r3, #1
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 800f2fa:	b480      	push	{r7}
 800f2fc:	b083      	sub	sp, #12
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d101      	bne.n	800f30c <LinkedListInit+0x12>
    {
        return false;
 800f308:	2300      	movs	r3, #0
 800f30a:	e006      	b.n	800f31a <LinkedListInit+0x20>
    }

    list->First = NULL;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2200      	movs	r2, #0
 800f316:	605a      	str	r2, [r3, #4]

    return true;
 800f318:	2301      	movs	r3, #1
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	370c      	adds	r7, #12
 800f31e:	46bd      	mov	sp, r7
 800f320:	bc80      	pop	{r7}
 800f322:	4770      	bx	lr

0800f324 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d002      	beq.n	800f33a <LinkedListAdd+0x16>
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <LinkedListAdd+0x1a>
    {
        return false;
 800f33a:	2300      	movs	r3, #0
 800f33c:	e015      	b.n	800f36a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d102      	bne.n	800f34c <LinkedListAdd+0x28>
    {
        list->First = element;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d003      	beq.n	800f35c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2200      	movs	r2, #0
 800f360:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	683a      	ldr	r2, [r7, #0]
 800f366:	605a      	str	r2, [r3, #4]

    return true;
 800f368:	2301      	movs	r3, #1
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	bc80      	pop	{r7}
 800f372:	4770      	bx	lr

0800f374 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d002      	beq.n	800f38a <LinkedListGetPrevious+0x16>
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d101      	bne.n	800f38e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	e016      	b.n	800f3bc <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d00c      	beq.n	800f3b6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f39c:	e002      	b.n	800f3a4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d007      	beq.n	800f3ba <LinkedListGetPrevious+0x46>
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d1f4      	bne.n	800f39e <LinkedListGetPrevious+0x2a>
 800f3b4:	e001      	b.n	800f3ba <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bc80      	pop	{r7}
 800f3c4:	4770      	bx	lr

0800f3c6 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b084      	sub	sp, #16
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d002      	beq.n	800f3dc <LinkedListRemove+0x16>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d101      	bne.n	800f3e0 <LinkedListRemove+0x1a>
    {
        return false;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e020      	b.n	800f422 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800f3e0:	6839      	ldr	r1, [r7, #0]
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7ff ffc6 	bl	800f374 <LinkedListGetPrevious>
 800f3e8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d103      	bne.n	800f3fc <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	683a      	ldr	r2, [r7, #0]
 800f402:	429a      	cmp	r2, r3
 800f404:	d102      	bne.n	800f40c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	2200      	movs	r2, #0
 800f41e:	601a      	str	r2, [r3, #0]

    return true;
 800f420:	2301      	movs	r3, #1
}
 800f422:	4618      	mov	r0, r3
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
	...

0800f42c <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	4603      	mov	r3, r0
 800f434:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 800f436:	79fb      	ldrb	r3, [r7, #7]
 800f438:	2b11      	cmp	r3, #17
 800f43a:	bf8c      	ite	hi
 800f43c:	2201      	movhi	r2, #1
 800f43e:	2200      	movls	r2, #0
 800f440:	b2d2      	uxtb	r2, r2
 800f442:	2a00      	cmp	r2, #0
 800f444:	d10d      	bne.n	800f462 <IsSticky+0x36>
 800f446:	4a0a      	ldr	r2, [pc, #40]	@ (800f470 <IsSticky+0x44>)
 800f448:	fa22 f303 	lsr.w	r3, r2, r3
 800f44c:	f003 0301 	and.w	r3, r3, #1
 800f450:	2b00      	cmp	r3, #0
 800f452:	bf14      	ite	ne
 800f454:	2301      	movne	r3, #1
 800f456:	2300      	moveq	r3, #0
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d001      	beq.n	800f462 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 800f45e:	2301      	movs	r3, #1
 800f460:	e000      	b.n	800f464 <IsSticky+0x38>
        default:
            return false;
 800f462:	2300      	movs	r3, #0
    }
}
 800f464:	4618      	mov	r0, r3
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	bc80      	pop	{r7}
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop
 800f470:	00020720 	.word	0x00020720

0800f474 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 800f47e:	2300      	movs	r3, #0
    }
}
 800f480:	4618      	mov	r0, r3
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	bc80      	pop	{r7}
 800f488:	4770      	bx	lr
	...

0800f48c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800f490:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800f494:	2100      	movs	r1, #0
 800f496:	4804      	ldr	r0, [pc, #16]	@ (800f4a8 <LoRaMacCommandsInit+0x1c>)
 800f498:	f007 f886 	bl	80165a8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800f49c:	4802      	ldr	r0, [pc, #8]	@ (800f4a8 <LoRaMacCommandsInit+0x1c>)
 800f49e:	f7ff ff2c 	bl	800f2fa <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	20000f88 	.word	0x20000f88

0800f4ac <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b086      	sub	sp, #24
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	60b9      	str	r1, [r7, #8]
 800f4b6:	607a      	str	r2, [r7, #4]
 800f4b8:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d101      	bne.n	800f4c4 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e03b      	b.n	800f53c <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f4c4:	f7ff fede 	bl	800f284 <MallocNewMacCommandSlot>
 800f4c8:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d101      	bne.n	800f4d4 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f4d0:	2302      	movs	r3, #2
 800f4d2:	e033      	b.n	800f53c <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800f4d4:	6979      	ldr	r1, [r7, #20]
 800f4d6:	481b      	ldr	r0, [pc, #108]	@ (800f544 <LoRaMacCommandsAddCmd+0x98>)
 800f4d8:	f7ff ff24 	bl	800f324 <LinkedListAdd>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	f083 0301 	eor.w	r3, r3, #1
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 800f4e8:	2305      	movs	r3, #5
 800f4ea:	e027      	b.n	800f53c <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	7bfa      	ldrb	r2, [r7, #15]
 800f4f0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	3305      	adds	r3, #5
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	b292      	uxth	r2, r2
 800f500:	68b9      	ldr	r1, [r7, #8]
 800f502:	4618      	mov	r0, r3
 800f504:	f007 f815 	bl	8016532 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800f508:	7bfb      	ldrb	r3, [r7, #15]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7ff ff8e 	bl	800f42c <IsSticky>
 800f510:	4603      	mov	r3, r0
 800f512:	461a      	mov	r2, r3
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7ff ffaa 	bl	800f474 <IsConfirmationRequired>
 800f520:	4603      	mov	r3, r0
 800f522:	461a      	mov	r2, r3
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800f528:	4b06      	ldr	r3, [pc, #24]	@ (800f544 <LoRaMacCommandsAddCmd+0x98>)
 800f52a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4413      	add	r3, r2
 800f532:	3301      	adds	r3, #1
 800f534:	4a03      	ldr	r2, [pc, #12]	@ (800f544 <LoRaMacCommandsAddCmd+0x98>)
 800f536:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}
 800f544:	20000f88 	.word	0x20000f88

0800f548 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d101      	bne.n	800f55a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f556:	2301      	movs	r3, #1
 800f558:	e021      	b.n	800f59e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800f55a:	6879      	ldr	r1, [r7, #4]
 800f55c:	4812      	ldr	r0, [pc, #72]	@ (800f5a8 <LoRaMacCommandsRemoveCmd+0x60>)
 800f55e:	f7ff ff32 	bl	800f3c6 <LinkedListRemove>
 800f562:	4603      	mov	r3, r0
 800f564:	f083 0301 	eor.w	r3, r3, #1
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f56e:	2303      	movs	r3, #3
 800f570:	e015      	b.n	800f59e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800f572:	4b0d      	ldr	r3, [pc, #52]	@ (800f5a8 <LoRaMacCommandsRemoveCmd+0x60>)
 800f574:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	689b      	ldr	r3, [r3, #8]
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	3b01      	subs	r3, #1
 800f580:	4a09      	ldr	r2, [pc, #36]	@ (800f5a8 <LoRaMacCommandsRemoveCmd+0x60>)
 800f582:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff fea4 	bl	800f2d4 <FreeMacCommandSlot>
 800f58c:	4603      	mov	r3, r0
 800f58e:	f083 0301 	eor.w	r3, r3, #1
 800f592:	b2db      	uxtb	r3, r3
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 800f598:	2305      	movs	r3, #5
 800f59a:	e000      	b.n	800f59e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20000f88 	.word	0x20000f88

0800f5ac <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	6039      	str	r1, [r7, #0]
 800f5b6:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f5f4 <LoRaMacCommandsGetCmd+0x48>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f5be:	e002      	b.n	800f5c6 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d004      	beq.n	800f5d6 <LoRaMacCommandsGetCmd+0x2a>
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	791b      	ldrb	r3, [r3, #4]
 800f5d0:	79fa      	ldrb	r2, [r7, #7]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d1f4      	bne.n	800f5c0 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f5e2:	2303      	movs	r3, #3
 800f5e4:	e000      	b.n	800f5e8 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3714      	adds	r7, #20
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bc80      	pop	{r7}
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	20000f88 	.word	0x20000f88

0800f5f8 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f5fe:	4b0f      	ldr	r3, [pc, #60]	@ (800f63c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800f604:	e012      	b.n	800f62c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	7b1b      	ldrb	r3, [r3, #12]
 800f60a:	f083 0301 	eor.w	r3, r3, #1
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	2b00      	cmp	r3, #0
 800f612:	d008      	beq.n	800f626 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f7ff ff94 	bl	800f548 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	607b      	str	r3, [r7, #4]
 800f624:	e002      	b.n	800f62c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1e9      	bne.n	800f606 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3708      	adds	r7, #8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	20000f88 	.word	0x20000f88

0800f640 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f646:	4b13      	ldr	r3, [pc, #76]	@ (800f694 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800f64c:	e01a      	b.n	800f684 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	791b      	ldrb	r3, [r3, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	f7ff fee7 	bl	800f42c <IsSticky>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00d      	beq.n	800f680 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	791b      	ldrb	r3, [r3, #4]
 800f668:	4618      	mov	r0, r3
 800f66a:	f7ff ff03 	bl	800f474 <IsConfirmationRequired>
 800f66e:	4603      	mov	r3, r0
 800f670:	f083 0301 	eor.w	r3, r3, #1
 800f674:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f676:	2b00      	cmp	r3, #0
 800f678:	d002      	beq.n	800f680 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7ff ff64 	bl	800f548 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1e1      	bne.n	800f64e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	20000f88 	.word	0x20000f88

0800f698 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d101      	bne.n	800f6aa <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e005      	b.n	800f6b6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800f6aa:	4b05      	ldr	r3, [pc, #20]	@ (800f6c0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800f6ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bc80      	pop	{r7}
 800f6be:	4770      	bx	lr
 800f6c0:	20000f88 	.word	0x20000f88

0800f6c4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b088      	sub	sp, #32
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800f6d0:	4b25      	ldr	r3, [pc, #148]	@ (800f768 <LoRaMacCommandsSerializeCmds+0xa4>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d002      	beq.n	800f6e6 <LoRaMacCommandsSerializeCmds+0x22>
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d126      	bne.n	800f734 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e039      	b.n	800f75e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800f6ea:	7efb      	ldrb	r3, [r7, #27]
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	1ad2      	subs	r2, r2, r3
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d320      	bcc.n	800f73c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 800f6fa:	7efb      	ldrb	r3, [r7, #27]
 800f6fc:	1c5a      	adds	r2, r3, #1
 800f6fe:	76fa      	strb	r2, [r7, #27]
 800f700:	461a      	mov	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4413      	add	r3, r2
 800f706:	69fa      	ldr	r2, [r7, #28]
 800f708:	7912      	ldrb	r2, [r2, #4]
 800f70a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800f70c:	7efb      	ldrb	r3, [r7, #27]
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	18d0      	adds	r0, r2, r3
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	1d59      	adds	r1, r3, #5
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	461a      	mov	r2, r3
 800f71e:	f006 ff08 	bl	8016532 <memcpy1>
            itr += curElement->PayloadSize;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	b2da      	uxtb	r2, r3
 800f728:	7efb      	ldrb	r3, [r7, #27]
 800f72a:	4413      	add	r3, r2
 800f72c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1d7      	bne.n	800f6ea <LoRaMacCommandsSerializeCmds+0x26>
 800f73a:	e009      	b.n	800f750 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 800f73c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800f73e:	e007      	b.n	800f750 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 800f746:	69f8      	ldr	r0, [r7, #28]
 800f748:	f7ff fefe 	bl	800f548 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d1f4      	bne.n	800f740 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800f756:	68b8      	ldr	r0, [r7, #8]
 800f758:	f7ff ff9e 	bl	800f698 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3720      	adds	r7, #32
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	20000f88 	.word	0x20000f88

0800f76c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 800f77a:	79fb      	ldrb	r3, [r7, #7]
 800f77c:	3b02      	subs	r3, #2
 800f77e:	2b11      	cmp	r3, #17
 800f780:	d850      	bhi.n	800f824 <LoRaMacCommandsGetCmdSize+0xb8>
 800f782:	a201      	add	r2, pc, #4	@ (adr r2, 800f788 <LoRaMacCommandsGetCmdSize+0x1c>)
 800f784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f788:	0800f7d1 	.word	0x0800f7d1
 800f78c:	0800f7d7 	.word	0x0800f7d7
 800f790:	0800f7dd 	.word	0x0800f7dd
 800f794:	0800f7e3 	.word	0x0800f7e3
 800f798:	0800f7e9 	.word	0x0800f7e9
 800f79c:	0800f7ef 	.word	0x0800f7ef
 800f7a0:	0800f7f5 	.word	0x0800f7f5
 800f7a4:	0800f7fb 	.word	0x0800f7fb
 800f7a8:	0800f801 	.word	0x0800f801
 800f7ac:	0800f825 	.word	0x0800f825
 800f7b0:	0800f825 	.word	0x0800f825
 800f7b4:	0800f807 	.word	0x0800f807
 800f7b8:	0800f825 	.word	0x0800f825
 800f7bc:	0800f825 	.word	0x0800f825
 800f7c0:	0800f80d 	.word	0x0800f80d
 800f7c4:	0800f813 	.word	0x0800f813
 800f7c8:	0800f819 	.word	0x0800f819
 800f7cc:	0800f81f 	.word	0x0800f81f
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 800f7d0:	2303      	movs	r3, #3
 800f7d2:	73fb      	strb	r3, [r7, #15]
            break;
 800f7d4:	e027      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800f7d6:	2305      	movs	r3, #5
 800f7d8:	73fb      	strb	r3, [r7, #15]
            break;
 800f7da:	e024      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800f7dc:	2302      	movs	r3, #2
 800f7de:	73fb      	strb	r3, [r7, #15]
            break;
 800f7e0:	e021      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 800f7e2:	2305      	movs	r3, #5
 800f7e4:	73fb      	strb	r3, [r7, #15]
            break;
 800f7e6:	e01e      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	73fb      	strb	r3, [r7, #15]
            break;
 800f7ec:	e01b      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800f7ee:	2306      	movs	r3, #6
 800f7f0:	73fb      	strb	r3, [r7, #15]
            break;
 800f7f2:	e018      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	73fb      	strb	r3, [r7, #15]
            break;
 800f7f8:	e015      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	73fb      	strb	r3, [r7, #15]
            break;
 800f7fe:	e012      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800f800:	2305      	movs	r3, #5
 800f802:	73fb      	strb	r3, [r7, #15]
            break;
 800f804:	e00f      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800f806:	2306      	movs	r3, #6
 800f808:	73fb      	strb	r3, [r7, #15]
            break;
 800f80a:	e00c      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800f80c:	2301      	movs	r3, #1
 800f80e:	73fb      	strb	r3, [r7, #15]
            break;
 800f810:	e009      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800f812:	2305      	movs	r3, #5
 800f814:	73fb      	strb	r3, [r7, #15]
            break;
 800f816:	e006      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800f818:	2304      	movs	r3, #4
 800f81a:	73fb      	strb	r3, [r7, #15]
            break;
 800f81c:	e003      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800f81e:	2304      	movs	r3, #4
 800f820:	73fb      	strb	r3, [r7, #15]
            break;
 800f822:	e000      	b.n	800f826 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 800f824:	bf00      	nop
        }
    }
    return cidSize;
 800f826:	7bfb      	ldrb	r3, [r7, #15]
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3714      	adds	r7, #20
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bc80      	pop	{r7}
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop

0800f834 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4a07      	ldr	r2, [pc, #28]	@ (800f85c <IncreaseBufferPointer+0x28>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d102      	bne.n	800f84a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f844:	4b06      	ldr	r3, [pc, #24]	@ (800f860 <IncreaseBufferPointer+0x2c>)
 800f846:	607b      	str	r3, [r7, #4]
 800f848:	e002      	b.n	800f850 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	3304      	adds	r3, #4
 800f84e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800f850:	687b      	ldr	r3, [r7, #4]
}
 800f852:	4618      	mov	r0, r3
 800f854:	370c      	adds	r7, #12
 800f856:	46bd      	mov	sp, r7
 800f858:	bc80      	pop	{r7}
 800f85a:	4770      	bx	lr
 800f85c:	200011b0 	.word	0x200011b0
 800f860:	200011a0 	.word	0x200011a0

0800f864 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	4603      	mov	r3, r0
 800f86c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 800f86e:	79fb      	ldrb	r3, [r7, #7]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d101      	bne.n	800f878 <IsListEmpty+0x14>
    {
        return true;
 800f874:	2301      	movs	r3, #1
 800f876:	e000      	b.n	800f87a <IsListEmpty+0x16>
    }
    return false;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	bc80      	pop	{r7}
 800f882:	4770      	bx	lr

0800f884 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	4603      	mov	r3, r0
 800f88c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800f88e:	79fb      	ldrb	r3, [r7, #7]
 800f890:	2b04      	cmp	r3, #4
 800f892:	d901      	bls.n	800f898 <IsListFull+0x14>
    {
        return true;
 800f894:	2301      	movs	r3, #1
 800f896:	e000      	b.n	800f89a <IsListFull+0x16>
    }
    return false;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	370c      	adds	r7, #12
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bc80      	pop	{r7}
 800f8a2:	4770      	bx	lr

0800f8a4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b086      	sub	sp, #24
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	60b9      	str	r1, [r7, #8]
 800f8ae:	607a      	str	r2, [r7, #4]
 800f8b0:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f8b6:	4b13      	ldr	r3, [pc, #76]	@ (800f904 <GetElement+0x60>)
 800f8b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff ffd1 	bl	800f864 <IsListEmpty>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d001      	beq.n	800f8cc <GetElement+0x28>
    {
        return NULL;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	e017      	b.n	800f8fc <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	74fb      	strb	r3, [r7, #19]
 800f8d0:	e00d      	b.n	800f8ee <GetElement+0x4a>
    {
        if( element->Request == request )
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	7bfa      	ldrb	r2, [r7, #15]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d101      	bne.n	800f8e0 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	e00d      	b.n	800f8fc <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 800f8e0:	6978      	ldr	r0, [r7, #20]
 800f8e2:	f7ff ffa7 	bl	800f834 <IncreaseBufferPointer>
 800f8e6:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f8e8:	7cfb      	ldrb	r3, [r7, #19]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	74fb      	strb	r3, [r7, #19]
 800f8ee:	4b05      	ldr	r3, [pc, #20]	@ (800f904 <GetElement+0x60>)
 800f8f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f8f4:	7cfa      	ldrb	r2, [r7, #19]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d3eb      	bcc.n	800f8d2 <GetElement+0x2e>
    }

    return NULL;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	20001194 	.word	0x20001194

0800f908 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 800f910:	4a0c      	ldr	r2, [pc, #48]	@ (800f944 <LoRaMacConfirmQueueInit+0x3c>)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800f916:	4b0b      	ldr	r3, [pc, #44]	@ (800f944 <LoRaMacConfirmQueueInit+0x3c>)
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f91e:	4b09      	ldr	r3, [pc, #36]	@ (800f944 <LoRaMacConfirmQueueInit+0x3c>)
 800f920:	4a09      	ldr	r2, [pc, #36]	@ (800f948 <LoRaMacConfirmQueueInit+0x40>)
 800f922:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f924:	4b07      	ldr	r3, [pc, #28]	@ (800f944 <LoRaMacConfirmQueueInit+0x3c>)
 800f926:	4a08      	ldr	r2, [pc, #32]	@ (800f948 <LoRaMacConfirmQueueInit+0x40>)
 800f928:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800f92a:	2214      	movs	r2, #20
 800f92c:	21ff      	movs	r1, #255	@ 0xff
 800f92e:	4806      	ldr	r0, [pc, #24]	@ (800f948 <LoRaMacConfirmQueueInit+0x40>)
 800f930:	f006 fe3a 	bl	80165a8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f934:	4b03      	ldr	r3, [pc, #12]	@ (800f944 <LoRaMacConfirmQueueInit+0x3c>)
 800f936:	2201      	movs	r2, #1
 800f938:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800f93c:	bf00      	nop
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	20001194 	.word	0x20001194
 800f948:	200011a0 	.word	0x200011a0

0800f94c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f954:	4b19      	ldr	r3, [pc, #100]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff ff92 	bl	800f884 <IsListFull>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d001      	beq.n	800f96a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 800f966:	2300      	movs	r3, #0
 800f968:	e024      	b.n	800f9b4 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800f96a:	4b14      	ldr	r3, [pc, #80]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	7812      	ldrb	r2, [r2, #0]
 800f972:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800f974:	4b11      	ldr	r3, [pc, #68]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	7852      	ldrb	r2, [r2, #1]
 800f97c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800f97e:	4b0f      	ldr	r3, [pc, #60]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f980:	689b      	ldr	r3, [r3, #8]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	78d2      	ldrb	r2, [r2, #3]
 800f986:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800f988:	4b0c      	ldr	r3, [pc, #48]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	7892      	ldrb	r2, [r2, #2]
 800f990:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800f992:	4b0a      	ldr	r3, [pc, #40]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f994:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f998:	3301      	adds	r3, #1
 800f99a:	b2da      	uxtb	r2, r3
 800f99c:	4b07      	ldr	r3, [pc, #28]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f99e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800f9a2:	4b06      	ldr	r3, [pc, #24]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7ff ff44 	bl	800f834 <IncreaseBufferPointer>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	4a03      	ldr	r2, [pc, #12]	@ (800f9bc <LoRaMacConfirmQueueAdd+0x70>)
 800f9b0:	6093      	str	r3, [r2, #8]

    return true;
 800f9b2:	2301      	movs	r3, #1
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	20001194 	.word	0x20001194

0800f9c0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f9c4:	4b0e      	ldr	r3, [pc, #56]	@ (800fa00 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800f9c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff ff4a 	bl	800f864 <IsListEmpty>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d001      	beq.n	800f9da <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	e010      	b.n	800f9fc <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800f9da:	4b09      	ldr	r3, [pc, #36]	@ (800fa00 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800f9dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	b2da      	uxtb	r2, r3
 800f9e4:	4b06      	ldr	r3, [pc, #24]	@ (800fa00 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800f9e6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800f9ea:	4b05      	ldr	r3, [pc, #20]	@ (800fa00 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7ff ff20 	bl	800f834 <IncreaseBufferPointer>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	4a02      	ldr	r2, [pc, #8]	@ (800fa00 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800f9f8:	6053      	str	r3, [r2, #4]

    return true;
 800f9fa:	2301      	movs	r3, #1
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	20001194 	.word	0x20001194

0800fa04 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	460a      	mov	r2, r1
 800fa0e:	71fb      	strb	r3, [r7, #7]
 800fa10:	4613      	mov	r3, r2
 800fa12:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 800fa14:	2300      	movs	r3, #0
 800fa16:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fa18:	4b10      	ldr	r3, [pc, #64]	@ (800fa5c <LoRaMacConfirmQueueSetStatus+0x58>)
 800fa1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7ff ff20 	bl	800f864 <IsListEmpty>
 800fa24:	4603      	mov	r3, r0
 800fa26:	f083 0301 	eor.w	r3, r3, #1
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d011      	beq.n	800fa54 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa30:	4b0a      	ldr	r3, [pc, #40]	@ (800fa5c <LoRaMacConfirmQueueSetStatus+0x58>)
 800fa32:	6859      	ldr	r1, [r3, #4]
 800fa34:	4b09      	ldr	r3, [pc, #36]	@ (800fa5c <LoRaMacConfirmQueueSetStatus+0x58>)
 800fa36:	689a      	ldr	r2, [r3, #8]
 800fa38:	79bb      	ldrb	r3, [r7, #6]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff ff32 	bl	800f8a4 <GetElement>
 800fa40:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d005      	beq.n	800fa54 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	79fa      	ldrb	r2, [r7, #7]
 800fa4c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2201      	movs	r2, #1
 800fa52:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800fa54:	bf00      	nop
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	20001194 	.word	0x20001194

0800fa60 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	4603      	mov	r3, r0
 800fa68:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fa6e:	4b10      	ldr	r3, [pc, #64]	@ (800fab0 <LoRaMacConfirmQueueGetStatus+0x50>)
 800fa70:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff fef5 	bl	800f864 <IsListEmpty>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	f083 0301 	eor.w	r3, r3, #1
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00e      	beq.n	800faa4 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa86:	4b0a      	ldr	r3, [pc, #40]	@ (800fab0 <LoRaMacConfirmQueueGetStatus+0x50>)
 800fa88:	6859      	ldr	r1, [r3, #4]
 800fa8a:	4b09      	ldr	r3, [pc, #36]	@ (800fab0 <LoRaMacConfirmQueueGetStatus+0x50>)
 800fa8c:	689a      	ldr	r2, [r3, #8]
 800fa8e:	79fb      	ldrb	r3, [r7, #7]
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7ff ff07 	bl	800f8a4 <GetElement>
 800fa96:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d002      	beq.n	800faa4 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	785b      	ldrb	r3, [r3, #1]
 800faa2:	e000      	b.n	800faa6 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800faa4:	2301      	movs	r3, #1
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	20001194 	.word	0x20001194

0800fab4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	4603      	mov	r3, r0
 800fabc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800fabe:	4b16      	ldr	r3, [pc, #88]	@ (800fb18 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800fac4:	4a14      	ldr	r2, [pc, #80]	@ (800fb18 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800fac6:	79fb      	ldrb	r3, [r7, #7]
 800fac8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800facc:	4b12      	ldr	r3, [pc, #72]	@ (800fb18 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800face:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7ff fec6 	bl	800f864 <IsListEmpty>
 800fad8:	4603      	mov	r3, r0
 800fada:	f083 0301 	eor.w	r3, r3, #1
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d015      	beq.n	800fb10 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	79fa      	ldrb	r2, [r7, #7]
 800fae8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	78db      	ldrb	r3, [r3, #3]
 800faee:	f083 0301 	eor.w	r3, r3, #1
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2201      	movs	r2, #1
 800fafc:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f7ff fe98 	bl	800f834 <IncreaseBufferPointer>
 800fb04:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 800fb06:	4b04      	ldr	r3, [pc, #16]	@ (800fb18 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	68fa      	ldr	r2, [r7, #12]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d1e9      	bne.n	800fae4 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 800fb10:	bf00      	nop
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	20001194 	.word	0x20001194

0800fb1c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	4603      	mov	r3, r0
 800fb24:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800fb26:	4b09      	ldr	r3, [pc, #36]	@ (800fb4c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800fb28:	6859      	ldr	r1, [r3, #4]
 800fb2a:	4b08      	ldr	r3, [pc, #32]	@ (800fb4c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800fb2c:	689a      	ldr	r2, [r3, #8]
 800fb2e:	79fb      	ldrb	r3, [r7, #7]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff feb7 	bl	800f8a4 <GetElement>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d001      	beq.n	800fb40 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e000      	b.n	800fb42 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	20001194 	.word	0x20001194

0800fb50 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800fb58:	4b25      	ldr	r3, [pc, #148]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fb5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fb5e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 800fb60:	2300      	movs	r3, #0
 800fb62:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800fb64:	f107 0308 	add.w	r3, r7, #8
 800fb68:	2204      	movs	r2, #4
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f006 fd1b 	bl	80165a8 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800fb72:	2300      	movs	r3, #0
 800fb74:	73fb      	strb	r3, [r7, #15]
 800fb76:	e032      	b.n	800fbde <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800fb78:	4b1d      	ldr	r3, [pc, #116]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	781a      	ldrb	r2, [r3, #0]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800fb82:	4b1b      	ldr	r3, [pc, #108]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	785a      	ldrb	r2, [r3, #1]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800fb8c:	4b18      	ldr	r3, [pc, #96]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	789b      	ldrb	r3, [r3, #2]
 800fb92:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 800fb94:	7b7b      	ldrb	r3, [r7, #13]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d005      	beq.n	800fba6 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800fb9a:	4b15      	ldr	r3, [pc, #84]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	4798      	blx	r3
 800fba4:	e00b      	b.n	800fbbe <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800fba6:	4b12      	ldr	r3, [pc, #72]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800fbae:	4b10      	ldr	r3, [pc, #64]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	785b      	ldrb	r3, [r3, #1]
 800fbb4:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800fbb6:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	78db      	ldrb	r3, [r3, #3]
 800fbbc:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800fbbe:	f7ff feff 	bl	800f9c0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800fbc2:	7b7b      	ldrb	r3, [r7, #13]
 800fbc4:	f083 0301 	eor.w	r3, r3, #1
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d004      	beq.n	800fbd8 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800fbce:	f107 0308 	add.w	r3, r7, #8
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7ff feba 	bl	800f94c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	73fb      	strb	r3, [r7, #15]
 800fbde:	7bfa      	ldrb	r2, [r7, #15]
 800fbe0:	7bbb      	ldrb	r3, [r7, #14]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d3c8      	bcc.n	800fb78 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800fbe6:	bf00      	nop
 800fbe8:	bf00      	nop
 800fbea:	3710      	adds	r7, #16
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	20001194 	.word	0x20001194

0800fbf4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800fbf8:	4b03      	ldr	r3, [pc, #12]	@ (800fc08 <LoRaMacConfirmQueueGetCnt+0x14>)
 800fbfa:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bc80      	pop	{r7}
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	20001194 	.word	0x20001194

0800fc0c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fc10:	4b06      	ldr	r3, [pc, #24]	@ (800fc2c <LoRaMacConfirmQueueIsFull+0x20>)
 800fc12:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fe34 	bl	800f884 <IsListFull>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 800fc22:	2301      	movs	r3, #1
 800fc24:	e000      	b.n	800fc28 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 800fc26:	2300      	movs	r3, #0
    }
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	20001194 	.word	0x20001194

0800fc30 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08e      	sub	sp, #56	@ 0x38
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	607b      	str	r3, [r7, #4]
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	817b      	strh	r3, [r7, #10]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d101      	bne.n	800fc4c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fc48:	2309      	movs	r3, #9
 800fc4a:	e084      	b.n	800fd56 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 800fc52:	2301      	movs	r3, #1
 800fc54:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 800fc56:	f107 0320 	add.w	r3, r7, #32
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	601a      	str	r2, [r3, #0]
 800fc5e:	605a      	str	r2, [r3, #4]
 800fc60:	609a      	str	r2, [r3, #8]
 800fc62:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 800fc64:	f107 0310 	add.w	r3, r7, #16
 800fc68:	2200      	movs	r2, #0
 800fc6a:	601a      	str	r2, [r3, #0]
 800fc6c:	605a      	str	r2, [r3, #4]
 800fc6e:	609a      	str	r2, [r3, #8]
 800fc70:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 800fc72:	2301      	movs	r3, #1
 800fc74:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 800fc76:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800fc7a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	0a1b      	lsrs	r3, r3, #8
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	0c1b      	lsrs	r3, r3, #16
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	0e1b      	lsrs	r3, r3, #24
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 800fc9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800fca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fca2:	0a1b      	lsrs	r3, r3, #8
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800fca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcaa:	0c1b      	lsrs	r3, r3, #16
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800fcb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcb2:	0e1b      	lsrs	r3, r3, #24
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 800fcb8:	e048      	b.n	800fd4c <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 800fcba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	77fb      	strb	r3, [r7, #31]
        ctr++;
 800fcc0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800fcc6:	f107 0320 	add.w	r3, r7, #32
 800fcca:	7a7a      	ldrb	r2, [r7, #9]
 800fccc:	f107 0010 	add.w	r0, r7, #16
 800fcd0:	2110      	movs	r1, #16
 800fcd2:	f006 fa17 	bl	8016104 <SecureElementAesEncrypt>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d001      	beq.n	800fce0 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fcdc:	230e      	movs	r3, #14
 800fcde:	e03a      	b.n	800fd56 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fce0:	2300      	movs	r3, #0
 800fce2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800fce6:	e01e      	b.n	800fd26 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800fce8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800fcec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fcf0:	4413      	add	r3, r2
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	7819      	ldrb	r1, [r3, #0]
 800fcfa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fcfe:	3338      	adds	r3, #56	@ 0x38
 800fd00:	443b      	add	r3, r7
 800fd02:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800fd06:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 800fd0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fd0e:	4403      	add	r3, r0
 800fd10:	4618      	mov	r0, r3
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4403      	add	r3, r0
 800fd16:	404a      	eors	r2, r1
 800fd18:	b2d2      	uxtb	r2, r2
 800fd1a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fd1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fd20:	3301      	adds	r3, #1
 800fd22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800fd26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fd2a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800fd2e:	2a10      	cmp	r2, #16
 800fd30:	bfa8      	it	ge
 800fd32:	2210      	movge	r2, #16
 800fd34:	b212      	sxth	r2, r2
 800fd36:	4293      	cmp	r3, r2
 800fd38:	dbd6      	blt.n	800fce8 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 800fd3a:	897b      	ldrh	r3, [r7, #10]
 800fd3c:	3b10      	subs	r3, #16
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 800fd42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd46:	3310      	adds	r3, #16
 800fd48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 800fd4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	dcb2      	bgt.n	800fcba <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3738      	adds	r7, #56	@ 0x38
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800fd5e:	b490      	push	{r4, r7}
 800fd60:	b082      	sub	sp, #8
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	4604      	mov	r4, r0
 800fd66:	4608      	mov	r0, r1
 800fd68:	4611      	mov	r1, r2
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	4623      	mov	r3, r4
 800fd6e:	80fb      	strh	r3, [r7, #6]
 800fd70:	4603      	mov	r3, r0
 800fd72:	717b      	strb	r3, [r7, #5]
 800fd74:	460b      	mov	r3, r1
 800fd76:	713b      	strb	r3, [r7, #4]
 800fd78:	4613      	mov	r3, r2
 800fd7a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d101      	bne.n	800fd86 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fd82:	2309      	movs	r3, #9
 800fd84:	e04e      	b.n	800fe24 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	2249      	movs	r2, #73	@ 0x49
 800fd8a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	2200      	movs	r2, #0
 800fd92:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	3302      	adds	r3, #2
 800fd98:	2200      	movs	r2, #0
 800fd9a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	3303      	adds	r3, #3
 800fda0:	2200      	movs	r2, #0
 800fda2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	3304      	adds	r3, #4
 800fda8:	2200      	movs	r2, #0
 800fdaa:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	3305      	adds	r3, #5
 800fdb0:	78fa      	ldrb	r2, [r7, #3]
 800fdb2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	3306      	adds	r3, #6
 800fdb8:	693a      	ldr	r2, [r7, #16]
 800fdba:	b2d2      	uxtb	r2, r2
 800fdbc:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	0a1a      	lsrs	r2, r3, #8
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	3307      	adds	r3, #7
 800fdc6:	b2d2      	uxtb	r2, r2
 800fdc8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	0c1a      	lsrs	r2, r3, #16
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	3308      	adds	r3, #8
 800fdd2:	b2d2      	uxtb	r2, r2
 800fdd4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	0e1a      	lsrs	r2, r3, #24
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	3309      	adds	r3, #9
 800fdde:	b2d2      	uxtb	r2, r2
 800fde0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	330a      	adds	r3, #10
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	b2d2      	uxtb	r2, r2
 800fdea:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	0a1a      	lsrs	r2, r3, #8
 800fdf0:	69bb      	ldr	r3, [r7, #24]
 800fdf2:	330b      	adds	r3, #11
 800fdf4:	b2d2      	uxtb	r2, r2
 800fdf6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	0c1a      	lsrs	r2, r3, #16
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	330c      	adds	r3, #12
 800fe00:	b2d2      	uxtb	r2, r2
 800fe02:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	0e1a      	lsrs	r2, r3, #24
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	330d      	adds	r3, #13
 800fe0c:	b2d2      	uxtb	r2, r2
 800fe0e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	330e      	adds	r3, #14
 800fe14:	2200      	movs	r2, #0
 800fe16:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800fe18:	69bb      	ldr	r3, [r7, #24]
 800fe1a:	330f      	adds	r3, #15
 800fe1c:	88fa      	ldrh	r2, [r7, #6]
 800fe1e:	b2d2      	uxtb	r2, r2
 800fe20:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bc90      	pop	{r4, r7}
 800fe2c:	4770      	bx	lr

0800fe2e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800fe2e:	b590      	push	{r4, r7, lr}
 800fe30:	b08b      	sub	sp, #44	@ 0x2c
 800fe32:	af04      	add	r7, sp, #16
 800fe34:	6078      	str	r0, [r7, #4]
 800fe36:	4608      	mov	r0, r1
 800fe38:	4611      	mov	r1, r2
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	807b      	strh	r3, [r7, #2]
 800fe40:	460b      	mov	r3, r1
 800fe42:	707b      	strb	r3, [r7, #1]
 800fe44:	4613      	mov	r3, r2
 800fe46:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d002      	beq.n	800fe54 <ComputeCmacB0+0x26>
 800fe4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d101      	bne.n	800fe58 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fe54:	2309      	movs	r3, #9
 800fe56:	e024      	b.n	800fea2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800fe58:	887b      	ldrh	r3, [r7, #2]
 800fe5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe5e:	d901      	bls.n	800fe64 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800fe60:	230d      	movs	r3, #13
 800fe62:	e01e      	b.n	800fea2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800fe64:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 800fe68:	783a      	ldrb	r2, [r7, #0]
 800fe6a:	7879      	ldrb	r1, [r7, #1]
 800fe6c:	8878      	ldrh	r0, [r7, #2]
 800fe6e:	f107 0308 	add.w	r3, r7, #8
 800fe72:	9302      	str	r3, [sp, #8]
 800fe74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe76:	9301      	str	r3, [sp, #4]
 800fe78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	4623      	mov	r3, r4
 800fe7e:	f7ff ff6e 	bl	800fd5e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800fe82:	887a      	ldrh	r2, [r7, #2]
 800fe84:	7879      	ldrb	r1, [r7, #1]
 800fe86:	f107 0008 	add.w	r0, r7, #8
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	460b      	mov	r3, r1
 800fe90:	6879      	ldr	r1, [r7, #4]
 800fe92:	f006 f8f1 	bl	8016078 <SecureElementComputeAesCmac>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d001      	beq.n	800fea0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fe9c:	230e      	movs	r3, #14
 800fe9e:	e000      	b.n	800fea2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	371c      	adds	r7, #28
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd90      	pop	{r4, r7, pc}

0800feaa <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 800feaa:	b590      	push	{r4, r7, lr}
 800feac:	b0cd      	sub	sp, #308	@ 0x134
 800feae:	af04      	add	r7, sp, #16
 800feb0:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800feb4:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800feb8:	6020      	str	r0, [r4, #0]
 800feba:	460c      	mov	r4, r1
 800febc:	4610      	mov	r0, r2
 800febe:	4619      	mov	r1, r3
 800fec0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fec4:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800fec8:	4622      	mov	r2, r4
 800feca:	801a      	strh	r2, [r3, #0]
 800fecc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fed0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 800fed4:	4602      	mov	r2, r0
 800fed6:	701a      	strb	r2, [r3, #0]
 800fed8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fedc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fee0:	460a      	mov	r2, r1
 800fee2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 800fee4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fee8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fef2:	2309      	movs	r3, #9
 800fef4:	e063      	b.n	800ffbe <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800fef6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fefa:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800fefe:	881b      	ldrh	r3, [r3, #0]
 800ff00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff04:	d901      	bls.n	800ff0a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ff06:	230d      	movs	r3, #13
 800ff08:	e059      	b.n	800ffbe <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ff0a:	f107 030c 	add.w	r3, r7, #12
 800ff0e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800ff12:	2100      	movs	r1, #0
 800ff14:	4618      	mov	r0, r3
 800ff16:	f006 fb47 	bl	80165a8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ff1a:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 800ff1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff22:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ff26:	781a      	ldrb	r2, [r3, #0]
 800ff28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff2c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 800ff30:	7819      	ldrb	r1, [r3, #0]
 800ff32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff36:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800ff3a:	8818      	ldrh	r0, [r3, #0]
 800ff3c:	f107 030c 	add.w	r3, r7, #12
 800ff40:	9302      	str	r3, [sp, #8]
 800ff42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ff46:	9301      	str	r3, [sp, #4]
 800ff48:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	4623      	mov	r3, r4
 800ff50:	f7ff ff05 	bl	800fd5e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800ff54:	f107 030c 	add.w	r3, r7, #12
 800ff58:	3310      	adds	r3, #16
 800ff5a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800ff5e:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 800ff62:	8812      	ldrh	r2, [r2, #0]
 800ff64:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800ff68:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800ff6c:	6809      	ldr	r1, [r1, #0]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f006 fadf 	bl	8016532 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ff74:	2306      	movs	r3, #6
 800ff76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800ff7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff7e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	3310      	adds	r3, #16
 800ff86:	4619      	mov	r1, r3
 800ff88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff8c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	f107 000c 	add.w	r0, r7, #12
 800ff96:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ff9a:	f006 f887 	bl	80160ac <SecureElementVerifyAesCmac>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ffa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d101      	bne.n	800ffb0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 800ffac:	2300      	movs	r3, #0
 800ffae:	e006      	b.n	800ffbe <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800ffb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d101      	bne.n	800ffbc <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e000      	b.n	800ffbe <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ffbc:	230e      	movs	r3, #14
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd90      	pop	{r4, r7, pc}

0800ffc8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	4603      	mov	r3, r0
 800ffd0:	6039      	str	r1, [r7, #0]
 800ffd2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	73fb      	strb	r3, [r7, #15]
 800ffd8:	e011      	b.n	800fffe <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
 800ffdc:	4a0c      	ldr	r2, [pc, #48]	@ (8010010 <GetKeyAddrItem+0x48>)
 800ffde:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800ffe2:	79fa      	ldrb	r2, [r7, #7]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d107      	bne.n	800fff8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 800ffe8:	7bfb      	ldrb	r3, [r7, #15]
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	4a08      	ldr	r2, [pc, #32]	@ (8010010 <GetKeyAddrItem+0x48>)
 800ffee:	441a      	add	r2, r3
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800fff4:	2300      	movs	r3, #0
 800fff6:	e006      	b.n	8010006 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
 800fffa:	3301      	adds	r3, #1
 800fffc:	73fb      	strb	r3, [r7, #15]
 800fffe:	7bfb      	ldrb	r3, [r7, #15]
 8010000:	2b01      	cmp	r3, #1
 8010002:	d9ea      	bls.n	800ffda <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8010004:	230b      	movs	r3, #11
}
 8010006:	4618      	mov	r0, r3
 8010008:	3714      	adds	r7, #20
 801000a:	46bd      	mov	sp, r7
 801000c:	bc80      	pop	{r7}
 801000e:	4770      	bx	lr
 8010010:	200000b4 	.word	0x200000b4

08010014 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b088      	sub	sp, #32
 8010018:	af00      	add	r7, sp, #0
 801001a:	60b9      	str	r1, [r7, #8]
 801001c:	607a      	str	r2, [r7, #4]
 801001e:	461a      	mov	r2, r3
 8010020:	4603      	mov	r3, r0
 8010022:	73fb      	strb	r3, [r7, #15]
 8010024:	4613      	mov	r3, r2
 8010026:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8010028:	f107 0310 	add.w	r3, r7, #16
 801002c:	2200      	movs	r2, #0
 801002e:	601a      	str	r2, [r3, #0]
 8010030:	605a      	str	r2, [r3, #4]
 8010032:	609a      	str	r2, [r3, #8]
 8010034:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8010036:	7bfb      	ldrb	r3, [r7, #15]
 8010038:	2b08      	cmp	r3, #8
 801003a:	d002      	beq.n	8010042 <DeriveSessionKey10x+0x2e>
 801003c:	2b09      	cmp	r3, #9
 801003e:	d003      	beq.n	8010048 <DeriveSessionKey10x+0x34>
 8010040:	e005      	b.n	801004e <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8010042:	2301      	movs	r3, #1
 8010044:	743b      	strb	r3, [r7, #16]
            break;
 8010046:	e004      	b.n	8010052 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8010048:	2302      	movs	r3, #2
 801004a:	743b      	strb	r3, [r7, #16]
            break;
 801004c:	e001      	b.n	8010052 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801004e:	230a      	movs	r3, #10
 8010050:	e02a      	b.n	80100a8 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	b2db      	uxtb	r3, r3
 8010056:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	0a1b      	lsrs	r3, r3, #8
 801005c:	b2db      	uxtb	r3, r3
 801005e:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	0c1b      	lsrs	r3, r3, #16
 8010064:	b2db      	uxtb	r3, r3
 8010066:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	b2db      	uxtb	r3, r3
 801006c:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	0a1b      	lsrs	r3, r3, #8
 8010072:	b2db      	uxtb	r3, r3
 8010074:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	0c1b      	lsrs	r3, r3, #16
 801007a:	b2db      	uxtb	r3, r3
 801007c:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801007e:	89bb      	ldrh	r3, [r7, #12]
 8010080:	b2db      	uxtb	r3, r3
 8010082:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8010084:	89bb      	ldrh	r3, [r7, #12]
 8010086:	0a1b      	lsrs	r3, r3, #8
 8010088:	b29b      	uxth	r3, r3
 801008a:	b2db      	uxtb	r3, r3
 801008c:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801008e:	7bfa      	ldrb	r2, [r7, #15]
 8010090:	f107 0310 	add.w	r3, r7, #16
 8010094:	2101      	movs	r1, #1
 8010096:	4618      	mov	r0, r3
 8010098:	f006 f8b4 	bl	8016204 <SecureElementDeriveAndStoreKey>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80100a2:	230e      	movs	r3, #14
 80100a4:	e000      	b.n	80100a8 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3720      	adds	r7, #32
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	4603      	mov	r3, r0
 80100b8:	6039      	str	r1, [r7, #0]
 80100ba:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d101      	bne.n	80100c6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80100c2:	2309      	movs	r3, #9
 80100c4:	e029      	b.n	801011a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80100c6:	79fb      	ldrb	r3, [r7, #7]
 80100c8:	3b01      	subs	r3, #1
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d822      	bhi.n	8010114 <GetLastFcntDown+0x64>
 80100ce:	a201      	add	r2, pc, #4	@ (adr r2, 80100d4 <GetLastFcntDown+0x24>)
 80100d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d4:	080100e5 	.word	0x080100e5
 80100d8:	080100f1 	.word	0x080100f1
 80100dc:	080100fd 	.word	0x080100fd
 80100e0:	08010109 	.word	0x08010109
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80100e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010124 <GetLastFcntDown+0x74>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	691a      	ldr	r2, [r3, #16]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	601a      	str	r2, [r3, #0]
            break;
 80100ee:	e013      	b.n	8010118 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80100f0:	4b0c      	ldr	r3, [pc, #48]	@ (8010124 <GetLastFcntDown+0x74>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	695a      	ldr	r2, [r3, #20]
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	601a      	str	r2, [r3, #0]
            break;
 80100fa:	e00d      	b.n	8010118 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80100fc:	4b09      	ldr	r3, [pc, #36]	@ (8010124 <GetLastFcntDown+0x74>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	699a      	ldr	r2, [r3, #24]
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	601a      	str	r2, [r3, #0]
            break;
 8010106:	e007      	b.n	8010118 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8010108:	4b06      	ldr	r3, [pc, #24]	@ (8010124 <GetLastFcntDown+0x74>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	69da      	ldr	r2, [r3, #28]
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	601a      	str	r2, [r3, #0]
            break;
 8010112:	e001      	b.n	8010118 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010114:	2305      	movs	r3, #5
 8010116:	e000      	b.n	801011a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	bc80      	pop	{r7}
 8010122:	4770      	bx	lr
 8010124:	200011b8 	.word	0x200011b8

08010128 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	4603      	mov	r3, r0
 8010130:	6039      	str	r1, [r7, #0]
 8010132:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8010134:	2300      	movs	r3, #0
 8010136:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8010138:	f107 020c 	add.w	r2, r7, #12
 801013c:	79fb      	ldrb	r3, [r7, #7]
 801013e:	4611      	mov	r1, r2
 8010140:	4618      	mov	r0, r3
 8010142:	f7ff ffb5 	bl	80100b0 <GetLastFcntDown>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d001      	beq.n	8010150 <CheckFCntDown+0x28>
    {
        return false;
 801014c:	2300      	movs	r3, #0
 801014e:	e00a      	b.n	8010166 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	429a      	cmp	r2, r3
 8010156:	d803      	bhi.n	8010160 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8010158:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801015a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801015e:	d101      	bne.n	8010164 <CheckFCntDown+0x3c>
    {
        return true;
 8010160:	2301      	movs	r3, #1
 8010162:	e000      	b.n	8010166 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8010164:	2300      	movs	r3, #0
    }
}
 8010166:	4618      	mov	r0, r3
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
	...

08010170 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	6039      	str	r1, [r7, #0]
 801017a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801017c:	79fb      	ldrb	r3, [r7, #7]
 801017e:	3b01      	subs	r3, #1
 8010180:	2b03      	cmp	r3, #3
 8010182:	d82b      	bhi.n	80101dc <UpdateFCntDown+0x6c>
 8010184:	a201      	add	r2, pc, #4	@ (adr r2, 801018c <UpdateFCntDown+0x1c>)
 8010186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018a:	bf00      	nop
 801018c:	0801019d 	.word	0x0801019d
 8010190:	080101af 	.word	0x080101af
 8010194:	080101c1 	.word	0x080101c1
 8010198:	080101d3 	.word	0x080101d3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801019c:	4b12      	ldr	r3, [pc, #72]	@ (80101e8 <UpdateFCntDown+0x78>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80101a4:	4b10      	ldr	r3, [pc, #64]	@ (80101e8 <UpdateFCntDown+0x78>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	683a      	ldr	r2, [r7, #0]
 80101aa:	621a      	str	r2, [r3, #32]
            break;
 80101ac:	e017      	b.n	80101de <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80101ae:	4b0e      	ldr	r3, [pc, #56]	@ (80101e8 <UpdateFCntDown+0x78>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80101b6:	4b0c      	ldr	r3, [pc, #48]	@ (80101e8 <UpdateFCntDown+0x78>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	621a      	str	r2, [r3, #32]
            break;
 80101be:	e00e      	b.n	80101de <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80101c0:	4b09      	ldr	r3, [pc, #36]	@ (80101e8 <UpdateFCntDown+0x78>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80101c8:	4b07      	ldr	r3, [pc, #28]	@ (80101e8 <UpdateFCntDown+0x78>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	683a      	ldr	r2, [r7, #0]
 80101ce:	621a      	str	r2, [r3, #32]
            break;
 80101d0:	e005      	b.n	80101de <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80101d2:	4b05      	ldr	r3, [pc, #20]	@ (80101e8 <UpdateFCntDown+0x78>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	61da      	str	r2, [r3, #28]
            break;
 80101da:	e000      	b.n	80101de <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80101dc:	bf00      	nop
    }
}
 80101de:	bf00      	nop
 80101e0:	370c      	adds	r7, #12
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bc80      	pop	{r7}
 80101e6:	4770      	bx	lr
 80101e8:	200011b8 	.word	0x200011b8

080101ec <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80101f2:	4b18      	ldr	r3, [pc, #96]	@ (8010254 <ResetFCnts+0x68>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2200      	movs	r2, #0
 80101f8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80101fa:	4b16      	ldr	r3, [pc, #88]	@ (8010254 <ResetFCnts+0x68>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010202:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010204:	4b13      	ldr	r3, [pc, #76]	@ (8010254 <ResetFCnts+0x68>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f04f 32ff 	mov.w	r2, #4294967295
 801020c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801020e:	4b11      	ldr	r3, [pc, #68]	@ (8010254 <ResetFCnts+0x68>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f04f 32ff 	mov.w	r2, #4294967295
 8010216:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8010218:	4b0e      	ldr	r3, [pc, #56]	@ (8010254 <ResetFCnts+0x68>)
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	4b0d      	ldr	r3, [pc, #52]	@ (8010254 <ResetFCnts+0x68>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	6992      	ldr	r2, [r2, #24]
 8010222:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010224:	2300      	movs	r3, #0
 8010226:	607b      	str	r3, [r7, #4]
 8010228:	e00b      	b.n	8010242 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801022a:	4b0a      	ldr	r3, [pc, #40]	@ (8010254 <ResetFCnts+0x68>)
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	3306      	adds	r3, #6
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4413      	add	r3, r2
 8010236:	f04f 32ff 	mov.w	r2, #4294967295
 801023a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3301      	adds	r3, #1
 8010240:	607b      	str	r3, [r7, #4]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	ddf0      	ble.n	801022a <ResetFCnts+0x3e>
    }
}
 8010248:	bf00      	nop
 801024a:	bf00      	nop
 801024c:	370c      	adds	r7, #12
 801024e:	46bd      	mov	sp, r7
 8010250:	bc80      	pop	{r7}
 8010252:	4770      	bx	lr
 8010254:	200011b8 	.word	0x200011b8

08010258 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8010260:	4b06      	ldr	r3, [pc, #24]	@ (801027c <IsJoinNonce10xOk+0x24>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	429a      	cmp	r2, r3
 801026a:	bf8c      	ite	hi
 801026c:	2301      	movhi	r3, #1
 801026e:	2300      	movls	r3, #0
 8010270:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8010272:	4618      	mov	r0, r3
 8010274:	370c      	adds	r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	bc80      	pop	{r7}
 801027a:	4770      	bx	lr
 801027c:	200011b8 	.word	0x200011b8

08010280 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d101      	bne.n	8010292 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801028e:	2308      	movs	r3, #8
 8010290:	e01c      	b.n	80102cc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8010292:	4a10      	ldr	r2, [pc, #64]	@ (80102d4 <LoRaMacCryptoInit+0x54>)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8010298:	4b0e      	ldr	r3, [pc, #56]	@ (80102d4 <LoRaMacCryptoInit+0x54>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2228      	movs	r2, #40	@ 0x28
 801029e:	2100      	movs	r1, #0
 80102a0:	4618      	mov	r0, r3
 80102a2:	f006 f981 	bl	80165a8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80102a6:	4b0b      	ldr	r3, [pc, #44]	@ (80102d4 <LoRaMacCryptoInit+0x54>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2201      	movs	r2, #1
 80102ac:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80102ae:	4b09      	ldr	r3, [pc, #36]	@ (80102d4 <LoRaMacCryptoInit+0x54>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2201      	movs	r2, #1
 80102b4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80102b6:	4b07      	ldr	r3, [pc, #28]	@ (80102d4 <LoRaMacCryptoInit+0x54>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2201      	movs	r2, #1
 80102bc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80102be:	4b05      	ldr	r3, [pc, #20]	@ (80102d4 <LoRaMacCryptoInit+0x54>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2200      	movs	r2, #0
 80102c4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80102c6:	f7ff ff91 	bl	80101ec <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	200011b8 	.word	0x200011b8

080102d8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80102e0:	4b04      	ldr	r3, [pc, #16]	@ (80102f4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	370c      	adds	r7, #12
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bc80      	pop	{r7}
 80102f2:	4770      	bx	lr
 80102f4:	200011b8 	.word	0x200011b8

080102f8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d101      	bne.n	801030a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010306:	2309      	movs	r3, #9
 8010308:	e006      	b.n	8010318 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801030a:	4b06      	ldr	r3, [pc, #24]	@ (8010324 <LoRaMacCryptoGetFCntUp+0x2c>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	1c5a      	adds	r2, r3, #1
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	bc80      	pop	{r7}
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	200011b8 	.word	0x200011b8

08010328 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b088      	sub	sp, #32
 801032c:	af00      	add	r7, sp, #0
 801032e:	4603      	mov	r3, r0
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
 8010334:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8010336:	2300      	movs	r3, #0
 8010338:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801033e:	2312      	movs	r3, #18
 8010340:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d101      	bne.n	801034c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010348:	2309      	movs	r3, #9
 801034a:	e035      	b.n	80103b8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801034c:	f107 0214 	add.w	r2, r7, #20
 8010350:	7bfb      	ldrb	r3, [r7, #15]
 8010352:	4611      	mov	r1, r2
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff feab 	bl	80100b0 <GetLastFcntDown>
 801035a:	4603      	mov	r3, r0
 801035c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801035e:	7efb      	ldrb	r3, [r7, #27]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d001      	beq.n	8010368 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8010364:	7efb      	ldrb	r3, [r7, #27]
 8010366:	e027      	b.n	80103b8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801036e:	d103      	bne.n	8010378 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	68ba      	ldr	r2, [r7, #8]
 8010374:	601a      	str	r2, [r3, #0]
 8010376:	e01e      	b.n	80103b6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	b29b      	uxth	r3, r3
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	2b00      	cmp	r3, #0
 8010386:	dd05      	ble.n	8010394 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8010388:	697a      	ldr	r2, [r7, #20]
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	441a      	add	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	601a      	str	r2, [r3, #0]
 8010392:	e010      	b.n	80103b6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d104      	bne.n	80103a4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801039a:	697a      	ldr	r2, [r7, #20]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80103a0:	2307      	movs	r3, #7
 80103a2:	e009      	b.n	80103b8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	0c1b      	lsrs	r3, r3, #16
 80103a8:	041b      	lsls	r3, r3, #16
 80103aa:	68ba      	ldr	r2, [r7, #8]
 80103ac:	4413      	add	r3, r2
 80103ae:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80103b6:	2300      	movs	r3, #0
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3720      	adds	r7, #32
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80103c0:	b480      	push	{r7}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d101      	bne.n	80103d2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80103ce:	2309      	movs	r3, #9
 80103d0:	e019      	b.n	8010406 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80103d2:	2300      	movs	r3, #0
 80103d4:	60fb      	str	r3, [r7, #12]
 80103d6:	e012      	b.n	80103fe <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80103d8:	4b0d      	ldr	r3, [pc, #52]	@ (8010410 <LoRaMacCryptoSetMulticastReference+0x50>)
 80103da:	6819      	ldr	r1, [r3, #0]
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	4613      	mov	r3, r2
 80103e0:	005b      	lsls	r3, r3, #1
 80103e2:	4413      	add	r3, r2
 80103e4:	011b      	lsls	r3, r3, #4
 80103e6:	461a      	mov	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4413      	add	r3, r2
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	3206      	adds	r2, #6
 80103f0:	0092      	lsls	r2, r2, #2
 80103f2:	440a      	add	r2, r1
 80103f4:	3204      	adds	r2, #4
 80103f6:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	3301      	adds	r3, #1
 80103fc:	60fb      	str	r3, [r7, #12]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	dde9      	ble.n	80103d8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	3714      	adds	r7, #20
 801040a:	46bd      	mov	sp, r7
 801040c:	bc80      	pop	{r7}
 801040e:	4770      	bx	lr
 8010410:	200011b8 	.word	0x200011b8

08010414 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	4603      	mov	r3, r0
 801041c:	6039      	str	r1, [r7, #0]
 801041e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8010420:	79fb      	ldrb	r3, [r7, #7]
 8010422:	6839      	ldr	r1, [r7, #0]
 8010424:	4618      	mov	r0, r3
 8010426:	f005 fdc9 	bl	8015fbc <SecureElementSetKey>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d001      	beq.n	8010434 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010430:	230e      	movs	r3, #14
 8010432:	e021      	b.n	8010478 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8010434:	79fb      	ldrb	r3, [r7, #7]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d11d      	bne.n	8010476 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801043a:	4b11      	ldr	r3, [pc, #68]	@ (8010480 <LoRaMacCryptoSetKey+0x6c>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	789b      	ldrb	r3, [r3, #2]
 8010440:	210b      	movs	r1, #11
 8010442:	4618      	mov	r0, r3
 8010444:	f000 fa54 	bl	80108f0 <LoRaMacCryptoDeriveLifeTimeKey>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d001      	beq.n	8010452 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801044e:	230e      	movs	r3, #14
 8010450:	e012      	b.n	8010478 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010452:	210c      	movs	r1, #12
 8010454:	2000      	movs	r0, #0
 8010456:	f000 fa4b 	bl	80108f0 <LoRaMacCryptoDeriveLifeTimeKey>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d001      	beq.n	8010464 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010460:	230e      	movs	r3, #14
 8010462:	e009      	b.n	8010478 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010464:	210a      	movs	r1, #10
 8010466:	2000      	movs	r0, #0
 8010468:	f000 fa42 	bl	80108f0 <LoRaMacCryptoDeriveLifeTimeKey>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010472:	230e      	movs	r3, #14
 8010474:	e000      	b.n	8010478 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	200011b8 	.word	0x200011b8

08010484 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b086      	sub	sp, #24
 8010488:	af02      	add	r7, sp, #8
 801048a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010492:	2309      	movs	r3, #9
 8010494:	e02d      	b.n	80104f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8010496:	2301      	movs	r3, #1
 8010498:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801049a:	4b18      	ldr	r3, [pc, #96]	@ (80104fc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	889a      	ldrh	r2, [r3, #4]
 80104a0:	3201      	adds	r2, #1
 80104a2:	b292      	uxth	r2, r2
 80104a4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80104a6:	4b15      	ldr	r3, [pc, #84]	@ (80104fc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	889a      	ldrh	r2, [r3, #4]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 fc14 	bl	8010cde <LoRaMacSerializerJoinRequest>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80104bc:	2310      	movs	r3, #16
 80104be:	e018      	b.n	80104f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6819      	ldr	r1, [r3, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	3318      	adds	r3, #24
 80104c8:	7bfa      	ldrb	r2, [r7, #15]
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	4613      	mov	r3, r2
 80104ce:	2213      	movs	r2, #19
 80104d0:	2000      	movs	r0, #0
 80104d2:	f005 fdd1 	bl	8016078 <SecureElementComputeAesCmac>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80104dc:	230e      	movs	r3, #14
 80104de:	e008      	b.n	80104f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 fbfc 	bl	8010cde <LoRaMacSerializerJoinRequest>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d001      	beq.n	80104f0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80104ec:	2310      	movs	r3, #16
 80104ee:	e000      	b.n	80104f2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80104f0:	2300      	movs	r3, #0
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3710      	adds	r7, #16
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	200011b8 	.word	0x200011b8

08010500 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8010500:	b590      	push	{r4, r7, lr}
 8010502:	b097      	sub	sp, #92	@ 0x5c
 8010504:	af04      	add	r7, sp, #16
 8010506:	4603      	mov	r3, r0
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
 801050c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d002      	beq.n	801051a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d101      	bne.n	801051e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801051a:	2309      	movs	r3, #9
 801051c:	e0d1      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801051e:	2312      	movs	r3, #18
 8010520:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8010524:	f107 0314 	add.w	r3, r7, #20
 8010528:	2221      	movs	r2, #33	@ 0x21
 801052a:	2100      	movs	r1, #0
 801052c:	4618      	mov	r0, r3
 801052e:	f00e fec6 	bl	801f2be <memset>
    uint8_t versionMinor         = 0;
 8010532:	2300      	movs	r3, #0
 8010534:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8010536:	4b65      	ldr	r3, [pc, #404]	@ (80106cc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	889b      	ldrh	r3, [r3, #4]
 801053c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681c      	ldr	r4, [r3, #0]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	791b      	ldrb	r3, [r3, #4]
 8010548:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 801054c:	7bf8      	ldrb	r0, [r7, #15]
 801054e:	f107 0213 	add.w	r2, r7, #19
 8010552:	9202      	str	r2, [sp, #8]
 8010554:	f107 0214 	add.w	r2, r7, #20
 8010558:	9201      	str	r2, [sp, #4]
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	4623      	mov	r3, r4
 801055e:	460a      	mov	r2, r1
 8010560:	68b9      	ldr	r1, [r7, #8]
 8010562:	f005 fe8e 	bl	8016282 <SecureElementProcessJoinAccept>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d001      	beq.n	8010570 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801056c:	230e      	movs	r3, #14
 801056e:	e0a8      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6818      	ldr	r0, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	791b      	ldrb	r3, [r3, #4]
 8010578:	461a      	mov	r2, r3
 801057a:	f107 0314 	add.w	r3, r7, #20
 801057e:	4619      	mov	r1, r3
 8010580:	f005 ffd7 	bl	8016532 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f000 f9ed 	bl	8010964 <LoRaMacParserJoinAccept>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010590:	230f      	movs	r3, #15
 8010592:	e096      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8010594:	2300      	movs	r3, #0
 8010596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	799b      	ldrb	r3, [r3, #6]
 801059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	79db      	ldrb	r3, [r3, #7]
 80105a4:	021b      	lsls	r3, r3, #8
 80105a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80105a8:	4313      	orrs	r3, r2
 80105aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	7a1b      	ldrb	r3, [r3, #8]
 80105b0:	041b      	lsls	r3, r3, #16
 80105b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80105b4:	4313      	orrs	r3, r2
 80105b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80105b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80105ba:	f7ff fe4d 	bl	8010258 <IsJoinNonce10xOk>
 80105be:	4603      	mov	r3, r0
 80105c0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 80105c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d010      	beq.n	80105ee <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80105cc:	4b3f      	ldr	r3, [pc, #252]	@ (80106cc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80105d2:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80105d4:	7cfb      	ldrb	r3, [r7, #19]
 80105d6:	210b      	movs	r1, #11
 80105d8:	4618      	mov	r0, r3
 80105da:	f000 f989 	bl	80108f0 <LoRaMacCryptoDeriveLifeTimeKey>
 80105de:	4603      	mov	r3, r0
 80105e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80105e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d005      	beq.n	80105f8 <LoRaMacCryptoHandleJoinAccept+0xf8>
 80105ec:	e001      	b.n	80105f2 <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80105ee:	2303      	movs	r3, #3
 80105f0:	e067      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 80105f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80105f6:	e064      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80105f8:	210c      	movs	r1, #12
 80105fa:	2000      	movs	r0, #0
 80105fc:	f000 f978 	bl	80108f0 <LoRaMacCryptoDeriveLifeTimeKey>
 8010600:	4603      	mov	r3, r0
 8010602:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010606:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801060a:	2b00      	cmp	r3, #0
 801060c:	d002      	beq.n	8010614 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 801060e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010612:	e056      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8010614:	210a      	movs	r1, #10
 8010616:	2000      	movs	r0, #0
 8010618:	f000 f96a 	bl	80108f0 <LoRaMacCryptoDeriveLifeTimeKey>
 801061c:	4603      	mov	r3, r0
 801061e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010622:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 801062a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801062e:	e048      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	7a5b      	ldrb	r3, [r3, #9]
 8010634:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	7a9b      	ldrb	r3, [r3, #10]
 801063a:	021b      	lsls	r3, r3, #8
 801063c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801063e:	4313      	orrs	r3, r2
 8010640:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	7adb      	ldrb	r3, [r3, #11]
 8010646:	041b      	lsls	r3, r3, #16
 8010648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801064a:	4313      	orrs	r3, r2
 801064c:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801064e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010654:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010656:	2009      	movs	r0, #9
 8010658:	f7ff fcdc 	bl	8010014 <DeriveSessionKey10x>
 801065c:	4603      	mov	r3, r0
 801065e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010662:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 801066a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801066e:	e028      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8010670:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010678:	2008      	movs	r0, #8
 801067a:	f7ff fccb 	bl	8010014 <DeriveSessionKey10x>
 801067e:	4603      	mov	r3, r0
 8010680:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010684:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010688:	2b00      	cmp	r3, #0
 801068a:	d002      	beq.n	8010692 <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 801068c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010690:	e017      	b.n	80106c2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8010692:	4b0e      	ldr	r3, [pc, #56]	@ (80106cc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	7cfa      	ldrb	r2, [r7, #19]
 8010698:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801069a:	4b0c      	ldr	r3, [pc, #48]	@ (80106cc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2200      	movs	r2, #0
 80106a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80106a2:	4b0a      	ldr	r3, [pc, #40]	@ (80106cc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f04f 32ff 	mov.w	r2, #4294967295
 80106aa:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80106ac:	4b07      	ldr	r3, [pc, #28]	@ (80106cc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f04f 32ff 	mov.w	r2, #4294967295
 80106b4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80106b6:	4b05      	ldr	r3, [pc, #20]	@ (80106cc <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f04f 32ff 	mov.w	r2, #4294967295
 80106be:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	374c      	adds	r7, #76	@ 0x4c
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd90      	pop	{r4, r7, pc}
 80106ca:	bf00      	nop
 80106cc:	200011b8 	.word	0x200011b8

080106d0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80106d0:	b590      	push	{r4, r7, lr}
 80106d2:	b08b      	sub	sp, #44	@ 0x2c
 80106d4:	af04      	add	r7, sp, #16
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	607b      	str	r3, [r7, #4]
 80106da:	460b      	mov	r3, r1
 80106dc:	72fb      	strb	r3, [r7, #11]
 80106de:	4613      	mov	r3, r2
 80106e0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80106e2:	2312      	movs	r3, #18
 80106e4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80106e6:	2309      	movs	r3, #9
 80106e8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d101      	bne.n	80106f4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80106f0:	2309      	movs	r3, #9
 80106f2:	e05e      	b.n	80107b2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80106f4:	4b31      	ldr	r3, [pc, #196]	@ (80107bc <LoRaMacCryptoSecureMessage+0xec>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d201      	bcs.n	8010704 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010700:	2306      	movs	r3, #6
 8010702:	e056      	b.n	80107b2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f893 3020 	ldrb.w	r3, [r3, #32]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801070e:	2308      	movs	r3, #8
 8010710:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8010712:	4b2a      	ldr	r3, [pc, #168]	@ (80107bc <LoRaMacCryptoSecureMessage+0xec>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	429a      	cmp	r2, r3
 801071c:	d916      	bls.n	801074c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010728:	b219      	sxth	r1, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	689c      	ldr	r4, [r3, #8]
 801072e:	7dfa      	ldrb	r2, [r7, #23]
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	9301      	str	r3, [sp, #4]
 8010734:	2300      	movs	r3, #0
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	4623      	mov	r3, r4
 801073a:	f7ff fa79 	bl	800fc30 <PayloadEncrypt>
 801073e:	4603      	mov	r3, r0
 8010740:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010742:	7dbb      	ldrb	r3, [r7, #22]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8010748:	7dbb      	ldrb	r3, [r7, #22]
 801074a:	e032      	b.n	80107b2 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 fb48 	bl	8010de2 <LoRaMacSerializerData>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d001      	beq.n	801075c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010758:	2310      	movs	r3, #16
 801075a:	e02a      	b.n	80107b2 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801075c:	2308      	movs	r3, #8
 801075e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6818      	ldr	r0, [r3, #0]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	791b      	ldrb	r3, [r3, #4]
 8010768:	3b04      	subs	r3, #4
 801076a:	b299      	uxth	r1, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	322c      	adds	r2, #44	@ 0x2c
 8010774:	7dfc      	ldrb	r4, [r7, #23]
 8010776:	9203      	str	r2, [sp, #12]
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	9202      	str	r2, [sp, #8]
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	2300      	movs	r3, #0
 8010780:	9300      	str	r3, [sp, #0]
 8010782:	2300      	movs	r3, #0
 8010784:	4622      	mov	r2, r4
 8010786:	f7ff fb52 	bl	800fe2e <ComputeCmacB0>
 801078a:	4603      	mov	r3, r0
 801078c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801078e:	7dbb      	ldrb	r3, [r7, #22]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d001      	beq.n	8010798 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8010794:	7dbb      	ldrb	r3, [r7, #22]
 8010796:	e00c      	b.n	80107b2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 fb22 	bl	8010de2 <LoRaMacSerializerData>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d001      	beq.n	80107a8 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80107a4:	2310      	movs	r3, #16
 80107a6:	e004      	b.n	80107b2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80107a8:	4b04      	ldr	r3, [pc, #16]	@ (80107bc <LoRaMacCryptoSecureMessage+0xec>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	371c      	adds	r7, #28
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd90      	pop	{r4, r7, pc}
 80107ba:	bf00      	nop
 80107bc:	200011b8 	.word	0x200011b8

080107c0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80107c0:	b590      	push	{r4, r7, lr}
 80107c2:	b08b      	sub	sp, #44	@ 0x2c
 80107c4:	af04      	add	r7, sp, #16
 80107c6:	60b9      	str	r1, [r7, #8]
 80107c8:	607b      	str	r3, [r7, #4]
 80107ca:	4603      	mov	r3, r0
 80107cc:	73fb      	strb	r3, [r7, #15]
 80107ce:	4613      	mov	r3, r2
 80107d0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80107d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80107d8:	2309      	movs	r3, #9
 80107da:	e083      	b.n	80108e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80107dc:	7bbb      	ldrb	r3, [r7, #14]
 80107de:	6879      	ldr	r1, [r7, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7ff fca1 	bl	8010128 <CheckFCntDown>
 80107e6:	4603      	mov	r3, r0
 80107e8:	f083 0301 	eor.w	r3, r3, #1
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d001      	beq.n	80107f6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80107f2:	2306      	movs	r3, #6
 80107f4:	e076      	b.n	80108e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80107f6:	2312      	movs	r3, #18
 80107f8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80107fa:	2309      	movs	r3, #9
 80107fc:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80107fe:	2308      	movs	r3, #8
 8010800:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010804:	f000 f979 	bl	8010afa <LoRaMacParserData>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d001      	beq.n	8010812 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801080e:	230f      	movs	r3, #15
 8010810:	e068      	b.n	80108e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8010812:	f107 0210 	add.w	r2, r7, #16
 8010816:	7bfb      	ldrb	r3, [r7, #15]
 8010818:	4611      	mov	r1, r2
 801081a:	4618      	mov	r0, r3
 801081c:	f7ff fbd4 	bl	800ffc8 <GetKeyAddrItem>
 8010820:	4603      	mov	r3, r0
 8010822:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010824:	7d7b      	ldrb	r3, [r7, #21]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d001      	beq.n	801082e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801082a:	7d7b      	ldrb	r3, [r7, #21]
 801082c:	e05a      	b.n	80108e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	785b      	ldrb	r3, [r3, #1]
 8010832:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	789b      	ldrb	r3, [r3, #2]
 8010838:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801083a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	68ba      	ldr	r2, [r7, #8]
 8010840:	429a      	cmp	r2, r3
 8010842:	d001      	beq.n	8010848 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8010844:	2302      	movs	r3, #2
 8010846:	e04d      	b.n	80108e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8010848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801084a:	7b1b      	ldrb	r3, [r3, #12]
 801084c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2b00      	cmp	r3, #0
 8010854:	bf14      	ite	ne
 8010856:	2301      	movne	r3, #1
 8010858:	2300      	moveq	r3, #0
 801085a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801085c:	4b23      	ldr	r3, [pc, #140]	@ (80108ec <LoRaMacCryptoUnsecureMessage+0x12c>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	789b      	ldrb	r3, [r3, #2]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d101      	bne.n	801086a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8010866:	2300      	movs	r3, #0
 8010868:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801086a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801086c:	6818      	ldr	r0, [r3, #0]
 801086e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010870:	791b      	ldrb	r3, [r3, #4]
 8010872:	3b04      	subs	r3, #4
 8010874:	b299      	uxth	r1, r3
 8010876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801087a:	7dbc      	ldrb	r4, [r7, #22]
 801087c:	7d3a      	ldrb	r2, [r7, #20]
 801087e:	9303      	str	r3, [sp, #12]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	9302      	str	r3, [sp, #8]
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	9301      	str	r3, [sp, #4]
 8010888:	2301      	movs	r3, #1
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	4623      	mov	r3, r4
 801088e:	f7ff fb0c 	bl	800feaa <VerifyCmacB0>
 8010892:	4603      	mov	r3, r0
 8010894:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010896:	7d7b      	ldrb	r3, [r7, #21]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 801089c:	7d7b      	ldrb	r3, [r7, #21]
 801089e:	e021      	b.n	80108e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80108a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80108aa:	2308      	movs	r3, #8
 80108ac:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80108ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80108b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108b8:	b219      	sxth	r1, r3
 80108ba:	7dfa      	ldrb	r2, [r7, #23]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	9301      	str	r3, [sp, #4]
 80108c0:	2301      	movs	r3, #1
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	f7ff f9b3 	bl	800fc30 <PayloadEncrypt>
 80108ca:	4603      	mov	r3, r0
 80108cc:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80108ce:	7d7b      	ldrb	r3, [r7, #21]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80108d4:	7d7b      	ldrb	r3, [r7, #21]
 80108d6:	e005      	b.n	80108e4 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80108d8:	7bbb      	ldrb	r3, [r7, #14]
 80108da:	6879      	ldr	r1, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	f7ff fc47 	bl	8010170 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80108e2:	2300      	movs	r3, #0
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	371c      	adds	r7, #28
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd90      	pop	{r4, r7, pc}
 80108ec:	200011b8 	.word	0x200011b8

080108f0 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b088      	sub	sp, #32
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	4603      	mov	r3, r0
 80108f8:	460a      	mov	r2, r1
 80108fa:	71fb      	strb	r3, [r7, #7]
 80108fc:	4613      	mov	r3, r2
 80108fe:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8010900:	f107 030c 	add.w	r3, r7, #12
 8010904:	2200      	movs	r2, #0
 8010906:	601a      	str	r2, [r3, #0]
 8010908:	605a      	str	r2, [r3, #4]
 801090a:	609a      	str	r2, [r3, #8]
 801090c:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 801090e:	2300      	movs	r3, #0
 8010910:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8010912:	79bb      	ldrb	r3, [r7, #6]
 8010914:	2b0c      	cmp	r3, #12
 8010916:	d00b      	beq.n	8010930 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8010918:	2b0c      	cmp	r3, #12
 801091a:	dc0f      	bgt.n	801093c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 801091c:	2b0a      	cmp	r3, #10
 801091e:	d00a      	beq.n	8010936 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8010920:	2b0b      	cmp	r3, #11
 8010922:	d10b      	bne.n	801093c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8010924:	79fb      	ldrb	r3, [r7, #7]
 8010926:	2b01      	cmp	r3, #1
 8010928:	d10a      	bne.n	8010940 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 801092a:	2320      	movs	r3, #32
 801092c:	733b      	strb	r3, [r7, #12]
            }
            break;
 801092e:	e007      	b.n	8010940 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8010930:	230b      	movs	r3, #11
 8010932:	77fb      	strb	r3, [r7, #31]
            break;
 8010934:	e005      	b.n	8010942 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8010936:	2330      	movs	r3, #48	@ 0x30
 8010938:	733b      	strb	r3, [r7, #12]
            break;
 801093a:	e002      	b.n	8010942 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801093c:	230a      	movs	r3, #10
 801093e:	e00d      	b.n	801095c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8010940:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010942:	79ba      	ldrb	r2, [r7, #6]
 8010944:	7ff9      	ldrb	r1, [r7, #31]
 8010946:	f107 030c 	add.w	r3, r7, #12
 801094a:	4618      	mov	r0, r3
 801094c:	f005 fc5a 	bl	8016204 <SecureElementDeriveAndStoreKey>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d001      	beq.n	801095a <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010956:	230e      	movs	r3, #14
 8010958:	e000      	b.n	801095c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801095a:	2300      	movs	r3, #0
}
 801095c:	4618      	mov	r0, r3
 801095e:	3720      	adds	r7, #32
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d003      	beq.n	801097a <LoRaMacParserJoinAccept+0x16>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d101      	bne.n	801097e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801097a:	2302      	movs	r3, #2
 801097c:	e0b9      	b.n	8010af2 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	89fb      	ldrh	r3, [r7, #14]
 8010988:	1c59      	adds	r1, r3, #1
 801098a:	81f9      	strh	r1, [r7, #14]
 801098c:	4413      	add	r3, r2
 801098e:	781a      	ldrb	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	1d98      	adds	r0, r3, #6
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	89fb      	ldrh	r3, [r7, #14]
 801099e:	4413      	add	r3, r2
 80109a0:	2203      	movs	r2, #3
 80109a2:	4619      	mov	r1, r3
 80109a4:	f005 fdc5 	bl	8016532 <memcpy1>
    bufItr = bufItr + 3;
 80109a8:	89fb      	ldrh	r3, [r7, #14]
 80109aa:	3303      	adds	r3, #3
 80109ac:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f103 0009 	add.w	r0, r3, #9
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	89fb      	ldrh	r3, [r7, #14]
 80109ba:	4413      	add	r3, r2
 80109bc:	2203      	movs	r2, #3
 80109be:	4619      	mov	r1, r3
 80109c0:	f005 fdb7 	bl	8016532 <memcpy1>
    bufItr = bufItr + 3;
 80109c4:	89fb      	ldrh	r3, [r7, #14]
 80109c6:	3303      	adds	r3, #3
 80109c8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	89fb      	ldrh	r3, [r7, #14]
 80109d0:	1c59      	adds	r1, r3, #1
 80109d2:	81f9      	strh	r1, [r7, #14]
 80109d4:	4413      	add	r3, r2
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	461a      	mov	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	89fb      	ldrh	r3, [r7, #14]
 80109e4:	1c59      	adds	r1, r3, #1
 80109e6:	81f9      	strh	r1, [r7, #14]
 80109e8:	4413      	add	r3, r2
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	021a      	lsls	r2, r3, #8
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	431a      	orrs	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	89fb      	ldrh	r3, [r7, #14]
 80109fe:	1c59      	adds	r1, r3, #1
 8010a00:	81f9      	strh	r1, [r7, #14]
 8010a02:	4413      	add	r3, r2
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	041a      	lsls	r2, r3, #16
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	431a      	orrs	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	89fb      	ldrh	r3, [r7, #14]
 8010a18:	1c59      	adds	r1, r3, #1
 8010a1a:	81f9      	strh	r1, [r7, #14]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	061a      	lsls	r2, r3, #24
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	431a      	orrs	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	89fb      	ldrh	r3, [r7, #14]
 8010a32:	1c59      	adds	r1, r3, #1
 8010a34:	81f9      	strh	r1, [r7, #14]
 8010a36:	4413      	add	r3, r2
 8010a38:	781a      	ldrb	r2, [r3, #0]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	89fb      	ldrh	r3, [r7, #14]
 8010a44:	1c59      	adds	r1, r3, #1
 8010a46:	81f9      	strh	r1, [r7, #14]
 8010a48:	4413      	add	r3, r2
 8010a4a:	781a      	ldrb	r2, [r3, #0]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	791b      	ldrb	r3, [r3, #4]
 8010a54:	1f1a      	subs	r2, r3, #4
 8010a56:	89fb      	ldrh	r3, [r7, #14]
 8010a58:	1ad3      	subs	r3, r2, r3
 8010a5a:	2b10      	cmp	r3, #16
 8010a5c:	d10e      	bne.n	8010a7c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f103 0012 	add.w	r0, r3, #18
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	89fb      	ldrh	r3, [r7, #14]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	2210      	movs	r2, #16
 8010a6e:	4619      	mov	r1, r3
 8010a70:	f005 fd5f 	bl	8016532 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8010a74:	89fb      	ldrh	r3, [r7, #14]
 8010a76:	3310      	adds	r3, #16
 8010a78:	81fb      	strh	r3, [r7, #14]
 8010a7a:	e008      	b.n	8010a8e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	791b      	ldrb	r3, [r3, #4]
 8010a80:	1f1a      	subs	r2, r3, #4
 8010a82:	89fb      	ldrh	r3, [r7, #14]
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	dd01      	ble.n	8010a8e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e031      	b.n	8010af2 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	89fb      	ldrh	r3, [r7, #14]
 8010a94:	1c59      	adds	r1, r3, #1
 8010a96:	81f9      	strh	r1, [r7, #14]
 8010a98:	4413      	add	r3, r2
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	89fb      	ldrh	r3, [r7, #14]
 8010aa8:	1c59      	adds	r1, r3, #1
 8010aaa:	81f9      	strh	r1, [r7, #14]
 8010aac:	4413      	add	r3, r2
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	021a      	lsls	r2, r3, #8
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ab6:	431a      	orrs	r2, r3
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	89fb      	ldrh	r3, [r7, #14]
 8010ac2:	1c59      	adds	r1, r3, #1
 8010ac4:	81f9      	strh	r1, [r7, #14]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	041a      	lsls	r2, r3, #16
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ad0:	431a      	orrs	r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	89fb      	ldrh	r3, [r7, #14]
 8010adc:	1c59      	adds	r1, r3, #1
 8010ade:	81f9      	strh	r1, [r7, #14]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	061a      	lsls	r2, r3, #24
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aea:	431a      	orrs	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8010af0:	2300      	movs	r3, #0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b084      	sub	sp, #16
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d003      	beq.n	8010b10 <LoRaMacParserData+0x16>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d101      	bne.n	8010b14 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8010b10:	2302      	movs	r3, #2
 8010b12:	e0e0      	b.n	8010cd6 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8010b14:	2300      	movs	r3, #0
 8010b16:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	89fb      	ldrh	r3, [r7, #14]
 8010b1e:	1c59      	adds	r1, r3, #1
 8010b20:	81f9      	strh	r1, [r7, #14]
 8010b22:	4413      	add	r3, r2
 8010b24:	781a      	ldrb	r2, [r3, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	89fb      	ldrh	r3, [r7, #14]
 8010b30:	1c59      	adds	r1, r3, #1
 8010b32:	81f9      	strh	r1, [r7, #14]
 8010b34:	4413      	add	r3, r2
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	89fb      	ldrh	r3, [r7, #14]
 8010b44:	1c59      	adds	r1, r3, #1
 8010b46:	81f9      	strh	r1, [r7, #14]
 8010b48:	4413      	add	r3, r2
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	021a      	lsls	r2, r3, #8
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	431a      	orrs	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	89fb      	ldrh	r3, [r7, #14]
 8010b5e:	1c59      	adds	r1, r3, #1
 8010b60:	81f9      	strh	r1, [r7, #14]
 8010b62:	4413      	add	r3, r2
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	041a      	lsls	r2, r3, #16
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	431a      	orrs	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	89fb      	ldrh	r3, [r7, #14]
 8010b78:	1c59      	adds	r1, r3, #1
 8010b7a:	81f9      	strh	r1, [r7, #14]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	061a      	lsls	r2, r3, #24
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	689b      	ldr	r3, [r3, #8]
 8010b86:	431a      	orrs	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	89fb      	ldrh	r3, [r7, #14]
 8010b92:	1c59      	adds	r1, r3, #1
 8010b94:	81f9      	strh	r1, [r7, #14]
 8010b96:	4413      	add	r3, r2
 8010b98:	781a      	ldrb	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	89fb      	ldrh	r3, [r7, #14]
 8010ba4:	1c59      	adds	r1, r3, #1
 8010ba6:	81f9      	strh	r1, [r7, #14]
 8010ba8:	4413      	add	r3, r2
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	461a      	mov	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681a      	ldr	r2, [r3, #0]
 8010bb6:	89fb      	ldrh	r3, [r7, #14]
 8010bb8:	1c59      	adds	r1, r3, #1
 8010bba:	81f9      	strh	r1, [r7, #14]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	0219      	lsls	r1, r3, #8
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	89db      	ldrh	r3, [r3, #14]
 8010bc6:	b21a      	sxth	r2, r3
 8010bc8:	b20b      	sxth	r3, r1
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	b21b      	sxth	r3, r3
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f103 0010 	add.w	r0, r3, #16
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	89fb      	ldrh	r3, [r7, #14]
 8010be0:	18d1      	adds	r1, r2, r3
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	7b1b      	ldrb	r3, [r3, #12]
 8010be6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	461a      	mov	r2, r3
 8010bee:	f005 fca0 	bl	8016532 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	7b1b      	ldrb	r3, [r3, #12]
 8010bf6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	89fb      	ldrh	r3, [r7, #14]
 8010c00:	4413      	add	r3, r2
 8010c02:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	791b      	ldrb	r3, [r3, #4]
 8010c18:	461a      	mov	r2, r3
 8010c1a:	89fb      	ldrh	r3, [r7, #14]
 8010c1c:	1ad3      	subs	r3, r2, r3
 8010c1e:	2b04      	cmp	r3, #4
 8010c20:	dd27      	ble.n	8010c72 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	89fb      	ldrh	r3, [r7, #14]
 8010c28:	1c59      	adds	r1, r3, #1
 8010c2a:	81f9      	strh	r1, [r7, #14]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	781a      	ldrb	r2, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	791a      	ldrb	r2, [r3, #4]
 8010c3a:	89fb      	ldrh	r3, [r7, #14]
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	3b04      	subs	r3, #4
 8010c44:	b2da      	uxtb	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	89fb      	ldrh	r3, [r7, #14]
 8010c56:	18d1      	adds	r1, r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c5e:	461a      	mov	r2, r3
 8010c60:	f005 fc67 	bl	8016532 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	89fb      	ldrh	r3, [r7, #14]
 8010c6e:	4413      	add	r3, r2
 8010c70:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	791b      	ldrb	r3, [r3, #4]
 8010c7a:	3b04      	subs	r3, #4
 8010c7c:	4413      	add	r3, r2
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	461a      	mov	r2, r3
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6819      	ldr	r1, [r3, #0]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	791b      	ldrb	r3, [r3, #4]
 8010c92:	3b03      	subs	r3, #3
 8010c94:	440b      	add	r3, r1
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	021b      	lsls	r3, r3, #8
 8010c9a:	431a      	orrs	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6819      	ldr	r1, [r3, #0]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	791b      	ldrb	r3, [r3, #4]
 8010cac:	3b02      	subs	r3, #2
 8010cae:	440b      	add	r3, r1
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	041b      	lsls	r3, r3, #16
 8010cb4:	431a      	orrs	r2, r3
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6819      	ldr	r1, [r3, #0]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	791b      	ldrb	r3, [r3, #4]
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	440b      	add	r3, r1
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	061b      	lsls	r3, r3, #24
 8010cce:	431a      	orrs	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8010cd4:	2300      	movs	r3, #0
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3710      	adds	r7, #16
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b084      	sub	sp, #16
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d003      	beq.n	8010cf4 <LoRaMacSerializerJoinRequest+0x16>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d101      	bne.n	8010cf8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	e070      	b.n	8010dda <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	791b      	ldrb	r3, [r3, #4]
 8010d00:	2b16      	cmp	r3, #22
 8010d02:	d801      	bhi.n	8010d08 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010d04:	2302      	movs	r3, #2
 8010d06:	e068      	b.n	8010dda <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	89fb      	ldrh	r3, [r7, #14]
 8010d0e:	1c59      	adds	r1, r3, #1
 8010d10:	81f9      	strh	r1, [r7, #14]
 8010d12:	4413      	add	r3, r2
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	7952      	ldrb	r2, [r2, #5]
 8010d18:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	89fb      	ldrh	r3, [r7, #14]
 8010d20:	18d0      	adds	r0, r2, r3
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	3306      	adds	r3, #6
 8010d26:	2208      	movs	r2, #8
 8010d28:	4619      	mov	r1, r3
 8010d2a:	f005 fc1d 	bl	8016568 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8010d2e:	89fb      	ldrh	r3, [r7, #14]
 8010d30:	3308      	adds	r3, #8
 8010d32:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	89fb      	ldrh	r3, [r7, #14]
 8010d3a:	18d0      	adds	r0, r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	330e      	adds	r3, #14
 8010d40:	2208      	movs	r2, #8
 8010d42:	4619      	mov	r1, r3
 8010d44:	f005 fc10 	bl	8016568 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8010d48:	89fb      	ldrh	r3, [r7, #14]
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	8ad9      	ldrh	r1, [r3, #22]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	89fb      	ldrh	r3, [r7, #14]
 8010d58:	1c58      	adds	r0, r3, #1
 8010d5a:	81f8      	strh	r0, [r7, #14]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	b2ca      	uxtb	r2, r1
 8010d60:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	8adb      	ldrh	r3, [r3, #22]
 8010d66:	0a1b      	lsrs	r3, r3, #8
 8010d68:	b299      	uxth	r1, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	89fb      	ldrh	r3, [r7, #14]
 8010d70:	1c58      	adds	r0, r3, #1
 8010d72:	81f8      	strh	r0, [r7, #14]
 8010d74:	4413      	add	r3, r2
 8010d76:	b2ca      	uxtb	r2, r1
 8010d78:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6999      	ldr	r1, [r3, #24]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	89fb      	ldrh	r3, [r7, #14]
 8010d84:	1c58      	adds	r0, r3, #1
 8010d86:	81f8      	strh	r0, [r7, #14]
 8010d88:	4413      	add	r3, r2
 8010d8a:	b2ca      	uxtb	r2, r1
 8010d8c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	699b      	ldr	r3, [r3, #24]
 8010d92:	0a19      	lsrs	r1, r3, #8
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	89fb      	ldrh	r3, [r7, #14]
 8010d9a:	1c58      	adds	r0, r3, #1
 8010d9c:	81f8      	strh	r0, [r7, #14]
 8010d9e:	4413      	add	r3, r2
 8010da0:	b2ca      	uxtb	r2, r1
 8010da2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	699b      	ldr	r3, [r3, #24]
 8010da8:	0c19      	lsrs	r1, r3, #16
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	89fb      	ldrh	r3, [r7, #14]
 8010db0:	1c58      	adds	r0, r3, #1
 8010db2:	81f8      	strh	r0, [r7, #14]
 8010db4:	4413      	add	r3, r2
 8010db6:	b2ca      	uxtb	r2, r1
 8010db8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	699b      	ldr	r3, [r3, #24]
 8010dbe:	0e19      	lsrs	r1, r3, #24
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	89fb      	ldrh	r3, [r7, #14]
 8010dc6:	1c58      	adds	r0, r3, #1
 8010dc8:	81f8      	strh	r0, [r7, #14]
 8010dca:	4413      	add	r3, r2
 8010dcc:	b2ca      	uxtb	r2, r1
 8010dce:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8010dd0:	89fb      	ldrh	r3, [r7, #14]
 8010dd2:	b2da      	uxtb	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010dd8:	2300      	movs	r3, #0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}

08010de2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b084      	sub	sp, #16
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d003      	beq.n	8010df8 <LoRaMacSerializerData+0x16>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d101      	bne.n	8010dfc <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e0e3      	b.n	8010fc4 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8010e00:	2308      	movs	r3, #8
 8010e02:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	7b1b      	ldrb	r3, [r3, #12]
 8010e08:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	461a      	mov	r2, r3
 8010e10:	89bb      	ldrh	r3, [r7, #12]
 8010e12:	4413      	add	r3, r2
 8010e14:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8010e20:	89bb      	ldrh	r3, [r7, #12]
 8010e22:	3301      	adds	r3, #1
 8010e24:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	89bb      	ldrh	r3, [r7, #12]
 8010e30:	4413      	add	r3, r2
 8010e32:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8010e34:	89bb      	ldrh	r3, [r7, #12]
 8010e36:	3304      	adds	r3, #4
 8010e38:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	791b      	ldrb	r3, [r3, #4]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	89bb      	ldrh	r3, [r7, #12]
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d901      	bls.n	8010e4a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010e46:	2302      	movs	r3, #2
 8010e48:	e0bc      	b.n	8010fc4 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	89fb      	ldrh	r3, [r7, #14]
 8010e50:	1c59      	adds	r1, r3, #1
 8010e52:	81f9      	strh	r1, [r7, #14]
 8010e54:	4413      	add	r3, r2
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	7952      	ldrb	r2, [r2, #5]
 8010e5a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6899      	ldr	r1, [r3, #8]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	89fb      	ldrh	r3, [r7, #14]
 8010e66:	1c58      	adds	r0, r3, #1
 8010e68:	81f8      	strh	r0, [r7, #14]
 8010e6a:	4413      	add	r3, r2
 8010e6c:	b2ca      	uxtb	r2, r1
 8010e6e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	689b      	ldr	r3, [r3, #8]
 8010e74:	0a19      	lsrs	r1, r3, #8
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681a      	ldr	r2, [r3, #0]
 8010e7a:	89fb      	ldrh	r3, [r7, #14]
 8010e7c:	1c58      	adds	r0, r3, #1
 8010e7e:	81f8      	strh	r0, [r7, #14]
 8010e80:	4413      	add	r3, r2
 8010e82:	b2ca      	uxtb	r2, r1
 8010e84:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	0c19      	lsrs	r1, r3, #16
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	89fb      	ldrh	r3, [r7, #14]
 8010e92:	1c58      	adds	r0, r3, #1
 8010e94:	81f8      	strh	r0, [r7, #14]
 8010e96:	4413      	add	r3, r2
 8010e98:	b2ca      	uxtb	r2, r1
 8010e9a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	0e19      	lsrs	r1, r3, #24
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	89fb      	ldrh	r3, [r7, #14]
 8010ea8:	1c58      	adds	r0, r3, #1
 8010eaa:	81f8      	strh	r0, [r7, #14]
 8010eac:	4413      	add	r3, r2
 8010eae:	b2ca      	uxtb	r2, r1
 8010eb0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	89fb      	ldrh	r3, [r7, #14]
 8010eb8:	1c59      	adds	r1, r3, #1
 8010eba:	81f9      	strh	r1, [r7, #14]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	7b12      	ldrb	r2, [r2, #12]
 8010ec2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	89d9      	ldrh	r1, [r3, #14]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	89fb      	ldrh	r3, [r7, #14]
 8010ece:	1c58      	adds	r0, r3, #1
 8010ed0:	81f8      	strh	r0, [r7, #14]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	b2ca      	uxtb	r2, r1
 8010ed6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	89db      	ldrh	r3, [r3, #14]
 8010edc:	0a1b      	lsrs	r3, r3, #8
 8010ede:	b299      	uxth	r1, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	89fb      	ldrh	r3, [r7, #14]
 8010ee6:	1c58      	adds	r0, r3, #1
 8010ee8:	81f8      	strh	r0, [r7, #14]
 8010eea:	4413      	add	r3, r2
 8010eec:	b2ca      	uxtb	r2, r1
 8010eee:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	89fb      	ldrh	r3, [r7, #14]
 8010ef6:	18d0      	adds	r0, r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f103 0110 	add.w	r1, r3, #16
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	7b1b      	ldrb	r3, [r3, #12]
 8010f02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	461a      	mov	r2, r3
 8010f0a:	f005 fb12 	bl	8016532 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	7b1b      	ldrb	r3, [r3, #12]
 8010f12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	461a      	mov	r2, r3
 8010f1a:	89fb      	ldrh	r3, [r7, #14]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d009      	beq.n	8010f3e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	89fb      	ldrh	r3, [r7, #14]
 8010f30:	1c59      	adds	r1, r3, #1
 8010f32:	81f9      	strh	r1, [r7, #14]
 8010f34:	4413      	add	r3, r2
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8010f3c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	89fb      	ldrh	r3, [r7, #14]
 8010f44:	18d0      	adds	r0, r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f50:	461a      	mov	r2, r3
 8010f52:	f005 faee 	bl	8016532 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	89fb      	ldrh	r3, [r7, #14]
 8010f60:	4413      	add	r3, r2
 8010f62:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	89fb      	ldrh	r3, [r7, #14]
 8010f6e:	1c58      	adds	r0, r3, #1
 8010f70:	81f8      	strh	r0, [r7, #14]
 8010f72:	4413      	add	r3, r2
 8010f74:	b2ca      	uxtb	r2, r1
 8010f76:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f7c:	0a19      	lsrs	r1, r3, #8
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	89fb      	ldrh	r3, [r7, #14]
 8010f84:	1c58      	adds	r0, r3, #1
 8010f86:	81f8      	strh	r0, [r7, #14]
 8010f88:	4413      	add	r3, r2
 8010f8a:	b2ca      	uxtb	r2, r1
 8010f8c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f92:	0c19      	lsrs	r1, r3, #16
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	89fb      	ldrh	r3, [r7, #14]
 8010f9a:	1c58      	adds	r0, r3, #1
 8010f9c:	81f8      	strh	r0, [r7, #14]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	b2ca      	uxtb	r2, r1
 8010fa2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa8:	0e19      	lsrs	r1, r3, #24
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	89fb      	ldrh	r3, [r7, #14]
 8010fb0:	1c58      	adds	r0, r3, #1
 8010fb2:	81f8      	strh	r0, [r7, #14]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	b2ca      	uxtb	r2, r1
 8010fb8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8010fba:	89fb      	ldrh	r3, [r7, #14]
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010fc2:	2300      	movs	r3, #0
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3710      	adds	r7, #16
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8010fd6:	79fb      	ldrb	r3, [r7, #7]
 8010fd8:	2b05      	cmp	r3, #5
 8010fda:	d002      	beq.n	8010fe2 <RegionIsActive+0x16>
 8010fdc:	2b08      	cmp	r3, #8
 8010fde:	d002      	beq.n	8010fe6 <RegionIsActive+0x1a>
 8010fe0:	e003      	b.n	8010fea <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e002      	b.n	8010fec <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e000      	b.n	8010fec <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8010fea:	2300      	movs	r3, #0
        }
    }
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bc80      	pop	{r7}
 8010ff4:	4770      	bx	lr

08010ff6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	6039      	str	r1, [r7, #0]
 8011000:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8011002:	2300      	movs	r3, #0
 8011004:	60bb      	str	r3, [r7, #8]
    switch( region )
 8011006:	79fb      	ldrb	r3, [r7, #7]
 8011008:	2b05      	cmp	r3, #5
 801100a:	d002      	beq.n	8011012 <RegionGetPhyParam+0x1c>
 801100c:	2b08      	cmp	r3, #8
 801100e:	d006      	beq.n	801101e <RegionGetPhyParam+0x28>
 8011010:	e00b      	b.n	801102a <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8011012:	6838      	ldr	r0, [r7, #0]
 8011014:	f001 fad0 	bl	80125b8 <RegionEU868GetPhyParam>
 8011018:	4603      	mov	r3, r0
 801101a:	60fb      	str	r3, [r7, #12]
 801101c:	e007      	b.n	801102e <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801101e:	6838      	ldr	r0, [r7, #0]
 8011020:	f002 fc50 	bl	80138c4 <RegionUS915GetPhyParam>
 8011024:	4603      	mov	r3, r0
 8011026:	60fb      	str	r3, [r7, #12]
 8011028:	e001      	b.n	801102e <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	4618      	mov	r0, r3
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	6039      	str	r1, [r7, #0]
 8011042:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011044:	79fb      	ldrb	r3, [r7, #7]
 8011046:	2b05      	cmp	r3, #5
 8011048:	d002      	beq.n	8011050 <RegionSetBandTxDone+0x18>
 801104a:	2b08      	cmp	r3, #8
 801104c:	d004      	beq.n	8011058 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801104e:	e006      	b.n	801105e <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8011050:	6838      	ldr	r0, [r7, #0]
 8011052:	f001 fbf7 	bl	8012844 <RegionEU868SetBandTxDone>
 8011056:	e002      	b.n	801105e <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8011058:	6838      	ldr	r0, [r7, #0]
 801105a:	f002 fd8f 	bl	8013b7c <RegionUS915SetBandTxDone>
        }
    }
}
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	4603      	mov	r3, r0
 801106c:	6039      	str	r1, [r7, #0]
 801106e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011070:	79fb      	ldrb	r3, [r7, #7]
 8011072:	2b05      	cmp	r3, #5
 8011074:	d002      	beq.n	801107c <RegionInitDefaults+0x18>
 8011076:	2b08      	cmp	r3, #8
 8011078:	d004      	beq.n	8011084 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801107a:	e006      	b.n	801108a <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 801107c:	6838      	ldr	r0, [r7, #0]
 801107e:	f001 fc0d 	bl	801289c <RegionEU868InitDefaults>
 8011082:	e002      	b.n	801108a <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8011084:	6838      	ldr	r0, [r7, #0]
 8011086:	f002 fda5 	bl	8013bd4 <RegionUS915InitDefaults>
        }
    }
}
 801108a:	bf00      	nop
 801108c:	3708      	adds	r7, #8
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
 8011098:	4603      	mov	r3, r0
 801109a:	6039      	str	r1, [r7, #0]
 801109c:	71fb      	strb	r3, [r7, #7]
 801109e:	4613      	mov	r3, r2
 80110a0:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80110a2:	79fb      	ldrb	r3, [r7, #7]
 80110a4:	2b05      	cmp	r3, #5
 80110a6:	d002      	beq.n	80110ae <RegionVerify+0x1c>
 80110a8:	2b08      	cmp	r3, #8
 80110aa:	d007      	beq.n	80110bc <RegionVerify+0x2a>
 80110ac:	e00d      	b.n	80110ca <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80110ae:	79bb      	ldrb	r3, [r7, #6]
 80110b0:	4619      	mov	r1, r3
 80110b2:	6838      	ldr	r0, [r7, #0]
 80110b4:	f001 fc90 	bl	80129d8 <RegionEU868Verify>
 80110b8:	4603      	mov	r3, r0
 80110ba:	e007      	b.n	80110cc <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80110bc:	79bb      	ldrb	r3, [r7, #6]
 80110be:	4619      	mov	r1, r3
 80110c0:	6838      	ldr	r0, [r7, #0]
 80110c2:	f002 feb9 	bl	8013e38 <RegionUS915Verify>
 80110c6:	4603      	mov	r3, r0
 80110c8:	e000      	b.n	80110cc <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80110ca:	2300      	movs	r3, #0
        }
    }
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b082      	sub	sp, #8
 80110d8:	af00      	add	r7, sp, #0
 80110da:	4603      	mov	r3, r0
 80110dc:	6039      	str	r1, [r7, #0]
 80110de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80110e0:	79fb      	ldrb	r3, [r7, #7]
 80110e2:	2b05      	cmp	r3, #5
 80110e4:	d002      	beq.n	80110ec <RegionApplyCFList+0x18>
 80110e6:	2b08      	cmp	r3, #8
 80110e8:	d004      	beq.n	80110f4 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80110ea:	e006      	b.n	80110fa <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 80110ec:	6838      	ldr	r0, [r7, #0]
 80110ee:	f001 fcef 	bl	8012ad0 <RegionEU868ApplyCFList>
 80110f2:	e002      	b.n	80110fa <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 80110f4:	6838      	ldr	r0, [r7, #0]
 80110f6:	f002 ff15 	bl	8013f24 <RegionUS915ApplyCFList>
        }
    }
}
 80110fa:	bf00      	nop
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}

08011102 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b082      	sub	sp, #8
 8011106:	af00      	add	r7, sp, #0
 8011108:	4603      	mov	r3, r0
 801110a:	6039      	str	r1, [r7, #0]
 801110c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801110e:	79fb      	ldrb	r3, [r7, #7]
 8011110:	2b05      	cmp	r3, #5
 8011112:	d002      	beq.n	801111a <RegionChanMaskSet+0x18>
 8011114:	2b08      	cmp	r3, #8
 8011116:	d005      	beq.n	8011124 <RegionChanMaskSet+0x22>
 8011118:	e009      	b.n	801112e <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801111a:	6838      	ldr	r0, [r7, #0]
 801111c:	f001 fd4c 	bl	8012bb8 <RegionEU868ChanMaskSet>
 8011120:	4603      	mov	r3, r0
 8011122:	e005      	b.n	8011130 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8011124:	6838      	ldr	r0, [r7, #0]
 8011126:	f002 ff6f 	bl	8014008 <RegionUS915ChanMaskSet>
 801112a:	4603      	mov	r3, r0
 801112c:	e000      	b.n	8011130 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801112e:	2300      	movs	r3, #0
        }
    }
}
 8011130:	4618      	mov	r0, r3
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	603b      	str	r3, [r7, #0]
 8011140:	4603      	mov	r3, r0
 8011142:	71fb      	strb	r3, [r7, #7]
 8011144:	460b      	mov	r3, r1
 8011146:	71bb      	strb	r3, [r7, #6]
 8011148:	4613      	mov	r3, r2
 801114a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801114c:	79fb      	ldrb	r3, [r7, #7]
 801114e:	2b05      	cmp	r3, #5
 8011150:	d002      	beq.n	8011158 <RegionComputeRxWindowParameters+0x20>
 8011152:	2b08      	cmp	r3, #8
 8011154:	d008      	beq.n	8011168 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8011156:	e00e      	b.n	8011176 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8011158:	7979      	ldrb	r1, [r7, #5]
 801115a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	f001 fd53 	bl	8012c0c <RegionEU868ComputeRxWindowParameters>
 8011166:	e006      	b.n	8011176 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8011168:	7979      	ldrb	r1, [r7, #5]
 801116a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	683a      	ldr	r2, [r7, #0]
 8011172:	f002 ffb1 	bl	80140d8 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8011176:	bf00      	nop
 8011178:	3708      	adds	r7, #8
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}

0801117e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801117e:	b580      	push	{r7, lr}
 8011180:	b084      	sub	sp, #16
 8011182:	af00      	add	r7, sp, #0
 8011184:	4603      	mov	r3, r0
 8011186:	60b9      	str	r1, [r7, #8]
 8011188:	607a      	str	r2, [r7, #4]
 801118a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801118c:	7bfb      	ldrb	r3, [r7, #15]
 801118e:	2b05      	cmp	r3, #5
 8011190:	d002      	beq.n	8011198 <RegionRxConfig+0x1a>
 8011192:	2b08      	cmp	r3, #8
 8011194:	d006      	beq.n	80111a4 <RegionRxConfig+0x26>
 8011196:	e00b      	b.n	80111b0 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8011198:	6879      	ldr	r1, [r7, #4]
 801119a:	68b8      	ldr	r0, [r7, #8]
 801119c:	f001 fd90 	bl	8012cc0 <RegionEU868RxConfig>
 80111a0:	4603      	mov	r3, r0
 80111a2:	e006      	b.n	80111b2 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80111a4:	6879      	ldr	r1, [r7, #4]
 80111a6:	68b8      	ldr	r0, [r7, #8]
 80111a8:	f002 ffe0 	bl	801416c <RegionUS915RxConfig>
 80111ac:	4603      	mov	r3, r0
 80111ae:	e000      	b.n	80111b2 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80111b0:	2300      	movs	r3, #0
        }
    }
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b084      	sub	sp, #16
 80111be:	af00      	add	r7, sp, #0
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
 80111c4:	603b      	str	r3, [r7, #0]
 80111c6:	4603      	mov	r3, r0
 80111c8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80111ca:	7bfb      	ldrb	r3, [r7, #15]
 80111cc:	2b05      	cmp	r3, #5
 80111ce:	d002      	beq.n	80111d6 <RegionTxConfig+0x1c>
 80111d0:	2b08      	cmp	r3, #8
 80111d2:	d007      	beq.n	80111e4 <RegionTxConfig+0x2a>
 80111d4:	e00d      	b.n	80111f2 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80111d6:	683a      	ldr	r2, [r7, #0]
 80111d8:	6879      	ldr	r1, [r7, #4]
 80111da:	68b8      	ldr	r0, [r7, #8]
 80111dc:	f001 fe40 	bl	8012e60 <RegionEU868TxConfig>
 80111e0:	4603      	mov	r3, r0
 80111e2:	e007      	b.n	80111f4 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	6879      	ldr	r1, [r7, #4]
 80111e8:	68b8      	ldr	r0, [r7, #8]
 80111ea:	f003 f843 	bl	8014274 <RegionUS915TxConfig>
 80111ee:	4603      	mov	r3, r0
 80111f0:	e000      	b.n	80111f4 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80111f2:	2300      	movs	r3, #0
        }
    }
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3710      	adds	r7, #16
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af02      	add	r7, sp, #8
 8011202:	60b9      	str	r1, [r7, #8]
 8011204:	607a      	str	r2, [r7, #4]
 8011206:	603b      	str	r3, [r7, #0]
 8011208:	4603      	mov	r3, r0
 801120a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801120c:	7bfb      	ldrb	r3, [r7, #15]
 801120e:	2b05      	cmp	r3, #5
 8011210:	d002      	beq.n	8011218 <RegionLinkAdrReq+0x1c>
 8011212:	2b08      	cmp	r3, #8
 8011214:	d00a      	beq.n	801122c <RegionLinkAdrReq+0x30>
 8011216:	e013      	b.n	8011240 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8011218:	69fb      	ldr	r3, [r7, #28]
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	683a      	ldr	r2, [r7, #0]
 8011220:	6879      	ldr	r1, [r7, #4]
 8011222:	68b8      	ldr	r0, [r7, #8]
 8011224:	f001 feec 	bl	8013000 <RegionEU868LinkAdrReq>
 8011228:	4603      	mov	r3, r0
 801122a:	e00a      	b.n	8011242 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	683a      	ldr	r2, [r7, #0]
 8011234:	6879      	ldr	r1, [r7, #4]
 8011236:	68b8      	ldr	r0, [r7, #8]
 8011238:	f003 f8c6 	bl	80143c8 <RegionUS915LinkAdrReq>
 801123c:	4603      	mov	r3, r0
 801123e:	e000      	b.n	8011242 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8011240:	2300      	movs	r3, #0
        }
    }
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}

0801124a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	af00      	add	r7, sp, #0
 8011250:	4603      	mov	r3, r0
 8011252:	6039      	str	r1, [r7, #0]
 8011254:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011256:	79fb      	ldrb	r3, [r7, #7]
 8011258:	2b05      	cmp	r3, #5
 801125a:	d002      	beq.n	8011262 <RegionRxParamSetupReq+0x18>
 801125c:	2b08      	cmp	r3, #8
 801125e:	d005      	beq.n	801126c <RegionRxParamSetupReq+0x22>
 8011260:	e009      	b.n	8011276 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8011262:	6838      	ldr	r0, [r7, #0]
 8011264:	f001 ffee 	bl	8013244 <RegionEU868RxParamSetupReq>
 8011268:	4603      	mov	r3, r0
 801126a:	e005      	b.n	8011278 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801126c:	6838      	ldr	r0, [r7, #0]
 801126e:	f003 fac5 	bl	80147fc <RegionUS915RxParamSetupReq>
 8011272:	4603      	mov	r3, r0
 8011274:	e000      	b.n	8011278 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8011276:	2300      	movs	r3, #0
        }
    }
}
 8011278:	4618      	mov	r0, r3
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	4603      	mov	r3, r0
 8011288:	6039      	str	r1, [r7, #0]
 801128a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801128c:	79fb      	ldrb	r3, [r7, #7]
 801128e:	2b05      	cmp	r3, #5
 8011290:	d002      	beq.n	8011298 <RegionNewChannelReq+0x18>
 8011292:	2b08      	cmp	r3, #8
 8011294:	d005      	beq.n	80112a2 <RegionNewChannelReq+0x22>
 8011296:	e009      	b.n	80112ac <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8011298:	6838      	ldr	r0, [r7, #0]
 801129a:	f002 f811 	bl	80132c0 <RegionEU868NewChannelReq>
 801129e:	4603      	mov	r3, r0
 80112a0:	e005      	b.n	80112ae <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80112a2:	6838      	ldr	r0, [r7, #0]
 80112a4:	f003 faf6 	bl	8014894 <RegionUS915NewChannelReq>
 80112a8:	4603      	mov	r3, r0
 80112aa:	e000      	b.n	80112ae <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80112ac:	2300      	movs	r3, #0
        }
    }
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b082      	sub	sp, #8
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	4603      	mov	r3, r0
 80112be:	6039      	str	r1, [r7, #0]
 80112c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80112c2:	79fb      	ldrb	r3, [r7, #7]
 80112c4:	2b05      	cmp	r3, #5
 80112c6:	d002      	beq.n	80112ce <RegionTxParamSetupReq+0x18>
 80112c8:	2b08      	cmp	r3, #8
 80112ca:	d005      	beq.n	80112d8 <RegionTxParamSetupReq+0x22>
 80112cc:	e009      	b.n	80112e2 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80112ce:	6838      	ldr	r0, [r7, #0]
 80112d0:	f002 f854 	bl	801337c <RegionEU868TxParamSetupReq>
 80112d4:	4603      	mov	r3, r0
 80112d6:	e005      	b.n	80112e4 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80112d8:	6838      	ldr	r0, [r7, #0]
 80112da:	f003 fae6 	bl	80148aa <RegionUS915TxParamSetupReq>
 80112de:	4603      	mov	r3, r0
 80112e0:	e000      	b.n	80112e4 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80112e2:	2300      	movs	r3, #0
        }
    }
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3708      	adds	r7, #8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	4603      	mov	r3, r0
 80112f4:	6039      	str	r1, [r7, #0]
 80112f6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	2b05      	cmp	r3, #5
 80112fc:	d002      	beq.n	8011304 <RegionDlChannelReq+0x18>
 80112fe:	2b08      	cmp	r3, #8
 8011300:	d005      	beq.n	801130e <RegionDlChannelReq+0x22>
 8011302:	e009      	b.n	8011318 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8011304:	6838      	ldr	r0, [r7, #0]
 8011306:	f002 f845 	bl	8013394 <RegionEU868DlChannelReq>
 801130a:	4603      	mov	r3, r0
 801130c:	e005      	b.n	801131a <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801130e:	6838      	ldr	r0, [r7, #0]
 8011310:	f003 fad6 	bl	80148c0 <RegionUS915DlChannelReq>
 8011314:	4603      	mov	r3, r0
 8011316:	e000      	b.n	801131a <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8011318:	2300      	movs	r3, #0
        }
    }
}
 801131a:	4618      	mov	r0, r3
 801131c:	3708      	adds	r7, #8
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}

08011322 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8011322:	b580      	push	{r7, lr}
 8011324:	b082      	sub	sp, #8
 8011326:	af00      	add	r7, sp, #0
 8011328:	4603      	mov	r3, r0
 801132a:	71fb      	strb	r3, [r7, #7]
 801132c:	460b      	mov	r3, r1
 801132e:	71bb      	strb	r3, [r7, #6]
 8011330:	4613      	mov	r3, r2
 8011332:	717b      	strb	r3, [r7, #5]
    switch( region )
 8011334:	79fb      	ldrb	r3, [r7, #7]
 8011336:	2b05      	cmp	r3, #5
 8011338:	d002      	beq.n	8011340 <RegionAlternateDr+0x1e>
 801133a:	2b08      	cmp	r3, #8
 801133c:	d009      	beq.n	8011352 <RegionAlternateDr+0x30>
 801133e:	e011      	b.n	8011364 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8011340:	797a      	ldrb	r2, [r7, #5]
 8011342:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011346:	4611      	mov	r1, r2
 8011348:	4618      	mov	r0, r3
 801134a:	f002 f86d 	bl	8013428 <RegionEU868AlternateDr>
 801134e:	4603      	mov	r3, r0
 8011350:	e009      	b.n	8011366 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8011352:	797a      	ldrb	r2, [r7, #5]
 8011354:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f003 fabc 	bl	80148d8 <RegionUS915AlternateDr>
 8011360:	4603      	mov	r3, r0
 8011362:	e000      	b.n	8011366 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8011364:	2300      	movs	r3, #0
        }
    }
}
 8011366:	4618      	mov	r0, r3
 8011368:	3708      	adds	r7, #8
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b084      	sub	sp, #16
 8011372:	af00      	add	r7, sp, #0
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
 8011378:	603b      	str	r3, [r7, #0]
 801137a:	4603      	mov	r3, r0
 801137c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	2b05      	cmp	r3, #5
 8011382:	d002      	beq.n	801138a <RegionNextChannel+0x1c>
 8011384:	2b08      	cmp	r3, #8
 8011386:	d008      	beq.n	801139a <RegionNextChannel+0x2c>
 8011388:	e00f      	b.n	80113aa <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801138a:	69bb      	ldr	r3, [r7, #24]
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	6879      	ldr	r1, [r7, #4]
 8011390:	68b8      	ldr	r0, [r7, #8]
 8011392:	f002 f859 	bl	8013448 <RegionEU868NextChannel>
 8011396:	4603      	mov	r3, r0
 8011398:	e008      	b.n	80113ac <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	6879      	ldr	r1, [r7, #4]
 80113a0:	68b8      	ldr	r0, [r7, #8]
 80113a2:	f003 facf 	bl	8014944 <RegionUS915NextChannel>
 80113a6:	4603      	mov	r3, r0
 80113a8:	e000      	b.n	80113ac <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80113aa:	2309      	movs	r3, #9
        }
    }
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3710      	adds	r7, #16
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80113b4:	b590      	push	{r4, r7, lr}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	4604      	mov	r4, r0
 80113bc:	4608      	mov	r0, r1
 80113be:	4611      	mov	r1, r2
 80113c0:	461a      	mov	r2, r3
 80113c2:	4623      	mov	r3, r4
 80113c4:	71fb      	strb	r3, [r7, #7]
 80113c6:	4603      	mov	r3, r0
 80113c8:	71bb      	strb	r3, [r7, #6]
 80113ca:	460b      	mov	r3, r1
 80113cc:	717b      	strb	r3, [r7, #5]
 80113ce:	4613      	mov	r3, r2
 80113d0:	713b      	strb	r3, [r7, #4]
    switch( region )
 80113d2:	79fb      	ldrb	r3, [r7, #7]
 80113d4:	2b05      	cmp	r3, #5
 80113d6:	d002      	beq.n	80113de <RegionApplyDrOffset+0x2a>
 80113d8:	2b08      	cmp	r3, #8
 80113da:	d00a      	beq.n	80113f2 <RegionApplyDrOffset+0x3e>
 80113dc:	e013      	b.n	8011406 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80113de:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80113e2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80113e6:	79bb      	ldrb	r3, [r7, #6]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f002 f9a7 	bl	801373c <RegionEU868ApplyDrOffset>
 80113ee:	4603      	mov	r3, r0
 80113f0:	e00a      	b.n	8011408 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80113f2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80113f6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80113fa:	79bb      	ldrb	r3, [r7, #6]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f003 fb8d 	bl	8014b1c <RegionUS915ApplyDrOffset>
 8011402:	4603      	mov	r3, r0
 8011404:	e000      	b.n	8011408 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8011406:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8011408:	4618      	mov	r0, r3
 801140a:	370c      	adds	r7, #12
 801140c:	46bd      	mov	sp, r7
 801140e:	bd90      	pop	{r4, r7, pc}

08011410 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8011416:	4b04      	ldr	r3, [pc, #16]	@ (8011428 <RegionGetVersion+0x18>)
 8011418:	607b      	str	r3, [r7, #4]

    return version;
 801141a:	687b      	ldr	r3, [r7, #4]
}
 801141c:	4618      	mov	r0, r3
 801141e:	370c      	adds	r7, #12
 8011420:	46bd      	mov	sp, r7
 8011422:	bc80      	pop	{r7}
 8011424:	4770      	bx	lr
 8011426:	bf00      	nop
 8011428:	02010001 	.word	0x02010001

0801142c <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 801142c:	b480      	push	{r7}
 801142e:	b087      	sub	sp, #28
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	607a      	str	r2, [r7, #4]
 8011438:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d002      	beq.n	8011446 <FindAvailable125kHzChannels+0x1a>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011446:	2303      	movs	r3, #3
 8011448:	e021      	b.n	801148e <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2200      	movs	r2, #0
 801144e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8011450:	2300      	movs	r3, #0
 8011452:	75fb      	strb	r3, [r7, #23]
 8011454:	e017      	b.n	8011486 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8011456:	89fa      	ldrh	r2, [r7, #14]
 8011458:	7dfb      	ldrb	r3, [r7, #23]
 801145a:	fa42 f303 	asr.w	r3, r2, r3
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	2b00      	cmp	r3, #0
 8011464:	d00c      	beq.n	8011480 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	461a      	mov	r2, r3
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	4413      	add	r3, r2
 8011470:	7dfa      	ldrb	r2, [r7, #23]
 8011472:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	3301      	adds	r3, #1
 801147a:	b2da      	uxtb	r2, r3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8011480:	7dfb      	ldrb	r3, [r7, #23]
 8011482:	3301      	adds	r3, #1
 8011484:	75fb      	strb	r3, [r7, #23]
 8011486:	7dfb      	ldrb	r3, [r7, #23]
 8011488:	2b07      	cmp	r3, #7
 801148a:	d9e4      	bls.n	8011456 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 801148c:	2300      	movs	r3, #0
}
 801148e:	4618      	mov	r0, r3
 8011490:	371c      	adds	r7, #28
 8011492:	46bd      	mov	sp, r7
 8011494:	bc80      	pop	{r7}
 8011496:	4770      	bx	lr

08011498 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8011498:	b590      	push	{r4, r7, lr}
 801149a:	b089      	sub	sp, #36	@ 0x24
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80114a4:	f107 0314 	add.w	r3, r7, #20
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]
 80114ac:	605a      	str	r2, [r3, #4]
    uint8_t availableChannels = 0;
 80114ae:	2300      	movs	r3, #0
 80114b0:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d005      	beq.n	80114c4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d002      	beq.n	80114c4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d101      	bne.n	80114c8 <RegionBaseUSComputeNext125kHzJoinChannel+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80114c4:	2303      	movs	r3, #3
 80114c6:	e055      	b.n	8011574 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80114ce:	7f7b      	ldrb	r3, [r7, #29]
 80114d0:	085b      	lsrs	r3, r3, #1
 80114d2:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 80114d4:	7f7b      	ldrb	r3, [r7, #29]
 80114d6:	f003 0301 	and.w	r3, r3, #1
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d107      	bne.n	80114f0 <RegionBaseUSComputeNext125kHzJoinChannel+0x58>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80114e0:	7f3b      	ldrb	r3, [r7, #28]
 80114e2:	005b      	lsls	r3, r3, #1
 80114e4:	68fa      	ldr	r2, [r7, #12]
 80114e6:	4413      	add	r3, r2
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	83fb      	strh	r3, [r7, #30]
 80114ee:	e006      	b.n	80114fe <RegionBaseUSComputeNext125kHzJoinChannel+0x66>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80114f0:	7f3b      	ldrb	r3, [r7, #28]
 80114f2:	005b      	lsls	r3, r3, #1
 80114f4:	68fa      	ldr	r2, [r7, #12]
 80114f6:	4413      	add	r3, r2
 80114f8:	881b      	ldrh	r3, [r3, #0]
 80114fa:	0a1b      	lsrs	r3, r3, #8
 80114fc:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80114fe:	f107 0213 	add.w	r2, r7, #19
 8011502:	f107 0114 	add.w	r1, r7, #20
 8011506:	8bfb      	ldrh	r3, [r7, #30]
 8011508:	4618      	mov	r0, r3
 801150a:	f7ff ff8f 	bl	801142c <FindAvailable125kHzChannels>
 801150e:	4603      	mov	r3, r0
 8011510:	2b03      	cmp	r3, #3
 8011512:	d101      	bne.n	8011518 <RegionBaseUSComputeNext125kHzJoinChannel+0x80>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011514:	2303      	movs	r3, #3
 8011516:	e02d      	b.n	8011574 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 8011518:	7cfb      	ldrb	r3, [r7, #19]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d011      	beq.n	8011542 <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801151e:	7f7b      	ldrb	r3, [r7, #29]
 8011520:	00db      	lsls	r3, r3, #3
 8011522:	b2dc      	uxtb	r4, r3
 8011524:	7cfb      	ldrb	r3, [r7, #19]
 8011526:	3b01      	subs	r3, #1
 8011528:	4619      	mov	r1, r3
 801152a:	2000      	movs	r0, #0
 801152c:	f004 ffea 	bl	8016504 <randr>
 8011530:	4603      	mov	r3, r0
 8011532:	3320      	adds	r3, #32
 8011534:	443b      	add	r3, r7
 8011536:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801153a:	4423      	add	r3, r4
 801153c:	b2da      	uxtb	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8011542:	7f7b      	ldrb	r3, [r7, #29]
 8011544:	3301      	adds	r3, #1
 8011546:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8011548:	7f7b      	ldrb	r3, [r7, #29]
 801154a:	2b07      	cmp	r3, #7
 801154c:	d901      	bls.n	8011552 <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8011552:	7cfb      	ldrb	r3, [r7, #19]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d104      	bne.n	8011562 <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	7f7a      	ldrb	r2, [r7, #29]
 801155e:	429a      	cmp	r2, r3
 8011560:	d1b5      	bne.n	80114ce <RegionBaseUSComputeNext125kHzJoinChannel+0x36>

    if ( availableChannels > 0 )
 8011562:	7cfb      	ldrb	r3, [r7, #19]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d004      	beq.n	8011572 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	7f7a      	ldrb	r2, [r7, #29]
 801156c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801156e:	2300      	movs	r3, #0
 8011570:	e000      	b.n	8011574 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8011572:	2303      	movs	r3, #3
}
 8011574:	4618      	mov	r0, r3
 8011576:	3724      	adds	r7, #36	@ 0x24
 8011578:	46bd      	mov	sp, r7
 801157a:	bd90      	pop	{r4, r7, pc}

0801157c <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801157c:	b480      	push	{r7}
 801157e:	b085      	sub	sp, #20
 8011580:	af00      	add	r7, sp, #0
 8011582:	4603      	mov	r3, r0
 8011584:	60b9      	str	r1, [r7, #8]
 8011586:	607a      	str	r2, [r7, #4]
 8011588:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	fb03 f202 	mul.w	r2, r3, r2
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	4413      	add	r3, r2
}
 8011596:	4618      	mov	r0, r3
 8011598:	3714      	adds	r7, #20
 801159a:	46bd      	mov	sp, r7
 801159c:	bc80      	pop	{r7}
 801159e:	4770      	bx	lr

080115a0 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80115a0:	b480      	push	{r7}
 80115a2:	b087      	sub	sp, #28
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	4608      	mov	r0, r1
 80115aa:	4639      	mov	r1, r7
 80115ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80115b0:	4603      	mov	r3, r0
 80115b2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80115ba:	7afb      	ldrb	r3, [r7, #11]
 80115bc:	f083 0301 	eor.w	r3, r3, #1
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d01b      	beq.n	80115fe <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80115c6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80115ca:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80115d2:	d202      	bcs.n	80115da <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80115d4:	2364      	movs	r3, #100	@ 0x64
 80115d6:	82bb      	strh	r3, [r7, #20]
 80115d8:	e00b      	b.n	80115f2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d803      	bhi.n	80115ec <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80115e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80115e8:	82bb      	strh	r3, [r7, #20]
 80115ea:	e002      	b.n	80115f2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80115ec:	f242 7310 	movw	r3, #10000	@ 0x2710
 80115f0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80115f2:	8aba      	ldrh	r2, [r7, #20]
 80115f4:	8afb      	ldrh	r3, [r7, #22]
 80115f6:	4293      	cmp	r3, r2
 80115f8:	bf38      	it	cc
 80115fa:	4613      	movcc	r3, r2
 80115fc:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80115fe:	8afb      	ldrh	r3, [r7, #22]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d101      	bne.n	8011608 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8011604:	2301      	movs	r3, #1
 8011606:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8011608:	8afb      	ldrh	r3, [r7, #22]
}
 801160a:	4618      	mov	r0, r3
 801160c:	371c      	adds	r7, #28
 801160e:	46bd      	mov	sp, r7
 8011610:	bc80      	pop	{r7}
 8011612:	4770      	bx	lr

08011614 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b08e      	sub	sp, #56	@ 0x38
 8011618:	af02      	add	r7, sp, #8
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	4608      	mov	r0, r1
 801161e:	4639      	mov	r1, r7
 8011620:	e881 000c 	stmia.w	r1, {r2, r3}
 8011624:	4603      	mov	r3, r0
 8011626:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	881b      	ldrh	r3, [r3, #0]
 801162c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801162e:	4b4b      	ldr	r3, [pc, #300]	@ (801175c <SetMaxTimeCredits+0x148>)
 8011630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8011632:	463b      	mov	r3, r7
 8011634:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011638:	f008 faa0 	bl	8019b7c <SysTimeToMs>
 801163c:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 801163e:	f107 0314 	add.w	r3, r7, #20
 8011642:	2200      	movs	r2, #0
 8011644:	601a      	str	r2, [r3, #0]
 8011646:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011648:	7af9      	ldrb	r1, [r7, #11]
 801164a:	463b      	mov	r3, r7
 801164c:	cb0c      	ldmia	r3, {r2, r3}
 801164e:	68f8      	ldr	r0, [r7, #12]
 8011650:	f7ff ffa6 	bl	80115a0 <GetDutyCycle>
 8011654:	4603      	mov	r3, r0
 8011656:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8011658:	7afb      	ldrb	r3, [r7, #11]
 801165a:	f083 0301 	eor.w	r3, r3, #1
 801165e:	b2db      	uxtb	r3, r3
 8011660:	2b00      	cmp	r3, #0
 8011662:	d062      	beq.n	801172a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011664:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011666:	2b64      	cmp	r3, #100	@ 0x64
 8011668:	d105      	bne.n	8011676 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801166a:	4b3c      	ldr	r3, [pc, #240]	@ (801175c <SetMaxTimeCredits+0x148>)
 801166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011672:	609a      	str	r2, [r3, #8]
 8011674:	e00b      	b.n	801168e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8011676:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011678:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801167c:	d105      	bne.n	801168a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801167e:	4b38      	ldr	r3, [pc, #224]	@ (8011760 <SetMaxTimeCredits+0x14c>)
 8011680:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011686:	609a      	str	r2, [r3, #8]
 8011688:	e001      	b.n	801168e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801168a:	4b36      	ldr	r3, [pc, #216]	@ (8011764 <SetMaxTimeCredits+0x150>)
 801168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	689a      	ldr	r2, [r3, #8]
 8011692:	f107 031c 	add.w	r3, r7, #28
 8011696:	4611      	mov	r1, r2
 8011698:	4618      	mov	r0, r3
 801169a:	f008 fa97 	bl	8019bcc <SysTimeFromMs>
 801169e:	f107 0014 	add.w	r0, r7, #20
 80116a2:	6a3b      	ldr	r3, [r7, #32]
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	463a      	mov	r2, r7
 80116aa:	ca06      	ldmia	r2, {r1, r2}
 80116ac:	f008 f9a7 	bl	80199fe <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80116b0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80116b4:	f083 0301 	eor.w	r3, r3, #1
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d006      	beq.n	80116cc <SetMaxTimeCredits+0xb8>
 80116be:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80116c2:	f083 0301 	eor.w	r3, r3, #1
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d108      	bne.n	80116de <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80116d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d103      	bne.n	80116de <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80116d6:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80116d8:	4a23      	ldr	r2, [pc, #140]	@ (8011768 <SetMaxTimeCredits+0x154>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d92f      	bls.n	801173e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116e2:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	4a21      	ldr	r2, [pc, #132]	@ (801176c <SetMaxTimeCredits+0x158>)
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d928      	bls.n	801173e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80116f2:	3b30      	subs	r3, #48	@ 0x30
 80116f4:	4a1e      	ldr	r2, [pc, #120]	@ (8011770 <SetMaxTimeCredits+0x15c>)
 80116f6:	fba2 2303 	umull	r2, r3, r2, r3
 80116fa:	0c1b      	lsrs	r3, r3, #16
 80116fc:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	4a1c      	ldr	r2, [pc, #112]	@ (8011774 <SetMaxTimeCredits+0x160>)
 8011702:	fb02 f303 	mul.w	r3, r2, r3
 8011706:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 801170e:	3330      	adds	r3, #48	@ 0x30
 8011710:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8011712:	2300      	movs	r3, #0
 8011714:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8011716:	f107 0314 	add.w	r3, r7, #20
 801171a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801171e:	f008 fa2d 	bl	8019b7c <SysTimeToMs>
 8011722:	4602      	mov	r2, r0
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	609a      	str	r2, [r3, #8]
 8011728:	e009      	b.n	801173e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801172a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801172e:	f083 0301 	eor.w	r3, r3, #1
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d002      	beq.n	801173e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801173c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d102      	bne.n	801174c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801174a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011750:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8011752:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8011754:	4618      	mov	r0, r3
 8011756:	3730      	adds	r7, #48	@ 0x30
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	001b7740 	.word	0x001b7740
 8011760:	0112a880 	.word	0x0112a880
 8011764:	02932e00 	.word	0x02932e00
 8011768:	0001517f 	.word	0x0001517f
 801176c:	0001ec2f 	.word	0x0001ec2f
 8011770:	c22e4507 	.word	0xc22e4507
 8011774:	00015180 	.word	0x00015180

08011778 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af02      	add	r7, sp, #8
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	4608      	mov	r0, r1
 8011782:	4611      	mov	r1, r2
 8011784:	461a      	mov	r2, r3
 8011786:	4603      	mov	r3, r0
 8011788:	70fb      	strb	r3, [r7, #3]
 801178a:	460b      	mov	r3, r1
 801178c:	70bb      	strb	r3, [r7, #2]
 801178e:	4613      	mov	r3, r2
 8011790:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8011792:	78f9      	ldrb	r1, [r7, #3]
 8011794:	787b      	ldrb	r3, [r7, #1]
 8011796:	9301      	str	r3, [sp, #4]
 8011798:	78bb      	ldrb	r3, [r7, #2]
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	f107 0318 	add.w	r3, r7, #24
 80117a0:	cb0c      	ldmia	r3, {r2, r3}
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff ff36 	bl	8011614 <SetMaxTimeCredits>
 80117a8:	4603      	mov	r3, r0
 80117aa:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80117ac:	78fb      	ldrb	r3, [r7, #3]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d00a      	beq.n	80117c8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f008 fba6 	bl	8019f08 <UTIL_TIMER_GetElapsedTime>
 80117bc:	4602      	mov	r2, r0
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	441a      	add	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	68da      	ldr	r2, [r3, #12]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	691b      	ldr	r3, [r3, #16]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d903      	bls.n	80117dc <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	691a      	ldr	r2, [r3, #16]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6a3a      	ldr	r2, [r7, #32]
 80117e0:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80117e2:	89fb      	ldrh	r3, [r7, #14]
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3710      	adds	r7, #16
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80117ec:	b480      	push	{r7}
 80117ee:	b085      	sub	sp, #20
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	4603      	mov	r3, r0
 80117f4:	460a      	mov	r2, r1
 80117f6:	80fb      	strh	r3, [r7, #6]
 80117f8:	4613      	mov	r3, r2
 80117fa:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8011800:	2300      	movs	r3, #0
 8011802:	73bb      	strb	r3, [r7, #14]
 8011804:	e011      	b.n	801182a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8011806:	88fa      	ldrh	r2, [r7, #6]
 8011808:	7bbb      	ldrb	r3, [r7, #14]
 801180a:	2101      	movs	r1, #1
 801180c:	fa01 f303 	lsl.w	r3, r1, r3
 8011810:	401a      	ands	r2, r3
 8011812:	7bbb      	ldrb	r3, [r7, #14]
 8011814:	2101      	movs	r1, #1
 8011816:	fa01 f303 	lsl.w	r3, r1, r3
 801181a:	429a      	cmp	r2, r3
 801181c:	d102      	bne.n	8011824 <CountChannels+0x38>
        {
            nbActiveBits++;
 801181e:	7bfb      	ldrb	r3, [r7, #15]
 8011820:	3301      	adds	r3, #1
 8011822:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8011824:	7bbb      	ldrb	r3, [r7, #14]
 8011826:	3301      	adds	r3, #1
 8011828:	73bb      	strb	r3, [r7, #14]
 801182a:	7bba      	ldrb	r2, [r7, #14]
 801182c:	797b      	ldrb	r3, [r7, #5]
 801182e:	429a      	cmp	r2, r3
 8011830:	d3e9      	bcc.n	8011806 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8011832:	7bfb      	ldrb	r3, [r7, #15]
}
 8011834:	4618      	mov	r0, r3
 8011836:	3714      	adds	r7, #20
 8011838:	46bd      	mov	sp, r7
 801183a:	bc80      	pop	{r7}
 801183c:	4770      	bx	lr

0801183e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801183e:	b580      	push	{r7, lr}
 8011840:	b084      	sub	sp, #16
 8011842:	af00      	add	r7, sp, #0
 8011844:	6039      	str	r1, [r7, #0]
 8011846:	4611      	mov	r1, r2
 8011848:	461a      	mov	r2, r3
 801184a:	4603      	mov	r3, r0
 801184c:	71fb      	strb	r3, [r7, #7]
 801184e:	460b      	mov	r3, r1
 8011850:	71bb      	strb	r3, [r7, #6]
 8011852:	4613      	mov	r3, r2
 8011854:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8011856:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801185a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801185e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011862:	4618      	mov	r0, r3
 8011864:	f000 f85d 	bl	8011922 <RegionCommonValueInRange>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801186e:	2300      	movs	r3, #0
 8011870:	e053      	b.n	801191a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011872:	2300      	movs	r3, #0
 8011874:	73fb      	strb	r3, [r7, #15]
 8011876:	2300      	movs	r3, #0
 8011878:	73bb      	strb	r3, [r7, #14]
 801187a:	e049      	b.n	8011910 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801187c:	2300      	movs	r3, #0
 801187e:	737b      	strb	r3, [r7, #13]
 8011880:	e03d      	b.n	80118fe <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8011882:	7bbb      	ldrb	r3, [r7, #14]
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	4413      	add	r3, r2
 801188a:	881b      	ldrh	r3, [r3, #0]
 801188c:	461a      	mov	r2, r3
 801188e:	7b7b      	ldrb	r3, [r7, #13]
 8011890:	fa42 f303 	asr.w	r3, r2, r3
 8011894:	f003 0301 	and.w	r3, r3, #1
 8011898:	2b00      	cmp	r3, #0
 801189a:	d02d      	beq.n	80118f8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801189c:	7bfa      	ldrb	r2, [r7, #15]
 801189e:	7b7b      	ldrb	r3, [r7, #13]
 80118a0:	4413      	add	r3, r2
 80118a2:	461a      	mov	r2, r3
 80118a4:	4613      	mov	r3, r2
 80118a6:	005b      	lsls	r3, r3, #1
 80118a8:	4413      	add	r3, r2
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	461a      	mov	r2, r3
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	4413      	add	r3, r2
 80118b2:	7a1b      	ldrb	r3, [r3, #8]
 80118b4:	f343 0303 	sbfx	r3, r3, #0, #4
 80118b8:	b25b      	sxtb	r3, r3
 80118ba:	f003 030f 	and.w	r3, r3, #15
 80118be:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80118c0:	7bfa      	ldrb	r2, [r7, #15]
 80118c2:	7b7b      	ldrb	r3, [r7, #13]
 80118c4:	4413      	add	r3, r2
 80118c6:	461a      	mov	r2, r3
 80118c8:	4613      	mov	r3, r2
 80118ca:	005b      	lsls	r3, r3, #1
 80118cc:	4413      	add	r3, r2
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	461a      	mov	r2, r3
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	4413      	add	r3, r2
 80118d6:	7a1b      	ldrb	r3, [r3, #8]
 80118d8:	f343 1303 	sbfx	r3, r3, #4, #4
 80118dc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80118de:	f003 030f 	and.w	r3, r3, #15
 80118e2:	b25a      	sxtb	r2, r3
 80118e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80118e8:	4618      	mov	r0, r3
 80118ea:	f000 f81a 	bl	8011922 <RegionCommonValueInRange>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d101      	bne.n	80118f8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80118f4:	2301      	movs	r3, #1
 80118f6:	e010      	b.n	801191a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80118f8:	7b7b      	ldrb	r3, [r7, #13]
 80118fa:	3301      	adds	r3, #1
 80118fc:	737b      	strb	r3, [r7, #13]
 80118fe:	7b7b      	ldrb	r3, [r7, #13]
 8011900:	2b0f      	cmp	r3, #15
 8011902:	d9be      	bls.n	8011882 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011904:	7bfb      	ldrb	r3, [r7, #15]
 8011906:	3310      	adds	r3, #16
 8011908:	73fb      	strb	r3, [r7, #15]
 801190a:	7bbb      	ldrb	r3, [r7, #14]
 801190c:	3301      	adds	r3, #1
 801190e:	73bb      	strb	r3, [r7, #14]
 8011910:	7bfa      	ldrb	r2, [r7, #15]
 8011912:	79fb      	ldrb	r3, [r7, #7]
 8011914:	429a      	cmp	r2, r3
 8011916:	d3b1      	bcc.n	801187c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8011922:	b480      	push	{r7}
 8011924:	b083      	sub	sp, #12
 8011926:	af00      	add	r7, sp, #0
 8011928:	4603      	mov	r3, r0
 801192a:	71fb      	strb	r3, [r7, #7]
 801192c:	460b      	mov	r3, r1
 801192e:	71bb      	strb	r3, [r7, #6]
 8011930:	4613      	mov	r3, r2
 8011932:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8011934:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011938:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801193c:	429a      	cmp	r2, r3
 801193e:	db07      	blt.n	8011950 <RegionCommonValueInRange+0x2e>
 8011940:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011948:	429a      	cmp	r2, r3
 801194a:	dc01      	bgt.n	8011950 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801194c:	2301      	movs	r3, #1
 801194e:	e000      	b.n	8011952 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8011950:	2300      	movs	r3, #0
}
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	bc80      	pop	{r7}
 801195a:	4770      	bx	lr

0801195c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801195c:	b480      	push	{r7}
 801195e:	b085      	sub	sp, #20
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	460b      	mov	r3, r1
 8011966:	70fb      	strb	r3, [r7, #3]
 8011968:	4613      	mov	r3, r2
 801196a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801196c:	78fb      	ldrb	r3, [r7, #3]
 801196e:	091b      	lsrs	r3, r3, #4
 8011970:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8011972:	78bb      	ldrb	r3, [r7, #2]
 8011974:	091b      	lsrs	r3, r3, #4
 8011976:	b2db      	uxtb	r3, r3
 8011978:	7bfa      	ldrb	r2, [r7, #15]
 801197a:	429a      	cmp	r2, r3
 801197c:	d803      	bhi.n	8011986 <RegionCommonChanDisable+0x2a>
 801197e:	78fa      	ldrb	r2, [r7, #3]
 8011980:	78bb      	ldrb	r3, [r7, #2]
 8011982:	429a      	cmp	r2, r3
 8011984:	d301      	bcc.n	801198a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8011986:	2300      	movs	r3, #0
 8011988:	e017      	b.n	80119ba <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801198a:	7bfb      	ldrb	r3, [r7, #15]
 801198c:	005b      	lsls	r3, r3, #1
 801198e:	687a      	ldr	r2, [r7, #4]
 8011990:	4413      	add	r3, r2
 8011992:	881b      	ldrh	r3, [r3, #0]
 8011994:	b21a      	sxth	r2, r3
 8011996:	78fb      	ldrb	r3, [r7, #3]
 8011998:	f003 030f 	and.w	r3, r3, #15
 801199c:	2101      	movs	r1, #1
 801199e:	fa01 f303 	lsl.w	r3, r1, r3
 80119a2:	b21b      	sxth	r3, r3
 80119a4:	43db      	mvns	r3, r3
 80119a6:	b21b      	sxth	r3, r3
 80119a8:	4013      	ands	r3, r2
 80119aa:	b219      	sxth	r1, r3
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
 80119ae:	005b      	lsls	r3, r3, #1
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	4413      	add	r3, r2
 80119b4:	b28a      	uxth	r2, r1
 80119b6:	801a      	strh	r2, [r3, #0]

    return true;
 80119b8:	2301      	movs	r3, #1
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	bc80      	pop	{r7}
 80119c2:	4770      	bx	lr

080119c4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	460b      	mov	r3, r1
 80119ce:	70fb      	strb	r3, [r7, #3]
 80119d0:	4613      	mov	r3, r2
 80119d2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d101      	bne.n	80119e2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80119de:	2300      	movs	r3, #0
 80119e0:	e018      	b.n	8011a14 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80119e2:	78fb      	ldrb	r3, [r7, #3]
 80119e4:	73bb      	strb	r3, [r7, #14]
 80119e6:	e010      	b.n	8011a0a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80119e8:	7bbb      	ldrb	r3, [r7, #14]
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	4413      	add	r3, r2
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	2110      	movs	r1, #16
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7ff fef9 	bl	80117ec <CountChannels>
 80119fa:	4603      	mov	r3, r0
 80119fc:	461a      	mov	r2, r3
 80119fe:	7bfb      	ldrb	r3, [r7, #15]
 8011a00:	4413      	add	r3, r2
 8011a02:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011a04:	7bbb      	ldrb	r3, [r7, #14]
 8011a06:	3301      	adds	r3, #1
 8011a08:	73bb      	strb	r3, [r7, #14]
 8011a0a:	7bba      	ldrb	r2, [r7, #14]
 8011a0c:	78bb      	ldrb	r3, [r7, #2]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d3ea      	bcc.n	80119e8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8011a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b087      	sub	sp, #28
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	60b9      	str	r1, [r7, #8]
 8011a26:	4613      	mov	r3, r2
 8011a28:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d016      	beq.n	8011a5e <RegionCommonChanMaskCopy+0x42>
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d013      	beq.n	8011a5e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8011a36:	2300      	movs	r3, #0
 8011a38:	75fb      	strb	r3, [r7, #23]
 8011a3a:	e00c      	b.n	8011a56 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8011a3c:	7dfb      	ldrb	r3, [r7, #23]
 8011a3e:	005b      	lsls	r3, r3, #1
 8011a40:	68ba      	ldr	r2, [r7, #8]
 8011a42:	441a      	add	r2, r3
 8011a44:	7dfb      	ldrb	r3, [r7, #23]
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	68f9      	ldr	r1, [r7, #12]
 8011a4a:	440b      	add	r3, r1
 8011a4c:	8812      	ldrh	r2, [r2, #0]
 8011a4e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8011a50:	7dfb      	ldrb	r3, [r7, #23]
 8011a52:	3301      	adds	r3, #1
 8011a54:	75fb      	strb	r3, [r7, #23]
 8011a56:	7dfa      	ldrb	r2, [r7, #23]
 8011a58:	79fb      	ldrb	r3, [r7, #7]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d3ee      	bcc.n	8011a3c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8011a5e:	bf00      	nop
 8011a60:	371c      	adds	r7, #28
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bc80      	pop	{r7}
 8011a66:	4770      	bx	lr

08011a68 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8011a68:	b082      	sub	sp, #8
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b086      	sub	sp, #24
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	60f8      	str	r0, [r7, #12]
 8011a72:	60b9      	str	r1, [r7, #8]
 8011a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a76:	4613      	mov	r3, r2
 8011a78:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011a7a:	79f9      	ldrb	r1, [r7, #7]
 8011a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011a80:	cb0c      	ldmia	r3, {r2, r3}
 8011a82:	68f8      	ldr	r0, [r7, #12]
 8011a84:	f7ff fd8c 	bl	80115a0 <GetDutyCycle>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	68da      	ldr	r2, [r3, #12]
 8011a90:	8afb      	ldrh	r3, [r7, #22]
 8011a92:	68b9      	ldr	r1, [r7, #8]
 8011a94:	fb01 f303 	mul.w	r3, r1, r3
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d909      	bls.n	8011ab0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	68da      	ldr	r2, [r3, #12]
 8011aa0:	8afb      	ldrh	r3, [r7, #22]
 8011aa2:	68b9      	ldr	r1, [r7, #8]
 8011aa4:	fb01 f303 	mul.w	r3, r1, r3
 8011aa8:	1ad2      	subs	r2, r2, r3
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8011aae:	e002      	b.n	8011ab6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	60da      	str	r2, [r3, #12]
}
 8011ab6:	bf00      	nop
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ac0:	b002      	add	sp, #8
 8011ac2:	4770      	bx	lr

08011ac4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8011ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ac6:	b08f      	sub	sp, #60	@ 0x3c
 8011ac8:	af04      	add	r7, sp, #16
 8011aca:	6039      	str	r1, [r7, #0]
 8011acc:	4611      	mov	r1, r2
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	71fb      	strb	r3, [r7, #7]
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	71bb      	strb	r3, [r7, #6]
 8011ad8:	4613      	mov	r3, r2
 8011ada:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8011adc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8011ae2:	f008 f9ff 	bl	8019ee4 <UTIL_TIMER_GetCurrentTime>
 8011ae6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8011aec:	2301      	movs	r3, #1
 8011aee:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8011af0:	2300      	movs	r3, #0
 8011af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8011af6:	2300      	movs	r3, #0
 8011af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011afc:	e0ba      	b.n	8011c74 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8011afe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011b02:	4613      	mov	r3, r2
 8011b04:	005b      	lsls	r3, r3, #1
 8011b06:	4413      	add	r3, r2
 8011b08:	00db      	lsls	r3, r3, #3
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	189c      	adds	r4, r3, r2
 8011b10:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8011b14:	797a      	ldrb	r2, [r7, #5]
 8011b16:	79fd      	ldrb	r5, [r7, #7]
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	9302      	str	r3, [sp, #8]
 8011b1c:	46ec      	mov	ip, sp
 8011b1e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011b26:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b2a:	4633      	mov	r3, r6
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f7ff fe22 	bl	8011778 <UpdateTimeCredits>
 8011b34:	4603      	mov	r3, r0
 8011b36:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8011b38:	8afa      	ldrh	r2, [r7, #22]
 8011b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b3c:	fb02 f303 	mul.w	r3, r2, r3
 8011b40:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8011b42:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011b46:	4613      	mov	r3, r2
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	4413      	add	r3, r2
 8011b4c:	00db      	lsls	r3, r3, #3
 8011b4e:	461a      	mov	r2, r3
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	4413      	add	r3, r2
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	69ba      	ldr	r2, [r7, #24]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d908      	bls.n	8011b6e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8011b5c:	797b      	ldrb	r3, [r7, #5]
 8011b5e:	f083 0301 	eor.w	r3, r3, #1
 8011b62:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d013      	beq.n	8011b90 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8011b68:	79fb      	ldrb	r3, [r7, #7]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d010      	beq.n	8011b90 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8011b6e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011b72:	4613      	mov	r3, r2
 8011b74:	005b      	lsls	r3, r3, #1
 8011b76:	4413      	add	r3, r2
 8011b78:	00db      	lsls	r3, r3, #3
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	4413      	add	r3, r2
 8011b80:	2201      	movs	r2, #1
 8011b82:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8011b84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011b88:	3301      	adds	r3, #1
 8011b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011b8e:	e06c      	b.n	8011c6a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8011b90:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011b94:	4613      	mov	r3, r2
 8011b96:	005b      	lsls	r3, r3, #1
 8011b98:	4413      	add	r3, r2
 8011b9a:	00db      	lsls	r3, r3, #3
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8011ba6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011baa:	4613      	mov	r3, r2
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	4413      	add	r3, r2
 8011bb0:	00db      	lsls	r3, r3, #3
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	4413      	add	r3, r2
 8011bb8:	691b      	ldr	r3, [r3, #16]
 8011bba:	69ba      	ldr	r2, [r7, #24]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d815      	bhi.n	8011bec <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8011bc0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	005b      	lsls	r3, r3, #1
 8011bc8:	4413      	add	r3, r2
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	461a      	mov	r2, r3
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	1ad3      	subs	r3, r2, r3
 8011bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	bf28      	it	cs
 8011bde:	4613      	movcs	r3, r2
 8011be0:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8011be2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011be6:	3301      	adds	r3, #1
 8011be8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8011bec:	79fb      	ldrb	r3, [r7, #7]
 8011bee:	f083 0301 	eor.w	r3, r3, #1
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d038      	beq.n	8011c6a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	60fb      	str	r3, [r7, #12]
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011c00:	8afb      	ldrh	r3, [r7, #22]
 8011c02:	2b64      	cmp	r3, #100	@ 0x64
 8011c04:	d103      	bne.n	8011c0e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8011c06:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8011c0a:	60fb      	str	r3, [r7, #12]
 8011c0c:	e009      	b.n	8011c22 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8011c0e:	8afb      	ldrh	r3, [r7, #22]
 8011c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011c14:	d103      	bne.n	8011c1e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8011c16:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8011c1a:	60fb      	str	r3, [r7, #12]
 8011c1c:	e001      	b.n	8011c22 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8011c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8011c98 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8011c20:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8011c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c24:	4a1c      	ldr	r2, [pc, #112]	@ (8011c98 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d90e      	bls.n	8011c48 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c2e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8011c32:	3b30      	subs	r3, #48	@ 0x30
 8011c34:	4919      	ldr	r1, [pc, #100]	@ (8011c9c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8011c36:	fba1 1303 	umull	r1, r3, r1, r3
 8011c3a:	0c1b      	lsrs	r3, r3, #16
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	4918      	ldr	r1, [pc, #96]	@ (8011ca0 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8011c40:	fb01 f303 	mul.w	r3, r1, r3
 8011c44:	4413      	add	r3, r2
 8011c46:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8011c48:	f107 000c 	add.w	r0, r7, #12
 8011c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c52:	f107 020c 	add.w	r2, r7, #12
 8011c56:	ca06      	ldmia	r2, {r1, r2}
 8011c58:	f007 fed1 	bl	80199fe <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8011c5c:	f107 030c 	add.w	r3, r7, #12
 8011c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c64:	f007 ff8a 	bl	8019b7c <SysTimeToMs>
 8011c68:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8011c6a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011c6e:	3301      	adds	r3, #1
 8011c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011c74:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011c78:	79bb      	ldrb	r3, [r7, #6]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	f4ff af3f 	bcc.w	8011afe <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8011c80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d102      	bne.n	8011c8e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8011c88:	f04f 33ff 	mov.w	r3, #4294967295
 8011c8c:	e000      	b.n	8011c90 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8011c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	372c      	adds	r7, #44	@ 0x2c
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c98:	0001ec30 	.word	0x0001ec30
 8011c9c:	c22e4507 	.word	0xc22e4507
 8011ca0:	00015180 	.word	0x00015180

08011ca4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b085      	sub	sp, #20
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	2b03      	cmp	r3, #3
 8011cb8:	d140      	bne.n	8011d3c <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	b25a      	sxtb	r2, r3
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011ccc:	f003 030f 	and.w	r3, r3, #15
 8011cd0:	b25a      	sxtb	r2, r3
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	091b      	lsrs	r3, r3, #4
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	b25a      	sxtb	r2, r3
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	3302      	adds	r3, #2
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	889b      	ldrh	r3, [r3, #4]
 8011cf8:	b21a      	sxth	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	3303      	adds	r3, #3
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	b21b      	sxth	r3, r3
 8011d02:	021b      	lsls	r3, r3, #8
 8011d04:	b21b      	sxth	r3, r3
 8011d06:	4313      	orrs	r3, r2
 8011d08:	b21b      	sxth	r3, r3
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	791a      	ldrb	r2, [r3, #4]
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	091b      	lsrs	r3, r3, #4
 8011d1e:	b2db      	uxtb	r3, r3
 8011d20:	f003 0307 	and.w	r3, r3, #7
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	f003 030f 	and.w	r3, r3, #15
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8011d38:	2305      	movs	r3, #5
 8011d3a:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8011d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3714      	adds	r7, #20
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bc80      	pop	{r7}
 8011d46:	4770      	bx	lr

08011d48 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8011d48:	b5b0      	push	{r4, r5, r7, lr}
 8011d4a:	b088      	sub	sp, #32
 8011d4c:	af02      	add	r7, sp, #8
 8011d4e:	60f8      	str	r0, [r7, #12]
 8011d50:	60b9      	str	r1, [r7, #8]
 8011d52:	607a      	str	r2, [r7, #4]
 8011d54:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	791b      	ldrb	r3, [r3, #4]
 8011d5a:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	799b      	ldrb	r3, [r3, #6]
 8011d60:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	79db      	ldrb	r3, [r3, #7]
 8011d66:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	7a1b      	ldrb	r3, [r3, #8]
 8011d6c:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	795b      	ldrb	r3, [r3, #5]
 8011d72:	f083 0301 	eor.w	r3, r3, #1
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d008      	beq.n	8011d8e <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	7adb      	ldrb	r3, [r3, #11]
 8011d80:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	7a5b      	ldrb	r3, [r3, #9]
 8011d86:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	7a9b      	ldrb	r3, [r3, #10]
 8011d8c:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d04a      	beq.n	8011e2a <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8011d94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8011d98:	2b0f      	cmp	r3, #15
 8011d9a:	d103      	bne.n	8011da4 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	7a5b      	ldrb	r3, [r3, #9]
 8011da0:	75bb      	strb	r3, [r7, #22]
 8011da2:	e01d      	b.n	8011de0 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	7b18      	ldrb	r0, [r3, #12]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	6919      	ldr	r1, [r3, #16]
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	6992      	ldr	r2, [r2, #24]
 8011dbc:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8011dc0:	9201      	str	r2, [sp, #4]
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	462b      	mov	r3, r5
 8011dc6:	4622      	mov	r2, r4
 8011dc8:	f7ff fd39 	bl	801183e <RegionCommonChanVerifyDr>
 8011dcc:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8011dce:	f083 0301 	eor.w	r3, r3, #1
 8011dd2:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d003      	beq.n	8011de0 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8011dd8:	7dfb      	ldrb	r3, [r7, #23]
 8011dda:	f023 0302 	bic.w	r3, r3, #2
 8011dde:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8011de0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8011de4:	2b0f      	cmp	r3, #15
 8011de6:	d103      	bne.n	8011df0 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	7a9b      	ldrb	r3, [r3, #10]
 8011dec:	757b      	strb	r3, [r7, #21]
 8011dee:	e01c      	b.n	8011e2a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8011dfc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7ff fd8e 	bl	8011922 <RegionCommonValueInRange>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d10e      	bne.n	8011e2a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8011e12:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	da03      	bge.n	8011e22 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	7f5b      	ldrb	r3, [r3, #29]
 8011e1e:	757b      	strb	r3, [r7, #21]
 8011e20:	e003      	b.n	8011e2a <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8011e22:	7dfb      	ldrb	r3, [r7, #23]
 8011e24:	f023 0304 	bic.w	r3, r3, #4
 8011e28:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8011e2a:	7dfb      	ldrb	r3, [r7, #23]
 8011e2c:	2b07      	cmp	r3, #7
 8011e2e:	d105      	bne.n	8011e3c <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8011e30:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d101      	bne.n	8011e3c <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8011e38:	2301      	movs	r3, #1
 8011e3a:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	7dba      	ldrb	r2, [r7, #22]
 8011e40:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	7d7a      	ldrb	r2, [r7, #21]
 8011e46:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8011e48:	7d3a      	ldrb	r2, [r7, #20]
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	701a      	strb	r2, [r3, #0]

    return status;
 8011e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3718      	adds	r7, #24
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bdb0      	pop	{r4, r5, r7, pc}

08011e58 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	4603      	mov	r3, r0
 8011e60:	6039      	str	r1, [r7, #0]
 8011e62:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8011e64:	79fb      	ldrb	r3, [r7, #7]
 8011e66:	4a06      	ldr	r2, [pc, #24]	@ (8011e80 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8011e68:	fa02 f303 	lsl.w	r3, r2, r3
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	370c      	adds	r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bc80      	pop	{r7}
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	000f4240 	.word	0x000f4240

08011e84 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8011e8e:	79fb      	ldrb	r3, [r7, #7]
 8011e90:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8011e94:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bc80      	pop	{r7}
 8011ea0:	4770      	bx	lr
	...

08011ea4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b085      	sub	sp, #20
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	607a      	str	r2, [r7, #4]
 8011eae:	603b      	str	r3, [r7, #0]
 8011eb0:	460b      	mov	r3, r1
 8011eb2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8011eb4:	7afa      	ldrb	r2, [r7, #11]
 8011eb6:	7afb      	ldrb	r3, [r7, #11]
 8011eb8:	3b04      	subs	r3, #4
 8011eba:	4619      	mov	r1, r3
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	fb03 f101 	mul.w	r1, r3, r1
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011ec8:	fb00 f303 	mul.w	r3, r0, r3
 8011ecc:	440b      	add	r3, r1
 8011ece:	005b      	lsls	r3, r3, #1
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d013      	beq.n	8011efc <RegionCommonComputeRxWindowParameters+0x58>
 8011ed4:	7afb      	ldrb	r3, [r7, #11]
 8011ed6:	3b04      	subs	r3, #4
 8011ed8:	4619      	mov	r1, r3
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	fb03 f101 	mul.w	r1, r3, r1
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011ee6:	fb00 f303 	mul.w	r3, r0, r3
 8011eea:	440b      	add	r3, r1
 8011eec:	0059      	lsls	r1, r3, #1
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	440b      	add	r3, r1
 8011ef2:	1e59      	subs	r1, r3, #1
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8011efa:	e00f      	b.n	8011f1c <RegionCommonComputeRxWindowParameters+0x78>
 8011efc:	7afb      	ldrb	r3, [r7, #11]
 8011efe:	3b04      	subs	r3, #4
 8011f00:	4619      	mov	r1, r3
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	fb03 f101 	mul.w	r1, r3, r1
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011f0e:	fb00 f303 	mul.w	r3, r0, r3
 8011f12:	440b      	add	r3, r1
 8011f14:	0059      	lsls	r1, r3, #1
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	bf38      	it	cc
 8011f20:	461a      	movcc	r2, r3
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	69bb      	ldr	r3, [r7, #24]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	68fa      	ldr	r2, [r7, #12]
 8011f32:	fb02 f303 	mul.w	r3, r2, r3
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d007      	beq.n	8011f4a <RegionCommonComputeRxWindowParameters+0xa6>
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	68fa      	ldr	r2, [r7, #12]
 8011f40:	fb02 f303 	mul.w	r3, r2, r3
 8011f44:	3301      	adds	r3, #1
 8011f46:	085b      	lsrs	r3, r3, #1
 8011f48:	e005      	b.n	8011f56 <RegionCommonComputeRxWindowParameters+0xb2>
 8011f4a:	69bb      	ldr	r3, [r7, #24]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	fb02 f303 	mul.w	r3, r2, r3
 8011f54:	085b      	lsrs	r3, r3, #1
 8011f56:	1acb      	subs	r3, r1, r3
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011f5e:	fb01 f202 	mul.w	r2, r1, r2
 8011f62:	1a9b      	subs	r3, r3, r2
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	dd27      	ble.n	8011fb8 <RegionCommonComputeRxWindowParameters+0x114>
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	69bb      	ldr	r3, [r7, #24]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	fb02 f303 	mul.w	r3, r2, r3
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d007      	beq.n	8011f8c <RegionCommonComputeRxWindowParameters+0xe8>
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	68fa      	ldr	r2, [r7, #12]
 8011f82:	fb02 f303 	mul.w	r3, r2, r3
 8011f86:	3301      	adds	r3, #1
 8011f88:	085b      	lsrs	r3, r3, #1
 8011f8a:	e005      	b.n	8011f98 <RegionCommonComputeRxWindowParameters+0xf4>
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	fb02 f303 	mul.w	r3, r2, r3
 8011f96:	085b      	lsrs	r3, r3, #1
 8011f98:	1acb      	subs	r3, r1, r3
 8011f9a:	683a      	ldr	r2, [r7, #0]
 8011f9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011fa0:	fb01 f202 	mul.w	r2, r1, r2
 8011fa4:	1a9b      	subs	r3, r3, r2
 8011fa6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8011faa:	4a19      	ldr	r2, [pc, #100]	@ (8012010 <RegionCommonComputeRxWindowParameters+0x16c>)
 8011fac:	fb82 1203 	smull	r1, r2, r2, r3
 8011fb0:	1192      	asrs	r2, r2, #6
 8011fb2:	17db      	asrs	r3, r3, #31
 8011fb4:	1ad3      	subs	r3, r2, r3
 8011fb6:	e024      	b.n	8012002 <RegionCommonComputeRxWindowParameters+0x15e>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	fb02 f303 	mul.w	r3, r2, r3
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d007      	beq.n	8011fdc <RegionCommonComputeRxWindowParameters+0x138>
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	68fa      	ldr	r2, [r7, #12]
 8011fd2:	fb02 f303 	mul.w	r3, r2, r3
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	085b      	lsrs	r3, r3, #1
 8011fda:	e005      	b.n	8011fe8 <RegionCommonComputeRxWindowParameters+0x144>
 8011fdc:	69bb      	ldr	r3, [r7, #24]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	68fa      	ldr	r2, [r7, #12]
 8011fe2:	fb02 f303 	mul.w	r3, r2, r3
 8011fe6:	085b      	lsrs	r3, r3, #1
 8011fe8:	1acb      	subs	r3, r1, r3
 8011fea:	683a      	ldr	r2, [r7, #0]
 8011fec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011ff0:	fb01 f202 	mul.w	r2, r1, r2
 8011ff4:	1a9b      	subs	r3, r3, r2
 8011ff6:	4a06      	ldr	r2, [pc, #24]	@ (8012010 <RegionCommonComputeRxWindowParameters+0x16c>)
 8011ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8011ffc:	1192      	asrs	r2, r2, #6
 8011ffe:	17db      	asrs	r3, r3, #31
 8012000:	1ad3      	subs	r3, r2, r3
 8012002:	69fa      	ldr	r2, [r7, #28]
 8012004:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8012006:	bf00      	nop
 8012008:	3714      	adds	r7, #20
 801200a:	46bd      	mov	sp, r7
 801200c:	bc80      	pop	{r7}
 801200e:	4770      	bx	lr
 8012010:	10624dd3 	.word	0x10624dd3

08012014 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b086      	sub	sp, #24
 8012018:	af00      	add	r7, sp, #0
 801201a:	4603      	mov	r3, r0
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
 8012020:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801202a:	005b      	lsls	r3, r3, #1
 801202c:	4618      	mov	r0, r3
 801202e:	f7ee fc21 	bl	8000874 <__aeabi_ui2f>
 8012032:	4603      	mov	r3, r0
 8012034:	4619      	mov	r1, r3
 8012036:	68b8      	ldr	r0, [r7, #8]
 8012038:	f7ee fb6a 	bl	8000710 <__aeabi_fsub>
 801203c:	4603      	mov	r3, r0
 801203e:	6879      	ldr	r1, [r7, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	f7ee fb65 	bl	8000710 <__aeabi_fsub>
 8012046:	4603      	mov	r3, r0
 8012048:	4618      	mov	r0, r3
 801204a:	f7ee fa55 	bl	80004f8 <__aeabi_f2d>
 801204e:	4602      	mov	r2, r0
 8012050:	460b      	mov	r3, r1
 8012052:	4610      	mov	r0, r2
 8012054:	4619      	mov	r1, r3
 8012056:	f00d fee3 	bl	801fe20 <floor>
 801205a:	4602      	mov	r2, r0
 801205c:	460b      	mov	r3, r1
 801205e:	4610      	mov	r0, r2
 8012060:	4619      	mov	r1, r3
 8012062:	f7ee fb29 	bl	80006b8 <__aeabi_d2iz>
 8012066:	4603      	mov	r3, r0
 8012068:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801206a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3718      	adds	r7, #24
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8012076:	b590      	push	{r4, r7, lr}
 8012078:	b087      	sub	sp, #28
 801207a:	af00      	add	r7, sp, #0
 801207c:	60f8      	str	r0, [r7, #12]
 801207e:	60b9      	str	r1, [r7, #8]
 8012080:	607a      	str	r2, [r7, #4]
 8012082:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8012084:	2300      	movs	r3, #0
 8012086:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8012088:	2300      	movs	r3, #0
 801208a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801208c:	2300      	movs	r3, #0
 801208e:	757b      	strb	r3, [r7, #21]
 8012090:	2300      	movs	r3, #0
 8012092:	753b      	strb	r3, [r7, #20]
 8012094:	e09c      	b.n	80121d0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012096:	2300      	movs	r3, #0
 8012098:	74fb      	strb	r3, [r7, #19]
 801209a:	e08f      	b.n	80121bc <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	685a      	ldr	r2, [r3, #4]
 80120a0:	7d3b      	ldrb	r3, [r7, #20]
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	4413      	add	r3, r2
 80120a6:	881b      	ldrh	r3, [r3, #0]
 80120a8:	461a      	mov	r2, r3
 80120aa:	7cfb      	ldrb	r3, [r7, #19]
 80120ac:	fa42 f303 	asr.w	r3, r2, r3
 80120b0:	f003 0301 	and.w	r3, r3, #1
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d07e      	beq.n	80121b6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	689a      	ldr	r2, [r3, #8]
 80120bc:	7d79      	ldrb	r1, [r7, #21]
 80120be:	7cfb      	ldrb	r3, [r7, #19]
 80120c0:	440b      	add	r3, r1
 80120c2:	4619      	mov	r1, r3
 80120c4:	460b      	mov	r3, r1
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	440b      	add	r3, r1
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	4413      	add	r3, r2
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d06b      	beq.n	80121ac <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	f083 0301 	eor.w	r3, r3, #1
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d011      	beq.n	8012106 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d00d      	beq.n	8012106 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	695a      	ldr	r2, [r3, #20]
 80120ee:	7d3b      	ldrb	r3, [r7, #20]
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	4413      	add	r3, r2
 80120f4:	881b      	ldrh	r3, [r3, #0]
 80120f6:	461a      	mov	r2, r3
 80120f8:	7cfb      	ldrb	r3, [r7, #19]
 80120fa:	fa42 f303 	asr.w	r3, r2, r3
 80120fe:	f003 0301 	and.w	r3, r3, #1
 8012102:	2b00      	cmp	r3, #0
 8012104:	d054      	beq.n	80121b0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	785b      	ldrb	r3, [r3, #1]
 801210a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	689a      	ldr	r2, [r3, #8]
 8012110:	7d79      	ldrb	r1, [r7, #21]
 8012112:	7cfb      	ldrb	r3, [r7, #19]
 8012114:	440b      	add	r3, r1
 8012116:	4619      	mov	r1, r3
 8012118:	460b      	mov	r3, r1
 801211a:	005b      	lsls	r3, r3, #1
 801211c:	440b      	add	r3, r1
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	4413      	add	r3, r2
 8012122:	7a1b      	ldrb	r3, [r3, #8]
 8012124:	f343 0303 	sbfx	r3, r3, #0, #4
 8012128:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801212a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	689a      	ldr	r2, [r3, #8]
 8012130:	7d79      	ldrb	r1, [r7, #21]
 8012132:	7cfb      	ldrb	r3, [r7, #19]
 8012134:	440b      	add	r3, r1
 8012136:	4619      	mov	r1, r3
 8012138:	460b      	mov	r3, r1
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	440b      	add	r3, r1
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	4413      	add	r3, r2
 8012142:	7a1b      	ldrb	r3, [r3, #8]
 8012144:	f343 1303 	sbfx	r3, r3, #4, #4
 8012148:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801214a:	461a      	mov	r2, r3
 801214c:	4621      	mov	r1, r4
 801214e:	f7ff fbe8 	bl	8011922 <RegionCommonValueInRange>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d02d      	beq.n	80121b4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	68da      	ldr	r2, [r3, #12]
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	6899      	ldr	r1, [r3, #8]
 8012160:	7d78      	ldrb	r0, [r7, #21]
 8012162:	7cfb      	ldrb	r3, [r7, #19]
 8012164:	4403      	add	r3, r0
 8012166:	4618      	mov	r0, r3
 8012168:	4603      	mov	r3, r0
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	4403      	add	r3, r0
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	440b      	add	r3, r1
 8012172:	7a5b      	ldrb	r3, [r3, #9]
 8012174:	4619      	mov	r1, r3
 8012176:	460b      	mov	r3, r1
 8012178:	005b      	lsls	r3, r3, #1
 801217a:	440b      	add	r3, r1
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	4413      	add	r3, r2
 8012180:	7d1b      	ldrb	r3, [r3, #20]
 8012182:	f083 0301 	eor.w	r3, r3, #1
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b00      	cmp	r3, #0
 801218a:	d003      	beq.n	8012194 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801218c:	7dbb      	ldrb	r3, [r7, #22]
 801218e:	3301      	adds	r3, #1
 8012190:	75bb      	strb	r3, [r7, #22]
                    continue;
 8012192:	e010      	b.n	80121b6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8012194:	7dfb      	ldrb	r3, [r7, #23]
 8012196:	1c5a      	adds	r2, r3, #1
 8012198:	75fa      	strb	r2, [r7, #23]
 801219a:	461a      	mov	r2, r3
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	4413      	add	r3, r2
 80121a0:	7d79      	ldrb	r1, [r7, #21]
 80121a2:	7cfa      	ldrb	r2, [r7, #19]
 80121a4:	440a      	add	r2, r1
 80121a6:	b2d2      	uxtb	r2, r2
 80121a8:	701a      	strb	r2, [r3, #0]
 80121aa:	e004      	b.n	80121b6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80121ac:	bf00      	nop
 80121ae:	e002      	b.n	80121b6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80121b0:	bf00      	nop
 80121b2:	e000      	b.n	80121b6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80121b4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80121b6:	7cfb      	ldrb	r3, [r7, #19]
 80121b8:	3301      	adds	r3, #1
 80121ba:	74fb      	strb	r3, [r7, #19]
 80121bc:	7cfb      	ldrb	r3, [r7, #19]
 80121be:	2b0f      	cmp	r3, #15
 80121c0:	f67f af6c 	bls.w	801209c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80121c4:	7d7b      	ldrb	r3, [r7, #21]
 80121c6:	3310      	adds	r3, #16
 80121c8:	757b      	strb	r3, [r7, #21]
 80121ca:	7d3b      	ldrb	r3, [r7, #20]
 80121cc:	3301      	adds	r3, #1
 80121ce:	753b      	strb	r3, [r7, #20]
 80121d0:	7d7b      	ldrb	r3, [r7, #21]
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	8a1b      	ldrh	r3, [r3, #16]
 80121d8:	429a      	cmp	r2, r3
 80121da:	f4ff af5c 	bcc.w	8012096 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	7dfa      	ldrb	r2, [r7, #23]
 80121e2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	7dba      	ldrb	r2, [r7, #22]
 80121e8:	701a      	strb	r2, [r3, #0]
}
 80121ea:	bf00      	nop
 80121ec:	371c      	adds	r7, #28
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd90      	pop	{r4, r7, pc}

080121f2 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80121f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f4:	b08b      	sub	sp, #44	@ 0x2c
 80121f6:	af04      	add	r7, sp, #16
 80121f8:	60f8      	str	r0, [r7, #12]
 80121fa:	60b9      	str	r1, [r7, #8]
 80121fc:	607a      	str	r2, [r7, #4]
 80121fe:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	4618      	mov	r0, r3
 8012206:	f007 fe7f 	bl	8019f08 <UTIL_TIMER_GetElapsedTime>
 801220a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	1ad2      	subs	r2, r2, r3
 8012214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012216:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8012218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801221a:	2201      	movs	r2, #1
 801221c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	2200      	movs	r2, #0
 8012222:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d004      	beq.n	8012236 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012230:	697a      	ldr	r2, [r7, #20]
 8012232:	429a      	cmp	r2, r3
 8012234:	d32b      	bcc.n	801228e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	69db      	ldr	r3, [r3, #28]
 8012240:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012246:	68dd      	ldr	r5, [r3, #12]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	7a5e      	ldrb	r6, [r3, #9]
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	7d1b      	ldrb	r3, [r3, #20]
 8012256:	68fa      	ldr	r2, [r7, #12]
 8012258:	6992      	ldr	r2, [r2, #24]
 801225a:	9203      	str	r2, [sp, #12]
 801225c:	68fa      	ldr	r2, [r7, #12]
 801225e:	f10d 0e04 	add.w	lr, sp, #4
 8012262:	320c      	adds	r2, #12
 8012264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012268:	e88e 0003 	stmia.w	lr, {r0, r1}
 801226c:	9300      	str	r3, [sp, #0]
 801226e:	4663      	mov	r3, ip
 8012270:	4632      	mov	r2, r6
 8012272:	4629      	mov	r1, r5
 8012274:	4620      	mov	r0, r4
 8012276:	f7ff fc25 	bl	8011ac4 <RegionCommonUpdateBandTimeOff>
 801227a:	4602      	mov	r2, r0
 801227c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801227e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	69d8      	ldr	r0, [r3, #28]
 8012284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012286:	683a      	ldr	r2, [r7, #0]
 8012288:	6879      	ldr	r1, [r7, #4]
 801228a:	f7ff fef4 	bl	8012076 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d004      	beq.n	80122a0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8012296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012298:	2200      	movs	r2, #0
 801229a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801229c:	2300      	movs	r3, #0
 801229e:	e006      	b.n	80122ae <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80122a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80122a8:	230b      	movs	r3, #11
 80122aa:	e000      	b.n	80122ae <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80122ac:	230c      	movs	r3, #12
    }
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	371c      	adds	r7, #28
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080122b6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80122b6:	b5b0      	push	{r4, r5, r7, lr}
 80122b8:	b086      	sub	sp, #24
 80122ba:	af02      	add	r7, sp, #8
 80122bc:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f993 2000 	ldrsb.w	r2, [r3]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d103      	bne.n	80122dc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80122da:	e026      	b.n	801232a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80122dc:	7bfb      	ldrb	r3, [r7, #15]
 80122de:	3b01      	subs	r3, #1
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80122ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d019      	beq.n	8012326 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	78d8      	ldrb	r0, [r3, #3]
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6859      	ldr	r1, [r3, #4]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	6892      	ldr	r2, [r2, #8]
 801230a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801230e:	9201      	str	r2, [sp, #4]
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	462b      	mov	r3, r5
 8012314:	4622      	mov	r2, r4
 8012316:	f7ff fa92 	bl	801183e <RegionCommonChanVerifyDr>
 801231a:	4603      	mov	r3, r0
 801231c:	f083 0301 	eor.w	r3, r3, #1
 8012320:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1da      	bne.n	80122dc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8012326:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bdb0      	pop	{r4, r5, r7, pc}

08012332 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8012332:	b480      	push	{r7}
 8012334:	b083      	sub	sp, #12
 8012336:	af00      	add	r7, sp, #0
 8012338:	4603      	mov	r3, r0
 801233a:	460a      	mov	r2, r1
 801233c:	71fb      	strb	r3, [r7, #7]
 801233e:	4613      	mov	r3, r2
 8012340:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8012342:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8012346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801234a:	4293      	cmp	r3, r2
 801234c:	bfb8      	it	lt
 801234e:	4613      	movlt	r3, r2
 8012350:	b25b      	sxtb	r3, r3
}
 8012352:	4618      	mov	r0, r3
 8012354:	370c      	adds	r7, #12
 8012356:	46bd      	mov	sp, r7
 8012358:	bc80      	pop	{r7}
 801235a:	4770      	bx	lr

0801235c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	683a      	ldr	r2, [r7, #0]
 801236c:	4413      	add	r3, r2
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4a07      	ldr	r2, [pc, #28]	@ (8012390 <RegionCommonGetBandwidth+0x34>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d004      	beq.n	8012380 <RegionCommonGetBandwidth+0x24>
 8012376:	4a07      	ldr	r2, [pc, #28]	@ (8012394 <RegionCommonGetBandwidth+0x38>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d003      	beq.n	8012384 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801237c:	2300      	movs	r3, #0
 801237e:	e002      	b.n	8012386 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8012380:	2301      	movs	r3, #1
 8012382:	e000      	b.n	8012386 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8012384:	2302      	movs	r3, #2
    }
}
 8012386:	4618      	mov	r0, r3
 8012388:	370c      	adds	r7, #12
 801238a:	46bd      	mov	sp, r7
 801238c:	bc80      	pop	{r7}
 801238e:	4770      	bx	lr
 8012390:	0003d090 	.word	0x0003d090
 8012394:	0007a120 	.word	0x0007a120

08012398 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b086      	sub	sp, #24
 801239c:	af04      	add	r7, sp, #16
 801239e:	4603      	mov	r3, r0
 80123a0:	6039      	str	r1, [r7, #0]
 80123a2:	71fb      	strb	r3, [r7, #7]
 80123a4:	4613      	mov	r3, r2
 80123a6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80123a8:	79fb      	ldrb	r3, [r7, #7]
 80123aa:	2b05      	cmp	r3, #5
 80123ac:	d810      	bhi.n	80123d0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80123ae:	79fb      	ldrb	r3, [r7, #7]
 80123b0:	4a0f      	ldr	r2, [pc, #60]	@ (80123f0 <RegionCommonRxConfigPrint+0x58>)
 80123b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123b6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80123ba:	9202      	str	r2, [sp, #8]
 80123bc:	683a      	ldr	r2, [r7, #0]
 80123be:	9201      	str	r2, [sp, #4]
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	4b0c      	ldr	r3, [pc, #48]	@ (80123f4 <RegionCommonRxConfigPrint+0x5c>)
 80123c4:	2201      	movs	r2, #1
 80123c6:	2100      	movs	r1, #0
 80123c8:	2002      	movs	r0, #2
 80123ca:	f006 fe17 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80123ce:	e00a      	b.n	80123e6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80123d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80123d4:	9301      	str	r3, [sp, #4]
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	4b07      	ldr	r3, [pc, #28]	@ (80123f8 <RegionCommonRxConfigPrint+0x60>)
 80123dc:	2201      	movs	r2, #1
 80123de:	2100      	movs	r1, #0
 80123e0:	2002      	movs	r0, #2
 80123e2:	f006 fe0b 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
}
 80123e6:	bf00      	nop
 80123e8:	3708      	adds	r7, #8
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	200000bc 	.word	0x200000bc
 80123f4:	08020274 	.word	0x08020274
 80123f8:	08020294 	.word	0x08020294

080123fc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af02      	add	r7, sp, #8
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	460b      	mov	r3, r1
 8012406:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8012408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801240c:	9301      	str	r3, [sp, #4]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	9300      	str	r3, [sp, #0]
 8012412:	4b05      	ldr	r3, [pc, #20]	@ (8012428 <RegionCommonTxConfigPrint+0x2c>)
 8012414:	2201      	movs	r2, #1
 8012416:	2100      	movs	r1, #0
 8012418:	2002      	movs	r0, #2
 801241a:	f006 fdef 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
}
 801241e:	bf00      	nop
 8012420:	3708      	adds	r7, #8
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	080202b0 	.word	0x080202b0

0801242c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012436:	4b2d      	ldr	r3, [pc, #180]	@ (80124ec <VerifyRfFreq+0xc0>)
 8012438:	6a1b      	ldr	r3, [r3, #32]
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	4798      	blx	r3
 801243e:	4603      	mov	r3, r0
 8012440:	f083 0301 	eor.w	r3, r3, #1
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b00      	cmp	r3, #0
 8012448:	d001      	beq.n	801244e <VerifyRfFreq+0x22>
    {
        return false;
 801244a:	2300      	movs	r3, #0
 801244c:	e04a      	b.n	80124e4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4a27      	ldr	r2, [pc, #156]	@ (80124f0 <VerifyRfFreq+0xc4>)
 8012452:	4293      	cmp	r3, r2
 8012454:	d307      	bcc.n	8012466 <VerifyRfFreq+0x3a>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	4a26      	ldr	r2, [pc, #152]	@ (80124f4 <VerifyRfFreq+0xc8>)
 801245a:	4293      	cmp	r3, r2
 801245c:	d803      	bhi.n	8012466 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	2202      	movs	r2, #2
 8012462:	701a      	strb	r2, [r3, #0]
 8012464:	e03d      	b.n	80124e2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4a22      	ldr	r2, [pc, #136]	@ (80124f4 <VerifyRfFreq+0xc8>)
 801246a:	4293      	cmp	r3, r2
 801246c:	d907      	bls.n	801247e <VerifyRfFreq+0x52>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4a21      	ldr	r2, [pc, #132]	@ (80124f8 <VerifyRfFreq+0xcc>)
 8012472:	4293      	cmp	r3, r2
 8012474:	d803      	bhi.n	801247e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	2200      	movs	r2, #0
 801247a:	701a      	strb	r2, [r3, #0]
 801247c:	e031      	b.n	80124e2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	4a1d      	ldr	r2, [pc, #116]	@ (80124f8 <VerifyRfFreq+0xcc>)
 8012482:	4293      	cmp	r3, r2
 8012484:	d907      	bls.n	8012496 <VerifyRfFreq+0x6a>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	4a1c      	ldr	r2, [pc, #112]	@ (80124fc <VerifyRfFreq+0xd0>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d803      	bhi.n	8012496 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	2201      	movs	r2, #1
 8012492:	701a      	strb	r2, [r3, #0]
 8012494:	e025      	b.n	80124e2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	4a19      	ldr	r2, [pc, #100]	@ (8012500 <VerifyRfFreq+0xd4>)
 801249a:	4293      	cmp	r3, r2
 801249c:	d907      	bls.n	80124ae <VerifyRfFreq+0x82>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4a18      	ldr	r2, [pc, #96]	@ (8012504 <VerifyRfFreq+0xd8>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d803      	bhi.n	80124ae <VerifyRfFreq+0x82>
    {
        *band = 5;
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	2205      	movs	r2, #5
 80124aa:	701a      	strb	r2, [r3, #0]
 80124ac:	e019      	b.n	80124e2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	4a15      	ldr	r2, [pc, #84]	@ (8012508 <VerifyRfFreq+0xdc>)
 80124b2:	4293      	cmp	r3, r2
 80124b4:	d907      	bls.n	80124c6 <VerifyRfFreq+0x9a>
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4a14      	ldr	r2, [pc, #80]	@ (801250c <VerifyRfFreq+0xe0>)
 80124ba:	4293      	cmp	r3, r2
 80124bc:	d803      	bhi.n	80124c6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	2203      	movs	r2, #3
 80124c2:	701a      	strb	r2, [r3, #0]
 80124c4:	e00d      	b.n	80124e2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	4a11      	ldr	r2, [pc, #68]	@ (8012510 <VerifyRfFreq+0xe4>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d307      	bcc.n	80124de <VerifyRfFreq+0xb2>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	4a10      	ldr	r2, [pc, #64]	@ (8012514 <VerifyRfFreq+0xe8>)
 80124d2:	4293      	cmp	r3, r2
 80124d4:	d803      	bhi.n	80124de <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2204      	movs	r2, #4
 80124da:	701a      	strb	r2, [r3, #0]
 80124dc:	e001      	b.n	80124e2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80124de:	2300      	movs	r3, #0
 80124e0:	e000      	b.n	80124e4 <VerifyRfFreq+0xb8>
    }
    return true;
 80124e2:	2301      	movs	r3, #1
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	08020bac 	.word	0x08020bac
 80124f0:	337055c0 	.word	0x337055c0
 80124f4:	338eda3f 	.word	0x338eda3f
 80124f8:	33bca100 	.word	0x33bca100
 80124fc:	33c5c8c0 	.word	0x33c5c8c0
 8012500:	33c74f5f 	.word	0x33c74f5f
 8012504:	33cef080 	.word	0x33cef080
 8012508:	33d1fdbf 	.word	0x33d1fdbf
 801250c:	33d5ce50 	.word	0x33d5ce50
 8012510:	33d691a0 	.word	0x33d691a0
 8012514:	33db2580 	.word	0x33db2580

08012518 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8012518:	b590      	push	{r4, r7, lr}
 801251a:	b08b      	sub	sp, #44	@ 0x2c
 801251c:	af04      	add	r7, sp, #16
 801251e:	4603      	mov	r3, r0
 8012520:	460a      	mov	r2, r1
 8012522:	71fb      	strb	r3, [r7, #7]
 8012524:	4613      	mov	r3, r2
 8012526:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8012528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801252c:	4a1f      	ldr	r2, [pc, #124]	@ (80125ac <GetTimeOnAir+0x94>)
 801252e:	5cd3      	ldrb	r3, [r2, r3]
 8012530:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8012532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012536:	491e      	ldr	r1, [pc, #120]	@ (80125b0 <GetTimeOnAir+0x98>)
 8012538:	4618      	mov	r0, r3
 801253a:	f7ff ff0f 	bl	801235c <RegionCommonGetBandwidth>
 801253e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8012540:	2300      	movs	r3, #0
 8012542:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8012544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012548:	2b07      	cmp	r3, #7
 801254a:	d118      	bne.n	801257e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801254c:	4b19      	ldr	r3, [pc, #100]	@ (80125b4 <GetTimeOnAir+0x9c>)
 801254e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012550:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012554:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012558:	fb02 f303 	mul.w	r3, r2, r3
 801255c:	4619      	mov	r1, r3
 801255e:	88bb      	ldrh	r3, [r7, #4]
 8012560:	b2db      	uxtb	r3, r3
 8012562:	2201      	movs	r2, #1
 8012564:	9203      	str	r2, [sp, #12]
 8012566:	9302      	str	r3, [sp, #8]
 8012568:	2300      	movs	r3, #0
 801256a:	9301      	str	r3, [sp, #4]
 801256c:	2305      	movs	r3, #5
 801256e:	9300      	str	r3, [sp, #0]
 8012570:	2300      	movs	r3, #0
 8012572:	460a      	mov	r2, r1
 8012574:	68f9      	ldr	r1, [r7, #12]
 8012576:	2000      	movs	r0, #0
 8012578:	47a0      	blx	r4
 801257a:	6178      	str	r0, [r7, #20]
 801257c:	e011      	b.n	80125a2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801257e:	4b0d      	ldr	r3, [pc, #52]	@ (80125b4 <GetTimeOnAir+0x9c>)
 8012580:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012582:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012586:	88bb      	ldrh	r3, [r7, #4]
 8012588:	b2db      	uxtb	r3, r3
 801258a:	2101      	movs	r1, #1
 801258c:	9103      	str	r1, [sp, #12]
 801258e:	9302      	str	r3, [sp, #8]
 8012590:	2300      	movs	r3, #0
 8012592:	9301      	str	r3, [sp, #4]
 8012594:	2308      	movs	r3, #8
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	2301      	movs	r3, #1
 801259a:	68f9      	ldr	r1, [r7, #12]
 801259c:	2001      	movs	r0, #1
 801259e:	47a0      	blx	r4
 80125a0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80125a2:	697b      	ldr	r3, [r7, #20]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	371c      	adds	r7, #28
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd90      	pop	{r4, r7, pc}
 80125ac:	0802076c 	.word	0x0802076c
 80125b0:	08020774 	.word	0x08020774
 80125b4:	08020bac 	.word	0x08020bac

080125b8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b088      	sub	sp, #32
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80125c0:	2300      	movs	r3, #0
 80125c2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	2b37      	cmp	r3, #55	@ 0x37
 80125cc:	f200 8122 	bhi.w	8012814 <RegionEU868GetPhyParam+0x25c>
 80125d0:	a201      	add	r2, pc, #4	@ (adr r2, 80125d8 <RegionEU868GetPhyParam+0x20>)
 80125d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125d6:	bf00      	nop
 80125d8:	080126b9 	.word	0x080126b9
 80125dc:	080126bf 	.word	0x080126bf
 80125e0:	08012815 	.word	0x08012815
 80125e4:	08012815 	.word	0x08012815
 80125e8:	08012815 	.word	0x08012815
 80125ec:	080126c5 	.word	0x080126c5
 80125f0:	08012815 	.word	0x08012815
 80125f4:	080126ff 	.word	0x080126ff
 80125f8:	08012815 	.word	0x08012815
 80125fc:	08012705 	.word	0x08012705
 8012600:	0801270b 	.word	0x0801270b
 8012604:	08012711 	.word	0x08012711
 8012608:	08012717 	.word	0x08012717
 801260c:	08012727 	.word	0x08012727
 8012610:	08012737 	.word	0x08012737
 8012614:	0801273d 	.word	0x0801273d
 8012618:	08012745 	.word	0x08012745
 801261c:	0801274d 	.word	0x0801274d
 8012620:	08012755 	.word	0x08012755
 8012624:	0801275d 	.word	0x0801275d
 8012628:	08012765 	.word	0x08012765
 801262c:	08012779 	.word	0x08012779
 8012630:	0801277f 	.word	0x0801277f
 8012634:	08012785 	.word	0x08012785
 8012638:	0801278b 	.word	0x0801278b
 801263c:	08012797 	.word	0x08012797
 8012640:	080127a3 	.word	0x080127a3
 8012644:	080127a9 	.word	0x080127a9
 8012648:	080127b1 	.word	0x080127b1
 801264c:	080127b7 	.word	0x080127b7
 8012650:	080127bd 	.word	0x080127bd
 8012654:	080127c5 	.word	0x080127c5
 8012658:	080126cb 	.word	0x080126cb
 801265c:	08012815 	.word	0x08012815
 8012660:	08012815 	.word	0x08012815
 8012664:	08012815 	.word	0x08012815
 8012668:	08012815 	.word	0x08012815
 801266c:	08012815 	.word	0x08012815
 8012670:	08012815 	.word	0x08012815
 8012674:	08012815 	.word	0x08012815
 8012678:	08012815 	.word	0x08012815
 801267c:	08012815 	.word	0x08012815
 8012680:	08012815 	.word	0x08012815
 8012684:	08012815 	.word	0x08012815
 8012688:	08012815 	.word	0x08012815
 801268c:	08012815 	.word	0x08012815
 8012690:	080127cb 	.word	0x080127cb
 8012694:	080127d1 	.word	0x080127d1
 8012698:	080127df 	.word	0x080127df
 801269c:	08012815 	.word	0x08012815
 80126a0:	08012815 	.word	0x08012815
 80126a4:	080127e5 	.word	0x080127e5
 80126a8:	080127eb 	.word	0x080127eb
 80126ac:	08012815 	.word	0x08012815
 80126b0:	080127f1 	.word	0x080127f1
 80126b4:	08012801 	.word	0x08012801
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80126b8:	2300      	movs	r3, #0
 80126ba:	61bb      	str	r3, [r7, #24]
            break;
 80126bc:	e0ab      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80126be:	2300      	movs	r3, #0
 80126c0:	61bb      	str	r3, [r7, #24]
            break;
 80126c2:	e0a8      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80126c4:	2300      	movs	r3, #0
 80126c6:	61bb      	str	r3, [r7, #24]
            break;
 80126c8:	e0a5      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80126d0:	733b      	strb	r3, [r7, #12]
 80126d2:	2307      	movs	r3, #7
 80126d4:	737b      	strb	r3, [r7, #13]
 80126d6:	2300      	movs	r3, #0
 80126d8:	73bb      	strb	r3, [r7, #14]
 80126da:	2310      	movs	r3, #16
 80126dc:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80126de:	4b51      	ldr	r3, [pc, #324]	@ (8012824 <RegionEU868GetPhyParam+0x26c>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80126e6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80126e8:	4b4e      	ldr	r3, [pc, #312]	@ (8012824 <RegionEU868GetPhyParam+0x26c>)
 80126ea:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80126ec:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80126ee:	f107 030c 	add.w	r3, r7, #12
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7ff fddf 	bl	80122b6 <RegionCommonGetNextLowerTxDr>
 80126f8:	4603      	mov	r3, r0
 80126fa:	61bb      	str	r3, [r7, #24]
            break;
 80126fc:	e08b      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80126fe:	2300      	movs	r3, #0
 8012700:	61bb      	str	r3, [r7, #24]
            break;
 8012702:	e088      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8012704:	2300      	movs	r3, #0
 8012706:	61bb      	str	r3, [r7, #24]
            break;
 8012708:	e085      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801270a:	2340      	movs	r3, #64	@ 0x40
 801270c:	61bb      	str	r3, [r7, #24]
            break;
 801270e:	e082      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8012710:	2320      	movs	r3, #32
 8012712:	61bb      	str	r3, [r7, #24]
            break;
 8012714:	e07f      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801271c:	461a      	mov	r2, r3
 801271e:	4b42      	ldr	r3, [pc, #264]	@ (8012828 <RegionEU868GetPhyParam+0x270>)
 8012720:	5c9b      	ldrb	r3, [r3, r2]
 8012722:	61bb      	str	r3, [r7, #24]
            break;
 8012724:	e077      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801272c:	461a      	mov	r2, r3
 801272e:	4b3f      	ldr	r3, [pc, #252]	@ (801282c <RegionEU868GetPhyParam+0x274>)
 8012730:	5c9b      	ldrb	r3, [r3, r2]
 8012732:	61bb      	str	r3, [r7, #24]
            break;
 8012734:	e06f      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8012736:	2301      	movs	r3, #1
 8012738:	61bb      	str	r3, [r7, #24]
            break;
 801273a:	e06c      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801273c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8012740:	61bb      	str	r3, [r7, #24]
            break;
 8012742:	e068      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8012744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012748:	61bb      	str	r3, [r7, #24]
            break;
 801274a:	e064      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801274c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8012750:	61bb      	str	r3, [r7, #24]
            break;
 8012752:	e060      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8012754:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012758:	61bb      	str	r3, [r7, #24]
            break;
 801275a:	e05c      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801275c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8012760:	61bb      	str	r3, [r7, #24]
            break;
 8012762:	e058      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8012764:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012768:	4831      	ldr	r0, [pc, #196]	@ (8012830 <RegionEU868GetPhyParam+0x278>)
 801276a:	f003 fecb 	bl	8016504 <randr>
 801276e:	4603      	mov	r3, r0
 8012770:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8012774:	61bb      	str	r3, [r7, #24]
            break;
 8012776:	e04e      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8012778:	2300      	movs	r3, #0
 801277a:	61bb      	str	r3, [r7, #24]
            break;
 801277c:	e04b      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801277e:	4b2d      	ldr	r3, [pc, #180]	@ (8012834 <RegionEU868GetPhyParam+0x27c>)
 8012780:	61bb      	str	r3, [r7, #24]
            break;
 8012782:	e048      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8012784:	2300      	movs	r3, #0
 8012786:	61bb      	str	r3, [r7, #24]
            break;
 8012788:	e045      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801278a:	4b26      	ldr	r3, [pc, #152]	@ (8012824 <RegionEU868GetPhyParam+0x26c>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8012792:	61bb      	str	r3, [r7, #24]
            break;
 8012794:	e03f      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012796:	4b23      	ldr	r3, [pc, #140]	@ (8012824 <RegionEU868GetPhyParam+0x26c>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801279e:	61bb      	str	r3, [r7, #24]
            break;
 80127a0:	e039      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80127a2:	2310      	movs	r3, #16
 80127a4:	61bb      	str	r3, [r7, #24]
            break;
 80127a6:	e036      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80127a8:	4b1e      	ldr	r3, [pc, #120]	@ (8012824 <RegionEU868GetPhyParam+0x26c>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	61bb      	str	r3, [r7, #24]
            break;
 80127ae:	e032      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80127b0:	2300      	movs	r3, #0
 80127b2:	61bb      	str	r3, [r7, #24]
            break;
 80127b4:	e02f      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80127b6:	2300      	movs	r3, #0
 80127b8:	61bb      	str	r3, [r7, #24]
            break;
 80127ba:	e02c      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80127bc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80127c0:	61bb      	str	r3, [r7, #24]
            break;
 80127c2:	e028      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80127c4:	4b1c      	ldr	r3, [pc, #112]	@ (8012838 <RegionEU868GetPhyParam+0x280>)
 80127c6:	61bb      	str	r3, [r7, #24]
            break;
 80127c8:	e025      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80127ca:	4b1a      	ldr	r3, [pc, #104]	@ (8012834 <RegionEU868GetPhyParam+0x27c>)
 80127cc:	61bb      	str	r3, [r7, #24]
            break;
 80127ce:	e022      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80127d0:	2311      	movs	r3, #17
 80127d2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80127d4:	2301      	movs	r3, #1
 80127d6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80127d8:	2300      	movs	r3, #0
 80127da:	76bb      	strb	r3, [r7, #26]
            break;
 80127dc:	e01b      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80127de:	2303      	movs	r3, #3
 80127e0:	61bb      	str	r3, [r7, #24]
            break;
 80127e2:	e018      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80127e4:	4b13      	ldr	r3, [pc, #76]	@ (8012834 <RegionEU868GetPhyParam+0x27c>)
 80127e6:	61bb      	str	r3, [r7, #24]
            break;
 80127e8:	e015      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80127ea:	2303      	movs	r3, #3
 80127ec:	61bb      	str	r3, [r7, #24]
            break;
 80127ee:	e012      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80127f6:	461a      	mov	r2, r3
 80127f8:	4b10      	ldr	r3, [pc, #64]	@ (801283c <RegionEU868GetPhyParam+0x284>)
 80127fa:	5c9b      	ldrb	r3, [r3, r2]
 80127fc:	61bb      	str	r3, [r7, #24]
            break;
 80127fe:	e00a      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012806:	490e      	ldr	r1, [pc, #56]	@ (8012840 <RegionEU868GetPhyParam+0x288>)
 8012808:	4618      	mov	r0, r3
 801280a:	f7ff fda7 	bl	801235c <RegionCommonGetBandwidth>
 801280e:	4603      	mov	r3, r0
 8012810:	61bb      	str	r3, [r7, #24]
            break;
 8012812:	e000      	b.n	8012816 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8012814:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8012816:	69bb      	ldr	r3, [r7, #24]
 8012818:	61fb      	str	r3, [r7, #28]
 801281a:	69fb      	ldr	r3, [r7, #28]
}
 801281c:	4618      	mov	r0, r3
 801281e:	3720      	adds	r7, #32
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	200011bc 	.word	0x200011bc
 8012828:	08020794 	.word	0x08020794
 801282c:	0802079c 	.word	0x0802079c
 8012830:	fffffc18 	.word	0xfffffc18
 8012834:	33d3e608 	.word	0x33d3e608
 8012838:	4009999a 	.word	0x4009999a
 801283c:	0802076c 	.word	0x0802076c
 8012840:	08020774 	.word	0x08020774

08012844 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012844:	b590      	push	{r4, r7, lr}
 8012846:	b085      	sub	sp, #20
 8012848:	af02      	add	r7, sp, #8
 801284a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801284c:	4b11      	ldr	r3, [pc, #68]	@ (8012894 <RegionEU868SetBandTxDone+0x50>)
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	4b11      	ldr	r3, [pc, #68]	@ (8012898 <RegionEU868SetBandTxDone+0x54>)
 8012852:	6819      	ldr	r1, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	4618      	mov	r0, r3
 801285a:	4603      	mov	r3, r0
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	4403      	add	r3, r0
 8012860:	009b      	lsls	r3, r3, #2
 8012862:	440b      	add	r3, r1
 8012864:	3309      	adds	r3, #9
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	4619      	mov	r1, r3
 801286a:	460b      	mov	r3, r1
 801286c:	005b      	lsls	r3, r3, #1
 801286e:	440b      	add	r3, r1
 8012870:	00db      	lsls	r3, r3, #3
 8012872:	18d0      	adds	r0, r2, r3
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6899      	ldr	r1, [r3, #8]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	785c      	ldrb	r4, [r3, #1]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	691a      	ldr	r2, [r3, #16]
 8012880:	9200      	str	r2, [sp, #0]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	4622      	mov	r2, r4
 8012886:	f7ff f8ef 	bl	8011a68 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801288a:	bf00      	nop
 801288c:	370c      	adds	r7, #12
 801288e:	46bd      	mov	sp, r7
 8012890:	bd90      	pop	{r4, r7, pc}
 8012892:	bf00      	nop
 8012894:	200011c0 	.word	0x200011c0
 8012898:	200011bc 	.word	0x200011bc

0801289c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b0b0      	sub	sp, #192	@ 0xc0
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80128a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80128a8:	2290      	movs	r2, #144	@ 0x90
 80128aa:	2100      	movs	r1, #0
 80128ac:	4618      	mov	r0, r3
 80128ae:	f00c fd06 	bl	801f2be <memset>
 80128b2:	2364      	movs	r3, #100	@ 0x64
 80128b4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80128b6:	2364      	movs	r3, #100	@ 0x64
 80128b8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80128bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80128c0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80128c4:	230a      	movs	r3, #10
 80128c6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80128ca:	2364      	movs	r3, #100	@ 0x64
 80128cc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80128d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80128d4:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	7b1b      	ldrb	r3, [r3, #12]
 80128dc:	2b02      	cmp	r3, #2
 80128de:	d05d      	beq.n	801299c <RegionEU868InitDefaults+0x100>
 80128e0:	2b02      	cmp	r3, #2
 80128e2:	dc6a      	bgt.n	80129ba <RegionEU868InitDefaults+0x11e>
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d002      	beq.n	80128ee <RegionEU868InitDefaults+0x52>
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d03e      	beq.n	801296a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80128ec:	e065      	b.n	80129ba <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d062      	beq.n	80129bc <RegionEU868InitDefaults+0x120>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d05e      	beq.n	80129bc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	4a30      	ldr	r2, [pc, #192]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 8012904:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	689b      	ldr	r3, [r3, #8]
 801290a:	4a2f      	ldr	r2, [pc, #188]	@ (80129c8 <RegionEU868InitDefaults+0x12c>)
 801290c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801290e:	4b2e      	ldr	r3, [pc, #184]	@ (80129c8 <RegionEU868InitDefaults+0x12c>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8012916:	2290      	movs	r2, #144	@ 0x90
 8012918:	4618      	mov	r0, r3
 801291a:	f003 fe0a 	bl	8016532 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801291e:	4b29      	ldr	r3, [pc, #164]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	4a2a      	ldr	r2, [pc, #168]	@ (80129cc <RegionEU868InitDefaults+0x130>)
 8012924:	ca07      	ldmia	r2, {r0, r1, r2}
 8012926:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801292a:	4b26      	ldr	r3, [pc, #152]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	4a28      	ldr	r2, [pc, #160]	@ (80129d0 <RegionEU868InitDefaults+0x134>)
 8012930:	330c      	adds	r3, #12
 8012932:	ca07      	ldmia	r2, {r0, r1, r2}
 8012934:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8012938:	4b22      	ldr	r3, [pc, #136]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	4a25      	ldr	r2, [pc, #148]	@ (80129d4 <RegionEU868InitDefaults+0x138>)
 801293e:	3318      	adds	r3, #24
 8012940:	ca07      	ldmia	r2, {r0, r1, r2}
 8012942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8012946:	4b1f      	ldr	r3, [pc, #124]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2207      	movs	r2, #7
 801294c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012950:	4b1c      	ldr	r3, [pc, #112]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8012958:	4b1a      	ldr	r3, [pc, #104]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8012960:	2201      	movs	r2, #1
 8012962:	4619      	mov	r1, r3
 8012964:	f7ff f85a 	bl	8011a1c <RegionCommonChanMaskCopy>
 8012968:	e028      	b.n	80129bc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801296a:	4b16      	ldr	r3, [pc, #88]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2200      	movs	r2, #0
 8012970:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8012972:	4b14      	ldr	r3, [pc, #80]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2200      	movs	r2, #0
 8012978:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801297a:	4b12      	ldr	r3, [pc, #72]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2200      	movs	r2, #0
 8012980:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012982:	4b10      	ldr	r3, [pc, #64]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801298a:	4b0e      	ldr	r3, [pc, #56]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8012992:	2201      	movs	r2, #1
 8012994:	4619      	mov	r1, r3
 8012996:	f7ff f841 	bl	8011a1c <RegionCommonChanMaskCopy>
            break;
 801299a:	e00f      	b.n	80129bc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801299c:	4b09      	ldr	r3, [pc, #36]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 80129a4:	4b07      	ldr	r3, [pc, #28]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 80129ac:	4b05      	ldr	r3, [pc, #20]	@ (80129c4 <RegionEU868InitDefaults+0x128>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	430a      	orrs	r2, r1
 80129b2:	b292      	uxth	r2, r2
 80129b4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 80129b8:	e000      	b.n	80129bc <RegionEU868InitDefaults+0x120>
            break;
 80129ba:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80129bc:	37c0      	adds	r7, #192	@ 0xc0
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	200011bc 	.word	0x200011bc
 80129c8:	200011c0 	.word	0x200011c0
 80129cc:	080202cc 	.word	0x080202cc
 80129d0:	080202d8 	.word	0x080202d8
 80129d4:	080202e4 	.word	0x080202e4

080129d8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	460b      	mov	r3, r1
 80129e2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80129e4:	78fb      	ldrb	r3, [r7, #3]
 80129e6:	2b0f      	cmp	r3, #15
 80129e8:	d86c      	bhi.n	8012ac4 <RegionEU868Verify+0xec>
 80129ea:	a201      	add	r2, pc, #4	@ (adr r2, 80129f0 <RegionEU868Verify+0x18>)
 80129ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129f0:	08012a31 	.word	0x08012a31
 80129f4:	08012ac5 	.word	0x08012ac5
 80129f8:	08012ac5 	.word	0x08012ac5
 80129fc:	08012ac5 	.word	0x08012ac5
 8012a00:	08012ac5 	.word	0x08012ac5
 8012a04:	08012a49 	.word	0x08012a49
 8012a08:	08012a67 	.word	0x08012a67
 8012a0c:	08012a85 	.word	0x08012a85
 8012a10:	08012ac5 	.word	0x08012ac5
 8012a14:	08012aa3 	.word	0x08012aa3
 8012a18:	08012aa3 	.word	0x08012aa3
 8012a1c:	08012ac5 	.word	0x08012ac5
 8012a20:	08012ac5 	.word	0x08012ac5
 8012a24:	08012ac5 	.word	0x08012ac5
 8012a28:	08012ac5 	.word	0x08012ac5
 8012a2c:	08012ac1 	.word	0x08012ac1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8012a30:	2300      	movs	r3, #0
 8012a32:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f107 020f 	add.w	r2, r7, #15
 8012a3c:	4611      	mov	r1, r2
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ff fcf4 	bl	801242c <VerifyRfFreq>
 8012a44:	4603      	mov	r3, r0
 8012a46:	e03e      	b.n	8012ac6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8012a4e:	2207      	movs	r2, #7
 8012a50:	2100      	movs	r1, #0
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7fe ff65 	bl	8011922 <RegionCommonValueInRange>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	bf14      	ite	ne
 8012a5e:	2301      	movne	r3, #1
 8012a60:	2300      	moveq	r3, #0
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	e02f      	b.n	8012ac6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f993 3000 	ldrsb.w	r3, [r3]
 8012a6c:	2205      	movs	r2, #5
 8012a6e:	2100      	movs	r1, #0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fe ff56 	bl	8011922 <RegionCommonValueInRange>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	bf14      	ite	ne
 8012a7c:	2301      	movne	r3, #1
 8012a7e:	2300      	moveq	r3, #0
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	e020      	b.n	8012ac6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f993 3000 	ldrsb.w	r3, [r3]
 8012a8a:	2207      	movs	r2, #7
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fe ff47 	bl	8011922 <RegionCommonValueInRange>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	bf14      	ite	ne
 8012a9a:	2301      	movne	r3, #1
 8012a9c:	2300      	moveq	r3, #0
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	e011      	b.n	8012ac6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8012aa8:	2207      	movs	r2, #7
 8012aaa:	2100      	movs	r1, #0
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7fe ff38 	bl	8011922 <RegionCommonValueInRange>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	bf14      	ite	ne
 8012ab8:	2301      	movne	r3, #1
 8012aba:	2300      	moveq	r3, #0
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	e002      	b.n	8012ac6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	e000      	b.n	8012ac6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8012ac4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3710      	adds	r7, #16
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop

08012ad0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b08a      	sub	sp, #40	@ 0x28
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012ad8:	2350      	movs	r3, #80	@ 0x50
 8012ada:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	7a1b      	ldrb	r3, [r3, #8]
 8012ae2:	2b10      	cmp	r3, #16
 8012ae4:	d162      	bne.n	8012bac <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	330f      	adds	r3, #15
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d15e      	bne.n	8012bb0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012af2:	2300      	movs	r3, #0
 8012af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012af8:	2303      	movs	r3, #3
 8012afa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012afe:	e050      	b.n	8012ba2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8012b00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b04:	2b07      	cmp	r3, #7
 8012b06:	d824      	bhi.n	8012b52 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685a      	ldr	r2, [r3, #4]
 8012b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b10:	4413      	add	r3, r2
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8012b16:	69ba      	ldr	r2, [r7, #24]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6859      	ldr	r1, [r3, #4]
 8012b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b20:	3301      	adds	r3, #1
 8012b22:	440b      	add	r3, r1
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	021b      	lsls	r3, r3, #8
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8012b2c:	69ba      	ldr	r2, [r7, #24]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6859      	ldr	r1, [r3, #4]
 8012b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b36:	3302      	adds	r3, #2
 8012b38:	440b      	add	r3, r1
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	041b      	lsls	r3, r3, #16
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8012b42:	69bb      	ldr	r3, [r7, #24]
 8012b44:	2264      	movs	r2, #100	@ 0x64
 8012b46:	fb02 f303 	mul.w	r3, r2, r3
 8012b4a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	61fb      	str	r3, [r7, #28]
 8012b50:	e006      	b.n	8012b60 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8012b52:	2300      	movs	r3, #0
 8012b54:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8012b56:	2300      	movs	r3, #0
 8012b58:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d00b      	beq.n	8012b7e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8012b66:	f107 0318 	add.w	r3, r7, #24
 8012b6a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8012b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b70:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8012b72:	f107 0310 	add.w	r3, r7, #16
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 fd14 	bl	80135a4 <RegionEU868ChannelAdd>
 8012b7c:	e007      	b.n	8012b8e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8012b7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b82:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 fdad 	bl	80136e8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b92:	3303      	adds	r3, #3
 8012b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ba6:	2b0f      	cmp	r3, #15
 8012ba8:	d9aa      	bls.n	8012b00 <RegionEU868ApplyCFList+0x30>
 8012baa:	e002      	b.n	8012bb2 <RegionEU868ApplyCFList+0xe2>
        return;
 8012bac:	bf00      	nop
 8012bae:	e000      	b.n	8012bb2 <RegionEU868ApplyCFList+0xe2>
        return;
 8012bb0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8012bb2:	3728      	adds	r7, #40	@ 0x28
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	791b      	ldrb	r3, [r3, #4]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d002      	beq.n	8012bce <RegionEU868ChanMaskSet+0x16>
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d00b      	beq.n	8012be4 <RegionEU868ChanMaskSet+0x2c>
 8012bcc:	e015      	b.n	8012bfa <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8012bce:	4b0e      	ldr	r3, [pc, #56]	@ (8012c08 <RegionEU868ChanMaskSet+0x50>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	2201      	movs	r2, #1
 8012bdc:	4619      	mov	r1, r3
 8012bde:	f7fe ff1d 	bl	8011a1c <RegionCommonChanMaskCopy>
            break;
 8012be2:	e00c      	b.n	8012bfe <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8012be4:	4b08      	ldr	r3, [pc, #32]	@ (8012c08 <RegionEU868ChanMaskSet+0x50>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2201      	movs	r2, #1
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	f7fe ff12 	bl	8011a1c <RegionCommonChanMaskCopy>
            break;
 8012bf8:	e001      	b.n	8012bfe <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	e000      	b.n	8012c00 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8012bfe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	200011bc 	.word	0x200011bc

08012c0c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b088      	sub	sp, #32
 8012c10:	af02      	add	r7, sp, #8
 8012c12:	60ba      	str	r2, [r7, #8]
 8012c14:	607b      	str	r3, [r7, #4]
 8012c16:	4603      	mov	r3, r0
 8012c18:	73fb      	strb	r3, [r7, #15]
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8012c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c26:	2b07      	cmp	r3, #7
 8012c28:	bfa8      	it	ge
 8012c2a:	2307      	movge	r3, #7
 8012c2c:	b25a      	sxtb	r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c38:	491e      	ldr	r1, [pc, #120]	@ (8012cb4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7ff fb8e 	bl	801235c <RegionCommonGetBandwidth>
 8012c40:	4603      	mov	r3, r0
 8012c42:	b2da      	uxtb	r2, r3
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c4e:	2b07      	cmp	r3, #7
 8012c50:	d10a      	bne.n	8012c68 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c58:	461a      	mov	r2, r3
 8012c5a:	4b17      	ldr	r3, [pc, #92]	@ (8012cb8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8012c5c:	5c9b      	ldrb	r3, [r3, r2]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff f910 	bl	8011e84 <RegionCommonComputeSymbolTimeFsk>
 8012c64:	6178      	str	r0, [r7, #20]
 8012c66:	e011      	b.n	8012c8c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c6e:	461a      	mov	r2, r3
 8012c70:	4b11      	ldr	r3, [pc, #68]	@ (8012cb8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8012c72:	5c9a      	ldrb	r2, [r3, r2]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8012c7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012c82:	4619      	mov	r1, r3
 8012c84:	4610      	mov	r0, r2
 8012c86:	f7ff f8e7 	bl	8011e58 <RegionCommonComputeSymbolTimeLoRa>
 8012c8a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8012cbc <RegionEU868ComputeRxWindowParameters+0xb0>)
 8012c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012c90:	4798      	blx	r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	3308      	adds	r3, #8
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	320c      	adds	r2, #12
 8012c9a:	7bb9      	ldrb	r1, [r7, #14]
 8012c9c:	9201      	str	r2, [sp, #4]
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	68ba      	ldr	r2, [r7, #8]
 8012ca4:	6978      	ldr	r0, [r7, #20]
 8012ca6:	f7ff f8fd 	bl	8011ea4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8012caa:	bf00      	nop
 8012cac:	3718      	adds	r7, #24
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	08020774 	.word	0x08020774
 8012cb8:	0802076c 	.word	0x0802076c
 8012cbc:	08020bac 	.word	0x08020bac

08012cc0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012cc0:	b5b0      	push	{r4, r5, r7, lr}
 8012cc2:	b090      	sub	sp, #64	@ 0x40
 8012cc4:	af0a      	add	r7, sp, #40	@ 0x28
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	785b      	ldrb	r3, [r3, #1]
 8012cce:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	685b      	ldr	r3, [r3, #4]
 8012cdc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012cde:	4b5a      	ldr	r3, [pc, #360]	@ (8012e48 <RegionEU868RxConfig+0x188>)
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	4798      	blx	r3
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <RegionEU868RxConfig+0x2e>
    {
        return false;
 8012cea:	2300      	movs	r3, #0
 8012cec:	e0a8      	b.n	8012e40 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	7cdb      	ldrb	r3, [r3, #19]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d126      	bne.n	8012d44 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8012cf6:	4b55      	ldr	r3, [pc, #340]	@ (8012e4c <RegionEU868RxConfig+0x18c>)
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	4619      	mov	r1, r3
 8012d00:	460b      	mov	r3, r1
 8012d02:	005b      	lsls	r3, r3, #1
 8012d04:	440b      	add	r3, r1
 8012d06:	009b      	lsls	r3, r3, #2
 8012d08:	4413      	add	r3, r2
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8012d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8012e4c <RegionEU868RxConfig+0x18c>)
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	4619      	mov	r1, r3
 8012d18:	460b      	mov	r3, r1
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	440b      	add	r3, r1
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	4413      	add	r3, r2
 8012d22:	3304      	adds	r3, #4
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d00c      	beq.n	8012d44 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8012d2a:	4b48      	ldr	r3, [pc, #288]	@ (8012e4c <RegionEU868RxConfig+0x18c>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	4619      	mov	r1, r3
 8012d34:	460b      	mov	r3, r1
 8012d36:	005b      	lsls	r3, r3, #1
 8012d38:	440b      	add	r3, r1
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	4413      	add	r3, r2
 8012d3e:	3304      	adds	r3, #4
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8012d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d48:	4a41      	ldr	r2, [pc, #260]	@ (8012e50 <RegionEU868RxConfig+0x190>)
 8012d4a:	5cd3      	ldrb	r3, [r2, r3]
 8012d4c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8012d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8012e48 <RegionEU868RxConfig+0x188>)
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	6938      	ldr	r0, [r7, #16]
 8012d54:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8012d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d5a:	2b07      	cmp	r3, #7
 8012d5c:	d128      	bne.n	8012db0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8012d62:	4b39      	ldr	r3, [pc, #228]	@ (8012e48 <RegionEU868RxConfig+0x188>)
 8012d64:	699c      	ldr	r4, [r3, #24]
 8012d66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012d6e:	fb02 f303 	mul.w	r3, r2, r3
 8012d72:	4619      	mov	r1, r3
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	689b      	ldr	r3, [r3, #8]
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	7c92      	ldrb	r2, [r2, #18]
 8012d7e:	7df8      	ldrb	r0, [r7, #23]
 8012d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d82:	2200      	movs	r2, #0
 8012d84:	9208      	str	r2, [sp, #32]
 8012d86:	2200      	movs	r2, #0
 8012d88:	9207      	str	r2, [sp, #28]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	9206      	str	r2, [sp, #24]
 8012d8e:	2201      	movs	r2, #1
 8012d90:	9205      	str	r2, [sp, #20]
 8012d92:	2200      	movs	r2, #0
 8012d94:	9204      	str	r2, [sp, #16]
 8012d96:	2200      	movs	r2, #0
 8012d98:	9203      	str	r2, [sp, #12]
 8012d9a:	9302      	str	r3, [sp, #8]
 8012d9c:	2305      	movs	r3, #5
 8012d9e:	9301      	str	r3, [sp, #4]
 8012da0:	4b2c      	ldr	r3, [pc, #176]	@ (8012e54 <RegionEU868RxConfig+0x194>)
 8012da2:	9300      	str	r3, [sp, #0]
 8012da4:	2300      	movs	r3, #0
 8012da6:	460a      	mov	r2, r1
 8012da8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012dac:	47a0      	blx	r4
 8012dae:	e024      	b.n	8012dfa <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8012db0:	2301      	movs	r3, #1
 8012db2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8012db4:	4b24      	ldr	r3, [pc, #144]	@ (8012e48 <RegionEU868RxConfig+0x188>)
 8012db6:	699c      	ldr	r4, [r3, #24]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	789b      	ldrb	r3, [r3, #2]
 8012dbc:	461d      	mov	r5, r3
 8012dbe:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	689b      	ldr	r3, [r3, #8]
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	7c92      	ldrb	r2, [r2, #18]
 8012dcc:	7df8      	ldrb	r0, [r7, #23]
 8012dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	9208      	str	r2, [sp, #32]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	9207      	str	r2, [sp, #28]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	9206      	str	r2, [sp, #24]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	9205      	str	r2, [sp, #20]
 8012de0:	2200      	movs	r2, #0
 8012de2:	9204      	str	r2, [sp, #16]
 8012de4:	2200      	movs	r2, #0
 8012de6:	9203      	str	r2, [sp, #12]
 8012de8:	9302      	str	r3, [sp, #8]
 8012dea:	2308      	movs	r3, #8
 8012dec:	9301      	str	r3, [sp, #4]
 8012dee:	2300      	movs	r3, #0
 8012df0:	9300      	str	r3, [sp, #0]
 8012df2:	2301      	movs	r3, #1
 8012df4:	460a      	mov	r2, r1
 8012df6:	4629      	mov	r1, r5
 8012df8:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	7c5b      	ldrb	r3, [r3, #17]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d005      	beq.n	8012e0e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8012e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e06:	4a14      	ldr	r2, [pc, #80]	@ (8012e58 <RegionEU868RxConfig+0x198>)
 8012e08:	5cd3      	ldrb	r3, [r2, r3]
 8012e0a:	75bb      	strb	r3, [r7, #22]
 8012e0c:	e004      	b.n	8012e18 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8012e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e12:	4a12      	ldr	r2, [pc, #72]	@ (8012e5c <RegionEU868RxConfig+0x19c>)
 8012e14:	5cd3      	ldrb	r3, [r2, r3]
 8012e16:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8012e18:	4b0b      	ldr	r3, [pc, #44]	@ (8012e48 <RegionEU868RxConfig+0x188>)
 8012e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e1c:	7dba      	ldrb	r2, [r7, #22]
 8012e1e:	320d      	adds	r2, #13
 8012e20:	b2d1      	uxtb	r1, r2
 8012e22:	7dfa      	ldrb	r2, [r7, #23]
 8012e24:	4610      	mov	r0, r2
 8012e26:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	7cdb      	ldrb	r3, [r3, #19]
 8012e2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012e30:	6939      	ldr	r1, [r7, #16]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7ff fab0 	bl	8012398 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	7bfa      	ldrb	r2, [r7, #15]
 8012e3c:	701a      	strb	r2, [r3, #0]
    return true;
 8012e3e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3718      	adds	r7, #24
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bdb0      	pop	{r4, r5, r7, pc}
 8012e48:	08020bac 	.word	0x08020bac
 8012e4c:	200011bc 	.word	0x200011bc
 8012e50:	0802076c 	.word	0x0802076c
 8012e54:	00014585 	.word	0x00014585
 8012e58:	0802079c 	.word	0x0802079c
 8012e5c:	08020794 	.word	0x08020794

08012e60 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012e60:	b590      	push	{r4, r7, lr}
 8012e62:	b093      	sub	sp, #76	@ 0x4c
 8012e64:	af0a      	add	r7, sp, #40	@ 0x28
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012e72:	461a      	mov	r2, r3
 8012e74:	4b5d      	ldr	r3, [pc, #372]	@ (8012fec <RegionEU868TxConfig+0x18c>)
 8012e76:	5c9b      	ldrb	r3, [r3, r2]
 8012e78:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8012e80:	4b5b      	ldr	r3, [pc, #364]	@ (8012ff0 <RegionEU868TxConfig+0x190>)
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	4b5b      	ldr	r3, [pc, #364]	@ (8012ff4 <RegionEU868TxConfig+0x194>)
 8012e86:	6819      	ldr	r1, [r3, #0]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	461c      	mov	r4, r3
 8012e8e:	4623      	mov	r3, r4
 8012e90:	005b      	lsls	r3, r3, #1
 8012e92:	4423      	add	r3, r4
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	440b      	add	r3, r1
 8012e98:	3309      	adds	r3, #9
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	005b      	lsls	r3, r3, #1
 8012ea2:	440b      	add	r3, r1
 8012ea4:	00db      	lsls	r3, r3, #3
 8012ea6:	4413      	add	r3, r2
 8012ea8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8012eac:	4619      	mov	r1, r3
 8012eae:	f7ff fa40 	bl	8012332 <RegionCommonLimitTxPower>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012ebc:	494e      	ldr	r1, [pc, #312]	@ (8012ff8 <RegionEU868TxConfig+0x198>)
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7ff fa4c 	bl	801235c <RegionCommonGetBandwidth>
 8012ec4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	6859      	ldr	r1, [r3, #4]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	689a      	ldr	r2, [r3, #8]
 8012ed2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7ff f89c 	bl	8012014 <RegionCommonComputeTxPower>
 8012edc:	4603      	mov	r3, r0
 8012ede:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8012ee0:	4b46      	ldr	r3, [pc, #280]	@ (8012ffc <RegionEU868TxConfig+0x19c>)
 8012ee2:	68da      	ldr	r2, [r3, #12]
 8012ee4:	4b43      	ldr	r3, [pc, #268]	@ (8012ff4 <RegionEU868TxConfig+0x194>)
 8012ee6:	6819      	ldr	r1, [r3, #0]
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	4618      	mov	r0, r3
 8012eee:	4603      	mov	r3, r0
 8012ef0:	005b      	lsls	r3, r3, #1
 8012ef2:	4403      	add	r3, r0
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	440b      	add	r3, r1
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4618      	mov	r0, r3
 8012efc:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012f04:	2b07      	cmp	r3, #7
 8012f06:	d124      	bne.n	8012f52 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8012f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8012ffc <RegionEU868TxConfig+0x19c>)
 8012f0e:	69dc      	ldr	r4, [r3, #28]
 8012f10:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012f14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012f18:	fb02 f303 	mul.w	r3, r2, r3
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8012f22:	7ff8      	ldrb	r0, [r7, #31]
 8012f24:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8012f28:	9308      	str	r3, [sp, #32]
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	9307      	str	r3, [sp, #28]
 8012f2e:	2300      	movs	r3, #0
 8012f30:	9306      	str	r3, [sp, #24]
 8012f32:	2300      	movs	r3, #0
 8012f34:	9305      	str	r3, [sp, #20]
 8012f36:	2301      	movs	r3, #1
 8012f38:	9304      	str	r3, [sp, #16]
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	9303      	str	r3, [sp, #12]
 8012f3e:	2305      	movs	r3, #5
 8012f40:	9302      	str	r3, [sp, #8]
 8012f42:	2300      	movs	r3, #0
 8012f44:	9301      	str	r3, [sp, #4]
 8012f46:	9200      	str	r2, [sp, #0]
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8012f4e:	47a0      	blx	r4
 8012f50:	e01d      	b.n	8012f8e <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8012f52:	2301      	movs	r3, #1
 8012f54:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8012f56:	4b29      	ldr	r3, [pc, #164]	@ (8012ffc <RegionEU868TxConfig+0x19c>)
 8012f58:	69dc      	ldr	r4, [r3, #28]
 8012f5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012f5e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8012f62:	7ff8      	ldrb	r0, [r7, #31]
 8012f64:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8012f68:	9208      	str	r2, [sp, #32]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	9207      	str	r2, [sp, #28]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	9206      	str	r2, [sp, #24]
 8012f72:	2200      	movs	r2, #0
 8012f74:	9205      	str	r2, [sp, #20]
 8012f76:	2201      	movs	r2, #1
 8012f78:	9204      	str	r2, [sp, #16]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	9203      	str	r2, [sp, #12]
 8012f7e:	2208      	movs	r2, #8
 8012f80:	9202      	str	r2, [sp, #8]
 8012f82:	2201      	movs	r2, #1
 8012f84:	9201      	str	r2, [sp, #4]
 8012f86:	9300      	str	r3, [sp, #0]
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8012f8e:	4b19      	ldr	r3, [pc, #100]	@ (8012ff4 <RegionEU868TxConfig+0x194>)
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	4619      	mov	r1, r3
 8012f98:	460b      	mov	r3, r1
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	440b      	add	r3, r1
 8012f9e:	009b      	lsls	r3, r3, #2
 8012fa0:	4413      	add	r3, r2
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012faa:	4619      	mov	r1, r3
 8012fac:	4610      	mov	r0, r2
 8012fae:	f7ff fa25 	bl	80123fc <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	899b      	ldrh	r3, [r3, #12]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	4610      	mov	r0, r2
 8012fc0:	f7ff faaa 	bl	8012518 <GetTimeOnAir>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8012fca:	4b0c      	ldr	r3, [pc, #48]	@ (8012ffc <RegionEU868TxConfig+0x19c>)
 8012fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	8992      	ldrh	r2, [r2, #12]
 8012fd2:	b2d1      	uxtb	r1, r2
 8012fd4:	7ffa      	ldrb	r2, [r7, #31]
 8012fd6:	4610      	mov	r0, r2
 8012fd8:	4798      	blx	r3

    *txPower = txPowerLimited;
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	7f7a      	ldrb	r2, [r7, #29]
 8012fde:	701a      	strb	r2, [r3, #0]
    return true;
 8012fe0:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3724      	adds	r7, #36	@ 0x24
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd90      	pop	{r4, r7, pc}
 8012fea:	bf00      	nop
 8012fec:	0802076c 	.word	0x0802076c
 8012ff0:	200011c0 	.word	0x200011c0
 8012ff4:	200011bc 	.word	0x200011bc
 8012ff8:	08020774 	.word	0x08020774
 8012ffc:	08020bac 	.word	0x08020bac

08013000 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013000:	b590      	push	{r4, r7, lr}
 8013002:	b093      	sub	sp, #76	@ 0x4c
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801300e:	2307      	movs	r3, #7
 8013010:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8013014:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013018:	2200      	movs	r2, #0
 801301a:	601a      	str	r2, [r3, #0]
 801301c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801301e:	2300      	movs	r3, #0
 8013020:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8013024:	2300      	movs	r3, #0
 8013026:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801302a:	2300      	movs	r3, #0
 801302c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801302e:	e085      	b.n	801313c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013038:	4413      	add	r3, r2
 801303a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801303e:	4611      	mov	r1, r2
 8013040:	4618      	mov	r0, r3
 8013042:	f7fe fe2f 	bl	8011ca4 <RegionCommonParseLinkAdrReq>
 8013046:	4603      	mov	r3, r0
 8013048:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801304c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013050:	2b00      	cmp	r3, #0
 8013052:	d07b      	beq.n	801314c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8013054:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013058:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801305c:	4413      	add	r3, r2
 801305e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8013062:	2307      	movs	r3, #7
 8013064:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8013068:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801306c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801306e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013072:	2b00      	cmp	r3, #0
 8013074:	d109      	bne.n	801308a <RegionEU868LinkAdrReq+0x8a>
 8013076:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013078:	2b00      	cmp	r3, #0
 801307a:	d106      	bne.n	801308a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801307c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013080:	f023 0301 	bic.w	r3, r3, #1
 8013084:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013088:	e058      	b.n	801313c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801308a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <RegionEU868LinkAdrReq+0x9a>
 8013092:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013096:	2b05      	cmp	r3, #5
 8013098:	d903      	bls.n	80130a2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801309a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801309e:	2b06      	cmp	r3, #6
 80130a0:	d906      	bls.n	80130b0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80130a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80130a6:	f023 0301 	bic.w	r3, r3, #1
 80130aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80130ae:	e045      	b.n	801313c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80130b0:	2300      	movs	r3, #0
 80130b2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80130b6:	e03d      	b.n	8013134 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80130b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80130bc:	2b06      	cmp	r3, #6
 80130be:	d118      	bne.n	80130f2 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80130c0:	4b5f      	ldr	r3, [pc, #380]	@ (8013240 <RegionEU868LinkAdrReq+0x240>)
 80130c2:	6819      	ldr	r1, [r3, #0]
 80130c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80130c8:	4613      	mov	r3, r2
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	4413      	add	r3, r2
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	440b      	add	r3, r1
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d028      	beq.n	801312a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80130d8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80130dc:	2201      	movs	r2, #1
 80130de:	fa02 f303 	lsl.w	r3, r2, r3
 80130e2:	b21a      	sxth	r2, r3
 80130e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80130e6:	b21b      	sxth	r3, r3
 80130e8:	4313      	orrs	r3, r2
 80130ea:	b21b      	sxth	r3, r3
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80130f0:	e01b      	b.n	801312a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80130f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80130f4:	461a      	mov	r2, r3
 80130f6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80130fa:	fa42 f303 	asr.w	r3, r2, r3
 80130fe:	f003 0301 	and.w	r3, r3, #1
 8013102:	2b00      	cmp	r3, #0
 8013104:	d011      	beq.n	801312a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8013106:	4b4e      	ldr	r3, [pc, #312]	@ (8013240 <RegionEU868LinkAdrReq+0x240>)
 8013108:	6819      	ldr	r1, [r3, #0]
 801310a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801310e:	4613      	mov	r3, r2
 8013110:	005b      	lsls	r3, r3, #1
 8013112:	4413      	add	r3, r2
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	440b      	add	r3, r1
 8013118:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801311a:	2b00      	cmp	r3, #0
 801311c:	d105      	bne.n	801312a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801311e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013122:	f023 0301 	bic.w	r3, r3, #1
 8013126:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801312a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801312e:	3301      	adds	r3, #1
 8013130:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8013134:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013138:	2b0f      	cmp	r3, #15
 801313a:	d9bd      	bls.n	80130b8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	7a1b      	ldrb	r3, [r3, #8]
 8013140:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013144:	429a      	cmp	r2, r3
 8013146:	f4ff af73 	bcc.w	8013030 <RegionEU868LinkAdrReq+0x30>
 801314a:	e000      	b.n	801314e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801314c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801314e:	2302      	movs	r3, #2
 8013150:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	7a5b      	ldrb	r3, [r3, #9]
 8013158:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801315c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff fa29 	bl	80125b8 <RegionEU868GetPhyParam>
 8013166:	4603      	mov	r3, r0
 8013168:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801316a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801316e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	7a9b      	ldrb	r3, [r3, #10]
 8013174:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013176:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801317a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801317c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8013180:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013182:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8013186:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801318e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013196:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	7b5b      	ldrb	r3, [r3, #13]
 801319c:	b25b      	sxtb	r3, r3
 801319e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80131a0:	2310      	movs	r3, #16
 80131a2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80131a4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80131a8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80131aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ac:	b25b      	sxtb	r3, r3
 80131ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80131b2:	2307      	movs	r3, #7
 80131b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80131b8:	4b21      	ldr	r3, [pc, #132]	@ (8013240 <RegionEU868LinkAdrReq+0x240>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80131be:	2307      	movs	r3, #7
 80131c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80131c4:	2300      	movs	r3, #0
 80131c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80131d0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80131d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80131d8:	1c9a      	adds	r2, r3, #2
 80131da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80131de:	1c59      	adds	r1, r3, #1
 80131e0:	f107 0010 	add.w	r0, r7, #16
 80131e4:	4623      	mov	r3, r4
 80131e6:	f7fe fdaf 	bl	8011d48 <RegionCommonLinkAdrReqVerifyParams>
 80131ea:	4603      	mov	r3, r0
 80131ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80131f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80131f4:	2b07      	cmp	r3, #7
 80131f6:	d10d      	bne.n	8013214 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80131f8:	4b11      	ldr	r3, [pc, #68]	@ (8013240 <RegionEU868LinkAdrReq+0x240>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013200:	220c      	movs	r2, #12
 8013202:	2100      	movs	r1, #0
 8013204:	4618      	mov	r0, r3
 8013206:	f003 f9cf 	bl	80165a8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801320a:	4b0d      	ldr	r3, [pc, #52]	@ (8013240 <RegionEU868LinkAdrReq+0x240>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013210:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8013214:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801321c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8013224:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801322c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801322e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013232:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8013234:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013238:	4618      	mov	r0, r3
 801323a:	374c      	adds	r7, #76	@ 0x4c
 801323c:	46bd      	mov	sp, r7
 801323e:	bd90      	pop	{r4, r7, pc}
 8013240:	200011bc 	.word	0x200011bc

08013244 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801324c:	2307      	movs	r3, #7
 801324e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8013250:	2300      	movs	r3, #0
 8013252:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	f107 020e 	add.w	r2, r7, #14
 801325c:	4611      	mov	r1, r2
 801325e:	4618      	mov	r0, r3
 8013260:	f7ff f8e4 	bl	801242c <VerifyRfFreq>
 8013264:	4603      	mov	r3, r0
 8013266:	f083 0301 	eor.w	r3, r3, #1
 801326a:	b2db      	uxtb	r3, r3
 801326c:	2b00      	cmp	r3, #0
 801326e:	d003      	beq.n	8013278 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8013270:	7bfb      	ldrb	r3, [r7, #15]
 8013272:	f023 0301 	bic.w	r3, r3, #1
 8013276:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f993 3000 	ldrsb.w	r3, [r3]
 801327e:	2207      	movs	r2, #7
 8013280:	2100      	movs	r1, #0
 8013282:	4618      	mov	r0, r3
 8013284:	f7fe fb4d 	bl	8011922 <RegionCommonValueInRange>
 8013288:	4603      	mov	r3, r0
 801328a:	2b00      	cmp	r3, #0
 801328c:	d103      	bne.n	8013296 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	f023 0302 	bic.w	r3, r3, #2
 8013294:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801329c:	2205      	movs	r2, #5
 801329e:	2100      	movs	r1, #0
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fe fb3e 	bl	8011922 <RegionCommonValueInRange>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d103      	bne.n	80132b4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80132ac:	7bfb      	ldrb	r3, [r7, #15]
 80132ae:	f023 0304 	bic.w	r3, r3, #4
 80132b2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80132b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3710      	adds	r7, #16
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
	...

080132c0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b086      	sub	sp, #24
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80132c8:	2303      	movs	r3, #3
 80132ca:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d114      	bne.n	8013300 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80132e0:	f107 0308 	add.w	r3, r7, #8
 80132e4:	4618      	mov	r0, r3
 80132e6:	f000 f9ff 	bl	80136e8 <RegionEU868ChannelsRemove>
 80132ea:	4603      	mov	r3, r0
 80132ec:	f083 0301 	eor.w	r3, r3, #1
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d03b      	beq.n	801336e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80132f6:	7dfb      	ldrb	r3, [r7, #23]
 80132f8:	f023 0303 	bic.w	r3, r3, #3
 80132fc:	75fb      	strb	r3, [r7, #23]
 80132fe:	e036      	b.n	801336e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801330c:	b2db      	uxtb	r3, r3
 801330e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8013310:	f107 030c 	add.w	r3, r7, #12
 8013314:	4618      	mov	r0, r3
 8013316:	f000 f945 	bl	80135a4 <RegionEU868ChannelAdd>
 801331a:	4603      	mov	r3, r0
 801331c:	2b06      	cmp	r3, #6
 801331e:	d820      	bhi.n	8013362 <RegionEU868NewChannelReq+0xa2>
 8013320:	a201      	add	r2, pc, #4	@ (adr r2, 8013328 <RegionEU868NewChannelReq+0x68>)
 8013322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013326:	bf00      	nop
 8013328:	0801336d 	.word	0x0801336d
 801332c:	08013363 	.word	0x08013363
 8013330:	08013363 	.word	0x08013363
 8013334:	08013363 	.word	0x08013363
 8013338:	08013345 	.word	0x08013345
 801333c:	0801334f 	.word	0x0801334f
 8013340:	08013359 	.word	0x08013359
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8013344:	7dfb      	ldrb	r3, [r7, #23]
 8013346:	f023 0301 	bic.w	r3, r3, #1
 801334a:	75fb      	strb	r3, [r7, #23]
                break;
 801334c:	e00f      	b.n	801336e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801334e:	7dfb      	ldrb	r3, [r7, #23]
 8013350:	f023 0302 	bic.w	r3, r3, #2
 8013354:	75fb      	strb	r3, [r7, #23]
                break;
 8013356:	e00a      	b.n	801336e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8013358:	7dfb      	ldrb	r3, [r7, #23]
 801335a:	f023 0303 	bic.w	r3, r3, #3
 801335e:	75fb      	strb	r3, [r7, #23]
                break;
 8013360:	e005      	b.n	801336e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8013362:	7dfb      	ldrb	r3, [r7, #23]
 8013364:	f023 0303 	bic.w	r3, r3, #3
 8013368:	75fb      	strb	r3, [r7, #23]
                break;
 801336a:	e000      	b.n	801336e <RegionEU868NewChannelReq+0xae>
                break;
 801336c:	bf00      	nop
            }
        }
    }

    return status;
 801336e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3718      	adds	r7, #24
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop

0801337c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8013384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013388:	4618      	mov	r0, r3
 801338a:	370c      	adds	r7, #12
 801338c:	46bd      	mov	sp, r7
 801338e:	bc80      	pop	{r7}
 8013390:	4770      	bx	lr
	...

08013394 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801339c:	2303      	movs	r3, #3
 801339e:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80133a0:	2300      	movs	r3, #0
 80133a2:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	2b0f      	cmp	r3, #15
 80133aa:	d901      	bls.n	80133b0 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80133ac:	2300      	movs	r3, #0
 80133ae:	e035      	b.n	801341c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	f107 020e 	add.w	r2, r7, #14
 80133b8:	4611      	mov	r1, r2
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7ff f836 	bl	801242c <VerifyRfFreq>
 80133c0:	4603      	mov	r3, r0
 80133c2:	f083 0301 	eor.w	r3, r3, #1
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d003      	beq.n	80133d4 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80133cc:	7bfb      	ldrb	r3, [r7, #15]
 80133ce:	f023 0301 	bic.w	r3, r3, #1
 80133d2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80133d4:	4b13      	ldr	r3, [pc, #76]	@ (8013424 <RegionEU868DlChannelReq+0x90>)
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	4619      	mov	r1, r3
 80133de:	460b      	mov	r3, r1
 80133e0:	005b      	lsls	r3, r3, #1
 80133e2:	440b      	add	r3, r1
 80133e4:	009b      	lsls	r3, r3, #2
 80133e6:	4413      	add	r3, r2
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d103      	bne.n	80133f6 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80133ee:	7bfb      	ldrb	r3, [r7, #15]
 80133f0:	f023 0302 	bic.w	r3, r3, #2
 80133f4:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80133f6:	7bfb      	ldrb	r3, [r7, #15]
 80133f8:	2b03      	cmp	r3, #3
 80133fa:	d10d      	bne.n	8013418 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80133fc:	4b09      	ldr	r3, [pc, #36]	@ (8013424 <RegionEU868DlChannelReq+0x90>)
 80133fe:	6819      	ldr	r1, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	4618      	mov	r0, r3
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	685a      	ldr	r2, [r3, #4]
 801340a:	4603      	mov	r3, r0
 801340c:	005b      	lsls	r3, r3, #1
 801340e:	4403      	add	r3, r0
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	440b      	add	r3, r1
 8013414:	3304      	adds	r3, #4
 8013416:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8013418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3710      	adds	r7, #16
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	200011bc 	.word	0x200011bc

08013428 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8013428:	b480      	push	{r7}
 801342a:	b083      	sub	sp, #12
 801342c:	af00      	add	r7, sp, #0
 801342e:	4603      	mov	r3, r0
 8013430:	460a      	mov	r2, r1
 8013432:	71fb      	strb	r3, [r7, #7]
 8013434:	4613      	mov	r3, r2
 8013436:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8013438:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801343c:	4618      	mov	r0, r3
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	bc80      	pop	{r7}
 8013444:	4770      	bx	lr
	...

08013448 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b09a      	sub	sp, #104	@ 0x68
 801344c:	af02      	add	r7, sp, #8
 801344e:	60f8      	str	r0, [r7, #12]
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	607a      	str	r2, [r7, #4]
 8013454:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 801345c:	2300      	movs	r3, #0
 801345e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8013462:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013466:	2200      	movs	r2, #0
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	605a      	str	r2, [r3, #4]
 801346c:	609a      	str	r2, [r3, #8]
 801346e:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013470:	230c      	movs	r3, #12
 8013472:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8013476:	2307      	movs	r3, #7
 8013478:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801347a:	4b48      	ldr	r3, [pc, #288]	@ (801359c <RegionEU868NextChannel+0x154>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013482:	2201      	movs	r2, #1
 8013484:	2100      	movs	r1, #0
 8013486:	4618      	mov	r0, r3
 8013488:	f7fe fa9c 	bl	80119c4 <RegionCommonCountChannels>
 801348c:	4603      	mov	r3, r0
 801348e:	2b00      	cmp	r3, #0
 8013490:	d10a      	bne.n	80134a8 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013492:	4b42      	ldr	r3, [pc, #264]	@ (801359c <RegionEU868NextChannel+0x154>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801349a:	4b40      	ldr	r3, [pc, #256]	@ (801359c <RegionEU868NextChannel+0x154>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f042 0207 	orr.w	r2, r2, #7
 80134a2:	b292      	uxth	r2, r2
 80134a4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	7a5b      	ldrb	r3, [r3, #9]
 80134ac:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80134b4:	b2db      	uxtb	r3, r3
 80134b6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80134b8:	4b38      	ldr	r3, [pc, #224]	@ (801359c <RegionEU868NextChannel+0x154>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80134c0:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80134c2:	4b36      	ldr	r3, [pc, #216]	@ (801359c <RegionEU868NextChannel+0x154>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80134c8:	4b35      	ldr	r3, [pc, #212]	@ (80135a0 <RegionEU868NextChannel+0x158>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80134ce:	2310      	movs	r3, #16
 80134d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80134d2:	f107 0312 	add.w	r3, r7, #18
 80134d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	7a9b      	ldrb	r3, [r3, #10]
 80134e8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80134ec:	2306      	movs	r3, #6
 80134ee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80134f2:	68fa      	ldr	r2, [r7, #12]
 80134f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80134f8:	320c      	adds	r2, #12
 80134fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134fe:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	7d1b      	ldrb	r3, [r3, #20]
 8013506:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	8adb      	ldrh	r3, [r3, #22]
 8013514:	4619      	mov	r1, r3
 8013516:	4610      	mov	r0, r2
 8013518:	f7fe fffe 	bl	8012518 <GetTimeOnAir>
 801351c:	4603      	mov	r3, r0
 801351e:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8013520:	f107 0314 	add.w	r3, r7, #20
 8013524:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8013526:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801352a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801352e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	9301      	str	r3, [sp, #4]
 8013536:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801353a:	9300      	str	r3, [sp, #0]
 801353c:	460b      	mov	r3, r1
 801353e:	6839      	ldr	r1, [r7, #0]
 8013540:	f7fe fe57 	bl	80121f2 <RegionCommonIdentifyChannels>
 8013544:	4603      	mov	r3, r0
 8013546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801354a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801354e:	2b00      	cmp	r3, #0
 8013550:	d10e      	bne.n	8013570 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013552:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8013556:	3b01      	subs	r3, #1
 8013558:	4619      	mov	r1, r3
 801355a:	2000      	movs	r0, #0
 801355c:	f002 ffd2 	bl	8016504 <randr>
 8013560:	4603      	mov	r3, r0
 8013562:	3360      	adds	r3, #96	@ 0x60
 8013564:	443b      	add	r3, r7
 8013566:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	701a      	strb	r2, [r3, #0]
 801356e:	e00e      	b.n	801358e <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8013570:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013574:	2b0c      	cmp	r3, #12
 8013576:	d10a      	bne.n	801358e <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013578:	4b08      	ldr	r3, [pc, #32]	@ (801359c <RegionEU868NextChannel+0x154>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8013580:	4b06      	ldr	r3, [pc, #24]	@ (801359c <RegionEU868NextChannel+0x154>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f042 0207 	orr.w	r2, r2, #7
 8013588:	b292      	uxth	r2, r2
 801358a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801358e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8013592:	4618      	mov	r0, r3
 8013594:	3760      	adds	r7, #96	@ 0x60
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	200011bc 	.word	0x200011bc
 80135a0:	200011c0 	.word	0x200011c0

080135a4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b084      	sub	sp, #16
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80135ac:	2300      	movs	r3, #0
 80135ae:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80135b0:	2300      	movs	r3, #0
 80135b2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80135b4:	2300      	movs	r3, #0
 80135b6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	791b      	ldrb	r3, [r3, #4]
 80135bc:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80135be:	7b7b      	ldrb	r3, [r7, #13]
 80135c0:	2b02      	cmp	r3, #2
 80135c2:	d801      	bhi.n	80135c8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80135c4:	2306      	movs	r3, #6
 80135c6:	e089      	b.n	80136dc <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80135c8:	7b7b      	ldrb	r3, [r7, #13]
 80135ca:	2b0f      	cmp	r3, #15
 80135cc:	d901      	bls.n	80135d2 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80135ce:	2303      	movs	r3, #3
 80135d0:	e084      	b.n	80136dc <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	7a1b      	ldrb	r3, [r3, #8]
 80135d8:	f343 0303 	sbfx	r3, r3, #0, #4
 80135dc:	b25b      	sxtb	r3, r3
 80135de:	2207      	movs	r2, #7
 80135e0:	2100      	movs	r1, #0
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fe f99d 	bl	8011922 <RegionCommonValueInRange>
 80135e8:	4603      	mov	r3, r0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d101      	bne.n	80135f2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80135ee:	2301      	movs	r3, #1
 80135f0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	7a1b      	ldrb	r3, [r3, #8]
 80135f8:	f343 1303 	sbfx	r3, r3, #4, #4
 80135fc:	b25b      	sxtb	r3, r3
 80135fe:	2207      	movs	r2, #7
 8013600:	2100      	movs	r1, #0
 8013602:	4618      	mov	r0, r3
 8013604:	f7fe f98d 	bl	8011922 <RegionCommonValueInRange>
 8013608:	4603      	mov	r3, r0
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801360e:	2301      	movs	r3, #1
 8013610:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	7a1b      	ldrb	r3, [r3, #8]
 8013618:	f343 0303 	sbfx	r3, r3, #0, #4
 801361c:	b25a      	sxtb	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	7a1b      	ldrb	r3, [r3, #8]
 8013624:	f343 1303 	sbfx	r3, r3, #4, #4
 8013628:	b25b      	sxtb	r3, r3
 801362a:	429a      	cmp	r2, r3
 801362c:	dd01      	ble.n	8013632 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801362e:	2301      	movs	r3, #1
 8013630:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8013632:	7bbb      	ldrb	r3, [r7, #14]
 8013634:	f083 0301 	eor.w	r3, r3, #1
 8013638:	b2db      	uxtb	r3, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	d010      	beq.n	8013660 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	f107 020c 	add.w	r2, r7, #12
 8013648:	4611      	mov	r1, r2
 801364a:	4618      	mov	r0, r3
 801364c:	f7fe feee 	bl	801242c <VerifyRfFreq>
 8013650:	4603      	mov	r3, r0
 8013652:	f083 0301 	eor.w	r3, r3, #1
 8013656:	b2db      	uxtb	r3, r3
 8013658:	2b00      	cmp	r3, #0
 801365a:	d001      	beq.n	8013660 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801365c:	2301      	movs	r3, #1
 801365e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8013660:	7bfb      	ldrb	r3, [r7, #15]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d004      	beq.n	8013670 <RegionEU868ChannelAdd+0xcc>
 8013666:	7bbb      	ldrb	r3, [r7, #14]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d001      	beq.n	8013670 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801366c:	2306      	movs	r3, #6
 801366e:	e035      	b.n	80136dc <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8013670:	7bfb      	ldrb	r3, [r7, #15]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d001      	beq.n	801367a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8013676:	2305      	movs	r3, #5
 8013678:	e030      	b.n	80136dc <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801367a:	7bbb      	ldrb	r3, [r7, #14]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8013680:	2304      	movs	r3, #4
 8013682:	e02b      	b.n	80136dc <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8013684:	4b17      	ldr	r3, [pc, #92]	@ (80136e4 <RegionEU868ChannelAdd+0x140>)
 8013686:	6819      	ldr	r1, [r3, #0]
 8013688:	7b7a      	ldrb	r2, [r7, #13]
 801368a:	4613      	mov	r3, r2
 801368c:	005b      	lsls	r3, r3, #1
 801368e:	4413      	add	r3, r2
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	18c8      	adds	r0, r1, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	220c      	movs	r2, #12
 801369a:	4619      	mov	r1, r3
 801369c:	f002 ff49 	bl	8016532 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80136a0:	4b10      	ldr	r3, [pc, #64]	@ (80136e4 <RegionEU868ChannelAdd+0x140>)
 80136a2:	6819      	ldr	r1, [r3, #0]
 80136a4:	7b7a      	ldrb	r2, [r7, #13]
 80136a6:	7b38      	ldrb	r0, [r7, #12]
 80136a8:	4613      	mov	r3, r2
 80136aa:	005b      	lsls	r3, r3, #1
 80136ac:	4413      	add	r3, r2
 80136ae:	009b      	lsls	r3, r3, #2
 80136b0:	440b      	add	r3, r1
 80136b2:	3309      	adds	r3, #9
 80136b4:	4602      	mov	r2, r0
 80136b6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80136b8:	4b0a      	ldr	r3, [pc, #40]	@ (80136e4 <RegionEU868ChannelAdd+0x140>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80136c0:	b21a      	sxth	r2, r3
 80136c2:	7b7b      	ldrb	r3, [r7, #13]
 80136c4:	2101      	movs	r1, #1
 80136c6:	fa01 f303 	lsl.w	r3, r1, r3
 80136ca:	b21b      	sxth	r3, r3
 80136cc:	4313      	orrs	r3, r2
 80136ce:	b21a      	sxth	r2, r3
 80136d0:	4b04      	ldr	r3, [pc, #16]	@ (80136e4 <RegionEU868ChannelAdd+0x140>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	b292      	uxth	r2, r2
 80136d6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80136da:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	200011bc 	.word	0x200011bc

080136e8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b086      	sub	sp, #24
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80136f6:	7dfb      	ldrb	r3, [r7, #23]
 80136f8:	2b02      	cmp	r3, #2
 80136fa:	d801      	bhi.n	8013700 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80136fc:	2300      	movs	r3, #0
 80136fe:	e016      	b.n	801372e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8013700:	4b0d      	ldr	r3, [pc, #52]	@ (8013738 <RegionEU868ChannelsRemove+0x50>)
 8013702:	6819      	ldr	r1, [r3, #0]
 8013704:	7dfa      	ldrb	r2, [r7, #23]
 8013706:	4613      	mov	r3, r2
 8013708:	005b      	lsls	r3, r3, #1
 801370a:	4413      	add	r3, r2
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	440b      	add	r3, r1
 8013710:	461a      	mov	r2, r3
 8013712:	2300      	movs	r3, #0
 8013714:	6013      	str	r3, [r2, #0]
 8013716:	6053      	str	r3, [r2, #4]
 8013718:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801371a:	4b07      	ldr	r3, [pc, #28]	@ (8013738 <RegionEU868ChannelsRemove+0x50>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013722:	7df9      	ldrb	r1, [r7, #23]
 8013724:	2210      	movs	r2, #16
 8013726:	4618      	mov	r0, r3
 8013728:	f7fe f918 	bl	801195c <RegionCommonChanDisable>
 801372c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801372e:	4618      	mov	r0, r3
 8013730:	3718      	adds	r7, #24
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	200011bc 	.word	0x200011bc

0801373c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801373c:	b480      	push	{r7}
 801373e:	b085      	sub	sp, #20
 8013740:	af00      	add	r7, sp, #0
 8013742:	4603      	mov	r3, r0
 8013744:	71fb      	strb	r3, [r7, #7]
 8013746:	460b      	mov	r3, r1
 8013748:	71bb      	strb	r3, [r7, #6]
 801374a:	4613      	mov	r3, r2
 801374c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801374e:	79ba      	ldrb	r2, [r7, #6]
 8013750:	797b      	ldrb	r3, [r7, #5]
 8013752:	1ad3      	subs	r3, r2, r3
 8013754:	b2db      	uxtb	r3, r3
 8013756:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8013758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801375c:	2b00      	cmp	r3, #0
 801375e:	da01      	bge.n	8013764 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8013760:	2300      	movs	r3, #0
 8013762:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8013764:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8013766:	4618      	mov	r0, r3
 8013768:	3714      	adds	r7, #20
 801376a:	46bd      	mov	sp, r7
 801376c:	bc80      	pop	{r7}
 801376e:	4770      	bx	lr

08013770 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	603b      	str	r3, [r7, #0]
 8013778:	4603      	mov	r3, r0
 801377a:	71fb      	strb	r3, [r7, #7]
 801377c:	460b      	mov	r3, r1
 801377e:	71bb      	strb	r3, [r7, #6]
 8013780:	4613      	mov	r3, r2
 8013782:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8013784:	79fb      	ldrb	r3, [r7, #7]
 8013786:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8013788:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013790:	4611      	mov	r1, r2
 8013792:	4618      	mov	r0, r3
 8013794:	f7fe fdcd 	bl	8012332 <RegionCommonLimitTxPower>
 8013798:	4603      	mov	r3, r0
 801379a:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801379c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80137a0:	2b04      	cmp	r3, #4
 80137a2:	d106      	bne.n	80137b2 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80137a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137a8:	2b02      	cmp	r3, #2
 80137aa:	bfb8      	it	lt
 80137ac:	2302      	movlt	r3, #2
 80137ae:	73fb      	strb	r3, [r7, #15]
 80137b0:	e00d      	b.n	80137ce <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80137b2:	2204      	movs	r2, #4
 80137b4:	2100      	movs	r1, #0
 80137b6:	6838      	ldr	r0, [r7, #0]
 80137b8:	f7fe f904 	bl	80119c4 <RegionCommonCountChannels>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b31      	cmp	r3, #49	@ 0x31
 80137c0:	d805      	bhi.n	80137ce <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 80137c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137c6:	2b05      	cmp	r3, #5
 80137c8:	bfb8      	it	lt
 80137ca:	2305      	movlt	r3, #5
 80137cc:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 80137ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
	...

080137dc <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80137e4:	4b18      	ldr	r3, [pc, #96]	@ (8013848 <VerifyRfFreq+0x6c>)
 80137e6:	6a1b      	ldr	r3, [r3, #32]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	4798      	blx	r3
 80137ec:	4603      	mov	r3, r0
 80137ee:	f083 0301 	eor.w	r3, r3, #1
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d001      	beq.n	80137fc <VerifyRfFreq+0x20>
    {
        return false;
 80137f8:	2300      	movs	r3, #0
 80137fa:	e021      	b.n	8013840 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	4a13      	ldr	r2, [pc, #76]	@ (801384c <VerifyRfFreq+0x70>)
 8013800:	4293      	cmp	r3, r2
 8013802:	d910      	bls.n	8013826 <VerifyRfFreq+0x4a>
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	4a12      	ldr	r2, [pc, #72]	@ (8013850 <VerifyRfFreq+0x74>)
 8013808:	4293      	cmp	r3, r2
 801380a:	d80c      	bhi.n	8013826 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801380c:	687a      	ldr	r2, [r7, #4]
 801380e:	4b11      	ldr	r3, [pc, #68]	@ (8013854 <VerifyRfFreq+0x78>)
 8013810:	4413      	add	r3, r2
 8013812:	4a11      	ldr	r2, [pc, #68]	@ (8013858 <VerifyRfFreq+0x7c>)
 8013814:	fba2 1203 	umull	r1, r2, r2, r3
 8013818:	0c92      	lsrs	r2, r2, #18
 801381a:	4910      	ldr	r1, [pc, #64]	@ (801385c <VerifyRfFreq+0x80>)
 801381c:	fb01 f202 	mul.w	r2, r1, r2
 8013820:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8013822:	2a00      	cmp	r2, #0
 8013824:	d001      	beq.n	801382a <VerifyRfFreq+0x4e>
    {
        return false;
 8013826:	2300      	movs	r3, #0
 8013828:	e00a      	b.n	8013840 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	4a0c      	ldr	r2, [pc, #48]	@ (8013860 <VerifyRfFreq+0x84>)
 801382e:	4293      	cmp	r3, r2
 8013830:	d903      	bls.n	801383a <VerifyRfFreq+0x5e>
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4a06      	ldr	r2, [pc, #24]	@ (8013850 <VerifyRfFreq+0x74>)
 8013836:	4293      	cmp	r3, r2
 8013838:	d901      	bls.n	801383e <VerifyRfFreq+0x62>
    {
        return false;
 801383a:	2300      	movs	r3, #0
 801383c:	e000      	b.n	8013840 <VerifyRfFreq+0x64>
    }
    return true;
 801383e:	2301      	movs	r3, #1
}
 8013840:	4618      	mov	r0, r3
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	08020bac 	.word	0x08020bac
 801384c:	3708709f 	.word	0x3708709f
 8013850:	374886e0 	.word	0x374886e0
 8013854:	c8f78f60 	.word	0xc8f78f60
 8013858:	6fd91d85 	.word	0x6fd91d85
 801385c:	000927c0 	.word	0x000927c0
 8013860:	35c8015f 	.word	0x35c8015f

08013864 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8013864:	b590      	push	{r4, r7, lr}
 8013866:	b089      	sub	sp, #36	@ 0x24
 8013868:	af04      	add	r7, sp, #16
 801386a:	4603      	mov	r3, r0
 801386c:	460a      	mov	r2, r1
 801386e:	71fb      	strb	r3, [r7, #7]
 8013870:	4613      	mov	r3, r2
 8013872:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8013874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013878:	4a0f      	ldr	r2, [pc, #60]	@ (80138b8 <GetTimeOnAir+0x54>)
 801387a:	5cd3      	ldrb	r3, [r2, r3]
 801387c:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013882:	490e      	ldr	r1, [pc, #56]	@ (80138bc <GetTimeOnAir+0x58>)
 8013884:	4618      	mov	r0, r3
 8013886:	f7fe fd69 	bl	801235c <RegionCommonGetBandwidth>
 801388a:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801388c:	4b0c      	ldr	r3, [pc, #48]	@ (80138c0 <GetTimeOnAir+0x5c>)
 801388e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013890:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013894:	88bb      	ldrh	r3, [r7, #4]
 8013896:	b2db      	uxtb	r3, r3
 8013898:	2101      	movs	r1, #1
 801389a:	9103      	str	r1, [sp, #12]
 801389c:	9302      	str	r3, [sp, #8]
 801389e:	2300      	movs	r3, #0
 80138a0:	9301      	str	r3, [sp, #4]
 80138a2:	2308      	movs	r3, #8
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	2301      	movs	r3, #1
 80138a8:	68b9      	ldr	r1, [r7, #8]
 80138aa:	2001      	movs	r0, #1
 80138ac:	47a0      	blx	r4
 80138ae:	4603      	mov	r3, r0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3714      	adds	r7, #20
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd90      	pop	{r4, r7, pc}
 80138b8:	080207a4 	.word	0x080207a4
 80138bc:	080207b4 	.word	0x080207b4
 80138c0:	08020bac 	.word	0x08020bac

080138c4 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b088      	sub	sp, #32
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80138cc:	2300      	movs	r3, #0
 80138ce:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	3b01      	subs	r3, #1
 80138d6:	2b37      	cmp	r3, #55	@ 0x37
 80138d8:	f200 8136 	bhi.w	8013b48 <RegionUS915GetPhyParam+0x284>
 80138dc:	a201      	add	r2, pc, #4	@ (adr r2, 80138e4 <RegionUS915GetPhyParam+0x20>)
 80138de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138e2:	bf00      	nop
 80138e4:	080139c5 	.word	0x080139c5
 80138e8:	080139cb 	.word	0x080139cb
 80138ec:	08013b49 	.word	0x08013b49
 80138f0:	08013b49 	.word	0x08013b49
 80138f4:	08013b49 	.word	0x08013b49
 80138f8:	080139d1 	.word	0x080139d1
 80138fc:	08013b49 	.word	0x08013b49
 8013900:	08013a0b 	.word	0x08013a0b
 8013904:	08013b49 	.word	0x08013b49
 8013908:	08013a11 	.word	0x08013a11
 801390c:	08013a17 	.word	0x08013a17
 8013910:	08013a1d 	.word	0x08013a1d
 8013914:	08013a23 	.word	0x08013a23
 8013918:	08013a33 	.word	0x08013a33
 801391c:	08013a43 	.word	0x08013a43
 8013920:	08013a49 	.word	0x08013a49
 8013924:	08013a51 	.word	0x08013a51
 8013928:	08013a59 	.word	0x08013a59
 801392c:	08013a61 	.word	0x08013a61
 8013930:	08013a69 	.word	0x08013a69
 8013934:	08013a71 	.word	0x08013a71
 8013938:	08013a85 	.word	0x08013a85
 801393c:	08013a8b 	.word	0x08013a8b
 8013940:	08013a91 	.word	0x08013a91
 8013944:	08013a97 	.word	0x08013a97
 8013948:	08013aa3 	.word	0x08013aa3
 801394c:	08013aaf 	.word	0x08013aaf
 8013950:	08013ab5 	.word	0x08013ab5
 8013954:	08013abd 	.word	0x08013abd
 8013958:	08013ac3 	.word	0x08013ac3
 801395c:	08013ac9 	.word	0x08013ac9
 8013960:	08013acf 	.word	0x08013acf
 8013964:	080139d7 	.word	0x080139d7
 8013968:	08013b49 	.word	0x08013b49
 801396c:	08013b49 	.word	0x08013b49
 8013970:	08013b49 	.word	0x08013b49
 8013974:	08013b49 	.word	0x08013b49
 8013978:	08013b49 	.word	0x08013b49
 801397c:	08013b49 	.word	0x08013b49
 8013980:	08013b49 	.word	0x08013b49
 8013984:	08013b49 	.word	0x08013b49
 8013988:	08013b49 	.word	0x08013b49
 801398c:	08013b49 	.word	0x08013b49
 8013990:	08013b49 	.word	0x08013b49
 8013994:	08013b49 	.word	0x08013b49
 8013998:	08013b49 	.word	0x08013b49
 801399c:	08013ad7 	.word	0x08013ad7
 80139a0:	08013aeb 	.word	0x08013aeb
 80139a4:	08013af9 	.word	0x08013af9
 80139a8:	08013aff 	.word	0x08013aff
 80139ac:	08013b49 	.word	0x08013b49
 80139b0:	08013b05 	.word	0x08013b05
 80139b4:	08013b19 	.word	0x08013b19
 80139b8:	08013b1f 	.word	0x08013b1f
 80139bc:	08013b25 	.word	0x08013b25
 80139c0:	08013b35 	.word	0x08013b35
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 80139c4:	2308      	movs	r3, #8
 80139c6:	61bb      	str	r3, [r7, #24]
            break;
 80139c8:	e0bf      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 80139ca:	2300      	movs	r3, #0
 80139cc:	61bb      	str	r3, [r7, #24]
            break;
 80139ce:	e0bc      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 80139d0:	2300      	movs	r3, #0
 80139d2:	61bb      	str	r3, [r7, #24]
            break;
 80139d4:	e0b9      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80139dc:	733b      	strb	r3, [r7, #12]
 80139de:	2304      	movs	r3, #4
 80139e0:	737b      	strb	r3, [r7, #13]
 80139e2:	2300      	movs	r3, #0
 80139e4:	73bb      	strb	r3, [r7, #14]
 80139e6:	2348      	movs	r3, #72	@ 0x48
 80139e8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80139ea:	4b5b      	ldr	r3, [pc, #364]	@ (8013b58 <RegionUS915GetPhyParam+0x294>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80139f2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80139f4:	4b58      	ldr	r3, [pc, #352]	@ (8013b58 <RegionUS915GetPhyParam+0x294>)
 80139f6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80139f8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80139fa:	f107 030c 	add.w	r3, r7, #12
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fe fc59 	bl	80122b6 <RegionCommonGetNextLowerTxDr>
 8013a04:	4603      	mov	r3, r0
 8013a06:	61bb      	str	r3, [r7, #24]
            break;
 8013a08:	e09f      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	61bb      	str	r3, [r7, #24]
            break;
 8013a0e:	e09c      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8013a10:	2300      	movs	r3, #0
 8013a12:	61bb      	str	r3, [r7, #24]
            break;
 8013a14:	e099      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8013a16:	2340      	movs	r3, #64	@ 0x40
 8013a18:	61bb      	str	r3, [r7, #24]
            break;
 8013a1a:	e096      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8013a1c:	2320      	movs	r3, #32
 8013a1e:	61bb      	str	r3, [r7, #24]
            break;
 8013a20:	e093      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013a28:	461a      	mov	r2, r3
 8013a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8013b5c <RegionUS915GetPhyParam+0x298>)
 8013a2c:	5c9b      	ldrb	r3, [r3, r2]
 8013a2e:	61bb      	str	r3, [r7, #24]
            break;
 8013a30:	e08b      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013a38:	461a      	mov	r2, r3
 8013a3a:	4b49      	ldr	r3, [pc, #292]	@ (8013b60 <RegionUS915GetPhyParam+0x29c>)
 8013a3c:	5c9b      	ldrb	r3, [r3, r2]
 8013a3e:	61bb      	str	r3, [r7, #24]
            break;
 8013a40:	e083      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8013a42:	2300      	movs	r3, #0
 8013a44:	61bb      	str	r3, [r7, #24]
            break;
 8013a46:	e080      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8013a48:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013a4c:	61bb      	str	r3, [r7, #24]
            break;
 8013a4e:	e07c      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8013a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013a54:	61bb      	str	r3, [r7, #24]
            break;
 8013a56:	e078      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8013a58:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8013a5c:	61bb      	str	r3, [r7, #24]
            break;
 8013a5e:	e074      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8013a60:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013a64:	61bb      	str	r3, [r7, #24]
            break;
 8013a66:	e070      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8013a68:	f241 7370 	movw	r3, #6000	@ 0x1770
 8013a6c:	61bb      	str	r3, [r7, #24]
            break;
 8013a6e:	e06c      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8013a70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013a74:	483b      	ldr	r0, [pc, #236]	@ (8013b64 <RegionUS915GetPhyParam+0x2a0>)
 8013a76:	f002 fd45 	bl	8016504 <randr>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8013a80:	61bb      	str	r3, [r7, #24]
            break;
 8013a82:	e062      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8013a84:	2300      	movs	r3, #0
 8013a86:	61bb      	str	r3, [r7, #24]
            break;
 8013a88:	e05f      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8013a8a:	4b37      	ldr	r3, [pc, #220]	@ (8013b68 <RegionUS915GetPhyParam+0x2a4>)
 8013a8c:	61bb      	str	r3, [r7, #24]
            break;
 8013a8e:	e05c      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8013a90:	2308      	movs	r3, #8
 8013a92:	61bb      	str	r3, [r7, #24]
            break;
 8013a94:	e059      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013a96:	4b30      	ldr	r3, [pc, #192]	@ (8013b58 <RegionUS915GetPhyParam+0x294>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013a9e:	61bb      	str	r3, [r7, #24]
            break;
 8013aa0:	e053      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8013aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8013b58 <RegionUS915GetPhyParam+0x294>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013aaa:	61bb      	str	r3, [r7, #24]
            break;
 8013aac:	e04d      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8013aae:	2348      	movs	r3, #72	@ 0x48
 8013ab0:	61bb      	str	r3, [r7, #24]
            break;
 8013ab2:	e04a      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8013ab4:	4b28      	ldr	r3, [pc, #160]	@ (8013b58 <RegionUS915GetPhyParam+0x294>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	61bb      	str	r3, [r7, #24]
            break;
 8013aba:	e046      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8013abc:	2300      	movs	r3, #0
 8013abe:	61bb      	str	r3, [r7, #24]
            break;
 8013ac0:	e043      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	61bb      	str	r3, [r7, #24]
            break;
 8013ac6:	e040      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8013ac8:	4b28      	ldr	r3, [pc, #160]	@ (8013b6c <RegionUS915GetPhyParam+0x2a8>)
 8013aca:	61bb      	str	r3, [r7, #24]
            break;
 8013acc:	e03d      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8013ace:	f04f 0300 	mov.w	r3, #0
 8013ad2:	61bb      	str	r3, [r7, #24]
            break;
 8013ad4:	e039      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	791b      	ldrb	r3, [r3, #4]
 8013ada:	4a25      	ldr	r2, [pc, #148]	@ (8013b70 <RegionUS915GetPhyParam+0x2ac>)
 8013adc:	4922      	ldr	r1, [pc, #136]	@ (8013b68 <RegionUS915GetPhyParam+0x2a4>)
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7fd fd4c 	bl	801157c <RegionBaseUSCalcDownlinkFrequency>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8013ae8:	e02f      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8013aea:	2317      	movs	r3, #23
 8013aec:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8013aee:	2304      	movs	r3, #4
 8013af0:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8013af2:	2303      	movs	r3, #3
 8013af4:	76bb      	strb	r3, [r7, #26]
            break;
 8013af6:	e028      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8013af8:	2308      	movs	r3, #8
 8013afa:	61bb      	str	r3, [r7, #24]
            break;
 8013afc:	e025      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8013afe:	2308      	movs	r3, #8
 8013b00:	61bb      	str	r3, [r7, #24]
            break;
 8013b02:	e022      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	791b      	ldrb	r3, [r3, #4]
 8013b08:	4a19      	ldr	r2, [pc, #100]	@ (8013b70 <RegionUS915GetPhyParam+0x2ac>)
 8013b0a:	4917      	ldr	r1, [pc, #92]	@ (8013b68 <RegionUS915GetPhyParam+0x2a4>)
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fd fd35 	bl	801157c <RegionBaseUSCalcDownlinkFrequency>
 8013b12:	4603      	mov	r3, r0
 8013b14:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8013b16:	e018      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8013b18:	2308      	movs	r3, #8
 8013b1a:	61bb      	str	r3, [r7, #24]
            break;
 8013b1c:	e015      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8013b1e:	2308      	movs	r3, #8
 8013b20:	61bb      	str	r3, [r7, #24]
            break;
 8013b22:	e012      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	4b11      	ldr	r3, [pc, #68]	@ (8013b74 <RegionUS915GetPhyParam+0x2b0>)
 8013b2e:	5c9b      	ldrb	r3, [r3, r2]
 8013b30:	61bb      	str	r3, [r7, #24]
            break;
 8013b32:	e00a      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b3a:	490f      	ldr	r1, [pc, #60]	@ (8013b78 <RegionUS915GetPhyParam+0x2b4>)
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fe fc0d 	bl	801235c <RegionCommonGetBandwidth>
 8013b42:	4603      	mov	r3, r0
 8013b44:	61bb      	str	r3, [r7, #24]
            break;
 8013b46:	e000      	b.n	8013b4a <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8013b48:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8013b4a:	69bb      	ldr	r3, [r7, #24]
 8013b4c:	61fb      	str	r3, [r7, #28]
 8013b4e:	69fb      	ldr	r3, [r7, #28]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3720      	adds	r7, #32
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	200011c8 	.word	0x200011c8
 8013b5c:	08020808 	.word	0x08020808
 8013b60:	08020818 	.word	0x08020818
 8013b64:	fffffc18 	.word	0xfffffc18
 8013b68:	370870a0 	.word	0x370870a0
 8013b6c:	4200999a 	.word	0x4200999a
 8013b70:	000927c0 	.word	0x000927c0
 8013b74:	080207a4 	.word	0x080207a4
 8013b78:	080207b4 	.word	0x080207b4

08013b7c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013b7c:	b590      	push	{r4, r7, lr}
 8013b7e:	b085      	sub	sp, #20
 8013b80:	af02      	add	r7, sp, #8
 8013b82:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8013b84:	4b11      	ldr	r3, [pc, #68]	@ (8013bcc <RegionUS915SetBandTxDone+0x50>)
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	4b11      	ldr	r3, [pc, #68]	@ (8013bd0 <RegionUS915SetBandTxDone+0x54>)
 8013b8a:	6819      	ldr	r1, [r3, #0]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	4618      	mov	r0, r3
 8013b92:	4603      	mov	r3, r0
 8013b94:	005b      	lsls	r3, r3, #1
 8013b96:	4403      	add	r3, r0
 8013b98:	009b      	lsls	r3, r3, #2
 8013b9a:	440b      	add	r3, r1
 8013b9c:	3309      	adds	r3, #9
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	005b      	lsls	r3, r3, #1
 8013ba6:	440b      	add	r3, r1
 8013ba8:	00db      	lsls	r3, r3, #3
 8013baa:	18d0      	adds	r0, r2, r3
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6899      	ldr	r1, [r3, #8]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	785c      	ldrb	r4, [r3, #1]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	691a      	ldr	r2, [r3, #16]
 8013bb8:	9200      	str	r2, [sp, #0]
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	4622      	mov	r2, r4
 8013bbe:	f7fd ff53 	bl	8011a68 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8013bc2:	bf00      	nop
 8013bc4:	370c      	adds	r7, #12
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd90      	pop	{r4, r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	200011cc 	.word	0x200011cc
 8013bd0:	200011c8 	.word	0x200011c8

08013bd4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b08a      	sub	sp, #40	@ 0x28
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8013bdc:	2301      	movs	r3, #1
 8013bde:	81bb      	strh	r3, [r7, #12]
 8013be0:	2300      	movs	r3, #0
 8013be2:	73bb      	strb	r3, [r7, #14]
 8013be4:	2300      	movs	r3, #0
 8013be6:	613b      	str	r3, [r7, #16]
 8013be8:	2300      	movs	r3, #0
 8013bea:	617b      	str	r3, [r7, #20]
 8013bec:	2300      	movs	r3, #0
 8013bee:	61bb      	str	r3, [r7, #24]
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	61fb      	str	r3, [r7, #28]
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	7b1b      	ldrb	r3, [r3, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d007      	beq.n	8013c12 <RegionUS915InitDefaults+0x3e>
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f2c0 8104 	blt.w	8013e10 <RegionUS915InitDefaults+0x23c>
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	f200 8100 	bhi.w	8013e10 <RegionUS915InitDefaults+0x23c>
 8013c10:	e0ce      	b.n	8013db0 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f000 80fc 	beq.w	8013e14 <RegionUS915InitDefaults+0x240>
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 80f7 	beq.w	8013e14 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4a7c      	ldr	r2, [pc, #496]	@ (8013e1c <RegionUS915InitDefaults+0x248>)
 8013c2c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	4a7b      	ldr	r2, [pc, #492]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013c34:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	4a7a      	ldr	r2, [pc, #488]	@ (8013e24 <RegionUS915InitDefaults+0x250>)
 8013c3c:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8013c3e:	4b77      	ldr	r3, [pc, #476]	@ (8013e1c <RegionUS915InitDefaults+0x248>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	2200      	movs	r2, #0
 8013c44:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8013c46:	4b75      	ldr	r3, [pc, #468]	@ (8013e1c <RegionUS915InitDefaults+0x248>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8013c4e:	4b75      	ldr	r3, [pc, #468]	@ (8013e24 <RegionUS915InitDefaults+0x250>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	f107 010c 	add.w	r1, r7, #12
 8013c56:	2218      	movs	r2, #24
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f002 fc6a 	bl	8016532 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8013c5e:	2300      	movs	r3, #0
 8013c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013c64:	e02e      	b.n	8013cc4 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8013c66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c6a:	4a6f      	ldr	r2, [pc, #444]	@ (8013e28 <RegionUS915InitDefaults+0x254>)
 8013c6c:	fb03 f202 	mul.w	r2, r3, r2
 8013c70:	4b6e      	ldr	r3, [pc, #440]	@ (8013e2c <RegionUS915InitDefaults+0x258>)
 8013c72:	4413      	add	r3, r2
 8013c74:	4a6a      	ldr	r2, [pc, #424]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013c76:	6811      	ldr	r1, [r2, #0]
 8013c78:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	4613      	mov	r3, r2
 8013c80:	005b      	lsls	r3, r3, #1
 8013c82:	4413      	add	r3, r2
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	440b      	add	r3, r1
 8013c88:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8013c8a:	4b65      	ldr	r3, [pc, #404]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013c8c:	6819      	ldr	r1, [r3, #0]
 8013c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013c92:	4613      	mov	r3, r2
 8013c94:	005b      	lsls	r3, r3, #1
 8013c96:	4413      	add	r3, r2
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	440b      	add	r3, r1
 8013c9c:	3308      	adds	r3, #8
 8013c9e:	2230      	movs	r2, #48	@ 0x30
 8013ca0:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8013ca2:	4b5f      	ldr	r3, [pc, #380]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013ca4:	6819      	ldr	r1, [r3, #0]
 8013ca6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013caa:	4613      	mov	r3, r2
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	4413      	add	r3, r2
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	440b      	add	r3, r1
 8013cb4:	3309      	adds	r3, #9
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8013cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013cc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8013cca:	d9cc      	bls.n	8013c66 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8013ccc:	2340      	movs	r3, #64	@ 0x40
 8013cce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013cd2:	e02f      	b.n	8013d34 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8013cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013cd8:	3b40      	subs	r3, #64	@ 0x40
 8013cda:	4a55      	ldr	r2, [pc, #340]	@ (8013e30 <RegionUS915InitDefaults+0x25c>)
 8013cdc:	fb03 f202 	mul.w	r2, r3, r2
 8013ce0:	4b54      	ldr	r3, [pc, #336]	@ (8013e34 <RegionUS915InitDefaults+0x260>)
 8013ce2:	4413      	add	r3, r2
 8013ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013ce6:	6811      	ldr	r1, [r2, #0]
 8013ce8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013cec:	4618      	mov	r0, r3
 8013cee:	4613      	mov	r3, r2
 8013cf0:	005b      	lsls	r3, r3, #1
 8013cf2:	4413      	add	r3, r2
 8013cf4:	009b      	lsls	r3, r3, #2
 8013cf6:	440b      	add	r3, r1
 8013cf8:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8013cfa:	4b49      	ldr	r3, [pc, #292]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013cfc:	6819      	ldr	r1, [r3, #0]
 8013cfe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013d02:	4613      	mov	r3, r2
 8013d04:	005b      	lsls	r3, r3, #1
 8013d06:	4413      	add	r3, r2
 8013d08:	009b      	lsls	r3, r3, #2
 8013d0a:	440b      	add	r3, r1
 8013d0c:	3308      	adds	r3, #8
 8013d0e:	2244      	movs	r2, #68	@ 0x44
 8013d10:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8013d12:	4b43      	ldr	r3, [pc, #268]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d14:	6819      	ldr	r1, [r3, #0]
 8013d16:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	005b      	lsls	r3, r3, #1
 8013d1e:	4413      	add	r3, r2
 8013d20:	009b      	lsls	r3, r3, #2
 8013d22:	440b      	add	r3, r1
 8013d24:	3309      	adds	r3, #9
 8013d26:	2200      	movs	r2, #0
 8013d28:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8013d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013d2e:	3301      	adds	r3, #1
 8013d30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013d34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013d38:	2b47      	cmp	r3, #71	@ 0x47
 8013d3a:	d9cb      	bls.n	8013cd4 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8013d3c:	4b38      	ldr	r3, [pc, #224]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d44:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8013d48:	4b35      	ldr	r3, [pc, #212]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d50:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8013d54:	4b32      	ldr	r3, [pc, #200]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d5c:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8013d60:	4b2f      	ldr	r3, [pc, #188]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d68:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8013d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	22ff      	movs	r2, #255	@ 0xff
 8013d72:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8013d76:	4b2a      	ldr	r3, [pc, #168]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013d80:	4b27      	ldr	r3, [pc, #156]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013d88:	4b25      	ldr	r3, [pc, #148]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013d90:	2206      	movs	r2, #6
 8013d92:	4619      	mov	r1, r3
 8013d94:	f7fd fe42 	bl	8011a1c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8013d98:	4b20      	ldr	r3, [pc, #128]	@ (8013e1c <RegionUS915InitDefaults+0x248>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	4b20      	ldr	r3, [pc, #128]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013da6:	2206      	movs	r2, #6
 8013da8:	4619      	mov	r1, r3
 8013daa:	f7fd fe37 	bl	8011a1c <RegionCommonChanMaskCopy>
            break;
 8013dae:	e032      	b.n	8013e16 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013db0:	4b1b      	ldr	r3, [pc, #108]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013db8:	4b19      	ldr	r3, [pc, #100]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013dc0:	2206      	movs	r2, #6
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	f7fd fe2a 	bl	8011a1c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8013dc8:	2300      	movs	r3, #0
 8013dca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8013dce:	e01a      	b.n	8013e06 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8013dd0:	4b12      	ldr	r3, [pc, #72]	@ (8013e1c <RegionUS915InitDefaults+0x248>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8013dd8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013ddc:	4b10      	ldr	r3, [pc, #64]	@ (8013e20 <RegionUS915InitDefaults+0x24c>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8013de4:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8013de8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8013dec:	4b0b      	ldr	r3, [pc, #44]	@ (8013e1c <RegionUS915InitDefaults+0x248>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8013df4:	4001      	ands	r1, r0
 8013df6:	b289      	uxth	r1, r1
 8013df8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8013dfc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013e00:	3301      	adds	r3, #1
 8013e02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8013e06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013e0a:	2b05      	cmp	r3, #5
 8013e0c:	d9e0      	bls.n	8013dd0 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8013e0e:	e002      	b.n	8013e16 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8013e10:	bf00      	nop
 8013e12:	e000      	b.n	8013e16 <RegionUS915InitDefaults+0x242>
                return;
 8013e14:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8013e16:	3728      	adds	r7, #40	@ 0x28
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}
 8013e1c:	200011c4 	.word	0x200011c4
 8013e20:	200011c8 	.word	0x200011c8
 8013e24:	200011cc 	.word	0x200011cc
 8013e28:	00030d40 	.word	0x00030d40
 8013e2c:	35c80160 	.word	0x35c80160
 8013e30:	00186a00 	.word	0x00186a00
 8013e34:	35d2afc0 	.word	0x35d2afc0

08013e38 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	460b      	mov	r3, r1
 8013e42:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8013e44:	78fb      	ldrb	r3, [r7, #3]
 8013e46:	2b0f      	cmp	r3, #15
 8013e48:	d867      	bhi.n	8013f1a <RegionUS915Verify+0xe2>
 8013e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8013e50 <RegionUS915Verify+0x18>)
 8013e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e50:	08013e91 	.word	0x08013e91
 8013e54:	08013f1b 	.word	0x08013f1b
 8013e58:	08013f1b 	.word	0x08013f1b
 8013e5c:	08013f1b 	.word	0x08013f1b
 8013e60:	08013f1b 	.word	0x08013f1b
 8013e64:	08013e9f 	.word	0x08013e9f
 8013e68:	08013ebd 	.word	0x08013ebd
 8013e6c:	08013edb 	.word	0x08013edb
 8013e70:	08013f1b 	.word	0x08013f1b
 8013e74:	08013ef9 	.word	0x08013ef9
 8013e78:	08013ef9 	.word	0x08013ef9
 8013e7c:	08013f1b 	.word	0x08013f1b
 8013e80:	08013f1b 	.word	0x08013f1b
 8013e84:	08013f1b 	.word	0x08013f1b
 8013e88:	08013f1b 	.word	0x08013f1b
 8013e8c:	08013f17 	.word	0x08013f17
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7ff fca1 	bl	80137dc <VerifyRfFreq>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	e03e      	b.n	8013f1c <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8013ea4:	2204      	movs	r2, #4
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7fd fd3a 	bl	8011922 <RegionCommonValueInRange>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	bf14      	ite	ne
 8013eb4:	2301      	movne	r3, #1
 8013eb6:	2300      	moveq	r3, #0
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	e02f      	b.n	8013f1c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8013ec2:	2205      	movs	r2, #5
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7fd fd2b 	bl	8011922 <RegionCommonValueInRange>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	bf14      	ite	ne
 8013ed2:	2301      	movne	r3, #1
 8013ed4:	2300      	moveq	r3, #0
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	e020      	b.n	8013f1c <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f993 3000 	ldrsb.w	r3, [r3]
 8013ee0:	220d      	movs	r2, #13
 8013ee2:	2108      	movs	r1, #8
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fd fd1c 	bl	8011922 <RegionCommonValueInRange>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	bf14      	ite	ne
 8013ef0:	2301      	movne	r3, #1
 8013ef2:	2300      	moveq	r3, #0
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	e011      	b.n	8013f1c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f993 3000 	ldrsb.w	r3, [r3]
 8013efe:	220e      	movs	r2, #14
 8013f00:	2100      	movs	r1, #0
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fd fd0d 	bl	8011922 <RegionCommonValueInRange>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	bf14      	ite	ne
 8013f0e:	2301      	movne	r3, #1
 8013f10:	2300      	moveq	r3, #0
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	e002      	b.n	8013f1c <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8013f16:	2300      	movs	r3, #0
 8013f18:	e000      	b.n	8013f1c <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 8013f1a:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013f24:	b480      	push	{r7}
 8013f26:	b085      	sub	sp, #20
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	7a1b      	ldrb	r3, [r3, #8]
 8013f30:	2b10      	cmp	r3, #16
 8013f32:	d15e      	bne.n	8013ff2 <RegionUS915ApplyCFList+0xce>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	330f      	adds	r3, #15
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d15a      	bne.n	8013ff6 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8013f40:	2300      	movs	r3, #0
 8013f42:	73fb      	strb	r3, [r7, #15]
 8013f44:	2300      	movs	r3, #0
 8013f46:	73bb      	strb	r3, [r7, #14]
 8013f48:	e04f      	b.n	8013fea <RegionUS915ApplyCFList+0xc6>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	7bbb      	ldrb	r3, [r7, #14]
 8013f50:	4413      	add	r3, r2
 8013f52:	7819      	ldrb	r1, [r3, #0]
 8013f54:	4b2a      	ldr	r3, [pc, #168]	@ (8014000 <RegionUS915ApplyCFList+0xdc>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	7bfa      	ldrb	r2, [r7, #15]
 8013f5a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8013f5e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8013f62:	4b27      	ldr	r3, [pc, #156]	@ (8014000 <RegionUS915ApplyCFList+0xdc>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	7bfa      	ldrb	r2, [r7, #15]
 8013f68:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8013f6c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685a      	ldr	r2, [r3, #4]
 8013f74:	7bbb      	ldrb	r3, [r7, #14]
 8013f76:	3301      	adds	r3, #1
 8013f78:	4413      	add	r3, r2
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	021b      	lsls	r3, r3, #8
 8013f7e:	b299      	uxth	r1, r3
 8013f80:	4b1f      	ldr	r3, [pc, #124]	@ (8014000 <RegionUS915ApplyCFList+0xdc>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	7bfa      	ldrb	r2, [r7, #15]
 8013f86:	4301      	orrs	r1, r0
 8013f88:	b289      	uxth	r1, r1
 8013f8a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8013f8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8013f92:	7bfb      	ldrb	r3, [r7, #15]
 8013f94:	2b04      	cmp	r3, #4
 8013f96:	d10f      	bne.n	8013fb8 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8013f98:	4b19      	ldr	r3, [pc, #100]	@ (8014000 <RegionUS915ApplyCFList+0xdc>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	7bfa      	ldrb	r2, [r7, #15]
 8013f9e:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8013fa2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8013fa6:	4b16      	ldr	r3, [pc, #88]	@ (8014000 <RegionUS915ApplyCFList+0xdc>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	7bfa      	ldrb	r2, [r7, #15]
 8013fac:	b2c9      	uxtb	r1, r1
 8013fae:	b289      	uxth	r1, r1
 8013fb0:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8013fb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8013fb8:	4b12      	ldr	r3, [pc, #72]	@ (8014004 <RegionUS915ApplyCFList+0xe0>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	7bfa      	ldrb	r2, [r7, #15]
 8013fbe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8014000 <RegionUS915ApplyCFList+0xdc>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	7bfa      	ldrb	r2, [r7, #15]
 8013fc8:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8013fcc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8013fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8014004 <RegionUS915ApplyCFList+0xe0>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	7bfa      	ldrb	r2, [r7, #15]
 8013fd6:	4001      	ands	r1, r0
 8013fd8:	b289      	uxth	r1, r1
 8013fda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8013fde:	7bfb      	ldrb	r3, [r7, #15]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	73fb      	strb	r3, [r7, #15]
 8013fe4:	7bbb      	ldrb	r3, [r7, #14]
 8013fe6:	3302      	adds	r3, #2
 8013fe8:	73bb      	strb	r3, [r7, #14]
 8013fea:	7bfb      	ldrb	r3, [r7, #15]
 8013fec:	2b04      	cmp	r3, #4
 8013fee:	d9ac      	bls.n	8013f4a <RegionUS915ApplyCFList+0x26>
 8013ff0:	e002      	b.n	8013ff8 <RegionUS915ApplyCFList+0xd4>
        return;
 8013ff2:	bf00      	nop
 8013ff4:	e000      	b.n	8013ff8 <RegionUS915ApplyCFList+0xd4>
        return;
 8013ff6:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8013ff8:	3714      	adds	r7, #20
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bc80      	pop	{r7}
 8013ffe:	4770      	bx	lr
 8014000:	200011c8 	.word	0x200011c8
 8014004:	200011c4 	.word	0x200011c4

08014008 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	2204      	movs	r2, #4
 8014016:	2100      	movs	r1, #0
 8014018:	4618      	mov	r0, r3
 801401a:	f7fd fcd3 	bl	80119c4 <RegionCommonCountChannels>
 801401e:	4603      	mov	r3, r0
 8014020:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8014022:	7bbb      	ldrb	r3, [r7, #14]
 8014024:	2b01      	cmp	r3, #1
 8014026:	d804      	bhi.n	8014032 <RegionUS915ChanMaskSet+0x2a>
 8014028:	7bbb      	ldrb	r3, [r7, #14]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d001      	beq.n	8014032 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801402e:	2300      	movs	r3, #0
 8014030:	e04a      	b.n	80140c8 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	791b      	ldrb	r3, [r3, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d002      	beq.n	8014040 <RegionUS915ChanMaskSet+0x38>
 801403a:	2b01      	cmp	r3, #1
 801403c:	d036      	beq.n	80140ac <RegionUS915ChanMaskSet+0xa4>
 801403e:	e040      	b.n	80140c2 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014040:	4b23      	ldr	r3, [pc, #140]	@ (80140d0 <RegionUS915ChanMaskSet+0xc8>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2206      	movs	r2, #6
 801404e:	4619      	mov	r1, r3
 8014050:	f7fd fce4 	bl	8011a1c <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8014054:	4b1e      	ldr	r3, [pc, #120]	@ (80140d0 <RegionUS915ChanMaskSet+0xc8>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 801405c:	4b1c      	ldr	r3, [pc, #112]	@ (80140d0 <RegionUS915ChanMaskSet+0xc8>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	b2d2      	uxtb	r2, r2
 8014062:	b292      	uxth	r2, r2
 8014064:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8014068:	4b19      	ldr	r3, [pc, #100]	@ (80140d0 <RegionUS915ChanMaskSet+0xc8>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2200      	movs	r2, #0
 801406e:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8014072:	2300      	movs	r3, #0
 8014074:	73fb      	strb	r3, [r7, #15]
 8014076:	e015      	b.n	80140a4 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8014078:	4b16      	ldr	r3, [pc, #88]	@ (80140d4 <RegionUS915ChanMaskSet+0xcc>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	7bfa      	ldrb	r2, [r7, #15]
 801407e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8014082:	4b13      	ldr	r3, [pc, #76]	@ (80140d0 <RegionUS915ChanMaskSet+0xc8>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	7bfa      	ldrb	r2, [r7, #15]
 8014088:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801408c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8014090:	4b10      	ldr	r3, [pc, #64]	@ (80140d4 <RegionUS915ChanMaskSet+0xcc>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	7bfa      	ldrb	r2, [r7, #15]
 8014096:	4001      	ands	r1, r0
 8014098:	b289      	uxth	r1, r1
 801409a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801409e:	7bfb      	ldrb	r3, [r7, #15]
 80140a0:	3301      	adds	r3, #1
 80140a2:	73fb      	strb	r3, [r7, #15]
 80140a4:	7bfb      	ldrb	r3, [r7, #15]
 80140a6:	2b05      	cmp	r3, #5
 80140a8:	d9e6      	bls.n	8014078 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 80140aa:	e00c      	b.n	80140c6 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80140ac:	4b08      	ldr	r3, [pc, #32]	@ (80140d0 <RegionUS915ChanMaskSet+0xc8>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	2206      	movs	r2, #6
 80140ba:	4619      	mov	r1, r3
 80140bc:	f7fd fcae 	bl	8011a1c <RegionCommonChanMaskCopy>
            break;
 80140c0:	e001      	b.n	80140c6 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 80140c2:	2300      	movs	r3, #0
 80140c4:	e000      	b.n	80140c8 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80140c6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	200011c8 	.word	0x200011c8
 80140d4:	200011c4 	.word	0x200011c4

080140d8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b088      	sub	sp, #32
 80140dc:	af02      	add	r7, sp, #8
 80140de:	60ba      	str	r2, [r7, #8]
 80140e0:	607b      	str	r3, [r7, #4]
 80140e2:	4603      	mov	r3, r0
 80140e4:	73fb      	strb	r3, [r7, #15]
 80140e6:	460b      	mov	r3, r1
 80140e8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80140ea:	2300      	movs	r3, #0
 80140ec:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80140ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140f2:	2b0d      	cmp	r3, #13
 80140f4:	bfa8      	it	ge
 80140f6:	230d      	movge	r3, #13
 80140f8:	b25a      	sxtb	r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014104:	4916      	ldr	r1, [pc, #88]	@ (8014160 <RegionUS915ComputeRxWindowParameters+0x88>)
 8014106:	4618      	mov	r0, r3
 8014108:	f7fe f928 	bl	801235c <RegionCommonGetBandwidth>
 801410c:	4603      	mov	r3, r0
 801410e:	b2da      	uxtb	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801411a:	461a      	mov	r2, r3
 801411c:	4b11      	ldr	r3, [pc, #68]	@ (8014164 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801411e:	5c9a      	ldrb	r2, [r3, r2]
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014126:	4619      	mov	r1, r3
 8014128:	4b0d      	ldr	r3, [pc, #52]	@ (8014160 <RegionUS915ComputeRxWindowParameters+0x88>)
 801412a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801412e:	4619      	mov	r1, r3
 8014130:	4610      	mov	r0, r2
 8014132:	f7fd fe91 	bl	8011e58 <RegionCommonComputeSymbolTimeLoRa>
 8014136:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014138:	4b0b      	ldr	r3, [pc, #44]	@ (8014168 <RegionUS915ComputeRxWindowParameters+0x90>)
 801413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801413c:	4798      	blx	r3
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	3308      	adds	r3, #8
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	320c      	adds	r2, #12
 8014146:	7bb9      	ldrb	r1, [r7, #14]
 8014148:	9201      	str	r2, [sp, #4]
 801414a:	9300      	str	r3, [sp, #0]
 801414c:	4603      	mov	r3, r0
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	6978      	ldr	r0, [r7, #20]
 8014152:	f7fd fea7 	bl	8011ea4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8014156:	bf00      	nop
 8014158:	3718      	adds	r7, #24
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}
 801415e:	bf00      	nop
 8014160:	080207b4 	.word	0x080207b4
 8014164:	080207a4 	.word	0x080207a4
 8014168:	08020bac 	.word	0x08020bac

0801416c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801416c:	b590      	push	{r4, r7, lr}
 801416e:	b091      	sub	sp, #68	@ 0x44
 8014170:	af0a      	add	r7, sp, #40	@ 0x28
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	785b      	ldrb	r3, [r3, #1]
 801417a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801417c:	2300      	movs	r3, #0
 801417e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8014180:	2300      	movs	r3, #0
 8014182:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	685b      	ldr	r3, [r3, #4]
 8014188:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801418a:	4b34      	ldr	r3, [pc, #208]	@ (801425c <RegionUS915RxConfig+0xf0>)
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	4798      	blx	r3
 8014190:	4603      	mov	r3, r0
 8014192:	2b00      	cmp	r3, #0
 8014194:	d001      	beq.n	801419a <RegionUS915RxConfig+0x2e>
    {
        return false;
 8014196:	2300      	movs	r3, #0
 8014198:	e05c      	b.n	8014254 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	7cdb      	ldrb	r3, [r3, #19]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d109      	bne.n	80141b6 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	f003 0307 	and.w	r3, r3, #7
 80141aa:	4a2d      	ldr	r2, [pc, #180]	@ (8014260 <RegionUS915RxConfig+0xf4>)
 80141ac:	fb03 f202 	mul.w	r2, r3, r2
 80141b0:	4b2c      	ldr	r3, [pc, #176]	@ (8014264 <RegionUS915RxConfig+0xf8>)
 80141b2:	4413      	add	r3, r2
 80141b4:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80141b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141ba:	4a2b      	ldr	r2, [pc, #172]	@ (8014268 <RegionUS915RxConfig+0xfc>)
 80141bc:	5cd3      	ldrb	r3, [r2, r3]
 80141be:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80141c0:	4b26      	ldr	r3, [pc, #152]	@ (801425c <RegionUS915RxConfig+0xf0>)
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	6938      	ldr	r0, [r7, #16]
 80141c6:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80141c8:	4b24      	ldr	r3, [pc, #144]	@ (801425c <RegionUS915RxConfig+0xf0>)
 80141ca:	699c      	ldr	r4, [r3, #24]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	789b      	ldrb	r3, [r3, #2]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	689b      	ldr	r3, [r3, #8]
 80141da:	b29b      	uxth	r3, r3
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	7c92      	ldrb	r2, [r2, #18]
 80141e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80141e2:	2201      	movs	r2, #1
 80141e4:	9208      	str	r2, [sp, #32]
 80141e6:	2200      	movs	r2, #0
 80141e8:	9207      	str	r2, [sp, #28]
 80141ea:	2200      	movs	r2, #0
 80141ec:	9206      	str	r2, [sp, #24]
 80141ee:	2200      	movs	r2, #0
 80141f0:	9205      	str	r2, [sp, #20]
 80141f2:	2200      	movs	r2, #0
 80141f4:	9204      	str	r2, [sp, #16]
 80141f6:	2200      	movs	r2, #0
 80141f8:	9203      	str	r2, [sp, #12]
 80141fa:	9302      	str	r3, [sp, #8]
 80141fc:	2308      	movs	r3, #8
 80141fe:	9301      	str	r3, [sp, #4]
 8014200:	2300      	movs	r3, #0
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	2301      	movs	r3, #1
 8014206:	460a      	mov	r2, r1
 8014208:	4601      	mov	r1, r0
 801420a:	2001      	movs	r0, #1
 801420c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	7c5b      	ldrb	r3, [r3, #17]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d005      	beq.n	8014222 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8014216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801421a:	4a14      	ldr	r2, [pc, #80]	@ (801426c <RegionUS915RxConfig+0x100>)
 801421c:	5cd3      	ldrb	r3, [r2, r3]
 801421e:	75fb      	strb	r3, [r7, #23]
 8014220:	e004      	b.n	801422c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8014222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014226:	4a12      	ldr	r2, [pc, #72]	@ (8014270 <RegionUS915RxConfig+0x104>)
 8014228:	5cd3      	ldrb	r3, [r2, r3]
 801422a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801422c:	4b0b      	ldr	r3, [pc, #44]	@ (801425c <RegionUS915RxConfig+0xf0>)
 801422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014230:	7dfa      	ldrb	r2, [r7, #23]
 8014232:	320d      	adds	r2, #13
 8014234:	b2d2      	uxtb	r2, r2
 8014236:	4611      	mov	r1, r2
 8014238:	2001      	movs	r0, #1
 801423a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	7cdb      	ldrb	r3, [r3, #19]
 8014240:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014244:	6939      	ldr	r1, [r7, #16]
 8014246:	4618      	mov	r0, r3
 8014248:	f7fe f8a6 	bl	8012398 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	7bfa      	ldrb	r2, [r7, #15]
 8014250:	701a      	strb	r2, [r3, #0]
    return true;
 8014252:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8014254:	4618      	mov	r0, r3
 8014256:	371c      	adds	r7, #28
 8014258:	46bd      	mov	sp, r7
 801425a:	bd90      	pop	{r4, r7, pc}
 801425c:	08020bac 	.word	0x08020bac
 8014260:	000927c0 	.word	0x000927c0
 8014264:	370870a0 	.word	0x370870a0
 8014268:	080207a4 	.word	0x080207a4
 801426c:	08020818 	.word	0x08020818
 8014270:	08020808 	.word	0x08020808

08014274 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014274:	b590      	push	{r4, r7, lr}
 8014276:	b093      	sub	sp, #76	@ 0x4c
 8014278:	af0a      	add	r7, sp, #40	@ 0x28
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	60b9      	str	r1, [r7, #8]
 801427e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014286:	461a      	mov	r2, r3
 8014288:	4b49      	ldr	r3, [pc, #292]	@ (80143b0 <RegionUS915TxConfig+0x13c>)
 801428a:	5c9b      	ldrb	r3, [r3, r2]
 801428c:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014294:	4b47      	ldr	r3, [pc, #284]	@ (80143b4 <RegionUS915TxConfig+0x140>)
 8014296:	681a      	ldr	r2, [r3, #0]
 8014298:	4b47      	ldr	r3, [pc, #284]	@ (80143b8 <RegionUS915TxConfig+0x144>)
 801429a:	6819      	ldr	r1, [r3, #0]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	461c      	mov	r4, r3
 80142a2:	4623      	mov	r3, r4
 80142a4:	005b      	lsls	r3, r3, #1
 80142a6:	4423      	add	r3, r4
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	440b      	add	r3, r1
 80142ac:	3309      	adds	r3, #9
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	4619      	mov	r1, r3
 80142b2:	460b      	mov	r3, r1
 80142b4:	005b      	lsls	r3, r3, #1
 80142b6:	440b      	add	r3, r1
 80142b8:	00db      	lsls	r3, r3, #3
 80142ba:	4413      	add	r3, r2
 80142bc:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80142c6:	4b3c      	ldr	r3, [pc, #240]	@ (80143b8 <RegionUS915TxConfig+0x144>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80142ce:	f7ff fa4f 	bl	8013770 <LimitTxPower>
 80142d2:	4603      	mov	r3, r0
 80142d4:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80142dc:	4937      	ldr	r1, [pc, #220]	@ (80143bc <RegionUS915TxConfig+0x148>)
 80142de:	4618      	mov	r0, r3
 80142e0:	f7fe f83c 	bl	801235c <RegionCommonGetBandwidth>
 80142e4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80142e6:	2300      	movs	r3, #0
 80142e8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80142ea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80142ee:	f04f 0200 	mov.w	r2, #0
 80142f2:	4933      	ldr	r1, [pc, #204]	@ (80143c0 <RegionUS915TxConfig+0x14c>)
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fd fe8d 	bl	8012014 <RegionCommonComputeTxPower>
 80142fa:	4603      	mov	r3, r0
 80142fc:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80142fe:	4b31      	ldr	r3, [pc, #196]	@ (80143c4 <RegionUS915TxConfig+0x150>)
 8014300:	68da      	ldr	r2, [r3, #12]
 8014302:	4b2d      	ldr	r3, [pc, #180]	@ (80143b8 <RegionUS915TxConfig+0x144>)
 8014304:	6819      	ldr	r1, [r3, #0]
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	4618      	mov	r0, r3
 801430c:	4603      	mov	r3, r0
 801430e:	005b      	lsls	r3, r3, #1
 8014310:	4403      	add	r3, r0
 8014312:	009b      	lsls	r3, r3, #2
 8014314:	440b      	add	r3, r1
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4618      	mov	r0, r3
 801431a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801431c:	4b29      	ldr	r3, [pc, #164]	@ (80143c4 <RegionUS915TxConfig+0x150>)
 801431e:	69dc      	ldr	r4, [r3, #28]
 8014320:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014324:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014328:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801432c:	9208      	str	r2, [sp, #32]
 801432e:	2200      	movs	r2, #0
 8014330:	9207      	str	r2, [sp, #28]
 8014332:	2200      	movs	r2, #0
 8014334:	9206      	str	r2, [sp, #24]
 8014336:	2200      	movs	r2, #0
 8014338:	9205      	str	r2, [sp, #20]
 801433a:	2201      	movs	r2, #1
 801433c:	9204      	str	r2, [sp, #16]
 801433e:	2200      	movs	r2, #0
 8014340:	9203      	str	r2, [sp, #12]
 8014342:	2208      	movs	r2, #8
 8014344:	9202      	str	r2, [sp, #8]
 8014346:	2201      	movs	r2, #1
 8014348:	9201      	str	r2, [sp, #4]
 801434a:	9300      	str	r3, [sp, #0]
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	2200      	movs	r2, #0
 8014350:	2001      	movs	r0, #1
 8014352:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8014354:	4b18      	ldr	r3, [pc, #96]	@ (80143b8 <RegionUS915TxConfig+0x144>)
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	4619      	mov	r1, r3
 801435e:	460b      	mov	r3, r1
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	440b      	add	r3, r1
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	4413      	add	r3, r2
 8014368:	681a      	ldr	r2, [r3, #0]
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014370:	4619      	mov	r1, r3
 8014372:	4610      	mov	r0, r2
 8014374:	f7fe f842 	bl	80123fc <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8014378:	4b12      	ldr	r3, [pc, #72]	@ (80143c4 <RegionUS915TxConfig+0x150>)
 801437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801437c:	68fa      	ldr	r2, [r7, #12]
 801437e:	8992      	ldrh	r2, [r2, #12]
 8014380:	b2d2      	uxtb	r2, r2
 8014382:	4611      	mov	r1, r2
 8014384:	2001      	movs	r0, #1
 8014386:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	899b      	ldrh	r3, [r3, #12]
 8014392:	4619      	mov	r1, r3
 8014394:	4610      	mov	r0, r2
 8014396:	f7ff fa65 	bl	8013864 <GetTimeOnAir>
 801439a:	4602      	mov	r2, r0
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	7fba      	ldrb	r2, [r7, #30]
 80143a4:	701a      	strb	r2, [r3, #0]
    return true;
 80143a6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3724      	adds	r7, #36	@ 0x24
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd90      	pop	{r4, r7, pc}
 80143b0:	080207a4 	.word	0x080207a4
 80143b4:	200011cc 	.word	0x200011cc
 80143b8:	200011c8 	.word	0x200011c8
 80143bc:	080207b4 	.word	0x080207b4
 80143c0:	41f00000 	.word	0x41f00000
 80143c4:	08020bac 	.word	0x08020bac

080143c8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80143c8:	b590      	push	{r4, r7, lr}
 80143ca:	b097      	sub	sp, #92	@ 0x5c
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	607a      	str	r2, [r7, #4]
 80143d4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80143d6:	2307      	movs	r3, #7
 80143d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80143dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]
 80143e4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80143e6:	2300      	movs	r3, #0
 80143e8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 80143ec:	2300      	movs	r3, #0
 80143ee:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80143f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80143f6:	2200      	movs	r2, #0
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	605a      	str	r2, [r3, #4]
 80143fc:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80143fe:	4b97      	ldr	r3, [pc, #604]	@ (801465c <RegionUS915LinkAdrReq+0x294>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8014406:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801440a:	2206      	movs	r2, #6
 801440c:	4618      	mov	r0, r3
 801440e:	f7fd fb05 	bl	8011a1c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014412:	e11b      	b.n	801464c <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	685a      	ldr	r2, [r3, #4]
 8014418:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801441c:	4413      	add	r3, r2
 801441e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8014422:	4611      	mov	r1, r2
 8014424:	4618      	mov	r0, r3
 8014426:	f7fd fc3d 	bl	8011ca4 <RegionCommonParseLinkAdrReq>
 801442a:	4603      	mov	r3, r0
 801442c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8014430:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014434:	2b00      	cmp	r3, #0
 8014436:	f000 8113 	beq.w	8014660 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801443a:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801443e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014442:	4413      	add	r3, r2
 8014444:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014448:	2307      	movs	r3, #7
 801444a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801444e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014452:	2b06      	cmp	r3, #6
 8014454:	d116      	bne.n	8014484 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8014456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801445a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 801445e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014462:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8014466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801446a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 801446e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014472:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8014476:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801447a:	b2db      	uxtb	r3, r3
 801447c:	b29b      	uxth	r3, r3
 801447e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014482:	e0e3      	b.n	801464c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8014484:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014488:	2b07      	cmp	r3, #7
 801448a:	d112      	bne.n	80144b2 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801448c:	2300      	movs	r3, #0
 801448e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 8014492:	2300      	movs	r3, #0
 8014494:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 8014498:	2300      	movs	r3, #0
 801449a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 801449e:	2300      	movs	r3, #0
 80144a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80144a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80144b0:	e0cc      	b.n	801464c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80144b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80144b6:	2b05      	cmp	r3, #5
 80144b8:	f040 80bf 	bne.w	801463a <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 80144bc:	2301      	movs	r3, #1
 80144be:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80144c2:	2300      	movs	r3, #0
 80144c4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80144c8:	2300      	movs	r3, #0
 80144ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80144ce:	e0ae      	b.n	801462e <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80144d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80144d4:	b2da      	uxtb	r2, r3
 80144d6:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80144da:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80144de:	fa01 f303 	lsl.w	r3, r1, r3
 80144e2:	4013      	ands	r3, r2
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d04d      	beq.n	8014584 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 80144e8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80144ec:	f003 0301 	and.w	r3, r3, #1
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d120      	bne.n	8014538 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 80144f6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80144fa:	005b      	lsls	r3, r3, #1
 80144fc:	3358      	adds	r3, #88	@ 0x58
 80144fe:	443b      	add	r3, r7
 8014500:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014504:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014508:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 801450c:	b292      	uxth	r2, r2
 801450e:	005b      	lsls	r3, r3, #1
 8014510:	3358      	adds	r3, #88	@ 0x58
 8014512:	443b      	add	r3, r7
 8014514:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8014518:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801451c:	b21a      	sxth	r2, r3
 801451e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014522:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014526:	fa01 f303 	lsl.w	r3, r1, r3
 801452a:	b21b      	sxth	r3, r3
 801452c:	4313      	orrs	r3, r2
 801452e:	b21b      	sxth	r3, r3
 8014530:	b29b      	uxth	r3, r3
 8014532:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014536:	e075      	b.n	8014624 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8014538:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801453c:	005b      	lsls	r3, r3, #1
 801453e:	3358      	adds	r3, #88	@ 0x58
 8014540:	443b      	add	r3, r7
 8014542:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014546:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801454a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 801454e:	b292      	uxth	r2, r2
 8014550:	005b      	lsls	r3, r3, #1
 8014552:	3358      	adds	r3, #88	@ 0x58
 8014554:	443b      	add	r3, r7
 8014556:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801455a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801455e:	b21a      	sxth	r2, r3
 8014560:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014564:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014568:	fa01 f303 	lsl.w	r3, r1, r3
 801456c:	b21b      	sxth	r3, r3
 801456e:	4313      	orrs	r3, r2
 8014570:	b21b      	sxth	r3, r3
 8014572:	b29b      	uxth	r3, r3
 8014574:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8014578:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801457c:	3301      	adds	r3, #1
 801457e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8014582:	e04f      	b.n	8014624 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8014584:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014588:	f003 0301 	and.w	r3, r3, #1
 801458c:	b2db      	uxtb	r3, r3
 801458e:	2b00      	cmp	r3, #0
 8014590:	d122      	bne.n	80145d8 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8014592:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014596:	005b      	lsls	r3, r3, #1
 8014598:	3358      	adds	r3, #88	@ 0x58
 801459a:	443b      	add	r3, r7
 801459c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80145a0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80145a4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80145a8:	b292      	uxth	r2, r2
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	3358      	adds	r3, #88	@ 0x58
 80145ae:	443b      	add	r3, r7
 80145b0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80145b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80145b8:	b21a      	sxth	r2, r3
 80145ba:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80145be:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80145c2:	fa01 f303 	lsl.w	r3, r1, r3
 80145c6:	b21b      	sxth	r3, r3
 80145c8:	43db      	mvns	r3, r3
 80145ca:	b21b      	sxth	r3, r3
 80145cc:	4013      	ands	r3, r2
 80145ce:	b21b      	sxth	r3, r3
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80145d6:	e025      	b.n	8014624 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80145d8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	3358      	adds	r3, #88	@ 0x58
 80145e0:	443b      	add	r3, r7
 80145e2:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80145e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80145ea:	b2d2      	uxtb	r2, r2
 80145ec:	b292      	uxth	r2, r2
 80145ee:	005b      	lsls	r3, r3, #1
 80145f0:	3358      	adds	r3, #88	@ 0x58
 80145f2:	443b      	add	r3, r7
 80145f4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80145f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80145fc:	b21a      	sxth	r2, r3
 80145fe:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014602:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014606:	fa01 f303 	lsl.w	r3, r1, r3
 801460a:	b21b      	sxth	r3, r3
 801460c:	43db      	mvns	r3, r3
 801460e:	b21b      	sxth	r3, r3
 8014610:	4013      	ands	r3, r2
 8014612:	b21b      	sxth	r3, r3
 8014614:	b29b      	uxth	r3, r3
 8014616:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801461a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801461e:	3301      	adds	r3, #1
 8014620:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8014624:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014628:	3301      	adds	r3, #1
 801462a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 801462e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014632:	2b07      	cmp	r3, #7
 8014634:	f67f af4c 	bls.w	80144d0 <RegionUS915LinkAdrReq+0x108>
 8014638:	e008      	b.n	801464c <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801463a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801463e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	3358      	adds	r3, #88	@ 0x58
 8014646:	443b      	add	r3, r7
 8014648:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	7a1b      	ldrb	r3, [r3, #8]
 8014650:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8014654:	429a      	cmp	r2, r3
 8014656:	f4ff aedd 	bcc.w	8014414 <RegionUS915LinkAdrReq+0x4c>
 801465a:	e002      	b.n	8014662 <RegionUS915LinkAdrReq+0x29a>
 801465c:	200011c8 	.word	0x200011c8
            break; // break loop, since no more request has been found
 8014660:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8014662:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8014666:	2b03      	cmp	r3, #3
 8014668:	dc0f      	bgt.n	801468a <RegionUS915LinkAdrReq+0x2c2>
 801466a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801466e:	2204      	movs	r2, #4
 8014670:	2100      	movs	r1, #0
 8014672:	4618      	mov	r0, r3
 8014674:	f7fd f9a6 	bl	80119c4 <RegionCommonCountChannels>
 8014678:	4603      	mov	r3, r0
 801467a:	2b01      	cmp	r3, #1
 801467c:	d805      	bhi.n	801468a <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801467e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014682:	f023 0301 	bic.w	r3, r3, #1
 8014686:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801468a:	2302      	movs	r3, #2
 801468c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	7a5b      	ldrb	r3, [r3, #9]
 8014694:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8014698:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801469c:	4618      	mov	r0, r3
 801469e:	f7ff f911 	bl	80138c4 <RegionUS915GetPhyParam>
 80146a2:	4603      	mov	r3, r0
 80146a4:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 80146a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80146aa:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	7a9b      	ldrb	r3, [r3, #10]
 80146b0:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80146b2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80146b6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80146b8:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80146bc:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80146be:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80146c2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80146ca:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80146d2:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	7b5b      	ldrb	r3, [r3, #13]
 80146d8:	b25b      	sxtb	r3, r3
 80146da:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80146dc:	2348      	movs	r3, #72	@ 0x48
 80146de:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80146e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80146e6:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80146e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146ea:	b25b      	sxtb	r3, r3
 80146ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80146f0:	2304      	movs	r3, #4
 80146f2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80146f6:	4b3f      	ldr	r3, [pc, #252]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80146fc:	230e      	movs	r3, #14
 80146fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8014702:	2300      	movs	r3, #0
 8014704:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801470e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8014712:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014716:	1c9a      	adds	r2, r3, #2
 8014718:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801471c:	1c59      	adds	r1, r3, #1
 801471e:	f107 0014 	add.w	r0, r7, #20
 8014722:	4623      	mov	r3, r4
 8014724:	f7fd fb10 	bl	8011d48 <RegionCommonLinkAdrReqVerifyParams>
 8014728:	4603      	mov	r3, r0
 801472a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801472e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014732:	2b07      	cmp	r3, #7
 8014734:	d147      	bne.n	80147c6 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8014736:	4b2f      	ldr	r3, [pc, #188]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801473e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8014742:	2206      	movs	r2, #6
 8014744:	4618      	mov	r0, r3
 8014746:	f7fd f969 	bl	8011a1c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801474a:	4b2b      	ldr	r3, [pc, #172]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	8819      	ldrh	r1, [r3, #0]
 8014750:	4b28      	ldr	r3, [pc, #160]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8014758:	4b27      	ldr	r3, [pc, #156]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	400a      	ands	r2, r1
 801475e:	b292      	uxth	r2, r2
 8014760:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8014762:	4b25      	ldr	r3, [pc, #148]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	8859      	ldrh	r1, [r3, #2]
 8014768:	4b22      	ldr	r3, [pc, #136]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 8014770:	4b21      	ldr	r3, [pc, #132]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	400a      	ands	r2, r1
 8014776:	b292      	uxth	r2, r2
 8014778:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801477a:	4b1f      	ldr	r3, [pc, #124]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	8899      	ldrh	r1, [r3, #4]
 8014780:	4b1c      	ldr	r3, [pc, #112]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 8014788:	4b1b      	ldr	r3, [pc, #108]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	400a      	ands	r2, r1
 801478e:	b292      	uxth	r2, r2
 8014790:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8014792:	4b19      	ldr	r3, [pc, #100]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	88d9      	ldrh	r1, [r3, #6]
 8014798:	4b16      	ldr	r3, [pc, #88]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 80147a0:	4b15      	ldr	r3, [pc, #84]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	400a      	ands	r2, r1
 80147a6:	b292      	uxth	r2, r2
 80147a8:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80147aa:	4b12      	ldr	r3, [pc, #72]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	4b12      	ldr	r3, [pc, #72]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 80147b6:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 80147b8:	4b0e      	ldr	r3, [pc, #56]	@ (80147f4 <RegionUS915LinkAdrReq+0x42c>)
 80147ba:	681a      	ldr	r2, [r3, #0]
 80147bc:	4b0e      	ldr	r3, [pc, #56]	@ (80147f8 <RegionUS915LinkAdrReq+0x430>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 80147c4:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80147c6:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80147ce:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80147d6:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80147de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80147e0:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80147e4:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 80147e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	375c      	adds	r7, #92	@ 0x5c
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd90      	pop	{r4, r7, pc}
 80147f2:	bf00      	nop
 80147f4:	200011c8 	.word	0x200011c8
 80147f8:	200011c4 	.word	0x200011c4

080147fc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b084      	sub	sp, #16
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014804:	2307      	movs	r3, #7
 8014806:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	4618      	mov	r0, r3
 801480e:	f7fe ffe5 	bl	80137dc <VerifyRfFreq>
 8014812:	4603      	mov	r3, r0
 8014814:	f083 0301 	eor.w	r3, r3, #1
 8014818:	b2db      	uxtb	r3, r3
 801481a:	2b00      	cmp	r3, #0
 801481c:	d003      	beq.n	8014826 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801481e:	7bfb      	ldrb	r3, [r7, #15]
 8014820:	f023 0301 	bic.w	r3, r3, #1
 8014824:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f993 3000 	ldrsb.w	r3, [r3]
 801482c:	220d      	movs	r2, #13
 801482e:	2108      	movs	r1, #8
 8014830:	4618      	mov	r0, r3
 8014832:	f7fd f876 	bl	8011922 <RegionCommonValueInRange>
 8014836:	4603      	mov	r3, r0
 8014838:	2b00      	cmp	r3, #0
 801483a:	d103      	bne.n	8014844 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	f023 0302 	bic.w	r3, r3, #2
 8014842:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f993 3000 	ldrsb.w	r3, [r3]
 801484a:	2207      	movs	r2, #7
 801484c:	2105      	movs	r1, #5
 801484e:	4618      	mov	r0, r3
 8014850:	f7fd f867 	bl	8011922 <RegionCommonValueInRange>
 8014854:	4603      	mov	r3, r0
 8014856:	2b01      	cmp	r3, #1
 8014858:	d004      	beq.n	8014864 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8014860:	2b0d      	cmp	r3, #13
 8014862:	dd03      	ble.n	801486c <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8014864:	7bfb      	ldrb	r3, [r7, #15]
 8014866:	f023 0302 	bic.w	r3, r3, #2
 801486a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014872:	2203      	movs	r2, #3
 8014874:	2100      	movs	r1, #0
 8014876:	4618      	mov	r0, r3
 8014878:	f7fd f853 	bl	8011922 <RegionCommonValueInRange>
 801487c:	4603      	mov	r3, r0
 801487e:	2b00      	cmp	r3, #0
 8014880:	d103      	bne.n	801488a <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8014882:	7bfb      	ldrb	r3, [r7, #15]
 8014884:	f023 0304 	bic.w	r3, r3, #4
 8014888:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801488a:	7bfb      	ldrb	r3, [r7, #15]
}
 801488c:	4618      	mov	r0, r3
 801488e:	3710      	adds	r7, #16
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8014894:	b480      	push	{r7}
 8014896:	b083      	sub	sp, #12
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801489c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	370c      	adds	r7, #12
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bc80      	pop	{r7}
 80148a8:	4770      	bx	lr

080148aa <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80148aa:	b480      	push	{r7}
 80148ac:	b083      	sub	sp, #12
 80148ae:	af00      	add	r7, sp, #0
 80148b0:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80148b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	370c      	adds	r7, #12
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bc80      	pop	{r7}
 80148be:	4770      	bx	lr

080148c0 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80148c0:	b480      	push	{r7}
 80148c2:	b083      	sub	sp, #12
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80148c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	370c      	adds	r7, #12
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bc80      	pop	{r7}
 80148d4:	4770      	bx	lr
	...

080148d8 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80148d8:	b480      	push	{r7}
 80148da:	b083      	sub	sp, #12
 80148dc:	af00      	add	r7, sp, #0
 80148de:	4603      	mov	r3, r0
 80148e0:	460a      	mov	r2, r1
 80148e2:	71fb      	strb	r3, [r7, #7]
 80148e4:	4613      	mov	r3, r2
 80148e6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80148e8:	79bb      	ldrb	r3, [r7, #6]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d106      	bne.n	80148fc <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80148ee:	4b13      	ldr	r3, [pc, #76]	@ (801493c <RegionUS915AlternateDr+0x64>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	7b5a      	ldrb	r2, [r3, #13]
 80148f4:	3201      	adds	r2, #1
 80148f6:	b2d2      	uxtb	r2, r2
 80148f8:	735a      	strb	r2, [r3, #13]
 80148fa:	e005      	b.n	8014908 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 80148fc:	4b0f      	ldr	r3, [pc, #60]	@ (801493c <RegionUS915AlternateDr+0x64>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	7b5a      	ldrb	r2, [r3, #13]
 8014902:	3a01      	subs	r2, #1
 8014904:	b2d2      	uxtb	r2, r2
 8014906:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8014908:	4b0c      	ldr	r3, [pc, #48]	@ (801493c <RegionUS915AlternateDr+0x64>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	7b5a      	ldrb	r2, [r3, #13]
 801490e:	4b0c      	ldr	r3, [pc, #48]	@ (8014940 <RegionUS915AlternateDr+0x68>)
 8014910:	fba3 1302 	umull	r1, r3, r3, r2
 8014914:	0859      	lsrs	r1, r3, #1
 8014916:	460b      	mov	r3, r1
 8014918:	00db      	lsls	r3, r3, #3
 801491a:	440b      	add	r3, r1
 801491c:	1ad3      	subs	r3, r2, r3
 801491e:	b2db      	uxtb	r3, r3
 8014920:	2b00      	cmp	r3, #0
 8014922:	d102      	bne.n	801492a <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8014924:	2304      	movs	r3, #4
 8014926:	71fb      	strb	r3, [r7, #7]
 8014928:	e001      	b.n	801492e <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801492a:	2300      	movs	r3, #0
 801492c:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8014932:	4618      	mov	r0, r3
 8014934:	370c      	adds	r7, #12
 8014936:	46bd      	mov	sp, r7
 8014938:	bc80      	pop	{r7}
 801493a:	4770      	bx	lr
 801493c:	200011c4 	.word	0x200011c4
 8014940:	38e38e39 	.word	0x38e38e39

08014944 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b0a8      	sub	sp, #160	@ 0xa0
 8014948:	af02      	add	r7, sp, #8
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	60b9      	str	r1, [r7, #8]
 801494e:	607a      	str	r2, [r7, #4]
 8014950:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8014952:	2300      	movs	r3, #0
 8014954:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8014958:	2300      	movs	r3, #0
 801495a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801495e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014962:	2248      	movs	r2, #72	@ 0x48
 8014964:	2100      	movs	r1, #0
 8014966:	4618      	mov	r0, r3
 8014968:	f00a fca9 	bl	801f2be <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801496c:	230c      	movs	r3, #12
 801496e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8014972:	4b67      	ldr	r3, [pc, #412]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	2204      	movs	r2, #4
 8014978:	2100      	movs	r1, #0
 801497a:	4618      	mov	r0, r3
 801497c:	f7fd f822 	bl	80119c4 <RegionCommonCountChannels>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d10e      	bne.n	80149a4 <RegionUS915NextChannel+0x60>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8014986:	4b62      	ldr	r3, [pc, #392]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	4618      	mov	r0, r3
 801498c:	4b61      	ldr	r3, [pc, #388]	@ (8014b14 <RegionUS915NextChannel+0x1d0>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014994:	2204      	movs	r2, #4
 8014996:	4619      	mov	r1, r3
 8014998:	f7fd f840 	bl	8011a1c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801499c:	4b5c      	ldr	r3, [pc, #368]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	2200      	movs	r2, #0
 80149a2:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80149aa:	2b03      	cmp	r3, #3
 80149ac:	dd0c      	ble.n	80149c8 <RegionUS915NextChannel+0x84>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 80149ae:	4b58      	ldr	r3, [pc, #352]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	891b      	ldrh	r3, [r3, #8]
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d106      	bne.n	80149c8 <RegionUS915NextChannel+0x84>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80149ba:	4b56      	ldr	r3, [pc, #344]	@ (8014b14 <RegionUS915NextChannel+0x1d0>)
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	4b54      	ldr	r3, [pc, #336]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 80149c6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	7a5b      	ldrb	r3, [r3, #9]
 80149cc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80149d4:	b2db      	uxtb	r3, r3
 80149d6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 80149d8:	4b4d      	ldr	r3, [pc, #308]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80149de:	4b4d      	ldr	r3, [pc, #308]	@ (8014b14 <RegionUS915NextChannel+0x1d0>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80149e4:	4b4c      	ldr	r3, [pc, #304]	@ (8014b18 <RegionUS915NextChannel+0x1d4>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80149ea:	2348      	movs	r3, #72	@ 0x48
 80149ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 80149ee:	2300      	movs	r3, #0
 80149f0:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	7a9b      	ldrb	r3, [r3, #10]
 8014a02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8014a06:	2301      	movs	r3, #1
 8014a08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8014a0c:	f107 0314 	add.w	r3, r7, #20
 8014a10:	64bb      	str	r3, [r7, #72]	@ 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8014a12:	68fa      	ldr	r2, [r7, #12]
 8014a14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014a18:	320c      	adds	r2, #12
 8014a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a1e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	7d1b      	ldrb	r3, [r3, #20]
 8014a26:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	8adb      	ldrh	r3, [r3, #22]
 8014a34:	4619      	mov	r1, r3
 8014a36:	4610      	mov	r0, r2
 8014a38:	f7fe ff14 	bl	8013864 <GetTimeOnAir>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8014a40:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 8014a44:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8014a48:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	9301      	str	r3, [sp, #4]
 8014a50:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8014a54:	9300      	str	r3, [sp, #0]
 8014a56:	460b      	mov	r3, r1
 8014a58:	6839      	ldr	r1, [r7, #0]
 8014a5a:	f7fd fbca 	bl	80121f2 <RegionCommonIdentifyChannels>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8014a64:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d14a      	bne.n	8014b02 <RegionUS915NextChannel+0x1be>
    {
        if( nextChanParams->Joined == true )
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	7a5b      	ldrb	r3, [r3, #9]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00e      	beq.n	8014a92 <RegionUS915NextChannel+0x14e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8014a74:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	f001 fd41 	bl	8016504 <randr>
 8014a82:	4603      	mov	r3, r0
 8014a84:	3398      	adds	r3, #152	@ 0x98
 8014a86:	443b      	add	r3, r7
 8014a88:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	701a      	strb	r2, [r3, #0]
 8014a90:	e02e      	b.n	8014af0 <RegionUS915NextChannel+0x1ac>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d10e      	bne.n	8014aba <RegionUS915NextChannel+0x176>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8014a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8014aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8014aa6:	330c      	adds	r3, #12
 8014aa8:	68ba      	ldr	r2, [r7, #8]
 8014aaa:	4619      	mov	r1, r3
 8014aac:	f7fc fcf4 	bl	8011498 <RegionBaseUSComputeNext125kHzJoinChannel>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b03      	cmp	r3, #3
 8014ab4:	d11c      	bne.n	8014af0 <RegionUS915NextChannel+0x1ac>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ab6:	2303      	movs	r3, #3
 8014ab8:	e025      	b.n	8014b06 <RegionUS915NextChannel+0x1c2>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8014aba:	2300      	movs	r3, #0
 8014abc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8014ac0:	e004      	b.n	8014acc <RegionUS915NextChannel+0x188>
                {
                    i++;
 8014ac2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014ac6:	3301      	adds	r3, #1
 8014ac8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8014acc:	4b10      	ldr	r3, [pc, #64]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	891b      	ldrh	r3, [r3, #8]
 8014ad2:	b2da      	uxtb	r2, r3
 8014ad4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014ad8:	fa42 f303 	asr.w	r3, r2, r3
 8014adc:	f003 0301 	and.w	r3, r3, #1
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d0ee      	beq.n	8014ac2 <RegionUS915NextChannel+0x17e>
                }
                *channel = 64 + i;
 8014ae4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014ae8:	3340      	adds	r3, #64	@ 0x40
 8014aea:	b2da      	uxtb	r2, r3
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8014af0:	4b07      	ldr	r3, [pc, #28]	@ (8014b10 <RegionUS915NextChannel+0x1cc>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4618      	mov	r0, r3
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	2248      	movs	r2, #72	@ 0x48
 8014afc:	4619      	mov	r1, r3
 8014afe:	f7fc ff2d 	bl	801195c <RegionCommonChanDisable>
    }
    return status;
 8014b02:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3798      	adds	r7, #152	@ 0x98
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}
 8014b0e:	bf00      	nop
 8014b10:	200011c4 	.word	0x200011c4
 8014b14:	200011c8 	.word	0x200011c8
 8014b18:	200011cc 	.word	0x200011cc

08014b1c <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b085      	sub	sp, #20
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	4603      	mov	r3, r0
 8014b24:	71fb      	strb	r3, [r7, #7]
 8014b26:	460b      	mov	r3, r1
 8014b28:	71bb      	strb	r3, [r7, #6]
 8014b2a:	4613      	mov	r3, r2
 8014b2c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8014b2e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014b32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014b36:	4909      	ldr	r1, [pc, #36]	@ (8014b5c <RegionUS915ApplyDrOffset+0x40>)
 8014b38:	0092      	lsls	r2, r2, #2
 8014b3a:	440a      	add	r2, r1
 8014b3c:	4413      	add	r3, r2
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8014b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	da01      	bge.n	8014b4e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8014b4e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3714      	adds	r7, #20
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bc80      	pop	{r7}
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	080207f4 	.word	0x080207f4

08014b60 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	33f1      	adds	r3, #241	@ 0xf1
 8014b6c:	2210      	movs	r2, #16
 8014b6e:	2100      	movs	r1, #0
 8014b70:	4618      	mov	r0, r3
 8014b72:	f001 fd19 	bl	80165a8 <memset1>
    ctx->M_n = 0;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	22f0      	movs	r2, #240	@ 0xf0
 8014b82:	2100      	movs	r1, #0
 8014b84:	4618      	mov	r0, r3
 8014b86:	f001 fd0f 	bl	80165a8 <memset1>
}
 8014b8a:	bf00      	nop
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b082      	sub	sp, #8
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	6078      	str	r0, [r7, #4]
 8014b9a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	2110      	movs	r1, #16
 8014ba2:	6838      	ldr	r0, [r7, #0]
 8014ba4:	f000 fe60 	bl	8015868 <lorawan_aes_set_key>
}
 8014ba8:	bf00      	nop
 8014baa:	3708      	adds	r7, #8
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}

08014bb0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b08c      	sub	sp, #48	@ 0x30
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	f000 80a1 	beq.w	8014d0a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014bce:	f1c3 0310 	rsb	r3, r3, #16
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	bf28      	it	cs
 8014bd8:	4613      	movcs	r3, r2
 8014bda:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014be8:	4413      	add	r3, r2
 8014bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014bec:	b292      	uxth	r2, r2
 8014bee:	68b9      	ldr	r1, [r7, #8]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f001 fc9e 	bl	8016532 <memcpy1>
        ctx->M_n += mlen;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8014bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bfe:	441a      	add	r2, r3
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014c0c:	2b0f      	cmp	r3, #15
 8014c0e:	f240 808d 	bls.w	8014d2c <AES_CMAC_Update+0x17c>
 8014c12:	687a      	ldr	r2, [r7, #4]
 8014c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c16:	429a      	cmp	r2, r3
 8014c18:	f000 8088 	beq.w	8014d2c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c20:	e015      	b.n	8014c4e <AES_CMAC_Update+0x9e>
 8014c22:	68fa      	ldr	r2, [r7, #12]
 8014c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c26:	4413      	add	r3, r2
 8014c28:	33f1      	adds	r3, #241	@ 0xf1
 8014c2a:	781a      	ldrb	r2, [r3, #0]
 8014c2c:	68f9      	ldr	r1, [r7, #12]
 8014c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c30:	440b      	add	r3, r1
 8014c32:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	4053      	eors	r3, r2
 8014c3a:	b2d9      	uxtb	r1, r3
 8014c3c:	68fa      	ldr	r2, [r7, #12]
 8014c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c40:	4413      	add	r3, r2
 8014c42:	33f1      	adds	r3, #241	@ 0xf1
 8014c44:	460a      	mov	r2, r1
 8014c46:	701a      	strb	r2, [r3, #0]
 8014c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c50:	2b0f      	cmp	r3, #15
 8014c52:	dde6      	ble.n	8014c22 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8014c5a:	f107 0314 	add.w	r3, r7, #20
 8014c5e:	2210      	movs	r2, #16
 8014c60:	4618      	mov	r0, r3
 8014c62:	f001 fc66 	bl	8016532 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8014c66:	68fa      	ldr	r2, [r7, #12]
 8014c68:	f107 0114 	add.w	r1, r7, #20
 8014c6c:	f107 0314 	add.w	r3, r7, #20
 8014c70:	4618      	mov	r0, r3
 8014c72:	f000 fed7 	bl	8015a24 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	33f1      	adds	r3, #241	@ 0xf1
 8014c7a:	f107 0114 	add.w	r1, r7, #20
 8014c7e:	2210      	movs	r2, #16
 8014c80:	4618      	mov	r0, r3
 8014c82:	f001 fc56 	bl	8016532 <memcpy1>

        data += mlen;
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c8a:	4413      	add	r3, r2
 8014c8c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8014c8e:	687a      	ldr	r2, [r7, #4]
 8014c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c92:	1ad3      	subs	r3, r2, r3
 8014c94:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8014c96:	e038      	b.n	8014d0a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8014c98:	2300      	movs	r3, #0
 8014c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014c9c:	e013      	b.n	8014cc6 <AES_CMAC_Update+0x116>
 8014c9e:	68fa      	ldr	r2, [r7, #12]
 8014ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca2:	4413      	add	r3, r2
 8014ca4:	33f1      	adds	r3, #241	@ 0xf1
 8014ca6:	781a      	ldrb	r2, [r3, #0]
 8014ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014caa:	68b9      	ldr	r1, [r7, #8]
 8014cac:	440b      	add	r3, r1
 8014cae:	781b      	ldrb	r3, [r3, #0]
 8014cb0:	4053      	eors	r3, r2
 8014cb2:	b2d9      	uxtb	r1, r3
 8014cb4:	68fa      	ldr	r2, [r7, #12]
 8014cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cb8:	4413      	add	r3, r2
 8014cba:	33f1      	adds	r3, #241	@ 0xf1
 8014cbc:	460a      	mov	r2, r1
 8014cbe:	701a      	strb	r2, [r3, #0]
 8014cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc8:	2b0f      	cmp	r3, #15
 8014cca:	dde8      	ble.n	8014c9e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8014cd2:	f107 0314 	add.w	r3, r7, #20
 8014cd6:	2210      	movs	r2, #16
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f001 fc2a 	bl	8016532 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8014cde:	68fa      	ldr	r2, [r7, #12]
 8014ce0:	f107 0114 	add.w	r1, r7, #20
 8014ce4:	f107 0314 	add.w	r3, r7, #20
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f000 fe9b 	bl	8015a24 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	33f1      	adds	r3, #241	@ 0xf1
 8014cf2:	f107 0114 	add.w	r1, r7, #20
 8014cf6:	2210      	movs	r2, #16
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f001 fc1a 	bl	8016532 <memcpy1>

        data += 16;
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	3310      	adds	r3, #16
 8014d02:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	3b10      	subs	r3, #16
 8014d08:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	2b10      	cmp	r3, #16
 8014d0e:	d8c3      	bhi.n	8014c98 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	b292      	uxth	r2, r2
 8014d1a:	68b9      	ldr	r1, [r7, #8]
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f001 fc08 	bl	8016532 <memcpy1>
    ctx->M_n = len;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8014d2a:	e000      	b.n	8014d2e <AES_CMAC_Update+0x17e>
            return;
 8014d2c:	bf00      	nop
}
 8014d2e:	3730      	adds	r7, #48	@ 0x30
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b092      	sub	sp, #72	@ 0x48
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8014d3e:	f107 031c 	add.w	r3, r7, #28
 8014d42:	2210      	movs	r2, #16
 8014d44:	2100      	movs	r1, #0
 8014d46:	4618      	mov	r0, r3
 8014d48:	f001 fc2e 	bl	80165a8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8014d4c:	683a      	ldr	r2, [r7, #0]
 8014d4e:	f107 011c 	add.w	r1, r7, #28
 8014d52:	f107 031c 	add.w	r3, r7, #28
 8014d56:	4618      	mov	r0, r3
 8014d58:	f000 fe64 	bl	8015a24 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8014d5c:	7f3b      	ldrb	r3, [r7, #28]
 8014d5e:	b25b      	sxtb	r3, r3
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	da31      	bge.n	8014dc8 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 8014d64:	2300      	movs	r3, #0
 8014d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8014d68:	e01c      	b.n	8014da4 <AES_CMAC_Final+0x70>
 8014d6a:	f107 021c 	add.w	r2, r7, #28
 8014d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d70:	4413      	add	r3, r2
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	b25b      	sxtb	r3, r3
 8014d76:	005b      	lsls	r3, r3, #1
 8014d78:	b25a      	sxtb	r2, r3
 8014d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	3348      	adds	r3, #72	@ 0x48
 8014d80:	443b      	add	r3, r7
 8014d82:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8014d86:	09db      	lsrs	r3, r3, #7
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	b25b      	sxtb	r3, r3
 8014d8c:	4313      	orrs	r3, r2
 8014d8e:	b25b      	sxtb	r3, r3
 8014d90:	b2d9      	uxtb	r1, r3
 8014d92:	f107 021c 	add.w	r2, r7, #28
 8014d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d98:	4413      	add	r3, r2
 8014d9a:	460a      	mov	r2, r1
 8014d9c:	701a      	strb	r2, [r3, #0]
 8014d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014da0:	3301      	adds	r3, #1
 8014da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8014da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014da6:	2b0e      	cmp	r3, #14
 8014da8:	dddf      	ble.n	8014d6a <AES_CMAC_Final+0x36>
 8014daa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014dae:	005b      	lsls	r3, r3, #1
 8014db0:	b2db      	uxtb	r3, r3
 8014db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 8014db6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014dba:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 8014dbe:	43db      	mvns	r3, r3
 8014dc0:	b2db      	uxtb	r3, r3
 8014dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8014dc6:	e028      	b.n	8014e1a <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 8014dc8:	2300      	movs	r3, #0
 8014dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8014dcc:	e01c      	b.n	8014e08 <AES_CMAC_Final+0xd4>
 8014dce:	f107 021c 	add.w	r2, r7, #28
 8014dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dd4:	4413      	add	r3, r2
 8014dd6:	781b      	ldrb	r3, [r3, #0]
 8014dd8:	b25b      	sxtb	r3, r3
 8014dda:	005b      	lsls	r3, r3, #1
 8014ddc:	b25a      	sxtb	r2, r3
 8014dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014de0:	3301      	adds	r3, #1
 8014de2:	3348      	adds	r3, #72	@ 0x48
 8014de4:	443b      	add	r3, r7
 8014de6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8014dea:	09db      	lsrs	r3, r3, #7
 8014dec:	b2db      	uxtb	r3, r3
 8014dee:	b25b      	sxtb	r3, r3
 8014df0:	4313      	orrs	r3, r2
 8014df2:	b25b      	sxtb	r3, r3
 8014df4:	b2d9      	uxtb	r1, r3
 8014df6:	f107 021c 	add.w	r2, r7, #28
 8014dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014dfc:	4413      	add	r3, r2
 8014dfe:	460a      	mov	r2, r1
 8014e00:	701a      	strb	r2, [r3, #0]
 8014e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e04:	3301      	adds	r3, #1
 8014e06:	643b      	str	r3, [r7, #64]	@ 0x40
 8014e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e0a:	2b0e      	cmp	r3, #14
 8014e0c:	dddf      	ble.n	8014dce <AES_CMAC_Final+0x9a>
 8014e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014e12:	005b      	lsls	r3, r3, #1
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014e20:	2b10      	cmp	r3, #16
 8014e22:	d11d      	bne.n	8014e60 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8014e24:	2300      	movs	r3, #0
 8014e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e28:	e016      	b.n	8014e58 <AES_CMAC_Final+0x124>
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e2e:	4413      	add	r3, r2
 8014e30:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8014e34:	781a      	ldrb	r2, [r3, #0]
 8014e36:	f107 011c 	add.w	r1, r7, #28
 8014e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e3c:	440b      	add	r3, r1
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	4053      	eors	r3, r2
 8014e42:	b2d9      	uxtb	r1, r3
 8014e44:	683a      	ldr	r2, [r7, #0]
 8014e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e48:	4413      	add	r3, r2
 8014e4a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8014e4e:	460a      	mov	r2, r1
 8014e50:	701a      	strb	r2, [r3, #0]
 8014e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e54:	3301      	adds	r3, #1
 8014e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e5a:	2b0f      	cmp	r3, #15
 8014e5c:	dde5      	ble.n	8014e2a <AES_CMAC_Final+0xf6>
 8014e5e:	e098      	b.n	8014f92 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8014e60:	7f3b      	ldrb	r3, [r7, #28]
 8014e62:	b25b      	sxtb	r3, r3
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	da31      	bge.n	8014ecc <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 8014e68:	2300      	movs	r3, #0
 8014e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014e6c:	e01c      	b.n	8014ea8 <AES_CMAC_Final+0x174>
 8014e6e:	f107 021c 	add.w	r2, r7, #28
 8014e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e74:	4413      	add	r3, r2
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	b25b      	sxtb	r3, r3
 8014e7a:	005b      	lsls	r3, r3, #1
 8014e7c:	b25a      	sxtb	r2, r3
 8014e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e80:	3301      	adds	r3, #1
 8014e82:	3348      	adds	r3, #72	@ 0x48
 8014e84:	443b      	add	r3, r7
 8014e86:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8014e8a:	09db      	lsrs	r3, r3, #7
 8014e8c:	b2db      	uxtb	r3, r3
 8014e8e:	b25b      	sxtb	r3, r3
 8014e90:	4313      	orrs	r3, r2
 8014e92:	b25b      	sxtb	r3, r3
 8014e94:	b2d9      	uxtb	r1, r3
 8014e96:	f107 021c 	add.w	r2, r7, #28
 8014e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e9c:	4413      	add	r3, r2
 8014e9e:	460a      	mov	r2, r1
 8014ea0:	701a      	strb	r2, [r3, #0]
 8014ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ea4:	3301      	adds	r3, #1
 8014ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eaa:	2b0e      	cmp	r3, #14
 8014eac:	dddf      	ble.n	8014e6e <AES_CMAC_Final+0x13a>
 8014eae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014eb2:	005b      	lsls	r3, r3, #1
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 8014eba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014ebe:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 8014ec2:	43db      	mvns	r3, r3
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8014eca:	e028      	b.n	8014f1e <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 8014ecc:	2300      	movs	r3, #0
 8014ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8014ed0:	e01c      	b.n	8014f0c <AES_CMAC_Final+0x1d8>
 8014ed2:	f107 021c 	add.w	r2, r7, #28
 8014ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ed8:	4413      	add	r3, r2
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	b25b      	sxtb	r3, r3
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	b25a      	sxtb	r2, r3
 8014ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ee4:	3301      	adds	r3, #1
 8014ee6:	3348      	adds	r3, #72	@ 0x48
 8014ee8:	443b      	add	r3, r7
 8014eea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8014eee:	09db      	lsrs	r3, r3, #7
 8014ef0:	b2db      	uxtb	r3, r3
 8014ef2:	b25b      	sxtb	r3, r3
 8014ef4:	4313      	orrs	r3, r2
 8014ef6:	b25b      	sxtb	r3, r3
 8014ef8:	b2d9      	uxtb	r1, r3
 8014efa:	f107 021c 	add.w	r2, r7, #28
 8014efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f00:	4413      	add	r3, r2
 8014f02:	460a      	mov	r2, r1
 8014f04:	701a      	strb	r2, [r3, #0]
 8014f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f08:	3301      	adds	r3, #1
 8014f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f0e:	2b0e      	cmp	r3, #14
 8014f10:	dddf      	ble.n	8014ed2 <AES_CMAC_Final+0x19e>
 8014f12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014f16:	005b      	lsls	r3, r3, #1
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014f24:	683a      	ldr	r2, [r7, #0]
 8014f26:	4413      	add	r3, r2
 8014f28:	2280      	movs	r2, #128	@ 0x80
 8014f2a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 8014f2e:	e007      	b.n	8014f40 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014f36:	683a      	ldr	r2, [r7, #0]
 8014f38:	4413      	add	r3, r2
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014f46:	1c5a      	adds	r2, r3, #1
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8014f54:	2b0f      	cmp	r3, #15
 8014f56:	d9eb      	bls.n	8014f30 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 8014f58:	2300      	movs	r3, #0
 8014f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f5c:	e016      	b.n	8014f8c <AES_CMAC_Final+0x258>
 8014f5e:	683a      	ldr	r2, [r7, #0]
 8014f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f62:	4413      	add	r3, r2
 8014f64:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8014f68:	781a      	ldrb	r2, [r3, #0]
 8014f6a:	f107 011c 	add.w	r1, r7, #28
 8014f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f70:	440b      	add	r3, r1
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	4053      	eors	r3, r2
 8014f76:	b2d9      	uxtb	r1, r3
 8014f78:	683a      	ldr	r2, [r7, #0]
 8014f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f7c:	4413      	add	r3, r2
 8014f7e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8014f82:	460a      	mov	r2, r1
 8014f84:	701a      	strb	r2, [r3, #0]
 8014f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f88:	3301      	adds	r3, #1
 8014f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f8e:	2b0f      	cmp	r3, #15
 8014f90:	dde5      	ble.n	8014f5e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 8014f92:	2300      	movs	r3, #0
 8014f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014f96:	e015      	b.n	8014fc4 <AES_CMAC_Final+0x290>
 8014f98:	683a      	ldr	r2, [r7, #0]
 8014f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f9c:	4413      	add	r3, r2
 8014f9e:	33f1      	adds	r3, #241	@ 0xf1
 8014fa0:	781a      	ldrb	r2, [r3, #0]
 8014fa2:	6839      	ldr	r1, [r7, #0]
 8014fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fa6:	440b      	add	r3, r1
 8014fa8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8014fac:	781b      	ldrb	r3, [r3, #0]
 8014fae:	4053      	eors	r3, r2
 8014fb0:	b2d9      	uxtb	r1, r3
 8014fb2:	683a      	ldr	r2, [r7, #0]
 8014fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb6:	4413      	add	r3, r2
 8014fb8:	33f1      	adds	r3, #241	@ 0xf1
 8014fba:	460a      	mov	r2, r1
 8014fbc:	701a      	strb	r2, [r3, #0]
 8014fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc6:	2b0f      	cmp	r3, #15
 8014fc8:	dde6      	ble.n	8014f98 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8014fd0:	f107 030c 	add.w	r3, r7, #12
 8014fd4:	2210      	movs	r2, #16
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f001 faab 	bl	8016532 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8014fdc:	683a      	ldr	r2, [r7, #0]
 8014fde:	f107 030c 	add.w	r3, r7, #12
 8014fe2:	6879      	ldr	r1, [r7, #4]
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f000 fd1d 	bl	8015a24 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8014fea:	f107 031c 	add.w	r3, r7, #28
 8014fee:	2210      	movs	r2, #16
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f001 fad8 	bl	80165a8 <memset1>
}
 8014ff8:	bf00      	nop
 8014ffa:	3748      	adds	r7, #72	@ 0x48
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8015000:	b480      	push	{r7}
 8015002:	b083      	sub	sp, #12
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	781a      	ldrb	r2, [r3, #0]
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	3301      	adds	r3, #1
 8015016:	683a      	ldr	r2, [r7, #0]
 8015018:	7852      	ldrb	r2, [r2, #1]
 801501a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	3302      	adds	r3, #2
 8015020:	683a      	ldr	r2, [r7, #0]
 8015022:	7892      	ldrb	r2, [r2, #2]
 8015024:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	3303      	adds	r3, #3
 801502a:	683a      	ldr	r2, [r7, #0]
 801502c:	78d2      	ldrb	r2, [r2, #3]
 801502e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	3304      	adds	r3, #4
 8015034:	683a      	ldr	r2, [r7, #0]
 8015036:	7912      	ldrb	r2, [r2, #4]
 8015038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	3305      	adds	r3, #5
 801503e:	683a      	ldr	r2, [r7, #0]
 8015040:	7952      	ldrb	r2, [r2, #5]
 8015042:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	3306      	adds	r3, #6
 8015048:	683a      	ldr	r2, [r7, #0]
 801504a:	7992      	ldrb	r2, [r2, #6]
 801504c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	3307      	adds	r3, #7
 8015052:	683a      	ldr	r2, [r7, #0]
 8015054:	79d2      	ldrb	r2, [r2, #7]
 8015056:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	3308      	adds	r3, #8
 801505c:	683a      	ldr	r2, [r7, #0]
 801505e:	7a12      	ldrb	r2, [r2, #8]
 8015060:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	3309      	adds	r3, #9
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	7a52      	ldrb	r2, [r2, #9]
 801506a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	330a      	adds	r3, #10
 8015070:	683a      	ldr	r2, [r7, #0]
 8015072:	7a92      	ldrb	r2, [r2, #10]
 8015074:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	330b      	adds	r3, #11
 801507a:	683a      	ldr	r2, [r7, #0]
 801507c:	7ad2      	ldrb	r2, [r2, #11]
 801507e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	330c      	adds	r3, #12
 8015084:	683a      	ldr	r2, [r7, #0]
 8015086:	7b12      	ldrb	r2, [r2, #12]
 8015088:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	330d      	adds	r3, #13
 801508e:	683a      	ldr	r2, [r7, #0]
 8015090:	7b52      	ldrb	r2, [r2, #13]
 8015092:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	330e      	adds	r3, #14
 8015098:	683a      	ldr	r2, [r7, #0]
 801509a:	7b92      	ldrb	r2, [r2, #14]
 801509c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	330f      	adds	r3, #15
 80150a2:	683a      	ldr	r2, [r7, #0]
 80150a4:	7bd2      	ldrb	r2, [r2, #15]
 80150a6:	701a      	strb	r2, [r3, #0]
#endif
}
 80150a8:	bf00      	nop
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bc80      	pop	{r7}
 80150b0:	4770      	bx	lr

080150b2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 80150b2:	b480      	push	{r7}
 80150b4:	b085      	sub	sp, #20
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	60f8      	str	r0, [r7, #12]
 80150ba:	60b9      	str	r1, [r7, #8]
 80150bc:	4613      	mov	r3, r2
 80150be:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 80150c0:	e007      	b.n	80150d2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80150c2:	68ba      	ldr	r2, [r7, #8]
 80150c4:	1c53      	adds	r3, r2, #1
 80150c6:	60bb      	str	r3, [r7, #8]
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	1c59      	adds	r1, r3, #1
 80150cc:	60f9      	str	r1, [r7, #12]
 80150ce:	7812      	ldrb	r2, [r2, #0]
 80150d0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 80150d2:	79fb      	ldrb	r3, [r7, #7]
 80150d4:	1e5a      	subs	r2, r3, #1
 80150d6:	71fa      	strb	r2, [r7, #7]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d1f2      	bne.n	80150c2 <copy_block_nn+0x10>
}
 80150dc:	bf00      	nop
 80150de:	bf00      	nop
 80150e0:	3714      	adds	r7, #20
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bc80      	pop	{r7}
 80150e6:	4770      	bx	lr

080150e8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	781a      	ldrb	r2, [r3, #0]
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	4053      	eors	r3, r2
 80150fc:	b2da      	uxtb	r2, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	3301      	adds	r3, #1
 8015106:	7819      	ldrb	r1, [r3, #0]
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	3301      	adds	r3, #1
 801510c:	781a      	ldrb	r2, [r3, #0]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	3301      	adds	r3, #1
 8015112:	404a      	eors	r2, r1
 8015114:	b2d2      	uxtb	r2, r2
 8015116:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	3302      	adds	r3, #2
 801511c:	7819      	ldrb	r1, [r3, #0]
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	3302      	adds	r3, #2
 8015122:	781a      	ldrb	r2, [r3, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	3302      	adds	r3, #2
 8015128:	404a      	eors	r2, r1
 801512a:	b2d2      	uxtb	r2, r2
 801512c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	3303      	adds	r3, #3
 8015132:	7819      	ldrb	r1, [r3, #0]
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	3303      	adds	r3, #3
 8015138:	781a      	ldrb	r2, [r3, #0]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	3303      	adds	r3, #3
 801513e:	404a      	eors	r2, r1
 8015140:	b2d2      	uxtb	r2, r2
 8015142:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	3304      	adds	r3, #4
 8015148:	7819      	ldrb	r1, [r3, #0]
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	3304      	adds	r3, #4
 801514e:	781a      	ldrb	r2, [r3, #0]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	3304      	adds	r3, #4
 8015154:	404a      	eors	r2, r1
 8015156:	b2d2      	uxtb	r2, r2
 8015158:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	3305      	adds	r3, #5
 801515e:	7819      	ldrb	r1, [r3, #0]
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	3305      	adds	r3, #5
 8015164:	781a      	ldrb	r2, [r3, #0]
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	3305      	adds	r3, #5
 801516a:	404a      	eors	r2, r1
 801516c:	b2d2      	uxtb	r2, r2
 801516e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	3306      	adds	r3, #6
 8015174:	7819      	ldrb	r1, [r3, #0]
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	3306      	adds	r3, #6
 801517a:	781a      	ldrb	r2, [r3, #0]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	3306      	adds	r3, #6
 8015180:	404a      	eors	r2, r1
 8015182:	b2d2      	uxtb	r2, r2
 8015184:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	3307      	adds	r3, #7
 801518a:	7819      	ldrb	r1, [r3, #0]
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	3307      	adds	r3, #7
 8015190:	781a      	ldrb	r2, [r3, #0]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	3307      	adds	r3, #7
 8015196:	404a      	eors	r2, r1
 8015198:	b2d2      	uxtb	r2, r2
 801519a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	3308      	adds	r3, #8
 80151a0:	7819      	ldrb	r1, [r3, #0]
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	3308      	adds	r3, #8
 80151a6:	781a      	ldrb	r2, [r3, #0]
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	3308      	adds	r3, #8
 80151ac:	404a      	eors	r2, r1
 80151ae:	b2d2      	uxtb	r2, r2
 80151b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	3309      	adds	r3, #9
 80151b6:	7819      	ldrb	r1, [r3, #0]
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	3309      	adds	r3, #9
 80151bc:	781a      	ldrb	r2, [r3, #0]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	3309      	adds	r3, #9
 80151c2:	404a      	eors	r2, r1
 80151c4:	b2d2      	uxtb	r2, r2
 80151c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	330a      	adds	r3, #10
 80151cc:	7819      	ldrb	r1, [r3, #0]
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	330a      	adds	r3, #10
 80151d2:	781a      	ldrb	r2, [r3, #0]
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	330a      	adds	r3, #10
 80151d8:	404a      	eors	r2, r1
 80151da:	b2d2      	uxtb	r2, r2
 80151dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	330b      	adds	r3, #11
 80151e2:	7819      	ldrb	r1, [r3, #0]
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	330b      	adds	r3, #11
 80151e8:	781a      	ldrb	r2, [r3, #0]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	330b      	adds	r3, #11
 80151ee:	404a      	eors	r2, r1
 80151f0:	b2d2      	uxtb	r2, r2
 80151f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	330c      	adds	r3, #12
 80151f8:	7819      	ldrb	r1, [r3, #0]
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	330c      	adds	r3, #12
 80151fe:	781a      	ldrb	r2, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	330c      	adds	r3, #12
 8015204:	404a      	eors	r2, r1
 8015206:	b2d2      	uxtb	r2, r2
 8015208:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	330d      	adds	r3, #13
 801520e:	7819      	ldrb	r1, [r3, #0]
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	330d      	adds	r3, #13
 8015214:	781a      	ldrb	r2, [r3, #0]
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	330d      	adds	r3, #13
 801521a:	404a      	eors	r2, r1
 801521c:	b2d2      	uxtb	r2, r2
 801521e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	330e      	adds	r3, #14
 8015224:	7819      	ldrb	r1, [r3, #0]
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	330e      	adds	r3, #14
 801522a:	781a      	ldrb	r2, [r3, #0]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	330e      	adds	r3, #14
 8015230:	404a      	eors	r2, r1
 8015232:	b2d2      	uxtb	r2, r2
 8015234:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	330f      	adds	r3, #15
 801523a:	7819      	ldrb	r1, [r3, #0]
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	330f      	adds	r3, #15
 8015240:	781a      	ldrb	r2, [r3, #0]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	330f      	adds	r3, #15
 8015246:	404a      	eors	r2, r1
 8015248:	b2d2      	uxtb	r2, r2
 801524a:	701a      	strb	r2, [r3, #0]
#endif
}
 801524c:	bf00      	nop
 801524e:	370c      	adds	r7, #12
 8015250:	46bd      	mov	sp, r7
 8015252:	bc80      	pop	{r7}
 8015254:	4770      	bx	lr

08015256 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8015256:	b480      	push	{r7}
 8015258:	b085      	sub	sp, #20
 801525a:	af00      	add	r7, sp, #0
 801525c:	60f8      	str	r0, [r7, #12]
 801525e:	60b9      	str	r1, [r7, #8]
 8015260:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	781a      	ldrb	r2, [r3, #0]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	4053      	eors	r3, r2
 801526c:	b2da      	uxtb	r2, r3
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	3301      	adds	r3, #1
 8015276:	7819      	ldrb	r1, [r3, #0]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	3301      	adds	r3, #1
 801527c:	781a      	ldrb	r2, [r3, #0]
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	3301      	adds	r3, #1
 8015282:	404a      	eors	r2, r1
 8015284:	b2d2      	uxtb	r2, r2
 8015286:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	3302      	adds	r3, #2
 801528c:	7819      	ldrb	r1, [r3, #0]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	3302      	adds	r3, #2
 8015292:	781a      	ldrb	r2, [r3, #0]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	3302      	adds	r3, #2
 8015298:	404a      	eors	r2, r1
 801529a:	b2d2      	uxtb	r2, r2
 801529c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	3303      	adds	r3, #3
 80152a2:	7819      	ldrb	r1, [r3, #0]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	3303      	adds	r3, #3
 80152a8:	781a      	ldrb	r2, [r3, #0]
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	3303      	adds	r3, #3
 80152ae:	404a      	eors	r2, r1
 80152b0:	b2d2      	uxtb	r2, r2
 80152b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	3304      	adds	r3, #4
 80152b8:	7819      	ldrb	r1, [r3, #0]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	3304      	adds	r3, #4
 80152be:	781a      	ldrb	r2, [r3, #0]
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	3304      	adds	r3, #4
 80152c4:	404a      	eors	r2, r1
 80152c6:	b2d2      	uxtb	r2, r2
 80152c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	3305      	adds	r3, #5
 80152ce:	7819      	ldrb	r1, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	3305      	adds	r3, #5
 80152d4:	781a      	ldrb	r2, [r3, #0]
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	3305      	adds	r3, #5
 80152da:	404a      	eors	r2, r1
 80152dc:	b2d2      	uxtb	r2, r2
 80152de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	3306      	adds	r3, #6
 80152e4:	7819      	ldrb	r1, [r3, #0]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	3306      	adds	r3, #6
 80152ea:	781a      	ldrb	r2, [r3, #0]
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	3306      	adds	r3, #6
 80152f0:	404a      	eors	r2, r1
 80152f2:	b2d2      	uxtb	r2, r2
 80152f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	3307      	adds	r3, #7
 80152fa:	7819      	ldrb	r1, [r3, #0]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	3307      	adds	r3, #7
 8015300:	781a      	ldrb	r2, [r3, #0]
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	3307      	adds	r3, #7
 8015306:	404a      	eors	r2, r1
 8015308:	b2d2      	uxtb	r2, r2
 801530a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	3308      	adds	r3, #8
 8015310:	7819      	ldrb	r1, [r3, #0]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	3308      	adds	r3, #8
 8015316:	781a      	ldrb	r2, [r3, #0]
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	3308      	adds	r3, #8
 801531c:	404a      	eors	r2, r1
 801531e:	b2d2      	uxtb	r2, r2
 8015320:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	3309      	adds	r3, #9
 8015326:	7819      	ldrb	r1, [r3, #0]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	3309      	adds	r3, #9
 801532c:	781a      	ldrb	r2, [r3, #0]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	3309      	adds	r3, #9
 8015332:	404a      	eors	r2, r1
 8015334:	b2d2      	uxtb	r2, r2
 8015336:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	330a      	adds	r3, #10
 801533c:	7819      	ldrb	r1, [r3, #0]
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	330a      	adds	r3, #10
 8015342:	781a      	ldrb	r2, [r3, #0]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	330a      	adds	r3, #10
 8015348:	404a      	eors	r2, r1
 801534a:	b2d2      	uxtb	r2, r2
 801534c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	330b      	adds	r3, #11
 8015352:	7819      	ldrb	r1, [r3, #0]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	330b      	adds	r3, #11
 8015358:	781a      	ldrb	r2, [r3, #0]
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	330b      	adds	r3, #11
 801535e:	404a      	eors	r2, r1
 8015360:	b2d2      	uxtb	r2, r2
 8015362:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	330c      	adds	r3, #12
 8015368:	7819      	ldrb	r1, [r3, #0]
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	330c      	adds	r3, #12
 801536e:	781a      	ldrb	r2, [r3, #0]
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	330c      	adds	r3, #12
 8015374:	404a      	eors	r2, r1
 8015376:	b2d2      	uxtb	r2, r2
 8015378:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	330d      	adds	r3, #13
 801537e:	7819      	ldrb	r1, [r3, #0]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	330d      	adds	r3, #13
 8015384:	781a      	ldrb	r2, [r3, #0]
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	330d      	adds	r3, #13
 801538a:	404a      	eors	r2, r1
 801538c:	b2d2      	uxtb	r2, r2
 801538e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	330e      	adds	r3, #14
 8015394:	7819      	ldrb	r1, [r3, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	330e      	adds	r3, #14
 801539a:	781a      	ldrb	r2, [r3, #0]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	330e      	adds	r3, #14
 80153a0:	404a      	eors	r2, r1
 80153a2:	b2d2      	uxtb	r2, r2
 80153a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	330f      	adds	r3, #15
 80153aa:	7819      	ldrb	r1, [r3, #0]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	330f      	adds	r3, #15
 80153b0:	781a      	ldrb	r2, [r3, #0]
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	330f      	adds	r3, #15
 80153b6:	404a      	eors	r2, r1
 80153b8:	b2d2      	uxtb	r2, r2
 80153ba:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80153bc:	bf00      	nop
 80153be:	3714      	adds	r7, #20
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bc80      	pop	{r7}
 80153c4:	4770      	bx	lr

080153c6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
 80153ce:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 80153d0:	6839      	ldr	r1, [r7, #0]
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f7ff fe88 	bl	80150e8 <xor_block>
}
 80153d8:	bf00      	nop
 80153da:	3708      	adds	r7, #8
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}

080153e0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 80153e0:	b480      	push	{r7}
 80153e2:	b085      	sub	sp, #20
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	781b      	ldrb	r3, [r3, #0]
 80153ec:	461a      	mov	r2, r3
 80153ee:	4b48      	ldr	r3, [pc, #288]	@ (8015510 <shift_sub_rows+0x130>)
 80153f0:	5c9a      	ldrb	r2, [r3, r2]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	701a      	strb	r2, [r3, #0]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	3304      	adds	r3, #4
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	4619      	mov	r1, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	3304      	adds	r3, #4
 8015402:	4a43      	ldr	r2, [pc, #268]	@ (8015510 <shift_sub_rows+0x130>)
 8015404:	5c52      	ldrb	r2, [r2, r1]
 8015406:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	3308      	adds	r3, #8
 801540c:	781b      	ldrb	r3, [r3, #0]
 801540e:	4619      	mov	r1, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	3308      	adds	r3, #8
 8015414:	4a3e      	ldr	r2, [pc, #248]	@ (8015510 <shift_sub_rows+0x130>)
 8015416:	5c52      	ldrb	r2, [r2, r1]
 8015418:	701a      	strb	r2, [r3, #0]
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	330c      	adds	r3, #12
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	4619      	mov	r1, r3
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	330c      	adds	r3, #12
 8015426:	4a3a      	ldr	r2, [pc, #232]	@ (8015510 <shift_sub_rows+0x130>)
 8015428:	5c52      	ldrb	r2, [r2, r1]
 801542a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	785b      	ldrb	r3, [r3, #1]
 8015430:	73fb      	strb	r3, [r7, #15]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	3305      	adds	r3, #5
 8015436:	781b      	ldrb	r3, [r3, #0]
 8015438:	4619      	mov	r1, r3
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	3301      	adds	r3, #1
 801543e:	4a34      	ldr	r2, [pc, #208]	@ (8015510 <shift_sub_rows+0x130>)
 8015440:	5c52      	ldrb	r2, [r2, r1]
 8015442:	701a      	strb	r2, [r3, #0]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	3309      	adds	r3, #9
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	4619      	mov	r1, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	3305      	adds	r3, #5
 8015450:	4a2f      	ldr	r2, [pc, #188]	@ (8015510 <shift_sub_rows+0x130>)
 8015452:	5c52      	ldrb	r2, [r2, r1]
 8015454:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	330d      	adds	r3, #13
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	4619      	mov	r1, r3
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	3309      	adds	r3, #9
 8015462:	4a2b      	ldr	r2, [pc, #172]	@ (8015510 <shift_sub_rows+0x130>)
 8015464:	5c52      	ldrb	r2, [r2, r1]
 8015466:	701a      	strb	r2, [r3, #0]
 8015468:	7bfa      	ldrb	r2, [r7, #15]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	330d      	adds	r3, #13
 801546e:	4928      	ldr	r1, [pc, #160]	@ (8015510 <shift_sub_rows+0x130>)
 8015470:	5c8a      	ldrb	r2, [r1, r2]
 8015472:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	789b      	ldrb	r3, [r3, #2]
 8015478:	73fb      	strb	r3, [r7, #15]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	330a      	adds	r3, #10
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	4619      	mov	r1, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	3302      	adds	r3, #2
 8015486:	4a22      	ldr	r2, [pc, #136]	@ (8015510 <shift_sub_rows+0x130>)
 8015488:	5c52      	ldrb	r2, [r2, r1]
 801548a:	701a      	strb	r2, [r3, #0]
 801548c:	7bfa      	ldrb	r2, [r7, #15]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	330a      	adds	r3, #10
 8015492:	491f      	ldr	r1, [pc, #124]	@ (8015510 <shift_sub_rows+0x130>)
 8015494:	5c8a      	ldrb	r2, [r1, r2]
 8015496:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	799b      	ldrb	r3, [r3, #6]
 801549c:	73fb      	strb	r3, [r7, #15]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	330e      	adds	r3, #14
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	4619      	mov	r1, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	3306      	adds	r3, #6
 80154aa:	4a19      	ldr	r2, [pc, #100]	@ (8015510 <shift_sub_rows+0x130>)
 80154ac:	5c52      	ldrb	r2, [r2, r1]
 80154ae:	701a      	strb	r2, [r3, #0]
 80154b0:	7bfa      	ldrb	r2, [r7, #15]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	330e      	adds	r3, #14
 80154b6:	4916      	ldr	r1, [pc, #88]	@ (8015510 <shift_sub_rows+0x130>)
 80154b8:	5c8a      	ldrb	r2, [r1, r2]
 80154ba:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	7bdb      	ldrb	r3, [r3, #15]
 80154c0:	73fb      	strb	r3, [r7, #15]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	330b      	adds	r3, #11
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	4619      	mov	r1, r3
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	330f      	adds	r3, #15
 80154ce:	4a10      	ldr	r2, [pc, #64]	@ (8015510 <shift_sub_rows+0x130>)
 80154d0:	5c52      	ldrb	r2, [r2, r1]
 80154d2:	701a      	strb	r2, [r3, #0]
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	3307      	adds	r3, #7
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	4619      	mov	r1, r3
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	330b      	adds	r3, #11
 80154e0:	4a0b      	ldr	r2, [pc, #44]	@ (8015510 <shift_sub_rows+0x130>)
 80154e2:	5c52      	ldrb	r2, [r2, r1]
 80154e4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	3303      	adds	r3, #3
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	4619      	mov	r1, r3
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	3307      	adds	r3, #7
 80154f2:	4a07      	ldr	r2, [pc, #28]	@ (8015510 <shift_sub_rows+0x130>)
 80154f4:	5c52      	ldrb	r2, [r2, r1]
 80154f6:	701a      	strb	r2, [r3, #0]
 80154f8:	7bfa      	ldrb	r2, [r7, #15]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	3303      	adds	r3, #3
 80154fe:	4904      	ldr	r1, [pc, #16]	@ (8015510 <shift_sub_rows+0x130>)
 8015500:	5c8a      	ldrb	r2, [r1, r2]
 8015502:	701a      	strb	r2, [r3, #0]
}
 8015504:	bf00      	nop
 8015506:	3714      	adds	r7, #20
 8015508:	46bd      	mov	sp, r7
 801550a:	bc80      	pop	{r7}
 801550c:	4770      	bx	lr
 801550e:	bf00      	nop
 8015510:	08020828 	.word	0x08020828

08015514 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8015514:	b580      	push	{r7, lr}
 8015516:	b086      	sub	sp, #24
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 801551c:	f107 0308 	add.w	r3, r7, #8
 8015520:	6879      	ldr	r1, [r7, #4]
 8015522:	4618      	mov	r0, r3
 8015524:	f7ff fd6c 	bl	8015000 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8015528:	7a3b      	ldrb	r3, [r7, #8]
 801552a:	461a      	mov	r2, r3
 801552c:	4b9a      	ldr	r3, [pc, #616]	@ (8015798 <mix_sub_columns+0x284>)
 801552e:	5c9a      	ldrb	r2, [r3, r2]
 8015530:	7b7b      	ldrb	r3, [r7, #13]
 8015532:	4619      	mov	r1, r3
 8015534:	4b99      	ldr	r3, [pc, #612]	@ (801579c <mix_sub_columns+0x288>)
 8015536:	5c5b      	ldrb	r3, [r3, r1]
 8015538:	4053      	eors	r3, r2
 801553a:	b2da      	uxtb	r2, r3
 801553c:	7cbb      	ldrb	r3, [r7, #18]
 801553e:	4619      	mov	r1, r3
 8015540:	4b97      	ldr	r3, [pc, #604]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015542:	5c5b      	ldrb	r3, [r3, r1]
 8015544:	4053      	eors	r3, r2
 8015546:	b2da      	uxtb	r2, r3
 8015548:	7dfb      	ldrb	r3, [r7, #23]
 801554a:	4619      	mov	r1, r3
 801554c:	4b94      	ldr	r3, [pc, #592]	@ (80157a0 <mix_sub_columns+0x28c>)
 801554e:	5c5b      	ldrb	r3, [r3, r1]
 8015550:	4053      	eors	r3, r2
 8015552:	b2da      	uxtb	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8015558:	7a3b      	ldrb	r3, [r7, #8]
 801555a:	461a      	mov	r2, r3
 801555c:	4b90      	ldr	r3, [pc, #576]	@ (80157a0 <mix_sub_columns+0x28c>)
 801555e:	5c9a      	ldrb	r2, [r3, r2]
 8015560:	7b7b      	ldrb	r3, [r7, #13]
 8015562:	4619      	mov	r1, r3
 8015564:	4b8c      	ldr	r3, [pc, #560]	@ (8015798 <mix_sub_columns+0x284>)
 8015566:	5c5b      	ldrb	r3, [r3, r1]
 8015568:	4053      	eors	r3, r2
 801556a:	b2da      	uxtb	r2, r3
 801556c:	7cbb      	ldrb	r3, [r7, #18]
 801556e:	4619      	mov	r1, r3
 8015570:	4b8a      	ldr	r3, [pc, #552]	@ (801579c <mix_sub_columns+0x288>)
 8015572:	5c5b      	ldrb	r3, [r3, r1]
 8015574:	4053      	eors	r3, r2
 8015576:	b2d9      	uxtb	r1, r3
 8015578:	7dfb      	ldrb	r3, [r7, #23]
 801557a:	461a      	mov	r2, r3
 801557c:	4b88      	ldr	r3, [pc, #544]	@ (80157a0 <mix_sub_columns+0x28c>)
 801557e:	5c9a      	ldrb	r2, [r3, r2]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	3301      	adds	r3, #1
 8015584:	404a      	eors	r2, r1
 8015586:	b2d2      	uxtb	r2, r2
 8015588:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801558a:	7a3b      	ldrb	r3, [r7, #8]
 801558c:	461a      	mov	r2, r3
 801558e:	4b84      	ldr	r3, [pc, #528]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015590:	5c9a      	ldrb	r2, [r3, r2]
 8015592:	7b7b      	ldrb	r3, [r7, #13]
 8015594:	4619      	mov	r1, r3
 8015596:	4b82      	ldr	r3, [pc, #520]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015598:	5c5b      	ldrb	r3, [r3, r1]
 801559a:	4053      	eors	r3, r2
 801559c:	b2da      	uxtb	r2, r3
 801559e:	7cbb      	ldrb	r3, [r7, #18]
 80155a0:	4619      	mov	r1, r3
 80155a2:	4b7d      	ldr	r3, [pc, #500]	@ (8015798 <mix_sub_columns+0x284>)
 80155a4:	5c5b      	ldrb	r3, [r3, r1]
 80155a6:	4053      	eors	r3, r2
 80155a8:	b2d9      	uxtb	r1, r3
 80155aa:	7dfb      	ldrb	r3, [r7, #23]
 80155ac:	461a      	mov	r2, r3
 80155ae:	4b7b      	ldr	r3, [pc, #492]	@ (801579c <mix_sub_columns+0x288>)
 80155b0:	5c9a      	ldrb	r2, [r3, r2]
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	3302      	adds	r3, #2
 80155b6:	404a      	eors	r2, r1
 80155b8:	b2d2      	uxtb	r2, r2
 80155ba:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80155bc:	7a3b      	ldrb	r3, [r7, #8]
 80155be:	461a      	mov	r2, r3
 80155c0:	4b76      	ldr	r3, [pc, #472]	@ (801579c <mix_sub_columns+0x288>)
 80155c2:	5c9a      	ldrb	r2, [r3, r2]
 80155c4:	7b7b      	ldrb	r3, [r7, #13]
 80155c6:	4619      	mov	r1, r3
 80155c8:	4b75      	ldr	r3, [pc, #468]	@ (80157a0 <mix_sub_columns+0x28c>)
 80155ca:	5c5b      	ldrb	r3, [r3, r1]
 80155cc:	4053      	eors	r3, r2
 80155ce:	b2da      	uxtb	r2, r3
 80155d0:	7cbb      	ldrb	r3, [r7, #18]
 80155d2:	4619      	mov	r1, r3
 80155d4:	4b72      	ldr	r3, [pc, #456]	@ (80157a0 <mix_sub_columns+0x28c>)
 80155d6:	5c5b      	ldrb	r3, [r3, r1]
 80155d8:	4053      	eors	r3, r2
 80155da:	b2d9      	uxtb	r1, r3
 80155dc:	7dfb      	ldrb	r3, [r7, #23]
 80155de:	461a      	mov	r2, r3
 80155e0:	4b6d      	ldr	r3, [pc, #436]	@ (8015798 <mix_sub_columns+0x284>)
 80155e2:	5c9a      	ldrb	r2, [r3, r2]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	3303      	adds	r3, #3
 80155e8:	404a      	eors	r2, r1
 80155ea:	b2d2      	uxtb	r2, r2
 80155ec:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80155ee:	7b3b      	ldrb	r3, [r7, #12]
 80155f0:	461a      	mov	r2, r3
 80155f2:	4b69      	ldr	r3, [pc, #420]	@ (8015798 <mix_sub_columns+0x284>)
 80155f4:	5c9a      	ldrb	r2, [r3, r2]
 80155f6:	7c7b      	ldrb	r3, [r7, #17]
 80155f8:	4619      	mov	r1, r3
 80155fa:	4b68      	ldr	r3, [pc, #416]	@ (801579c <mix_sub_columns+0x288>)
 80155fc:	5c5b      	ldrb	r3, [r3, r1]
 80155fe:	4053      	eors	r3, r2
 8015600:	b2da      	uxtb	r2, r3
 8015602:	7dbb      	ldrb	r3, [r7, #22]
 8015604:	4619      	mov	r1, r3
 8015606:	4b66      	ldr	r3, [pc, #408]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015608:	5c5b      	ldrb	r3, [r3, r1]
 801560a:	4053      	eors	r3, r2
 801560c:	b2d9      	uxtb	r1, r3
 801560e:	7afb      	ldrb	r3, [r7, #11]
 8015610:	461a      	mov	r2, r3
 8015612:	4b63      	ldr	r3, [pc, #396]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015614:	5c9a      	ldrb	r2, [r3, r2]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	3304      	adds	r3, #4
 801561a:	404a      	eors	r2, r1
 801561c:	b2d2      	uxtb	r2, r2
 801561e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8015620:	7b3b      	ldrb	r3, [r7, #12]
 8015622:	461a      	mov	r2, r3
 8015624:	4b5e      	ldr	r3, [pc, #376]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015626:	5c9a      	ldrb	r2, [r3, r2]
 8015628:	7c7b      	ldrb	r3, [r7, #17]
 801562a:	4619      	mov	r1, r3
 801562c:	4b5a      	ldr	r3, [pc, #360]	@ (8015798 <mix_sub_columns+0x284>)
 801562e:	5c5b      	ldrb	r3, [r3, r1]
 8015630:	4053      	eors	r3, r2
 8015632:	b2da      	uxtb	r2, r3
 8015634:	7dbb      	ldrb	r3, [r7, #22]
 8015636:	4619      	mov	r1, r3
 8015638:	4b58      	ldr	r3, [pc, #352]	@ (801579c <mix_sub_columns+0x288>)
 801563a:	5c5b      	ldrb	r3, [r3, r1]
 801563c:	4053      	eors	r3, r2
 801563e:	b2d9      	uxtb	r1, r3
 8015640:	7afb      	ldrb	r3, [r7, #11]
 8015642:	461a      	mov	r2, r3
 8015644:	4b56      	ldr	r3, [pc, #344]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015646:	5c9a      	ldrb	r2, [r3, r2]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	3305      	adds	r3, #5
 801564c:	404a      	eors	r2, r1
 801564e:	b2d2      	uxtb	r2, r2
 8015650:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8015652:	7b3b      	ldrb	r3, [r7, #12]
 8015654:	461a      	mov	r2, r3
 8015656:	4b52      	ldr	r3, [pc, #328]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015658:	5c9a      	ldrb	r2, [r3, r2]
 801565a:	7c7b      	ldrb	r3, [r7, #17]
 801565c:	4619      	mov	r1, r3
 801565e:	4b50      	ldr	r3, [pc, #320]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015660:	5c5b      	ldrb	r3, [r3, r1]
 8015662:	4053      	eors	r3, r2
 8015664:	b2da      	uxtb	r2, r3
 8015666:	7dbb      	ldrb	r3, [r7, #22]
 8015668:	4619      	mov	r1, r3
 801566a:	4b4b      	ldr	r3, [pc, #300]	@ (8015798 <mix_sub_columns+0x284>)
 801566c:	5c5b      	ldrb	r3, [r3, r1]
 801566e:	4053      	eors	r3, r2
 8015670:	b2d9      	uxtb	r1, r3
 8015672:	7afb      	ldrb	r3, [r7, #11]
 8015674:	461a      	mov	r2, r3
 8015676:	4b49      	ldr	r3, [pc, #292]	@ (801579c <mix_sub_columns+0x288>)
 8015678:	5c9a      	ldrb	r2, [r3, r2]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	3306      	adds	r3, #6
 801567e:	404a      	eors	r2, r1
 8015680:	b2d2      	uxtb	r2, r2
 8015682:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8015684:	7b3b      	ldrb	r3, [r7, #12]
 8015686:	461a      	mov	r2, r3
 8015688:	4b44      	ldr	r3, [pc, #272]	@ (801579c <mix_sub_columns+0x288>)
 801568a:	5c9a      	ldrb	r2, [r3, r2]
 801568c:	7c7b      	ldrb	r3, [r7, #17]
 801568e:	4619      	mov	r1, r3
 8015690:	4b43      	ldr	r3, [pc, #268]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015692:	5c5b      	ldrb	r3, [r3, r1]
 8015694:	4053      	eors	r3, r2
 8015696:	b2da      	uxtb	r2, r3
 8015698:	7dbb      	ldrb	r3, [r7, #22]
 801569a:	4619      	mov	r1, r3
 801569c:	4b40      	ldr	r3, [pc, #256]	@ (80157a0 <mix_sub_columns+0x28c>)
 801569e:	5c5b      	ldrb	r3, [r3, r1]
 80156a0:	4053      	eors	r3, r2
 80156a2:	b2d9      	uxtb	r1, r3
 80156a4:	7afb      	ldrb	r3, [r7, #11]
 80156a6:	461a      	mov	r2, r3
 80156a8:	4b3b      	ldr	r3, [pc, #236]	@ (8015798 <mix_sub_columns+0x284>)
 80156aa:	5c9a      	ldrb	r2, [r3, r2]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	3307      	adds	r3, #7
 80156b0:	404a      	eors	r2, r1
 80156b2:	b2d2      	uxtb	r2, r2
 80156b4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80156b6:	7c3b      	ldrb	r3, [r7, #16]
 80156b8:	461a      	mov	r2, r3
 80156ba:	4b37      	ldr	r3, [pc, #220]	@ (8015798 <mix_sub_columns+0x284>)
 80156bc:	5c9a      	ldrb	r2, [r3, r2]
 80156be:	7d7b      	ldrb	r3, [r7, #21]
 80156c0:	4619      	mov	r1, r3
 80156c2:	4b36      	ldr	r3, [pc, #216]	@ (801579c <mix_sub_columns+0x288>)
 80156c4:	5c5b      	ldrb	r3, [r3, r1]
 80156c6:	4053      	eors	r3, r2
 80156c8:	b2da      	uxtb	r2, r3
 80156ca:	7abb      	ldrb	r3, [r7, #10]
 80156cc:	4619      	mov	r1, r3
 80156ce:	4b34      	ldr	r3, [pc, #208]	@ (80157a0 <mix_sub_columns+0x28c>)
 80156d0:	5c5b      	ldrb	r3, [r3, r1]
 80156d2:	4053      	eors	r3, r2
 80156d4:	b2d9      	uxtb	r1, r3
 80156d6:	7bfb      	ldrb	r3, [r7, #15]
 80156d8:	461a      	mov	r2, r3
 80156da:	4b31      	ldr	r3, [pc, #196]	@ (80157a0 <mix_sub_columns+0x28c>)
 80156dc:	5c9a      	ldrb	r2, [r3, r2]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	3308      	adds	r3, #8
 80156e2:	404a      	eors	r2, r1
 80156e4:	b2d2      	uxtb	r2, r2
 80156e6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80156e8:	7c3b      	ldrb	r3, [r7, #16]
 80156ea:	461a      	mov	r2, r3
 80156ec:	4b2c      	ldr	r3, [pc, #176]	@ (80157a0 <mix_sub_columns+0x28c>)
 80156ee:	5c9a      	ldrb	r2, [r3, r2]
 80156f0:	7d7b      	ldrb	r3, [r7, #21]
 80156f2:	4619      	mov	r1, r3
 80156f4:	4b28      	ldr	r3, [pc, #160]	@ (8015798 <mix_sub_columns+0x284>)
 80156f6:	5c5b      	ldrb	r3, [r3, r1]
 80156f8:	4053      	eors	r3, r2
 80156fa:	b2da      	uxtb	r2, r3
 80156fc:	7abb      	ldrb	r3, [r7, #10]
 80156fe:	4619      	mov	r1, r3
 8015700:	4b26      	ldr	r3, [pc, #152]	@ (801579c <mix_sub_columns+0x288>)
 8015702:	5c5b      	ldrb	r3, [r3, r1]
 8015704:	4053      	eors	r3, r2
 8015706:	b2d9      	uxtb	r1, r3
 8015708:	7bfb      	ldrb	r3, [r7, #15]
 801570a:	461a      	mov	r2, r3
 801570c:	4b24      	ldr	r3, [pc, #144]	@ (80157a0 <mix_sub_columns+0x28c>)
 801570e:	5c9a      	ldrb	r2, [r3, r2]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	3309      	adds	r3, #9
 8015714:	404a      	eors	r2, r1
 8015716:	b2d2      	uxtb	r2, r2
 8015718:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 801571a:	7c3b      	ldrb	r3, [r7, #16]
 801571c:	461a      	mov	r2, r3
 801571e:	4b20      	ldr	r3, [pc, #128]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015720:	5c9a      	ldrb	r2, [r3, r2]
 8015722:	7d7b      	ldrb	r3, [r7, #21]
 8015724:	4619      	mov	r1, r3
 8015726:	4b1e      	ldr	r3, [pc, #120]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015728:	5c5b      	ldrb	r3, [r3, r1]
 801572a:	4053      	eors	r3, r2
 801572c:	b2da      	uxtb	r2, r3
 801572e:	7abb      	ldrb	r3, [r7, #10]
 8015730:	4619      	mov	r1, r3
 8015732:	4b19      	ldr	r3, [pc, #100]	@ (8015798 <mix_sub_columns+0x284>)
 8015734:	5c5b      	ldrb	r3, [r3, r1]
 8015736:	4053      	eors	r3, r2
 8015738:	b2d9      	uxtb	r1, r3
 801573a:	7bfb      	ldrb	r3, [r7, #15]
 801573c:	461a      	mov	r2, r3
 801573e:	4b17      	ldr	r3, [pc, #92]	@ (801579c <mix_sub_columns+0x288>)
 8015740:	5c9a      	ldrb	r2, [r3, r2]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	330a      	adds	r3, #10
 8015746:	404a      	eors	r2, r1
 8015748:	b2d2      	uxtb	r2, r2
 801574a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801574c:	7c3b      	ldrb	r3, [r7, #16]
 801574e:	461a      	mov	r2, r3
 8015750:	4b12      	ldr	r3, [pc, #72]	@ (801579c <mix_sub_columns+0x288>)
 8015752:	5c9a      	ldrb	r2, [r3, r2]
 8015754:	7d7b      	ldrb	r3, [r7, #21]
 8015756:	4619      	mov	r1, r3
 8015758:	4b11      	ldr	r3, [pc, #68]	@ (80157a0 <mix_sub_columns+0x28c>)
 801575a:	5c5b      	ldrb	r3, [r3, r1]
 801575c:	4053      	eors	r3, r2
 801575e:	b2da      	uxtb	r2, r3
 8015760:	7abb      	ldrb	r3, [r7, #10]
 8015762:	4619      	mov	r1, r3
 8015764:	4b0e      	ldr	r3, [pc, #56]	@ (80157a0 <mix_sub_columns+0x28c>)
 8015766:	5c5b      	ldrb	r3, [r3, r1]
 8015768:	4053      	eors	r3, r2
 801576a:	b2d9      	uxtb	r1, r3
 801576c:	7bfb      	ldrb	r3, [r7, #15]
 801576e:	461a      	mov	r2, r3
 8015770:	4b09      	ldr	r3, [pc, #36]	@ (8015798 <mix_sub_columns+0x284>)
 8015772:	5c9a      	ldrb	r2, [r3, r2]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	330b      	adds	r3, #11
 8015778:	404a      	eors	r2, r1
 801577a:	b2d2      	uxtb	r2, r2
 801577c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 801577e:	7d3b      	ldrb	r3, [r7, #20]
 8015780:	461a      	mov	r2, r3
 8015782:	4b05      	ldr	r3, [pc, #20]	@ (8015798 <mix_sub_columns+0x284>)
 8015784:	5c9a      	ldrb	r2, [r3, r2]
 8015786:	7a7b      	ldrb	r3, [r7, #9]
 8015788:	4619      	mov	r1, r3
 801578a:	4b04      	ldr	r3, [pc, #16]	@ (801579c <mix_sub_columns+0x288>)
 801578c:	5c5b      	ldrb	r3, [r3, r1]
 801578e:	4053      	eors	r3, r2
 8015790:	b2da      	uxtb	r2, r3
 8015792:	7bbb      	ldrb	r3, [r7, #14]
 8015794:	4619      	mov	r1, r3
 8015796:	e005      	b.n	80157a4 <mix_sub_columns+0x290>
 8015798:	08020928 	.word	0x08020928
 801579c:	08020a28 	.word	0x08020a28
 80157a0:	08020828 	.word	0x08020828
 80157a4:	4b2d      	ldr	r3, [pc, #180]	@ (801585c <mix_sub_columns+0x348>)
 80157a6:	5c5b      	ldrb	r3, [r3, r1]
 80157a8:	4053      	eors	r3, r2
 80157aa:	b2d9      	uxtb	r1, r3
 80157ac:	7cfb      	ldrb	r3, [r7, #19]
 80157ae:	461a      	mov	r2, r3
 80157b0:	4b2a      	ldr	r3, [pc, #168]	@ (801585c <mix_sub_columns+0x348>)
 80157b2:	5c9a      	ldrb	r2, [r3, r2]
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	330c      	adds	r3, #12
 80157b8:	404a      	eors	r2, r1
 80157ba:	b2d2      	uxtb	r2, r2
 80157bc:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80157be:	7d3b      	ldrb	r3, [r7, #20]
 80157c0:	461a      	mov	r2, r3
 80157c2:	4b26      	ldr	r3, [pc, #152]	@ (801585c <mix_sub_columns+0x348>)
 80157c4:	5c9a      	ldrb	r2, [r3, r2]
 80157c6:	7a7b      	ldrb	r3, [r7, #9]
 80157c8:	4619      	mov	r1, r3
 80157ca:	4b25      	ldr	r3, [pc, #148]	@ (8015860 <mix_sub_columns+0x34c>)
 80157cc:	5c5b      	ldrb	r3, [r3, r1]
 80157ce:	4053      	eors	r3, r2
 80157d0:	b2da      	uxtb	r2, r3
 80157d2:	7bbb      	ldrb	r3, [r7, #14]
 80157d4:	4619      	mov	r1, r3
 80157d6:	4b23      	ldr	r3, [pc, #140]	@ (8015864 <mix_sub_columns+0x350>)
 80157d8:	5c5b      	ldrb	r3, [r3, r1]
 80157da:	4053      	eors	r3, r2
 80157dc:	b2d9      	uxtb	r1, r3
 80157de:	7cfb      	ldrb	r3, [r7, #19]
 80157e0:	461a      	mov	r2, r3
 80157e2:	4b1e      	ldr	r3, [pc, #120]	@ (801585c <mix_sub_columns+0x348>)
 80157e4:	5c9a      	ldrb	r2, [r3, r2]
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	330d      	adds	r3, #13
 80157ea:	404a      	eors	r2, r1
 80157ec:	b2d2      	uxtb	r2, r2
 80157ee:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80157f0:	7d3b      	ldrb	r3, [r7, #20]
 80157f2:	461a      	mov	r2, r3
 80157f4:	4b19      	ldr	r3, [pc, #100]	@ (801585c <mix_sub_columns+0x348>)
 80157f6:	5c9a      	ldrb	r2, [r3, r2]
 80157f8:	7a7b      	ldrb	r3, [r7, #9]
 80157fa:	4619      	mov	r1, r3
 80157fc:	4b17      	ldr	r3, [pc, #92]	@ (801585c <mix_sub_columns+0x348>)
 80157fe:	5c5b      	ldrb	r3, [r3, r1]
 8015800:	4053      	eors	r3, r2
 8015802:	b2da      	uxtb	r2, r3
 8015804:	7bbb      	ldrb	r3, [r7, #14]
 8015806:	4619      	mov	r1, r3
 8015808:	4b15      	ldr	r3, [pc, #84]	@ (8015860 <mix_sub_columns+0x34c>)
 801580a:	5c5b      	ldrb	r3, [r3, r1]
 801580c:	4053      	eors	r3, r2
 801580e:	b2d9      	uxtb	r1, r3
 8015810:	7cfb      	ldrb	r3, [r7, #19]
 8015812:	461a      	mov	r2, r3
 8015814:	4b13      	ldr	r3, [pc, #76]	@ (8015864 <mix_sub_columns+0x350>)
 8015816:	5c9a      	ldrb	r2, [r3, r2]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	330e      	adds	r3, #14
 801581c:	404a      	eors	r2, r1
 801581e:	b2d2      	uxtb	r2, r2
 8015820:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8015822:	7d3b      	ldrb	r3, [r7, #20]
 8015824:	461a      	mov	r2, r3
 8015826:	4b0f      	ldr	r3, [pc, #60]	@ (8015864 <mix_sub_columns+0x350>)
 8015828:	5c9a      	ldrb	r2, [r3, r2]
 801582a:	7a7b      	ldrb	r3, [r7, #9]
 801582c:	4619      	mov	r1, r3
 801582e:	4b0b      	ldr	r3, [pc, #44]	@ (801585c <mix_sub_columns+0x348>)
 8015830:	5c5b      	ldrb	r3, [r3, r1]
 8015832:	4053      	eors	r3, r2
 8015834:	b2da      	uxtb	r2, r3
 8015836:	7bbb      	ldrb	r3, [r7, #14]
 8015838:	4619      	mov	r1, r3
 801583a:	4b08      	ldr	r3, [pc, #32]	@ (801585c <mix_sub_columns+0x348>)
 801583c:	5c5b      	ldrb	r3, [r3, r1]
 801583e:	4053      	eors	r3, r2
 8015840:	b2d9      	uxtb	r1, r3
 8015842:	7cfb      	ldrb	r3, [r7, #19]
 8015844:	461a      	mov	r2, r3
 8015846:	4b06      	ldr	r3, [pc, #24]	@ (8015860 <mix_sub_columns+0x34c>)
 8015848:	5c9a      	ldrb	r2, [r3, r2]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	330f      	adds	r3, #15
 801584e:	404a      	eors	r2, r1
 8015850:	b2d2      	uxtb	r2, r2
 8015852:	701a      	strb	r2, [r3, #0]
  }
 8015854:	bf00      	nop
 8015856:	3718      	adds	r7, #24
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}
 801585c:	08020828 	.word	0x08020828
 8015860:	08020928 	.word	0x08020928
 8015864:	08020a28 	.word	0x08020a28

08015868 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b086      	sub	sp, #24
 801586c:	af00      	add	r7, sp, #0
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	460b      	mov	r3, r1
 8015872:	607a      	str	r2, [r7, #4]
 8015874:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 8015876:	7afb      	ldrb	r3, [r7, #11]
 8015878:	3b10      	subs	r3, #16
 801587a:	2b10      	cmp	r3, #16
 801587c:	bf8c      	ite	hi
 801587e:	2201      	movhi	r2, #1
 8015880:	2200      	movls	r2, #0
 8015882:	b2d2      	uxtb	r2, r2
 8015884:	2a00      	cmp	r2, #0
 8015886:	d10b      	bne.n	80158a0 <lorawan_aes_set_key+0x38>
 8015888:	4a64      	ldr	r2, [pc, #400]	@ (8015a1c <lorawan_aes_set_key+0x1b4>)
 801588a:	fa22 f303 	lsr.w	r3, r2, r3
 801588e:	f003 0301 	and.w	r3, r3, #1
 8015892:	2b00      	cmp	r3, #0
 8015894:	bf14      	ite	ne
 8015896:	2301      	movne	r3, #1
 8015898:	2300      	moveq	r3, #0
 801589a:	b2db      	uxtb	r3, r3
 801589c:	2b00      	cmp	r3, #0
 801589e:	d105      	bne.n	80158ac <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2200      	movs	r2, #0
 80158a4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 80158a8:	23ff      	movs	r3, #255	@ 0xff
 80158aa:	e0b3      	b.n	8015a14 <lorawan_aes_set_key+0x1ac>
        break;
 80158ac:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	7afa      	ldrb	r2, [r7, #11]
 80158b2:	68f9      	ldr	r1, [r7, #12]
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7ff fbfc 	bl	80150b2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 80158ba:	7afb      	ldrb	r3, [r7, #11]
 80158bc:	331c      	adds	r3, #28
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 80158c4:	7c7b      	ldrb	r3, [r7, #17]
 80158c6:	091b      	lsrs	r3, r3, #4
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	3b01      	subs	r3, #1
 80158cc:	b2da      	uxtb	r2, r3
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80158d4:	7afb      	ldrb	r3, [r7, #11]
 80158d6:	75fb      	strb	r3, [r7, #23]
 80158d8:	2301      	movs	r3, #1
 80158da:	75bb      	strb	r3, [r7, #22]
 80158dc:	e094      	b.n	8015a08 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 80158de:	7dfb      	ldrb	r3, [r7, #23]
 80158e0:	3b04      	subs	r3, #4
 80158e2:	687a      	ldr	r2, [r7, #4]
 80158e4:	5cd3      	ldrb	r3, [r2, r3]
 80158e6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 80158e8:	7dfb      	ldrb	r3, [r7, #23]
 80158ea:	3b03      	subs	r3, #3
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	5cd3      	ldrb	r3, [r2, r3]
 80158f0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 80158f2:	7dfb      	ldrb	r3, [r7, #23]
 80158f4:	3b02      	subs	r3, #2
 80158f6:	687a      	ldr	r2, [r7, #4]
 80158f8:	5cd3      	ldrb	r3, [r2, r3]
 80158fa:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 80158fc:	7dfb      	ldrb	r3, [r7, #23]
 80158fe:	3b01      	subs	r3, #1
 8015900:	687a      	ldr	r2, [r7, #4]
 8015902:	5cd3      	ldrb	r3, [r2, r3]
 8015904:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 8015906:	7dfb      	ldrb	r3, [r7, #23]
 8015908:	7afa      	ldrb	r2, [r7, #11]
 801590a:	fbb3 f1f2 	udiv	r1, r3, r2
 801590e:	fb01 f202 	mul.w	r2, r1, r2
 8015912:	1a9b      	subs	r3, r3, r2
 8015914:	b2db      	uxtb	r3, r3
 8015916:	2b00      	cmp	r3, #0
 8015918:	d128      	bne.n	801596c <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 801591a:	7d7b      	ldrb	r3, [r7, #21]
 801591c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 801591e:	7d3b      	ldrb	r3, [r7, #20]
 8015920:	4a3f      	ldr	r2, [pc, #252]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 8015922:	5cd2      	ldrb	r2, [r2, r3]
 8015924:	7dbb      	ldrb	r3, [r7, #22]
 8015926:	4053      	eors	r3, r2
 8015928:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 801592a:	7cfb      	ldrb	r3, [r7, #19]
 801592c:	4a3c      	ldr	r2, [pc, #240]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 801592e:	5cd3      	ldrb	r3, [r2, r3]
 8015930:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 8015932:	7cbb      	ldrb	r3, [r7, #18]
 8015934:	4a3a      	ldr	r2, [pc, #232]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 8015936:	5cd3      	ldrb	r3, [r2, r3]
 8015938:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 801593a:	7c3b      	ldrb	r3, [r7, #16]
 801593c:	4a38      	ldr	r2, [pc, #224]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 801593e:	5cd3      	ldrb	r3, [r2, r3]
 8015940:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 8015942:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015946:	005b      	lsls	r3, r3, #1
 8015948:	b25a      	sxtb	r2, r3
 801594a:	7dbb      	ldrb	r3, [r7, #22]
 801594c:	09db      	lsrs	r3, r3, #7
 801594e:	b2db      	uxtb	r3, r3
 8015950:	b25b      	sxtb	r3, r3
 8015952:	4619      	mov	r1, r3
 8015954:	0049      	lsls	r1, r1, #1
 8015956:	440b      	add	r3, r1
 8015958:	4619      	mov	r1, r3
 801595a:	00c8      	lsls	r0, r1, #3
 801595c:	4619      	mov	r1, r3
 801595e:	4603      	mov	r3, r0
 8015960:	440b      	add	r3, r1
 8015962:	b25b      	sxtb	r3, r3
 8015964:	4053      	eors	r3, r2
 8015966:	b25b      	sxtb	r3, r3
 8015968:	75bb      	strb	r3, [r7, #22]
 801596a:	e01c      	b.n	80159a6 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 801596c:	7afb      	ldrb	r3, [r7, #11]
 801596e:	2b18      	cmp	r3, #24
 8015970:	d919      	bls.n	80159a6 <lorawan_aes_set_key+0x13e>
 8015972:	7dfb      	ldrb	r3, [r7, #23]
 8015974:	7afa      	ldrb	r2, [r7, #11]
 8015976:	fbb3 f1f2 	udiv	r1, r3, r2
 801597a:	fb01 f202 	mul.w	r2, r1, r2
 801597e:	1a9b      	subs	r3, r3, r2
 8015980:	b2db      	uxtb	r3, r3
 8015982:	2b10      	cmp	r3, #16
 8015984:	d10f      	bne.n	80159a6 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 8015986:	7d7b      	ldrb	r3, [r7, #21]
 8015988:	4a25      	ldr	r2, [pc, #148]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 801598a:	5cd3      	ldrb	r3, [r2, r3]
 801598c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 801598e:	7d3b      	ldrb	r3, [r7, #20]
 8015990:	4a23      	ldr	r2, [pc, #140]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 8015992:	5cd3      	ldrb	r3, [r2, r3]
 8015994:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 8015996:	7cfb      	ldrb	r3, [r7, #19]
 8015998:	4a21      	ldr	r2, [pc, #132]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 801599a:	5cd3      	ldrb	r3, [r2, r3]
 801599c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 801599e:	7cbb      	ldrb	r3, [r7, #18]
 80159a0:	4a1f      	ldr	r2, [pc, #124]	@ (8015a20 <lorawan_aes_set_key+0x1b8>)
 80159a2:	5cd3      	ldrb	r3, [r2, r3]
 80159a4:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 80159a6:	7dfa      	ldrb	r2, [r7, #23]
 80159a8:	7afb      	ldrb	r3, [r7, #11]
 80159aa:	1ad3      	subs	r3, r2, r3
 80159ac:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80159ae:	7c3b      	ldrb	r3, [r7, #16]
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	5cd1      	ldrb	r1, [r2, r3]
 80159b4:	7dfb      	ldrb	r3, [r7, #23]
 80159b6:	7d7a      	ldrb	r2, [r7, #21]
 80159b8:	404a      	eors	r2, r1
 80159ba:	b2d1      	uxtb	r1, r2
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80159c0:	7c3b      	ldrb	r3, [r7, #16]
 80159c2:	3301      	adds	r3, #1
 80159c4:	687a      	ldr	r2, [r7, #4]
 80159c6:	5cd1      	ldrb	r1, [r2, r3]
 80159c8:	7dfb      	ldrb	r3, [r7, #23]
 80159ca:	3301      	adds	r3, #1
 80159cc:	7d3a      	ldrb	r2, [r7, #20]
 80159ce:	404a      	eors	r2, r1
 80159d0:	b2d1      	uxtb	r1, r2
 80159d2:	687a      	ldr	r2, [r7, #4]
 80159d4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80159d6:	7c3b      	ldrb	r3, [r7, #16]
 80159d8:	3302      	adds	r3, #2
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	5cd1      	ldrb	r1, [r2, r3]
 80159de:	7dfb      	ldrb	r3, [r7, #23]
 80159e0:	3302      	adds	r3, #2
 80159e2:	7cfa      	ldrb	r2, [r7, #19]
 80159e4:	404a      	eors	r2, r1
 80159e6:	b2d1      	uxtb	r1, r2
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80159ec:	7c3b      	ldrb	r3, [r7, #16]
 80159ee:	3303      	adds	r3, #3
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	5cd1      	ldrb	r1, [r2, r3]
 80159f4:	7dfb      	ldrb	r3, [r7, #23]
 80159f6:	3303      	adds	r3, #3
 80159f8:	7cba      	ldrb	r2, [r7, #18]
 80159fa:	404a      	eors	r2, r1
 80159fc:	b2d1      	uxtb	r1, r2
 80159fe:	687a      	ldr	r2, [r7, #4]
 8015a00:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8015a02:	7dfb      	ldrb	r3, [r7, #23]
 8015a04:	3304      	adds	r3, #4
 8015a06:	75fb      	strb	r3, [r7, #23]
 8015a08:	7dfa      	ldrb	r2, [r7, #23]
 8015a0a:	7c7b      	ldrb	r3, [r7, #17]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	f4ff af66 	bcc.w	80158de <lorawan_aes_set_key+0x76>
    }
    return 0;
 8015a12:	2300      	movs	r3, #0
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3718      	adds	r7, #24
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}
 8015a1c:	00010101 	.word	0x00010101
 8015a20:	08020828 	.word	0x08020828

08015a24 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b08a      	sub	sp, #40	@ 0x28
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d038      	beq.n	8015aac <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8015a3a:	687a      	ldr	r2, [r7, #4]
 8015a3c:	f107 0314 	add.w	r3, r7, #20
 8015a40:	68f9      	ldr	r1, [r7, #12]
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7ff fc07 	bl	8015256 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8015a48:	2301      	movs	r3, #1
 8015a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015a4e:	e014      	b.n	8015a7a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8015a50:	f107 0314 	add.w	r3, r7, #20
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7ff fd5d 	bl	8015514 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015a60:	0112      	lsls	r2, r2, #4
 8015a62:	441a      	add	r2, r3
 8015a64:	f107 0314 	add.w	r3, r7, #20
 8015a68:	4611      	mov	r1, r2
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7ff fcab 	bl	80153c6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8015a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a74:	3301      	adds	r3, #1
 8015a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8015a80:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d3e3      	bcc.n	8015a50 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8015a88:	f107 0314 	add.w	r3, r7, #20
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7ff fca7 	bl	80153e0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015a98:	0112      	lsls	r2, r2, #4
 8015a9a:	441a      	add	r2, r3
 8015a9c:	f107 0314 	add.w	r3, r7, #20
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	68b8      	ldr	r0, [r7, #8]
 8015aa4:	f7ff fbd7 	bl	8015256 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	e000      	b.n	8015aae <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8015aac:	23ff      	movs	r3, #255	@ 0xff
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3728      	adds	r7, #40	@ 0x28
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
	...

08015ab8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 8015ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aba:	b0a1      	sub	sp, #132	@ 0x84
 8015abc:	af12      	add	r7, sp, #72	@ 0x48
 8015abe:	4603      	mov	r3, r0
 8015ac0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8015ac4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015acc:	4611      	mov	r1, r2
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f000 fa12 	bl	8015ef8 <SecureElementGetKeyByID>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d174      	bne.n	8015bc4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015ada:	2300      	movs	r3, #0
 8015adc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015ae0:	e06c      	b.n	8015bbc <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 8015ae2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8015ae6:	4939      	ldr	r1, [pc, #228]	@ (8015bcc <PrintKey+0x114>)
 8015ae8:	4613      	mov	r3, r2
 8015aea:	005b      	lsls	r3, r3, #1
 8015aec:	4413      	add	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	440b      	add	r3, r1
 8015af2:	781b      	ldrb	r3, [r3, #0]
 8015af4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d15a      	bne.n	8015bb2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 8015afc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8015b00:	4932      	ldr	r1, [pc, #200]	@ (8015bcc <PrintKey+0x114>)
 8015b02:	4613      	mov	r3, r2
 8015b04:	005b      	lsls	r3, r3, #1
 8015b06:	4413      	add	r3, r2
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	440b      	add	r3, r1
 8015b0c:	3308      	adds	r3, #8
 8015b0e:	6819      	ldr	r1, [r3, #0]
 8015b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b12:	785b      	ldrb	r3, [r3, #1]
 8015b14:	461d      	mov	r5, r3
 8015b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b18:	789b      	ldrb	r3, [r3, #2]
 8015b1a:	461e      	mov	r6, r3
 8015b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b1e:	78db      	ldrb	r3, [r3, #3]
 8015b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b24:	791b      	ldrb	r3, [r3, #4]
 8015b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8015b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b2a:	795b      	ldrb	r3, [r3, #5]
 8015b2c:	623b      	str	r3, [r7, #32]
 8015b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b30:	799b      	ldrb	r3, [r3, #6]
 8015b32:	61fb      	str	r3, [r7, #28]
 8015b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b36:	79db      	ldrb	r3, [r3, #7]
 8015b38:	61bb      	str	r3, [r7, #24]
 8015b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b3c:	7a1b      	ldrb	r3, [r3, #8]
 8015b3e:	617b      	str	r3, [r7, #20]
 8015b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b42:	7a5b      	ldrb	r3, [r3, #9]
 8015b44:	613b      	str	r3, [r7, #16]
 8015b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b48:	7a9b      	ldrb	r3, [r3, #10]
 8015b4a:	60fb      	str	r3, [r7, #12]
 8015b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b4e:	7adb      	ldrb	r3, [r3, #11]
 8015b50:	60bb      	str	r3, [r7, #8]
 8015b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b54:	7b1b      	ldrb	r3, [r3, #12]
 8015b56:	607b      	str	r3, [r7, #4]
 8015b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b5a:	7b5b      	ldrb	r3, [r3, #13]
 8015b5c:	461c      	mov	r4, r3
 8015b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b60:	7b9b      	ldrb	r3, [r3, #14]
 8015b62:	4618      	mov	r0, r3
 8015b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b66:	7bdb      	ldrb	r3, [r3, #15]
 8015b68:	461a      	mov	r2, r3
 8015b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b6c:	7c1b      	ldrb	r3, [r3, #16]
 8015b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015b70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015b72:	900e      	str	r0, [sp, #56]	@ 0x38
 8015b74:	940d      	str	r4, [sp, #52]	@ 0x34
 8015b76:	687a      	ldr	r2, [r7, #4]
 8015b78:	920c      	str	r2, [sp, #48]	@ 0x30
 8015b7a:	68ba      	ldr	r2, [r7, #8]
 8015b7c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015b7e:	68fa      	ldr	r2, [r7, #12]
 8015b80:	920a      	str	r2, [sp, #40]	@ 0x28
 8015b82:	693a      	ldr	r2, [r7, #16]
 8015b84:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b86:	697a      	ldr	r2, [r7, #20]
 8015b88:	9208      	str	r2, [sp, #32]
 8015b8a:	69ba      	ldr	r2, [r7, #24]
 8015b8c:	9207      	str	r2, [sp, #28]
 8015b8e:	69fa      	ldr	r2, [r7, #28]
 8015b90:	9206      	str	r2, [sp, #24]
 8015b92:	6a3a      	ldr	r2, [r7, #32]
 8015b94:	9205      	str	r2, [sp, #20]
 8015b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b98:	9204      	str	r2, [sp, #16]
 8015b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b9c:	9303      	str	r3, [sp, #12]
 8015b9e:	9602      	str	r6, [sp, #8]
 8015ba0:	9501      	str	r5, [sp, #4]
 8015ba2:	9100      	str	r1, [sp, #0]
 8015ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8015bd0 <PrintKey+0x118>)
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	2100      	movs	r1, #0
 8015baa:	2002      	movs	r0, #2
 8015bac:	f003 fa26 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
 8015bb0:	e008      	b.n	8015bc4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015bb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015bb6:	3301      	adds	r3, #1
 8015bb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015bbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015bc0:	2b0a      	cmp	r3, #10
 8015bc2:	d98e      	bls.n	8015ae2 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 8015bc4:	373c      	adds	r7, #60	@ 0x3c
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bca:	bf00      	nop
 8015bcc:	08020b28 	.word	0x08020b28
 8015bd0:	08020384 	.word	0x08020384

08015bd4 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 8015bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bd6:	b091      	sub	sp, #68	@ 0x44
 8015bd8:	af08      	add	r7, sp, #32
 8015bda:	4603      	mov	r3, r0
 8015bdc:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 8015bde:	2300      	movs	r3, #0
 8015be0:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 8015be2:	f107 0310 	add.w	r3, r7, #16
 8015be6:	4618      	mov	r0, r3
 8015be8:	f000 fbd8 	bl	801639c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8015bec:	7c3b      	ldrb	r3, [r7, #16]
 8015bee:	7c7a      	ldrb	r2, [r7, #17]
 8015bf0:	7cb9      	ldrb	r1, [r7, #18]
 8015bf2:	7cf8      	ldrb	r0, [r7, #19]
 8015bf4:	7d3c      	ldrb	r4, [r7, #20]
 8015bf6:	7d7d      	ldrb	r5, [r7, #21]
 8015bf8:	7dbe      	ldrb	r6, [r7, #22]
 8015bfa:	f897 c017 	ldrb.w	ip, [r7, #23]
 8015bfe:	f8cd c01c 	str.w	ip, [sp, #28]
 8015c02:	9606      	str	r6, [sp, #24]
 8015c04:	9505      	str	r5, [sp, #20]
 8015c06:	9404      	str	r4, [sp, #16]
 8015c08:	9003      	str	r0, [sp, #12]
 8015c0a:	9102      	str	r1, [sp, #8]
 8015c0c:	9201      	str	r2, [sp, #4]
 8015c0e:	9300      	str	r3, [sp, #0]
 8015c10:	4b24      	ldr	r3, [pc, #144]	@ (8015ca4 <PrintIds+0xd0>)
 8015c12:	2200      	movs	r2, #0
 8015c14:	2100      	movs	r1, #0
 8015c16:	2002      	movs	r0, #2
 8015c18:	f003 f9f0 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 8015c1c:	f107 0318 	add.w	r3, r7, #24
 8015c20:	4618      	mov	r0, r3
 8015c22:	f000 fc05 	bl	8016430 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8015c26:	7e3b      	ldrb	r3, [r7, #24]
 8015c28:	7e7a      	ldrb	r2, [r7, #25]
 8015c2a:	7eb9      	ldrb	r1, [r7, #26]
 8015c2c:	7ef8      	ldrb	r0, [r7, #27]
 8015c2e:	7f3c      	ldrb	r4, [r7, #28]
 8015c30:	7f7d      	ldrb	r5, [r7, #29]
 8015c32:	7fbe      	ldrb	r6, [r7, #30]
 8015c34:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8015c38:	f8cd c01c 	str.w	ip, [sp, #28]
 8015c3c:	9606      	str	r6, [sp, #24]
 8015c3e:	9505      	str	r5, [sp, #20]
 8015c40:	9404      	str	r4, [sp, #16]
 8015c42:	9003      	str	r0, [sp, #12]
 8015c44:	9102      	str	r1, [sp, #8]
 8015c46:	9201      	str	r2, [sp, #4]
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	4b17      	ldr	r3, [pc, #92]	@ (8015ca8 <PrintIds+0xd4>)
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	2100      	movs	r1, #0
 8015c50:	2002      	movs	r0, #2
 8015c52:	f003 f9d3 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 8015c56:	f107 020c 	add.w	r2, r7, #12
 8015c5a:	79fb      	ldrb	r3, [r7, #7]
 8015c5c:	4611      	mov	r1, r2
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f000 fbfe 	bl	8016460 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8015c64:	f107 030c 	add.w	r3, r7, #12
 8015c68:	3303      	adds	r3, #3
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	f107 030c 	add.w	r3, r7, #12
 8015c72:	3302      	adds	r3, #2
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	4619      	mov	r1, r3
 8015c78:	f107 030c 	add.w	r3, r7, #12
 8015c7c:	3301      	adds	r3, #1
 8015c7e:	781b      	ldrb	r3, [r3, #0]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f107 030c 	add.w	r3, r7, #12
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	9303      	str	r3, [sp, #12]
 8015c8a:	9002      	str	r0, [sp, #8]
 8015c8c:	9101      	str	r1, [sp, #4]
 8015c8e:	9200      	str	r2, [sp, #0]
 8015c90:	4b06      	ldr	r3, [pc, #24]	@ (8015cac <PrintIds+0xd8>)
 8015c92:	2200      	movs	r2, #0
 8015c94:	2100      	movs	r1, #0
 8015c96:	2002      	movs	r0, #2
 8015c98:	f003 f9b0 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 8015c9c:	bf00      	nop
 8015c9e:	3724      	adds	r7, #36	@ 0x24
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ca4:	080203e0 	.word	0x080203e0
 8015ca8:	08020420 	.word	0x08020420
 8015cac:	08020460 	.word	0x08020460

08015cb0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	6039      	str	r1, [r7, #0]
 8015cba:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	73fb      	strb	r3, [r7, #15]
 8015cc0:	e01a      	b.n	8015cf8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8015cc2:	4b12      	ldr	r3, [pc, #72]	@ (8015d0c <GetKeyByID+0x5c>)
 8015cc4:	6819      	ldr	r1, [r3, #0]
 8015cc6:	7bfa      	ldrb	r2, [r7, #15]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	011b      	lsls	r3, r3, #4
 8015ccc:	4413      	add	r3, r2
 8015cce:	440b      	add	r3, r1
 8015cd0:	3318      	adds	r3, #24
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	79fa      	ldrb	r2, [r7, #7]
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d10b      	bne.n	8015cf2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8015cda:	4b0c      	ldr	r3, [pc, #48]	@ (8015d0c <GetKeyByID+0x5c>)
 8015cdc:	6819      	ldr	r1, [r3, #0]
 8015cde:	7bfa      	ldrb	r2, [r7, #15]
 8015ce0:	4613      	mov	r3, r2
 8015ce2:	011b      	lsls	r3, r3, #4
 8015ce4:	4413      	add	r3, r2
 8015ce6:	3318      	adds	r3, #24
 8015ce8:	18ca      	adds	r2, r1, r3
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	e006      	b.n	8015d00 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015cf2:	7bfb      	ldrb	r3, [r7, #15]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	73fb      	strb	r3, [r7, #15]
 8015cf8:	7bfb      	ldrb	r3, [r7, #15]
 8015cfa:	2b0a      	cmp	r3, #10
 8015cfc:	d9e1      	bls.n	8015cc2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8015cfe:	2303      	movs	r3, #3
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3714      	adds	r7, #20
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bc80      	pop	{r7}
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop
 8015d0c:	200011d0 	.word	0x200011d0

08015d10 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8015d10:	b590      	push	{r4, r7, lr}
 8015d12:	b0d1      	sub	sp, #324	@ 0x144
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 8015d1a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8015d1e:	6020      	str	r0, [r4, #0]
 8015d20:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8015d24:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015d28:	6001      	str	r1, [r0, #0]
 8015d2a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8015d2e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8015d32:	600a      	str	r2, [r1, #0]
 8015d34:	461a      	mov	r2, r3
 8015d36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015d3a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8015d3e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8015d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015d44:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d003      	beq.n	8015d56 <ComputeCmac+0x46>
 8015d4e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d101      	bne.n	8015d5a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8015d56:	2302      	movs	r3, #2
 8015d58:	e05d      	b.n	8015e16 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8015d5a:	f107 0314 	add.w	r3, r7, #20
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7fe fefe 	bl	8014b60 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8015d64:	f107 0210 	add.w	r2, r7, #16
 8015d68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015d6c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	4611      	mov	r1, r2
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7ff ff9b 	bl	8015cb0 <GetKeyByID>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015d80:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d144      	bne.n	8015e12 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8015d88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015d8c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	1c5a      	adds	r2, r3, #1
 8015d94:	f107 0314 	add.w	r3, r7, #20
 8015d98:	4611      	mov	r1, r2
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7fe fef9 	bl	8014b92 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8015da0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015da4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d009      	beq.n	8015dc2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8015dae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015db2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015db6:	f107 0014 	add.w	r0, r7, #20
 8015dba:	2210      	movs	r2, #16
 8015dbc:	6819      	ldr	r1, [r3, #0]
 8015dbe:	f7fe fef7 	bl	8014bb0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8015dc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015dc6:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8015dca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015dce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015dd2:	f107 0014 	add.w	r0, r7, #20
 8015dd6:	6812      	ldr	r2, [r2, #0]
 8015dd8:	6819      	ldr	r1, [r3, #0]
 8015dda:	f7fe fee9 	bl	8014bb0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8015dde:	f107 0214 	add.w	r2, r7, #20
 8015de2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8015de6:	4611      	mov	r1, r2
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7fe ffa3 	bl	8014d34 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8015dee:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8015df2:	461a      	mov	r2, r3
 8015df4:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8015df8:	021b      	lsls	r3, r3, #8
 8015dfa:	431a      	orrs	r2, r3
 8015dfc:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8015e00:	041b      	lsls	r3, r3, #16
 8015e02:	431a      	orrs	r2, r3
 8015e04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8015e08:	061b      	lsls	r3, r3, #24
 8015e0a:	431a      	orrs	r2, r3
 8015e0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8015e10:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8015e12:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd90      	pop	{r4, r7, pc}

08015e20 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d101      	bne.n	8015e32 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8015e2e:	2302      	movs	r3, #2
 8015e30:	e00a      	b.n	8015e48 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8015e32:	4a07      	ldr	r2, [pc, #28]	@ (8015e50 <SecureElementInit+0x30>)
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8015e38:	4b05      	ldr	r3, [pc, #20]	@ (8015e50 <SecureElementInit+0x30>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	22d8      	movs	r2, #216	@ 0xd8
 8015e3e:	4905      	ldr	r1, [pc, #20]	@ (8015e54 <SecureElementInit+0x34>)
 8015e40:	4618      	mov	r0, r3
 8015e42:	f000 fb76 	bl	8016532 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8015e46:	2300      	movs	r3, #0
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3708      	adds	r7, #8
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}
 8015e50:	200011d0 	.word	0x200011d0
 8015e54:	0803e500 	.word	0x0803e500

08015e58 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b086      	sub	sp, #24
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 8015e62:	2300      	movs	r3, #0
 8015e64:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 8015e66:	f107 030c 	add.w	r3, r7, #12
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f000 fa96 	bl	801639c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8015e70:	f107 0308 	add.w	r3, r7, #8
 8015e74:	4619      	mov	r1, r3
 8015e76:	2001      	movs	r0, #1
 8015e78:	f000 faf2 	bl	8016460 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d024      	beq.n	8015ecc <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 8015e82:	2300      	movs	r3, #0
 8015e84:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8015e86:	2300      	movs	r3, #0
 8015e88:	75bb      	strb	r3, [r7, #22]
 8015e8a:	e00c      	b.n	8015ea6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 8015e8c:	7dbb      	ldrb	r3, [r7, #22]
 8015e8e:	3318      	adds	r3, #24
 8015e90:	443b      	add	r3, r7
 8015e92:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d002      	beq.n	8015ea0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	75fb      	strb	r3, [r7, #23]
                break;
 8015e9e:	e005      	b.n	8015eac <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8015ea0:	7dbb      	ldrb	r3, [r7, #22]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	75bb      	strb	r3, [r7, #22]
 8015ea6:	7dbb      	ldrb	r3, [r7, #22]
 8015ea8:	2b07      	cmp	r3, #7
 8015eaa:	d9ef      	bls.n	8015e8c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 8015eac:	7dfb      	ldrb	r3, [r7, #23]
 8015eae:	f083 0301 	eor.w	r3, r3, #1
 8015eb2:	b2db      	uxtb	r3, r3
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d009      	beq.n	8015ecc <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 8015eb8:	f107 020c 	add.w	r2, r7, #12
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	4610      	mov	r0, r2
 8015ec0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 8015ec2:	f107 030c 	add.w	r3, r7, #12
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f000 fa50 	bl	801636c <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8015ecc:	683b      	ldr	r3, [r7, #0]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d00c      	beq.n	8015eec <SecureElementInitMcuID+0x94>
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d109      	bne.n	8015eec <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 8015ed8:	f107 0208 	add.w	r2, r7, #8
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	4610      	mov	r0, r2
 8015ee0:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	2001      	movs	r0, #1
 8015ee8:	f000 fa88 	bl	80163fc <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 8015eec:	2300      	movs	r3, #0
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3718      	adds	r7, #24
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
	...

08015ef8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8015ef8:	b480      	push	{r7}
 8015efa:	b085      	sub	sp, #20
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	4603      	mov	r3, r0
 8015f00:	6039      	str	r1, [r7, #0]
 8015f02:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015f04:	2300      	movs	r3, #0
 8015f06:	73fb      	strb	r3, [r7, #15]
 8015f08:	e01a      	b.n	8015f40 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8015f0a:	4b12      	ldr	r3, [pc, #72]	@ (8015f54 <SecureElementGetKeyByID+0x5c>)
 8015f0c:	6819      	ldr	r1, [r3, #0]
 8015f0e:	7bfa      	ldrb	r2, [r7, #15]
 8015f10:	4613      	mov	r3, r2
 8015f12:	011b      	lsls	r3, r3, #4
 8015f14:	4413      	add	r3, r2
 8015f16:	440b      	add	r3, r1
 8015f18:	3318      	adds	r3, #24
 8015f1a:	781b      	ldrb	r3, [r3, #0]
 8015f1c:	79fa      	ldrb	r2, [r7, #7]
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	d10b      	bne.n	8015f3a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8015f22:	4b0c      	ldr	r3, [pc, #48]	@ (8015f54 <SecureElementGetKeyByID+0x5c>)
 8015f24:	6819      	ldr	r1, [r3, #0]
 8015f26:	7bfa      	ldrb	r2, [r7, #15]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	011b      	lsls	r3, r3, #4
 8015f2c:	4413      	add	r3, r2
 8015f2e:	3318      	adds	r3, #24
 8015f30:	18ca      	adds	r2, r1, r3
 8015f32:	683b      	ldr	r3, [r7, #0]
 8015f34:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8015f36:	2300      	movs	r3, #0
 8015f38:	e006      	b.n	8015f48 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015f3a:	7bfb      	ldrb	r3, [r7, #15]
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	73fb      	strb	r3, [r7, #15]
 8015f40:	7bfb      	ldrb	r3, [r7, #15]
 8015f42:	2b0a      	cmp	r3, #10
 8015f44:	d9e1      	bls.n	8015f0a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8015f46:	2303      	movs	r3, #3
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3714      	adds	r7, #20
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bc80      	pop	{r7}
 8015f50:	4770      	bx	lr
 8015f52:	bf00      	nop
 8015f54:	200011d0 	.word	0x200011d0

08015f58 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	f7ff fdab 	bl	8015ab8 <PrintKey>
    PrintKey( NWK_KEY );
 8015f62:	2001      	movs	r0, #1
 8015f64:	f7ff fda8 	bl	8015ab8 <PrintKey>
    PrintKey( APP_S_KEY );
 8015f68:	2009      	movs	r0, #9
 8015f6a:	f7ff fda5 	bl	8015ab8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8015f6e:	2008      	movs	r0, #8
 8015f70:	f7ff fda2 	bl	8015ab8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 8015f74:	2000      	movs	r0, #0
 8015f76:	f7ff fe2d 	bl	8015bd4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8015f7a:	2300      	movs	r3, #0
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b082      	sub	sp, #8
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	4603      	mov	r3, r0
 8015f88:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 8015f8a:	200b      	movs	r0, #11
 8015f8c:	f7ff fd94 	bl	8015ab8 <PrintKey>
    PrintKey( MC_KE_KEY );
 8015f90:	200c      	movs	r0, #12
 8015f92:	f7ff fd91 	bl	8015ab8 <PrintKey>
    PrintKey( APP_S_KEY );
 8015f96:	2009      	movs	r0, #9
 8015f98:	f7ff fd8e 	bl	8015ab8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8015f9c:	2008      	movs	r0, #8
 8015f9e:	f7ff fd8b 	bl	8015ab8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 8015fa2:	200a      	movs	r0, #10
 8015fa4:	f7ff fd88 	bl	8015ab8 <PrintKey>
    PrintIds( mode );
 8015fa8:	79fb      	ldrb	r3, [r7, #7]
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7ff fe12 	bl	8015bd4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8015fb0:	2300      	movs	r3, #0
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3708      	adds	r7, #8
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
	...

08015fbc <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b088      	sub	sp, #32
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	6039      	str	r1, [r7, #0]
 8015fc6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d101      	bne.n	8015fd2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8015fce:	2302      	movs	r3, #2
 8015fd0:	e04b      	b.n	801606a <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	77fb      	strb	r3, [r7, #31]
 8015fd6:	e044      	b.n	8016062 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8015fd8:	4b26      	ldr	r3, [pc, #152]	@ (8016074 <SecureElementSetKey+0xb8>)
 8015fda:	6819      	ldr	r1, [r3, #0]
 8015fdc:	7ffa      	ldrb	r2, [r7, #31]
 8015fde:	4613      	mov	r3, r2
 8015fe0:	011b      	lsls	r3, r3, #4
 8015fe2:	4413      	add	r3, r2
 8015fe4:	440b      	add	r3, r1
 8015fe6:	3318      	adds	r3, #24
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	79fa      	ldrb	r2, [r7, #7]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d135      	bne.n	801605c <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8015ff0:	79fb      	ldrb	r3, [r7, #7]
 8015ff2:	2b0d      	cmp	r3, #13
 8015ff4:	d122      	bne.n	801603c <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015ff6:	2306      	movs	r3, #6
 8015ff8:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8015ffa:	f107 030c 	add.w	r3, r7, #12
 8015ffe:	2200      	movs	r2, #0
 8016000:	601a      	str	r2, [r3, #0]
 8016002:	605a      	str	r2, [r3, #4]
 8016004:	609a      	str	r2, [r3, #8]
 8016006:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8016008:	f107 030c 	add.w	r3, r7, #12
 801600c:	220c      	movs	r2, #12
 801600e:	2110      	movs	r1, #16
 8016010:	6838      	ldr	r0, [r7, #0]
 8016012:	f000 f877 	bl	8016104 <SecureElementAesEncrypt>
 8016016:	4603      	mov	r3, r0
 8016018:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 801601a:	4b16      	ldr	r3, [pc, #88]	@ (8016074 <SecureElementSetKey+0xb8>)
 801601c:	6819      	ldr	r1, [r3, #0]
 801601e:	7ffa      	ldrb	r2, [r7, #31]
 8016020:	4613      	mov	r3, r2
 8016022:	011b      	lsls	r3, r3, #4
 8016024:	4413      	add	r3, r2
 8016026:	3318      	adds	r3, #24
 8016028:	440b      	add	r3, r1
 801602a:	3301      	adds	r3, #1
 801602c:	f107 010c 	add.w	r1, r7, #12
 8016030:	2210      	movs	r2, #16
 8016032:	4618      	mov	r0, r3
 8016034:	f000 fa7d 	bl	8016532 <memcpy1>
                return retval;
 8016038:	7fbb      	ldrb	r3, [r7, #30]
 801603a:	e016      	b.n	801606a <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 801603c:	4b0d      	ldr	r3, [pc, #52]	@ (8016074 <SecureElementSetKey+0xb8>)
 801603e:	6819      	ldr	r1, [r3, #0]
 8016040:	7ffa      	ldrb	r2, [r7, #31]
 8016042:	4613      	mov	r3, r2
 8016044:	011b      	lsls	r3, r3, #4
 8016046:	4413      	add	r3, r2
 8016048:	3318      	adds	r3, #24
 801604a:	440b      	add	r3, r1
 801604c:	3301      	adds	r3, #1
 801604e:	2210      	movs	r2, #16
 8016050:	6839      	ldr	r1, [r7, #0]
 8016052:	4618      	mov	r0, r3
 8016054:	f000 fa6d 	bl	8016532 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8016058:	2300      	movs	r3, #0
 801605a:	e006      	b.n	801606a <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801605c:	7ffb      	ldrb	r3, [r7, #31]
 801605e:	3301      	adds	r3, #1
 8016060:	77fb      	strb	r3, [r7, #31]
 8016062:	7ffb      	ldrb	r3, [r7, #31]
 8016064:	2b0a      	cmp	r3, #10
 8016066:	d9b7      	bls.n	8015fd8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8016068:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801606a:	4618      	mov	r0, r3
 801606c:	3720      	adds	r7, #32
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}
 8016072:	bf00      	nop
 8016074:	200011d0 	.word	0x200011d0

08016078 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b086      	sub	sp, #24
 801607c:	af02      	add	r7, sp, #8
 801607e:	60f8      	str	r0, [r7, #12]
 8016080:	60b9      	str	r1, [r7, #8]
 8016082:	607a      	str	r2, [r7, #4]
 8016084:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 8016086:	78fb      	ldrb	r3, [r7, #3]
 8016088:	2b0b      	cmp	r3, #11
 801608a:	d901      	bls.n	8016090 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801608c:	2303      	movs	r3, #3
 801608e:	e009      	b.n	80160a4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8016090:	78fa      	ldrb	r2, [r7, #3]
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	9300      	str	r3, [sp, #0]
 8016096:	4613      	mov	r3, r2
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	68b9      	ldr	r1, [r7, #8]
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	f7ff fe37 	bl	8015d10 <ComputeCmac>
 80160a2:	4603      	mov	r3, r0
}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3710      	adds	r7, #16
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b088      	sub	sp, #32
 80160b0:	af02      	add	r7, sp, #8
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
 80160b8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d101      	bne.n	80160c4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80160c0:	2302      	movs	r3, #2
 80160c2:	e01b      	b.n	80160fc <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 80160c4:	2306      	movs	r3, #6
 80160c6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 80160c8:	2300      	movs	r3, #0
 80160ca:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80160cc:	78fa      	ldrb	r2, [r7, #3]
 80160ce:	f107 0310 	add.w	r3, r7, #16
 80160d2:	9300      	str	r3, [sp, #0]
 80160d4:	4613      	mov	r3, r2
 80160d6:	68ba      	ldr	r2, [r7, #8]
 80160d8:	68f9      	ldr	r1, [r7, #12]
 80160da:	2000      	movs	r0, #0
 80160dc:	f7ff fe18 	bl	8015d10 <ComputeCmac>
 80160e0:	4603      	mov	r3, r0
 80160e2:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80160e4:	7dfb      	ldrb	r3, [r7, #23]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d001      	beq.n	80160ee <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 80160ea:	7dfb      	ldrb	r3, [r7, #23]
 80160ec:	e006      	b.n	80160fc <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d001      	beq.n	80160fa <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80160f6:	2301      	movs	r3, #1
 80160f8:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 80160fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	3718      	adds	r7, #24
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}

08016104 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b0c2      	sub	sp, #264	@ 0x108
 8016108:	af00      	add	r7, sp, #0
 801610a:	60f8      	str	r0, [r7, #12]
 801610c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8016110:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8016114:	6001      	str	r1, [r0, #0]
 8016116:	4611      	mov	r1, r2
 8016118:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801611c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8016120:	6013      	str	r3, [r2, #0]
 8016122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016126:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 801612a:	460a      	mov	r2, r1
 801612c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d006      	beq.n	8016142 <SecureElementAesEncrypt+0x3e>
 8016134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d101      	bne.n	8016146 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016142:	2302      	movs	r3, #2
 8016144:	e059      	b.n	80161fa <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8016146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801614a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	f003 030f 	and.w	r3, r3, #15
 8016154:	2b00      	cmp	r3, #0
 8016156:	d001      	beq.n	801615c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8016158:	2305      	movs	r3, #5
 801615a:	e04e      	b.n	80161fa <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 801615c:	f107 0314 	add.w	r3, r7, #20
 8016160:	22f0      	movs	r2, #240	@ 0xf0
 8016162:	2100      	movs	r1, #0
 8016164:	4618      	mov	r0, r3
 8016166:	f000 fa1f 	bl	80165a8 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801616a:	f107 0210 	add.w	r2, r7, #16
 801616e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016172:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	4611      	mov	r1, r2
 801617a:	4618      	mov	r0, r3
 801617c:	f7ff fd98 	bl	8015cb0 <GetKeyByID>
 8016180:	4603      	mov	r3, r0
 8016182:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016186:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 801618a:	2b00      	cmp	r3, #0
 801618c:	d133      	bne.n	80161f6 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	3301      	adds	r3, #1
 8016192:	f107 0214 	add.w	r2, r7, #20
 8016196:	2110      	movs	r1, #16
 8016198:	4618      	mov	r0, r3
 801619a:	f7ff fb65 	bl	8015868 <lorawan_aes_set_key>

        uint8_t block = 0;
 801619e:	2300      	movs	r3, #0
 80161a0:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 80161a4:	e020      	b.n	80161e8 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80161a6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80161aa:	68fa      	ldr	r2, [r7, #12]
 80161ac:	18d0      	adds	r0, r2, r3
 80161ae:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80161b2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80161b6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80161ba:	6812      	ldr	r2, [r2, #0]
 80161bc:	4413      	add	r3, r2
 80161be:	f107 0214 	add.w	r2, r7, #20
 80161c2:	4619      	mov	r1, r3
 80161c4:	f7ff fc2e 	bl	8015a24 <lorawan_aes_encrypt>
            block = block + 16;
 80161c8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80161cc:	3310      	adds	r3, #16
 80161ce:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 80161d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80161d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80161da:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80161de:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80161e2:	6812      	ldr	r2, [r2, #0]
 80161e4:	3a10      	subs	r2, #16
 80161e6:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 80161e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80161ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d1d7      	bne.n	80161a6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 80161f6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}

08016204 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b088      	sub	sp, #32
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	460b      	mov	r3, r1
 801620e:	70fb      	strb	r3, [r7, #3]
 8016210:	4613      	mov	r3, r2
 8016212:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d101      	bne.n	801621e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801621a:	2302      	movs	r3, #2
 801621c:	e02d      	b.n	801627a <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 801621e:	2306      	movs	r3, #6
 8016220:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8016222:	78bb      	ldrb	r3, [r7, #2]
 8016224:	2b0c      	cmp	r3, #12
 8016226:	d104      	bne.n	8016232 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8016228:	78fb      	ldrb	r3, [r7, #3]
 801622a:	2b0b      	cmp	r3, #11
 801622c:	d001      	beq.n	8016232 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801622e:	2303      	movs	r3, #3
 8016230:	e023      	b.n	801627a <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8016232:	f107 030c 	add.w	r3, r7, #12
 8016236:	2200      	movs	r2, #0
 8016238:	601a      	str	r2, [r3, #0]
 801623a:	605a      	str	r2, [r3, #4]
 801623c:	609a      	str	r2, [r3, #8]
 801623e:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8016240:	f107 030c 	add.w	r3, r7, #12
 8016244:	78fa      	ldrb	r2, [r7, #3]
 8016246:	2110      	movs	r1, #16
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f7ff ff5b 	bl	8016104 <SecureElementAesEncrypt>
 801624e:	4603      	mov	r3, r0
 8016250:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8016252:	7ffb      	ldrb	r3, [r7, #31]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d001      	beq.n	801625c <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 8016258:	7ffb      	ldrb	r3, [r7, #31]
 801625a:	e00e      	b.n	801627a <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 801625c:	f107 020c 	add.w	r2, r7, #12
 8016260:	78bb      	ldrb	r3, [r7, #2]
 8016262:	4611      	mov	r1, r2
 8016264:	4618      	mov	r0, r3
 8016266:	f7ff fea9 	bl	8015fbc <SecureElementSetKey>
 801626a:	4603      	mov	r3, r0
 801626c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 801626e:	7ffb      	ldrb	r3, [r7, #31]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d001      	beq.n	8016278 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 8016274:	7ffb      	ldrb	r3, [r7, #31]
 8016276:	e000      	b.n	801627a <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 8016278:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801627a:	4618      	mov	r0, r3
 801627c:	3720      	adds	r7, #32
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b086      	sub	sp, #24
 8016286:	af00      	add	r7, sp, #0
 8016288:	60b9      	str	r1, [r7, #8]
 801628a:	607b      	str	r3, [r7, #4]
 801628c:	4603      	mov	r3, r0
 801628e:	73fb      	strb	r3, [r7, #15]
 8016290:	4613      	mov	r3, r2
 8016292:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d005      	beq.n	80162a6 <SecureElementProcessJoinAccept+0x24>
 801629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801629c:	2b00      	cmp	r3, #0
 801629e:	d002      	beq.n	80162a6 <SecureElementProcessJoinAccept+0x24>
 80162a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d101      	bne.n	80162aa <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80162a6:	2302      	movs	r3, #2
 80162a8:	e05c      	b.n	8016364 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80162aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162ae:	2b21      	cmp	r3, #33	@ 0x21
 80162b0:	d901      	bls.n	80162b6 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80162b2:	2305      	movs	r3, #5
 80162b4:	e056      	b.n	8016364 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 80162b6:	2301      	movs	r3, #1
 80162b8:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80162ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162be:	b29b      	uxth	r3, r3
 80162c0:	461a      	mov	r2, r3
 80162c2:	6879      	ldr	r1, [r7, #4]
 80162c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80162c6:	f000 f934 	bl	8016532 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	1c58      	adds	r0, r3, #1
 80162ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162d2:	3b01      	subs	r3, #1
 80162d4:	4619      	mov	r1, r3
 80162d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162d8:	3301      	adds	r3, #1
 80162da:	7dfa      	ldrb	r2, [r7, #23]
 80162dc:	f7ff ff12 	bl	8016104 <SecureElementAesEncrypt>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d001      	beq.n	80162ea <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80162e6:	2307      	movs	r3, #7
 80162e8:	e03c      	b.n	8016364 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80162ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ec:	330b      	adds	r3, #11
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	09db      	lsrs	r3, r3, #7
 80162f2:	b2da      	uxtb	r2, r3
 80162f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162f6:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 80162f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162fc:	3b04      	subs	r3, #4
 80162fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016300:	4413      	add	r3, r2
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	4619      	mov	r1, r3
 8016306:	f897 3020 	ldrb.w	r3, [r7, #32]
 801630a:	3b03      	subs	r3, #3
 801630c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801630e:	4413      	add	r3, r2
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	021b      	lsls	r3, r3, #8
 8016314:	ea41 0203 	orr.w	r2, r1, r3
 8016318:	f897 3020 	ldrb.w	r3, [r7, #32]
 801631c:	3b02      	subs	r3, #2
 801631e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016320:	440b      	add	r3, r1
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	041b      	lsls	r3, r3, #16
 8016326:	431a      	orrs	r2, r3
 8016328:	f897 3020 	ldrb.w	r3, [r7, #32]
 801632c:	3b01      	subs	r3, #1
 801632e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016330:	440b      	add	r3, r1
 8016332:	781b      	ldrb	r3, [r3, #0]
 8016334:	061b      	lsls	r3, r3, #24
 8016336:	4313      	orrs	r3, r2
 8016338:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 801633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d10d      	bne.n	801635e <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8016342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016346:	3b04      	subs	r3, #4
 8016348:	4619      	mov	r1, r3
 801634a:	2301      	movs	r3, #1
 801634c:	693a      	ldr	r2, [r7, #16]
 801634e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016350:	f7ff feac 	bl	80160ac <SecureElementVerifyAesCmac>
 8016354:	4603      	mov	r3, r0
 8016356:	2b00      	cmp	r3, #0
 8016358:	d003      	beq.n	8016362 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801635a:	2301      	movs	r3, #1
 801635c:	e002      	b.n	8016364 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801635e:	2304      	movs	r3, #4
 8016360:	e000      	b.n	8016364 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 8016362:	2300      	movs	r3, #0
}
 8016364:	4618      	mov	r0, r3
 8016366:	3718      	adds	r7, #24
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d101      	bne.n	801637e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801637a:	2302      	movs	r3, #2
 801637c:	e007      	b.n	801638e <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 801637e:	4b06      	ldr	r3, [pc, #24]	@ (8016398 <SecureElementSetDevEui+0x2c>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	2208      	movs	r2, #8
 8016384:	6879      	ldr	r1, [r7, #4]
 8016386:	4618      	mov	r0, r3
 8016388:	f000 f8d3 	bl	8016532 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801638c:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801638e:	4618      	mov	r0, r3
 8016390:	3708      	adds	r7, #8
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
 8016396:	bf00      	nop
 8016398:	200011d0 	.word	0x200011d0

0801639c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b082      	sub	sp, #8
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d101      	bne.n	80163ae <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80163aa:	2302      	movs	r3, #2
 80163ac:	e007      	b.n	80163be <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 80163ae:	4b06      	ldr	r3, [pc, #24]	@ (80163c8 <SecureElementGetDevEui+0x2c>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2208      	movs	r2, #8
 80163b4:	4619      	mov	r1, r3
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 f8bb 	bl	8016532 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80163bc:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3708      	adds	r7, #8
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	200011d0 	.word	0x200011d0

080163cc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b082      	sub	sp, #8
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d101      	bne.n	80163de <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80163da:	2302      	movs	r3, #2
 80163dc:	e008      	b.n	80163f0 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 80163de:	4b06      	ldr	r3, [pc, #24]	@ (80163f8 <SecureElementSetJoinEui+0x2c>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	3308      	adds	r3, #8
 80163e4:	2208      	movs	r2, #8
 80163e6:	6879      	ldr	r1, [r7, #4]
 80163e8:	4618      	mov	r0, r3
 80163ea:	f000 f8a2 	bl	8016532 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80163ee:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	3708      	adds	r7, #8
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	200011d0 	.word	0x200011d0

080163fc <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 80163fc:	b480      	push	{r7}
 80163fe:	b083      	sub	sp, #12
 8016400:	af00      	add	r7, sp, #0
 8016402:	4603      	mov	r3, r0
 8016404:	6039      	str	r1, [r7, #0]
 8016406:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8016408:	79fb      	ldrb	r3, [r7, #7]
 801640a:	2b02      	cmp	r3, #2
 801640c:	d104      	bne.n	8016418 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 801640e:	4b07      	ldr	r3, [pc, #28]	@ (801642c <SecureElementSetDevAddr+0x30>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	683a      	ldr	r2, [r7, #0]
 8016414:	611a      	str	r2, [r3, #16]
 8016416:	e003      	b.n	8016420 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8016418:	4b04      	ldr	r3, [pc, #16]	@ (801642c <SecureElementSetDevAddr+0x30>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	683a      	ldr	r2, [r7, #0]
 801641e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 8016420:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8016422:	4618      	mov	r0, r3
 8016424:	370c      	adds	r7, #12
 8016426:	46bd      	mov	sp, r7
 8016428:	bc80      	pop	{r7}
 801642a:	4770      	bx	lr
 801642c:	200011d0 	.word	0x200011d0

08016430 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d101      	bne.n	8016442 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801643e:	2302      	movs	r3, #2
 8016440:	e008      	b.n	8016454 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8016442:	4b06      	ldr	r3, [pc, #24]	@ (801645c <SecureElementGetJoinEui+0x2c>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	3308      	adds	r3, #8
 8016448:	2208      	movs	r2, #8
 801644a:	4619      	mov	r1, r3
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f000 f870 	bl	8016532 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8016452:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8016454:	4618      	mov	r0, r3
 8016456:	3708      	adds	r7, #8
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	200011d0 	.word	0x200011d0

08016460 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 8016460:	b480      	push	{r7}
 8016462:	b083      	sub	sp, #12
 8016464:	af00      	add	r7, sp, #0
 8016466:	4603      	mov	r3, r0
 8016468:	6039      	str	r1, [r7, #0]
 801646a:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d101      	bne.n	8016476 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016472:	2302      	movs	r3, #2
 8016474:	e00e      	b.n	8016494 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8016476:	79fb      	ldrb	r3, [r7, #7]
 8016478:	2b02      	cmp	r3, #2
 801647a:	d105      	bne.n	8016488 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 801647c:	4b08      	ldr	r3, [pc, #32]	@ (80164a0 <SecureElementGetDevAddr+0x40>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	691a      	ldr	r2, [r3, #16]
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	601a      	str	r2, [r3, #0]
 8016486:	e004      	b.n	8016492 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8016488:	4b05      	ldr	r3, [pc, #20]	@ (80164a0 <SecureElementGetDevAddr+0x40>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	695a      	ldr	r2, [r3, #20]
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8016492:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8016494:	4618      	mov	r0, r3
 8016496:	370c      	adds	r7, #12
 8016498:	46bd      	mov	sp, r7
 801649a:	bc80      	pop	{r7}
 801649c:	4770      	bx	lr
 801649e:	bf00      	nop
 80164a0:	200011d0 	.word	0x200011d0

080164a4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80164a4:	b480      	push	{r7}
 80164a6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80164a8:	4b0d      	ldr	r3, [pc, #52]	@ (80164e0 <rand1+0x3c>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	4a0d      	ldr	r2, [pc, #52]	@ (80164e4 <rand1+0x40>)
 80164ae:	fb02 f303 	mul.w	r3, r2, r3
 80164b2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80164b6:	3339      	adds	r3, #57	@ 0x39
 80164b8:	4a09      	ldr	r2, [pc, #36]	@ (80164e0 <rand1+0x3c>)
 80164ba:	6013      	str	r3, [r2, #0]
 80164bc:	4b08      	ldr	r3, [pc, #32]	@ (80164e0 <rand1+0x3c>)
 80164be:	681a      	ldr	r2, [r3, #0]
 80164c0:	2303      	movs	r3, #3
 80164c2:	fba3 1302 	umull	r1, r3, r3, r2
 80164c6:	1ad1      	subs	r1, r2, r3
 80164c8:	0849      	lsrs	r1, r1, #1
 80164ca:	440b      	add	r3, r1
 80164cc:	0f99      	lsrs	r1, r3, #30
 80164ce:	460b      	mov	r3, r1
 80164d0:	07db      	lsls	r3, r3, #31
 80164d2:	1a5b      	subs	r3, r3, r1
 80164d4:	1ad1      	subs	r1, r2, r3
 80164d6:	460b      	mov	r3, r1
}
 80164d8:	4618      	mov	r0, r3
 80164da:	46bd      	mov	sp, r7
 80164dc:	bc80      	pop	{r7}
 80164de:	4770      	bx	lr
 80164e0:	200000d4 	.word	0x200000d4
 80164e4:	41c64e6d 	.word	0x41c64e6d

080164e8 <srand1>:

void srand1( uint32_t seed )
{
 80164e8:	b480      	push	{r7}
 80164ea:	b083      	sub	sp, #12
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
    next = seed;
 80164f0:	4a03      	ldr	r2, [pc, #12]	@ (8016500 <srand1+0x18>)
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6013      	str	r3, [r2, #0]
}
 80164f6:	bf00      	nop
 80164f8:	370c      	adds	r7, #12
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bc80      	pop	{r7}
 80164fe:	4770      	bx	lr
 8016500:	200000d4 	.word	0x200000d4

08016504 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b082      	sub	sp, #8
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801650e:	f7ff ffc9 	bl	80164a4 <rand1>
 8016512:	4602      	mov	r2, r0
 8016514:	6839      	ldr	r1, [r7, #0]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	1acb      	subs	r3, r1, r3
 801651a:	3301      	adds	r3, #1
 801651c:	fb92 f1f3 	sdiv	r1, r2, r3
 8016520:	fb01 f303 	mul.w	r3, r1, r3
 8016524:	1ad2      	subs	r2, r2, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	4413      	add	r3, r2
}
 801652a:	4618      	mov	r0, r3
 801652c:	3708      	adds	r7, #8
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}

08016532 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016532:	b480      	push	{r7}
 8016534:	b085      	sub	sp, #20
 8016536:	af00      	add	r7, sp, #0
 8016538:	60f8      	str	r0, [r7, #12]
 801653a:	60b9      	str	r1, [r7, #8]
 801653c:	4613      	mov	r3, r2
 801653e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016540:	e007      	b.n	8016552 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016542:	68ba      	ldr	r2, [r7, #8]
 8016544:	1c53      	adds	r3, r2, #1
 8016546:	60bb      	str	r3, [r7, #8]
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	1c59      	adds	r1, r3, #1
 801654c:	60f9      	str	r1, [r7, #12]
 801654e:	7812      	ldrb	r2, [r2, #0]
 8016550:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016552:	88fb      	ldrh	r3, [r7, #6]
 8016554:	1e5a      	subs	r2, r3, #1
 8016556:	80fa      	strh	r2, [r7, #6]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d1f2      	bne.n	8016542 <memcpy1+0x10>
    }
}
 801655c:	bf00      	nop
 801655e:	bf00      	nop
 8016560:	3714      	adds	r7, #20
 8016562:	46bd      	mov	sp, r7
 8016564:	bc80      	pop	{r7}
 8016566:	4770      	bx	lr

08016568 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016568:	b480      	push	{r7}
 801656a:	b085      	sub	sp, #20
 801656c:	af00      	add	r7, sp, #0
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	60b9      	str	r1, [r7, #8]
 8016572:	4613      	mov	r3, r2
 8016574:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016576:	88fb      	ldrh	r3, [r7, #6]
 8016578:	3b01      	subs	r3, #1
 801657a:	68fa      	ldr	r2, [r7, #12]
 801657c:	4413      	add	r3, r2
 801657e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016580:	e007      	b.n	8016592 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016582:	68ba      	ldr	r2, [r7, #8]
 8016584:	1c53      	adds	r3, r2, #1
 8016586:	60bb      	str	r3, [r7, #8]
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	1e59      	subs	r1, r3, #1
 801658c:	60f9      	str	r1, [r7, #12]
 801658e:	7812      	ldrb	r2, [r2, #0]
 8016590:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016592:	88fb      	ldrh	r3, [r7, #6]
 8016594:	1e5a      	subs	r2, r3, #1
 8016596:	80fa      	strh	r2, [r7, #6]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d1f2      	bne.n	8016582 <memcpyr+0x1a>
    }
}
 801659c:	bf00      	nop
 801659e:	bf00      	nop
 80165a0:	3714      	adds	r7, #20
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bc80      	pop	{r7}
 80165a6:	4770      	bx	lr

080165a8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80165a8:	b480      	push	{r7}
 80165aa:	b083      	sub	sp, #12
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	460b      	mov	r3, r1
 80165b2:	70fb      	strb	r3, [r7, #3]
 80165b4:	4613      	mov	r3, r2
 80165b6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80165b8:	e004      	b.n	80165c4 <memset1+0x1c>
    {
        *dst++ = value;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	1c5a      	adds	r2, r3, #1
 80165be:	607a      	str	r2, [r7, #4]
 80165c0:	78fa      	ldrb	r2, [r7, #3]
 80165c2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80165c4:	883b      	ldrh	r3, [r7, #0]
 80165c6:	1e5a      	subs	r2, r3, #1
 80165c8:	803a      	strh	r2, [r7, #0]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d1f5      	bne.n	80165ba <memset1+0x12>
    }
}
 80165ce:	bf00      	nop
 80165d0:	bf00      	nop
 80165d2:	370c      	adds	r7, #12
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bc80      	pop	{r7}
 80165d8:	4770      	bx	lr
	...

080165dc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80165dc:	b480      	push	{r7}
 80165de:	b085      	sub	sp, #20
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
 80165e4:	460b      	mov	r3, r1
 80165e6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80165e8:	f04f 33ff 	mov.w	r3, #4294967295
 80165ec:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d101      	bne.n	80165f8 <Crc32+0x1c>
    {
        return 0;
 80165f4:	2300      	movs	r3, #0
 80165f6:	e026      	b.n	8016646 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80165f8:	2300      	movs	r3, #0
 80165fa:	817b      	strh	r3, [r7, #10]
 80165fc:	e01d      	b.n	801663a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80165fe:	897b      	ldrh	r3, [r7, #10]
 8016600:	687a      	ldr	r2, [r7, #4]
 8016602:	4413      	add	r3, r2
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	461a      	mov	r2, r3
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	4053      	eors	r3, r2
 801660c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801660e:	2300      	movs	r3, #0
 8016610:	813b      	strh	r3, [r7, #8]
 8016612:	e00c      	b.n	801662e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	085a      	lsrs	r2, r3, #1
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	f003 0301 	and.w	r3, r3, #1
 801661e:	425b      	negs	r3, r3
 8016620:	490b      	ldr	r1, [pc, #44]	@ (8016650 <Crc32+0x74>)
 8016622:	400b      	ands	r3, r1
 8016624:	4053      	eors	r3, r2
 8016626:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016628:	893b      	ldrh	r3, [r7, #8]
 801662a:	3301      	adds	r3, #1
 801662c:	813b      	strh	r3, [r7, #8]
 801662e:	893b      	ldrh	r3, [r7, #8]
 8016630:	2b07      	cmp	r3, #7
 8016632:	d9ef      	bls.n	8016614 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016634:	897b      	ldrh	r3, [r7, #10]
 8016636:	3301      	adds	r3, #1
 8016638:	817b      	strh	r3, [r7, #10]
 801663a:	897a      	ldrh	r2, [r7, #10]
 801663c:	887b      	ldrh	r3, [r7, #2]
 801663e:	429a      	cmp	r2, r3
 8016640:	d3dd      	bcc.n	80165fe <Crc32+0x22>
        }
    }

    return ~crc;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	43db      	mvns	r3, r3
}
 8016646:	4618      	mov	r0, r3
 8016648:	3714      	adds	r7, #20
 801664a:	46bd      	mov	sp, r7
 801664c:	bc80      	pop	{r7}
 801664e:	4770      	bx	lr
 8016650:	edb88320 	.word	0xedb88320

08016654 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016654:	b480      	push	{r7}
 8016656:	b083      	sub	sp, #12
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	683a      	ldr	r2, [r7, #0]
 8016662:	619a      	str	r2, [r3, #24]
}
 8016664:	bf00      	nop
 8016666:	370c      	adds	r7, #12
 8016668:	46bd      	mov	sp, r7
 801666a:	bc80      	pop	{r7}
 801666c:	4770      	bx	lr

0801666e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 801666e:	b480      	push	{r7}
 8016670:	b083      	sub	sp, #12
 8016672:	af00      	add	r7, sp, #0
 8016674:	6078      	str	r0, [r7, #4]
 8016676:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	683a      	ldr	r2, [r7, #0]
 801667c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801667e:	bf00      	nop
 8016680:	370c      	adds	r7, #12
 8016682:	46bd      	mov	sp, r7
 8016684:	bc80      	pop	{r7}
 8016686:	4770      	bx	lr

08016688 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af02      	add	r7, sp, #8
 801668e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016690:	4a24      	ldr	r2, [pc, #144]	@ (8016724 <RadioInit+0x9c>)
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016696:	4b24      	ldr	r3, [pc, #144]	@ (8016728 <RadioInit+0xa0>)
 8016698:	2200      	movs	r2, #0
 801669a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801669c:	4b22      	ldr	r3, [pc, #136]	@ (8016728 <RadioInit+0xa0>)
 801669e:	2200      	movs	r2, #0
 80166a0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80166a2:	4b21      	ldr	r3, [pc, #132]	@ (8016728 <RadioInit+0xa0>)
 80166a4:	2200      	movs	r2, #0
 80166a6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80166a8:	4b1f      	ldr	r3, [pc, #124]	@ (8016728 <RadioInit+0xa0>)
 80166aa:	2200      	movs	r2, #0
 80166ac:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80166ae:	481f      	ldr	r0, [pc, #124]	@ (801672c <RadioInit+0xa4>)
 80166b0:	f001 fa38 	bl	8017b24 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80166b4:	4b1c      	ldr	r3, [pc, #112]	@ (8016728 <RadioInit+0xa0>)
 80166b6:	2200      	movs	r2, #0
 80166b8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80166ba:	4b1b      	ldr	r3, [pc, #108]	@ (8016728 <RadioInit+0xa0>)
 80166bc:	2200      	movs	r2, #0
 80166be:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80166c0:	f001 fcce 	bl	8018060 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80166c4:	2100      	movs	r1, #0
 80166c6:	2000      	movs	r0, #0
 80166c8:	f002 f89a 	bl	8018800 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80166cc:	2204      	movs	r2, #4
 80166ce:	2100      	movs	r1, #0
 80166d0:	2001      	movs	r0, #1
 80166d2:	f001 fe5d 	bl	8018390 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80166d6:	2300      	movs	r3, #0
 80166d8:	2200      	movs	r2, #0
 80166da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80166de:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80166e2:	f001 fd8d 	bl	8018200 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80166e6:	f000 fd4f 	bl	8017188 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80166ea:	2300      	movs	r3, #0
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	4b10      	ldr	r3, [pc, #64]	@ (8016730 <RadioInit+0xa8>)
 80166f0:	2200      	movs	r2, #0
 80166f2:	f04f 31ff 	mov.w	r1, #4294967295
 80166f6:	480f      	ldr	r0, [pc, #60]	@ (8016734 <RadioInit+0xac>)
 80166f8:	f003 fab6 	bl	8019c68 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80166fc:	2300      	movs	r3, #0
 80166fe:	9300      	str	r3, [sp, #0]
 8016700:	4b0d      	ldr	r3, [pc, #52]	@ (8016738 <RadioInit+0xb0>)
 8016702:	2200      	movs	r2, #0
 8016704:	f04f 31ff 	mov.w	r1, #4294967295
 8016708:	480c      	ldr	r0, [pc, #48]	@ (801673c <RadioInit+0xb4>)
 801670a:	f003 faad 	bl	8019c68 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801670e:	4809      	ldr	r0, [pc, #36]	@ (8016734 <RadioInit+0xac>)
 8016710:	f003 fb4e 	bl	8019db0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016714:	4809      	ldr	r0, [pc, #36]	@ (801673c <RadioInit+0xb4>)
 8016716:	f003 fb4b 	bl	8019db0 <UTIL_TIMER_Stop>
}
 801671a:	bf00      	nop
 801671c:	3708      	adds	r7, #8
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	200012d4 	.word	0x200012d4
 8016728:	200012d8 	.word	0x200012d8
 801672c:	080175ad 	.word	0x080175ad
 8016730:	0801751d 	.word	0x0801751d
 8016734:	20001334 	.word	0x20001334
 8016738:	08017531 	.word	0x08017531
 801673c:	2000134c 	.word	0x2000134c

08016740 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016740:	b580      	push	{r7, lr}
 8016742:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016744:	f001 fa36 	bl	8017bb4 <SUBGRF_GetOperatingMode>
 8016748:	4603      	mov	r3, r0
 801674a:	2b07      	cmp	r3, #7
 801674c:	d00a      	beq.n	8016764 <RadioGetStatus+0x24>
 801674e:	2b07      	cmp	r3, #7
 8016750:	dc0a      	bgt.n	8016768 <RadioGetStatus+0x28>
 8016752:	2b04      	cmp	r3, #4
 8016754:	d002      	beq.n	801675c <RadioGetStatus+0x1c>
 8016756:	2b05      	cmp	r3, #5
 8016758:	d002      	beq.n	8016760 <RadioGetStatus+0x20>
 801675a:	e005      	b.n	8016768 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801675c:	2302      	movs	r3, #2
 801675e:	e004      	b.n	801676a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016760:	2301      	movs	r3, #1
 8016762:	e002      	b.n	801676a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016764:	2303      	movs	r3, #3
 8016766:	e000      	b.n	801676a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016768:	2300      	movs	r3, #0
    }
}
 801676a:	4618      	mov	r0, r3
 801676c:	bd80      	pop	{r7, pc}
	...

08016770 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	4603      	mov	r3, r0
 8016778:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801677a:	4a1e      	ldr	r2, [pc, #120]	@ (80167f4 <RadioSetModem+0x84>)
 801677c:	79fb      	ldrb	r3, [r7, #7]
 801677e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016780:	79fb      	ldrb	r3, [r7, #7]
 8016782:	4618      	mov	r0, r3
 8016784:	f002 fc02 	bl	8018f8c <RFW_SetRadioModem>
    switch( modem )
 8016788:	79fb      	ldrb	r3, [r7, #7]
 801678a:	2b03      	cmp	r3, #3
 801678c:	d026      	beq.n	80167dc <RadioSetModem+0x6c>
 801678e:	2b03      	cmp	r3, #3
 8016790:	dc03      	bgt.n	801679a <RadioSetModem+0x2a>
 8016792:	2b00      	cmp	r3, #0
 8016794:	d008      	beq.n	80167a8 <RadioSetModem+0x38>
 8016796:	2b01      	cmp	r3, #1
 8016798:	d00d      	beq.n	80167b6 <RadioSetModem+0x46>
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801679a:	2003      	movs	r0, #3
 801679c:	f001 fdd2 	bl	8018344 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80167a0:	4b14      	ldr	r3, [pc, #80]	@ (80167f4 <RadioSetModem+0x84>)
 80167a2:	2200      	movs	r2, #0
 80167a4:	735a      	strb	r2, [r3, #13]
        break;
 80167a6:	e021      	b.n	80167ec <RadioSetModem+0x7c>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80167a8:	2000      	movs	r0, #0
 80167aa:	f001 fdcb 	bl	8018344 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80167ae:	4b11      	ldr	r3, [pc, #68]	@ (80167f4 <RadioSetModem+0x84>)
 80167b0:	2200      	movs	r2, #0
 80167b2:	735a      	strb	r2, [r3, #13]
        break;
 80167b4:	e01a      	b.n	80167ec <RadioSetModem+0x7c>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80167b6:	2001      	movs	r0, #1
 80167b8:	f001 fdc4 	bl	8018344 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80167bc:	4b0d      	ldr	r3, [pc, #52]	@ (80167f4 <RadioSetModem+0x84>)
 80167be:	7b5a      	ldrb	r2, [r3, #13]
 80167c0:	4b0c      	ldr	r3, [pc, #48]	@ (80167f4 <RadioSetModem+0x84>)
 80167c2:	7b1b      	ldrb	r3, [r3, #12]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d010      	beq.n	80167ea <RadioSetModem+0x7a>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80167c8:	4b0a      	ldr	r3, [pc, #40]	@ (80167f4 <RadioSetModem+0x84>)
 80167ca:	7b1a      	ldrb	r2, [r3, #12]
 80167cc:	4b09      	ldr	r3, [pc, #36]	@ (80167f4 <RadioSetModem+0x84>)
 80167ce:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80167d0:	4b08      	ldr	r3, [pc, #32]	@ (80167f4 <RadioSetModem+0x84>)
 80167d2:	7b5b      	ldrb	r3, [r3, #13]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f000 fe6b 	bl	80174b0 <RadioSetPublicNetwork>
        }
        break;
 80167da:	e006      	b.n	80167ea <RadioSetModem+0x7a>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80167dc:	2002      	movs	r0, #2
 80167de:	f001 fdb1 	bl	8018344 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80167e2:	4b04      	ldr	r3, [pc, #16]	@ (80167f4 <RadioSetModem+0x84>)
 80167e4:	2200      	movs	r2, #0
 80167e6:	735a      	strb	r2, [r3, #13]
        break;
 80167e8:	e000      	b.n	80167ec <RadioSetModem+0x7c>
        break;
 80167ea:	bf00      	nop
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
        break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80167ec:	bf00      	nop
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}
 80167f4:	200012d8 	.word	0x200012d8

080167f8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f001 fd59 	bl	80182b8 <SUBGRF_SetRfFrequency>
}
 8016806:	bf00      	nop
 8016808:	3708      	adds	r7, #8
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}

0801680e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801680e:	b580      	push	{r7, lr}
 8016810:	b090      	sub	sp, #64	@ 0x40
 8016812:	af0a      	add	r7, sp, #40	@ 0x28
 8016814:	60f8      	str	r0, [r7, #12]
 8016816:	60b9      	str	r1, [r7, #8]
 8016818:	603b      	str	r3, [r7, #0]
 801681a:	4613      	mov	r3, r2
 801681c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801681e:	2301      	movs	r3, #1
 8016820:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016822:	2300      	movs	r3, #0
 8016824:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016826:	2300      	movs	r3, #0
 8016828:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801682a:	f000 fcc0 	bl	80171ae <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801682e:	2000      	movs	r0, #0
 8016830:	f7ff ff9e 	bl	8016770 <RadioSetModem>

    RadioSetChannel( freq );
 8016834:	68f8      	ldr	r0, [r7, #12]
 8016836:	f7ff ffdf 	bl	80167f8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801683a:	2301      	movs	r3, #1
 801683c:	9309      	str	r3, [sp, #36]	@ 0x24
 801683e:	2300      	movs	r3, #0
 8016840:	9308      	str	r3, [sp, #32]
 8016842:	2300      	movs	r3, #0
 8016844:	9307      	str	r3, [sp, #28]
 8016846:	2300      	movs	r3, #0
 8016848:	9306      	str	r3, [sp, #24]
 801684a:	2300      	movs	r3, #0
 801684c:	9305      	str	r3, [sp, #20]
 801684e:	2300      	movs	r3, #0
 8016850:	9304      	str	r3, [sp, #16]
 8016852:	2300      	movs	r3, #0
 8016854:	9303      	str	r3, [sp, #12]
 8016856:	2300      	movs	r3, #0
 8016858:	9302      	str	r3, [sp, #8]
 801685a:	2303      	movs	r3, #3
 801685c:	9301      	str	r3, [sp, #4]
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	9300      	str	r3, [sp, #0]
 8016862:	2300      	movs	r3, #0
 8016864:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8016868:	68b9      	ldr	r1, [r7, #8]
 801686a:	2000      	movs	r0, #0
 801686c:	f000 f83c 	bl	80168e8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016870:	2000      	movs	r0, #0
 8016872:	f000 fca3 	bl	80171bc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016876:	f000 fe49 	bl	801750c <RadioGetWakeupTime>
 801687a:	4603      	mov	r3, r0
 801687c:	4618      	mov	r0, r3
 801687e:	f7ea fed5 	bl	800162c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016882:	f003 fb2f 	bl	8019ee4 <UTIL_TIMER_GetCurrentTime>
 8016886:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016888:	e00d      	b.n	80168a6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801688a:	2000      	movs	r0, #0
 801688c:	f000 fd90 	bl	80173b0 <RadioRssi>
 8016890:	4603      	mov	r3, r0
 8016892:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016894:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801689c:	429a      	cmp	r2, r3
 801689e:	dd02      	ble.n	80168a6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80168a0:	2300      	movs	r3, #0
 80168a2:	75fb      	strb	r3, [r7, #23]
            break;
 80168a4:	e006      	b.n	80168b4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80168a6:	6938      	ldr	r0, [r7, #16]
 80168a8:	f003 fb2e 	bl	8019f08 <UTIL_TIMER_GetElapsedTime>
 80168ac:	4602      	mov	r2, r0
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	4293      	cmp	r3, r2
 80168b2:	d8ea      	bhi.n	801688a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80168b4:	f000 fc7b 	bl	80171ae <RadioStandby>

    return status;
 80168b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3718      	adds	r7, #24
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b082      	sub	sp, #8
 80168c6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80168c8:	2300      	movs	r3, #0
 80168ca:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80168cc:	2300      	movs	r3, #0
 80168ce:	2200      	movs	r2, #0
 80168d0:	2100      	movs	r1, #0
 80168d2:	2000      	movs	r0, #0
 80168d4:	f001 fc94 	bl	8018200 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80168d8:	f001 fa3d 	bl	8017d56 <SUBGRF_GetRandom>
 80168dc:	6078      	str	r0, [r7, #4]

    return rnd;
 80168de:	687b      	ldr	r3, [r7, #4]
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}

080168e8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b086      	sub	sp, #24
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	60b9      	str	r1, [r7, #8]
 80168f0:	607a      	str	r2, [r7, #4]
 80168f2:	461a      	mov	r2, r3
 80168f4:	4603      	mov	r3, r0
 80168f6:	73fb      	strb	r3, [r7, #15]
 80168f8:	4613      	mov	r3, r2
 80168fa:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80168fc:	4a93      	ldr	r2, [pc, #588]	@ (8016b4c <RadioSetRxConfig+0x264>)
 80168fe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016902:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8016904:	f002 fb00 	bl	8018f08 <RFW_DeInit>
    if( rxContinuous == true )
 8016908:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801690c:	2b00      	cmp	r3, #0
 801690e:	d001      	beq.n	8016914 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016910:	2300      	movs	r3, #0
 8016912:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
    if( fixLen == true )
 8016914:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016918:	2b00      	cmp	r3, #0
 801691a:	d004      	beq.n	8016926 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801691c:	4a8c      	ldr	r2, [pc, #560]	@ (8016b50 <RadioSetRxConfig+0x268>)
 801691e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016922:	7013      	strb	r3, [r2, #0]
 8016924:	e002      	b.n	801692c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016926:	4b8a      	ldr	r3, [pc, #552]	@ (8016b50 <RadioSetRxConfig+0x268>)
 8016928:	22ff      	movs	r2, #255	@ 0xff
 801692a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801692c:	7bfb      	ldrb	r3, [r7, #15]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d002      	beq.n	8016938 <RadioSetRxConfig+0x50>
 8016932:	2b01      	cmp	r3, #1
 8016934:	d068      	beq.n	8016a08 <RadioSetRxConfig+0x120>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016936:	e105      	b.n	8016b44 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016938:	2000      	movs	r0, #0
 801693a:	f001 fb53 	bl	8017fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801693e:	4b83      	ldr	r3, [pc, #524]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016940:	2200      	movs	r2, #0
 8016942:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016946:	4a81      	ldr	r2, [pc, #516]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801694c:	4b7f      	ldr	r3, [pc, #508]	@ (8016b4c <RadioSetRxConfig+0x264>)
 801694e:	220b      	movs	r2, #11
 8016950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016954:	68b8      	ldr	r0, [r7, #8]
 8016956:	f002 fa17 	bl	8018d88 <SUBGRF_GetFskBandwidthRegValue>
 801695a:	4603      	mov	r3, r0
 801695c:	461a      	mov	r2, r3
 801695e:	4b7b      	ldr	r3, [pc, #492]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016964:	4b79      	ldr	r3, [pc, #484]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016966:	2200      	movs	r2, #0
 8016968:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801696a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	b29a      	uxth	r2, r3
 8016970:	4b76      	ldr	r3, [pc, #472]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016972:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016974:	4b75      	ldr	r3, [pc, #468]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016976:	2204      	movs	r2, #4
 8016978:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801697a:	4b74      	ldr	r3, [pc, #464]	@ (8016b4c <RadioSetRxConfig+0x264>)
 801697c:	2218      	movs	r2, #24
 801697e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016980:	4b72      	ldr	r3, [pc, #456]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016982:	2200      	movs	r2, #0
 8016984:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016986:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801698a:	f083 0301 	eor.w	r3, r3, #1
 801698e:	b2db      	uxtb	r3, r3
 8016990:	461a      	mov	r2, r3
 8016992:	4b6e      	ldr	r3, [pc, #440]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016994:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016996:	4b6e      	ldr	r3, [pc, #440]	@ (8016b50 <RadioSetRxConfig+0x268>)
 8016998:	781a      	ldrb	r2, [r3, #0]
 801699a:	4b6c      	ldr	r3, [pc, #432]	@ (8016b4c <RadioSetRxConfig+0x264>)
 801699c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801699e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d003      	beq.n	80169ae <RadioSetRxConfig+0xc6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80169a6:	4b69      	ldr	r3, [pc, #420]	@ (8016b4c <RadioSetRxConfig+0x264>)
 80169a8:	22f2      	movs	r2, #242	@ 0xf2
 80169aa:	75da      	strb	r2, [r3, #23]
 80169ac:	e002      	b.n	80169b4 <RadioSetRxConfig+0xcc>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80169ae:	4b67      	ldr	r3, [pc, #412]	@ (8016b4c <RadioSetRxConfig+0x264>)
 80169b0:	2201      	movs	r2, #1
 80169b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80169b4:	4b65      	ldr	r3, [pc, #404]	@ (8016b4c <RadioSetRxConfig+0x264>)
 80169b6:	2201      	movs	r2, #1
 80169b8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80169ba:	f000 fbf8 	bl	80171ae <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80169be:	2000      	movs	r0, #0
 80169c0:	f7ff fed6 	bl	8016770 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80169c4:	4863      	ldr	r0, [pc, #396]	@ (8016b54 <RadioSetRxConfig+0x26c>)
 80169c6:	f001 fdb1 	bl	801852c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80169ca:	4863      	ldr	r0, [pc, #396]	@ (8016b58 <RadioSetRxConfig+0x270>)
 80169cc:	f001 fe7c 	bl	80186c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80169d0:	4a62      	ldr	r2, [pc, #392]	@ (8016b5c <RadioSetRxConfig+0x274>)
 80169d2:	f107 0310 	add.w	r3, r7, #16
 80169d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80169da:	e883 0003 	stmia.w	r3, {r0, r1}
 80169de:	f107 0310 	add.w	r3, r7, #16
 80169e2:	4618      	mov	r0, r3
 80169e4:	f001 f935 	bl	8017c52 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80169e8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80169ec:	f001 f980 	bl	8017cf0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80169f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80169f2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80169f6:	fb02 f303 	mul.w	r3, r2, r3
 80169fa:	461a      	mov	r2, r3
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a02:	4a52      	ldr	r2, [pc, #328]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a04:	6093      	str	r3, [r2, #8]
            break;
 8016a06:	e09d      	b.n	8016b44 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016a08:	2000      	movs	r0, #0
 8016a0a:	f001 faeb 	bl	8017fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a10:	2201      	movs	r2, #1
 8016a12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	b2da      	uxtb	r2, r3
 8016a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016a20:	4a4f      	ldr	r2, [pc, #316]	@ (8016b60 <RadioSetRxConfig+0x278>)
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	4413      	add	r3, r2
 8016a26:	781a      	ldrb	r2, [r3, #0]
 8016a28:	4b48      	ldr	r3, [pc, #288]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016a2e:	4a47      	ldr	r2, [pc, #284]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a30:	7bbb      	ldrb	r3, [r7, #14]
 8016a32:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d105      	bne.n	8016a48 <RadioSetRxConfig+0x160>
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2b0b      	cmp	r3, #11
 8016a40:	d008      	beq.n	8016a54 <RadioSetRxConfig+0x16c>
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2b0c      	cmp	r3, #12
 8016a46:	d005      	beq.n	8016a54 <RadioSetRxConfig+0x16c>
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	d107      	bne.n	8016a5e <RadioSetRxConfig+0x176>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2b0c      	cmp	r3, #12
 8016a52:	d104      	bne.n	8016a5e <RadioSetRxConfig+0x176>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016a54:	4b3d      	ldr	r3, [pc, #244]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a56:	2201      	movs	r2, #1
 8016a58:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8016a5c:	e003      	b.n	8016a66 <RadioSetRxConfig+0x17e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a60:	2200      	movs	r2, #0
 8016a62:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016a66:	4b39      	ldr	r3, [pc, #228]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a68:	2201      	movs	r2, #1
 8016a6a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016a6c:	4b37      	ldr	r3, [pc, #220]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016a72:	2b05      	cmp	r3, #5
 8016a74:	d004      	beq.n	8016a80 <RadioSetRxConfig+0x198>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016a76:	4b35      	ldr	r3, [pc, #212]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016a7c:	2b06      	cmp	r3, #6
 8016a7e:	d10a      	bne.n	8016a96 <RadioSetRxConfig+0x1ae>
                if( preambleLen < 12 )
 8016a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a82:	2b0b      	cmp	r3, #11
 8016a84:	d803      	bhi.n	8016a8e <RadioSetRxConfig+0x1a6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016a86:	4b31      	ldr	r3, [pc, #196]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a88:	220c      	movs	r2, #12
 8016a8a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016a8c:	e006      	b.n	8016a9c <RadioSetRxConfig+0x1b4>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a92:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016a94:	e002      	b.n	8016a9c <RadioSetRxConfig+0x1b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016a96:	4a2d      	ldr	r2, [pc, #180]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016a98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a9a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016a9c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016aa2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8016b50 <RadioSetRxConfig+0x268>)
 8016aa6:	781a      	ldrb	r2, [r3, #0]
 8016aa8:	4b28      	ldr	r3, [pc, #160]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016aaa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016aac:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8016ab0:	4b26      	ldr	r3, [pc, #152]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016ab2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016ab6:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8016aba:	4b24      	ldr	r3, [pc, #144]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016abc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8016ac0:	f000 fb75 	bl	80171ae <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016ac4:	2001      	movs	r0, #1
 8016ac6:	f7ff fe53 	bl	8016770 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016aca:	4822      	ldr	r0, [pc, #136]	@ (8016b54 <RadioSetRxConfig+0x26c>)
 8016acc:	f001 fd2e 	bl	801852c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ad0:	4821      	ldr	r0, [pc, #132]	@ (8016b58 <RadioSetRxConfig+0x270>)
 8016ad2:	f001 fdf9 	bl	80186c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016ad6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016ad8:	b2db      	uxtb	r3, r3
 8016ada:	4618      	mov	r0, r3
 8016adc:	f001 fa91 	bl	8018002 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8016ae0:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8016ae4:	f001 ff4a 	bl	801897c <SUBGRF_ReadRegister>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	f003 0301 	and.w	r3, r3, #1
 8016aee:	b2db      	uxtb	r3, r3
 8016af0:	4619      	mov	r1, r3
 8016af2:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8016af6:	f001 ff2d 	bl	8018954 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016afa:	4b14      	ldr	r3, [pc, #80]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016afc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	d10d      	bne.n	8016b20 <RadioSetRxConfig+0x238>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016b04:	f240 7036 	movw	r0, #1846	@ 0x736
 8016b08:	f001 ff38 	bl	801897c <SUBGRF_ReadRegister>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	f023 0304 	bic.w	r3, r3, #4
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	4619      	mov	r1, r3
 8016b16:	f240 7036 	movw	r0, #1846	@ 0x736
 8016b1a:	f001 ff1b 	bl	8018954 <SUBGRF_WriteRegister>
 8016b1e:	e00c      	b.n	8016b3a <RadioSetRxConfig+0x252>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8016b20:	f240 7036 	movw	r0, #1846	@ 0x736
 8016b24:	f001 ff2a 	bl	801897c <SUBGRF_ReadRegister>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	f043 0304 	orr.w	r3, r3, #4
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	4619      	mov	r1, r3
 8016b32:	f240 7036 	movw	r0, #1846	@ 0x736
 8016b36:	f001 ff0d 	bl	8018954 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016b3a:	4b04      	ldr	r3, [pc, #16]	@ (8016b4c <RadioSetRxConfig+0x264>)
 8016b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b40:	609a      	str	r2, [r3, #8]
            break;
 8016b42:	bf00      	nop
    }
}
 8016b44:	bf00      	nop
 8016b46:	3718      	adds	r7, #24
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	200012d8 	.word	0x200012d8
 8016b50:	200000d8 	.word	0x200000d8
 8016b54:	20001310 	.word	0x20001310
 8016b58:	200012e6 	.word	0x200012e6
 8016b5c:	0802048c 	.word	0x0802048c
 8016b60:	08020c38 	.word	0x08020c38

08016b64 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b086      	sub	sp, #24
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60ba      	str	r2, [r7, #8]
 8016b6c:	607b      	str	r3, [r7, #4]
 8016b6e:	4603      	mov	r3, r0
 8016b70:	73fb      	strb	r3, [r7, #15]
 8016b72:	460b      	mov	r3, r1
 8016b74:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8016b76:	f002 f9c7 	bl	8018f08 <RFW_DeInit>
    switch( modem )
 8016b7a:	7bfb      	ldrb	r3, [r7, #15]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d002      	beq.n	8016b86 <RadioSetTxConfig+0x22>
 8016b80:	2b01      	cmp	r3, #1
 8016b82:	d059      	beq.n	8016c38 <RadioSetTxConfig+0xd4>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8016b84:	e0be      	b.n	8016d04 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016b86:	4b6d      	ldr	r3, [pc, #436]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016b88:	2200      	movs	r2, #0
 8016b8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016b8e:	4a6b      	ldr	r2, [pc, #428]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016b90:	6a3b      	ldr	r3, [r7, #32]
 8016b92:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016b94:	4b69      	ldr	r3, [pc, #420]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016b96:	220b      	movs	r2, #11
 8016b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f002 f8f3 	bl	8018d88 <SUBGRF_GetFskBandwidthRegValue>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	4b65      	ldr	r3, [pc, #404]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016bac:	4a63      	ldr	r2, [pc, #396]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016bb2:	4b62      	ldr	r3, [pc, #392]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016bb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016bba:	00db      	lsls	r3, r3, #3
 8016bbc:	b29a      	uxth	r2, r3
 8016bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bc0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bc4:	2204      	movs	r2, #4
 8016bc6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bca:	2218      	movs	r2, #24
 8016bcc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016bce:	4b5b      	ldr	r3, [pc, #364]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016bd8:	f083 0301 	eor.w	r3, r3, #1
 8016bdc:	b2db      	uxtb	r3, r3
 8016bde:	461a      	mov	r2, r3
 8016be0:	4b56      	ldr	r3, [pc, #344]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016be2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016be4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d003      	beq.n	8016bf4 <RadioSetTxConfig+0x90>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016bec:	4b53      	ldr	r3, [pc, #332]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bee:	22f2      	movs	r2, #242	@ 0xf2
 8016bf0:	75da      	strb	r2, [r3, #23]
 8016bf2:	e002      	b.n	8016bfa <RadioSetTxConfig+0x96>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016bf4:	4b51      	ldr	r3, [pc, #324]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bf6:	2201      	movs	r2, #1
 8016bf8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016bfa:	4b50      	ldr	r3, [pc, #320]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016c00:	f000 fad5 	bl	80171ae <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8016c04:	2000      	movs	r0, #0
 8016c06:	f7ff fdb3 	bl	8016770 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016c0a:	484d      	ldr	r0, [pc, #308]	@ (8016d40 <RadioSetTxConfig+0x1dc>)
 8016c0c:	f001 fc8e 	bl	801852c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c10:	484c      	ldr	r0, [pc, #304]	@ (8016d44 <RadioSetTxConfig+0x1e0>)
 8016c12:	f001 fd59 	bl	80186c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016c16:	4a4c      	ldr	r2, [pc, #304]	@ (8016d48 <RadioSetTxConfig+0x1e4>)
 8016c18:	f107 0310 	add.w	r3, r7, #16
 8016c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c20:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c24:	f107 0310 	add.w	r3, r7, #16
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f001 f812 	bl	8017c52 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016c2e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016c32:	f001 f85d 	bl	8017cf0 <SUBGRF_SetWhiteningSeed>
            break;
 8016c36:	e065      	b.n	8016d04 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016c38:	4b40      	ldr	r3, [pc, #256]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016c40:	6a3b      	ldr	r3, [r7, #32]
 8016c42:	b2da      	uxtb	r2, r3
 8016c44:	4b3d      	ldr	r3, [pc, #244]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016c4a:	4a40      	ldr	r2, [pc, #256]	@ (8016d4c <RadioSetTxConfig+0x1e8>)
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	4413      	add	r3, r2
 8016c50:	781a      	ldrb	r2, [r3, #0]
 8016c52:	4b3a      	ldr	r3, [pc, #232]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016c58:	4a38      	ldr	r2, [pc, #224]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016c5e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d105      	bne.n	8016c74 <RadioSetTxConfig+0x110>
 8016c68:	6a3b      	ldr	r3, [r7, #32]
 8016c6a:	2b0b      	cmp	r3, #11
 8016c6c:	d008      	beq.n	8016c80 <RadioSetTxConfig+0x11c>
 8016c6e:	6a3b      	ldr	r3, [r7, #32]
 8016c70:	2b0c      	cmp	r3, #12
 8016c72:	d005      	beq.n	8016c80 <RadioSetTxConfig+0x11c>
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2b01      	cmp	r3, #1
 8016c78:	d107      	bne.n	8016c8a <RadioSetTxConfig+0x126>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016c7a:	6a3b      	ldr	r3, [r7, #32]
 8016c7c:	2b0c      	cmp	r3, #12
 8016c7e:	d104      	bne.n	8016c8a <RadioSetTxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016c80:	4b2e      	ldr	r3, [pc, #184]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c82:	2201      	movs	r2, #1
 8016c84:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8016c88:	e003      	b.n	8016c92 <RadioSetTxConfig+0x12e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016c92:	4b2a      	ldr	r3, [pc, #168]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c94:	2201      	movs	r2, #1
 8016c96:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016c98:	4b28      	ldr	r3, [pc, #160]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016c9e:	2b05      	cmp	r3, #5
 8016ca0:	d004      	beq.n	8016cac <RadioSetTxConfig+0x148>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016ca2:	4b26      	ldr	r3, [pc, #152]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016ca8:	2b06      	cmp	r3, #6
 8016caa:	d10a      	bne.n	8016cc2 <RadioSetTxConfig+0x15e>
                if( preambleLen < 12 )
 8016cac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016cae:	2b0b      	cmp	r3, #11
 8016cb0:	d803      	bhi.n	8016cba <RadioSetTxConfig+0x156>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016cb2:	4b22      	ldr	r3, [pc, #136]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016cb4:	220c      	movs	r2, #12
 8016cb6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016cb8:	e006      	b.n	8016cc8 <RadioSetTxConfig+0x164>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016cba:	4a20      	ldr	r2, [pc, #128]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016cbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016cbe:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016cc0:	e002      	b.n	8016cc8 <RadioSetTxConfig+0x164>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016cc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016cc6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016cc8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016cce:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8016d50 <RadioSetTxConfig+0x1ec>)
 8016cd2:	781a      	ldrb	r2, [r3, #0]
 8016cd4:	4b19      	ldr	r3, [pc, #100]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016cd6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016cd8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8016cdc:	4b17      	ldr	r3, [pc, #92]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016cde:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016ce2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016ce6:	4b15      	ldr	r3, [pc, #84]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8016cec:	f000 fa5f 	bl	80171ae <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016cf0:	2001      	movs	r0, #1
 8016cf2:	f7ff fd3d 	bl	8016770 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016cf6:	4812      	ldr	r0, [pc, #72]	@ (8016d40 <RadioSetTxConfig+0x1dc>)
 8016cf8:	f001 fc18 	bl	801852c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016cfc:	4811      	ldr	r0, [pc, #68]	@ (8016d44 <RadioSetTxConfig+0x1e0>)
 8016cfe:	f001 fce3 	bl	80186c8 <SUBGRF_SetPacketParams>
            break;
 8016d02:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f001 ff3f 	bl	8018b8c <SUBGRF_SetRfTxPower>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	461a      	mov	r2, r3
 8016d12:	4b0a      	ldr	r3, [pc, #40]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016d14:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8016d18:	210e      	movs	r1, #14
 8016d1a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8016d1e:	f001 fe19 	bl	8018954 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8016d22:	4b06      	ldr	r3, [pc, #24]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016d24:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f002 f901 	bl	8018f30 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016d2e:	4a03      	ldr	r2, [pc, #12]	@ (8016d3c <RadioSetTxConfig+0x1d8>)
 8016d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d32:	6053      	str	r3, [r2, #4]
}
 8016d34:	bf00      	nop
 8016d36:	3718      	adds	r7, #24
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	200012d8 	.word	0x200012d8
 8016d40:	20001310 	.word	0x20001310
 8016d44:	200012e6 	.word	0x200012e6
 8016d48:	0802048c 	.word	0x0802048c
 8016d4c:	08020c38 	.word	0x08020c38
 8016d50:	200000d8 	.word	0x200000d8

08016d54 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016d54:	b480      	push	{r7}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
    return true;
 8016d5c:	2301      	movs	r3, #1
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	370c      	adds	r7, #12
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bc80      	pop	{r7}
 8016d66:	4770      	bx	lr

08016d68 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b085      	sub	sp, #20
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	4603      	mov	r3, r0
 8016d70:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016d72:	2300      	movs	r3, #0
 8016d74:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016d76:	79fb      	ldrb	r3, [r7, #7]
 8016d78:	2b0a      	cmp	r3, #10
 8016d7a:	d83e      	bhi.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
 8016d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8016d84 <RadioGetLoRaBandwidthInHz+0x1c>)
 8016d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d82:	bf00      	nop
 8016d84:	08016db1 	.word	0x08016db1
 8016d88:	08016dc1 	.word	0x08016dc1
 8016d8c:	08016dd1 	.word	0x08016dd1
 8016d90:	08016de1 	.word	0x08016de1
 8016d94:	08016de9 	.word	0x08016de9
 8016d98:	08016def 	.word	0x08016def
 8016d9c:	08016df5 	.word	0x08016df5
 8016da0:	08016dfb 	.word	0x08016dfb
 8016da4:	08016db9 	.word	0x08016db9
 8016da8:	08016dc9 	.word	0x08016dc9
 8016dac:	08016dd9 	.word	0x08016dd9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016db0:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8016db4:	60fb      	str	r3, [r7, #12]
        break;
 8016db6:	e020      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016db8:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8016dbc:	60fb      	str	r3, [r7, #12]
        break;
 8016dbe:	e01c      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016dc0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8016dc4:	60fb      	str	r3, [r7, #12]
        break;
 8016dc6:	e018      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016dc8:	f245 1361 	movw	r3, #20833	@ 0x5161
 8016dcc:	60fb      	str	r3, [r7, #12]
        break;
 8016dce:	e014      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016dd0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8016dd4:	60fb      	str	r3, [r7, #12]
        break;
 8016dd6:	e010      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016dd8:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8016ddc:	60fb      	str	r3, [r7, #12]
        break;
 8016dde:	e00c      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016de0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8016de4:	60fb      	str	r3, [r7, #12]
        break;
 8016de6:	e008      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016de8:	4b07      	ldr	r3, [pc, #28]	@ (8016e08 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016dea:	60fb      	str	r3, [r7, #12]
        break;
 8016dec:	e005      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016dee:	4b07      	ldr	r3, [pc, #28]	@ (8016e0c <RadioGetLoRaBandwidthInHz+0xa4>)
 8016df0:	60fb      	str	r3, [r7, #12]
        break;
 8016df2:	e002      	b.n	8016dfa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016df4:	4b06      	ldr	r3, [pc, #24]	@ (8016e10 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016df6:	60fb      	str	r3, [r7, #12]
        break;
 8016df8:	bf00      	nop
    }

    return bandwidthInHz;
 8016dfa:	68fb      	ldr	r3, [r7, #12]
}
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	3714      	adds	r7, #20
 8016e00:	46bd      	mov	sp, r7
 8016e02:	bc80      	pop	{r7}
 8016e04:	4770      	bx	lr
 8016e06:	bf00      	nop
 8016e08:	0001e848 	.word	0x0001e848
 8016e0c:	0003d090 	.word	0x0003d090
 8016e10:	0007a120 	.word	0x0007a120

08016e14 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e14:	b480      	push	{r7}
 8016e16:	b083      	sub	sp, #12
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
 8016e1c:	4608      	mov	r0, r1
 8016e1e:	4611      	mov	r1, r2
 8016e20:	461a      	mov	r2, r3
 8016e22:	4603      	mov	r3, r0
 8016e24:	70fb      	strb	r3, [r7, #3]
 8016e26:	460b      	mov	r3, r1
 8016e28:	803b      	strh	r3, [r7, #0]
 8016e2a:	4613      	mov	r3, r2
 8016e2c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8016e2e:	883b      	ldrh	r3, [r7, #0]
 8016e30:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e32:	78ba      	ldrb	r2, [r7, #2]
 8016e34:	f082 0201 	eor.w	r2, r2, #1
 8016e38:	b2d2      	uxtb	r2, r2
 8016e3a:	2a00      	cmp	r2, #0
 8016e3c:	d001      	beq.n	8016e42 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016e3e:	2208      	movs	r2, #8
 8016e40:	e000      	b.n	8016e44 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016e42:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016e44:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e46:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016e4a:	7c3b      	ldrb	r3, [r7, #16]
 8016e4c:	7d39      	ldrb	r1, [r7, #20]
 8016e4e:	2900      	cmp	r1, #0
 8016e50:	d001      	beq.n	8016e56 <RadioGetGfskTimeOnAirNumerator+0x42>
 8016e52:	2102      	movs	r1, #2
 8016e54:	e000      	b.n	8016e58 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016e56:	2100      	movs	r1, #0
 8016e58:	440b      	add	r3, r1
 8016e5a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e5c:	4413      	add	r3, r2
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	370c      	adds	r7, #12
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bc80      	pop	{r7}
 8016e66:	4770      	bx	lr

08016e68 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e68:	b480      	push	{r7}
 8016e6a:	b08b      	sub	sp, #44	@ 0x2c
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	60f8      	str	r0, [r7, #12]
 8016e70:	60b9      	str	r1, [r7, #8]
 8016e72:	4611      	mov	r1, r2
 8016e74:	461a      	mov	r2, r3
 8016e76:	460b      	mov	r3, r1
 8016e78:	71fb      	strb	r3, [r7, #7]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016e7e:	79fb      	ldrb	r3, [r7, #7]
 8016e80:	3304      	adds	r3, #4
 8016e82:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016e84:	2300      	movs	r3, #0
 8016e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016e8a:	68bb      	ldr	r3, [r7, #8]
 8016e8c:	2b05      	cmp	r3, #5
 8016e8e:	d002      	beq.n	8016e96 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	2b06      	cmp	r3, #6
 8016e94:	d104      	bne.n	8016ea0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016e96:	88bb      	ldrh	r3, [r7, #4]
 8016e98:	2b0b      	cmp	r3, #11
 8016e9a:	d801      	bhi.n	8016ea0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016e9c:	230c      	movs	r3, #12
 8016e9e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d105      	bne.n	8016eb2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	2b0b      	cmp	r3, #11
 8016eaa:	d008      	beq.n	8016ebe <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	2b0c      	cmp	r3, #12
 8016eb0:	d005      	beq.n	8016ebe <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2b01      	cmp	r3, #1
 8016eb6:	d105      	bne.n	8016ec4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	2b0c      	cmp	r3, #12
 8016ebc:	d102      	bne.n	8016ec4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ec4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8016ec8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016eca:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016ece:	2a00      	cmp	r2, #0
 8016ed0:	d001      	beq.n	8016ed6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016ed2:	2210      	movs	r2, #16
 8016ed4:	e000      	b.n	8016ed8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016ed6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ed8:	4413      	add	r3, r2
 8016eda:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016edc:	68bb      	ldr	r3, [r7, #8]
 8016ede:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016ee0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016ee2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8016ee6:	2a00      	cmp	r2, #0
 8016ee8:	d001      	beq.n	8016eee <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016eea:	2200      	movs	r2, #0
 8016eec:	e000      	b.n	8016ef0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016eee:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016ef0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ef2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	2b06      	cmp	r3, #6
 8016ef8:	d803      	bhi.n	8016f02 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	009b      	lsls	r3, r3, #2
 8016efe:	623b      	str	r3, [r7, #32]
 8016f00:	e00e      	b.n	8016f20 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016f02:	69fb      	ldr	r3, [r7, #28]
 8016f04:	3308      	adds	r3, #8
 8016f06:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d004      	beq.n	8016f1a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	3b02      	subs	r3, #2
 8016f14:	009b      	lsls	r3, r3, #2
 8016f16:	623b      	str	r3, [r7, #32]
 8016f18:	e002      	b.n	8016f20 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	009b      	lsls	r3, r3, #2
 8016f1e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	da01      	bge.n	8016f2a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016f26:	2300      	movs	r3, #0
 8016f28:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8016f2a:	69fa      	ldr	r2, [r7, #28]
 8016f2c:	6a3b      	ldr	r3, [r7, #32]
 8016f2e:	4413      	add	r3, r2
 8016f30:	1e5a      	subs	r2, r3, #1
 8016f32:	6a3b      	ldr	r3, [r7, #32]
 8016f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f38:	697a      	ldr	r2, [r7, #20]
 8016f3a:	fb03 f202 	mul.w	r2, r3, r2
 8016f3e:	88bb      	ldrh	r3, [r7, #4]
 8016f40:	4413      	add	r3, r2
    int32_t intermediate =
 8016f42:	330c      	adds	r3, #12
 8016f44:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	2b06      	cmp	r3, #6
 8016f4a:	d802      	bhi.n	8016f52 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	3302      	adds	r3, #2
 8016f50:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8016f52:	69bb      	ldr	r3, [r7, #24]
 8016f54:	009b      	lsls	r3, r3, #2
 8016f56:	1c5a      	adds	r2, r3, #1
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	3b02      	subs	r3, #2
 8016f5c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	372c      	adds	r7, #44	@ 0x2c
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bc80      	pop	{r7}
 8016f68:	4770      	bx	lr
	...

08016f6c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b08a      	sub	sp, #40	@ 0x28
 8016f70:	af04      	add	r7, sp, #16
 8016f72:	60b9      	str	r1, [r7, #8]
 8016f74:	607a      	str	r2, [r7, #4]
 8016f76:	461a      	mov	r2, r3
 8016f78:	4603      	mov	r3, r0
 8016f7a:	73fb      	strb	r3, [r7, #15]
 8016f7c:	4613      	mov	r3, r2
 8016f7e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8016f80:	2300      	movs	r3, #0
 8016f82:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8016f84:	2301      	movs	r3, #1
 8016f86:	613b      	str	r3, [r7, #16]

    switch( modem )
 8016f88:	7bfb      	ldrb	r3, [r7, #15]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d002      	beq.n	8016f94 <RadioTimeOnAir+0x28>
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	d017      	beq.n	8016fc2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8016f92:	e035      	b.n	8017000 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8016f94:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8016f98:	8c3a      	ldrh	r2, [r7, #32]
 8016f9a:	7bb9      	ldrb	r1, [r7, #14]
 8016f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016fa0:	9301      	str	r3, [sp, #4]
 8016fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	4603      	mov	r3, r0
 8016faa:	6878      	ldr	r0, [r7, #4]
 8016fac:	f7ff ff32 	bl	8016e14 <RadioGetGfskTimeOnAirNumerator>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016fb6:	fb02 f303 	mul.w	r3, r2, r3
 8016fba:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	613b      	str	r3, [r7, #16]
        break;
 8016fc0:	e01e      	b.n	8017000 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8016fc2:	8c39      	ldrh	r1, [r7, #32]
 8016fc4:	7bba      	ldrb	r2, [r7, #14]
 8016fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016fca:	9302      	str	r3, [sp, #8]
 8016fcc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016fd0:	9301      	str	r3, [sp, #4]
 8016fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	6879      	ldr	r1, [r7, #4]
 8016fdc:	68b8      	ldr	r0, [r7, #8]
 8016fde:	f7ff ff43 	bl	8016e68 <RadioGetLoRaTimeOnAirNumerator>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016fe8:	fb02 f303 	mul.w	r3, r2, r3
 8016fec:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8016fee:	4a0a      	ldr	r2, [pc, #40]	@ (8017018 <RadioTimeOnAir+0xac>)
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	4413      	add	r3, r2
 8016ff4:	781b      	ldrb	r3, [r3, #0]
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f7ff feb6 	bl	8016d68 <RadioGetLoRaBandwidthInHz>
 8016ffc:	6138      	str	r0, [r7, #16]
        break;
 8016ffe:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8017000:	697a      	ldr	r2, [r7, #20]
 8017002:	693b      	ldr	r3, [r7, #16]
 8017004:	4413      	add	r3, r2
 8017006:	1e5a      	subs	r2, r3, #1
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801700e:	4618      	mov	r0, r3
 8017010:	3718      	adds	r7, #24
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	08020c38 	.word	0x08020c38

0801701c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b084      	sub	sp, #16
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
 8017024:	460b      	mov	r3, r1
 8017026:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017028:	2300      	movs	r3, #0
 801702a:	2200      	movs	r2, #0
 801702c:	f240 2101 	movw	r1, #513	@ 0x201
 8017030:	f240 2001 	movw	r0, #513	@ 0x201
 8017034:	f001 f8e4 	bl	8018200 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8017038:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801703c:	484d      	ldr	r0, [pc, #308]	@ (8017174 <RadioSend+0x158>)
 801703e:	f7ff fb09 	bl	8016654 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017042:	4b4d      	ldr	r3, [pc, #308]	@ (8017178 <RadioSend+0x15c>)
 8017044:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017048:	2101      	movs	r1, #1
 801704a:	4618      	mov	r0, r3
 801704c:	f001 fd76 	bl	8018b3c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017050:	4b49      	ldr	r3, [pc, #292]	@ (8017178 <RadioSend+0x15c>)
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	2b01      	cmp	r3, #1
 8017056:	d112      	bne.n	801707e <RadioSend+0x62>
 8017058:	4b47      	ldr	r3, [pc, #284]	@ (8017178 <RadioSend+0x15c>)
 801705a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801705e:	2b06      	cmp	r3, #6
 8017060:	d10d      	bne.n	801707e <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017062:	f640 0089 	movw	r0, #2185	@ 0x889
 8017066:	f001 fc89 	bl	801897c <SUBGRF_ReadRegister>
 801706a:	4603      	mov	r3, r0
 801706c:	f023 0304 	bic.w	r3, r3, #4
 8017070:	b2db      	uxtb	r3, r3
 8017072:	4619      	mov	r1, r3
 8017074:	f640 0089 	movw	r0, #2185	@ 0x889
 8017078:	f001 fc6c 	bl	8018954 <SUBGRF_WriteRegister>
 801707c:	e00c      	b.n	8017098 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801707e:	f640 0089 	movw	r0, #2185	@ 0x889
 8017082:	f001 fc7b 	bl	801897c <SUBGRF_ReadRegister>
 8017086:	4603      	mov	r3, r0
 8017088:	f043 0304 	orr.w	r3, r3, #4
 801708c:	b2db      	uxtb	r3, r3
 801708e:	4619      	mov	r1, r3
 8017090:	f640 0089 	movw	r0, #2185	@ 0x889
 8017094:	f001 fc5e 	bl	8018954 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8017098:	4b37      	ldr	r3, [pc, #220]	@ (8017178 <RadioSend+0x15c>)
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	2b03      	cmp	r3, #3
 801709e:	d859      	bhi.n	8017154 <RadioSend+0x138>
 80170a0:	a201      	add	r2, pc, #4	@ (adr r2, 80170a8 <RadioSend+0x8c>)
 80170a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170a6:	bf00      	nop
 80170a8:	080170d3 	.word	0x080170d3
 80170ac:	080170b9 	.word	0x080170b9
 80170b0:	080170d3 	.word	0x080170d3
 80170b4:	08017135 	.word	0x08017135
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80170b8:	4a2f      	ldr	r2, [pc, #188]	@ (8017178 <RadioSend+0x15c>)
 80170ba:	78fb      	ldrb	r3, [r7, #3]
 80170bc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170be:	482f      	ldr	r0, [pc, #188]	@ (801717c <RadioSend+0x160>)
 80170c0:	f001 fb02 	bl	80186c8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80170c4:	78fb      	ldrb	r3, [r7, #3]
 80170c6:	2200      	movs	r2, #0
 80170c8:	4619      	mov	r1, r3
 80170ca:	6878      	ldr	r0, [r7, #4]
 80170cc:	f000 fdae 	bl	8017c2c <SUBGRF_SendPayload>
            break;
 80170d0:	e041      	b.n	8017156 <RadioSend+0x13a>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80170d2:	f001 ff1f 	bl	8018f14 <RFW_Is_Init>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b01      	cmp	r3, #1
 80170da:	d11e      	bne.n	801711a <RadioSend+0xfe>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80170dc:	f107 020f 	add.w	r2, r7, #15
 80170e0:	78fb      	ldrb	r3, [r7, #3]
 80170e2:	4619      	mov	r1, r3
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f001 ff2d 	bl	8018f44 <RFW_TransmitInit>
 80170ea:	4603      	mov	r3, r0
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d10c      	bne.n	801710a <RadioSend+0xee>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80170f0:	7bfa      	ldrb	r2, [r7, #15]
 80170f2:	4b21      	ldr	r3, [pc, #132]	@ (8017178 <RadioSend+0x15c>)
 80170f4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170f6:	4821      	ldr	r0, [pc, #132]	@ (801717c <RadioSend+0x160>)
 80170f8:	f001 fae6 	bl	80186c8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80170fc:	7bfb      	ldrb	r3, [r7, #15]
 80170fe:	2200      	movs	r2, #0
 8017100:	4619      	mov	r1, r3
 8017102:	6878      	ldr	r0, [r7, #4]
 8017104:	f000 fd92 	bl	8017c2c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017108:	e025      	b.n	8017156 <RadioSend+0x13a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801710a:	4b1d      	ldr	r3, [pc, #116]	@ (8017180 <RadioSend+0x164>)
 801710c:	2201      	movs	r2, #1
 801710e:	2100      	movs	r1, #0
 8017110:	2002      	movs	r0, #2
 8017112:	f001 ff73 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8017116:	2303      	movs	r3, #3
 8017118:	e027      	b.n	801716a <RadioSend+0x14e>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801711a:	4a17      	ldr	r2, [pc, #92]	@ (8017178 <RadioSend+0x15c>)
 801711c:	78fb      	ldrb	r3, [r7, #3]
 801711e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017120:	4816      	ldr	r0, [pc, #88]	@ (801717c <RadioSend+0x160>)
 8017122:	f001 fad1 	bl	80186c8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8017126:	78fb      	ldrb	r3, [r7, #3]
 8017128:	2200      	movs	r2, #0
 801712a:	4619      	mov	r1, r3
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f000 fd7d 	bl	8017c2c <SUBGRF_SendPayload>
            break;
 8017132:	e010      	b.n	8017156 <RadioSend+0x13a>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017134:	4b10      	ldr	r3, [pc, #64]	@ (8017178 <RadioSend+0x15c>)
 8017136:	2202      	movs	r2, #2
 8017138:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801713a:	4a0f      	ldr	r2, [pc, #60]	@ (8017178 <RadioSend+0x15c>)
 801713c:	78fb      	ldrb	r3, [r7, #3]
 801713e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017140:	480e      	ldr	r0, [pc, #56]	@ (801717c <RadioSend+0x160>)
 8017142:	f001 fac1 	bl	80186c8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017146:	78fb      	ldrb	r3, [r7, #3]
 8017148:	2200      	movs	r2, #0
 801714a:	4619      	mov	r1, r3
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f000 fd6d 	bl	8017c2c <SUBGRF_SendPayload>
            break;
 8017152:	e000      	b.n	8017156 <RadioSend+0x13a>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
            break;
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017154:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017156:	4b08      	ldr	r3, [pc, #32]	@ (8017178 <RadioSend+0x15c>)
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	4619      	mov	r1, r3
 801715c:	4809      	ldr	r0, [pc, #36]	@ (8017184 <RadioSend+0x168>)
 801715e:	f002 fe97 	bl	8019e90 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8017162:	4808      	ldr	r0, [pc, #32]	@ (8017184 <RadioSend+0x168>)
 8017164:	f002 fdb6 	bl	8019cd4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8017168:	2300      	movs	r3, #0
}
 801716a:	4618      	mov	r0, r3
 801716c:	3710      	adds	r7, #16
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}
 8017172:	bf00      	nop
 8017174:	48000400 	.word	0x48000400
 8017178:	200012d8 	.word	0x200012d8
 801717c:	200012e6 	.word	0x200012e6
 8017180:	08020494 	.word	0x08020494
 8017184:	20001334 	.word	0x20001334

08017188 <RadioSleep>:

static void RadioSleep( void )
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801718e:	2300      	movs	r3, #0
 8017190:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017192:	793b      	ldrb	r3, [r7, #4]
 8017194:	f043 0304 	orr.w	r3, r3, #4
 8017198:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801719a:	7938      	ldrb	r0, [r7, #4]
 801719c:	f000 fe22 	bl	8017de4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80171a0:	2002      	movs	r0, #2
 80171a2:	f7ea fa43 	bl	800162c <HAL_Delay>
}
 80171a6:	bf00      	nop
 80171a8:	3708      	adds	r7, #8
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <RadioStandby>:

static void RadioStandby( void )
{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80171b2:	2000      	movs	r0, #0
 80171b4:	f000 fe4a 	bl	8017e4c <SUBGRF_SetStandby>
}
 80171b8:	bf00      	nop
 80171ba:	bd80      	pop	{r7, pc}

080171bc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80171c4:	f001 fea6 	bl	8018f14 <RFW_Is_Init>
 80171c8:	4603      	mov	r3, r0
 80171ca:	2b01      	cmp	r3, #1
 80171cc:	d102      	bne.n	80171d4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80171ce:	f001 fec9 	bl	8018f64 <RFW_ReceiveInit>
 80171d2:	e007      	b.n	80171e4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80171d4:	2300      	movs	r3, #0
 80171d6:	2200      	movs	r2, #0
 80171d8:	f240 2162 	movw	r1, #610	@ 0x262
 80171dc:	f240 2062 	movw	r0, #610	@ 0x262
 80171e0:	f001 f80e 	bl	8018200 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d006      	beq.n	80171f8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80171ea:	6879      	ldr	r1, [r7, #4]
 80171ec:	4813      	ldr	r0, [pc, #76]	@ (801723c <RadioRx+0x80>)
 80171ee:	f002 fe4f 	bl	8019e90 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80171f2:	4812      	ldr	r0, [pc, #72]	@ (801723c <RadioRx+0x80>)
 80171f4:	f002 fd6e 	bl	8019cd4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80171f8:	4b11      	ldr	r3, [pc, #68]	@ (8017240 <RadioRx+0x84>)
 80171fa:	2200      	movs	r2, #0
 80171fc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 80171fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017202:	4810      	ldr	r0, [pc, #64]	@ (8017244 <RadioRx+0x88>)
 8017204:	f7ff fa26 	bl	8016654 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017208:	4b0d      	ldr	r3, [pc, #52]	@ (8017240 <RadioRx+0x84>)
 801720a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801720e:	2100      	movs	r1, #0
 8017210:	4618      	mov	r0, r3
 8017212:	f001 fc93 	bl	8018b3c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017216:	4b0a      	ldr	r3, [pc, #40]	@ (8017240 <RadioRx+0x84>)
 8017218:	785b      	ldrb	r3, [r3, #1]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d004      	beq.n	8017228 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801721e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017222:	f000 fe4f 	bl	8017ec4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017226:	e005      	b.n	8017234 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017228:	4b05      	ldr	r3, [pc, #20]	@ (8017240 <RadioRx+0x84>)
 801722a:	689b      	ldr	r3, [r3, #8]
 801722c:	019b      	lsls	r3, r3, #6
 801722e:	4618      	mov	r0, r3
 8017230:	f000 fe48 	bl	8017ec4 <SUBGRF_SetRx>
}
 8017234:	bf00      	nop
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	2000134c 	.word	0x2000134c
 8017240:	200012d8 	.word	0x200012d8
 8017244:	48000400 	.word	0x48000400

08017248 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b082      	sub	sp, #8
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8017250:	f001 fe60 	bl	8018f14 <RFW_Is_Init>
 8017254:	4603      	mov	r3, r0
 8017256:	2b01      	cmp	r3, #1
 8017258:	d102      	bne.n	8017260 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801725a:	f001 fe83 	bl	8018f64 <RFW_ReceiveInit>
 801725e:	e007      	b.n	8017270 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017260:	2300      	movs	r3, #0
 8017262:	2200      	movs	r2, #0
 8017264:	f240 2162 	movw	r1, #610	@ 0x262
 8017268:	f240 2062 	movw	r0, #610	@ 0x262
 801726c:	f000 ffc8 	bl	8018200 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d006      	beq.n	8017284 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017276:	6879      	ldr	r1, [r7, #4]
 8017278:	4813      	ldr	r0, [pc, #76]	@ (80172c8 <RadioRxBoosted+0x80>)
 801727a:	f002 fe09 	bl	8019e90 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801727e:	4812      	ldr	r0, [pc, #72]	@ (80172c8 <RadioRxBoosted+0x80>)
 8017280:	f002 fd28 	bl	8019cd4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017284:	4b11      	ldr	r3, [pc, #68]	@ (80172cc <RadioRxBoosted+0x84>)
 8017286:	2200      	movs	r2, #0
 8017288:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 801728a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801728e:	4810      	ldr	r0, [pc, #64]	@ (80172d0 <RadioRxBoosted+0x88>)
 8017290:	f7ff f9e0 	bl	8016654 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017294:	4b0d      	ldr	r3, [pc, #52]	@ (80172cc <RadioRxBoosted+0x84>)
 8017296:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801729a:	2100      	movs	r1, #0
 801729c:	4618      	mov	r0, r3
 801729e:	f001 fc4d 	bl	8018b3c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80172a2:	4b0a      	ldr	r3, [pc, #40]	@ (80172cc <RadioRxBoosted+0x84>)
 80172a4:	785b      	ldrb	r3, [r3, #1]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d004      	beq.n	80172b4 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80172aa:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80172ae:	f000 fe29 	bl	8017f04 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80172b2:	e005      	b.n	80172c0 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80172b4:	4b05      	ldr	r3, [pc, #20]	@ (80172cc <RadioRxBoosted+0x84>)
 80172b6:	689b      	ldr	r3, [r3, #8]
 80172b8:	019b      	lsls	r3, r3, #6
 80172ba:	4618      	mov	r0, r3
 80172bc:	f000 fe22 	bl	8017f04 <SUBGRF_SetRxBoosted>
}
 80172c0:	bf00      	nop
 80172c2:	3708      	adds	r7, #8
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}
 80172c8:	2000134c 	.word	0x2000134c
 80172cc:	200012d8 	.word	0x200012d8
 80172d0:	48000400 	.word	0x48000400

080172d4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	005a      	lsls	r2, r3, #1
 80172e2:	683b      	ldr	r3, [r7, #0]
 80172e4:	4413      	add	r3, r2
 80172e6:	4a0c      	ldr	r2, [pc, #48]	@ (8017318 <RadioSetRxDutyCycle+0x44>)
 80172e8:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80172ea:	2300      	movs	r3, #0
 80172ec:	2200      	movs	r2, #0
 80172ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80172f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80172f6:	f000 ff83 	bl	8018200 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80172fa:	4b07      	ldr	r3, [pc, #28]	@ (8017318 <RadioSetRxDutyCycle+0x44>)
 80172fc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017300:	2100      	movs	r1, #0
 8017302:	4618      	mov	r0, r3
 8017304:	f001 fc1a 	bl	8018b3c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017308:	6839      	ldr	r1, [r7, #0]
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f000 fe1e 	bl	8017f4c <SUBGRF_SetRxDutyCycle>
}
 8017310:	bf00      	nop
 8017312:	3708      	adds	r7, #8
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}
 8017318:	200012d8 	.word	0x200012d8

0801731c <RadioStartCad>:

static void RadioStartCad( void )
{
 801731c:	b580      	push	{r7, lr}
 801731e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017320:	4b09      	ldr	r3, [pc, #36]	@ (8017348 <RadioStartCad+0x2c>)
 8017322:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017326:	2100      	movs	r1, #0
 8017328:	4618      	mov	r0, r3
 801732a:	f001 fc07 	bl	8018b3c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801732e:	2300      	movs	r3, #0
 8017330:	2200      	movs	r2, #0
 8017332:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017336:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801733a:	f000 ff61 	bl	8018200 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801733e:	f000 fe31 	bl	8017fa4 <SUBGRF_SetCad>
}
 8017342:	bf00      	nop
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	200012d8 	.word	0x200012d8

0801734c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	460b      	mov	r3, r1
 8017356:	70fb      	strb	r3, [r7, #3]
 8017358:	4613      	mov	r3, r2
 801735a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801735c:	883b      	ldrh	r3, [r7, #0]
 801735e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017362:	fb02 f303 	mul.w	r3, r2, r3
 8017366:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f000 ffa5 	bl	80182b8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801736e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017372:	4618      	mov	r0, r3
 8017374:	f001 fc0a 	bl	8018b8c <SUBGRF_SetRfTxPower>
 8017378:	4603      	mov	r3, r0
 801737a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801737c:	210e      	movs	r1, #14
 801737e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017382:	f001 fae7 	bl	8018954 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017386:	7afb      	ldrb	r3, [r7, #11]
 8017388:	2101      	movs	r1, #1
 801738a:	4618      	mov	r0, r3
 801738c:	f001 fbd6 	bl	8018b3c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017390:	f000 fe16 	bl	8017fc0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017394:	68f9      	ldr	r1, [r7, #12]
 8017396:	4805      	ldr	r0, [pc, #20]	@ (80173ac <RadioSetTxContinuousWave+0x60>)
 8017398:	f002 fd7a 	bl	8019e90 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801739c:	4803      	ldr	r0, [pc, #12]	@ (80173ac <RadioSetTxContinuousWave+0x60>)
 801739e:	f002 fc99 	bl	8019cd4 <UTIL_TIMER_Start>
}
 80173a2:	bf00      	nop
 80173a4:	3710      	adds	r7, #16
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	20001334 	.word	0x20001334

080173b0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	4603      	mov	r3, r0
 80173b8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80173ba:	f001 fa38 	bl	801882e <SUBGRF_GetRssiInst>
 80173be:	4603      	mov	r3, r0
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3708      	adds	r7, #8
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b082      	sub	sp, #8
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	4603      	mov	r3, r0
 80173d0:	460a      	mov	r2, r1
 80173d2:	80fb      	strh	r3, [r7, #6]
 80173d4:	4613      	mov	r3, r2
 80173d6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80173d8:	797a      	ldrb	r2, [r7, #5]
 80173da:	88fb      	ldrh	r3, [r7, #6]
 80173dc:	4611      	mov	r1, r2
 80173de:	4618      	mov	r0, r3
 80173e0:	f001 fab8 	bl	8018954 <SUBGRF_WriteRegister>
}
 80173e4:	bf00      	nop
 80173e6:	3708      	adds	r7, #8
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b082      	sub	sp, #8
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	4603      	mov	r3, r0
 80173f4:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80173f6:	88fb      	ldrh	r3, [r7, #6]
 80173f8:	4618      	mov	r0, r3
 80173fa:	f001 fabf 	bl	801897c <SUBGRF_ReadRegister>
 80173fe:	4603      	mov	r3, r0
}
 8017400:	4618      	mov	r0, r3
 8017402:	3708      	adds	r7, #8
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}

08017408 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b082      	sub	sp, #8
 801740c:	af00      	add	r7, sp, #0
 801740e:	4603      	mov	r3, r0
 8017410:	6039      	str	r1, [r7, #0]
 8017412:	80fb      	strh	r3, [r7, #6]
 8017414:	4613      	mov	r3, r2
 8017416:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017418:	797b      	ldrb	r3, [r7, #5]
 801741a:	b29a      	uxth	r2, r3
 801741c:	88fb      	ldrh	r3, [r7, #6]
 801741e:	6839      	ldr	r1, [r7, #0]
 8017420:	4618      	mov	r0, r3
 8017422:	f001 fabf 	bl	80189a4 <SUBGRF_WriteRegisters>
}
 8017426:	bf00      	nop
 8017428:	3708      	adds	r7, #8
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}

0801742e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801742e:	b580      	push	{r7, lr}
 8017430:	b082      	sub	sp, #8
 8017432:	af00      	add	r7, sp, #0
 8017434:	4603      	mov	r3, r0
 8017436:	6039      	str	r1, [r7, #0]
 8017438:	80fb      	strh	r3, [r7, #6]
 801743a:	4613      	mov	r3, r2
 801743c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801743e:	797b      	ldrb	r3, [r7, #5]
 8017440:	b29a      	uxth	r2, r3
 8017442:	88fb      	ldrh	r3, [r7, #6]
 8017444:	6839      	ldr	r1, [r7, #0]
 8017446:	4618      	mov	r0, r3
 8017448:	f001 face 	bl	80189e8 <SUBGRF_ReadRegisters>
}
 801744c:	bf00      	nop
 801744e:	3708      	adds	r7, #8
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}

08017454 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	4603      	mov	r3, r0
 801745c:	460a      	mov	r2, r1
 801745e:	71fb      	strb	r3, [r7, #7]
 8017460:	4613      	mov	r3, r2
 8017462:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017464:	79fb      	ldrb	r3, [r7, #7]
 8017466:	2b01      	cmp	r3, #1
 8017468:	d10a      	bne.n	8017480 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801746a:	4a0e      	ldr	r2, [pc, #56]	@ (80174a4 <RadioSetMaxPayloadLength+0x50>)
 801746c:	79bb      	ldrb	r3, [r7, #6]
 801746e:	7013      	strb	r3, [r2, #0]
 8017470:	4b0c      	ldr	r3, [pc, #48]	@ (80174a4 <RadioSetMaxPayloadLength+0x50>)
 8017472:	781a      	ldrb	r2, [r3, #0]
 8017474:	4b0c      	ldr	r3, [pc, #48]	@ (80174a8 <RadioSetMaxPayloadLength+0x54>)
 8017476:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017478:	480c      	ldr	r0, [pc, #48]	@ (80174ac <RadioSetMaxPayloadLength+0x58>)
 801747a:	f001 f925 	bl	80186c8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801747e:	e00d      	b.n	801749c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017480:	4b09      	ldr	r3, [pc, #36]	@ (80174a8 <RadioSetMaxPayloadLength+0x54>)
 8017482:	7d5b      	ldrb	r3, [r3, #21]
 8017484:	2b01      	cmp	r3, #1
 8017486:	d109      	bne.n	801749c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017488:	4a06      	ldr	r2, [pc, #24]	@ (80174a4 <RadioSetMaxPayloadLength+0x50>)
 801748a:	79bb      	ldrb	r3, [r7, #6]
 801748c:	7013      	strb	r3, [r2, #0]
 801748e:	4b05      	ldr	r3, [pc, #20]	@ (80174a4 <RadioSetMaxPayloadLength+0x50>)
 8017490:	781a      	ldrb	r2, [r3, #0]
 8017492:	4b05      	ldr	r3, [pc, #20]	@ (80174a8 <RadioSetMaxPayloadLength+0x54>)
 8017494:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017496:	4805      	ldr	r0, [pc, #20]	@ (80174ac <RadioSetMaxPayloadLength+0x58>)
 8017498:	f001 f916 	bl	80186c8 <SUBGRF_SetPacketParams>
}
 801749c:	bf00      	nop
 801749e:	3708      	adds	r7, #8
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}
 80174a4:	200000d8 	.word	0x200000d8
 80174a8:	200012d8 	.word	0x200012d8
 80174ac:	200012e6 	.word	0x200012e6

080174b0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	4603      	mov	r3, r0
 80174b8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80174ba:	4a13      	ldr	r2, [pc, #76]	@ (8017508 <RadioSetPublicNetwork+0x58>)
 80174bc:	79fb      	ldrb	r3, [r7, #7]
 80174be:	7313      	strb	r3, [r2, #12]
 80174c0:	4b11      	ldr	r3, [pc, #68]	@ (8017508 <RadioSetPublicNetwork+0x58>)
 80174c2:	7b1a      	ldrb	r2, [r3, #12]
 80174c4:	4b10      	ldr	r3, [pc, #64]	@ (8017508 <RadioSetPublicNetwork+0x58>)
 80174c6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80174c8:	2001      	movs	r0, #1
 80174ca:	f7ff f951 	bl	8016770 <RadioSetModem>
    if( enable == true )
 80174ce:	79fb      	ldrb	r3, [r7, #7]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d00a      	beq.n	80174ea <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80174d4:	2134      	movs	r1, #52	@ 0x34
 80174d6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80174da:	f001 fa3b 	bl	8018954 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80174de:	2144      	movs	r1, #68	@ 0x44
 80174e0:	f240 7041 	movw	r0, #1857	@ 0x741
 80174e4:	f001 fa36 	bl	8018954 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80174e8:	e009      	b.n	80174fe <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80174ea:	2114      	movs	r1, #20
 80174ec:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80174f0:	f001 fa30 	bl	8018954 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80174f4:	2124      	movs	r1, #36	@ 0x24
 80174f6:	f240 7041 	movw	r0, #1857	@ 0x741
 80174fa:	f001 fa2b 	bl	8018954 <SUBGRF_WriteRegister>
}
 80174fe:	bf00      	nop
 8017500:	3708      	adds	r7, #8
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}
 8017506:	bf00      	nop
 8017508:	200012d8 	.word	0x200012d8

0801750c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801750c:	b580      	push	{r7, lr}
 801750e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017510:	f001 fb70 	bl	8018bf4 <SUBGRF_GetRadioWakeUpTime>
 8017514:	4603      	mov	r3, r0
 8017516:	3303      	adds	r3, #3
}
 8017518:	4618      	mov	r0, r3
 801751a:	bd80      	pop	{r7, pc}

0801751c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017524:	f000 f80e 	bl	8017544 <RadioOnTxTimeoutProcess>
}
 8017528:	bf00      	nop
 801752a:	3708      	adds	r7, #8
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}

08017530 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017538:	f000 f81e 	bl	8017578 <RadioOnRxTimeoutProcess>
}
 801753c:	bf00      	nop
 801753e:	3708      	adds	r7, #8
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}

08017544 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 8017548:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801754c:	4808      	ldr	r0, [pc, #32]	@ (8017570 <RadioOnTxTimeoutProcess+0x2c>)
 801754e:	f7ff f88e 	bl	801666e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017552:	4b08      	ldr	r3, [pc, #32]	@ (8017574 <RadioOnTxTimeoutProcess+0x30>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d008      	beq.n	801756c <RadioOnTxTimeoutProcess+0x28>
 801755a:	4b06      	ldr	r3, [pc, #24]	@ (8017574 <RadioOnTxTimeoutProcess+0x30>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d003      	beq.n	801756c <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017564:	4b03      	ldr	r3, [pc, #12]	@ (8017574 <RadioOnTxTimeoutProcess+0x30>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	4798      	blx	r3
    }
}
 801756c:	bf00      	nop
 801756e:	bd80      	pop	{r7, pc}
 8017570:	48000400 	.word	0x48000400
 8017574:	200012d4 	.word	0x200012d4

08017578 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017578:	b580      	push	{r7, lr}
 801757a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 801757c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017580:	4808      	ldr	r0, [pc, #32]	@ (80175a4 <RadioOnRxTimeoutProcess+0x2c>)
 8017582:	f7ff f874 	bl	801666e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017586:	4b08      	ldr	r3, [pc, #32]	@ (80175a8 <RadioOnRxTimeoutProcess+0x30>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d008      	beq.n	80175a0 <RadioOnRxTimeoutProcess+0x28>
 801758e:	4b06      	ldr	r3, [pc, #24]	@ (80175a8 <RadioOnRxTimeoutProcess+0x30>)
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	68db      	ldr	r3, [r3, #12]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d003      	beq.n	80175a0 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8017598:	4b03      	ldr	r3, [pc, #12]	@ (80175a8 <RadioOnRxTimeoutProcess+0x30>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	68db      	ldr	r3, [r3, #12]
 801759e:	4798      	blx	r3
    }
}
 80175a0:	bf00      	nop
 80175a2:	bd80      	pop	{r7, pc}
 80175a4:	48000400 	.word	0x48000400
 80175a8:	200012d4 	.word	0x200012d4

080175ac <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	4603      	mov	r3, r0
 80175b4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80175b6:	4a05      	ldr	r2, [pc, #20]	@ (80175cc <RadioOnDioIrq+0x20>)
 80175b8:	88fb      	ldrh	r3, [r7, #6]
 80175ba:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80175be:	f000 f807 	bl	80175d0 <RadioIrqProcess>
}
 80175c2:	bf00      	nop
 80175c4:	3708      	adds	r7, #8
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}
 80175ca:	bf00      	nop
 80175cc:	200012d8 	.word	0x200012d8

080175d0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80175d0:	b5b0      	push	{r4, r5, r7, lr}
 80175d2:	b082      	sub	sp, #8
 80175d4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80175d6:	2300      	movs	r3, #0
 80175d8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80175da:	2300      	movs	r3, #0
 80175dc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80175de:	4bb2      	ldr	r3, [pc, #712]	@ (80178a8 <RadioIrqProcess+0x2d8>)
 80175e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80175e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175e8:	f000 8117 	beq.w	801781a <RadioIrqProcess+0x24a>
 80175ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175f0:	f300 81fe 	bgt.w	80179f0 <RadioIrqProcess+0x420>
 80175f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80175f8:	f000 80fb 	beq.w	80177f2 <RadioIrqProcess+0x222>
 80175fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017600:	f300 81f6 	bgt.w	80179f0 <RadioIrqProcess+0x420>
 8017604:	2b80      	cmp	r3, #128	@ 0x80
 8017606:	f000 80e0 	beq.w	80177ca <RadioIrqProcess+0x1fa>
 801760a:	2b80      	cmp	r3, #128	@ 0x80
 801760c:	f300 81f0 	bgt.w	80179f0 <RadioIrqProcess+0x420>
 8017610:	2b20      	cmp	r3, #32
 8017612:	dc49      	bgt.n	80176a8 <RadioIrqProcess+0xd8>
 8017614:	2b00      	cmp	r3, #0
 8017616:	f340 81eb 	ble.w	80179f0 <RadioIrqProcess+0x420>
 801761a:	3b01      	subs	r3, #1
 801761c:	2b1f      	cmp	r3, #31
 801761e:	f200 81e7 	bhi.w	80179f0 <RadioIrqProcess+0x420>
 8017622:	a201      	add	r2, pc, #4	@ (adr r2, 8017628 <RadioIrqProcess+0x58>)
 8017624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017628:	080176b1 	.word	0x080176b1
 801762c:	080176f5 	.word	0x080176f5
 8017630:	080179f1 	.word	0x080179f1
 8017634:	080178cd 	.word	0x080178cd
 8017638:	080179f1 	.word	0x080179f1
 801763c:	080179f1 	.word	0x080179f1
 8017640:	080179f1 	.word	0x080179f1
 8017644:	08017949 	.word	0x08017949
 8017648:	080179f1 	.word	0x080179f1
 801764c:	080179f1 	.word	0x080179f1
 8017650:	080179f1 	.word	0x080179f1
 8017654:	080179f1 	.word	0x080179f1
 8017658:	080179f1 	.word	0x080179f1
 801765c:	080179f1 	.word	0x080179f1
 8017660:	080179f1 	.word	0x080179f1
 8017664:	08017965 	.word	0x08017965
 8017668:	080179f1 	.word	0x080179f1
 801766c:	080179f1 	.word	0x080179f1
 8017670:	080179f1 	.word	0x080179f1
 8017674:	080179f1 	.word	0x080179f1
 8017678:	080179f1 	.word	0x080179f1
 801767c:	080179f1 	.word	0x080179f1
 8017680:	080179f1 	.word	0x080179f1
 8017684:	080179f1 	.word	0x080179f1
 8017688:	080179f1 	.word	0x080179f1
 801768c:	080179f1 	.word	0x080179f1
 8017690:	080179f1 	.word	0x080179f1
 8017694:	080179f1 	.word	0x080179f1
 8017698:	080179f1 	.word	0x080179f1
 801769c:	080179f1 	.word	0x080179f1
 80176a0:	080179f1 	.word	0x080179f1
 80176a4:	08017973 	.word	0x08017973
 80176a8:	2b40      	cmp	r3, #64	@ 0x40
 80176aa:	f000 8183 	beq.w	80179b4 <RadioIrqProcess+0x3e4>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80176ae:	e19f      	b.n	80179f0 <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_TX( RST );
 80176b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80176b4:	487d      	ldr	r0, [pc, #500]	@ (80178ac <RadioIrqProcess+0x2dc>)
 80176b6:	f7fe ffda 	bl	801666e <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 80176ba:	487d      	ldr	r0, [pc, #500]	@ (80178b0 <RadioIrqProcess+0x2e0>)
 80176bc:	f002 fb78 	bl	8019db0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80176c0:	2000      	movs	r0, #0
 80176c2:	f000 fbc3 	bl	8017e4c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80176c6:	f001 fc2c 	bl	8018f22 <RFW_Is_LongPacketModeEnabled>
 80176ca:	4603      	mov	r3, r0
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d101      	bne.n	80176d4 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 80176d0:	f001 fc50 	bl	8018f74 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80176d4:	4b77      	ldr	r3, [pc, #476]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	f000 818b 	beq.w	80179f4 <RadioIrqProcess+0x424>
 80176de:	4b75      	ldr	r3, [pc, #468]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	f000 8185 	beq.w	80179f4 <RadioIrqProcess+0x424>
            RadioEvents->TxDone( );
 80176ea:	4b72      	ldr	r3, [pc, #456]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	4798      	blx	r3
        break;
 80176f2:	e17f      	b.n	80179f4 <RadioIrqProcess+0x424>
        DBG_GPIO_RADIO_RX( RST );
 80176f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80176f8:	486c      	ldr	r0, [pc, #432]	@ (80178ac <RadioIrqProcess+0x2dc>)
 80176fa:	f7fe ffb8 	bl	801666e <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 80176fe:	486e      	ldr	r0, [pc, #440]	@ (80178b8 <RadioIrqProcess+0x2e8>)
 8017700:	f002 fb56 	bl	8019db0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017704:	4b68      	ldr	r3, [pc, #416]	@ (80178a8 <RadioIrqProcess+0x2d8>)
 8017706:	785b      	ldrb	r3, [r3, #1]
 8017708:	f083 0301 	eor.w	r3, r3, #1
 801770c:	b2db      	uxtb	r3, r3
 801770e:	2b00      	cmp	r3, #0
 8017710:	d014      	beq.n	801773c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017712:	2000      	movs	r0, #0
 8017714:	f000 fb9a 	bl	8017e4c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017718:	2100      	movs	r1, #0
 801771a:	f640 1002 	movw	r0, #2306	@ 0x902
 801771e:	f001 f919 	bl	8018954 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017722:	f640 1044 	movw	r0, #2372	@ 0x944
 8017726:	f001 f929 	bl	801897c <SUBGRF_ReadRegister>
 801772a:	4603      	mov	r3, r0
 801772c:	f043 0302 	orr.w	r3, r3, #2
 8017730:	b2db      	uxtb	r3, r3
 8017732:	4619      	mov	r1, r3
 8017734:	f640 1044 	movw	r0, #2372	@ 0x944
 8017738:	f001 f90c 	bl	8018954 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801773c:	1dfb      	adds	r3, r7, #7
 801773e:	22ff      	movs	r2, #255	@ 0xff
 8017740:	4619      	mov	r1, r3
 8017742:	485e      	ldr	r0, [pc, #376]	@ (80178bc <RadioIrqProcess+0x2ec>)
 8017744:	f000 fa50 	bl	8017be8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017748:	485d      	ldr	r0, [pc, #372]	@ (80178c0 <RadioIrqProcess+0x2f0>)
 801774a:	f001 f8b1 	bl	80188b0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801774e:	4b59      	ldr	r3, [pc, #356]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	f000 8150 	beq.w	80179f8 <RadioIrqProcess+0x428>
 8017758:	4b56      	ldr	r3, [pc, #344]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	689b      	ldr	r3, [r3, #8]
 801775e:	2b00      	cmp	r3, #0
 8017760:	f000 814a 	beq.w	80179f8 <RadioIrqProcess+0x428>
            switch( SubgRf.PacketStatus.packetType )
 8017764:	4b50      	ldr	r3, [pc, #320]	@ (80178a8 <RadioIrqProcess+0x2d8>)
 8017766:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801776a:	2b01      	cmp	r3, #1
 801776c:	d10e      	bne.n	801778c <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801776e:	4b51      	ldr	r3, [pc, #324]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	689c      	ldr	r4, [r3, #8]
 8017774:	79fb      	ldrb	r3, [r7, #7]
 8017776:	4619      	mov	r1, r3
 8017778:	4b4b      	ldr	r3, [pc, #300]	@ (80178a8 <RadioIrqProcess+0x2d8>)
 801777a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 801777e:	461a      	mov	r2, r3
 8017780:	4b49      	ldr	r3, [pc, #292]	@ (80178a8 <RadioIrqProcess+0x2d8>)
 8017782:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017786:	484d      	ldr	r0, [pc, #308]	@ (80178bc <RadioIrqProcess+0x2ec>)
 8017788:	47a0      	blx	r4
                break;
 801778a:	e01d      	b.n	80177c8 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801778c:	4b46      	ldr	r3, [pc, #280]	@ (80178a8 <RadioIrqProcess+0x2d8>)
 801778e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017790:	463a      	mov	r2, r7
 8017792:	4611      	mov	r1, r2
 8017794:	4618      	mov	r0, r3
 8017796:	f001 fb1f 	bl	8018dd8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801779a:	4b46      	ldr	r3, [pc, #280]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	689c      	ldr	r4, [r3, #8]
 80177a0:	79fb      	ldrb	r3, [r7, #7]
 80177a2:	4619      	mov	r1, r3
 80177a4:	4b40      	ldr	r3, [pc, #256]	@ (80178a8 <RadioIrqProcess+0x2d8>)
 80177a6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80177aa:	4618      	mov	r0, r3
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80177b2:	4a44      	ldr	r2, [pc, #272]	@ (80178c4 <RadioIrqProcess+0x2f4>)
 80177b4:	fb82 5203 	smull	r5, r2, r2, r3
 80177b8:	1192      	asrs	r2, r2, #6
 80177ba:	17db      	asrs	r3, r3, #31
 80177bc:	1ad3      	subs	r3, r2, r3
 80177be:	b25b      	sxtb	r3, r3
 80177c0:	4602      	mov	r2, r0
 80177c2:	483e      	ldr	r0, [pc, #248]	@ (80178bc <RadioIrqProcess+0x2ec>)
 80177c4:	47a0      	blx	r4
                break;
 80177c6:	bf00      	nop
        break;
 80177c8:	e116      	b.n	80179f8 <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 80177ca:	2000      	movs	r0, #0
 80177cc:	f000 fb3e 	bl	8017e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80177d0:	4b38      	ldr	r3, [pc, #224]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	f000 8111 	beq.w	80179fc <RadioIrqProcess+0x42c>
 80177da:	4b36      	ldr	r3, [pc, #216]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	699b      	ldr	r3, [r3, #24]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	f000 810b 	beq.w	80179fc <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( false );
 80177e6:	4b33      	ldr	r3, [pc, #204]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	699b      	ldr	r3, [r3, #24]
 80177ec:	2000      	movs	r0, #0
 80177ee:	4798      	blx	r3
        break;
 80177f0:	e104      	b.n	80179fc <RadioIrqProcess+0x42c>
        SUBGRF_SetStandby( STDBY_RC );
 80177f2:	2000      	movs	r0, #0
 80177f4:	f000 fb2a 	bl	8017e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80177f8:	4b2e      	ldr	r3, [pc, #184]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	f000 80ff 	beq.w	8017a00 <RadioIrqProcess+0x430>
 8017802:	4b2c      	ldr	r3, [pc, #176]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	699b      	ldr	r3, [r3, #24]
 8017808:	2b00      	cmp	r3, #0
 801780a:	f000 80f9 	beq.w	8017a00 <RadioIrqProcess+0x430>
            RadioEvents->CadDone( true );
 801780e:	4b29      	ldr	r3, [pc, #164]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	699b      	ldr	r3, [r3, #24]
 8017814:	2001      	movs	r0, #1
 8017816:	4798      	blx	r3
        break;
 8017818:	e0f2      	b.n	8017a00 <RadioIrqProcess+0x430>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801781a:	4b2b      	ldr	r3, [pc, #172]	@ (80178c8 <RadioIrqProcess+0x2f8>)
 801781c:	2201      	movs	r2, #1
 801781e:	2100      	movs	r1, #0
 8017820:	2002      	movs	r0, #2
 8017822:	f001 fbeb 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017826:	f000 f9c5 	bl	8017bb4 <SUBGRF_GetOperatingMode>
 801782a:	4603      	mov	r3, r0
 801782c:	2b04      	cmp	r3, #4
 801782e:	d11a      	bne.n	8017866 <RadioIrqProcess+0x296>
            DBG_GPIO_RADIO_TX( RST );
 8017830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017834:	481d      	ldr	r0, [pc, #116]	@ (80178ac <RadioIrqProcess+0x2dc>)
 8017836:	f7fe ff1a 	bl	801666e <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 801783a:	481d      	ldr	r0, [pc, #116]	@ (80178b0 <RadioIrqProcess+0x2e0>)
 801783c:	f002 fab8 	bl	8019db0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017840:	2000      	movs	r0, #0
 8017842:	f000 fb03 	bl	8017e4c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017846:	4b1b      	ldr	r3, [pc, #108]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	f000 80da 	beq.w	8017a04 <RadioIrqProcess+0x434>
 8017850:	4b18      	ldr	r3, [pc, #96]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	2b00      	cmp	r3, #0
 8017858:	f000 80d4 	beq.w	8017a04 <RadioIrqProcess+0x434>
                RadioEvents->TxTimeout( );
 801785c:	4b15      	ldr	r3, [pc, #84]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	685b      	ldr	r3, [r3, #4]
 8017862:	4798      	blx	r3
        break;
 8017864:	e0ce      	b.n	8017a04 <RadioIrqProcess+0x434>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017866:	f000 f9a5 	bl	8017bb4 <SUBGRF_GetOperatingMode>
 801786a:	4603      	mov	r3, r0
 801786c:	2b05      	cmp	r3, #5
 801786e:	f040 80c9 	bne.w	8017a04 <RadioIrqProcess+0x434>
            DBG_GPIO_RADIO_RX( RST );
 8017872:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017876:	480d      	ldr	r0, [pc, #52]	@ (80178ac <RadioIrqProcess+0x2dc>)
 8017878:	f7fe fef9 	bl	801666e <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 801787c:	480e      	ldr	r0, [pc, #56]	@ (80178b8 <RadioIrqProcess+0x2e8>)
 801787e:	f002 fa97 	bl	8019db0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017882:	2000      	movs	r0, #0
 8017884:	f000 fae2 	bl	8017e4c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017888:	4b0a      	ldr	r3, [pc, #40]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	f000 80b9 	beq.w	8017a04 <RadioIrqProcess+0x434>
 8017892:	4b08      	ldr	r3, [pc, #32]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	68db      	ldr	r3, [r3, #12]
 8017898:	2b00      	cmp	r3, #0
 801789a:	f000 80b3 	beq.w	8017a04 <RadioIrqProcess+0x434>
                RadioEvents->RxTimeout( );
 801789e:	4b05      	ldr	r3, [pc, #20]	@ (80178b4 <RadioIrqProcess+0x2e4>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	68db      	ldr	r3, [r3, #12]
 80178a4:	4798      	blx	r3
        break;
 80178a6:	e0ad      	b.n	8017a04 <RadioIrqProcess+0x434>
 80178a8:	200012d8 	.word	0x200012d8
 80178ac:	48000400 	.word	0x48000400
 80178b0:	20001334 	.word	0x20001334
 80178b4:	200012d4 	.word	0x200012d4
 80178b8:	2000134c 	.word	0x2000134c
 80178bc:	200011d4 	.word	0x200011d4
 80178c0:	200012fc 	.word	0x200012fc
 80178c4:	10624dd3 	.word	0x10624dd3
 80178c8:	080204ac 	.word	0x080204ac
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80178cc:	4b54      	ldr	r3, [pc, #336]	@ (8017a20 <RadioIrqProcess+0x450>)
 80178ce:	2201      	movs	r2, #1
 80178d0:	2100      	movs	r1, #0
 80178d2:	2002      	movs	r0, #2
 80178d4:	f001 fb92 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80178d8:	4b52      	ldr	r3, [pc, #328]	@ (8017a24 <RadioIrqProcess+0x454>)
 80178da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80178dc:	2b00      	cmp	r3, #0
 80178de:	f000 8093 	beq.w	8017a08 <RadioIrqProcess+0x438>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80178e2:	4a51      	ldr	r2, [pc, #324]	@ (8017a28 <RadioIrqProcess+0x458>)
 80178e4:	4b4f      	ldr	r3, [pc, #316]	@ (8017a24 <RadioIrqProcess+0x454>)
 80178e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80178e8:	0c1b      	lsrs	r3, r3, #16
 80178ea:	b2db      	uxtb	r3, r3
 80178ec:	4619      	mov	r1, r3
 80178ee:	f640 1003 	movw	r0, #2307	@ 0x903
 80178f2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80178f4:	4a4c      	ldr	r2, [pc, #304]	@ (8017a28 <RadioIrqProcess+0x458>)
 80178f6:	4b4b      	ldr	r3, [pc, #300]	@ (8017a24 <RadioIrqProcess+0x454>)
 80178f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80178fa:	0a1b      	lsrs	r3, r3, #8
 80178fc:	b2db      	uxtb	r3, r3
 80178fe:	4619      	mov	r1, r3
 8017900:	f640 1004 	movw	r0, #2308	@ 0x904
 8017904:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8017906:	4a48      	ldr	r2, [pc, #288]	@ (8017a28 <RadioIrqProcess+0x458>)
 8017908:	4b46      	ldr	r3, [pc, #280]	@ (8017a24 <RadioIrqProcess+0x454>)
 801790a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801790c:	b2db      	uxtb	r3, r3
 801790e:	4619      	mov	r1, r3
 8017910:	f640 1005 	movw	r0, #2309	@ 0x905
 8017914:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8017916:	4c44      	ldr	r4, [pc, #272]	@ (8017a28 <RadioIrqProcess+0x458>)
 8017918:	4b44      	ldr	r3, [pc, #272]	@ (8017a2c <RadioIrqProcess+0x45c>)
 801791a:	f640 1002 	movw	r0, #2306	@ 0x902
 801791e:	4798      	blx	r3
 8017920:	4603      	mov	r3, r0
 8017922:	f043 0301 	orr.w	r3, r3, #1
 8017926:	b2db      	uxtb	r3, r3
 8017928:	4619      	mov	r1, r3
 801792a:	f640 1002 	movw	r0, #2306	@ 0x902
 801792e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8017930:	4b3c      	ldr	r3, [pc, #240]	@ (8017a24 <RadioIrqProcess+0x454>)
 8017932:	2200      	movs	r2, #0
 8017934:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017936:	2300      	movs	r3, #0
 8017938:	2200      	movs	r2, #0
 801793a:	f240 2162 	movw	r1, #610	@ 0x262
 801793e:	f240 2062 	movw	r0, #610	@ 0x262
 8017942:	f000 fc5d 	bl	8018200 <SUBGRF_SetDioIrqParams>
        break;
 8017946:	e05f      	b.n	8017a08 <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017948:	4b39      	ldr	r3, [pc, #228]	@ (8017a30 <RadioIrqProcess+0x460>)
 801794a:	2201      	movs	r2, #1
 801794c:	2100      	movs	r1, #0
 801794e:	2002      	movs	r0, #2
 8017950:	f001 fb54 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8017954:	f001 fade 	bl	8018f14 <RFW_Is_Init>
 8017958:	4603      	mov	r3, r0
 801795a:	2b01      	cmp	r3, #1
 801795c:	d156      	bne.n	8017a0c <RadioIrqProcess+0x43c>
            RFW_ReceivePayload( );
 801795e:	f001 fb0f 	bl	8018f80 <RFW_ReceivePayload>
        break;
 8017962:	e053      	b.n	8017a0c <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017964:	4b33      	ldr	r3, [pc, #204]	@ (8017a34 <RadioIrqProcess+0x464>)
 8017966:	2201      	movs	r2, #1
 8017968:	2100      	movs	r1, #0
 801796a:	2002      	movs	r0, #2
 801796c:	f001 fb46 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017970:	e051      	b.n	8017a16 <RadioIrqProcess+0x446>
        TimerStop( &RxTimeoutTimer );
 8017972:	4831      	ldr	r0, [pc, #196]	@ (8017a38 <RadioIrqProcess+0x468>)
 8017974:	f002 fa1c 	bl	8019db0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017978:	4b2a      	ldr	r3, [pc, #168]	@ (8017a24 <RadioIrqProcess+0x454>)
 801797a:	785b      	ldrb	r3, [r3, #1]
 801797c:	f083 0301 	eor.w	r3, r3, #1
 8017980:	b2db      	uxtb	r3, r3
 8017982:	2b00      	cmp	r3, #0
 8017984:	d002      	beq.n	801798c <RadioIrqProcess+0x3bc>
            SUBGRF_SetStandby( STDBY_RC );
 8017986:	2000      	movs	r0, #0
 8017988:	f000 fa60 	bl	8017e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801798c:	4b2b      	ldr	r3, [pc, #172]	@ (8017a3c <RadioIrqProcess+0x46c>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d03d      	beq.n	8017a10 <RadioIrqProcess+0x440>
 8017994:	4b29      	ldr	r3, [pc, #164]	@ (8017a3c <RadioIrqProcess+0x46c>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	68db      	ldr	r3, [r3, #12]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d038      	beq.n	8017a10 <RadioIrqProcess+0x440>
            RadioEvents->RxTimeout( );
 801799e:	4b27      	ldr	r3, [pc, #156]	@ (8017a3c <RadioIrqProcess+0x46c>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	68db      	ldr	r3, [r3, #12]
 80179a4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80179a6:	4b26      	ldr	r3, [pc, #152]	@ (8017a40 <RadioIrqProcess+0x470>)
 80179a8:	2201      	movs	r2, #1
 80179aa:	2100      	movs	r1, #0
 80179ac:	2002      	movs	r0, #2
 80179ae:	f001 fb25 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
        break;
 80179b2:	e02d      	b.n	8017a10 <RadioIrqProcess+0x440>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80179b4:	4b23      	ldr	r3, [pc, #140]	@ (8017a44 <RadioIrqProcess+0x474>)
 80179b6:	2201      	movs	r2, #1
 80179b8:	2100      	movs	r1, #0
 80179ba:	2002      	movs	r0, #2
 80179bc:	f001 fb1e 	bl	8018ffc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80179c0:	4b18      	ldr	r3, [pc, #96]	@ (8017a24 <RadioIrqProcess+0x454>)
 80179c2:	785b      	ldrb	r3, [r3, #1]
 80179c4:	f083 0301 	eor.w	r3, r3, #1
 80179c8:	b2db      	uxtb	r3, r3
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d002      	beq.n	80179d4 <RadioIrqProcess+0x404>
            SUBGRF_SetStandby( STDBY_RC );
 80179ce:	2000      	movs	r0, #0
 80179d0:	f000 fa3c 	bl	8017e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80179d4:	4b19      	ldr	r3, [pc, #100]	@ (8017a3c <RadioIrqProcess+0x46c>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d01b      	beq.n	8017a14 <RadioIrqProcess+0x444>
 80179dc:	4b17      	ldr	r3, [pc, #92]	@ (8017a3c <RadioIrqProcess+0x46c>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	691b      	ldr	r3, [r3, #16]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d016      	beq.n	8017a14 <RadioIrqProcess+0x444>
            RadioEvents->RxError( );
 80179e6:	4b15      	ldr	r3, [pc, #84]	@ (8017a3c <RadioIrqProcess+0x46c>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	691b      	ldr	r3, [r3, #16]
 80179ec:	4798      	blx	r3
        break;
 80179ee:	e011      	b.n	8017a14 <RadioIrqProcess+0x444>
        break;
 80179f0:	bf00      	nop
 80179f2:	e010      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 80179f4:	bf00      	nop
 80179f6:	e00e      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 80179f8:	bf00      	nop
 80179fa:	e00c      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 80179fc:	bf00      	nop
 80179fe:	e00a      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 8017a00:	bf00      	nop
 8017a02:	e008      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 8017a04:	bf00      	nop
 8017a06:	e006      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 8017a08:	bf00      	nop
 8017a0a:	e004      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 8017a0c:	bf00      	nop
 8017a0e:	e002      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 8017a10:	bf00      	nop
 8017a12:	e000      	b.n	8017a16 <RadioIrqProcess+0x446>
        break;
 8017a14:	bf00      	nop
    }
}
 8017a16:	bf00      	nop
 8017a18:	3708      	adds	r7, #8
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	080204c0 	.word	0x080204c0
 8017a24:	200012d8 	.word	0x200012d8
 8017a28:	080173c9 	.word	0x080173c9
 8017a2c:	080173ed 	.word	0x080173ed
 8017a30:	080204cc 	.word	0x080204cc
 8017a34:	080204d8 	.word	0x080204d8
 8017a38:	2000134c 	.word	0x2000134c
 8017a3c:	200012d4 	.word	0x200012d4
 8017a40:	080204e4 	.word	0x080204e4
 8017a44:	080204f0 	.word	0x080204f0

08017a48 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017a4c:	4b09      	ldr	r3, [pc, #36]	@ (8017a74 <RadioTxPrbs+0x2c>)
 8017a4e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a52:	2101      	movs	r1, #1
 8017a54:	4618      	mov	r0, r3
 8017a56:	f001 f871 	bl	8018b3c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8017a5a:	4b07      	ldr	r3, [pc, #28]	@ (8017a78 <RadioTxPrbs+0x30>)
 8017a5c:	212d      	movs	r1, #45	@ 0x2d
 8017a5e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8017a62:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017a64:	f000 fab5 	bl	8017fd2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017a68:	4804      	ldr	r0, [pc, #16]	@ (8017a7c <RadioTxPrbs+0x34>)
 8017a6a:	f000 fa0b 	bl	8017e84 <SUBGRF_SetTx>
}
 8017a6e:	bf00      	nop
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	bf00      	nop
 8017a74:	200012d8 	.word	0x200012d8
 8017a78:	080173c9 	.word	0x080173c9
 8017a7c:	000fffff 	.word	0x000fffff

08017a80 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b084      	sub	sp, #16
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	4603      	mov	r3, r0
 8017a88:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f001 f87c 	bl	8018b8c <SUBGRF_SetRfTxPower>
 8017a94:	4603      	mov	r3, r0
 8017a96:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017a98:	210e      	movs	r1, #14
 8017a9a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017a9e:	f000 ff59 	bl	8018954 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017aa2:	7bfb      	ldrb	r3, [r7, #15]
 8017aa4:	2101      	movs	r1, #1
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f001 f848 	bl	8018b3c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017aac:	f000 fa88 	bl	8017fc0 <SUBGRF_SetTxContinuousWave>
}
 8017ab0:	bf00      	nop
 8017ab2:	3710      	adds	r7, #16
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <RadioSetRxGenericConfig>:
}
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8017ab8:	b480      	push	{r7}
 8017aba:	b085      	sub	sp, #20
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	60b9      	str	r1, [r7, #8]
 8017ac0:	607a      	str	r2, [r7, #4]
 8017ac2:	603b      	str	r3, [r7, #0]
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	73fb      	strb	r3, [r7, #15]
    default:
        break;
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8017ac8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8017acc:	4618      	mov	r0, r3
 8017ace:	3714      	adds	r7, #20
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bc80      	pop	{r7}
 8017ad4:	4770      	bx	lr

08017ad6 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8017ad6:	b480      	push	{r7}
 8017ad8:	b085      	sub	sp, #20
 8017ada:	af00      	add	r7, sp, #0
 8017adc:	60b9      	str	r1, [r7, #8]
 8017ade:	607b      	str	r3, [r7, #4]
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	73fb      	strb	r3, [r7, #15]
 8017ae4:	4613      	mov	r3, r2
 8017ae6:	73bb      	strb	r3, [r7, #14]
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8017ae8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3714      	adds	r7, #20
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bc80      	pop	{r7}
 8017af4:	4770      	bx	lr

08017af6 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8017af6:	b480      	push	{r7}
 8017af8:	b085      	sub	sp, #20
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8017afe:	2301      	movs	r3, #1
 8017b00:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8017b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b04:	4618      	mov	r0, r3
 8017b06:	3714      	adds	r7, #20
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bc80      	pop	{r7}
 8017b0c:	4770      	bx	lr

08017b0e <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8017b0e:	b480      	push	{r7}
 8017b10:	b083      	sub	sp, #12
 8017b12:	af00      	add	r7, sp, #0
 8017b14:	6078      	str	r0, [r7, #4]
 8017b16:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8017b18:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	370c      	adds	r7, #12
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bc80      	pop	{r7}
 8017b22:	4770      	bx	lr

08017b24 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b084      	sub	sp, #16
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d002      	beq.n	8017b38 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8017b32:	4a1d      	ldr	r2, [pc, #116]	@ (8017ba8 <SUBGRF_Init+0x84>)
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8017b38:	f7e9 fcb0 	bl	800149c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017b3c:	2002      	movs	r0, #2
 8017b3e:	f001 f901 	bl	8018d44 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8017b42:	4b1a      	ldr	r3, [pc, #104]	@ (8017bac <SUBGRF_Init+0x88>)
 8017b44:	2200      	movs	r2, #0
 8017b46:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8017b48:	2000      	movs	r0, #0
 8017b4a:	f000 f97f 	bl	8017e4c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8017b4e:	f7ea fd1f 	bl	8002590 <RBI_IsTCXO>
 8017b52:	4603      	mov	r3, r0
 8017b54:	2b01      	cmp	r3, #1
 8017b56:	d10e      	bne.n	8017b76 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8017b58:	2140      	movs	r1, #64	@ 0x40
 8017b5a:	2001      	movs	r0, #1
 8017b5c:	f000 fb8a 	bl	8018274 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8017b60:	2100      	movs	r1, #0
 8017b62:	f640 1011 	movw	r0, #2321	@ 0x911
 8017b66:	f000 fef5 	bl	8018954 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8017b6a:	237f      	movs	r3, #127	@ 0x7f
 8017b6c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8017b6e:	7b38      	ldrb	r0, [r7, #12]
 8017b70:	f000 fa8d 	bl	801808e <SUBGRF_Calibrate>
 8017b74:	e009      	b.n	8017b8a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017b76:	2120      	movs	r1, #32
 8017b78:	f640 1011 	movw	r0, #2321	@ 0x911
 8017b7c:	f000 feea 	bl	8018954 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017b80:	2120      	movs	r1, #32
 8017b82:	f640 1012 	movw	r0, #2322	@ 0x912
 8017b86:	f000 fee5 	bl	8018954 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017b8a:	210e      	movs	r1, #14
 8017b8c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017b90:	f000 fee0 	bl	8018954 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8017b94:	f7ea fce0 	bl	8002558 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8017b98:	4b05      	ldr	r3, [pc, #20]	@ (8017bb0 <SUBGRF_Init+0x8c>)
 8017b9a:	2201      	movs	r2, #1
 8017b9c:	701a      	strb	r2, [r3, #0]
}
 8017b9e:	bf00      	nop
 8017ba0:	3710      	adds	r7, #16
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	bd80      	pop	{r7, pc}
 8017ba6:	bf00      	nop
 8017ba8:	20001370 	.word	0x20001370
 8017bac:	2000136c 	.word	0x2000136c
 8017bb0:	20001364 	.word	0x20001364

08017bb4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8017bb4:	b480      	push	{r7}
 8017bb6:	af00      	add	r7, sp, #0
    return OperatingMode;
 8017bb8:	4b02      	ldr	r3, [pc, #8]	@ (8017bc4 <SUBGRF_GetOperatingMode+0x10>)
 8017bba:	781b      	ldrb	r3, [r3, #0]
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bc80      	pop	{r7}
 8017bc2:	4770      	bx	lr
 8017bc4:	20001364 	.word	0x20001364

08017bc8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b082      	sub	sp, #8
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	460b      	mov	r3, r1
 8017bd2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8017bd4:	78fb      	ldrb	r3, [r7, #3]
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	6879      	ldr	r1, [r7, #4]
 8017bda:	2000      	movs	r0, #0
 8017bdc:	f000 ff26 	bl	8018a2c <SUBGRF_WriteBuffer>
}
 8017be0:	bf00      	nop
 8017be2:	3708      	adds	r7, #8
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b086      	sub	sp, #24
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	4613      	mov	r3, r2
 8017bf4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8017bfa:	f107 0317 	add.w	r3, r7, #23
 8017bfe:	4619      	mov	r1, r3
 8017c00:	68b8      	ldr	r0, [r7, #8]
 8017c02:	f000 fe29 	bl	8018858 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	781b      	ldrb	r3, [r3, #0]
 8017c0a:	79fa      	ldrb	r2, [r7, #7]
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d201      	bcs.n	8017c14 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8017c10:	2301      	movs	r3, #1
 8017c12:	e007      	b.n	8017c24 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8017c14:	7df8      	ldrb	r0, [r7, #23]
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	781b      	ldrb	r3, [r3, #0]
 8017c1a:	461a      	mov	r2, r3
 8017c1c:	68f9      	ldr	r1, [r7, #12]
 8017c1e:	f000 ff27 	bl	8018a70 <SUBGRF_ReadBuffer>

    return 0;
 8017c22:	2300      	movs	r3, #0
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3718      	adds	r7, #24
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}

08017c2c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b084      	sub	sp, #16
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	460b      	mov	r3, r1
 8017c36:	607a      	str	r2, [r7, #4]
 8017c38:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8017c3a:	7afb      	ldrb	r3, [r7, #11]
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	68f8      	ldr	r0, [r7, #12]
 8017c40:	f7ff ffc2 	bl	8017bc8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8017c44:	6878      	ldr	r0, [r7, #4]
 8017c46:	f000 f91d 	bl	8017e84 <SUBGRF_SetTx>
}
 8017c4a:	bf00      	nop
 8017c4c:	3710      	adds	r7, #16
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}

08017c52 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8017c52:	b580      	push	{r7, lr}
 8017c54:	b082      	sub	sp, #8
 8017c56:	af00      	add	r7, sp, #0
 8017c58:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8017c5a:	2208      	movs	r2, #8
 8017c5c:	6879      	ldr	r1, [r7, #4]
 8017c5e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8017c62:	f000 fe9f 	bl	80189a4 <SUBGRF_WriteRegisters>
    return 0;
 8017c66:	2300      	movs	r3, #0
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3708      	adds	r7, #8
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}

08017c70 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	4603      	mov	r3, r0
 8017c78:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8017c7a:	88fb      	ldrh	r3, [r7, #6]
 8017c7c:	0a1b      	lsrs	r3, r3, #8
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	b2db      	uxtb	r3, r3
 8017c82:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8017c84:	88fb      	ldrh	r3, [r7, #6]
 8017c86:	b2db      	uxtb	r3, r3
 8017c88:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017c8a:	f000 fb77 	bl	801837c <SUBGRF_GetPacketType>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d108      	bne.n	8017ca6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8017c94:	f107 030c 	add.w	r3, r7, #12
 8017c98:	2202      	movs	r2, #2
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8017ca0:	f000 fe80 	bl	80189a4 <SUBGRF_WriteRegisters>
            break;
 8017ca4:	e000      	b.n	8017ca8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8017ca6:	bf00      	nop
    }
}
 8017ca8:	bf00      	nop
 8017caa:	3710      	adds	r7, #16
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b084      	sub	sp, #16
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8017cba:	88fb      	ldrh	r3, [r7, #6]
 8017cbc:	0a1b      	lsrs	r3, r3, #8
 8017cbe:	b29b      	uxth	r3, r3
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8017cc4:	88fb      	ldrh	r3, [r7, #6]
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017cca:	f000 fb57 	bl	801837c <SUBGRF_GetPacketType>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d108      	bne.n	8017ce6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8017cd4:	f107 030c 	add.w	r3, r7, #12
 8017cd8:	2202      	movs	r2, #2
 8017cda:	4619      	mov	r1, r3
 8017cdc:	f240 60be 	movw	r0, #1726	@ 0x6be
 8017ce0:	f000 fe60 	bl	80189a4 <SUBGRF_WriteRegisters>
            break;
 8017ce4:	e000      	b.n	8017ce8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8017ce6:	bf00      	nop
    }
}
 8017ce8:	bf00      	nop
 8017cea:	3710      	adds	r7, #16
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bd80      	pop	{r7, pc}

08017cf0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b084      	sub	sp, #16
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8017cfe:	f000 fb3d 	bl	801837c <SUBGRF_GetPacketType>
 8017d02:	4603      	mov	r3, r0
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d121      	bne.n	8017d4c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8017d08:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8017d0c:	f000 fe36 	bl	801897c <SUBGRF_ReadRegister>
 8017d10:	4603      	mov	r3, r0
 8017d12:	f023 0301 	bic.w	r3, r3, #1
 8017d16:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8017d18:	88fb      	ldrh	r3, [r7, #6]
 8017d1a:	0a1b      	lsrs	r3, r3, #8
 8017d1c:	b29b      	uxth	r3, r3
 8017d1e:	b25b      	sxtb	r3, r3
 8017d20:	f003 0301 	and.w	r3, r3, #1
 8017d24:	b25a      	sxtb	r2, r3
 8017d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d2a:	4313      	orrs	r3, r2
 8017d2c:	b25b      	sxtb	r3, r3
 8017d2e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8017d30:	7bfb      	ldrb	r3, [r7, #15]
 8017d32:	4619      	mov	r1, r3
 8017d34:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8017d38:	f000 fe0c 	bl	8018954 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8017d3c:	88fb      	ldrh	r3, [r7, #6]
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	4619      	mov	r1, r3
 8017d42:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8017d46:	f000 fe05 	bl	8018954 <SUBGRF_WriteRegister>
            break;
 8017d4a:	e000      	b.n	8017d4e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8017d4c:	bf00      	nop
    }
}
 8017d4e:	bf00      	nop
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}

08017d56 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8017d56:	b580      	push	{r7, lr}
 8017d58:	b082      	sub	sp, #8
 8017d5a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8017d60:	2300      	movs	r3, #0
 8017d62:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8017d64:	2300      	movs	r3, #0
 8017d66:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8017d68:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8017d6c:	f000 fe06 	bl	801897c <SUBGRF_ReadRegister>
 8017d70:	4603      	mov	r3, r0
 8017d72:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8017d74:	79fb      	ldrb	r3, [r7, #7]
 8017d76:	f023 0301 	bic.w	r3, r3, #1
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8017d82:	f000 fde7 	bl	8018954 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8017d86:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8017d8a:	f000 fdf7 	bl	801897c <SUBGRF_ReadRegister>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8017d92:	79bb      	ldrb	r3, [r7, #6]
 8017d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017d98:	b2db      	uxtb	r3, r3
 8017d9a:	4619      	mov	r1, r3
 8017d9c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8017da0:	f000 fdd8 	bl	8018954 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017da4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017da8:	f000 f88c 	bl	8017ec4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8017dac:	463b      	mov	r3, r7
 8017dae:	2204      	movs	r2, #4
 8017db0:	4619      	mov	r1, r3
 8017db2:	f640 0019 	movw	r0, #2073	@ 0x819
 8017db6:	f000 fe17 	bl	80189e8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8017dba:	2000      	movs	r0, #0
 8017dbc:	f000 f846 	bl	8017e4c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8017dc0:	79fb      	ldrb	r3, [r7, #7]
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8017dc8:	f000 fdc4 	bl	8018954 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8017dcc:	79bb      	ldrb	r3, [r7, #6]
 8017dce:	4619      	mov	r1, r3
 8017dd0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8017dd4:	f000 fdbe 	bl	8018954 <SUBGRF_WriteRegister>

    return number;
 8017dd8:	683b      	ldr	r3, [r7, #0]
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
	...

08017de4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b084      	sub	sp, #16
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8017dec:	2000      	movs	r0, #0
 8017dee:	f7ea fbba 	bl	8002566 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017df2:	2002      	movs	r0, #2
 8017df4:	f000 ffa6 	bl	8018d44 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017df8:	793b      	ldrb	r3, [r7, #4]
 8017dfa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017dfe:	b2db      	uxtb	r3, r3
 8017e00:	b25b      	sxtb	r3, r3
 8017e02:	009b      	lsls	r3, r3, #2
 8017e04:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017e06:	793b      	ldrb	r3, [r7, #4]
 8017e08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017e0c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017e0e:	b25b      	sxtb	r3, r3
 8017e10:	005b      	lsls	r3, r3, #1
 8017e12:	b25b      	sxtb	r3, r3
 8017e14:	4313      	orrs	r3, r2
 8017e16:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8017e18:	793b      	ldrb	r3, [r7, #4]
 8017e1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017e22:	4313      	orrs	r3, r2
 8017e24:	b25b      	sxtb	r3, r3
 8017e26:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017e28:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8017e2a:	f107 030f 	add.w	r3, r7, #15
 8017e2e:	2201      	movs	r2, #1
 8017e30:	4619      	mov	r1, r3
 8017e32:	2084      	movs	r0, #132	@ 0x84
 8017e34:	f000 fe3e 	bl	8018ab4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8017e38:	4b03      	ldr	r3, [pc, #12]	@ (8017e48 <SUBGRF_SetSleep+0x64>)
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	701a      	strb	r2, [r3, #0]
}
 8017e3e:	bf00      	nop
 8017e40:	3710      	adds	r7, #16
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}
 8017e46:	bf00      	nop
 8017e48:	20001364 	.word	0x20001364

08017e4c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b082      	sub	sp, #8
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	4603      	mov	r3, r0
 8017e54:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8017e56:	1dfb      	adds	r3, r7, #7
 8017e58:	2201      	movs	r2, #1
 8017e5a:	4619      	mov	r1, r3
 8017e5c:	2080      	movs	r0, #128	@ 0x80
 8017e5e:	f000 fe29 	bl	8018ab4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8017e62:	79fb      	ldrb	r3, [r7, #7]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d103      	bne.n	8017e70 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8017e68:	4b05      	ldr	r3, [pc, #20]	@ (8017e80 <SUBGRF_SetStandby+0x34>)
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8017e6e:	e002      	b.n	8017e76 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8017e70:	4b03      	ldr	r3, [pc, #12]	@ (8017e80 <SUBGRF_SetStandby+0x34>)
 8017e72:	2202      	movs	r2, #2
 8017e74:	701a      	strb	r2, [r3, #0]
}
 8017e76:	bf00      	nop
 8017e78:	3708      	adds	r7, #8
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd80      	pop	{r7, pc}
 8017e7e:	bf00      	nop
 8017e80:	20001364 	.word	0x20001364

08017e84 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8017e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8017ec0 <SUBGRF_SetTx+0x3c>)
 8017e8e:	2204      	movs	r2, #4
 8017e90:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	0c1b      	lsrs	r3, r3, #16
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	0a1b      	lsrs	r3, r3, #8
 8017e9e:	b2db      	uxtb	r3, r3
 8017ea0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	b2db      	uxtb	r3, r3
 8017ea6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8017ea8:	f107 030c 	add.w	r3, r7, #12
 8017eac:	2203      	movs	r2, #3
 8017eae:	4619      	mov	r1, r3
 8017eb0:	2083      	movs	r0, #131	@ 0x83
 8017eb2:	f000 fdff 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8017eb6:	bf00      	nop
 8017eb8:	3710      	adds	r7, #16
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	bd80      	pop	{r7, pc}
 8017ebe:	bf00      	nop
 8017ec0:	20001364 	.word	0x20001364

08017ec4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b084      	sub	sp, #16
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8017ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8017f00 <SUBGRF_SetRx+0x3c>)
 8017ece:	2205      	movs	r2, #5
 8017ed0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	0c1b      	lsrs	r3, r3, #16
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	0a1b      	lsrs	r3, r3, #8
 8017ede:	b2db      	uxtb	r3, r3
 8017ee0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	b2db      	uxtb	r3, r3
 8017ee6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8017ee8:	f107 030c 	add.w	r3, r7, #12
 8017eec:	2203      	movs	r2, #3
 8017eee:	4619      	mov	r1, r3
 8017ef0:	2082      	movs	r0, #130	@ 0x82
 8017ef2:	f000 fddf 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8017ef6:	bf00      	nop
 8017ef8:	3710      	adds	r7, #16
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}
 8017efe:	bf00      	nop
 8017f00:	20001364 	.word	0x20001364

08017f04 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b084      	sub	sp, #16
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8017f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8017f48 <SUBGRF_SetRxBoosted+0x44>)
 8017f0e:	2205      	movs	r2, #5
 8017f10:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8017f12:	2197      	movs	r1, #151	@ 0x97
 8017f14:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8017f18:	f000 fd1c 	bl	8018954 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	0c1b      	lsrs	r3, r3, #16
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	0a1b      	lsrs	r3, r3, #8
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	b2db      	uxtb	r3, r3
 8017f30:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8017f32:	f107 030c 	add.w	r3, r7, #12
 8017f36:	2203      	movs	r2, #3
 8017f38:	4619      	mov	r1, r3
 8017f3a:	2082      	movs	r0, #130	@ 0x82
 8017f3c:	f000 fdba 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8017f40:	bf00      	nop
 8017f42:	3710      	adds	r7, #16
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}
 8017f48:	20001364 	.word	0x20001364

08017f4c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b084      	sub	sp, #16
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
 8017f54:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	0c1b      	lsrs	r3, r3, #16
 8017f5a:	b2db      	uxtb	r3, r3
 8017f5c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	0a1b      	lsrs	r3, r3, #8
 8017f62:	b2db      	uxtb	r3, r3
 8017f64:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	b2db      	uxtb	r3, r3
 8017f6a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8017f6c:	683b      	ldr	r3, [r7, #0]
 8017f6e:	0c1b      	lsrs	r3, r3, #16
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	0a1b      	lsrs	r3, r3, #8
 8017f78:	b2db      	uxtb	r3, r3
 8017f7a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	b2db      	uxtb	r3, r3
 8017f80:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8017f82:	f107 0308 	add.w	r3, r7, #8
 8017f86:	2206      	movs	r2, #6
 8017f88:	4619      	mov	r1, r3
 8017f8a:	2094      	movs	r0, #148	@ 0x94
 8017f8c:	f000 fd92 	bl	8018ab4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8017f90:	4b03      	ldr	r3, [pc, #12]	@ (8017fa0 <SUBGRF_SetRxDutyCycle+0x54>)
 8017f92:	2206      	movs	r2, #6
 8017f94:	701a      	strb	r2, [r3, #0]
}
 8017f96:	bf00      	nop
 8017f98:	3710      	adds	r7, #16
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	20001364 	.word	0x20001364

08017fa4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8017fa8:	2200      	movs	r2, #0
 8017faa:	2100      	movs	r1, #0
 8017fac:	20c5      	movs	r0, #197	@ 0xc5
 8017fae:	f000 fd81 	bl	8018ab4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8017fb2:	4b02      	ldr	r3, [pc, #8]	@ (8017fbc <SUBGRF_SetCad+0x18>)
 8017fb4:	2207      	movs	r2, #7
 8017fb6:	701a      	strb	r2, [r3, #0]
}
 8017fb8:	bf00      	nop
 8017fba:	bd80      	pop	{r7, pc}
 8017fbc:	20001364 	.word	0x20001364

08017fc0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	20d1      	movs	r0, #209	@ 0xd1
 8017fca:	f000 fd73 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8017fce:	bf00      	nop
 8017fd0:	bd80      	pop	{r7, pc}

08017fd2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8017fd2:	b580      	push	{r7, lr}
 8017fd4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	2100      	movs	r1, #0
 8017fda:	20d2      	movs	r0, #210	@ 0xd2
 8017fdc:	f000 fd6a 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8017fe0:	bf00      	nop
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b082      	sub	sp, #8
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	4603      	mov	r3, r0
 8017fec:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8017fee:	1dfb      	adds	r3, r7, #7
 8017ff0:	2201      	movs	r2, #1
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	209f      	movs	r0, #159	@ 0x9f
 8017ff6:	f000 fd5d 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8017ffa:	bf00      	nop
 8017ffc:	3708      	adds	r7, #8
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}

08018002 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018002:	b580      	push	{r7, lr}
 8018004:	b084      	sub	sp, #16
 8018006:	af00      	add	r7, sp, #0
 8018008:	4603      	mov	r3, r0
 801800a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801800c:	1dfb      	adds	r3, r7, #7
 801800e:	2201      	movs	r2, #1
 8018010:	4619      	mov	r1, r3
 8018012:	20a0      	movs	r0, #160	@ 0xa0
 8018014:	f000 fd4e 	bl	8018ab4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018018:	79fb      	ldrb	r3, [r7, #7]
 801801a:	2b3f      	cmp	r3, #63	@ 0x3f
 801801c:	d91c      	bls.n	8018058 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801801e:	79fb      	ldrb	r3, [r7, #7]
 8018020:	085b      	lsrs	r3, r3, #1
 8018022:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018024:	2300      	movs	r3, #0
 8018026:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018028:	2300      	movs	r3, #0
 801802a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801802c:	e005      	b.n	801803a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801802e:	7bfb      	ldrb	r3, [r7, #15]
 8018030:	089b      	lsrs	r3, r3, #2
 8018032:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018034:	7bbb      	ldrb	r3, [r7, #14]
 8018036:	3301      	adds	r3, #1
 8018038:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801803a:	7bfb      	ldrb	r3, [r7, #15]
 801803c:	2b1f      	cmp	r3, #31
 801803e:	d8f6      	bhi.n	801802e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018040:	7bfb      	ldrb	r3, [r7, #15]
 8018042:	00db      	lsls	r3, r3, #3
 8018044:	b2da      	uxtb	r2, r3
 8018046:	7bbb      	ldrb	r3, [r7, #14]
 8018048:	4413      	add	r3, r2
 801804a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801804c:	7b7b      	ldrb	r3, [r7, #13]
 801804e:	4619      	mov	r1, r3
 8018050:	f240 7006 	movw	r0, #1798	@ 0x706
 8018054:	f000 fc7e 	bl	8018954 <SUBGRF_WriteRegister>
    }
}
 8018058:	bf00      	nop
 801805a:	3710      	adds	r7, #16
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b082      	sub	sp, #8
 8018064:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018066:	f7ea fa9a 	bl	800259e <RBI_IsDCDC>
 801806a:	4603      	mov	r3, r0
 801806c:	2b01      	cmp	r3, #1
 801806e:	d102      	bne.n	8018076 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018070:	2301      	movs	r3, #1
 8018072:	71fb      	strb	r3, [r7, #7]
 8018074:	e001      	b.n	801807a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018076:	2300      	movs	r3, #0
 8018078:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801807a:	1dfb      	adds	r3, r7, #7
 801807c:	2201      	movs	r2, #1
 801807e:	4619      	mov	r1, r3
 8018080:	2096      	movs	r0, #150	@ 0x96
 8018082:	f000 fd17 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8018086:	bf00      	nop
 8018088:	3708      	adds	r7, #8
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}

0801808e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801808e:	b580      	push	{r7, lr}
 8018090:	b084      	sub	sp, #16
 8018092:	af00      	add	r7, sp, #0
 8018094:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018096:	793b      	ldrb	r3, [r7, #4]
 8018098:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801809c:	b2db      	uxtb	r3, r3
 801809e:	b25b      	sxtb	r3, r3
 80180a0:	019b      	lsls	r3, r3, #6
 80180a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80180a4:	793b      	ldrb	r3, [r7, #4]
 80180a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80180aa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80180ac:	b25b      	sxtb	r3, r3
 80180ae:	015b      	lsls	r3, r3, #5
 80180b0:	b25b      	sxtb	r3, r3
 80180b2:	4313      	orrs	r3, r2
 80180b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80180b6:	793b      	ldrb	r3, [r7, #4]
 80180b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80180bc:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80180be:	b25b      	sxtb	r3, r3
 80180c0:	011b      	lsls	r3, r3, #4
 80180c2:	b25b      	sxtb	r3, r3
 80180c4:	4313      	orrs	r3, r2
 80180c6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80180c8:	793b      	ldrb	r3, [r7, #4]
 80180ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80180ce:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80180d0:	b25b      	sxtb	r3, r3
 80180d2:	00db      	lsls	r3, r3, #3
 80180d4:	b25b      	sxtb	r3, r3
 80180d6:	4313      	orrs	r3, r2
 80180d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80180da:	793b      	ldrb	r3, [r7, #4]
 80180dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80180e0:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80180e2:	b25b      	sxtb	r3, r3
 80180e4:	009b      	lsls	r3, r3, #2
 80180e6:	b25b      	sxtb	r3, r3
 80180e8:	4313      	orrs	r3, r2
 80180ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80180ec:	793b      	ldrb	r3, [r7, #4]
 80180ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80180f2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80180f4:	b25b      	sxtb	r3, r3
 80180f6:	005b      	lsls	r3, r3, #1
 80180f8:	b25b      	sxtb	r3, r3
 80180fa:	4313      	orrs	r3, r2
 80180fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80180fe:	793b      	ldrb	r3, [r7, #4]
 8018100:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018104:	b2db      	uxtb	r3, r3
 8018106:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018108:	4313      	orrs	r3, r2
 801810a:	b25b      	sxtb	r3, r3
 801810c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801810e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018110:	f107 030f 	add.w	r3, r7, #15
 8018114:	2201      	movs	r2, #1
 8018116:	4619      	mov	r1, r3
 8018118:	2089      	movs	r0, #137	@ 0x89
 801811a:	f000 fccb 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 801811e:	bf00      	nop
 8018120:	3710      	adds	r7, #16
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}
	...

08018128 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	4a1d      	ldr	r2, [pc, #116]	@ (80181a8 <SUBGRF_CalibrateImage+0x80>)
 8018134:	4293      	cmp	r3, r2
 8018136:	d904      	bls.n	8018142 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018138:	23e1      	movs	r3, #225	@ 0xe1
 801813a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801813c:	23e9      	movs	r3, #233	@ 0xe9
 801813e:	737b      	strb	r3, [r7, #13]
 8018140:	e027      	b.n	8018192 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	4a19      	ldr	r2, [pc, #100]	@ (80181ac <SUBGRF_CalibrateImage+0x84>)
 8018146:	4293      	cmp	r3, r2
 8018148:	d904      	bls.n	8018154 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801814a:	23d7      	movs	r3, #215	@ 0xd7
 801814c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801814e:	23db      	movs	r3, #219	@ 0xdb
 8018150:	737b      	strb	r3, [r7, #13]
 8018152:	e01e      	b.n	8018192 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	4a16      	ldr	r2, [pc, #88]	@ (80181b0 <SUBGRF_CalibrateImage+0x88>)
 8018158:	4293      	cmp	r3, r2
 801815a:	d904      	bls.n	8018166 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801815c:	23c1      	movs	r3, #193	@ 0xc1
 801815e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018160:	23c5      	movs	r3, #197	@ 0xc5
 8018162:	737b      	strb	r3, [r7, #13]
 8018164:	e015      	b.n	8018192 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	4a12      	ldr	r2, [pc, #72]	@ (80181b4 <SUBGRF_CalibrateImage+0x8c>)
 801816a:	4293      	cmp	r3, r2
 801816c:	d904      	bls.n	8018178 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801816e:	2375      	movs	r3, #117	@ 0x75
 8018170:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018172:	2381      	movs	r3, #129	@ 0x81
 8018174:	737b      	strb	r3, [r7, #13]
 8018176:	e00c      	b.n	8018192 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	4a0f      	ldr	r2, [pc, #60]	@ (80181b8 <SUBGRF_CalibrateImage+0x90>)
 801817c:	4293      	cmp	r3, r2
 801817e:	d904      	bls.n	801818a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8018180:	236b      	movs	r3, #107	@ 0x6b
 8018182:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018184:	236f      	movs	r3, #111	@ 0x6f
 8018186:	737b      	strb	r3, [r7, #13]
 8018188:	e003      	b.n	8018192 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801818a:	2329      	movs	r3, #41	@ 0x29
 801818c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801818e:	232b      	movs	r3, #43	@ 0x2b
 8018190:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018192:	f107 030c 	add.w	r3, r7, #12
 8018196:	2202      	movs	r2, #2
 8018198:	4619      	mov	r1, r3
 801819a:	2098      	movs	r0, #152	@ 0x98
 801819c:	f000 fc8a 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 80181a0:	bf00      	nop
 80181a2:	3710      	adds	r7, #16
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	35a4e900 	.word	0x35a4e900
 80181ac:	32a9f880 	.word	0x32a9f880
 80181b0:	2de54480 	.word	0x2de54480
 80181b4:	1b6b0b00 	.word	0x1b6b0b00
 80181b8:	1954fc40 	.word	0x1954fc40

080181bc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80181bc:	b590      	push	{r4, r7, lr}
 80181be:	b085      	sub	sp, #20
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	4604      	mov	r4, r0
 80181c4:	4608      	mov	r0, r1
 80181c6:	4611      	mov	r1, r2
 80181c8:	461a      	mov	r2, r3
 80181ca:	4623      	mov	r3, r4
 80181cc:	71fb      	strb	r3, [r7, #7]
 80181ce:	4603      	mov	r3, r0
 80181d0:	71bb      	strb	r3, [r7, #6]
 80181d2:	460b      	mov	r3, r1
 80181d4:	717b      	strb	r3, [r7, #5]
 80181d6:	4613      	mov	r3, r2
 80181d8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80181da:	79fb      	ldrb	r3, [r7, #7]
 80181dc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80181de:	79bb      	ldrb	r3, [r7, #6]
 80181e0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80181e2:	797b      	ldrb	r3, [r7, #5]
 80181e4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80181e6:	793b      	ldrb	r3, [r7, #4]
 80181e8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80181ea:	f107 030c 	add.w	r3, r7, #12
 80181ee:	2204      	movs	r2, #4
 80181f0:	4619      	mov	r1, r3
 80181f2:	2095      	movs	r0, #149	@ 0x95
 80181f4:	f000 fc5e 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 80181f8:	bf00      	nop
 80181fa:	3714      	adds	r7, #20
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd90      	pop	{r4, r7, pc}

08018200 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018200:	b590      	push	{r4, r7, lr}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	4604      	mov	r4, r0
 8018208:	4608      	mov	r0, r1
 801820a:	4611      	mov	r1, r2
 801820c:	461a      	mov	r2, r3
 801820e:	4623      	mov	r3, r4
 8018210:	80fb      	strh	r3, [r7, #6]
 8018212:	4603      	mov	r3, r0
 8018214:	80bb      	strh	r3, [r7, #4]
 8018216:	460b      	mov	r3, r1
 8018218:	807b      	strh	r3, [r7, #2]
 801821a:	4613      	mov	r3, r2
 801821c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801821e:	88fb      	ldrh	r3, [r7, #6]
 8018220:	0a1b      	lsrs	r3, r3, #8
 8018222:	b29b      	uxth	r3, r3
 8018224:	b2db      	uxtb	r3, r3
 8018226:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018228:	88fb      	ldrh	r3, [r7, #6]
 801822a:	b2db      	uxtb	r3, r3
 801822c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801822e:	88bb      	ldrh	r3, [r7, #4]
 8018230:	0a1b      	lsrs	r3, r3, #8
 8018232:	b29b      	uxth	r3, r3
 8018234:	b2db      	uxtb	r3, r3
 8018236:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018238:	88bb      	ldrh	r3, [r7, #4]
 801823a:	b2db      	uxtb	r3, r3
 801823c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801823e:	887b      	ldrh	r3, [r7, #2]
 8018240:	0a1b      	lsrs	r3, r3, #8
 8018242:	b29b      	uxth	r3, r3
 8018244:	b2db      	uxtb	r3, r3
 8018246:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018248:	887b      	ldrh	r3, [r7, #2]
 801824a:	b2db      	uxtb	r3, r3
 801824c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801824e:	883b      	ldrh	r3, [r7, #0]
 8018250:	0a1b      	lsrs	r3, r3, #8
 8018252:	b29b      	uxth	r3, r3
 8018254:	b2db      	uxtb	r3, r3
 8018256:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018258:	883b      	ldrh	r3, [r7, #0]
 801825a:	b2db      	uxtb	r3, r3
 801825c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801825e:	f107 0308 	add.w	r3, r7, #8
 8018262:	2208      	movs	r2, #8
 8018264:	4619      	mov	r1, r3
 8018266:	2008      	movs	r0, #8
 8018268:	f000 fc24 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 801826c:	bf00      	nop
 801826e:	3714      	adds	r7, #20
 8018270:	46bd      	mov	sp, r7
 8018272:	bd90      	pop	{r4, r7, pc}

08018274 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b084      	sub	sp, #16
 8018278:	af00      	add	r7, sp, #0
 801827a:	4603      	mov	r3, r0
 801827c:	6039      	str	r1, [r7, #0]
 801827e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018280:	79fb      	ldrb	r3, [r7, #7]
 8018282:	f003 0307 	and.w	r3, r3, #7
 8018286:	b2db      	uxtb	r3, r3
 8018288:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801828a:	683b      	ldr	r3, [r7, #0]
 801828c:	0c1b      	lsrs	r3, r3, #16
 801828e:	b2db      	uxtb	r3, r3
 8018290:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018292:	683b      	ldr	r3, [r7, #0]
 8018294:	0a1b      	lsrs	r3, r3, #8
 8018296:	b2db      	uxtb	r3, r3
 8018298:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	b2db      	uxtb	r3, r3
 801829e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80182a0:	f107 030c 	add.w	r3, r7, #12
 80182a4:	2204      	movs	r2, #4
 80182a6:	4619      	mov	r1, r3
 80182a8:	2097      	movs	r0, #151	@ 0x97
 80182aa:	f000 fc03 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 80182ae:	bf00      	nop
 80182b0:	3710      	adds	r7, #16
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}
	...

080182b8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80182b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80182bc:	b084      	sub	sp, #16
 80182be:	af00      	add	r7, sp, #0
 80182c0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80182c2:	2300      	movs	r3, #0
 80182c4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80182c6:	4b1d      	ldr	r3, [pc, #116]	@ (801833c <SUBGRF_SetRfFrequency+0x84>)
 80182c8:	781b      	ldrb	r3, [r3, #0]
 80182ca:	f083 0301 	eor.w	r3, r3, #1
 80182ce:	b2db      	uxtb	r3, r3
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d005      	beq.n	80182e0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80182d4:	6878      	ldr	r0, [r7, #4]
 80182d6:	f7ff ff27 	bl	8018128 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80182da:	4b18      	ldr	r3, [pc, #96]	@ (801833c <SUBGRF_SetRfFrequency+0x84>)
 80182dc:	2201      	movs	r2, #1
 80182de:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2200      	movs	r2, #0
 80182e4:	461c      	mov	r4, r3
 80182e6:	4615      	mov	r5, r2
 80182e8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80182ec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80182f0:	4a13      	ldr	r2, [pc, #76]	@ (8018340 <SUBGRF_SetRfFrequency+0x88>)
 80182f2:	f04f 0300 	mov.w	r3, #0
 80182f6:	4640      	mov	r0, r8
 80182f8:	4649      	mov	r1, r9
 80182fa:	f7e8 fd1f 	bl	8000d3c <__aeabi_uldivmod>
 80182fe:	4602      	mov	r2, r0
 8018300:	460b      	mov	r3, r1
 8018302:	4613      	mov	r3, r2
 8018304:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	0e1b      	lsrs	r3, r3, #24
 801830a:	b2db      	uxtb	r3, r3
 801830c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	0c1b      	lsrs	r3, r3, #16
 8018312:	b2db      	uxtb	r3, r3
 8018314:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	0a1b      	lsrs	r3, r3, #8
 801831a:	b2db      	uxtb	r3, r3
 801831c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	b2db      	uxtb	r3, r3
 8018322:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018324:	f107 0308 	add.w	r3, r7, #8
 8018328:	2204      	movs	r2, #4
 801832a:	4619      	mov	r1, r3
 801832c:	2086      	movs	r0, #134	@ 0x86
 801832e:	f000 fbc1 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8018332:	bf00      	nop
 8018334:	3710      	adds	r7, #16
 8018336:	46bd      	mov	sp, r7
 8018338:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801833c:	2000136c 	.word	0x2000136c
 8018340:	01e84800 	.word	0x01e84800

08018344 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b082      	sub	sp, #8
 8018348:	af00      	add	r7, sp, #0
 801834a:	4603      	mov	r3, r0
 801834c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801834e:	79fa      	ldrb	r2, [r7, #7]
 8018350:	4b09      	ldr	r3, [pc, #36]	@ (8018378 <SUBGRF_SetPacketType+0x34>)
 8018352:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018354:	79fb      	ldrb	r3, [r7, #7]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d104      	bne.n	8018364 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801835a:	2100      	movs	r1, #0
 801835c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018360:	f000 faf8 	bl	8018954 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018364:	1dfb      	adds	r3, r7, #7
 8018366:	2201      	movs	r2, #1
 8018368:	4619      	mov	r1, r3
 801836a:	208a      	movs	r0, #138	@ 0x8a
 801836c:	f000 fba2 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8018370:	bf00      	nop
 8018372:	3708      	adds	r7, #8
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}
 8018378:	20001365 	.word	0x20001365

0801837c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801837c:	b480      	push	{r7}
 801837e:	af00      	add	r7, sp, #0
    return PacketType;
 8018380:	4b02      	ldr	r3, [pc, #8]	@ (801838c <SUBGRF_GetPacketType+0x10>)
 8018382:	781b      	ldrb	r3, [r3, #0]
}
 8018384:	4618      	mov	r0, r3
 8018386:	46bd      	mov	sp, r7
 8018388:	bc80      	pop	{r7}
 801838a:	4770      	bx	lr
 801838c:	20001365 	.word	0x20001365

08018390 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b084      	sub	sp, #16
 8018394:	af00      	add	r7, sp, #0
 8018396:	4603      	mov	r3, r0
 8018398:	71fb      	strb	r3, [r7, #7]
 801839a:	460b      	mov	r3, r1
 801839c:	71bb      	strb	r3, [r7, #6]
 801839e:	4613      	mov	r3, r2
 80183a0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80183a2:	79fb      	ldrb	r3, [r7, #7]
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d149      	bne.n	801843c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80183a8:	2000      	movs	r0, #0
 80183aa:	f7ea f8ff 	bl	80025ac <RBI_GetRFOMaxPowerConfig>
 80183ae:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80183b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80183b4:	68fa      	ldr	r2, [r7, #12]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	da01      	bge.n	80183be <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	2b0e      	cmp	r3, #14
 80183c2:	d10e      	bne.n	80183e2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80183c4:	2301      	movs	r3, #1
 80183c6:	2201      	movs	r2, #1
 80183c8:	2100      	movs	r1, #0
 80183ca:	2004      	movs	r0, #4
 80183cc:	f7ff fef6 	bl	80181bc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80183d0:	79ba      	ldrb	r2, [r7, #6]
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	b2db      	uxtb	r3, r3
 80183d6:	1ad3      	subs	r3, r2, r3
 80183d8:	b2db      	uxtb	r3, r3
 80183da:	330e      	adds	r3, #14
 80183dc:	b2db      	uxtb	r3, r3
 80183de:	71bb      	strb	r3, [r7, #6]
 80183e0:	e01f      	b.n	8018422 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	2b0a      	cmp	r3, #10
 80183e6:	d10e      	bne.n	8018406 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80183e8:	2301      	movs	r3, #1
 80183ea:	2201      	movs	r2, #1
 80183ec:	2100      	movs	r1, #0
 80183ee:	2001      	movs	r0, #1
 80183f0:	f7ff fee4 	bl	80181bc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80183f4:	79ba      	ldrb	r2, [r7, #6]
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	1ad3      	subs	r3, r2, r3
 80183fc:	b2db      	uxtb	r3, r3
 80183fe:	330d      	adds	r3, #13
 8018400:	b2db      	uxtb	r3, r3
 8018402:	71bb      	strb	r3, [r7, #6]
 8018404:	e00d      	b.n	8018422 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8018406:	2301      	movs	r3, #1
 8018408:	2201      	movs	r2, #1
 801840a:	2100      	movs	r1, #0
 801840c:	2007      	movs	r0, #7
 801840e:	f7ff fed5 	bl	80181bc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018412:	79ba      	ldrb	r2, [r7, #6]
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	b2db      	uxtb	r3, r3
 8018418:	1ad3      	subs	r3, r2, r3
 801841a:	b2db      	uxtb	r3, r3
 801841c:	330e      	adds	r3, #14
 801841e:	b2db      	uxtb	r3, r3
 8018420:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8018422:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018426:	f113 0f11 	cmn.w	r3, #17
 801842a:	da01      	bge.n	8018430 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801842c:	23ef      	movs	r3, #239	@ 0xef
 801842e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8018430:	2118      	movs	r1, #24
 8018432:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018436:	f000 fa8d 	bl	8018954 <SUBGRF_WriteRegister>
 801843a:	e067      	b.n	801850c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801843c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8018440:	f000 fa9c 	bl	801897c <SUBGRF_ReadRegister>
 8018444:	4603      	mov	r3, r0
 8018446:	f043 031e 	orr.w	r3, r3, #30
 801844a:	b2db      	uxtb	r3, r3
 801844c:	4619      	mov	r1, r3
 801844e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8018452:	f000 fa7f 	bl	8018954 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8018456:	2001      	movs	r0, #1
 8018458:	f7ea f8a8 	bl	80025ac <RBI_GetRFOMaxPowerConfig>
 801845c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801845e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018462:	68fa      	ldr	r2, [r7, #12]
 8018464:	429a      	cmp	r2, r3
 8018466:	da01      	bge.n	801846c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	2b14      	cmp	r3, #20
 8018470:	d10e      	bne.n	8018490 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8018472:	2301      	movs	r3, #1
 8018474:	2200      	movs	r2, #0
 8018476:	2105      	movs	r1, #5
 8018478:	2003      	movs	r0, #3
 801847a:	f7ff fe9f 	bl	80181bc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801847e:	79ba      	ldrb	r2, [r7, #6]
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	b2db      	uxtb	r3, r3
 8018484:	1ad3      	subs	r3, r2, r3
 8018486:	b2db      	uxtb	r3, r3
 8018488:	3316      	adds	r3, #22
 801848a:	b2db      	uxtb	r3, r3
 801848c:	71bb      	strb	r3, [r7, #6]
 801848e:	e031      	b.n	80184f4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	2b11      	cmp	r3, #17
 8018494:	d10e      	bne.n	80184b4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8018496:	2301      	movs	r3, #1
 8018498:	2200      	movs	r2, #0
 801849a:	2103      	movs	r1, #3
 801849c:	2002      	movs	r0, #2
 801849e:	f7ff fe8d 	bl	80181bc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80184a2:	79ba      	ldrb	r2, [r7, #6]
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	b2db      	uxtb	r3, r3
 80184a8:	1ad3      	subs	r3, r2, r3
 80184aa:	b2db      	uxtb	r3, r3
 80184ac:	3316      	adds	r3, #22
 80184ae:	b2db      	uxtb	r3, r3
 80184b0:	71bb      	strb	r3, [r7, #6]
 80184b2:	e01f      	b.n	80184f4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	2b0e      	cmp	r3, #14
 80184b8:	d10e      	bne.n	80184d8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80184ba:	2301      	movs	r3, #1
 80184bc:	2200      	movs	r2, #0
 80184be:	2102      	movs	r1, #2
 80184c0:	2002      	movs	r0, #2
 80184c2:	f7ff fe7b 	bl	80181bc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80184c6:	79ba      	ldrb	r2, [r7, #6]
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	b2db      	uxtb	r3, r3
 80184cc:	1ad3      	subs	r3, r2, r3
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	330e      	adds	r3, #14
 80184d2:	b2db      	uxtb	r3, r3
 80184d4:	71bb      	strb	r3, [r7, #6]
 80184d6:	e00d      	b.n	80184f4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80184d8:	2301      	movs	r3, #1
 80184da:	2200      	movs	r2, #0
 80184dc:	2107      	movs	r1, #7
 80184de:	2004      	movs	r0, #4
 80184e0:	f7ff fe6c 	bl	80181bc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80184e4:	79ba      	ldrb	r2, [r7, #6]
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	1ad3      	subs	r3, r2, r3
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	3316      	adds	r3, #22
 80184f0:	b2db      	uxtb	r3, r3
 80184f2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80184f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80184f8:	f113 0f09 	cmn.w	r3, #9
 80184fc:	da01      	bge.n	8018502 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80184fe:	23f7      	movs	r3, #247	@ 0xf7
 8018500:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8018502:	2138      	movs	r1, #56	@ 0x38
 8018504:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018508:	f000 fa24 	bl	8018954 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801850c:	79bb      	ldrb	r3, [r7, #6]
 801850e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8018510:	797b      	ldrb	r3, [r7, #5]
 8018512:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8018514:	f107 0308 	add.w	r3, r7, #8
 8018518:	2202      	movs	r2, #2
 801851a:	4619      	mov	r1, r3
 801851c:	208e      	movs	r0, #142	@ 0x8e
 801851e:	f000 fac9 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8018522:	bf00      	nop
 8018524:	3710      	adds	r7, #16
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
	...

0801852c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801852c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018530:	b086      	sub	sp, #24
 8018532:	af00      	add	r7, sp, #0
 8018534:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018536:	2300      	movs	r3, #0
 8018538:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801853a:	f107 0308 	add.w	r3, r7, #8
 801853e:	2200      	movs	r2, #0
 8018540:	601a      	str	r2, [r3, #0]
 8018542:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	781a      	ldrb	r2, [r3, #0]
 8018548:	4b5c      	ldr	r3, [pc, #368]	@ (80186bc <SUBGRF_SetModulationParams+0x190>)
 801854a:	781b      	ldrb	r3, [r3, #0]
 801854c:	429a      	cmp	r2, r3
 801854e:	d004      	beq.n	801855a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	4618      	mov	r0, r3
 8018556:	f7ff fef5 	bl	8018344 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	2b03      	cmp	r3, #3
 8018560:	f200 80a5 	bhi.w	80186ae <SUBGRF_SetModulationParams+0x182>
 8018564:	a201      	add	r2, pc, #4	@ (adr r2, 801856c <SUBGRF_SetModulationParams+0x40>)
 8018566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801856a:	bf00      	nop
 801856c:	0801857d 	.word	0x0801857d
 8018570:	0801863d 	.word	0x0801863d
 8018574:	080185ff 	.word	0x080185ff
 8018578:	0801866b 	.word	0x0801866b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801857c:	2308      	movs	r3, #8
 801857e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	685b      	ldr	r3, [r3, #4]
 8018584:	4a4e      	ldr	r2, [pc, #312]	@ (80186c0 <SUBGRF_SetModulationParams+0x194>)
 8018586:	fbb2 f3f3 	udiv	r3, r2, r3
 801858a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	0c1b      	lsrs	r3, r3, #16
 8018590:	b2db      	uxtb	r3, r3
 8018592:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	0a1b      	lsrs	r3, r3, #8
 8018598:	b2db      	uxtb	r3, r3
 801859a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	b2db      	uxtb	r3, r3
 80185a0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	7b1b      	ldrb	r3, [r3, #12]
 80185a6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	7b5b      	ldrb	r3, [r3, #13]
 80185ac:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	689b      	ldr	r3, [r3, #8]
 80185b2:	2200      	movs	r2, #0
 80185b4:	461c      	mov	r4, r3
 80185b6:	4615      	mov	r5, r2
 80185b8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80185bc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80185c0:	4a40      	ldr	r2, [pc, #256]	@ (80186c4 <SUBGRF_SetModulationParams+0x198>)
 80185c2:	f04f 0300 	mov.w	r3, #0
 80185c6:	4640      	mov	r0, r8
 80185c8:	4649      	mov	r1, r9
 80185ca:	f7e8 fbb7 	bl	8000d3c <__aeabi_uldivmod>
 80185ce:	4602      	mov	r2, r0
 80185d0:	460b      	mov	r3, r1
 80185d2:	4613      	mov	r3, r2
 80185d4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80185d6:	697b      	ldr	r3, [r7, #20]
 80185d8:	0c1b      	lsrs	r3, r3, #16
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	0a1b      	lsrs	r3, r3, #8
 80185e2:	b2db      	uxtb	r3, r3
 80185e4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	b2db      	uxtb	r3, r3
 80185ea:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80185ec:	7cfb      	ldrb	r3, [r7, #19]
 80185ee:	b29a      	uxth	r2, r3
 80185f0:	f107 0308 	add.w	r3, r7, #8
 80185f4:	4619      	mov	r1, r3
 80185f6:	208b      	movs	r0, #139	@ 0x8b
 80185f8:	f000 fa5c 	bl	8018ab4 <SUBGRF_WriteCommand>
        break;
 80185fc:	e058      	b.n	80186b0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 80185fe:	2304      	movs	r3, #4
 8018600:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	691b      	ldr	r3, [r3, #16]
 8018606:	4a2e      	ldr	r2, [pc, #184]	@ (80186c0 <SUBGRF_SetModulationParams+0x194>)
 8018608:	fbb2 f3f3 	udiv	r3, r2, r3
 801860c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	0c1b      	lsrs	r3, r3, #16
 8018612:	b2db      	uxtb	r3, r3
 8018614:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	0a1b      	lsrs	r3, r3, #8
 801861a:	b2db      	uxtb	r3, r3
 801861c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	b2db      	uxtb	r3, r3
 8018622:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	7d1b      	ldrb	r3, [r3, #20]
 8018628:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801862a:	7cfb      	ldrb	r3, [r7, #19]
 801862c:	b29a      	uxth	r2, r3
 801862e:	f107 0308 	add.w	r3, r7, #8
 8018632:	4619      	mov	r1, r3
 8018634:	208b      	movs	r0, #139	@ 0x8b
 8018636:	f000 fa3d 	bl	8018ab4 <SUBGRF_WriteCommand>
        break;
 801863a:	e039      	b.n	80186b0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801863c:	2304      	movs	r3, #4
 801863e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	7e1b      	ldrb	r3, [r3, #24]
 8018644:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	7e5b      	ldrb	r3, [r3, #25]
 801864a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	7e9b      	ldrb	r3, [r3, #26]
 8018650:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	7edb      	ldrb	r3, [r3, #27]
 8018656:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018658:	7cfb      	ldrb	r3, [r7, #19]
 801865a:	b29a      	uxth	r2, r3
 801865c:	f107 0308 	add.w	r3, r7, #8
 8018660:	4619      	mov	r1, r3
 8018662:	208b      	movs	r0, #139	@ 0x8b
 8018664:	f000 fa26 	bl	8018ab4 <SUBGRF_WriteCommand>

        break;
 8018668:	e022      	b.n	80186b0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801866a:	2305      	movs	r3, #5
 801866c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	685b      	ldr	r3, [r3, #4]
 8018672:	4a13      	ldr	r2, [pc, #76]	@ (80186c0 <SUBGRF_SetModulationParams+0x194>)
 8018674:	fbb2 f3f3 	udiv	r3, r2, r3
 8018678:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	0c1b      	lsrs	r3, r3, #16
 801867e:	b2db      	uxtb	r3, r3
 8018680:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	0a1b      	lsrs	r3, r3, #8
 8018686:	b2db      	uxtb	r3, r3
 8018688:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	b2db      	uxtb	r3, r3
 801868e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	7b1b      	ldrb	r3, [r3, #12]
 8018694:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	7b5b      	ldrb	r3, [r3, #13]
 801869a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801869c:	7cfb      	ldrb	r3, [r7, #19]
 801869e:	b29a      	uxth	r2, r3
 80186a0:	f107 0308 	add.w	r3, r7, #8
 80186a4:	4619      	mov	r1, r3
 80186a6:	208b      	movs	r0, #139	@ 0x8b
 80186a8:	f000 fa04 	bl	8018ab4 <SUBGRF_WriteCommand>
        break;
 80186ac:	e000      	b.n	80186b0 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 80186ae:	bf00      	nop
    }
}
 80186b0:	bf00      	nop
 80186b2:	3718      	adds	r7, #24
 80186b4:	46bd      	mov	sp, r7
 80186b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80186ba:	bf00      	nop
 80186bc:	20001365 	.word	0x20001365
 80186c0:	3d090000 	.word	0x3d090000
 80186c4:	01e84800 	.word	0x01e84800

080186c8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b086      	sub	sp, #24
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80186d0:	2300      	movs	r3, #0
 80186d2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80186d4:	f107 030c 	add.w	r3, r7, #12
 80186d8:	2200      	movs	r2, #0
 80186da:	601a      	str	r2, [r3, #0]
 80186dc:	605a      	str	r2, [r3, #4]
 80186de:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	781a      	ldrb	r2, [r3, #0]
 80186e4:	4b44      	ldr	r3, [pc, #272]	@ (80187f8 <SUBGRF_SetPacketParams+0x130>)
 80186e6:	781b      	ldrb	r3, [r3, #0]
 80186e8:	429a      	cmp	r2, r3
 80186ea:	d004      	beq.n	80186f6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	781b      	ldrb	r3, [r3, #0]
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7ff fe27 	bl	8018344 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	2b03      	cmp	r3, #3
 80186fc:	d878      	bhi.n	80187f0 <SUBGRF_SetPacketParams+0x128>
 80186fe:	a201      	add	r2, pc, #4	@ (adr r2, 8018704 <SUBGRF_SetPacketParams+0x3c>)
 8018700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018704:	08018715 	.word	0x08018715
 8018708:	080187a5 	.word	0x080187a5
 801870c:	08018799 	.word	0x08018799
 8018710:	08018715 	.word	0x08018715
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	7a5b      	ldrb	r3, [r3, #9]
 8018718:	2bf1      	cmp	r3, #241	@ 0xf1
 801871a:	d10a      	bne.n	8018732 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801871c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018720:	f7ff faa6 	bl	8017c70 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018724:	f248 0005 	movw	r0, #32773	@ 0x8005
 8018728:	f7ff fac2 	bl	8017cb0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801872c:	2302      	movs	r3, #2
 801872e:	75bb      	strb	r3, [r7, #22]
 8018730:	e011      	b.n	8018756 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	7a5b      	ldrb	r3, [r3, #9]
 8018736:	2bf2      	cmp	r3, #242	@ 0xf2
 8018738:	d10a      	bne.n	8018750 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801873a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801873e:	f7ff fa97 	bl	8017c70 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018742:	f241 0021 	movw	r0, #4129	@ 0x1021
 8018746:	f7ff fab3 	bl	8017cb0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801874a:	2306      	movs	r3, #6
 801874c:	75bb      	strb	r3, [r7, #22]
 801874e:	e002      	b.n	8018756 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	7a5b      	ldrb	r3, [r3, #9]
 8018754:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018756:	2309      	movs	r3, #9
 8018758:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	885b      	ldrh	r3, [r3, #2]
 801875e:	0a1b      	lsrs	r3, r3, #8
 8018760:	b29b      	uxth	r3, r3
 8018762:	b2db      	uxtb	r3, r3
 8018764:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	885b      	ldrh	r3, [r3, #2]
 801876a:	b2db      	uxtb	r3, r3
 801876c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	791b      	ldrb	r3, [r3, #4]
 8018772:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	795b      	ldrb	r3, [r3, #5]
 8018778:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	799b      	ldrb	r3, [r3, #6]
 801877e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	79db      	ldrb	r3, [r3, #7]
 8018784:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	7a1b      	ldrb	r3, [r3, #8]
 801878a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801878c:	7dbb      	ldrb	r3, [r7, #22]
 801878e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	7a9b      	ldrb	r3, [r3, #10]
 8018794:	753b      	strb	r3, [r7, #20]
        break;
 8018796:	e022      	b.n	80187de <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018798:	2301      	movs	r3, #1
 801879a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	7b1b      	ldrb	r3, [r3, #12]
 80187a0:	733b      	strb	r3, [r7, #12]
        break;
 80187a2:	e01c      	b.n	80187de <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80187a4:	2306      	movs	r3, #6
 80187a6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	89db      	ldrh	r3, [r3, #14]
 80187ac:	0a1b      	lsrs	r3, r3, #8
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	89db      	ldrh	r3, [r3, #14]
 80187b8:	b2db      	uxtb	r3, r3
 80187ba:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	7c1a      	ldrb	r2, [r3, #16]
 80187c0:	4b0e      	ldr	r3, [pc, #56]	@ (80187fc <SUBGRF_SetPacketParams+0x134>)
 80187c2:	4611      	mov	r1, r2
 80187c4:	7019      	strb	r1, [r3, #0]
 80187c6:	4613      	mov	r3, r2
 80187c8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	7c5b      	ldrb	r3, [r3, #17]
 80187ce:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	7c9b      	ldrb	r3, [r3, #18]
 80187d4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	7cdb      	ldrb	r3, [r3, #19]
 80187da:	747b      	strb	r3, [r7, #17]
        break;
 80187dc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80187de:	7dfb      	ldrb	r3, [r7, #23]
 80187e0:	b29a      	uxth	r2, r3
 80187e2:	f107 030c 	add.w	r3, r7, #12
 80187e6:	4619      	mov	r1, r3
 80187e8:	208c      	movs	r0, #140	@ 0x8c
 80187ea:	f000 f963 	bl	8018ab4 <SUBGRF_WriteCommand>
 80187ee:	e000      	b.n	80187f2 <SUBGRF_SetPacketParams+0x12a>
        return;
 80187f0:	bf00      	nop
}
 80187f2:	3718      	adds	r7, #24
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}
 80187f8:	20001365 	.word	0x20001365
 80187fc:	20001366 	.word	0x20001366

08018800 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b084      	sub	sp, #16
 8018804:	af00      	add	r7, sp, #0
 8018806:	4603      	mov	r3, r0
 8018808:	460a      	mov	r2, r1
 801880a:	71fb      	strb	r3, [r7, #7]
 801880c:	4613      	mov	r3, r2
 801880e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018810:	79fb      	ldrb	r3, [r7, #7]
 8018812:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018814:	79bb      	ldrb	r3, [r7, #6]
 8018816:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018818:	f107 030c 	add.w	r3, r7, #12
 801881c:	2202      	movs	r2, #2
 801881e:	4619      	mov	r1, r3
 8018820:	208f      	movs	r0, #143	@ 0x8f
 8018822:	f000 f947 	bl	8018ab4 <SUBGRF_WriteCommand>
}
 8018826:	bf00      	nop
 8018828:	3710      	adds	r7, #16
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}

0801882e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801882e:	b580      	push	{r7, lr}
 8018830:	b082      	sub	sp, #8
 8018832:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018834:	2300      	movs	r3, #0
 8018836:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018838:	1d3b      	adds	r3, r7, #4
 801883a:	2201      	movs	r2, #1
 801883c:	4619      	mov	r1, r3
 801883e:	2015      	movs	r0, #21
 8018840:	f000 f95a 	bl	8018af8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018844:	793b      	ldrb	r3, [r7, #4]
 8018846:	425b      	negs	r3, r3
 8018848:	105b      	asrs	r3, r3, #1
 801884a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801884c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018850:	4618      	mov	r0, r3
 8018852:	3708      	adds	r7, #8
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}

08018858 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b084      	sub	sp, #16
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
 8018860:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018862:	f107 030c 	add.w	r3, r7, #12
 8018866:	2202      	movs	r2, #2
 8018868:	4619      	mov	r1, r3
 801886a:	2013      	movs	r0, #19
 801886c:	f000 f944 	bl	8018af8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018870:	f7ff fd84 	bl	801837c <SUBGRF_GetPacketType>
 8018874:	4603      	mov	r3, r0
 8018876:	2b01      	cmp	r3, #1
 8018878:	d10d      	bne.n	8018896 <SUBGRF_GetRxBufferStatus+0x3e>
 801887a:	4b0c      	ldr	r3, [pc, #48]	@ (80188ac <SUBGRF_GetRxBufferStatus+0x54>)
 801887c:	781b      	ldrb	r3, [r3, #0]
 801887e:	b2db      	uxtb	r3, r3
 8018880:	2b01      	cmp	r3, #1
 8018882:	d108      	bne.n	8018896 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018884:	f240 7002 	movw	r0, #1794	@ 0x702
 8018888:	f000 f878 	bl	801897c <SUBGRF_ReadRegister>
 801888c:	4603      	mov	r3, r0
 801888e:	461a      	mov	r2, r3
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	701a      	strb	r2, [r3, #0]
 8018894:	e002      	b.n	801889c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018896:	7b3a      	ldrb	r2, [r7, #12]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801889c:	7b7a      	ldrb	r2, [r7, #13]
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	701a      	strb	r2, [r3, #0]
}
 80188a2:	bf00      	nop
 80188a4:	3710      	adds	r7, #16
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}
 80188aa:	bf00      	nop
 80188ac:	20001366 	.word	0x20001366

080188b0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b084      	sub	sp, #16
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80188b8:	f107 030c 	add.w	r3, r7, #12
 80188bc:	2203      	movs	r2, #3
 80188be:	4619      	mov	r1, r3
 80188c0:	2014      	movs	r0, #20
 80188c2:	f000 f919 	bl	8018af8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80188c6:	f7ff fd59 	bl	801837c <SUBGRF_GetPacketType>
 80188ca:	4603      	mov	r3, r0
 80188cc:	461a      	mov	r2, r3
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	781b      	ldrb	r3, [r3, #0]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d002      	beq.n	80188e0 <SUBGRF_GetPacketStatus+0x30>
 80188da:	2b01      	cmp	r3, #1
 80188dc:	d013      	beq.n	8018906 <SUBGRF_GetPacketStatus+0x56>
 80188de:	e02a      	b.n	8018936 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80188e0:	7b3a      	ldrb	r2, [r7, #12]
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80188e6:	7b7b      	ldrb	r3, [r7, #13]
 80188e8:	425b      	negs	r3, r3
 80188ea:	105b      	asrs	r3, r3, #1
 80188ec:	b25a      	sxtb	r2, r3
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80188f2:	7bbb      	ldrb	r3, [r7, #14]
 80188f4:	425b      	negs	r3, r3
 80188f6:	105b      	asrs	r3, r3, #1
 80188f8:	b25a      	sxtb	r2, r3
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	2200      	movs	r2, #0
 8018902:	609a      	str	r2, [r3, #8]
            break;
 8018904:	e020      	b.n	8018948 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8018906:	7b3b      	ldrb	r3, [r7, #12]
 8018908:	425b      	negs	r3, r3
 801890a:	105b      	asrs	r3, r3, #1
 801890c:	b25a      	sxtb	r2, r3
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8018912:	7b7b      	ldrb	r3, [r7, #13]
 8018914:	b25b      	sxtb	r3, r3
 8018916:	3302      	adds	r3, #2
 8018918:	109b      	asrs	r3, r3, #2
 801891a:	b25a      	sxtb	r2, r3
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8018920:	7bbb      	ldrb	r3, [r7, #14]
 8018922:	425b      	negs	r3, r3
 8018924:	105b      	asrs	r3, r3, #1
 8018926:	b25a      	sxtb	r2, r3
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801892c:	4b08      	ldr	r3, [pc, #32]	@ (8018950 <SUBGRF_GetPacketStatus+0xa0>)
 801892e:	681a      	ldr	r2, [r3, #0]
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	611a      	str	r2, [r3, #16]
            break;
 8018934:	e008      	b.n	8018948 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8018936:	2214      	movs	r2, #20
 8018938:	2100      	movs	r1, #0
 801893a:	6878      	ldr	r0, [r7, #4]
 801893c:	f000 fe7c 	bl	8019638 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	220f      	movs	r2, #15
 8018944:	701a      	strb	r2, [r3, #0]
            break;
 8018946:	bf00      	nop
    }
}
 8018948:	bf00      	nop
 801894a:	3710      	adds	r7, #16
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}
 8018950:	20001368 	.word	0x20001368

08018954 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b082      	sub	sp, #8
 8018958:	af00      	add	r7, sp, #0
 801895a:	4603      	mov	r3, r0
 801895c:	460a      	mov	r2, r1
 801895e:	80fb      	strh	r3, [r7, #6]
 8018960:	4613      	mov	r3, r2
 8018962:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8018964:	1d7a      	adds	r2, r7, #5
 8018966:	88f9      	ldrh	r1, [r7, #6]
 8018968:	2301      	movs	r3, #1
 801896a:	4803      	ldr	r0, [pc, #12]	@ (8018978 <SUBGRF_WriteRegister+0x24>)
 801896c:	f7ee f85c 	bl	8006a28 <HAL_SUBGHZ_WriteRegisters>
}
 8018970:	bf00      	nop
 8018972:	3708      	adds	r7, #8
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}
 8018978:	20000724 	.word	0x20000724

0801897c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	4603      	mov	r3, r0
 8018984:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8018986:	f107 020f 	add.w	r2, r7, #15
 801898a:	88f9      	ldrh	r1, [r7, #6]
 801898c:	2301      	movs	r3, #1
 801898e:	4804      	ldr	r0, [pc, #16]	@ (80189a0 <SUBGRF_ReadRegister+0x24>)
 8018990:	f7ee f8a9 	bl	8006ae6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8018994:	7bfb      	ldrb	r3, [r7, #15]
}
 8018996:	4618      	mov	r0, r3
 8018998:	3710      	adds	r7, #16
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}
 801899e:	bf00      	nop
 80189a0:	20000724 	.word	0x20000724

080189a4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b086      	sub	sp, #24
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	4603      	mov	r3, r0
 80189ac:	6039      	str	r1, [r7, #0]
 80189ae:	80fb      	strh	r3, [r7, #6]
 80189b0:	4613      	mov	r3, r2
 80189b2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189b4:	f3ef 8310 	mrs	r3, PRIMASK
 80189b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80189ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80189bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80189be:	b672      	cpsid	i
}
 80189c0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80189c2:	88bb      	ldrh	r3, [r7, #4]
 80189c4:	88f9      	ldrh	r1, [r7, #6]
 80189c6:	683a      	ldr	r2, [r7, #0]
 80189c8:	4806      	ldr	r0, [pc, #24]	@ (80189e4 <SUBGRF_WriteRegisters+0x40>)
 80189ca:	f7ee f82d 	bl	8006a28 <HAL_SUBGHZ_WriteRegisters>
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189d2:	693b      	ldr	r3, [r7, #16]
 80189d4:	f383 8810 	msr	PRIMASK, r3
}
 80189d8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80189da:	bf00      	nop
 80189dc:	3718      	adds	r7, #24
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	20000724 	.word	0x20000724

080189e8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b086      	sub	sp, #24
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	4603      	mov	r3, r0
 80189f0:	6039      	str	r1, [r7, #0]
 80189f2:	80fb      	strh	r3, [r7, #6]
 80189f4:	4613      	mov	r3, r2
 80189f6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189f8:	f3ef 8310 	mrs	r3, PRIMASK
 80189fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80189fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a02:	b672      	cpsid	i
}
 8018a04:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8018a06:	88bb      	ldrh	r3, [r7, #4]
 8018a08:	88f9      	ldrh	r1, [r7, #6]
 8018a0a:	683a      	ldr	r2, [r7, #0]
 8018a0c:	4806      	ldr	r0, [pc, #24]	@ (8018a28 <SUBGRF_ReadRegisters+0x40>)
 8018a0e:	f7ee f86a 	bl	8006ae6 <HAL_SUBGHZ_ReadRegisters>
 8018a12:	697b      	ldr	r3, [r7, #20]
 8018a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a16:	693b      	ldr	r3, [r7, #16]
 8018a18:	f383 8810 	msr	PRIMASK, r3
}
 8018a1c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018a1e:	bf00      	nop
 8018a20:	3718      	adds	r7, #24
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
 8018a26:	bf00      	nop
 8018a28:	20000724 	.word	0x20000724

08018a2c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b086      	sub	sp, #24
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	4603      	mov	r3, r0
 8018a34:	6039      	str	r1, [r7, #0]
 8018a36:	71fb      	strb	r3, [r7, #7]
 8018a38:	4613      	mov	r3, r2
 8018a3a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8018a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a42:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a46:	b672      	cpsid	i
}
 8018a48:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8018a4a:	79bb      	ldrb	r3, [r7, #6]
 8018a4c:	b29b      	uxth	r3, r3
 8018a4e:	79f9      	ldrb	r1, [r7, #7]
 8018a50:	683a      	ldr	r2, [r7, #0]
 8018a52:	4806      	ldr	r0, [pc, #24]	@ (8018a6c <SUBGRF_WriteBuffer+0x40>)
 8018a54:	f7ee f95b 	bl	8006d0e <HAL_SUBGHZ_WriteBuffer>
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	f383 8810 	msr	PRIMASK, r3
}
 8018a62:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018a64:	bf00      	nop
 8018a66:	3718      	adds	r7, #24
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bd80      	pop	{r7, pc}
 8018a6c:	20000724 	.word	0x20000724

08018a70 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b086      	sub	sp, #24
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	4603      	mov	r3, r0
 8018a78:	6039      	str	r1, [r7, #0]
 8018a7a:	71fb      	strb	r3, [r7, #7]
 8018a7c:	4613      	mov	r3, r2
 8018a7e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a80:	f3ef 8310 	mrs	r3, PRIMASK
 8018a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a86:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a8a:	b672      	cpsid	i
}
 8018a8c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8018a8e:	79bb      	ldrb	r3, [r7, #6]
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	79f9      	ldrb	r1, [r7, #7]
 8018a94:	683a      	ldr	r2, [r7, #0]
 8018a96:	4806      	ldr	r0, [pc, #24]	@ (8018ab0 <SUBGRF_ReadBuffer+0x40>)
 8018a98:	f7ee f98c 	bl	8006db4 <HAL_SUBGHZ_ReadBuffer>
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018aa0:	693b      	ldr	r3, [r7, #16]
 8018aa2:	f383 8810 	msr	PRIMASK, r3
}
 8018aa6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018aa8:	bf00      	nop
 8018aaa:	3718      	adds	r7, #24
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	20000724 	.word	0x20000724

08018ab4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b086      	sub	sp, #24
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	4603      	mov	r3, r0
 8018abc:	6039      	str	r1, [r7, #0]
 8018abe:	71fb      	strb	r3, [r7, #7]
 8018ac0:	4613      	mov	r3, r2
 8018ac2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8018ac8:	60fb      	str	r3, [r7, #12]
  return(result);
 8018aca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018acc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018ace:	b672      	cpsid	i
}
 8018ad0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8018ad2:	88bb      	ldrh	r3, [r7, #4]
 8018ad4:	79f9      	ldrb	r1, [r7, #7]
 8018ad6:	683a      	ldr	r2, [r7, #0]
 8018ad8:	4806      	ldr	r0, [pc, #24]	@ (8018af4 <SUBGRF_WriteCommand+0x40>)
 8018ada:	f7ee f865 	bl	8006ba8 <HAL_SUBGHZ_ExecSetCmd>
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ae2:	693b      	ldr	r3, [r7, #16]
 8018ae4:	f383 8810 	msr	PRIMASK, r3
}
 8018ae8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018aea:	bf00      	nop
 8018aec:	3718      	adds	r7, #24
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}
 8018af2:	bf00      	nop
 8018af4:	20000724 	.word	0x20000724

08018af8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b086      	sub	sp, #24
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	4603      	mov	r3, r0
 8018b00:	6039      	str	r1, [r7, #0]
 8018b02:	71fb      	strb	r3, [r7, #7]
 8018b04:	4613      	mov	r3, r2
 8018b06:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b08:	f3ef 8310 	mrs	r3, PRIMASK
 8018b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8018b0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018b12:	b672      	cpsid	i
}
 8018b14:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8018b16:	88bb      	ldrh	r3, [r7, #4]
 8018b18:	79f9      	ldrb	r1, [r7, #7]
 8018b1a:	683a      	ldr	r2, [r7, #0]
 8018b1c:	4806      	ldr	r0, [pc, #24]	@ (8018b38 <SUBGRF_ReadCommand+0x40>)
 8018b1e:	f7ee f8a2 	bl	8006c66 <HAL_SUBGHZ_ExecGetCmd>
 8018b22:	697b      	ldr	r3, [r7, #20]
 8018b24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b26:	693b      	ldr	r3, [r7, #16]
 8018b28:	f383 8810 	msr	PRIMASK, r3
}
 8018b2c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018b2e:	bf00      	nop
 8018b30:	3718      	adds	r7, #24
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd80      	pop	{r7, pc}
 8018b36:	bf00      	nop
 8018b38:	20000724 	.word	0x20000724

08018b3c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b084      	sub	sp, #16
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	4603      	mov	r3, r0
 8018b44:	460a      	mov	r2, r1
 8018b46:	71fb      	strb	r3, [r7, #7]
 8018b48:	4613      	mov	r3, r2
 8018b4a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8018b4c:	2301      	movs	r3, #1
 8018b4e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8018b50:	79bb      	ldrb	r3, [r7, #6]
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	d10d      	bne.n	8018b72 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8018b56:	79fb      	ldrb	r3, [r7, #7]
 8018b58:	2b01      	cmp	r3, #1
 8018b5a:	d104      	bne.n	8018b66 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8018b5c:	2302      	movs	r3, #2
 8018b5e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8018b60:	2004      	movs	r0, #4
 8018b62:	f000 f8ef 	bl	8018d44 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8018b66:	79fb      	ldrb	r3, [r7, #7]
 8018b68:	2b02      	cmp	r3, #2
 8018b6a:	d107      	bne.n	8018b7c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8018b6c:	2303      	movs	r3, #3
 8018b6e:	73fb      	strb	r3, [r7, #15]
 8018b70:	e004      	b.n	8018b7c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8018b72:	79bb      	ldrb	r3, [r7, #6]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d101      	bne.n	8018b7c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8018b78:	2301      	movs	r3, #1
 8018b7a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8018b7c:	7bfb      	ldrb	r3, [r7, #15]
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f7e9 fcf1 	bl	8002566 <RBI_ConfigRFSwitch>
}
 8018b84:	bf00      	nop
 8018b86:	3710      	adds	r7, #16
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}

08018b8c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b084      	sub	sp, #16
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	4603      	mov	r3, r0
 8018b94:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8018b96:	2301      	movs	r3, #1
 8018b98:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8018b9a:	f7e9 fcf2 	bl	8002582 <RBI_GetTxConfig>
 8018b9e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	2b02      	cmp	r3, #2
 8018ba4:	d016      	beq.n	8018bd4 <SUBGRF_SetRfTxPower+0x48>
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	2b02      	cmp	r3, #2
 8018baa:	dc16      	bgt.n	8018bda <SUBGRF_SetRfTxPower+0x4e>
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d003      	beq.n	8018bba <SUBGRF_SetRfTxPower+0x2e>
 8018bb2:	68bb      	ldr	r3, [r7, #8]
 8018bb4:	2b01      	cmp	r3, #1
 8018bb6:	d00a      	beq.n	8018bce <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8018bb8:	e00f      	b.n	8018bda <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8018bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018bbe:	2b0f      	cmp	r3, #15
 8018bc0:	dd02      	ble.n	8018bc8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8018bc2:	2302      	movs	r3, #2
 8018bc4:	73fb      	strb	r3, [r7, #15]
            break;
 8018bc6:	e009      	b.n	8018bdc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8018bc8:	2301      	movs	r3, #1
 8018bca:	73fb      	strb	r3, [r7, #15]
            break;
 8018bcc:	e006      	b.n	8018bdc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8018bce:	2301      	movs	r3, #1
 8018bd0:	73fb      	strb	r3, [r7, #15]
            break;
 8018bd2:	e003      	b.n	8018bdc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8018bd4:	2302      	movs	r3, #2
 8018bd6:	73fb      	strb	r3, [r7, #15]
            break;
 8018bd8:	e000      	b.n	8018bdc <SUBGRF_SetRfTxPower+0x50>
            break;
 8018bda:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8018bdc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8018be0:	7bfb      	ldrb	r3, [r7, #15]
 8018be2:	2202      	movs	r2, #2
 8018be4:	4618      	mov	r0, r3
 8018be6:	f7ff fbd3 	bl	8018390 <SUBGRF_SetTxParams>

    return paSelect;
 8018bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	3710      	adds	r7, #16
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}

08018bf4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8018bf4:	b480      	push	{r7}
 8018bf6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8018bf8:	2301      	movs	r3, #1
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bc80      	pop	{r7}
 8018c00:	4770      	bx	lr
	...

08018c04 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b082      	sub	sp, #8
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8018c0c:	4b03      	ldr	r3, [pc, #12]	@ (8018c1c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	2001      	movs	r0, #1
 8018c12:	4798      	blx	r3
}
 8018c14:	bf00      	nop
 8018c16:	3708      	adds	r7, #8
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	20001370 	.word	0x20001370

08018c20 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8018c28:	4b03      	ldr	r3, [pc, #12]	@ (8018c38 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	2002      	movs	r0, #2
 8018c2e:	4798      	blx	r3
}
 8018c30:	bf00      	nop
 8018c32:	3708      	adds	r7, #8
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd80      	pop	{r7, pc}
 8018c38:	20001370 	.word	0x20001370

08018c3c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b082      	sub	sp, #8
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8018c44:	4b03      	ldr	r3, [pc, #12]	@ (8018c54 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	2040      	movs	r0, #64	@ 0x40
 8018c4a:	4798      	blx	r3
}
 8018c4c:	bf00      	nop
 8018c4e:	3708      	adds	r7, #8
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	20001370 	.word	0x20001370

08018c58 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b082      	sub	sp, #8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	460b      	mov	r3, r1
 8018c62:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8018c64:	78fb      	ldrb	r3, [r7, #3]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d002      	beq.n	8018c70 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8018c6a:	2b01      	cmp	r3, #1
 8018c6c:	d005      	beq.n	8018c7a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8018c6e:	e00a      	b.n	8018c86 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8018c70:	4b07      	ldr	r3, [pc, #28]	@ (8018c90 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	2080      	movs	r0, #128	@ 0x80
 8018c76:	4798      	blx	r3
            break;
 8018c78:	e005      	b.n	8018c86 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8018c7a:	4b05      	ldr	r3, [pc, #20]	@ (8018c90 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8018c82:	4798      	blx	r3
            break;
 8018c84:	bf00      	nop
    }
}
 8018c86:	bf00      	nop
 8018c88:	3708      	adds	r7, #8
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bd80      	pop	{r7, pc}
 8018c8e:	bf00      	nop
 8018c90:	20001370 	.word	0x20001370

08018c94 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8018c9c:	4b04      	ldr	r3, [pc, #16]	@ (8018cb0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018ca4:	4798      	blx	r3
}
 8018ca6:	bf00      	nop
 8018ca8:	3708      	adds	r7, #8
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
 8018cae:	bf00      	nop
 8018cb0:	20001370 	.word	0x20001370

08018cb4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b082      	sub	sp, #8
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8018cbc:	4b03      	ldr	r3, [pc, #12]	@ (8018ccc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2020      	movs	r0, #32
 8018cc2:	4798      	blx	r3
}
 8018cc4:	bf00      	nop
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	20001370 	.word	0x20001370

08018cd0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8018cd8:	4b03      	ldr	r3, [pc, #12]	@ (8018ce8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	2004      	movs	r0, #4
 8018cde:	4798      	blx	r3
}
 8018ce0:	bf00      	nop
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	20001370 	.word	0x20001370

08018cec <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b082      	sub	sp, #8
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8018cf4:	4b03      	ldr	r3, [pc, #12]	@ (8018d04 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	2008      	movs	r0, #8
 8018cfa:	4798      	blx	r3
}
 8018cfc:	bf00      	nop
 8018cfe:	3708      	adds	r7, #8
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	20001370 	.word	0x20001370

08018d08 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8018d10:	4b03      	ldr	r3, [pc, #12]	@ (8018d20 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	2010      	movs	r0, #16
 8018d16:	4798      	blx	r3
}
 8018d18:	bf00      	nop
 8018d1a:	3708      	adds	r7, #8
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}
 8018d20:	20001370 	.word	0x20001370

08018d24 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8018d2c:	4b04      	ldr	r3, [pc, #16]	@ (8018d40 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8018d34:	4798      	blx	r3
}
 8018d36:	bf00      	nop
 8018d38:	3708      	adds	r7, #8
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	bd80      	pop	{r7, pc}
 8018d3e:	bf00      	nop
 8018d40:	20001370 	.word	0x20001370

08018d44 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b084      	sub	sp, #16
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8018d4e:	f7e9 fc26 	bl	800259e <RBI_IsDCDC>
 8018d52:	4603      	mov	r3, r0
 8018d54:	2b01      	cmp	r3, #1
 8018d56:	d112      	bne.n	8018d7e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8018d58:	f640 1023 	movw	r0, #2339	@ 0x923
 8018d5c:	f7ff fe0e 	bl	801897c <SUBGRF_ReadRegister>
 8018d60:	4603      	mov	r3, r0
 8018d62:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8018d64:	7bfb      	ldrb	r3, [r7, #15]
 8018d66:	f023 0306 	bic.w	r3, r3, #6
 8018d6a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8018d6c:	7bfa      	ldrb	r2, [r7, #15]
 8018d6e:	79fb      	ldrb	r3, [r7, #7]
 8018d70:	4313      	orrs	r3, r2
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	4619      	mov	r1, r3
 8018d76:	f640 1023 	movw	r0, #2339	@ 0x923
 8018d7a:	f7ff fdeb 	bl	8018954 <SUBGRF_WriteRegister>
  }
}
 8018d7e:	bf00      	nop
 8018d80:	3710      	adds	r7, #16
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}
	...

08018d88 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8018d88:	b480      	push	{r7}
 8018d8a:	b085      	sub	sp, #20
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d101      	bne.n	8018d9a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8018d96:	231f      	movs	r3, #31
 8018d98:	e017      	b.n	8018dca <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	73fb      	strb	r3, [r7, #15]
 8018d9e:	e00f      	b.n	8018dc0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8018da0:	7bfb      	ldrb	r3, [r7, #15]
 8018da2:	4a0c      	ldr	r2, [pc, #48]	@ (8018dd4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018da8:	687a      	ldr	r2, [r7, #4]
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d205      	bcs.n	8018dba <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8018dae:	7bfb      	ldrb	r3, [r7, #15]
 8018db0:	4a08      	ldr	r2, [pc, #32]	@ (8018dd4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018db2:	00db      	lsls	r3, r3, #3
 8018db4:	4413      	add	r3, r2
 8018db6:	791b      	ldrb	r3, [r3, #4]
 8018db8:	e007      	b.n	8018dca <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018dba:	7bfb      	ldrb	r3, [r7, #15]
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	73fb      	strb	r3, [r7, #15]
 8018dc0:	7bfb      	ldrb	r3, [r7, #15]
 8018dc2:	2b15      	cmp	r3, #21
 8018dc4:	d9ec      	bls.n	8018da0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8018dc6:	bf00      	nop
 8018dc8:	e7fd      	b.n	8018dc6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	3714      	adds	r7, #20
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bc80      	pop	{r7}
 8018dd2:	4770      	bx	lr
 8018dd4:	08020c3c 	.word	0x08020c3c

08018dd8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b08a      	sub	sp, #40	@ 0x28
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
 8018de0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8018de2:	4b35      	ldr	r3, [pc, #212]	@ (8018eb8 <SUBGRF_GetCFO+0xe0>)
 8018de4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8018de6:	f640 0007 	movw	r0, #2055	@ 0x807
 8018dea:	f7ff fdc7 	bl	801897c <SUBGRF_ReadRegister>
 8018dee:	4603      	mov	r3, r0
 8018df0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8018df2:	7ffb      	ldrb	r3, [r7, #31]
 8018df4:	08db      	lsrs	r3, r3, #3
 8018df6:	b2db      	uxtb	r3, r3
 8018df8:	f003 0303 	and.w	r3, r3, #3
 8018dfc:	3328      	adds	r3, #40	@ 0x28
 8018dfe:	443b      	add	r3, r7
 8018e00:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8018e04:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8018e06:	7ffb      	ldrb	r3, [r7, #31]
 8018e08:	f003 0307 	and.w	r3, r3, #7
 8018e0c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8018e0e:	7fba      	ldrb	r2, [r7, #30]
 8018e10:	7f7b      	ldrb	r3, [r7, #29]
 8018e12:	3301      	adds	r3, #1
 8018e14:	fa02 f303 	lsl.w	r3, r2, r3
 8018e18:	461a      	mov	r2, r3
 8018e1a:	4b28      	ldr	r3, [pc, #160]	@ (8018ebc <SUBGRF_GetCFO+0xe4>)
 8018e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e20:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8018e22:	69ba      	ldr	r2, [r7, #24]
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e2a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8018e2c:	2301      	movs	r3, #1
 8018e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8018e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e36:	697a      	ldr	r2, [r7, #20]
 8018e38:	fb02 f303 	mul.w	r3, r2, r3
 8018e3c:	2b07      	cmp	r3, #7
 8018e3e:	d802      	bhi.n	8018e46 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8018e40:	2302      	movs	r3, #2
 8018e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8018e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e4a:	697a      	ldr	r2, [r7, #20]
 8018e4c:	fb02 f303 	mul.w	r3, r2, r3
 8018e50:	2b03      	cmp	r3, #3
 8018e52:	d802      	bhi.n	8018e5a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8018e54:	2304      	movs	r3, #4
 8018e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8018e5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8018e5e:	69bb      	ldr	r3, [r7, #24]
 8018e60:	fb02 f303 	mul.w	r3, r2, r3
 8018e64:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8018e66:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8018e6a:	f7ff fd87 	bl	801897c <SUBGRF_ReadRegister>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	021b      	lsls	r3, r3, #8
 8018e72:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8018e76:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8018e78:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8018e7c:	f7ff fd7e 	bl	801897c <SUBGRF_ReadRegister>
 8018e80:	4603      	mov	r3, r0
 8018e82:	461a      	mov	r2, r3
 8018e84:	6a3b      	ldr	r3, [r7, #32]
 8018e86:	4313      	orrs	r3, r2
 8018e88:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8018e8a:	6a3b      	ldr	r3, [r7, #32]
 8018e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d005      	beq.n	8018ea0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8018e94:	6a3b      	ldr	r3, [r7, #32]
 8018e96:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8018e9a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8018e9e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8018ea0:	693b      	ldr	r3, [r7, #16]
 8018ea2:	095b      	lsrs	r3, r3, #5
 8018ea4:	6a3a      	ldr	r2, [r7, #32]
 8018ea6:	fb02 f303 	mul.w	r3, r2, r3
 8018eaa:	11da      	asrs	r2, r3, #7
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	601a      	str	r2, [r3, #0]
}
 8018eb0:	bf00      	nop
 8018eb2:	3728      	adds	r7, #40	@ 0x28
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	bd80      	pop	{r7, pc}
 8018eb8:	0c0a0804 	.word	0x0c0a0804
 8018ebc:	01e84800 	.word	0x01e84800

08018ec0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8018ec0:	b480      	push	{r7}
 8018ec2:	b087      	sub	sp, #28
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	60b9      	str	r1, [r7, #8]
 8018eca:	607a      	str	r2, [r7, #4]
 8018ecc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8018ece:	2300      	movs	r3, #0
 8018ed0:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8018ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ed6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8018ed8:	697b      	ldr	r3, [r7, #20]
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	371c      	adds	r7, #28
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bc80      	pop	{r7}
 8018ee2:	4770      	bx	lr

08018ee4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8018ee4:	b480      	push	{r7}
 8018ee6:	b087      	sub	sp, #28
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	4603      	mov	r3, r0
 8018eec:	60b9      	str	r1, [r7, #8]
 8018eee:	607a      	str	r2, [r7, #4]
 8018ef0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8018ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8018efa:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8018efc:	697b      	ldr	r3, [r7, #20]
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	371c      	adds	r7, #28
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bc80      	pop	{r7}
 8018f06:	4770      	bx	lr

08018f08 <RFW_DeInit>:
    return -1;
#endif /* RFW_ENABLE == 1 */
}

void RFW_DeInit( void )
{
 8018f08:	b480      	push	{r7}
 8018f0a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8018f0c:	bf00      	nop
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bc80      	pop	{r7}
 8018f12:	4770      	bx	lr

08018f14 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8018f14:	b480      	push	{r7}
 8018f16:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8018f18:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	bc80      	pop	{r7}
 8018f20:	4770      	bx	lr

08018f22 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8018f22:	b480      	push	{r7}
 8018f24:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8018f26:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8018f28:	4618      	mov	r0, r3
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bc80      	pop	{r7}
 8018f2e:	4770      	bx	lr

08018f30 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8018f30:	b480      	push	{r7}
 8018f32:	b083      	sub	sp, #12
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	4603      	mov	r3, r0
 8018f38:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8018f3a:	bf00      	nop
 8018f3c:	370c      	adds	r7, #12
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bc80      	pop	{r7}
 8018f42:	4770      	bx	lr

08018f44 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8018f44:	b480      	push	{r7}
 8018f46:	b087      	sub	sp, #28
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	60f8      	str	r0, [r7, #12]
 8018f4c:	460b      	mov	r3, r1
 8018f4e:	607a      	str	r2, [r7, #4]
 8018f50:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8018f52:	f04f 33ff 	mov.w	r3, #4294967295
 8018f56:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8018f58:	697b      	ldr	r3, [r7, #20]
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	371c      	adds	r7, #28
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bc80      	pop	{r7}
 8018f62:	4770      	bx	lr

08018f64 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8018f64:	b480      	push	{r7}
 8018f66:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8018f68:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bc80      	pop	{r7}
 8018f72:	4770      	bx	lr

08018f74 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8018f74:	b480      	push	{r7}
 8018f76:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8018f78:	bf00      	nop
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bc80      	pop	{r7}
 8018f7e:	4770      	bx	lr

08018f80 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8018f80:	b480      	push	{r7}
 8018f82:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8018f84:	bf00      	nop
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bc80      	pop	{r7}
 8018f8a:	4770      	bx	lr

08018f8c <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8018f8c:	b480      	push	{r7}
 8018f8e:	b083      	sub	sp, #12
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	4603      	mov	r3, r0
 8018f94:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8018f96:	bf00      	nop
 8018f98:	370c      	adds	r7, #12
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bc80      	pop	{r7}
 8018f9e:	4770      	bx	lr

08018fa0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8018fa4:	2218      	movs	r2, #24
 8018fa6:	2100      	movs	r1, #0
 8018fa8:	4807      	ldr	r0, [pc, #28]	@ (8018fc8 <UTIL_ADV_TRACE_Init+0x28>)
 8018faa:	f000 fb45 	bl	8019638 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8018fae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018fb2:	2100      	movs	r1, #0
 8018fb4:	4805      	ldr	r0, [pc, #20]	@ (8018fcc <UTIL_ADV_TRACE_Init+0x2c>)
 8018fb6:	f000 fb3f 	bl	8019638 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8018fba:	4b05      	ldr	r3, [pc, #20]	@ (8018fd0 <UTIL_ADV_TRACE_Init+0x30>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	4805      	ldr	r0, [pc, #20]	@ (8018fd4 <UTIL_ADV_TRACE_Init+0x34>)
 8018fc0:	4798      	blx	r3
 8018fc2:	4603      	mov	r3, r0
}
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	bd80      	pop	{r7, pc}
 8018fc8:	20001374 	.word	0x20001374
 8018fcc:	2000138c 	.word	0x2000138c
 8018fd0:	08020684 	.word	0x08020684
 8018fd4:	08019241 	.word	0x08019241

08018fd8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 8018fd8:	b480      	push	{r7}
 8018fda:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8018fdc:	4b06      	ldr	r3, [pc, #24]	@ (8018ff8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8018fde:	8a5a      	ldrh	r2, [r3, #18]
 8018fe0:	4b05      	ldr	r3, [pc, #20]	@ (8018ff8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8018fe2:	8a1b      	ldrh	r3, [r3, #16]
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d101      	bne.n	8018fec <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 8018fe8:	2301      	movs	r3, #1
 8018fea:	e000      	b.n	8018fee <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 8018fec:	2300      	movs	r3, #0
}
 8018fee:	4618      	mov	r0, r3
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bc80      	pop	{r7}
 8018ff4:	4770      	bx	lr
 8018ff6:	bf00      	nop
 8018ff8:	20001374 	.word	0x20001374

08018ffc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 8018ffc:	b408      	push	{r3}
 8018ffe:	b580      	push	{r7, lr}
 8019000:	b08d      	sub	sp, #52	@ 0x34
 8019002:	af00      	add	r7, sp, #0
 8019004:	60f8      	str	r0, [r7, #12]
 8019006:	60b9      	str	r1, [r7, #8]
 8019008:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801900a:	2300      	movs	r3, #0
 801900c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801900e:	2300      	movs	r3, #0
 8019010:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8019012:	4b37      	ldr	r3, [pc, #220]	@ (80190f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019014:	7a1b      	ldrb	r3, [r3, #8]
 8019016:	461a      	mov	r2, r3
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	4293      	cmp	r3, r2
 801901c:	d902      	bls.n	8019024 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801901e:	f06f 0304 	mvn.w	r3, #4
 8019022:	e05e      	b.n	80190e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8019024:	4b32      	ldr	r3, [pc, #200]	@ (80190f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019026:	68da      	ldr	r2, [r3, #12]
 8019028:	68bb      	ldr	r3, [r7, #8]
 801902a:	4013      	ands	r3, r2
 801902c:	68ba      	ldr	r2, [r7, #8]
 801902e:	429a      	cmp	r2, r3
 8019030:	d002      	beq.n	8019038 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 8019032:	f06f 0305 	mvn.w	r3, #5
 8019036:	e054      	b.n	80190e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8019038:	4b2d      	ldr	r3, [pc, #180]	@ (80190f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801903a:	685b      	ldr	r3, [r3, #4]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d00a      	beq.n	8019056 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d007      	beq.n	8019056 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8019046:	4b2a      	ldr	r3, [pc, #168]	@ (80190f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	f107 0116 	add.w	r1, r7, #22
 801904e:	f107 0218 	add.w	r2, r7, #24
 8019052:	4610      	mov	r0, r2
 8019054:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 8019056:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801905a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801905e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019060:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8019064:	4823      	ldr	r0, [pc, #140]	@ (80190f4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8019066:	f001 f913 	bl	801a290 <tiny_vsnprintf_like>
 801906a:	4603      	mov	r3, r0
 801906c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801906e:	f000 f9f1 	bl	8019454 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8019072:	8afa      	ldrh	r2, [r7, #22]
 8019074:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019076:	4413      	add	r3, r2
 8019078:	b29b      	uxth	r3, r3
 801907a:	f107 0214 	add.w	r2, r7, #20
 801907e:	4611      	mov	r1, r2
 8019080:	4618      	mov	r0, r3
 8019082:	f000 f969 	bl	8019358 <TRACE_AllocateBufer>
 8019086:	4603      	mov	r3, r0
 8019088:	f1b3 3fff 	cmp.w	r3, #4294967295
 801908c:	d025      	beq.n	80190da <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801908e:	2300      	movs	r3, #0
 8019090:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8019092:	e00e      	b.n	80190b2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8019094:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019096:	8aba      	ldrh	r2, [r7, #20]
 8019098:	3330      	adds	r3, #48	@ 0x30
 801909a:	443b      	add	r3, r7
 801909c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 80190a0:	4b15      	ldr	r3, [pc, #84]	@ (80190f8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 80190a2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 80190a4:	8abb      	ldrh	r3, [r7, #20]
 80190a6:	3301      	adds	r3, #1
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 80190ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80190ae:	3301      	adds	r3, #1
 80190b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80190b2:	8afb      	ldrh	r3, [r7, #22]
 80190b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d3ec      	bcc.n	8019094 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80190ba:	8abb      	ldrh	r3, [r7, #20]
 80190bc:	461a      	mov	r2, r3
 80190be:	4b0e      	ldr	r3, [pc, #56]	@ (80190f8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 80190c0:	18d0      	adds	r0, r2, r3
 80190c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80190c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80190ca:	f001 f8e1 	bl	801a290 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 80190ce:	f000 f9df 	bl	8019490 <TRACE_UnLock>

    return TRACE_Send();
 80190d2:	f000 f831 	bl	8019138 <TRACE_Send>
 80190d6:	4603      	mov	r3, r0
 80190d8:	e003      	b.n	80190e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 80190da:	f000 f9d9 	bl	8019490 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 80190de:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 80190e2:	4618      	mov	r0, r3
 80190e4:	3734      	adds	r7, #52	@ 0x34
 80190e6:	46bd      	mov	sp, r7
 80190e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80190ec:	b001      	add	sp, #4
 80190ee:	4770      	bx	lr
 80190f0:	20001374 	.word	0x20001374
 80190f4:	2000178c 	.word	0x2000178c
 80190f8:	2000138c 	.word	0x2000138c

080190fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 80190fc:	b480      	push	{r7}
 80190fe:	b083      	sub	sp, #12
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8019104:	4a03      	ldr	r2, [pc, #12]	@ (8019114 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6053      	str	r3, [r2, #4]
}
 801910a:	bf00      	nop
 801910c:	370c      	adds	r7, #12
 801910e:	46bd      	mov	sp, r7
 8019110:	bc80      	pop	{r7}
 8019112:	4770      	bx	lr
 8019114:	20001374 	.word	0x20001374

08019118 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8019118:	b480      	push	{r7}
 801911a:	b083      	sub	sp, #12
 801911c:	af00      	add	r7, sp, #0
 801911e:	4603      	mov	r3, r0
 8019120:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8019122:	4a04      	ldr	r2, [pc, #16]	@ (8019134 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8019124:	79fb      	ldrb	r3, [r7, #7]
 8019126:	7213      	strb	r3, [r2, #8]
}
 8019128:	bf00      	nop
 801912a:	370c      	adds	r7, #12
 801912c:	46bd      	mov	sp, r7
 801912e:	bc80      	pop	{r7}
 8019130:	4770      	bx	lr
 8019132:	bf00      	nop
 8019134:	20001374 	.word	0x20001374

08019138 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8019138:	b580      	push	{r7, lr}
 801913a:	b088      	sub	sp, #32
 801913c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801913e:	2300      	movs	r3, #0
 8019140:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8019142:	2300      	movs	r3, #0
 8019144:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019146:	f3ef 8310 	mrs	r3, PRIMASK
 801914a:	613b      	str	r3, [r7, #16]
  return(result);
 801914c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801914e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019150:	b672      	cpsid	i
}
 8019152:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8019154:	f000 f9ba 	bl	80194cc <TRACE_IsLocked>
 8019158:	4603      	mov	r3, r0
 801915a:	2b00      	cmp	r3, #0
 801915c:	d15d      	bne.n	801921a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801915e:	f000 f979 	bl	8019454 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8019162:	4b34      	ldr	r3, [pc, #208]	@ (8019234 <TRACE_Send+0xfc>)
 8019164:	8a1a      	ldrh	r2, [r3, #16]
 8019166:	4b33      	ldr	r3, [pc, #204]	@ (8019234 <TRACE_Send+0xfc>)
 8019168:	8a5b      	ldrh	r3, [r3, #18]
 801916a:	429a      	cmp	r2, r3
 801916c:	d04d      	beq.n	801920a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801916e:	4b31      	ldr	r3, [pc, #196]	@ (8019234 <TRACE_Send+0xfc>)
 8019170:	789b      	ldrb	r3, [r3, #2]
 8019172:	2b01      	cmp	r3, #1
 8019174:	d117      	bne.n	80191a6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8019176:	4b2f      	ldr	r3, [pc, #188]	@ (8019234 <TRACE_Send+0xfc>)
 8019178:	881a      	ldrh	r2, [r3, #0]
 801917a:	4b2e      	ldr	r3, [pc, #184]	@ (8019234 <TRACE_Send+0xfc>)
 801917c:	8a1b      	ldrh	r3, [r3, #16]
 801917e:	1ad3      	subs	r3, r2, r3
 8019180:	b29a      	uxth	r2, r3
 8019182:	4b2c      	ldr	r3, [pc, #176]	@ (8019234 <TRACE_Send+0xfc>)
 8019184:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8019186:	4b2b      	ldr	r3, [pc, #172]	@ (8019234 <TRACE_Send+0xfc>)
 8019188:	2202      	movs	r2, #2
 801918a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801918c:	4b29      	ldr	r3, [pc, #164]	@ (8019234 <TRACE_Send+0xfc>)
 801918e:	2200      	movs	r2, #0
 8019190:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8019192:	4b28      	ldr	r3, [pc, #160]	@ (8019234 <TRACE_Send+0xfc>)
 8019194:	8a9b      	ldrh	r3, [r3, #20]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d105      	bne.n	80191a6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801919a:	4b26      	ldr	r3, [pc, #152]	@ (8019234 <TRACE_Send+0xfc>)
 801919c:	2200      	movs	r2, #0
 801919e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80191a0:	4b24      	ldr	r3, [pc, #144]	@ (8019234 <TRACE_Send+0xfc>)
 80191a2:	2200      	movs	r2, #0
 80191a4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80191a6:	4b23      	ldr	r3, [pc, #140]	@ (8019234 <TRACE_Send+0xfc>)
 80191a8:	789b      	ldrb	r3, [r3, #2]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d115      	bne.n	80191da <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80191ae:	4b21      	ldr	r3, [pc, #132]	@ (8019234 <TRACE_Send+0xfc>)
 80191b0:	8a5a      	ldrh	r2, [r3, #18]
 80191b2:	4b20      	ldr	r3, [pc, #128]	@ (8019234 <TRACE_Send+0xfc>)
 80191b4:	8a1b      	ldrh	r3, [r3, #16]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d908      	bls.n	80191cc <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80191ba:	4b1e      	ldr	r3, [pc, #120]	@ (8019234 <TRACE_Send+0xfc>)
 80191bc:	8a5a      	ldrh	r2, [r3, #18]
 80191be:	4b1d      	ldr	r3, [pc, #116]	@ (8019234 <TRACE_Send+0xfc>)
 80191c0:	8a1b      	ldrh	r3, [r3, #16]
 80191c2:	1ad3      	subs	r3, r2, r3
 80191c4:	b29a      	uxth	r2, r3
 80191c6:	4b1b      	ldr	r3, [pc, #108]	@ (8019234 <TRACE_Send+0xfc>)
 80191c8:	829a      	strh	r2, [r3, #20]
 80191ca:	e006      	b.n	80191da <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80191cc:	4b19      	ldr	r3, [pc, #100]	@ (8019234 <TRACE_Send+0xfc>)
 80191ce:	8a1b      	ldrh	r3, [r3, #16]
 80191d0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80191d4:	b29a      	uxth	r2, r3
 80191d6:	4b17      	ldr	r3, [pc, #92]	@ (8019234 <TRACE_Send+0xfc>)
 80191d8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80191da:	4b16      	ldr	r3, [pc, #88]	@ (8019234 <TRACE_Send+0xfc>)
 80191dc:	8a1b      	ldrh	r3, [r3, #16]
 80191de:	461a      	mov	r2, r3
 80191e0:	4b15      	ldr	r3, [pc, #84]	@ (8019238 <TRACE_Send+0x100>)
 80191e2:	4413      	add	r3, r2
 80191e4:	61bb      	str	r3, [r7, #24]
 80191e6:	697b      	ldr	r3, [r7, #20]
 80191e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	f383 8810 	msr	PRIMASK, r3
}
 80191f0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 80191f2:	f7e8 f9d7 	bl	80015a4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80191f6:	4b11      	ldr	r3, [pc, #68]	@ (801923c <TRACE_Send+0x104>)
 80191f8:	68db      	ldr	r3, [r3, #12]
 80191fa:	4a0e      	ldr	r2, [pc, #56]	@ (8019234 <TRACE_Send+0xfc>)
 80191fc:	8a92      	ldrh	r2, [r2, #20]
 80191fe:	4611      	mov	r1, r2
 8019200:	69b8      	ldr	r0, [r7, #24]
 8019202:	4798      	blx	r3
 8019204:	4603      	mov	r3, r0
 8019206:	77fb      	strb	r3, [r7, #31]
 8019208:	e00d      	b.n	8019226 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801920a:	f000 f941 	bl	8019490 <TRACE_UnLock>
 801920e:	697b      	ldr	r3, [r7, #20]
 8019210:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019212:	68bb      	ldr	r3, [r7, #8]
 8019214:	f383 8810 	msr	PRIMASK, r3
}
 8019218:	e005      	b.n	8019226 <TRACE_Send+0xee>
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	f383 8810 	msr	PRIMASK, r3
}
 8019224:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8019226:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801922a:	4618      	mov	r0, r3
 801922c:	3720      	adds	r7, #32
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}
 8019232:	bf00      	nop
 8019234:	20001374 	.word	0x20001374
 8019238:	2000138c 	.word	0x2000138c
 801923c:	08020684 	.word	0x08020684

08019240 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b088      	sub	sp, #32
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8019248:	2300      	movs	r3, #0
 801924a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801924c:	f3ef 8310 	mrs	r3, PRIMASK
 8019250:	617b      	str	r3, [r7, #20]
  return(result);
 8019252:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019254:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8019256:	b672      	cpsid	i
}
 8019258:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801925a:	4b3c      	ldr	r3, [pc, #240]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 801925c:	789b      	ldrb	r3, [r3, #2]
 801925e:	2b02      	cmp	r3, #2
 8019260:	d106      	bne.n	8019270 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019262:	4b3a      	ldr	r3, [pc, #232]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019264:	2200      	movs	r2, #0
 8019266:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019268:	4b38      	ldr	r3, [pc, #224]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 801926a:	2200      	movs	r2, #0
 801926c:	821a      	strh	r2, [r3, #16]
 801926e:	e00a      	b.n	8019286 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8019270:	4b36      	ldr	r3, [pc, #216]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019272:	8a1a      	ldrh	r2, [r3, #16]
 8019274:	4b35      	ldr	r3, [pc, #212]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019276:	8a9b      	ldrh	r3, [r3, #20]
 8019278:	4413      	add	r3, r2
 801927a:	b29b      	uxth	r3, r3
 801927c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019280:	b29a      	uxth	r2, r3
 8019282:	4b32      	ldr	r3, [pc, #200]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019284:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8019286:	4b31      	ldr	r3, [pc, #196]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019288:	8a1a      	ldrh	r2, [r3, #16]
 801928a:	4b30      	ldr	r3, [pc, #192]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 801928c:	8a5b      	ldrh	r3, [r3, #18]
 801928e:	429a      	cmp	r2, r3
 8019290:	d04d      	beq.n	801932e <TRACE_TxCpltCallback+0xee>
 8019292:	4b2e      	ldr	r3, [pc, #184]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019294:	8adb      	ldrh	r3, [r3, #22]
 8019296:	2b01      	cmp	r3, #1
 8019298:	d149      	bne.n	801932e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801929a:	4b2c      	ldr	r3, [pc, #176]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 801929c:	789b      	ldrb	r3, [r3, #2]
 801929e:	2b01      	cmp	r3, #1
 80192a0:	d117      	bne.n	80192d2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80192a2:	4b2a      	ldr	r3, [pc, #168]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192a4:	881a      	ldrh	r2, [r3, #0]
 80192a6:	4b29      	ldr	r3, [pc, #164]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192a8:	8a1b      	ldrh	r3, [r3, #16]
 80192aa:	1ad3      	subs	r3, r2, r3
 80192ac:	b29a      	uxth	r2, r3
 80192ae:	4b27      	ldr	r3, [pc, #156]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192b0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80192b2:	4b26      	ldr	r3, [pc, #152]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192b4:	2202      	movs	r2, #2
 80192b6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80192b8:	4b24      	ldr	r3, [pc, #144]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192ba:	2200      	movs	r2, #0
 80192bc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80192be:	4b23      	ldr	r3, [pc, #140]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192c0:	8a9b      	ldrh	r3, [r3, #20]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d105      	bne.n	80192d2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80192c6:	4b21      	ldr	r3, [pc, #132]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192c8:	2200      	movs	r2, #0
 80192ca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80192cc:	4b1f      	ldr	r3, [pc, #124]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192ce:	2200      	movs	r2, #0
 80192d0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80192d2:	4b1e      	ldr	r3, [pc, #120]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192d4:	789b      	ldrb	r3, [r3, #2]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d115      	bne.n	8019306 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80192da:	4b1c      	ldr	r3, [pc, #112]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192dc:	8a5a      	ldrh	r2, [r3, #18]
 80192de:	4b1b      	ldr	r3, [pc, #108]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192e0:	8a1b      	ldrh	r3, [r3, #16]
 80192e2:	429a      	cmp	r2, r3
 80192e4:	d908      	bls.n	80192f8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80192e6:	4b19      	ldr	r3, [pc, #100]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192e8:	8a5a      	ldrh	r2, [r3, #18]
 80192ea:	4b18      	ldr	r3, [pc, #96]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192ec:	8a1b      	ldrh	r3, [r3, #16]
 80192ee:	1ad3      	subs	r3, r2, r3
 80192f0:	b29a      	uxth	r2, r3
 80192f2:	4b16      	ldr	r3, [pc, #88]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192f4:	829a      	strh	r2, [r3, #20]
 80192f6:	e006      	b.n	8019306 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80192f8:	4b14      	ldr	r3, [pc, #80]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 80192fa:	8a1b      	ldrh	r3, [r3, #16]
 80192fc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8019300:	b29a      	uxth	r2, r3
 8019302:	4b12      	ldr	r3, [pc, #72]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019304:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8019306:	4b11      	ldr	r3, [pc, #68]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019308:	8a1b      	ldrh	r3, [r3, #16]
 801930a:	461a      	mov	r2, r3
 801930c:	4b10      	ldr	r3, [pc, #64]	@ (8019350 <TRACE_TxCpltCallback+0x110>)
 801930e:	4413      	add	r3, r2
 8019310:	61fb      	str	r3, [r7, #28]
 8019312:	69bb      	ldr	r3, [r7, #24]
 8019314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	f383 8810 	msr	PRIMASK, r3
}
 801931c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801931e:	4b0d      	ldr	r3, [pc, #52]	@ (8019354 <TRACE_TxCpltCallback+0x114>)
 8019320:	68db      	ldr	r3, [r3, #12]
 8019322:	4a0a      	ldr	r2, [pc, #40]	@ (801934c <TRACE_TxCpltCallback+0x10c>)
 8019324:	8a92      	ldrh	r2, [r2, #20]
 8019326:	4611      	mov	r1, r2
 8019328:	69f8      	ldr	r0, [r7, #28]
 801932a:	4798      	blx	r3
 801932c:	e00a      	b.n	8019344 <TRACE_TxCpltCallback+0x104>
 801932e:	69bb      	ldr	r3, [r7, #24]
 8019330:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	f383 8810 	msr	PRIMASK, r3
}
 8019338:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801933a:	f7e8 f93b 	bl	80015b4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801933e:	f000 f8a7 	bl	8019490 <TRACE_UnLock>
  }
}
 8019342:	bf00      	nop
 8019344:	bf00      	nop
 8019346:	3720      	adds	r7, #32
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}
 801934c:	20001374 	.word	0x20001374
 8019350:	2000138c 	.word	0x2000138c
 8019354:	08020684 	.word	0x08020684

08019358 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8019358:	b480      	push	{r7}
 801935a:	b087      	sub	sp, #28
 801935c:	af00      	add	r7, sp, #0
 801935e:	4603      	mov	r3, r0
 8019360:	6039      	str	r1, [r7, #0]
 8019362:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8019364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019368:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801936a:	f3ef 8310 	mrs	r3, PRIMASK
 801936e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019370:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019374:	b672      	cpsid	i
}
 8019376:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8019378:	4b35      	ldr	r3, [pc, #212]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 801937a:	8a5a      	ldrh	r2, [r3, #18]
 801937c:	4b34      	ldr	r3, [pc, #208]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 801937e:	8a1b      	ldrh	r3, [r3, #16]
 8019380:	429a      	cmp	r2, r3
 8019382:	d11b      	bne.n	80193bc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8019384:	4b32      	ldr	r3, [pc, #200]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 8019386:	8a5b      	ldrh	r3, [r3, #18]
 8019388:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801938c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801938e:	88fa      	ldrh	r2, [r7, #6]
 8019390:	8afb      	ldrh	r3, [r7, #22]
 8019392:	429a      	cmp	r2, r3
 8019394:	d33a      	bcc.n	801940c <TRACE_AllocateBufer+0xb4>
 8019396:	4b2e      	ldr	r3, [pc, #184]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 8019398:	8a1b      	ldrh	r3, [r3, #16]
 801939a:	88fa      	ldrh	r2, [r7, #6]
 801939c:	429a      	cmp	r2, r3
 801939e:	d235      	bcs.n	801940c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80193a0:	4b2b      	ldr	r3, [pc, #172]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193a2:	2201      	movs	r2, #1
 80193a4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80193a6:	4b2a      	ldr	r3, [pc, #168]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193a8:	8a5a      	ldrh	r2, [r3, #18]
 80193aa:	4b29      	ldr	r3, [pc, #164]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193ac:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80193ae:	4b28      	ldr	r3, [pc, #160]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193b0:	8a1b      	ldrh	r3, [r3, #16]
 80193b2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80193b4:	4b26      	ldr	r3, [pc, #152]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193b6:	2200      	movs	r2, #0
 80193b8:	825a      	strh	r2, [r3, #18]
 80193ba:	e027      	b.n	801940c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80193bc:	4b24      	ldr	r3, [pc, #144]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193be:	8a5a      	ldrh	r2, [r3, #18]
 80193c0:	4b23      	ldr	r3, [pc, #140]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193c2:	8a1b      	ldrh	r3, [r3, #16]
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d91b      	bls.n	8019400 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80193c8:	4b21      	ldr	r3, [pc, #132]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193ca:	8a5b      	ldrh	r3, [r3, #18]
 80193cc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80193d0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80193d2:	88fa      	ldrh	r2, [r7, #6]
 80193d4:	8afb      	ldrh	r3, [r7, #22]
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d318      	bcc.n	801940c <TRACE_AllocateBufer+0xb4>
 80193da:	4b1d      	ldr	r3, [pc, #116]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193dc:	8a1b      	ldrh	r3, [r3, #16]
 80193de:	88fa      	ldrh	r2, [r7, #6]
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d213      	bcs.n	801940c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80193e4:	4b1a      	ldr	r3, [pc, #104]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193e6:	2201      	movs	r2, #1
 80193e8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80193ea:	4b19      	ldr	r3, [pc, #100]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193ec:	8a5a      	ldrh	r2, [r3, #18]
 80193ee:	4b18      	ldr	r3, [pc, #96]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193f0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80193f2:	4b17      	ldr	r3, [pc, #92]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193f4:	8a1b      	ldrh	r3, [r3, #16]
 80193f6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80193f8:	4b15      	ldr	r3, [pc, #84]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 80193fa:	2200      	movs	r2, #0
 80193fc:	825a      	strh	r2, [r3, #18]
 80193fe:	e005      	b.n	801940c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8019400:	4b13      	ldr	r3, [pc, #76]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 8019402:	8a1a      	ldrh	r2, [r3, #16]
 8019404:	4b12      	ldr	r3, [pc, #72]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 8019406:	8a5b      	ldrh	r3, [r3, #18]
 8019408:	1ad3      	subs	r3, r2, r3
 801940a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801940c:	8afa      	ldrh	r2, [r7, #22]
 801940e:	88fb      	ldrh	r3, [r7, #6]
 8019410:	429a      	cmp	r2, r3
 8019412:	d90f      	bls.n	8019434 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8019414:	4b0e      	ldr	r3, [pc, #56]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 8019416:	8a5a      	ldrh	r2, [r3, #18]
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801941c:	4b0c      	ldr	r3, [pc, #48]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 801941e:	8a5a      	ldrh	r2, [r3, #18]
 8019420:	88fb      	ldrh	r3, [r7, #6]
 8019422:	4413      	add	r3, r2
 8019424:	b29b      	uxth	r3, r3
 8019426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801942a:	b29a      	uxth	r2, r3
 801942c:	4b08      	ldr	r3, [pc, #32]	@ (8019450 <TRACE_AllocateBufer+0xf8>)
 801942e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8019430:	2300      	movs	r3, #0
 8019432:	82bb      	strh	r3, [r7, #20]
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019438:	68bb      	ldr	r3, [r7, #8]
 801943a:	f383 8810 	msr	PRIMASK, r3
}
 801943e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8019440:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8019444:	4618      	mov	r0, r3
 8019446:	371c      	adds	r7, #28
 8019448:	46bd      	mov	sp, r7
 801944a:	bc80      	pop	{r7}
 801944c:	4770      	bx	lr
 801944e:	bf00      	nop
 8019450:	20001374 	.word	0x20001374

08019454 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8019454:	b480      	push	{r7}
 8019456:	b085      	sub	sp, #20
 8019458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801945a:	f3ef 8310 	mrs	r3, PRIMASK
 801945e:	607b      	str	r3, [r7, #4]
  return(result);
 8019460:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019462:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019464:	b672      	cpsid	i
}
 8019466:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8019468:	4b08      	ldr	r3, [pc, #32]	@ (801948c <TRACE_Lock+0x38>)
 801946a:	8adb      	ldrh	r3, [r3, #22]
 801946c:	3301      	adds	r3, #1
 801946e:	b29a      	uxth	r2, r3
 8019470:	4b06      	ldr	r3, [pc, #24]	@ (801948c <TRACE_Lock+0x38>)
 8019472:	82da      	strh	r2, [r3, #22]
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019478:	68bb      	ldr	r3, [r7, #8]
 801947a:	f383 8810 	msr	PRIMASK, r3
}
 801947e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8019480:	bf00      	nop
 8019482:	3714      	adds	r7, #20
 8019484:	46bd      	mov	sp, r7
 8019486:	bc80      	pop	{r7}
 8019488:	4770      	bx	lr
 801948a:	bf00      	nop
 801948c:	20001374 	.word	0x20001374

08019490 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8019490:	b480      	push	{r7}
 8019492:	b085      	sub	sp, #20
 8019494:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019496:	f3ef 8310 	mrs	r3, PRIMASK
 801949a:	607b      	str	r3, [r7, #4]
  return(result);
 801949c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801949e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80194a0:	b672      	cpsid	i
}
 80194a2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 80194a4:	4b08      	ldr	r3, [pc, #32]	@ (80194c8 <TRACE_UnLock+0x38>)
 80194a6:	8adb      	ldrh	r3, [r3, #22]
 80194a8:	3b01      	subs	r3, #1
 80194aa:	b29a      	uxth	r2, r3
 80194ac:	4b06      	ldr	r3, [pc, #24]	@ (80194c8 <TRACE_UnLock+0x38>)
 80194ae:	82da      	strh	r2, [r3, #22]
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	f383 8810 	msr	PRIMASK, r3
}
 80194ba:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80194bc:	bf00      	nop
 80194be:	3714      	adds	r7, #20
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bc80      	pop	{r7}
 80194c4:	4770      	bx	lr
 80194c6:	bf00      	nop
 80194c8:	20001374 	.word	0x20001374

080194cc <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 80194cc:	b480      	push	{r7}
 80194ce:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80194d0:	4b05      	ldr	r3, [pc, #20]	@ (80194e8 <TRACE_IsLocked+0x1c>)
 80194d2:	8adb      	ldrh	r3, [r3, #22]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	bf14      	ite	ne
 80194d8:	2301      	movne	r3, #1
 80194da:	2300      	moveq	r3, #0
 80194dc:	b2db      	uxtb	r3, r3
}
 80194de:	4618      	mov	r0, r3
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bc80      	pop	{r7}
 80194e4:	4770      	bx	lr
 80194e6:	bf00      	nop
 80194e8:	20001374 	.word	0x20001374

080194ec <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80194ec:	b480      	push	{r7}
 80194ee:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80194f0:	4b04      	ldr	r3, [pc, #16]	@ (8019504 <UTIL_LPM_Init+0x18>)
 80194f2:	2200      	movs	r2, #0
 80194f4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80194f6:	4b04      	ldr	r3, [pc, #16]	@ (8019508 <UTIL_LPM_Init+0x1c>)
 80194f8:	2200      	movs	r2, #0
 80194fa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80194fc:	bf00      	nop
 80194fe:	46bd      	mov	sp, r7
 8019500:	bc80      	pop	{r7}
 8019502:	4770      	bx	lr
 8019504:	2000198c 	.word	0x2000198c
 8019508:	20001990 	.word	0x20001990

0801950c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801950c:	b480      	push	{r7}
 801950e:	b087      	sub	sp, #28
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	460b      	mov	r3, r1
 8019516:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019518:	f3ef 8310 	mrs	r3, PRIMASK
 801951c:	613b      	str	r3, [r7, #16]
  return(result);
 801951e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019522:	b672      	cpsid	i
}
 8019524:	bf00      	nop
  
  switch( state )
 8019526:	78fb      	ldrb	r3, [r7, #3]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d008      	beq.n	801953e <UTIL_LPM_SetStopMode+0x32>
 801952c:	2b01      	cmp	r3, #1
 801952e:	d10e      	bne.n	801954e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019530:	4b0d      	ldr	r3, [pc, #52]	@ (8019568 <UTIL_LPM_SetStopMode+0x5c>)
 8019532:	681a      	ldr	r2, [r3, #0]
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	4313      	orrs	r3, r2
 8019538:	4a0b      	ldr	r2, [pc, #44]	@ (8019568 <UTIL_LPM_SetStopMode+0x5c>)
 801953a:	6013      	str	r3, [r2, #0]
      break;
 801953c:	e008      	b.n	8019550 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	43da      	mvns	r2, r3
 8019542:	4b09      	ldr	r3, [pc, #36]	@ (8019568 <UTIL_LPM_SetStopMode+0x5c>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4013      	ands	r3, r2
 8019548:	4a07      	ldr	r2, [pc, #28]	@ (8019568 <UTIL_LPM_SetStopMode+0x5c>)
 801954a:	6013      	str	r3, [r2, #0]
      break;
 801954c:	e000      	b.n	8019550 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801954e:	bf00      	nop
 8019550:	697b      	ldr	r3, [r7, #20]
 8019552:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	f383 8810 	msr	PRIMASK, r3
}
 801955a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801955c:	bf00      	nop
 801955e:	371c      	adds	r7, #28
 8019560:	46bd      	mov	sp, r7
 8019562:	bc80      	pop	{r7}
 8019564:	4770      	bx	lr
 8019566:	bf00      	nop
 8019568:	2000198c 	.word	0x2000198c

0801956c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801956c:	b480      	push	{r7}
 801956e:	b087      	sub	sp, #28
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
 8019574:	460b      	mov	r3, r1
 8019576:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019578:	f3ef 8310 	mrs	r3, PRIMASK
 801957c:	613b      	str	r3, [r7, #16]
  return(result);
 801957e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019582:	b672      	cpsid	i
}
 8019584:	bf00      	nop
  
  switch(state)
 8019586:	78fb      	ldrb	r3, [r7, #3]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d008      	beq.n	801959e <UTIL_LPM_SetOffMode+0x32>
 801958c:	2b01      	cmp	r3, #1
 801958e:	d10e      	bne.n	80195ae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019590:	4b0d      	ldr	r3, [pc, #52]	@ (80195c8 <UTIL_LPM_SetOffMode+0x5c>)
 8019592:	681a      	ldr	r2, [r3, #0]
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	4313      	orrs	r3, r2
 8019598:	4a0b      	ldr	r2, [pc, #44]	@ (80195c8 <UTIL_LPM_SetOffMode+0x5c>)
 801959a:	6013      	str	r3, [r2, #0]
      break;
 801959c:	e008      	b.n	80195b0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	43da      	mvns	r2, r3
 80195a2:	4b09      	ldr	r3, [pc, #36]	@ (80195c8 <UTIL_LPM_SetOffMode+0x5c>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	4013      	ands	r3, r2
 80195a8:	4a07      	ldr	r2, [pc, #28]	@ (80195c8 <UTIL_LPM_SetOffMode+0x5c>)
 80195aa:	6013      	str	r3, [r2, #0]
      break;
 80195ac:	e000      	b.n	80195b0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80195ae:	bf00      	nop
 80195b0:	697b      	ldr	r3, [r7, #20]
 80195b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	f383 8810 	msr	PRIMASK, r3
}
 80195ba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80195bc:	bf00      	nop
 80195be:	371c      	adds	r7, #28
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bc80      	pop	{r7}
 80195c4:	4770      	bx	lr
 80195c6:	bf00      	nop
 80195c8:	20001990 	.word	0x20001990

080195cc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b084      	sub	sp, #16
 80195d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80195d2:	f3ef 8310 	mrs	r3, PRIMASK
 80195d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80195d8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 80195da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80195dc:	b672      	cpsid	i
}
 80195de:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80195e0:	4b12      	ldr	r3, [pc, #72]	@ (801962c <UTIL_LPM_EnterLowPower+0x60>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d006      	beq.n	80195f6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80195e8:	4b11      	ldr	r3, [pc, #68]	@ (8019630 <UTIL_LPM_EnterLowPower+0x64>)
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80195ee:	4b10      	ldr	r3, [pc, #64]	@ (8019630 <UTIL_LPM_EnterLowPower+0x64>)
 80195f0:	685b      	ldr	r3, [r3, #4]
 80195f2:	4798      	blx	r3
 80195f4:	e010      	b.n	8019618 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80195f6:	4b0f      	ldr	r3, [pc, #60]	@ (8019634 <UTIL_LPM_EnterLowPower+0x68>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d006      	beq.n	801960c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80195fe:	4b0c      	ldr	r3, [pc, #48]	@ (8019630 <UTIL_LPM_EnterLowPower+0x64>)
 8019600:	689b      	ldr	r3, [r3, #8]
 8019602:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019604:	4b0a      	ldr	r3, [pc, #40]	@ (8019630 <UTIL_LPM_EnterLowPower+0x64>)
 8019606:	68db      	ldr	r3, [r3, #12]
 8019608:	4798      	blx	r3
 801960a:	e005      	b.n	8019618 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801960c:	4b08      	ldr	r3, [pc, #32]	@ (8019630 <UTIL_LPM_EnterLowPower+0x64>)
 801960e:	691b      	ldr	r3, [r3, #16]
 8019610:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019612:	4b07      	ldr	r3, [pc, #28]	@ (8019630 <UTIL_LPM_EnterLowPower+0x64>)
 8019614:	695b      	ldr	r3, [r3, #20]
 8019616:	4798      	blx	r3
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	f383 8810 	msr	PRIMASK, r3
}
 8019622:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019624:	bf00      	nop
 8019626:	3710      	adds	r7, #16
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}
 801962c:	2000198c 	.word	0x2000198c
 8019630:	0802062c 	.word	0x0802062c
 8019634:	20001990 	.word	0x20001990

08019638 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019638:	b480      	push	{r7}
 801963a:	b085      	sub	sp, #20
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
 8019640:	460b      	mov	r3, r1
 8019642:	70fb      	strb	r3, [r7, #3]
 8019644:	4613      	mov	r3, r2
 8019646:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801964c:	e004      	b.n	8019658 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	1c5a      	adds	r2, r3, #1
 8019652:	60fa      	str	r2, [r7, #12]
 8019654:	78fa      	ldrb	r2, [r7, #3]
 8019656:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019658:	883b      	ldrh	r3, [r7, #0]
 801965a:	1e5a      	subs	r2, r3, #1
 801965c:	803a      	strh	r2, [r7, #0]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d1f5      	bne.n	801964e <UTIL_MEM_set_8+0x16>
  }
}
 8019662:	bf00      	nop
 8019664:	bf00      	nop
 8019666:	3714      	adds	r7, #20
 8019668:	46bd      	mov	sp, r7
 801966a:	bc80      	pop	{r7}
 801966c:	4770      	bx	lr
	...

08019670 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b090      	sub	sp, #64	@ 0x40
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019678:	4b73      	ldr	r3, [pc, #460]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801967e:	4b72      	ldr	r3, [pc, #456]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 8019680:	681a      	ldr	r2, [r3, #0]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	4013      	ands	r3, r2
 8019686:	4a70      	ldr	r2, [pc, #448]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 8019688:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801968a:	4b70      	ldr	r3, [pc, #448]	@ (801984c <UTIL_SEQ_Run+0x1dc>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019690:	4b6f      	ldr	r3, [pc, #444]	@ (8019850 <UTIL_SEQ_Run+0x1e0>)
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019696:	4b6f      	ldr	r3, [pc, #444]	@ (8019854 <UTIL_SEQ_Run+0x1e4>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801969c:	4b6e      	ldr	r3, [pc, #440]	@ (8019858 <UTIL_SEQ_Run+0x1e8>)
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80196a2:	e08d      	b.n	80197c0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80196a4:	2300      	movs	r3, #0
 80196a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80196a8:	e002      	b.n	80196b0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80196aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196ac:	3301      	adds	r3, #1
 80196ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80196b0:	4a6a      	ldr	r2, [pc, #424]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 80196b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80196b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196ba:	401a      	ands	r2, r3
 80196bc:	4b62      	ldr	r3, [pc, #392]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	4013      	ands	r3, r2
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d0f1      	beq.n	80196aa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80196c6:	4a65      	ldr	r2, [pc, #404]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 80196c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80196ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196d0:	401a      	ands	r2, r3
 80196d2:	4b5d      	ldr	r3, [pc, #372]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	4013      	ands	r3, r2
 80196d8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80196da:	4a60      	ldr	r2, [pc, #384]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 80196dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196de:	00db      	lsls	r3, r3, #3
 80196e0:	4413      	add	r3, r2
 80196e2:	685a      	ldr	r2, [r3, #4]
 80196e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196e6:	4013      	ands	r3, r2
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d106      	bne.n	80196fa <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80196ec:	4a5b      	ldr	r2, [pc, #364]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 80196ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196f0:	00db      	lsls	r3, r3, #3
 80196f2:	4413      	add	r3, r2
 80196f4:	f04f 32ff 	mov.w	r2, #4294967295
 80196f8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80196fa:	4a58      	ldr	r2, [pc, #352]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 80196fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196fe:	00db      	lsls	r3, r3, #3
 8019700:	4413      	add	r3, r2
 8019702:	685a      	ldr	r2, [r3, #4]
 8019704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019706:	4013      	ands	r3, r2
 8019708:	4618      	mov	r0, r3
 801970a:	f000 f907 	bl	801991c <SEQ_BitPosition>
 801970e:	4603      	mov	r3, r0
 8019710:	461a      	mov	r2, r3
 8019712:	4b53      	ldr	r3, [pc, #332]	@ (8019860 <UTIL_SEQ_Run+0x1f0>)
 8019714:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019716:	4a51      	ldr	r2, [pc, #324]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 8019718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801971a:	00db      	lsls	r3, r3, #3
 801971c:	4413      	add	r3, r2
 801971e:	685a      	ldr	r2, [r3, #4]
 8019720:	4b4f      	ldr	r3, [pc, #316]	@ (8019860 <UTIL_SEQ_Run+0x1f0>)
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	2101      	movs	r1, #1
 8019726:	fa01 f303 	lsl.w	r3, r1, r3
 801972a:	43db      	mvns	r3, r3
 801972c:	401a      	ands	r2, r3
 801972e:	494b      	ldr	r1, [pc, #300]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 8019730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019732:	00db      	lsls	r3, r3, #3
 8019734:	440b      	add	r3, r1
 8019736:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019738:	f3ef 8310 	mrs	r3, PRIMASK
 801973c:	61bb      	str	r3, [r7, #24]
  return(result);
 801973e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019740:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8019742:	b672      	cpsid	i
}
 8019744:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8019746:	4b46      	ldr	r3, [pc, #280]	@ (8019860 <UTIL_SEQ_Run+0x1f0>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	2201      	movs	r2, #1
 801974c:	fa02 f303 	lsl.w	r3, r2, r3
 8019750:	43da      	mvns	r2, r3
 8019752:	4b3e      	ldr	r3, [pc, #248]	@ (801984c <UTIL_SEQ_Run+0x1dc>)
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	4013      	ands	r3, r2
 8019758:	4a3c      	ldr	r2, [pc, #240]	@ (801984c <UTIL_SEQ_Run+0x1dc>)
 801975a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801975c:	2301      	movs	r3, #1
 801975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019760:	e013      	b.n	801978a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8019762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019764:	3b01      	subs	r3, #1
 8019766:	4a3d      	ldr	r2, [pc, #244]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 8019768:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801976c:	4b3c      	ldr	r3, [pc, #240]	@ (8019860 <UTIL_SEQ_Run+0x1f0>)
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	2201      	movs	r2, #1
 8019772:	fa02 f303 	lsl.w	r3, r2, r3
 8019776:	43da      	mvns	r2, r3
 8019778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801977a:	3b01      	subs	r3, #1
 801977c:	400a      	ands	r2, r1
 801977e:	4937      	ldr	r1, [pc, #220]	@ (801985c <UTIL_SEQ_Run+0x1ec>)
 8019780:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019786:	3b01      	subs	r3, #1
 8019788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801978a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801978c:	2b00      	cmp	r3, #0
 801978e:	d1e8      	bne.n	8019762 <UTIL_SEQ_Run+0xf2>
 8019790:	6a3b      	ldr	r3, [r7, #32]
 8019792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019794:	697b      	ldr	r3, [r7, #20]
 8019796:	f383 8810 	msr	PRIMASK, r3
}
 801979a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801979c:	4b30      	ldr	r3, [pc, #192]	@ (8019860 <UTIL_SEQ_Run+0x1f0>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a30      	ldr	r2, [pc, #192]	@ (8019864 <UTIL_SEQ_Run+0x1f4>)
 80197a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80197a6:	4798      	blx	r3

    local_taskset = TaskSet;
 80197a8:	4b28      	ldr	r3, [pc, #160]	@ (801984c <UTIL_SEQ_Run+0x1dc>)
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80197ae:	4b28      	ldr	r3, [pc, #160]	@ (8019850 <UTIL_SEQ_Run+0x1e0>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80197b4:	4b27      	ldr	r3, [pc, #156]	@ (8019854 <UTIL_SEQ_Run+0x1e4>)
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80197ba:	4b27      	ldr	r3, [pc, #156]	@ (8019858 <UTIL_SEQ_Run+0x1e8>)
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80197c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80197c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197c4:	401a      	ands	r2, r3
 80197c6:	4b20      	ldr	r3, [pc, #128]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	4013      	ands	r3, r2
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d005      	beq.n	80197dc <UTIL_SEQ_Run+0x16c>
 80197d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80197d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197d4:	4013      	ands	r3, r2
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	f43f af64 	beq.w	80196a4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80197dc:	4b20      	ldr	r3, [pc, #128]	@ (8019860 <UTIL_SEQ_Run+0x1f0>)
 80197de:	f04f 32ff 	mov.w	r2, #4294967295
 80197e2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80197e4:	f000 f88e 	bl	8019904 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197e8:	f3ef 8310 	mrs	r3, PRIMASK
 80197ec:	613b      	str	r3, [r7, #16]
  return(result);
 80197ee:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80197f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80197f2:	b672      	cpsid	i
}
 80197f4:	bf00      	nop
  local_taskset = TaskSet;
 80197f6:	4b15      	ldr	r3, [pc, #84]	@ (801984c <UTIL_SEQ_Run+0x1dc>)
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80197fc:	4b14      	ldr	r3, [pc, #80]	@ (8019850 <UTIL_SEQ_Run+0x1e0>)
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019802:	4b14      	ldr	r3, [pc, #80]	@ (8019854 <UTIL_SEQ_Run+0x1e4>)
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019808:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801980c:	401a      	ands	r2, r3
 801980e:	4b0e      	ldr	r3, [pc, #56]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	4013      	ands	r3, r2
 8019814:	2b00      	cmp	r3, #0
 8019816:	d107      	bne.n	8019828 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019818:	4b0f      	ldr	r3, [pc, #60]	@ (8019858 <UTIL_SEQ_Run+0x1e8>)
 801981a:	681a      	ldr	r2, [r3, #0]
 801981c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801981e:	4013      	ands	r3, r2
 8019820:	2b00      	cmp	r3, #0
 8019822:	d101      	bne.n	8019828 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8019824:	f7e7 fe98 	bl	8001558 <UTIL_SEQ_Idle>
 8019828:	69fb      	ldr	r3, [r7, #28]
 801982a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	f383 8810 	msr	PRIMASK, r3
}
 8019832:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8019834:	f000 f86c 	bl	8019910 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019838:	4a03      	ldr	r2, [pc, #12]	@ (8019848 <UTIL_SEQ_Run+0x1d8>)
 801983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801983c:	6013      	str	r3, [r2, #0]

  return;
 801983e:	bf00      	nop
}
 8019840:	3740      	adds	r7, #64	@ 0x40
 8019842:	46bd      	mov	sp, r7
 8019844:	bd80      	pop	{r7, pc}
 8019846:	bf00      	nop
 8019848:	200000e0 	.word	0x200000e0
 801984c:	20001994 	.word	0x20001994
 8019850:	20001998 	.word	0x20001998
 8019854:	200000dc 	.word	0x200000dc
 8019858:	2000199c 	.word	0x2000199c
 801985c:	200019cc 	.word	0x200019cc
 8019860:	200019a0 	.word	0x200019a0
 8019864:	200019a4 	.word	0x200019a4

08019868 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b088      	sub	sp, #32
 801986c:	af00      	add	r7, sp, #0
 801986e:	60f8      	str	r0, [r7, #12]
 8019870:	60b9      	str	r1, [r7, #8]
 8019872:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019874:	f3ef 8310 	mrs	r3, PRIMASK
 8019878:	617b      	str	r3, [r7, #20]
  return(result);
 801987a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801987c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801987e:	b672      	cpsid	i
}
 8019880:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019882:	68f8      	ldr	r0, [r7, #12]
 8019884:	f000 f84a 	bl	801991c <SEQ_BitPosition>
 8019888:	4603      	mov	r3, r0
 801988a:	4619      	mov	r1, r3
 801988c:	4a06      	ldr	r2, [pc, #24]	@ (80198a8 <UTIL_SEQ_RegTask+0x40>)
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019894:	69fb      	ldr	r3, [r7, #28]
 8019896:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019898:	69bb      	ldr	r3, [r7, #24]
 801989a:	f383 8810 	msr	PRIMASK, r3
}
 801989e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80198a0:	bf00      	nop
}
 80198a2:	3720      	adds	r7, #32
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	200019a4 	.word	0x200019a4

080198ac <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80198ac:	b480      	push	{r7}
 80198ae:	b087      	sub	sp, #28
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	6078      	str	r0, [r7, #4]
 80198b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80198b6:	f3ef 8310 	mrs	r3, PRIMASK
 80198ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80198bc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80198be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80198c0:	b672      	cpsid	i
}
 80198c2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80198c4:	4b0d      	ldr	r3, [pc, #52]	@ (80198fc <UTIL_SEQ_SetTask+0x50>)
 80198c6:	681a      	ldr	r2, [r3, #0]
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	4313      	orrs	r3, r2
 80198cc:	4a0b      	ldr	r2, [pc, #44]	@ (80198fc <UTIL_SEQ_SetTask+0x50>)
 80198ce:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80198d0:	4a0b      	ldr	r2, [pc, #44]	@ (8019900 <UTIL_SEQ_SetTask+0x54>)
 80198d2:	683b      	ldr	r3, [r7, #0]
 80198d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	431a      	orrs	r2, r3
 80198dc:	4908      	ldr	r1, [pc, #32]	@ (8019900 <UTIL_SEQ_SetTask+0x54>)
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80198e4:	697b      	ldr	r3, [r7, #20]
 80198e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198e8:	693b      	ldr	r3, [r7, #16]
 80198ea:	f383 8810 	msr	PRIMASK, r3
}
 80198ee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80198f0:	bf00      	nop
}
 80198f2:	371c      	adds	r7, #28
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bc80      	pop	{r7}
 80198f8:	4770      	bx	lr
 80198fa:	bf00      	nop
 80198fc:	20001994 	.word	0x20001994
 8019900:	200019cc 	.word	0x200019cc

08019904 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019904:	b480      	push	{r7}
 8019906:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019908:	bf00      	nop
}
 801990a:	46bd      	mov	sp, r7
 801990c:	bc80      	pop	{r7}
 801990e:	4770      	bx	lr

08019910 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019910:	b480      	push	{r7}
 8019912:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019914:	bf00      	nop
}
 8019916:	46bd      	mov	sp, r7
 8019918:	bc80      	pop	{r7}
 801991a:	4770      	bx	lr

0801991c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801991c:	b480      	push	{r7}
 801991e:	b085      	sub	sp, #20
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8019924:	2300      	movs	r3, #0
 8019926:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019932:	d204      	bcs.n	801993e <SEQ_BitPosition+0x22>
 8019934:	2310      	movs	r3, #16
 8019936:	73fb      	strb	r3, [r7, #15]
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	041b      	lsls	r3, r3, #16
 801993c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801993e:	68bb      	ldr	r3, [r7, #8]
 8019940:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019944:	d205      	bcs.n	8019952 <SEQ_BitPosition+0x36>
 8019946:	7bfb      	ldrb	r3, [r7, #15]
 8019948:	3308      	adds	r3, #8
 801994a:	73fb      	strb	r3, [r7, #15]
 801994c:	68bb      	ldr	r3, [r7, #8]
 801994e:	021b      	lsls	r3, r3, #8
 8019950:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8019952:	68bb      	ldr	r3, [r7, #8]
 8019954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019958:	d205      	bcs.n	8019966 <SEQ_BitPosition+0x4a>
 801995a:	7bfb      	ldrb	r3, [r7, #15]
 801995c:	3304      	adds	r3, #4
 801995e:	73fb      	strb	r3, [r7, #15]
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	011b      	lsls	r3, r3, #4
 8019964:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	0f1b      	lsrs	r3, r3, #28
 801996a:	4a07      	ldr	r2, [pc, #28]	@ (8019988 <SEQ_BitPosition+0x6c>)
 801996c:	5cd2      	ldrb	r2, [r2, r3]
 801996e:	7bfb      	ldrb	r3, [r7, #15]
 8019970:	4413      	add	r3, r2
 8019972:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8019974:	7bfb      	ldrb	r3, [r7, #15]
 8019976:	f1c3 031f 	rsb	r3, r3, #31
 801997a:	b2db      	uxtb	r3, r3
}
 801997c:	4618      	mov	r0, r3
 801997e:	3714      	adds	r7, #20
 8019980:	46bd      	mov	sp, r7
 8019982:	bc80      	pop	{r7}
 8019984:	4770      	bx	lr
 8019986:	bf00      	nop
 8019988:	08020cec 	.word	0x08020cec

0801998c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801998c:	b082      	sub	sp, #8
 801998e:	b480      	push	{r7}
 8019990:	b087      	sub	sp, #28
 8019992:	af00      	add	r7, sp, #0
 8019994:	60f8      	str	r0, [r7, #12]
 8019996:	1d38      	adds	r0, r7, #4
 8019998:	e880 0006 	stmia.w	r0, {r1, r2}
 801999c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801999e:	2300      	movs	r3, #0
 80199a0:	613b      	str	r3, [r7, #16]
 80199a2:	2300      	movs	r3, #0
 80199a4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 80199a6:	687a      	ldr	r2, [r7, #4]
 80199a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199aa:	4413      	add	r3, r2
 80199ac:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80199ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80199b2:	b29a      	uxth	r2, r3
 80199b4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80199b8:	b29b      	uxth	r3, r3
 80199ba:	4413      	add	r3, r2
 80199bc:	b29b      	uxth	r3, r3
 80199be:	b21b      	sxth	r3, r3
 80199c0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 80199c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80199c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80199ca:	db0a      	blt.n	80199e2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 80199cc:	693b      	ldr	r3, [r7, #16]
 80199ce:	3301      	adds	r3, #1
 80199d0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 80199d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80199d6:	b29b      	uxth	r3, r3
 80199d8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80199dc:	b29b      	uxth	r3, r3
 80199de:	b21b      	sxth	r3, r3
 80199e0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	461a      	mov	r2, r3
 80199e6:	f107 0310 	add.w	r3, r7, #16
 80199ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80199ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80199f2:	68f8      	ldr	r0, [r7, #12]
 80199f4:	371c      	adds	r7, #28
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bc80      	pop	{r7}
 80199fa:	b002      	add	sp, #8
 80199fc:	4770      	bx	lr

080199fe <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80199fe:	b082      	sub	sp, #8
 8019a00:	b480      	push	{r7}
 8019a02:	b087      	sub	sp, #28
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	60f8      	str	r0, [r7, #12]
 8019a08:	1d38      	adds	r0, r7, #4
 8019a0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8019a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019a10:	2300      	movs	r3, #0
 8019a12:	613b      	str	r3, [r7, #16]
 8019a14:	2300      	movs	r3, #0
 8019a16:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019a18:	687a      	ldr	r2, [r7, #4]
 8019a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a1c:	1ad3      	subs	r3, r2, r3
 8019a1e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019a20:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019a24:	b29a      	uxth	r2, r3
 8019a26:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8019a2a:	b29b      	uxth	r3, r3
 8019a2c:	1ad3      	subs	r3, r2, r3
 8019a2e:	b29b      	uxth	r3, r3
 8019a30:	b21b      	sxth	r3, r3
 8019a32:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019a34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	da0a      	bge.n	8019a52 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	3b01      	subs	r3, #1
 8019a40:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019a42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019a46:	b29b      	uxth	r3, r3
 8019a48:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8019a4c:	b29b      	uxth	r3, r3
 8019a4e:	b21b      	sxth	r3, r3
 8019a50:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	461a      	mov	r2, r3
 8019a56:	f107 0310 	add.w	r3, r7, #16
 8019a5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a5e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a62:	68f8      	ldr	r0, [r7, #12]
 8019a64:	371c      	adds	r7, #28
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bc80      	pop	{r7}
 8019a6a:	b002      	add	sp, #8
 8019a6c:	4770      	bx	lr
	...

08019a70 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b088      	sub	sp, #32
 8019a74:	af02      	add	r7, sp, #8
 8019a76:	463b      	mov	r3, r7
 8019a78:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	60bb      	str	r3, [r7, #8]
 8019a80:	2300      	movs	r3, #0
 8019a82:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019a84:	4b10      	ldr	r3, [pc, #64]	@ (8019ac8 <SysTimeSet+0x58>)
 8019a86:	691b      	ldr	r3, [r3, #16]
 8019a88:	f107 0208 	add.w	r2, r7, #8
 8019a8c:	3204      	adds	r2, #4
 8019a8e:	4610      	mov	r0, r2
 8019a90:	4798      	blx	r3
 8019a92:	4603      	mov	r3, r0
 8019a94:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019a96:	f107 0010 	add.w	r0, r7, #16
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	9300      	str	r3, [sp, #0]
 8019a9e:	68bb      	ldr	r3, [r7, #8]
 8019aa0:	463a      	mov	r2, r7
 8019aa2:	ca06      	ldmia	r2, {r1, r2}
 8019aa4:	f7ff ffab 	bl	80199fe <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019aa8:	4b07      	ldr	r3, [pc, #28]	@ (8019ac8 <SysTimeSet+0x58>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	693a      	ldr	r2, [r7, #16]
 8019aae:	4610      	mov	r0, r2
 8019ab0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019ab2:	4b05      	ldr	r3, [pc, #20]	@ (8019ac8 <SysTimeSet+0x58>)
 8019ab4:	689b      	ldr	r3, [r3, #8]
 8019ab6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019aba:	4610      	mov	r0, r2
 8019abc:	4798      	blx	r3
}
 8019abe:	bf00      	nop
 8019ac0:	3718      	adds	r7, #24
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}
 8019ac6:	bf00      	nop
 8019ac8:	08020670 	.word	0x08020670

08019acc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b08a      	sub	sp, #40	@ 0x28
 8019ad0:	af02      	add	r7, sp, #8
 8019ad2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	61bb      	str	r3, [r7, #24]
 8019ad8:	2300      	movs	r3, #0
 8019ada:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019adc:	2300      	movs	r3, #0
 8019ade:	613b      	str	r3, [r7, #16]
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019ae4:	4b14      	ldr	r3, [pc, #80]	@ (8019b38 <SysTimeGet+0x6c>)
 8019ae6:	691b      	ldr	r3, [r3, #16]
 8019ae8:	f107 0218 	add.w	r2, r7, #24
 8019aec:	3204      	adds	r2, #4
 8019aee:	4610      	mov	r0, r2
 8019af0:	4798      	blx	r3
 8019af2:	4603      	mov	r3, r0
 8019af4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019af6:	4b10      	ldr	r3, [pc, #64]	@ (8019b38 <SysTimeGet+0x6c>)
 8019af8:	68db      	ldr	r3, [r3, #12]
 8019afa:	4798      	blx	r3
 8019afc:	4603      	mov	r3, r0
 8019afe:	b21b      	sxth	r3, r3
 8019b00:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019b02:	4b0d      	ldr	r3, [pc, #52]	@ (8019b38 <SysTimeGet+0x6c>)
 8019b04:	685b      	ldr	r3, [r3, #4]
 8019b06:	4798      	blx	r3
 8019b08:	4603      	mov	r3, r0
 8019b0a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019b0c:	f107 0010 	add.w	r0, r7, #16
 8019b10:	69fb      	ldr	r3, [r7, #28]
 8019b12:	9300      	str	r3, [sp, #0]
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	f107 0208 	add.w	r2, r7, #8
 8019b1a:	ca06      	ldmia	r2, {r1, r2}
 8019b1c:	f7ff ff36 	bl	801998c <SysTimeAdd>

  return sysTime;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	461a      	mov	r2, r3
 8019b24:	f107 0310 	add.w	r3, r7, #16
 8019b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b2c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019b30:	6878      	ldr	r0, [r7, #4]
 8019b32:	3720      	adds	r7, #32
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bd80      	pop	{r7, pc}
 8019b38:	08020670 	.word	0x08020670

08019b3c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b084      	sub	sp, #16
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019b44:	2300      	movs	r3, #0
 8019b46:	60bb      	str	r3, [r7, #8]
 8019b48:	2300      	movs	r3, #0
 8019b4a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8019b78 <SysTimeGetMcuTime+0x3c>)
 8019b4e:	691b      	ldr	r3, [r3, #16]
 8019b50:	f107 0208 	add.w	r2, r7, #8
 8019b54:	3204      	adds	r2, #4
 8019b56:	4610      	mov	r0, r2
 8019b58:	4798      	blx	r3
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	461a      	mov	r2, r3
 8019b62:	f107 0308 	add.w	r3, r7, #8
 8019b66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b6a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	3710      	adds	r7, #16
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	08020670 	.word	0x08020670

08019b7c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b088      	sub	sp, #32
 8019b80:	af02      	add	r7, sp, #8
 8019b82:	463b      	mov	r3, r7
 8019b84:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019b88:	4b0f      	ldr	r3, [pc, #60]	@ (8019bc8 <SysTimeToMs+0x4c>)
 8019b8a:	68db      	ldr	r3, [r3, #12]
 8019b8c:	4798      	blx	r3
 8019b8e:	4603      	mov	r3, r0
 8019b90:	b21b      	sxth	r3, r3
 8019b92:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019b94:	4b0c      	ldr	r3, [pc, #48]	@ (8019bc8 <SysTimeToMs+0x4c>)
 8019b96:	685b      	ldr	r3, [r3, #4]
 8019b98:	4798      	blx	r3
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019b9e:	f107 0008 	add.w	r0, r7, #8
 8019ba2:	697b      	ldr	r3, [r7, #20]
 8019ba4:	9300      	str	r3, [sp, #0]
 8019ba6:	693b      	ldr	r3, [r7, #16]
 8019ba8:	463a      	mov	r2, r7
 8019baa:	ca06      	ldmia	r2, {r1, r2}
 8019bac:	f7ff ff27 	bl	80199fe <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019bb6:	fb02 f303 	mul.w	r3, r2, r3
 8019bba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019bbe:	4413      	add	r3, r2
}
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	3718      	adds	r7, #24
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd80      	pop	{r7, pc}
 8019bc8:	08020670 	.word	0x08020670

08019bcc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b08a      	sub	sp, #40	@ 0x28
 8019bd0:	af02      	add	r7, sp, #8
 8019bd2:	6078      	str	r0, [r7, #4]
 8019bd4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019bd6:	683b      	ldr	r3, [r7, #0]
 8019bd8:	4a19      	ldr	r2, [pc, #100]	@ (8019c40 <SysTimeFromMs+0x74>)
 8019bda:	fba2 2303 	umull	r2, r3, r2, r3
 8019bde:	099b      	lsrs	r3, r3, #6
 8019be0:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019be2:	69fb      	ldr	r3, [r7, #28]
 8019be4:	617b      	str	r3, [r7, #20]
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	b29a      	uxth	r2, r3
 8019bea:	69fb      	ldr	r3, [r7, #28]
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	4619      	mov	r1, r3
 8019bf0:	0149      	lsls	r1, r1, #5
 8019bf2:	1ac9      	subs	r1, r1, r3
 8019bf4:	0089      	lsls	r1, r1, #2
 8019bf6:	440b      	add	r3, r1
 8019bf8:	00db      	lsls	r3, r3, #3
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	1ad3      	subs	r3, r2, r3
 8019bfe:	b29b      	uxth	r3, r3
 8019c00:	b21b      	sxth	r3, r3
 8019c02:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019c04:	f107 030c 	add.w	r3, r7, #12
 8019c08:	2200      	movs	r2, #0
 8019c0a:	601a      	str	r2, [r3, #0]
 8019c0c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8019c44 <SysTimeFromMs+0x78>)
 8019c10:	68db      	ldr	r3, [r3, #12]
 8019c12:	4798      	blx	r3
 8019c14:	4603      	mov	r3, r0
 8019c16:	b21b      	sxth	r3, r3
 8019c18:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8019c44 <SysTimeFromMs+0x78>)
 8019c1c:	685b      	ldr	r3, [r3, #4]
 8019c1e:	4798      	blx	r3
 8019c20:	4603      	mov	r3, r0
 8019c22:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	693b      	ldr	r3, [r7, #16]
 8019c28:	9300      	str	r3, [sp, #0]
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	f107 0214 	add.w	r2, r7, #20
 8019c30:	ca06      	ldmia	r2, {r1, r2}
 8019c32:	f7ff feab 	bl	801998c <SysTimeAdd>
}
 8019c36:	6878      	ldr	r0, [r7, #4]
 8019c38:	3720      	adds	r7, #32
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}
 8019c3e:	bf00      	nop
 8019c40:	10624dd3 	.word	0x10624dd3
 8019c44:	08020670 	.word	0x08020670

08019c48 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8019c4c:	4b04      	ldr	r3, [pc, #16]	@ (8019c60 <UTIL_TIMER_Init+0x18>)
 8019c4e:	2200      	movs	r2, #0
 8019c50:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8019c52:	4b04      	ldr	r3, [pc, #16]	@ (8019c64 <UTIL_TIMER_Init+0x1c>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	4798      	blx	r3
 8019c58:	4603      	mov	r3, r0
}
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	bd80      	pop	{r7, pc}
 8019c5e:	bf00      	nop
 8019c60:	200019d4 	.word	0x200019d4
 8019c64:	08020644 	.word	0x08020644

08019c68 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b084      	sub	sp, #16
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	60f8      	str	r0, [r7, #12]
 8019c70:	60b9      	str	r1, [r7, #8]
 8019c72:	603b      	str	r3, [r7, #0]
 8019c74:	4613      	mov	r3, r2
 8019c76:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d023      	beq.n	8019cc6 <UTIL_TIMER_Create+0x5e>
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d020      	beq.n	8019cc6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	2200      	movs	r2, #0
 8019c88:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8019c8a:	4b11      	ldr	r3, [pc, #68]	@ (8019cd0 <UTIL_TIMER_Create+0x68>)
 8019c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c8e:	68b8      	ldr	r0, [r7, #8]
 8019c90:	4798      	blx	r3
 8019c92:	4602      	mov	r2, r0
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	683a      	ldr	r2, [r7, #0]
 8019cae:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	69ba      	ldr	r2, [r7, #24]
 8019cb4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	79fa      	ldrb	r2, [r7, #7]
 8019cba:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	e000      	b.n	8019cc8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8019cc6:	2301      	movs	r3, #1
  }
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3710      	adds	r7, #16
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}
 8019cd0:	08020644 	.word	0x08020644

08019cd4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b08a      	sub	sp, #40	@ 0x28
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019cdc:	2300      	movs	r3, #0
 8019cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d056      	beq.n	8019d96 <UTIL_TIMER_Start+0xc2>
 8019ce8:	6878      	ldr	r0, [r7, #4]
 8019cea:	f000 f929 	bl	8019f40 <TimerExists>
 8019cee:	4603      	mov	r3, r0
 8019cf0:	f083 0301 	eor.w	r3, r3, #1
 8019cf4:	b2db      	uxtb	r3, r3
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d04d      	beq.n	8019d96 <UTIL_TIMER_Start+0xc2>
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	7a5b      	ldrb	r3, [r3, #9]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d149      	bne.n	8019d96 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d02:	f3ef 8310 	mrs	r3, PRIMASK
 8019d06:	613b      	str	r3, [r7, #16]
  return(result);
 8019d08:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019d0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d0c:	b672      	cpsid	i
}
 8019d0e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8019d16:	4b24      	ldr	r3, [pc, #144]	@ (8019da8 <UTIL_TIMER_Start+0xd4>)
 8019d18:	6a1b      	ldr	r3, [r3, #32]
 8019d1a:	4798      	blx	r3
 8019d1c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8019d1e:	6a3a      	ldr	r2, [r7, #32]
 8019d20:	69bb      	ldr	r3, [r7, #24]
 8019d22:	429a      	cmp	r2, r3
 8019d24:	d201      	bcs.n	8019d2a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8019d26:	69bb      	ldr	r3, [r7, #24]
 8019d28:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6a3a      	ldr	r2, [r7, #32]
 8019d2e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	2200      	movs	r2, #0
 8019d34:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2201      	movs	r2, #1
 8019d3a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	2200      	movs	r2, #0
 8019d40:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8019d42:	4b1a      	ldr	r3, [pc, #104]	@ (8019dac <UTIL_TIMER_Start+0xd8>)
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d106      	bne.n	8019d58 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8019d4a:	4b17      	ldr	r3, [pc, #92]	@ (8019da8 <UTIL_TIMER_Start+0xd4>)
 8019d4c:	691b      	ldr	r3, [r3, #16]
 8019d4e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f000 f96b 	bl	801a02c <TimerInsertNewHeadTimer>
 8019d56:	e017      	b.n	8019d88 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8019d58:	4b13      	ldr	r3, [pc, #76]	@ (8019da8 <UTIL_TIMER_Start+0xd4>)
 8019d5a:	699b      	ldr	r3, [r3, #24]
 8019d5c:	4798      	blx	r3
 8019d5e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681a      	ldr	r2, [r3, #0]
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	441a      	add	r2, r3
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681a      	ldr	r2, [r3, #0]
 8019d70:	4b0e      	ldr	r3, [pc, #56]	@ (8019dac <UTIL_TIMER_Start+0xd8>)
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	429a      	cmp	r2, r3
 8019d78:	d203      	bcs.n	8019d82 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8019d7a:	6878      	ldr	r0, [r7, #4]
 8019d7c:	f000 f956 	bl	801a02c <TimerInsertNewHeadTimer>
 8019d80:	e002      	b.n	8019d88 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8019d82:	6878      	ldr	r0, [r7, #4]
 8019d84:	f000 f922 	bl	8019fcc <TimerInsertTimer>
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	f383 8810 	msr	PRIMASK, r3
}
 8019d92:	bf00      	nop
  {
 8019d94:	e002      	b.n	8019d9c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8019d96:	2301      	movs	r3, #1
 8019d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8019d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8019da0:	4618      	mov	r0, r3
 8019da2:	3728      	adds	r7, #40	@ 0x28
 8019da4:	46bd      	mov	sp, r7
 8019da6:	bd80      	pop	{r7, pc}
 8019da8:	08020644 	.word	0x08020644
 8019dac:	200019d4 	.word	0x200019d4

08019db0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b088      	sub	sp, #32
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019db8:	2300      	movs	r3, #0
 8019dba:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d05b      	beq.n	8019e7a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8019dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8019dc8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dcc:	b672      	cpsid	i
}
 8019dce:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8019dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8019dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2201      	movs	r2, #1
 8019de0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8019de2:	4b29      	ldr	r3, [pc, #164]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d041      	beq.n	8019e6e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	2200      	movs	r2, #0
 8019dee:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8019df0:	4b25      	ldr	r3, [pc, #148]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	687a      	ldr	r2, [r7, #4]
 8019df6:	429a      	cmp	r2, r3
 8019df8:	d134      	bne.n	8019e64 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8019dfa:	4b23      	ldr	r3, [pc, #140]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	2200      	movs	r2, #0
 8019e00:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8019e02:	4b21      	ldr	r3, [pc, #132]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	695b      	ldr	r3, [r3, #20]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d00a      	beq.n	8019e22 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8019e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	695b      	ldr	r3, [r3, #20]
 8019e12:	4a1d      	ldr	r2, [pc, #116]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019e14:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8019e16:	4b1c      	ldr	r3, [pc, #112]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f000 f8ac 	bl	8019f78 <TimerSetTimeout>
 8019e20:	e023      	b.n	8019e6a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8019e22:	4b1a      	ldr	r3, [pc, #104]	@ (8019e8c <UTIL_TIMER_Stop+0xdc>)
 8019e24:	68db      	ldr	r3, [r3, #12]
 8019e26:	4798      	blx	r3
            TimerListHead = NULL;
 8019e28:	4b17      	ldr	r3, [pc, #92]	@ (8019e88 <UTIL_TIMER_Stop+0xd8>)
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	601a      	str	r2, [r3, #0]
 8019e2e:	e01c      	b.n	8019e6a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8019e30:	697a      	ldr	r2, [r7, #20]
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d110      	bne.n	8019e5a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	695b      	ldr	r3, [r3, #20]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d006      	beq.n	8019e4e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8019e40:	697b      	ldr	r3, [r7, #20]
 8019e42:	695b      	ldr	r3, [r3, #20]
 8019e44:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019e46:	69bb      	ldr	r3, [r7, #24]
 8019e48:	697a      	ldr	r2, [r7, #20]
 8019e4a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8019e4c:	e00d      	b.n	8019e6a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8019e4e:	2300      	movs	r3, #0
 8019e50:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019e52:	69bb      	ldr	r3, [r7, #24]
 8019e54:	697a      	ldr	r2, [r7, #20]
 8019e56:	615a      	str	r2, [r3, #20]
            break;
 8019e58:	e007      	b.n	8019e6a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8019e5a:	697b      	ldr	r3, [r7, #20]
 8019e5c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8019e5e:	697b      	ldr	r3, [r7, #20]
 8019e60:	695b      	ldr	r3, [r3, #20]
 8019e62:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8019e64:	697b      	ldr	r3, [r7, #20]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d1e2      	bne.n	8019e30 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	77fb      	strb	r3, [r7, #31]
 8019e6e:	693b      	ldr	r3, [r7, #16]
 8019e70:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	f383 8810 	msr	PRIMASK, r3
}
 8019e78:	e001      	b.n	8019e7e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8019e7a:	2301      	movs	r3, #1
 8019e7c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8019e7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8019e80:	4618      	mov	r0, r3
 8019e82:	3720      	adds	r7, #32
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}
 8019e88:	200019d4 	.word	0x200019d4
 8019e8c:	08020644 	.word	0x08020644

08019e90 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b084      	sub	sp, #16
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
 8019e98:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d102      	bne.n	8019eaa <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	73fb      	strb	r3, [r7, #15]
 8019ea8:	e014      	b.n	8019ed4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8019eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee0 <UTIL_TIMER_SetPeriod+0x50>)
 8019eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019eae:	6838      	ldr	r0, [r7, #0]
 8019eb0:	4798      	blx	r3
 8019eb2:	4602      	mov	r2, r0
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8019eb8:	6878      	ldr	r0, [r7, #4]
 8019eba:	f000 f841 	bl	8019f40 <TimerExists>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d007      	beq.n	8019ed4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8019ec4:	6878      	ldr	r0, [r7, #4]
 8019ec6:	f7ff ff73 	bl	8019db0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8019eca:	6878      	ldr	r0, [r7, #4]
 8019ecc:	f7ff ff02 	bl	8019cd4 <UTIL_TIMER_Start>
 8019ed0:	4603      	mov	r3, r0
 8019ed2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8019ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	3710      	adds	r7, #16
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bd80      	pop	{r7, pc}
 8019ede:	bf00      	nop
 8019ee0:	08020644 	.word	0x08020644

08019ee4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b082      	sub	sp, #8
 8019ee8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8019eea:	4b06      	ldr	r3, [pc, #24]	@ (8019f04 <UTIL_TIMER_GetCurrentTime+0x20>)
 8019eec:	69db      	ldr	r3, [r3, #28]
 8019eee:	4798      	blx	r3
 8019ef0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8019ef2:	4b04      	ldr	r3, [pc, #16]	@ (8019f04 <UTIL_TIMER_GetCurrentTime+0x20>)
 8019ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ef6:	6878      	ldr	r0, [r7, #4]
 8019ef8:	4798      	blx	r3
 8019efa:	4603      	mov	r3, r0
}
 8019efc:	4618      	mov	r0, r3
 8019efe:	3708      	adds	r7, #8
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bd80      	pop	{r7, pc}
 8019f04:	08020644 	.word	0x08020644

08019f08 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b084      	sub	sp, #16
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8019f10:	4b0a      	ldr	r3, [pc, #40]	@ (8019f3c <UTIL_TIMER_GetElapsedTime+0x34>)
 8019f12:	69db      	ldr	r3, [r3, #28]
 8019f14:	4798      	blx	r3
 8019f16:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8019f18:	4b08      	ldr	r3, [pc, #32]	@ (8019f3c <UTIL_TIMER_GetElapsedTime+0x34>)
 8019f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f1c:	6878      	ldr	r0, [r7, #4]
 8019f1e:	4798      	blx	r3
 8019f20:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8019f22:	4b06      	ldr	r3, [pc, #24]	@ (8019f3c <UTIL_TIMER_GetElapsedTime+0x34>)
 8019f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f26:	68f9      	ldr	r1, [r7, #12]
 8019f28:	68ba      	ldr	r2, [r7, #8]
 8019f2a:	1a8a      	subs	r2, r1, r2
 8019f2c:	4610      	mov	r0, r2
 8019f2e:	4798      	blx	r3
 8019f30:	4603      	mov	r3, r0
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	3710      	adds	r7, #16
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	08020644 	.word	0x08020644

08019f40 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8019f40:	b480      	push	{r7}
 8019f42:	b085      	sub	sp, #20
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019f48:	4b0a      	ldr	r3, [pc, #40]	@ (8019f74 <TimerExists+0x34>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8019f4e:	e008      	b.n	8019f62 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8019f50:	68fa      	ldr	r2, [r7, #12]
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	429a      	cmp	r2, r3
 8019f56:	d101      	bne.n	8019f5c <TimerExists+0x1c>
    {
      return true;
 8019f58:	2301      	movs	r3, #1
 8019f5a:	e006      	b.n	8019f6a <TimerExists+0x2a>
    }
    cur = cur->Next;
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	695b      	ldr	r3, [r3, #20]
 8019f60:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d1f3      	bne.n	8019f50 <TimerExists+0x10>
  }
  return false;
 8019f68:	2300      	movs	r3, #0
}
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	3714      	adds	r7, #20
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	bc80      	pop	{r7}
 8019f72:	4770      	bx	lr
 8019f74:	200019d4 	.word	0x200019d4

08019f78 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8019f78:	b590      	push	{r4, r7, lr}
 8019f7a:	b085      	sub	sp, #20
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8019f80:	4b11      	ldr	r3, [pc, #68]	@ (8019fc8 <TimerSetTimeout+0x50>)
 8019f82:	6a1b      	ldr	r3, [r3, #32]
 8019f84:	4798      	blx	r3
 8019f86:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	2201      	movs	r2, #1
 8019f8c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681c      	ldr	r4, [r3, #0]
 8019f92:	4b0d      	ldr	r3, [pc, #52]	@ (8019fc8 <TimerSetTimeout+0x50>)
 8019f94:	699b      	ldr	r3, [r3, #24]
 8019f96:	4798      	blx	r3
 8019f98:	4602      	mov	r2, r0
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	4413      	add	r3, r2
 8019f9e:	429c      	cmp	r4, r3
 8019fa0:	d207      	bcs.n	8019fb2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8019fa2:	4b09      	ldr	r3, [pc, #36]	@ (8019fc8 <TimerSetTimeout+0x50>)
 8019fa4:	699b      	ldr	r3, [r3, #24]
 8019fa6:	4798      	blx	r3
 8019fa8:	4602      	mov	r2, r0
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	441a      	add	r2, r3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8019fb2:	4b05      	ldr	r3, [pc, #20]	@ (8019fc8 <TimerSetTimeout+0x50>)
 8019fb4:	689b      	ldr	r3, [r3, #8]
 8019fb6:	687a      	ldr	r2, [r7, #4]
 8019fb8:	6812      	ldr	r2, [r2, #0]
 8019fba:	4610      	mov	r0, r2
 8019fbc:	4798      	blx	r3
}
 8019fbe:	bf00      	nop
 8019fc0:	3714      	adds	r7, #20
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	bd90      	pop	{r4, r7, pc}
 8019fc6:	bf00      	nop
 8019fc8:	08020644 	.word	0x08020644

08019fcc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8019fcc:	b480      	push	{r7}
 8019fce:	b085      	sub	sp, #20
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019fd4:	4b14      	ldr	r3, [pc, #80]	@ (801a028 <TimerInsertTimer+0x5c>)
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8019fda:	4b13      	ldr	r3, [pc, #76]	@ (801a028 <TimerInsertTimer+0x5c>)
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	695b      	ldr	r3, [r3, #20]
 8019fe0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8019fe2:	e012      	b.n	801a00a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681a      	ldr	r2, [r3, #0]
 8019fe8:	68bb      	ldr	r3, [r7, #8]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d905      	bls.n	8019ffc <TimerInsertTimer+0x30>
    {
        cur = next;
 8019ff0:	68bb      	ldr	r3, [r7, #8]
 8019ff2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	695b      	ldr	r3, [r3, #20]
 8019ff8:	60bb      	str	r3, [r7, #8]
 8019ffa:	e006      	b.n	801a00a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	687a      	ldr	r2, [r7, #4]
 801a000:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	68ba      	ldr	r2, [r7, #8]
 801a006:	615a      	str	r2, [r3, #20]
        return;
 801a008:	e009      	b.n	801a01e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	695b      	ldr	r3, [r3, #20]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d1e8      	bne.n	8019fe4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	687a      	ldr	r2, [r7, #4]
 801a016:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2200      	movs	r2, #0
 801a01c:	615a      	str	r2, [r3, #20]
}
 801a01e:	3714      	adds	r7, #20
 801a020:	46bd      	mov	sp, r7
 801a022:	bc80      	pop	{r7}
 801a024:	4770      	bx	lr
 801a026:	bf00      	nop
 801a028:	200019d4 	.word	0x200019d4

0801a02c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b084      	sub	sp, #16
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a034:	4b0b      	ldr	r3, [pc, #44]	@ (801a064 <TimerInsertNewHeadTimer+0x38>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d002      	beq.n	801a046 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	2200      	movs	r2, #0
 801a044:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	68fa      	ldr	r2, [r7, #12]
 801a04a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a04c:	4a05      	ldr	r2, [pc, #20]	@ (801a064 <TimerInsertNewHeadTimer+0x38>)
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a052:	4b04      	ldr	r3, [pc, #16]	@ (801a064 <TimerInsertNewHeadTimer+0x38>)
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	4618      	mov	r0, r3
 801a058:	f7ff ff8e 	bl	8019f78 <TimerSetTimeout>
}
 801a05c:	bf00      	nop
 801a05e:	3710      	adds	r7, #16
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}
 801a064:	200019d4 	.word	0x200019d4

0801a068 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a068:	b480      	push	{r7}
 801a06a:	b085      	sub	sp, #20
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a070:	2300      	movs	r3, #0
 801a072:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a074:	e00e      	b.n	801a094 <ee_skip_atoi+0x2c>
 801a076:	68fa      	ldr	r2, [r7, #12]
 801a078:	4613      	mov	r3, r2
 801a07a:	009b      	lsls	r3, r3, #2
 801a07c:	4413      	add	r3, r2
 801a07e:	005b      	lsls	r3, r3, #1
 801a080:	4618      	mov	r0, r3
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	1c59      	adds	r1, r3, #1
 801a088:	687a      	ldr	r2, [r7, #4]
 801a08a:	6011      	str	r1, [r2, #0]
 801a08c:	781b      	ldrb	r3, [r3, #0]
 801a08e:	4403      	add	r3, r0
 801a090:	3b30      	subs	r3, #48	@ 0x30
 801a092:	60fb      	str	r3, [r7, #12]
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	781b      	ldrb	r3, [r3, #0]
 801a09a:	2b2f      	cmp	r3, #47	@ 0x2f
 801a09c:	d904      	bls.n	801a0a8 <ee_skip_atoi+0x40>
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	781b      	ldrb	r3, [r3, #0]
 801a0a4:	2b39      	cmp	r3, #57	@ 0x39
 801a0a6:	d9e6      	bls.n	801a076 <ee_skip_atoi+0xe>
  return i;
 801a0a8:	68fb      	ldr	r3, [r7, #12]
}
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	3714      	adds	r7, #20
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bc80      	pop	{r7}
 801a0b2:	4770      	bx	lr

0801a0b4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a0b4:	b480      	push	{r7}
 801a0b6:	b099      	sub	sp, #100	@ 0x64
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	60f8      	str	r0, [r7, #12]
 801a0bc:	60b9      	str	r1, [r7, #8]
 801a0be:	607a      	str	r2, [r7, #4]
 801a0c0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a0c2:	4b71      	ldr	r3, [pc, #452]	@ (801a288 <ee_number+0x1d4>)
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a0c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d002      	beq.n	801a0d8 <ee_number+0x24>
 801a0d2:	4b6e      	ldr	r3, [pc, #440]	@ (801a28c <ee_number+0x1d8>)
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	2b01      	cmp	r3, #1
 801a0dc:	dd02      	ble.n	801a0e4 <ee_number+0x30>
 801a0de:	683b      	ldr	r3, [r7, #0]
 801a0e0:	2b24      	cmp	r3, #36	@ 0x24
 801a0e2:	dd01      	ble.n	801a0e8 <ee_number+0x34>
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	e0ca      	b.n	801a27e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a0e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0ea:	f003 0301 	and.w	r3, r3, #1
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d001      	beq.n	801a0f6 <ee_number+0x42>
 801a0f2:	2330      	movs	r3, #48	@ 0x30
 801a0f4:	e000      	b.n	801a0f8 <ee_number+0x44>
 801a0f6:	2320      	movs	r3, #32
 801a0f8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a104:	f003 0302 	and.w	r3, r3, #2
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d00b      	beq.n	801a124 <ee_number+0x70>
  {
    if (num < 0)
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	da08      	bge.n	801a124 <ee_number+0x70>
    {
      sign = '-';
 801a112:	232d      	movs	r3, #45	@ 0x2d
 801a114:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	425b      	negs	r3, r3
 801a11c:	607b      	str	r3, [r7, #4]
      size--;
 801a11e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a120:	3b01      	subs	r3, #1
 801a122:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a124:	2300      	movs	r3, #0
 801a126:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d11e      	bne.n	801a16c <ee_number+0xb8>
    tmp[i++] = '0';
 801a12e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a130:	1c5a      	adds	r2, r3, #1
 801a132:	657a      	str	r2, [r7, #84]	@ 0x54
 801a134:	3360      	adds	r3, #96	@ 0x60
 801a136:	443b      	add	r3, r7
 801a138:	2230      	movs	r2, #48	@ 0x30
 801a13a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a13e:	e018      	b.n	801a172 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	683a      	ldr	r2, [r7, #0]
 801a144:	fbb3 f1f2 	udiv	r1, r3, r2
 801a148:	fb01 f202 	mul.w	r2, r1, r2
 801a14c:	1a9b      	subs	r3, r3, r2
 801a14e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a150:	441a      	add	r2, r3
 801a152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a154:	1c59      	adds	r1, r3, #1
 801a156:	6579      	str	r1, [r7, #84]	@ 0x54
 801a158:	7812      	ldrb	r2, [r2, #0]
 801a15a:	3360      	adds	r3, #96	@ 0x60
 801a15c:	443b      	add	r3, r7
 801a15e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a162:	687a      	ldr	r2, [r7, #4]
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	fbb2 f3f3 	udiv	r3, r2, r3
 801a16a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d1e6      	bne.n	801a140 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a172:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a176:	429a      	cmp	r2, r3
 801a178:	dd01      	ble.n	801a17e <ee_number+0xca>
 801a17a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a17c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a17e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a182:	1ad3      	subs	r3, r2, r3
 801a184:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a188:	f003 0301 	and.w	r3, r3, #1
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d112      	bne.n	801a1b6 <ee_number+0x102>
 801a190:	e00c      	b.n	801a1ac <ee_number+0xf8>
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	1c5a      	adds	r2, r3, #1
 801a196:	60fa      	str	r2, [r7, #12]
 801a198:	2220      	movs	r2, #32
 801a19a:	701a      	strb	r2, [r3, #0]
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	3b01      	subs	r3, #1
 801a1a0:	60bb      	str	r3, [r7, #8]
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d101      	bne.n	801a1ac <ee_number+0xf8>
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	e068      	b.n	801a27e <ee_number+0x1ca>
 801a1ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1ae:	1e5a      	subs	r2, r3, #1
 801a1b0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	dced      	bgt.n	801a192 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a1b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d01b      	beq.n	801a1f6 <ee_number+0x142>
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	1c5a      	adds	r2, r3, #1
 801a1c2:	60fa      	str	r2, [r7, #12]
 801a1c4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a1c8:	701a      	strb	r2, [r3, #0]
 801a1ca:	68bb      	ldr	r3, [r7, #8]
 801a1cc:	3b01      	subs	r3, #1
 801a1ce:	60bb      	str	r3, [r7, #8]
 801a1d0:	68bb      	ldr	r3, [r7, #8]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d10f      	bne.n	801a1f6 <ee_number+0x142>
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	e051      	b.n	801a27e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	1c5a      	adds	r2, r3, #1
 801a1de:	60fa      	str	r2, [r7, #12]
 801a1e0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a1e4:	701a      	strb	r2, [r3, #0]
 801a1e6:	68bb      	ldr	r3, [r7, #8]
 801a1e8:	3b01      	subs	r3, #1
 801a1ea:	60bb      	str	r3, [r7, #8]
 801a1ec:	68bb      	ldr	r3, [r7, #8]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d101      	bne.n	801a1f6 <ee_number+0x142>
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	e043      	b.n	801a27e <ee_number+0x1ca>
 801a1f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1f8:	1e5a      	subs	r2, r3, #1
 801a1fa:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	dcec      	bgt.n	801a1da <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a200:	e00c      	b.n	801a21c <ee_number+0x168>
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	1c5a      	adds	r2, r3, #1
 801a206:	60fa      	str	r2, [r7, #12]
 801a208:	2230      	movs	r2, #48	@ 0x30
 801a20a:	701a      	strb	r2, [r3, #0]
 801a20c:	68bb      	ldr	r3, [r7, #8]
 801a20e:	3b01      	subs	r3, #1
 801a210:	60bb      	str	r3, [r7, #8]
 801a212:	68bb      	ldr	r3, [r7, #8]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d101      	bne.n	801a21c <ee_number+0x168>
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	e030      	b.n	801a27e <ee_number+0x1ca>
 801a21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a21e:	1e5a      	subs	r2, r3, #1
 801a220:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a222:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a224:	429a      	cmp	r2, r3
 801a226:	dbec      	blt.n	801a202 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a228:	e010      	b.n	801a24c <ee_number+0x198>
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	1c5a      	adds	r2, r3, #1
 801a22e:	60fa      	str	r2, [r7, #12]
 801a230:	f107 0110 	add.w	r1, r7, #16
 801a234:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a236:	440a      	add	r2, r1
 801a238:	7812      	ldrb	r2, [r2, #0]
 801a23a:	701a      	strb	r2, [r3, #0]
 801a23c:	68bb      	ldr	r3, [r7, #8]
 801a23e:	3b01      	subs	r3, #1
 801a240:	60bb      	str	r3, [r7, #8]
 801a242:	68bb      	ldr	r3, [r7, #8]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d101      	bne.n	801a24c <ee_number+0x198>
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	e018      	b.n	801a27e <ee_number+0x1ca>
 801a24c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a24e:	1e5a      	subs	r2, r3, #1
 801a250:	657a      	str	r2, [r7, #84]	@ 0x54
 801a252:	2b00      	cmp	r3, #0
 801a254:	dce9      	bgt.n	801a22a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a256:	e00c      	b.n	801a272 <ee_number+0x1be>
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	1c5a      	adds	r2, r3, #1
 801a25c:	60fa      	str	r2, [r7, #12]
 801a25e:	2220      	movs	r2, #32
 801a260:	701a      	strb	r2, [r3, #0]
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	3b01      	subs	r3, #1
 801a266:	60bb      	str	r3, [r7, #8]
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d101      	bne.n	801a272 <ee_number+0x1be>
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	e005      	b.n	801a27e <ee_number+0x1ca>
 801a272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a274:	1e5a      	subs	r2, r3, #1
 801a276:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a278:	2b00      	cmp	r3, #0
 801a27a:	dced      	bgt.n	801a258 <ee_number+0x1a4>

  return str;
 801a27c:	68fb      	ldr	r3, [r7, #12]
}
 801a27e:	4618      	mov	r0, r3
 801a280:	3764      	adds	r7, #100	@ 0x64
 801a282:	46bd      	mov	sp, r7
 801a284:	bc80      	pop	{r7}
 801a286:	4770      	bx	lr
 801a288:	200000e4 	.word	0x200000e4
 801a28c:	200000e8 	.word	0x200000e8

0801a290 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b092      	sub	sp, #72	@ 0x48
 801a294:	af04      	add	r7, sp, #16
 801a296:	60f8      	str	r0, [r7, #12]
 801a298:	60b9      	str	r1, [r7, #8]
 801a29a:	607a      	str	r2, [r7, #4]
 801a29c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	dc01      	bgt.n	801a2a8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	e13e      	b.n	801a526 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a2ac:	e128      	b.n	801a500 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a2ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	1ad2      	subs	r2, r2, r3
 801a2b4:	68bb      	ldr	r3, [r7, #8]
 801a2b6:	3b01      	subs	r3, #1
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	f280 812e 	bge.w	801a51a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	781b      	ldrb	r3, [r3, #0]
 801a2c2:	2b25      	cmp	r3, #37	@ 0x25
 801a2c4:	d006      	beq.n	801a2d4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a2c6:	687a      	ldr	r2, [r7, #4]
 801a2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2ca:	1c59      	adds	r1, r3, #1
 801a2cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a2ce:	7812      	ldrb	r2, [r2, #0]
 801a2d0:	701a      	strb	r2, [r3, #0]
      continue;
 801a2d2:	e112      	b.n	801a4fa <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a2d4:	2300      	movs	r3, #0
 801a2d6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	3301      	adds	r3, #1
 801a2dc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	781b      	ldrb	r3, [r3, #0]
 801a2e2:	2b30      	cmp	r3, #48	@ 0x30
 801a2e4:	d103      	bne.n	801a2ee <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a2e6:	6a3b      	ldr	r3, [r7, #32]
 801a2e8:	f043 0301 	orr.w	r3, r3, #1
 801a2ec:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a2ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a2f2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	2b2f      	cmp	r3, #47	@ 0x2f
 801a2fa:	d908      	bls.n	801a30e <tiny_vsnprintf_like+0x7e>
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	781b      	ldrb	r3, [r3, #0]
 801a300:	2b39      	cmp	r3, #57	@ 0x39
 801a302:	d804      	bhi.n	801a30e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a304:	1d3b      	adds	r3, r7, #4
 801a306:	4618      	mov	r0, r3
 801a308:	f7ff feae 	bl	801a068 <ee_skip_atoi>
 801a30c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a30e:	f04f 33ff 	mov.w	r3, #4294967295
 801a312:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a314:	f04f 33ff 	mov.w	r3, #4294967295
 801a318:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a31a:	230a      	movs	r3, #10
 801a31c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	781b      	ldrb	r3, [r3, #0]
 801a322:	3b58      	subs	r3, #88	@ 0x58
 801a324:	2b20      	cmp	r3, #32
 801a326:	f200 8094 	bhi.w	801a452 <tiny_vsnprintf_like+0x1c2>
 801a32a:	a201      	add	r2, pc, #4	@ (adr r2, 801a330 <tiny_vsnprintf_like+0xa0>)
 801a32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a330:	0801a43b 	.word	0x0801a43b
 801a334:	0801a453 	.word	0x0801a453
 801a338:	0801a453 	.word	0x0801a453
 801a33c:	0801a453 	.word	0x0801a453
 801a340:	0801a453 	.word	0x0801a453
 801a344:	0801a453 	.word	0x0801a453
 801a348:	0801a453 	.word	0x0801a453
 801a34c:	0801a453 	.word	0x0801a453
 801a350:	0801a453 	.word	0x0801a453
 801a354:	0801a453 	.word	0x0801a453
 801a358:	0801a453 	.word	0x0801a453
 801a35c:	0801a3bf 	.word	0x0801a3bf
 801a360:	0801a449 	.word	0x0801a449
 801a364:	0801a453 	.word	0x0801a453
 801a368:	0801a453 	.word	0x0801a453
 801a36c:	0801a453 	.word	0x0801a453
 801a370:	0801a453 	.word	0x0801a453
 801a374:	0801a449 	.word	0x0801a449
 801a378:	0801a453 	.word	0x0801a453
 801a37c:	0801a453 	.word	0x0801a453
 801a380:	0801a453 	.word	0x0801a453
 801a384:	0801a453 	.word	0x0801a453
 801a388:	0801a453 	.word	0x0801a453
 801a38c:	0801a453 	.word	0x0801a453
 801a390:	0801a453 	.word	0x0801a453
 801a394:	0801a453 	.word	0x0801a453
 801a398:	0801a453 	.word	0x0801a453
 801a39c:	0801a3df 	.word	0x0801a3df
 801a3a0:	0801a453 	.word	0x0801a453
 801a3a4:	0801a49f 	.word	0x0801a49f
 801a3a8:	0801a453 	.word	0x0801a453
 801a3ac:	0801a453 	.word	0x0801a453
 801a3b0:	0801a443 	.word	0x0801a443
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3b6:	1c5a      	adds	r2, r3, #1
 801a3b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3ba:	2220      	movs	r2, #32
 801a3bc:	701a      	strb	r2, [r3, #0]
 801a3be:	69fb      	ldr	r3, [r7, #28]
 801a3c0:	3b01      	subs	r3, #1
 801a3c2:	61fb      	str	r3, [r7, #28]
 801a3c4:	69fb      	ldr	r3, [r7, #28]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	dcf4      	bgt.n	801a3b4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	1d1a      	adds	r2, r3, #4
 801a3ce:	603a      	str	r2, [r7, #0]
 801a3d0:	6819      	ldr	r1, [r3, #0]
 801a3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3d4:	1c5a      	adds	r2, r3, #1
 801a3d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3d8:	b2ca      	uxtb	r2, r1
 801a3da:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a3dc:	e08d      	b.n	801a4fa <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a3de:	683b      	ldr	r3, [r7, #0]
 801a3e0:	1d1a      	adds	r2, r3, #4
 801a3e2:	603a      	str	r2, [r7, #0]
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d101      	bne.n	801a3f2 <tiny_vsnprintf_like+0x162>
 801a3ee:	4b50      	ldr	r3, [pc, #320]	@ (801a530 <tiny_vsnprintf_like+0x2a0>)
 801a3f0:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a3f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a3f4:	f7e5 fec4 	bl	8000180 <strlen>
 801a3f8:	4603      	mov	r3, r0
 801a3fa:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a3fc:	e004      	b.n	801a408 <tiny_vsnprintf_like+0x178>
 801a3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a400:	1c5a      	adds	r2, r3, #1
 801a402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a404:	2220      	movs	r2, #32
 801a406:	701a      	strb	r2, [r3, #0]
 801a408:	69fb      	ldr	r3, [r7, #28]
 801a40a:	1e5a      	subs	r2, r3, #1
 801a40c:	61fa      	str	r2, [r7, #28]
 801a40e:	693a      	ldr	r2, [r7, #16]
 801a410:	429a      	cmp	r2, r3
 801a412:	dbf4      	blt.n	801a3fe <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a414:	2300      	movs	r3, #0
 801a416:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a418:	e00a      	b.n	801a430 <tiny_vsnprintf_like+0x1a0>
 801a41a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a41c:	1c53      	adds	r3, r2, #1
 801a41e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a422:	1c59      	adds	r1, r3, #1
 801a424:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a426:	7812      	ldrb	r2, [r2, #0]
 801a428:	701a      	strb	r2, [r3, #0]
 801a42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a42c:	3301      	adds	r3, #1
 801a42e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a430:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a432:	693b      	ldr	r3, [r7, #16]
 801a434:	429a      	cmp	r2, r3
 801a436:	dbf0      	blt.n	801a41a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a438:	e05f      	b.n	801a4fa <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a43a:	6a3b      	ldr	r3, [r7, #32]
 801a43c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a440:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a442:	2310      	movs	r3, #16
 801a444:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a446:	e02b      	b.n	801a4a0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a448:	6a3b      	ldr	r3, [r7, #32]
 801a44a:	f043 0302 	orr.w	r3, r3, #2
 801a44e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a450:	e025      	b.n	801a49e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	781b      	ldrb	r3, [r3, #0]
 801a456:	2b25      	cmp	r3, #37	@ 0x25
 801a458:	d004      	beq.n	801a464 <tiny_vsnprintf_like+0x1d4>
 801a45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a45c:	1c5a      	adds	r2, r3, #1
 801a45e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a460:	2225      	movs	r2, #37	@ 0x25
 801a462:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	1ad2      	subs	r2, r2, r3
 801a46a:	68bb      	ldr	r3, [r7, #8]
 801a46c:	3b01      	subs	r3, #1
 801a46e:	429a      	cmp	r2, r3
 801a470:	da16      	bge.n	801a4a0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	781b      	ldrb	r3, [r3, #0]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d006      	beq.n	801a488 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a47a:	687a      	ldr	r2, [r7, #4]
 801a47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a47e:	1c59      	adds	r1, r3, #1
 801a480:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a482:	7812      	ldrb	r2, [r2, #0]
 801a484:	701a      	strb	r2, [r3, #0]
 801a486:	e002      	b.n	801a48e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	3b01      	subs	r3, #1
 801a48c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a48e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	1ad2      	subs	r2, r2, r3
 801a494:	68bb      	ldr	r3, [r7, #8]
 801a496:	3b01      	subs	r3, #1
 801a498:	429a      	cmp	r2, r3
 801a49a:	db2d      	blt.n	801a4f8 <tiny_vsnprintf_like+0x268>
 801a49c:	e000      	b.n	801a4a0 <tiny_vsnprintf_like+0x210>
        break;
 801a49e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	2b6c      	cmp	r3, #108	@ 0x6c
 801a4a4:	d105      	bne.n	801a4b2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a4a6:	683b      	ldr	r3, [r7, #0]
 801a4a8:	1d1a      	adds	r2, r3, #4
 801a4aa:	603a      	str	r2, [r7, #0]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 801a4b0:	e00f      	b.n	801a4d2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a4b2:	6a3b      	ldr	r3, [r7, #32]
 801a4b4:	f003 0302 	and.w	r3, r3, #2
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d005      	beq.n	801a4c8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a4bc:	683b      	ldr	r3, [r7, #0]
 801a4be:	1d1a      	adds	r2, r3, #4
 801a4c0:	603a      	str	r2, [r7, #0]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	637b      	str	r3, [r7, #52]	@ 0x34
 801a4c6:	e004      	b.n	801a4d2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a4c8:	683b      	ldr	r3, [r7, #0]
 801a4ca:	1d1a      	adds	r2, r3, #4
 801a4cc:	603a      	str	r2, [r7, #0]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	1e5a      	subs	r2, r3, #1
 801a4d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	1acb      	subs	r3, r1, r3
 801a4dc:	1ad1      	subs	r1, r2, r3
 801a4de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a4e0:	6a3b      	ldr	r3, [r7, #32]
 801a4e2:	9302      	str	r3, [sp, #8]
 801a4e4:	69bb      	ldr	r3, [r7, #24]
 801a4e6:	9301      	str	r3, [sp, #4]
 801a4e8:	69fb      	ldr	r3, [r7, #28]
 801a4ea:	9300      	str	r3, [sp, #0]
 801a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4f0:	f7ff fde0 	bl	801a0b4 <ee_number>
 801a4f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a4f6:	e000      	b.n	801a4fa <tiny_vsnprintf_like+0x26a>
        continue;
 801a4f8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	3301      	adds	r3, #1
 801a4fe:	607b      	str	r3, [r7, #4]
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	781b      	ldrb	r3, [r3, #0]
 801a504:	2b00      	cmp	r3, #0
 801a506:	f47f aed2 	bne.w	801a2ae <tiny_vsnprintf_like+0x1e>
 801a50a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	1ad2      	subs	r2, r2, r3
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	3b01      	subs	r3, #1
 801a514:	429a      	cmp	r2, r3
 801a516:	f6bf aeca 	bge.w	801a2ae <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801a51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a51c:	2200      	movs	r2, #0
 801a51e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	1ad3      	subs	r3, r2, r3
}
 801a526:	4618      	mov	r0, r3
 801a528:	3738      	adds	r7, #56	@ 0x38
 801a52a:	46bd      	mov	sp, r7
 801a52c:	bd80      	pop	{r7, pc}
 801a52e:	bf00      	nop
 801a530:	08020550 	.word	0x08020550

0801a534 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b082      	sub	sp, #8
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d009      	beq.n	801a558 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 801a544:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801a546:	461a      	mov	r2, r3
        err.type, err.code);
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801a54e:	6839      	ldr	r1, [r7, #0]
 801a550:	4807      	ldr	r0, [pc, #28]	@ (801a570 <ai_log_err+0x3c>)
 801a552:	f004 fe5f 	bl	801f214 <iprintf>
 801a556:	e009      	b.n	801a56c <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801a558:	793b      	ldrb	r3, [r7, #4]
 801a55a:	4619      	mov	r1, r3
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801a562:	461a      	mov	r2, r3
 801a564:	4803      	ldr	r0, [pc, #12]	@ (801a574 <ai_log_err+0x40>)
 801a566:	f004 fe55 	bl	801f214 <iprintf>

  do {} while (1);
 801a56a:	bf00      	nop
 801a56c:	bf00      	nop
 801a56e:	e7fd      	b.n	801a56c <ai_log_err+0x38>
 801a570:	08020558 	.word	0x08020558
 801a574:	0802058c 	.word	0x0802058c

0801a578 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 801a578:	b580      	push	{r7, lr}
 801a57a:	b086      	sub	sp, #24
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 801a580:	2200      	movs	r2, #0
 801a582:	6879      	ldr	r1, [r7, #4]
 801a584:	4828      	ldr	r0, [pc, #160]	@ (801a628 <ai_boostrap+0xb0>)
 801a586:	f000 f9df 	bl	801a948 <ai_network_create_and_init>
 801a58a:	4603      	mov	r3, r0
 801a58c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 801a58e:	7b3b      	ldrb	r3, [r7, #12]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d006      	beq.n	801a5a2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 801a594:	4925      	ldr	r1, [pc, #148]	@ (801a62c <ai_boostrap+0xb4>)
 801a596:	68f8      	ldr	r0, [r7, #12]
 801a598:	f7ff ffcc 	bl	801a534 <ai_log_err>
    return -1;
 801a59c:	f04f 33ff 	mov.w	r3, #4294967295
 801a5a0:	e03e      	b.n	801a620 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 801a5a2:	4b21      	ldr	r3, [pc, #132]	@ (801a628 <ai_boostrap+0xb0>)
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	2100      	movs	r1, #0
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f000 fa4b 	bl	801aa44 <ai_network_inputs_get>
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	4a1f      	ldr	r2, [pc, #124]	@ (801a630 <ai_boostrap+0xb8>)
 801a5b2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 801a5b4:	4b1c      	ldr	r3, [pc, #112]	@ (801a628 <ai_boostrap+0xb0>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	2100      	movs	r1, #0
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f000 fa5c 	bl	801aa78 <ai_network_outputs_get>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	4a1c      	ldr	r2, [pc, #112]	@ (801a634 <ai_boostrap+0xbc>)
 801a5c4:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	617b      	str	r3, [r7, #20]
 801a5ca:	e00f      	b.n	801a5ec <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 801a5cc:	4b18      	ldr	r3, [pc, #96]	@ (801a630 <ai_boostrap+0xb8>)
 801a5ce:	6819      	ldr	r1, [r3, #0]
 801a5d0:	697a      	ldr	r2, [r7, #20]
 801a5d2:	4613      	mov	r3, r2
 801a5d4:	00db      	lsls	r3, r3, #3
 801a5d6:	1a9b      	subs	r3, r3, r2
 801a5d8:	009b      	lsls	r3, r3, #2
 801a5da:	440b      	add	r3, r1
 801a5dc:	685a      	ldr	r2, [r3, #4]
 801a5de:	4916      	ldr	r1, [pc, #88]	@ (801a638 <ai_boostrap+0xc0>)
 801a5e0:	697b      	ldr	r3, [r7, #20]
 801a5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 801a5e6:	697b      	ldr	r3, [r7, #20]
 801a5e8:	3301      	adds	r3, #1
 801a5ea:	617b      	str	r3, [r7, #20]
 801a5ec:	697b      	ldr	r3, [r7, #20]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	ddec      	ble.n	801a5cc <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	613b      	str	r3, [r7, #16]
 801a5f6:	e00f      	b.n	801a618 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 801a5f8:	4b0e      	ldr	r3, [pc, #56]	@ (801a634 <ai_boostrap+0xbc>)
 801a5fa:	6819      	ldr	r1, [r3, #0]
 801a5fc:	693a      	ldr	r2, [r7, #16]
 801a5fe:	4613      	mov	r3, r2
 801a600:	00db      	lsls	r3, r3, #3
 801a602:	1a9b      	subs	r3, r3, r2
 801a604:	009b      	lsls	r3, r3, #2
 801a606:	440b      	add	r3, r1
 801a608:	685a      	ldr	r2, [r3, #4]
 801a60a:	490c      	ldr	r1, [pc, #48]	@ (801a63c <ai_boostrap+0xc4>)
 801a60c:	693b      	ldr	r3, [r7, #16]
 801a60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 801a612:	693b      	ldr	r3, [r7, #16]
 801a614:	3301      	adds	r3, #1
 801a616:	613b      	str	r3, [r7, #16]
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	ddec      	ble.n	801a5f8 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801a61e:	2300      	movs	r3, #0
}
 801a620:	4618      	mov	r0, r3
 801a622:	3718      	adds	r7, #24
 801a624:	46bd      	mov	sp, r7
 801a626:	bd80      	pop	{r7, pc}
 801a628:	200019f0 	.word	0x200019f0
 801a62c:	080205bc 	.word	0x080205bc
 801a630:	200019f4 	.word	0x200019f4
 801a634:	200019f8 	.word	0x200019f8
 801a638:	200019e8 	.word	0x200019e8
 801a63c:	200019ec 	.word	0x200019ec

0801a640 <ai_run>:

static int ai_run(void)
{
 801a640:	b580      	push	{r7, lr}
 801a642:	b082      	sub	sp, #8
 801a644:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 801a646:	4b0f      	ldr	r3, [pc, #60]	@ (801a684 <ai_run+0x44>)
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	4a0f      	ldr	r2, [pc, #60]	@ (801a688 <ai_run+0x48>)
 801a64c:	6811      	ldr	r1, [r2, #0]
 801a64e:	4a0f      	ldr	r2, [pc, #60]	@ (801a68c <ai_run+0x4c>)
 801a650:	6812      	ldr	r2, [r2, #0]
 801a652:	4618      	mov	r0, r3
 801a654:	f000 fa66 	bl	801ab24 <ai_network_run>
 801a658:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	2b01      	cmp	r3, #1
 801a65e:	d00c      	beq.n	801a67a <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 801a660:	4b08      	ldr	r3, [pc, #32]	@ (801a684 <ai_run+0x44>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	4618      	mov	r0, r3
 801a666:	f000 f94d 	bl	801a904 <ai_network_get_error>
 801a66a:	4603      	mov	r3, r0
 801a66c:	4908      	ldr	r1, [pc, #32]	@ (801a690 <ai_run+0x50>)
 801a66e:	4618      	mov	r0, r3
 801a670:	f7ff ff60 	bl	801a534 <ai_log_err>
        "ai_network_run");
    return -1;
 801a674:	f04f 33ff 	mov.w	r3, #4294967295
 801a678:	e000      	b.n	801a67c <ai_run+0x3c>
  }

  return 0;
 801a67a:	2300      	movs	r3, #0
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	3708      	adds	r7, #8
 801a680:	46bd      	mov	sp, r7
 801a682:	bd80      	pop	{r7, pc}
 801a684:	200019f0 	.word	0x200019f0
 801a688:	200019f4 	.word	0x200019f4
 801a68c:	200019f8 	.word	0x200019f8
 801a690:	080205d8 	.word	0x080205d8

0801a694 <acquire_and_process_data>:
//static ai_float in1[] = {833.415628,26.18213624,49.91950599}; // Expected out: 0
//static ai_float in2[] = {546.9205838,32.16373308,53.5156242}; // Expected out: 1
uint8_t i = 0;
/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 801a694:	b480      	push	{r7}
 801a696:	b083      	sub	sp, #12
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
//		} else if (i == 2) {
//			ai_input[0].data = AI_HANDLE_PTR(in2);
//			i = 0;
//		}
	// gather the sensors data in an array
	data_sensors[0] = 440.6303956;						// Soil Moisture Sensor
 801a69c:	4b0a      	ldr	r3, [pc, #40]	@ (801a6c8 <acquire_and_process_data+0x34>)
 801a69e:	4a0b      	ldr	r2, [pc, #44]	@ (801a6cc <acquire_and_process_data+0x38>)
 801a6a0:	601a      	str	r2, [r3, #0]
	data_sensors[1] = my_SHT40_Temp_Float;				// Temp Sensor
 801a6a2:	4b0b      	ldr	r3, [pc, #44]	@ (801a6d0 <acquire_and_process_data+0x3c>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	4a08      	ldr	r2, [pc, #32]	@ (801a6c8 <acquire_and_process_data+0x34>)
 801a6a8:	6053      	str	r3, [r2, #4]
	data_sensors[2] = my_SHT40_Humid_Float;				// Hum Sensor
 801a6aa:	4b0a      	ldr	r3, [pc, #40]	@ (801a6d4 <acquire_and_process_data+0x40>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	4a06      	ldr	r2, [pc, #24]	@ (801a6c8 <acquire_and_process_data+0x34>)
 801a6b0:	6093      	str	r3, [r2, #8]
	ai_input[0].data = AI_HANDLE_PTR(data_sensors);
 801a6b2:	4b09      	ldr	r3, [pc, #36]	@ (801a6d8 <acquire_and_process_data+0x44>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	4a04      	ldr	r2, [pc, #16]	@ (801a6c8 <acquire_and_process_data+0x34>)
 801a6b8:	605a      	str	r2, [r3, #4]
  return 0;
 801a6ba:	2300      	movs	r3, #0
}
 801a6bc:	4618      	mov	r0, r3
 801a6be:	370c      	adds	r7, #12
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	bc80      	pop	{r7}
 801a6c4:	4770      	bx	lr
 801a6c6:	bf00      	nop
 801a6c8:	200019d8 	.word	0x200019d8
 801a6cc:	43dc50b1 	.word	0x43dc50b1
 801a6d0:	20001b88 	.word	0x20001b88
 801a6d4:	20001b8c 	.word	0x20001b8c
 801a6d8:	200019f4 	.word	0x200019f4

0801a6dc <post_process>:

int post_process(ai_i8* data[])
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b084      	sub	sp, #16
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	float result = *((float*)data[0]);
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	60fb      	str	r3, [r7, #12]
	if (result > 0.5f)
 801a6ec:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 801a6f0:	68f8      	ldr	r0, [r7, #12]
 801a6f2:	f7e6 fad3 	bl	8000c9c <__aeabi_fcmpgt>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d003      	beq.n	801a704 <post_process+0x28>
	{
		result_nn = 1;
 801a6fc:	4b05      	ldr	r3, [pc, #20]	@ (801a714 <post_process+0x38>)
 801a6fe:	2201      	movs	r2, #1
 801a700:	701a      	strb	r2, [r3, #0]
 801a702:	e002      	b.n	801a70a <post_process+0x2e>
	}
	else
	{
		result_nn = 0;
 801a704:	4b03      	ldr	r3, [pc, #12]	@ (801a714 <post_process+0x38>)
 801a706:	2200      	movs	r2, #0
 801a708:	701a      	strb	r2, [r3, #0]
	}
  return 0;
 801a70a:	2300      	movs	r3, #0
}
 801a70c:	4618      	mov	r0, r3
 801a70e:	3710      	adds	r7, #16
 801a710:	46bd      	mov	sp, r7
 801a712:	bd80      	pop	{r7, pc}
 801a714:	200019e4 	.word	0x200019e4

0801a718 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  //printf("\r\nTEMPLATE - initialization\r\n");

  ai_boostrap(data_activations0);
 801a71c:	4802      	ldr	r0, [pc, #8]	@ (801a728 <MX_X_CUBE_AI_Init+0x10>)
 801a71e:	f7ff ff2b 	bl	801a578 <ai_boostrap>
    /* USER CODE END 5 */
}
 801a722:	bf00      	nop
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	200000ec 	.word	0x200000ec

0801a72c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 801a72c:	b580      	push	{r7, lr}
 801a72e:	b082      	sub	sp, #8
 801a730:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 801a732:	f04f 33ff 	mov.w	r3, #4294967295
 801a736:	607b      	str	r3, [r7, #4]

  //printf("TEMPLATE - run - main loop\r\n");

  if (network) {
 801a738:	4b13      	ldr	r3, [pc, #76]	@ (801a788 <MX_X_CUBE_AI_Process+0x5c>)
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d010      	beq.n	801a762 <MX_X_CUBE_AI_Process+0x36>

    //do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 801a740:	4812      	ldr	r0, [pc, #72]	@ (801a78c <MX_X_CUBE_AI_Process+0x60>)
 801a742:	f7ff ffa7 	bl	801a694 <acquire_and_process_data>
 801a746:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d102      	bne.n	801a754 <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 801a74e:	f7ff ff77 	bl	801a640 <ai_run>
 801a752:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d103      	bne.n	801a762 <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 801a75a:	480d      	ldr	r0, [pc, #52]	@ (801a790 <MX_X_CUBE_AI_Process+0x64>)
 801a75c:	f7ff ffbe 	bl	801a6dc <post_process>
 801a760:	6078      	str	r0, [r7, #4]
    //} while (res==0);
  }

  if (res) {
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d00a      	beq.n	801a77e <MX_X_CUBE_AI_Process+0x52>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 801a768:	2311      	movs	r3, #17
 801a76a:	703b      	strb	r3, [r7, #0]
 801a76c:	683b      	ldr	r3, [r7, #0]
 801a76e:	2210      	movs	r2, #16
 801a770:	f362 231f 	bfi	r3, r2, #8, #24
 801a774:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 801a776:	4907      	ldr	r1, [pc, #28]	@ (801a794 <MX_X_CUBE_AI_Process+0x68>)
 801a778:	6838      	ldr	r0, [r7, #0]
 801a77a:	f7ff fedb 	bl	801a534 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 801a77e:	bf00      	nop
 801a780:	3708      	adds	r7, #8
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}
 801a786:	bf00      	nop
 801a788:	200019f0 	.word	0x200019f0
 801a78c:	200019e8 	.word	0x200019e8
 801a790:	200019ec 	.word	0x200019ec
 801a794:	080205e8 	.word	0x080205e8

0801a798 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b082      	sub	sp, #8
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
 801a7a0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 801a7a2:	683a      	ldr	r2, [r7, #0]
 801a7a4:	2101      	movs	r1, #1
 801a7a6:	4820      	ldr	r0, [pc, #128]	@ (801a828 <network_configure_activations+0x90>)
 801a7a8:	f002 fe5a 	bl	801d460 <ai_platform_get_activations_map>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d02f      	beq.n	801a812 <network_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801a7b2:	4b1d      	ldr	r3, [pc, #116]	@ (801a828 <network_configure_activations+0x90>)
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	4a1d      	ldr	r2, [pc, #116]	@ (801a82c <network_configure_activations+0x94>)
 801a7b8:	6093      	str	r3, [r2, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801a7ba:	4b1b      	ldr	r3, [pc, #108]	@ (801a828 <network_configure_activations+0x90>)
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4a1b      	ldr	r2, [pc, #108]	@ (801a82c <network_configure_activations+0x94>)
 801a7c0:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 801a7c2:	4b19      	ldr	r3, [pc, #100]	@ (801a828 <network_configure_activations+0x90>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	330c      	adds	r3, #12
 801a7c8:	4a19      	ldr	r2, [pc, #100]	@ (801a830 <network_configure_activations+0x98>)
 801a7ca:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 801a7cc:	4b16      	ldr	r3, [pc, #88]	@ (801a828 <network_configure_activations+0x90>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	330c      	adds	r3, #12
 801a7d2:	4a17      	ldr	r2, [pc, #92]	@ (801a830 <network_configure_activations+0x98>)
 801a7d4:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 801a7d6:	4b14      	ldr	r3, [pc, #80]	@ (801a828 <network_configure_activations+0x90>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	330c      	adds	r3, #12
 801a7dc:	4a15      	ldr	r2, [pc, #84]	@ (801a834 <network_configure_activations+0x9c>)
 801a7de:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 801a7e0:	4b11      	ldr	r3, [pc, #68]	@ (801a828 <network_configure_activations+0x90>)
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	330c      	adds	r3, #12
 801a7e6:	4a13      	ldr	r2, [pc, #76]	@ (801a834 <network_configure_activations+0x9c>)
 801a7e8:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 801a7ea:	4b0f      	ldr	r3, [pc, #60]	@ (801a828 <network_configure_activations+0x90>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	4a12      	ldr	r2, [pc, #72]	@ (801a838 <network_configure_activations+0xa0>)
 801a7f0:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (801a828 <network_configure_activations+0x90>)
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	4a10      	ldr	r2, [pc, #64]	@ (801a838 <network_configure_activations+0xa0>)
 801a7f8:	60d3      	str	r3, [r2, #12]
    nl_2_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 801a7fa:	4b0b      	ldr	r3, [pc, #44]	@ (801a828 <network_configure_activations+0x90>)
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	3304      	adds	r3, #4
 801a800:	4a0e      	ldr	r2, [pc, #56]	@ (801a83c <network_configure_activations+0xa4>)
 801a802:	6093      	str	r3, [r2, #8]
    nl_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 801a804:	4b08      	ldr	r3, [pc, #32]	@ (801a828 <network_configure_activations+0x90>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	3304      	adds	r3, #4
 801a80a:	4a0c      	ldr	r2, [pc, #48]	@ (801a83c <network_configure_activations+0xa4>)
 801a80c:	60d3      	str	r3, [r2, #12]
    return true;
 801a80e:	2301      	movs	r3, #1
 801a810:	e005      	b.n	801a81e <network_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801a812:	2213      	movs	r2, #19
 801a814:	2130      	movs	r1, #48	@ 0x30
 801a816:	6878      	ldr	r0, [r7, #4]
 801a818:	f002 fea0 	bl	801d55c <ai_platform_network_set_error>
  return false;
 801a81c:	2300      	movs	r3, #0
}
 801a81e:	4618      	mov	r0, r3
 801a820:	3708      	adds	r7, #8
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
 801a826:	bf00      	nop
 801a828:	200019fc 	.word	0x200019fc
 801a82c:	200000f0 	.word	0x200000f0
 801a830:	20000100 	.word	0x20000100
 801a834:	20000110 	.word	0x20000110
 801a838:	20000120 	.word	0x20000120
 801a83c:	20000130 	.word	0x20000130

0801a840 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b082      	sub	sp, #8
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
 801a848:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 801a84a:	683a      	ldr	r2, [r7, #0]
 801a84c:	2101      	movs	r1, #1
 801a84e:	4828      	ldr	r0, [pc, #160]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a850:	f002 fdb6 	bl	801d3c0 <ai_platform_get_weights_map>
 801a854:	4603      	mov	r3, r0
 801a856:	2b00      	cmp	r3, #0
 801a858:	d03f      	beq.n	801a8da <network_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 801a85a:	4b26      	ldr	r3, [pc, #152]	@ (801a8f4 <network_configure_weights+0xb4>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a862:	4a24      	ldr	r2, [pc, #144]	@ (801a8f4 <network_configure_weights+0xb4>)
 801a864:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 801a866:	4b22      	ldr	r3, [pc, #136]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	4a22      	ldr	r2, [pc, #136]	@ (801a8f4 <network_configure_weights+0xb4>)
 801a86c:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 801a86e:	4b20      	ldr	r3, [pc, #128]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	4a20      	ldr	r2, [pc, #128]	@ (801a8f4 <network_configure_weights+0xb4>)
 801a874:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 801a876:	4b20      	ldr	r3, [pc, #128]	@ (801a8f8 <network_configure_weights+0xb8>)
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a87e:	4a1e      	ldr	r2, [pc, #120]	@ (801a8f8 <network_configure_weights+0xb8>)
 801a880:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 96);
 801a882:	4b1b      	ldr	r3, [pc, #108]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	3360      	adds	r3, #96	@ 0x60
 801a888:	4a1b      	ldr	r2, [pc, #108]	@ (801a8f8 <network_configure_weights+0xb8>)
 801a88a:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 96);
 801a88c:	4b18      	ldr	r3, [pc, #96]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	3360      	adds	r3, #96	@ 0x60
 801a892:	4a19      	ldr	r2, [pc, #100]	@ (801a8f8 <network_configure_weights+0xb8>)
 801a894:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 801a896:	4b19      	ldr	r3, [pc, #100]	@ (801a8fc <network_configure_weights+0xbc>)
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a89e:	4a17      	ldr	r2, [pc, #92]	@ (801a8fc <network_configure_weights+0xbc>)
 801a8a0:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 128);
 801a8a2:	4b13      	ldr	r3, [pc, #76]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	3380      	adds	r3, #128	@ 0x80
 801a8a8:	4a14      	ldr	r2, [pc, #80]	@ (801a8fc <network_configure_weights+0xbc>)
 801a8aa:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 128);
 801a8ac:	4b10      	ldr	r3, [pc, #64]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	3380      	adds	r3, #128	@ 0x80
 801a8b2:	4a12      	ldr	r2, [pc, #72]	@ (801a8fc <network_configure_weights+0xbc>)
 801a8b4:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 801a8b6:	4b12      	ldr	r3, [pc, #72]	@ (801a900 <network_configure_weights+0xc0>)
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a8be:	4a10      	ldr	r2, [pc, #64]	@ (801a900 <network_configure_weights+0xc0>)
 801a8c0:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 160);
 801a8c2:	4b0b      	ldr	r3, [pc, #44]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	33a0      	adds	r3, #160	@ 0xa0
 801a8c8:	4a0d      	ldr	r2, [pc, #52]	@ (801a900 <network_configure_weights+0xc0>)
 801a8ca:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 160);
 801a8cc:	4b08      	ldr	r3, [pc, #32]	@ (801a8f0 <network_configure_weights+0xb0>)
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	33a0      	adds	r3, #160	@ 0xa0
 801a8d2:	4a0b      	ldr	r2, [pc, #44]	@ (801a900 <network_configure_weights+0xc0>)
 801a8d4:	60d3      	str	r3, [r2, #12]
    return true;
 801a8d6:	2301      	movs	r3, #1
 801a8d8:	e005      	b.n	801a8e6 <network_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801a8da:	2212      	movs	r2, #18
 801a8dc:	2130      	movs	r1, #48	@ 0x30
 801a8de:	6878      	ldr	r0, [r7, #4]
 801a8e0:	f002 fe3c 	bl	801d55c <ai_platform_network_set_error>
  return false;
 801a8e4:	2300      	movs	r3, #0
}
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	3708      	adds	r7, #8
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}
 801a8ee:	bf00      	nop
 801a8f0:	20001a00 	.word	0x20001a00
 801a8f4:	20000140 	.word	0x20000140
 801a8f8:	20000150 	.word	0x20000150
 801a8fc:	20000160 	.word	0x20000160
 801a900:	20000170 	.word	0x20000170

0801a904 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b082      	sub	sp, #8
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801a90c:	6878      	ldr	r0, [r7, #4]
 801a90e:	f002 fe19 	bl	801d544 <ai_platform_network_get_error>
 801a912:	4603      	mov	r3, r0
}
 801a914:	4618      	mov	r0, r3
 801a916:	3708      	adds	r7, #8
 801a918:	46bd      	mov	sp, r7
 801a91a:	bd80      	pop	{r7, pc}

0801a91c <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af02      	add	r7, sp, #8
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801a926:	2300      	movs	r3, #0
 801a928:	9301      	str	r3, [sp, #4]
 801a92a:	2305      	movs	r3, #5
 801a92c:	9300      	str	r3, [sp, #0]
 801a92e:	2301      	movs	r3, #1
 801a930:	4a04      	ldr	r2, [pc, #16]	@ (801a944 <ai_network_create+0x28>)
 801a932:	6839      	ldr	r1, [r7, #0]
 801a934:	6878      	ldr	r0, [r7, #4]
 801a936:	f002 ff01 	bl	801d73c <ai_platform_network_create>
 801a93a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801a93c:	4618      	mov	r0, r3
 801a93e:	3708      	adds	r7, #8
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}
 801a944:	20000594 	.word	0x20000594

0801a948 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b094      	sub	sp, #80	@ 0x50
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	60f8      	str	r0, [r7, #12]
 801a950:	60b9      	str	r1, [r7, #8]
 801a952:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 801a954:	2100      	movs	r1, #0
 801a956:	68f8      	ldr	r0, [r7, #12]
 801a958:	f7ff ffe0 	bl	801a91c <ai_network_create>
 801a95c:	4603      	mov	r3, r0
 801a95e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 801a960:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801a964:	2b00      	cmp	r3, #0
 801a966:	d001      	beq.n	801a96c <ai_network_create_and_init+0x24>
    return err;
 801a968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a96a:	e067      	b.n	801aa3c <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 801a96c:	f107 0310 	add.w	r3, r7, #16
 801a970:	4618      	mov	r0, r3
 801a972:	f000 f8e7 	bl	801ab44 <ai_network_data_params_get>
 801a976:	4603      	mov	r3, r0
 801a978:	f083 0301 	eor.w	r3, r3, #1
 801a97c:	b2db      	uxtb	r3, r3
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d008      	beq.n	801a994 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	4618      	mov	r0, r3
 801a988:	f7ff ffbc 	bl	801a904 <ai_network_get_error>
 801a98c:	4603      	mov	r3, r0
 801a98e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 801a990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a992:	e053      	b.n	801aa3c <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801a994:	2300      	movs	r3, #0
 801a996:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801a99a:	e012      	b.n	801a9c2 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801a99c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 801a9a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a9a4:	009b      	lsls	r3, r3, #2
 801a9a6:	68ba      	ldr	r2, [r7, #8]
 801a9a8:	4413      	add	r3, r2
 801a9aa:	681a      	ldr	r2, [r3, #0]
 801a9ac:	f107 0310 	add.w	r3, r7, #16
 801a9b0:	330c      	adds	r3, #12
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f002 fcf4 	bl	801d3a0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801a9b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a9bc:	3301      	adds	r3, #1
 801a9be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801a9c2:	68bb      	ldr	r3, [r7, #8]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d004      	beq.n	801a9d2 <ai_network_create_and_init+0x8a>
 801a9c8:	8bfb      	ldrh	r3, [r7, #30]
 801a9ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801a9ce:	429a      	cmp	r2, r3
 801a9d0:	d3e4      	bcc.n	801a99c <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801a9d8:	e012      	b.n	801aa00 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 801a9da:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 801a9de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801a9e2:	009b      	lsls	r3, r3, #2
 801a9e4:	687a      	ldr	r2, [r7, #4]
 801a9e6:	4413      	add	r3, r2
 801a9e8:	681a      	ldr	r2, [r3, #0]
 801a9ea:	f107 0310 	add.w	r3, r7, #16
 801a9ee:	3304      	adds	r3, #4
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f002 fcd5 	bl	801d3a0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801a9f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801a9fa:	3301      	adds	r3, #1
 801a9fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d004      	beq.n	801aa10 <ai_network_create_and_init+0xc8>
 801aa06:	8afb      	ldrh	r3, [r7, #22]
 801aa08:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 801aa0c:	429a      	cmp	r2, r3
 801aa0e:	d3e4      	bcc.n	801a9da <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	f107 0210 	add.w	r2, r7, #16
 801aa18:	4611      	mov	r1, r2
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f000 f846 	bl	801aaac <ai_network_init>
 801aa20:	4603      	mov	r3, r0
 801aa22:	f083 0301 	eor.w	r3, r3, #1
 801aa26:	b2db      	uxtb	r3, r3
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d006      	beq.n	801aa3a <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7ff ff67 	bl	801a904 <ai_network_get_error>
 801aa36:	4603      	mov	r3, r0
 801aa38:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 801aa3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	3750      	adds	r7, #80	@ 0x50
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bd80      	pop	{r7, pc}

0801aa44 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d104      	bne.n	801aa5e <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801aa54:	4b06      	ldr	r3, [pc, #24]	@ (801aa70 <ai_network_inputs_get+0x2c>)
 801aa56:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	4a06      	ldr	r2, [pc, #24]	@ (801aa74 <ai_network_inputs_get+0x30>)
 801aa5c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801aa5e:	6839      	ldr	r1, [r7, #0]
 801aa60:	6878      	ldr	r0, [r7, #4]
 801aa62:	f002 fd81 	bl	801d568 <ai_platform_inputs_get>
 801aa66:	4603      	mov	r3, r0
}
 801aa68:	4618      	mov	r0, r3
 801aa6a:	3708      	adds	r7, #8
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}
 801aa70:	20000594 	.word	0x20000594
 801aa74:	a1c00100 	.word	0xa1c00100

0801aa78 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b082      	sub	sp, #8
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
 801aa80:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d104      	bne.n	801aa92 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801aa88:	4b06      	ldr	r3, [pc, #24]	@ (801aaa4 <ai_network_outputs_get+0x2c>)
 801aa8a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	4a06      	ldr	r2, [pc, #24]	@ (801aaa8 <ai_network_outputs_get+0x30>)
 801aa90:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801aa92:	6839      	ldr	r1, [r7, #0]
 801aa94:	6878      	ldr	r0, [r7, #4]
 801aa96:	f002 fddd 	bl	801d654 <ai_platform_outputs_get>
 801aa9a:	4603      	mov	r3, r0
}
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	3708      	adds	r7, #8
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	bd80      	pop	{r7, pc}
 801aaa4:	20000594 	.word	0x20000594
 801aaa8:	a1c00100 	.word	0xa1c00100

0801aaac <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b084      	sub	sp, #16
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 801aab6:	6839      	ldr	r1, [r7, #0]
 801aab8:	6878      	ldr	r0, [r7, #4]
 801aaba:	f002 fe81 	bl	801d7c0 <ai_platform_network_init>
 801aabe:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 801aac0:	2301      	movs	r3, #1
 801aac2:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d101      	bne.n	801aace <ai_network_init+0x22>
 801aaca:	2300      	movs	r3, #0
 801aacc:	e026      	b.n	801ab1c <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 801aace:	6839      	ldr	r1, [r7, #0]
 801aad0:	68f8      	ldr	r0, [r7, #12]
 801aad2:	f7ff feb5 	bl	801a840 <network_configure_weights>
 801aad6:	4603      	mov	r3, r0
 801aad8:	461a      	mov	r2, r3
 801aada:	7afb      	ldrb	r3, [r7, #11]
 801aadc:	4013      	ands	r3, r2
 801aade:	2b00      	cmp	r3, #0
 801aae0:	bf14      	ite	ne
 801aae2:	2301      	movne	r3, #1
 801aae4:	2300      	moveq	r3, #0
 801aae6:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 801aae8:	6839      	ldr	r1, [r7, #0]
 801aaea:	68f8      	ldr	r0, [r7, #12]
 801aaec:	f7ff fe54 	bl	801a798 <network_configure_activations>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	461a      	mov	r2, r3
 801aaf4:	7afb      	ldrb	r3, [r7, #11]
 801aaf6:	4013      	ands	r3, r2
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	bf14      	ite	ne
 801aafc:	2301      	movne	r3, #1
 801aafe:	2300      	moveq	r3, #0
 801ab00:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801ab02:	6878      	ldr	r0, [r7, #4]
 801ab04:	f002 ff2a 	bl	801d95c <ai_platform_network_post_init>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	461a      	mov	r2, r3
 801ab0c:	7afb      	ldrb	r3, [r7, #11]
 801ab0e:	4013      	ands	r3, r2
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	bf14      	ite	ne
 801ab14:	2301      	movne	r3, #1
 801ab16:	2300      	moveq	r3, #0
 801ab18:	72fb      	strb	r3, [r7, #11]

  return ok;
 801ab1a:	7afb      	ldrb	r3, [r7, #11]
}
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	3710      	adds	r7, #16
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bd80      	pop	{r7, pc}

0801ab24 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b084      	sub	sp, #16
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	60f8      	str	r0, [r7, #12]
 801ab2c:	60b9      	str	r1, [r7, #8]
 801ab2e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801ab30:	687a      	ldr	r2, [r7, #4]
 801ab32:	68b9      	ldr	r1, [r7, #8]
 801ab34:	68f8      	ldr	r0, [r7, #12]
 801ab36:	f002 ff41 	bl	801d9bc <ai_platform_network_process>
 801ab3a:	4603      	mov	r3, r0
}
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	3710      	adds	r7, #16
 801ab40:	46bd      	mov	sp, r7
 801ab42:	bd80      	pop	{r7, pc}

0801ab44 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b086      	sub	sp, #24
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d101      	bne.n	801ab56 <ai_network_data_params_get+0x12>
 801ab52:	2300      	movs	r3, #0
 801ab54:	e016      	b.n	801ab84 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801ab56:	4a0d      	ldr	r2, [pc, #52]	@ (801ab8c <ai_network_data_params_get+0x48>)
 801ab58:	f107 0310 	add.w	r3, r7, #16
 801ab5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab60:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801ab64:	4a0a      	ldr	r2, [pc, #40]	@ (801ab90 <ai_network_data_params_get+0x4c>)
 801ab66:	f107 0308 	add.w	r3, r7, #8
 801ab6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab6e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801ab72:	f107 0210 	add.w	r2, r7, #16
 801ab76:	f107 0308 	add.w	r3, r7, #8
 801ab7a:	4619      	mov	r1, r3
 801ab7c:	6878      	ldr	r0, [r7, #4]
 801ab7e:	f002 fcc1 	bl	801d504 <ai_platform_bind_network_params>
 801ab82:	4603      	mov	r3, r0
}
 801ab84:	4618      	mov	r0, r3
 801ab86:	3718      	adds	r7, #24
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}
 801ab8c:	0802061c 	.word	0x0802061c
 801ab90:	08020624 	.word	0x08020624

0801ab94 <LL_APB1_GRP1_EnableClock>:
{
 801ab94:	b480      	push	{r7}
 801ab96:	b085      	sub	sp, #20
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801ab9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801aba0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801aba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	4313      	orrs	r3, r2
 801abaa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801abac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801abb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	4013      	ands	r3, r2
 801abb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801abb8:	68fb      	ldr	r3, [r7, #12]
}
 801abba:	bf00      	nop
 801abbc:	3714      	adds	r7, #20
 801abbe:	46bd      	mov	sp, r7
 801abc0:	bc80      	pop	{r7}
 801abc2:	4770      	bx	lr

0801abc4 <LL_APB1_GRP2_EnableClock>:
{
 801abc4:	b480      	push	{r7}
 801abc6:	b085      	sub	sp, #20
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 801abcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801abd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801abd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	4313      	orrs	r3, r2
 801abda:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801abdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801abe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	4013      	ands	r3, r2
 801abe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801abe8:	68fb      	ldr	r3, [r7, #12]
}
 801abea:	bf00      	nop
 801abec:	3714      	adds	r7, #20
 801abee:	46bd      	mov	sp, r7
 801abf0:	bc80      	pop	{r7}
 801abf2:	4770      	bx	lr

0801abf4 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 801abf8:	4b13      	ldr	r3, [pc, #76]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801abfa:	4a14      	ldr	r2, [pc, #80]	@ (801ac4c <MX_LPTIM1_Init+0x58>)
 801abfc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 801abfe:	4b12      	ldr	r3, [pc, #72]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac00:	2200      	movs	r2, #0
 801ac02:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 801ac04:	4b10      	ldr	r3, [pc, #64]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac06:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 801ac0a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 801ac0c:	4b0e      	ldr	r3, [pc, #56]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ac12:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 801ac14:	4b0c      	ldr	r3, [pc, #48]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac16:	2200      	movs	r2, #0
 801ac18:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 801ac1a:	4b0b      	ldr	r3, [pc, #44]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 801ac20:	4b09      	ldr	r3, [pc, #36]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac22:	2200      	movs	r2, #0
 801ac24:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 801ac26:	4b08      	ldr	r3, [pc, #32]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac28:	2200      	movs	r2, #0
 801ac2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 801ac2c:	4b06      	ldr	r3, [pc, #24]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac2e:	2200      	movs	r2, #0
 801ac30:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 801ac32:	4805      	ldr	r0, [pc, #20]	@ (801ac48 <MX_LPTIM1_Init+0x54>)
 801ac34:	f001 feb4 	bl	801c9a0 <HAL_LPTIM_Init>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d001      	beq.n	801ac42 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 801ac3e:	f7e6 fac3 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 801ac42:	bf00      	nop
 801ac44:	bd80      	pop	{r7, pc}
 801ac46:	bf00      	nop
 801ac48:	20001adc 	.word	0x20001adc
 801ac4c:	40007c00 	.word	0x40007c00

0801ac50 <HAL_LPTIM_MspInit>:

}


void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b090      	sub	sp, #64	@ 0x40
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ac58:	f107 0308 	add.w	r3, r7, #8
 801ac5c:	2238      	movs	r2, #56	@ 0x38
 801ac5e:	2100      	movs	r1, #0
 801ac60:	4618      	mov	r0, r3
 801ac62:	f004 fb2c 	bl	801f2be <memset>
  if(lptimHandle->Instance==LPTIM1)
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	4a21      	ldr	r2, [pc, #132]	@ (801acf0 <HAL_LPTIM_MspInit+0xa0>)
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d11c      	bne.n	801acaa <HAL_LPTIM_MspInit+0x5a>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 801ac70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801ac74:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 801ac76:	f04f 130c 	mov.w	r3, #786444	@ 0xc000c
 801ac7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801ac7c:	f107 0308 	add.w	r3, r7, #8
 801ac80:	4618      	mov	r0, r3
 801ac82:	f7ea ffcd 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 801ac86:	4603      	mov	r3, r0
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d001      	beq.n	801ac90 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 801ac8c:	f7e6 fa9c 	bl	80011c8 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 801ac90:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801ac94:	f7ff ff7e 	bl	801ab94 <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 801ac98:	2200      	movs	r2, #0
 801ac9a:	2100      	movs	r1, #0
 801ac9c:	2027      	movs	r0, #39	@ 0x27
 801ac9e:	f7e7 ff2c 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 801aca2:	2027      	movs	r0, #39	@ 0x27
 801aca4:	f7e7 ff43 	bl	8002b2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM2_MspInit 1 */

    /* USER CODE END LPTIM2_MspInit 1 */
    }

}
 801aca8:	e01e      	b.n	801ace8 <HAL_LPTIM_MspInit+0x98>
  else if(lptimHandle->Instance==LPTIM2)
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	4a11      	ldr	r2, [pc, #68]	@ (801acf4 <HAL_LPTIM_MspInit+0xa4>)
 801acb0:	4293      	cmp	r3, r2
 801acb2:	d119      	bne.n	801ace8 <HAL_LPTIM_MspInit+0x98>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 801acb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801acb8:	60bb      	str	r3, [r7, #8]
	  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_HSI;
 801acba:	4b0f      	ldr	r3, [pc, #60]	@ (801acf8 <HAL_LPTIM_MspInit+0xa8>)
 801acbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801acbe:	f107 0308 	add.w	r3, r7, #8
 801acc2:	4618      	mov	r0, r3
 801acc4:	f7ea ffac 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>
 801acc8:	4603      	mov	r3, r0
 801acca:	2b00      	cmp	r3, #0
 801accc:	d001      	beq.n	801acd2 <HAL_LPTIM_MspInit+0x82>
		  Error_Handler();
 801acce:	f7e6 fa7b 	bl	80011c8 <Error_Handler>
	  __HAL_RCC_LPTIM2_CLK_ENABLE();
 801acd2:	2020      	movs	r0, #32
 801acd4:	f7ff ff76 	bl	801abc4 <LL_APB1_GRP2_EnableClock>
	  HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 801acd8:	2200      	movs	r2, #0
 801acda:	2100      	movs	r1, #0
 801acdc:	2028      	movs	r0, #40	@ 0x28
 801acde:	f7e7 ff0c 	bl	8002afa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 801ace2:	2028      	movs	r0, #40	@ 0x28
 801ace4:	f7e7 ff23 	bl	8002b2e <HAL_NVIC_EnableIRQ>
}
 801ace8:	bf00      	nop
 801acea:	3740      	adds	r7, #64	@ 0x40
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}
 801acf0:	40007c00 	.word	0x40007c00
 801acf4:	40009400 	.word	0x40009400
 801acf8:	00300020 	.word	0x00300020

0801acfc <LL_PWR_SetPowerMode>:
{
 801acfc:	b480      	push	{r7}
 801acfe:	b083      	sub	sp, #12
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 801ad04:	4b06      	ldr	r3, [pc, #24]	@ (801ad20 <LL_PWR_SetPowerMode+0x24>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	f023 0207 	bic.w	r2, r3, #7
 801ad0c:	4904      	ldr	r1, [pc, #16]	@ (801ad20 <LL_PWR_SetPowerMode+0x24>)
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	4313      	orrs	r3, r2
 801ad12:	600b      	str	r3, [r1, #0]
}
 801ad14:	bf00      	nop
 801ad16:	370c      	adds	r7, #12
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	bc80      	pop	{r7}
 801ad1c:	4770      	bx	lr
 801ad1e:	bf00      	nop
 801ad20:	58000400 	.word	0x58000400

0801ad24 <LL_C2_PWR_SetPowerMode>:
{
 801ad24:	b480      	push	{r7}
 801ad26:	b083      	sub	sp, #12
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 801ad2c:	4b07      	ldr	r3, [pc, #28]	@ (801ad4c <LL_C2_PWR_SetPowerMode+0x28>)
 801ad2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ad32:	f023 0207 	bic.w	r2, r3, #7
 801ad36:	4905      	ldr	r1, [pc, #20]	@ (801ad4c <LL_C2_PWR_SetPowerMode+0x28>)
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	4313      	orrs	r3, r2
 801ad3c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 801ad40:	bf00      	nop
 801ad42:	370c      	adds	r7, #12
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bc80      	pop	{r7}
 801ad48:	4770      	bx	lr
 801ad4a:	bf00      	nop
 801ad4c:	58000400 	.word	0x58000400

0801ad50 <LL_PWR_IsActiveFlag_C1SB>:
{
 801ad50:	b480      	push	{r7}
 801ad52:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 801ad54:	4b07      	ldr	r3, [pc, #28]	@ (801ad74 <LL_PWR_IsActiveFlag_C1SB+0x24>)
 801ad56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ad5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ad5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ad62:	d101      	bne.n	801ad68 <LL_PWR_IsActiveFlag_C1SB+0x18>
 801ad64:	2301      	movs	r3, #1
 801ad66:	e000      	b.n	801ad6a <LL_PWR_IsActiveFlag_C1SB+0x1a>
 801ad68:	2300      	movs	r3, #0
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	bc80      	pop	{r7}
 801ad70:	4770      	bx	lr
 801ad72:	bf00      	nop
 801ad74:	58000400 	.word	0x58000400

0801ad78 <LL_PWR_IsActiveFlag_C2SB>:
{
 801ad78:	b480      	push	{r7}
 801ad7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 801ad7c:	4b07      	ldr	r3, [pc, #28]	@ (801ad9c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 801ad7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ad82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ad86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ad8a:	d101      	bne.n	801ad90 <LL_PWR_IsActiveFlag_C2SB+0x18>
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	e000      	b.n	801ad92 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 801ad90:	2300      	movs	r3, #0
}
 801ad92:	4618      	mov	r0, r3
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bc80      	pop	{r7}
 801ad98:	4770      	bx	lr
 801ad9a:	bf00      	nop
 801ad9c:	58000400 	.word	0x58000400

0801ada0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
{
 801ada0:	b480      	push	{r7}
 801ada2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 801ada4:	4b03      	ldr	r3, [pc, #12]	@ (801adb4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 801ada6:	2201      	movs	r2, #1
 801ada8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801adac:	bf00      	nop
 801adae:	46bd      	mov	sp, r7
 801adb0:	bc80      	pop	{r7}
 801adb2:	4770      	bx	lr
 801adb4:	58000400 	.word	0x58000400

0801adb8 <LL_PWR_ClearFlag_C2STOP_C2STB>:
  * @brief  Clear standby and stop flags for CPU2
  * @rmtoll EXTSCR       C2CSSF        LL_PWR_ClearFlag_C2STOP_C2STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C2STOP_C2STB(void)
{
 801adb8:	b480      	push	{r7}
 801adba:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C2CSSF);
 801adbc:	4b03      	ldr	r3, [pc, #12]	@ (801adcc <LL_PWR_ClearFlag_C2STOP_C2STB+0x14>)
 801adbe:	2202      	movs	r2, #2
 801adc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801adc4:	bf00      	nop
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bc80      	pop	{r7}
 801adca:	4770      	bx	lr
 801adcc:	58000400 	.word	0x58000400

0801add0 <LL_RCC_LSE_SetDriveCapability>:
{
 801add0:	b480      	push	{r7}
 801add2:	b083      	sub	sp, #12
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 801add8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801addc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ade0:	f023 0218 	bic.w	r2, r3, #24
 801ade4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	4313      	orrs	r3, r2
 801adec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 801adf0:	bf00      	nop
 801adf2:	370c      	adds	r7, #12
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bc80      	pop	{r7}
 801adf8:	4770      	bx	lr

0801adfa <LL_RCC_SetClkAfterWakeFromStop>:
{
 801adfa:	b480      	push	{r7}
 801adfc:	b083      	sub	sp, #12
 801adfe:	af00      	add	r7, sp, #0
 801ae00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 801ae02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ae06:	689b      	ldr	r3, [r3, #8]
 801ae08:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801ae0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	4313      	orrs	r3, r2
 801ae14:	608b      	str	r3, [r1, #8]
}
 801ae16:	bf00      	nop
 801ae18:	370c      	adds	r7, #12
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	bc80      	pop	{r7}
 801ae1e:	4770      	bx	lr

0801ae20 <LL_AHB2_GRP1_EnableClock>:
{
 801ae20:	b480      	push	{r7}
 801ae22:	b085      	sub	sp, #20
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801ae28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ae2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ae2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	4313      	orrs	r3, r2
 801ae36:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801ae38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ae3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	4013      	ands	r3, r2
 801ae42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801ae44:	68fb      	ldr	r3, [r7, #12]
}
 801ae46:	bf00      	nop
 801ae48:	3714      	adds	r7, #20
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	bc80      	pop	{r7}
 801ae4e:	4770      	bx	lr

0801ae50 <LL_AHB2_GRP1_DisableClock>:
{
 801ae50:	b480      	push	{r7}
 801ae52:	b083      	sub	sp, #12
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 801ae58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ae5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	43db      	mvns	r3, r3
 801ae62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ae66:	4013      	ands	r3, r2
 801ae68:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 801ae6a:	bf00      	nop
 801ae6c:	370c      	adds	r7, #12
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bc80      	pop	{r7}
 801ae72:	4770      	bx	lr

0801ae74 <LL_APB1_GRP1_EnableClock>:
{
 801ae74:	b480      	push	{r7}
 801ae76:	b085      	sub	sp, #20
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801ae7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ae80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801ae82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	4313      	orrs	r3, r2
 801ae8a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801ae8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ae90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	4013      	ands	r3, r2
 801ae96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801ae98:	68fb      	ldr	r3, [r7, #12]
}
 801ae9a:	bf00      	nop
 801ae9c:	3714      	adds	r7, #20
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bc80      	pop	{r7}
 801aea2:	4770      	bx	lr

0801aea4 <LL_APB1_GRP1_DisableClock>:
{
 801aea4:	b480      	push	{r7}
 801aea6:	b083      	sub	sp, #12
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 801aeac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801aeb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	43db      	mvns	r3, r3
 801aeb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801aeba:	4013      	ands	r3, r2
 801aebc:	658b      	str	r3, [r1, #88]	@ 0x58
}
 801aebe:	bf00      	nop
 801aec0:	370c      	adds	r7, #12
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bc80      	pop	{r7}
 801aec6:	4770      	bx	lr

0801aec8 <HAL_PWR_PVDCallback>:
extern RTC_HandleTypeDef hrtc;

/* CallBack Section Begin */

void HAL_PWR_PVDCallback(void)	// PVD CallBack
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	af00      	add	r7, sp, #0
	if(my_SystemClock_Config_done == 0)											// Check if the PS Detection has been executed
 801aecc:	4b8e      	ldr	r3, [pc, #568]	@ (801b108 <HAL_PWR_PVDCallback+0x240>)
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d103      	bne.n	801aedc <HAL_PWR_PVDCallback+0x14>
	{
		my_Next_State = RTS;
 801aed4:	4b8d      	ldr	r3, [pc, #564]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801aed6:	2202      	movs	r2, #2
 801aed8:	701a      	strb	r2, [r3, #0]
			break;
		}

		}
	}
}
 801aeda:	e113      	b.n	801b104 <HAL_PWR_PVDCallback+0x23c>
		switch(my_Current_State)
 801aedc:	4b8c      	ldr	r3, [pc, #560]	@ (801b110 <HAL_PWR_PVDCallback+0x248>)
 801aede:	781b      	ldrb	r3, [r3, #0]
 801aee0:	3b03      	subs	r3, #3
 801aee2:	2b04      	cmp	r3, #4
 801aee4:	f200 8102 	bhi.w	801b0ec <HAL_PWR_PVDCallback+0x224>
 801aee8:	a201      	add	r2, pc, #4	@ (adr r2, 801aef0 <HAL_PWR_PVDCallback+0x28>)
 801aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aeee:	bf00      	nop
 801aef0:	0801af05 	.word	0x0801af05
 801aef4:	0801af99 	.word	0x0801af99
 801aef8:	0801b07f 	.word	0x0801b07f
 801aefc:	0801b0b3 	.word	0x0801b0b3
 801af00:	0801b007 	.word	0x0801b007
			My_EHS_to_EMS_Timer(STOP_TIMER);									// Stop EHS_to_EMS Timer
 801af04:	2001      	movs	r0, #1
 801af06:	f000 fd55 	bl	801b9b4 <My_EHS_to_EMS_Timer>
			switch(my_Next_State)
 801af0a:	4b80      	ldr	r3, [pc, #512]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801af0c:	781b      	ldrb	r3, [r3, #0]
 801af0e:	3b02      	subs	r3, #2
 801af10:	2b07      	cmp	r3, #7
 801af12:	d836      	bhi.n	801af82 <HAL_PWR_PVDCallback+0xba>
 801af14:	a201      	add	r2, pc, #4	@ (adr r2, 801af1c <HAL_PWR_PVDCallback+0x54>)
 801af16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af1a:	bf00      	nop
 801af1c:	0801af3d 	.word	0x0801af3d
 801af20:	0801af83 	.word	0x0801af83
 801af24:	0801af61 	.word	0x0801af61
 801af28:	0801af83 	.word	0x0801af83
 801af2c:	0801af83 	.word	0x0801af83
 801af30:	0801af6b 	.word	0x0801af6b
 801af34:	0801af83 	.word	0x0801af83
 801af38:	0801af77 	.word	0x0801af77
				if (my_SubghzApp_Init_done == 1) 								// Check if Radio Initialization is done
 801af3c:	4b75      	ldr	r3, [pc, #468]	@ (801b114 <HAL_PWR_PVDCallback+0x24c>)
 801af3e:	781b      	ldrb	r3, [r3, #0]
 801af40:	2b01      	cmp	r3, #1
 801af42:	d127      	bne.n	801af94 <HAL_PWR_PVDCallback+0xcc>
					if (my_RTS_cnt == 0)
 801af44:	4b74      	ldr	r3, [pc, #464]	@ (801b118 <HAL_PWR_PVDCallback+0x250>)
 801af46:	781b      	ldrb	r3, [r3, #0]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d104      	bne.n	801af56 <HAL_PWR_PVDCallback+0x8e>
						My_Trise_Meas();										// Measure the Trise Time
 801af4c:	f001 fab8 	bl	801c4c0 <My_Trise_Meas>
						My_SMW_Timer(STOP_TIMER);								// Stop the SMW Timer
 801af50:	2001      	movs	r0, #1
 801af52:	f000 fcef 	bl	801b934 <My_SMW_Timer>
					UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801af56:	2100      	movs	r1, #0
 801af58:	2010      	movs	r0, #16
 801af5a:	f7fe fca7 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801af5e:	e019      	b.n	801af94 <HAL_PWR_PVDCallback+0xcc>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0);  	// My_ESF -- ESF = Energy Storage Function
 801af60:	2100      	movs	r1, #0
 801af62:	2040      	movs	r0, #64	@ 0x40
 801af64:	f7fe fca2 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801af68:	e015      	b.n	801af96 <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801af6a:	2100      	movs	r1, #0
 801af6c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801af70:	f7fe fc9c 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801af74:	e00f      	b.n	801af96 <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_AIF), CFG_SEQ_Prio_0);  	// My_AIF -- AIF = Artificial Intelligence Function
 801af76:	2100      	movs	r1, #0
 801af78:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801af7c:	f7fe fc96 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801af80:	e009      	b.n	801af96 <HAL_PWR_PVDCallback+0xce>
				my_Next_State = SMS;											// Set Next State as SMS
 801af82:	4b62      	ldr	r3, [pc, #392]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801af84:	2207      	movs	r2, #7
 801af86:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801af88:	2100      	movs	r1, #0
 801af8a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801af8e:	f7fe fc8d 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801af92:	e000      	b.n	801af96 <HAL_PWR_PVDCallback+0xce>
				break;
 801af94:	bf00      	nop
			break;
 801af96:	e0b5      	b.n	801b104 <HAL_PWR_PVDCallback+0x23c>
			switch (my_Cmode)
 801af98:	4b60      	ldr	r3, [pc, #384]	@ (801b11c <HAL_PWR_PVDCallback+0x254>)
 801af9a:	781b      	ldrb	r3, [r3, #0]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d002      	beq.n	801afa6 <HAL_PWR_PVDCallback+0xde>
 801afa0:	2b02      	cmp	r3, #2
 801afa2:	d00b      	beq.n	801afbc <HAL_PWR_PVDCallback+0xf4>
 801afa4:	e022      	b.n	801afec <HAL_PWR_PVDCallback+0x124>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801afa6:	4b5a      	ldr	r3, [pc, #360]	@ (801b110 <HAL_PWR_PVDCallback+0x248>)
 801afa8:	2203      	movs	r2, #3
 801afaa:	701a      	strb	r2, [r3, #0]
				My_DCM_to_CCM_Timer(STOP_TIMER);  								// Stop the DCM to CCM Timer
 801afac:	2001      	movs	r0, #1
 801afae:	f000 fd23 	bl	801b9f8 <My_DCM_to_CCM_Timer>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF - Back to Harvest
 801afb2:	2100      	movs	r1, #0
 801afb4:	2020      	movs	r0, #32
 801afb6:	f7fe fc79 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801afba:	e023      	b.n	801b004 <HAL_PWR_PVDCallback+0x13c>
				if (my_Check_ESD == 0)
 801afbc:	4b58      	ldr	r3, [pc, #352]	@ (801b120 <HAL_PWR_PVDCallback+0x258>)
 801afbe:	781b      	ldrb	r3, [r3, #0]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d102      	bne.n	801afca <HAL_PWR_PVDCallback+0x102>
					my_Cmode = EOC;  											// End of Charge Mode has been met
 801afc4:	4b55      	ldr	r3, [pc, #340]	@ (801b11c <HAL_PWR_PVDCallback+0x254>)
 801afc6:	2202      	movs	r2, #2
 801afc8:	701a      	strb	r2, [r3, #0]
				My_ESW_CCM_Timer(STOP_TIMER);  									// Stop the Energy Storage Window Timer
 801afca:	2001      	movs	r0, #1
 801afcc:	f000 fc8c 	bl	801b8e8 <My_ESW_CCM_Timer>
				My_EHS_to_EMS_Timer(STOP_TIMER);  								// Stop the EHS to EMS Timer
 801afd0:	2001      	movs	r0, #1
 801afd2:	f000 fcef 	bl	801b9b4 <My_EHS_to_EMS_Timer>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801afd6:	4b4e      	ldr	r3, [pc, #312]	@ (801b110 <HAL_PWR_PVDCallback+0x248>)
 801afd8:	2203      	movs	r2, #3
 801afda:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as RTS:	 	ESS --> EHS --> SMS
 801afdc:	4b4b      	ldr	r3, [pc, #300]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801afde:	2207      	movs	r2, #7
 801afe0:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  	// My_EHF - Back to Harvest
 801afe2:	2100      	movs	r1, #0
 801afe4:	2020      	movs	r0, #32
 801afe6:	f7fe fc61 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801afea:	e00b      	b.n	801b004 <HAL_PWR_PVDCallback+0x13c>
				my_Current_State = EHS;  										// Set Current State as EHS
 801afec:	4b48      	ldr	r3, [pc, #288]	@ (801b110 <HAL_PWR_PVDCallback+0x248>)
 801afee:	2203      	movs	r2, #3
 801aff0:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as SMS
 801aff2:	4b46      	ldr	r3, [pc, #280]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801aff4:	2207      	movs	r2, #7
 801aff6:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801aff8:	2100      	movs	r1, #0
 801affa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801affe:	f7fe fc55 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801b002:	bf00      	nop
			break;
 801b004:	e07e      	b.n	801b104 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801b006:	2000      	movs	r0, #0
 801b008:	f001 fb56 	bl	801c6b8 <My_VDD_to_VDDS2_Switch>
			if (!((my_Cmode == DCM) && (my_Check_ESD == 0)))
 801b00c:	4b43      	ldr	r3, [pc, #268]	@ (801b11c <HAL_PWR_PVDCallback+0x254>)
 801b00e:	781b      	ldrb	r3, [r3, #0]
 801b010:	2b00      	cmp	r3, #0
 801b012:	d103      	bne.n	801b01c <HAL_PWR_PVDCallback+0x154>
 801b014:	4b42      	ldr	r3, [pc, #264]	@ (801b120 <HAL_PWR_PVDCallback+0x258>)
 801b016:	781b      	ldrb	r3, [r3, #0]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d002      	beq.n	801b022 <HAL_PWR_PVDCallback+0x15a>
				Radio.Sleep();													// Switch the Radio Off
 801b01c:	4b41      	ldr	r3, [pc, #260]	@ (801b124 <HAL_PWR_PVDCallback+0x25c>)
 801b01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b020:	4798      	blx	r3
			my_Current_State = EHS;												// Set Current State as EHS
 801b022:	4b3b      	ldr	r3, [pc, #236]	@ (801b110 <HAL_PWR_PVDCallback+0x248>)
 801b024:	2203      	movs	r2, #3
 801b026:	701a      	strb	r2, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801b028:	4b3c      	ldr	r3, [pc, #240]	@ (801b11c <HAL_PWR_PVDCallback+0x254>)
 801b02a:	781b      	ldrb	r3, [r3, #0]
 801b02c:	2b02      	cmp	r3, #2
 801b02e:	d107      	bne.n	801b040 <HAL_PWR_PVDCallback+0x178>
 801b030:	483d      	ldr	r0, [pc, #244]	@ (801b128 <HAL_PWR_PVDCallback+0x260>)
 801b032:	f001 fee5 	bl	801ce00 <HAL_LPTIM_ReadCounter>
 801b036:	4603      	mov	r3, r0
 801b038:	f642 0210 	movw	r2, #10256	@ 0x2810
 801b03c:	4293      	cmp	r3, r2
 801b03e:	d80f      	bhi.n	801b060 <HAL_PWR_PVDCallback+0x198>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b040:	4b36      	ldr	r3, [pc, #216]	@ (801b11c <HAL_PWR_PVDCallback+0x254>)
 801b042:	781b      	ldrb	r3, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801b044:	2b02      	cmp	r3, #2
 801b046:	d007      	beq.n	801b058 <HAL_PWR_PVDCallback+0x190>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b048:	4837      	ldr	r0, [pc, #220]	@ (801b128 <HAL_PWR_PVDCallback+0x260>)
 801b04a:	f001 fed9 	bl	801ce00 <HAL_LPTIM_ReadCounter>
 801b04e:	4603      	mov	r3, r0
 801b050:	f241 4208 	movw	r2, #5128	@ 0x1408
 801b054:	4293      	cmp	r3, r2
 801b056:	d803      	bhi.n	801b060 <HAL_PWR_PVDCallback+0x198>
					(my_SMS_cnt > SMS_MAX))
 801b058:	4b34      	ldr	r3, [pc, #208]	@ (801b12c <HAL_PWR_PVDCallback+0x264>)
 801b05a:	781b      	ldrb	r3, [r3, #0]
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b05c:	2b05      	cmp	r3, #5
 801b05e:	d909      	bls.n	801b074 <HAL_PWR_PVDCallback+0x1ac>
				my_Trise_time_start = HAL_LPTIM_ReadCounter(&hlptim1);  		// Measure Starting Trise Time
 801b060:	4831      	ldr	r0, [pc, #196]	@ (801b128 <HAL_PWR_PVDCallback+0x260>)
 801b062:	f001 fecd 	bl	801ce00 <HAL_LPTIM_ReadCounter>
 801b066:	4603      	mov	r3, r0
 801b068:	b29a      	uxth	r2, r3
 801b06a:	4b31      	ldr	r3, [pc, #196]	@ (801b130 <HAL_PWR_PVDCallback+0x268>)
 801b06c:	801a      	strh	r2, [r3, #0]
				my_Next_State = AIS;  											// SMS --> AIS
 801b06e:	4b27      	ldr	r3, [pc, #156]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801b070:	2209      	movs	r2, #9
 801b072:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 			// My_EHF
 801b074:	2100      	movs	r1, #0
 801b076:	2020      	movs	r0, #32
 801b078:	f7fe fc18 	bl	80198ac <UTIL_SEQ_SetTask>
			break;
 801b07c:	e042      	b.n	801b104 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);									// Open the Switch between Vdd and ES
 801b07e:	2000      	movs	r0, #0
 801b080:	f001 fa9c 	bl	801c5bc <My_VDD_to_ES_Switch>
			my_Cmode = EOC;  													// The Storage Element is in EOC since the PVD has been triggered with the VEOC threshold while in EMS.
 801b084:	4b25      	ldr	r3, [pc, #148]	@ (801b11c <HAL_PWR_PVDCallback+0x254>)
 801b086:	2202      	movs	r2, #2
 801b088:	701a      	strb	r2, [r3, #0]
			My_EMS_to_EDS_Timer(STOP_TIMER);  									// Stop the EMS to EDS Timer
 801b08a:	2001      	movs	r0, #1
 801b08c:	f000 fcd6 	bl	801ba3c <My_EMS_to_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);  									// Stop the EMS to SMS Timer
 801b090:	2001      	movs	r0, #1
 801b092:	f000 fcf5 	bl	801ba80 <My_EMS_to_SMS_Timer>
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801b096:	4b27      	ldr	r3, [pc, #156]	@ (801b134 <HAL_PWR_PVDCallback+0x26c>)
 801b098:	2200      	movs	r2, #0
 801b09a:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;  											// Set Current State as EHS: 	EMS --> EHS
 801b09c:	4b1c      	ldr	r3, [pc, #112]	@ (801b110 <HAL_PWR_PVDCallback+0x248>)
 801b09e:	2203      	movs	r2, #3
 801b0a0:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  												// Set Next State as RTS: 		EMS --> EHS --> RTS
 801b0a2:	4b1a      	ldr	r3, [pc, #104]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801b0a4:	2202      	movs	r2, #2
 801b0a6:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  		// My_EHF - Back to Harvest
 801b0a8:	2100      	movs	r1, #0
 801b0aa:	2020      	movs	r0, #32
 801b0ac:	f7fe fbfe 	bl	80198ac <UTIL_SEQ_SetTask>
			break;
 801b0b0:	e028      	b.n	801b104 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);  									// Open the Switch connected to the Storage element
 801b0b2:	2000      	movs	r0, #0
 801b0b4:	f001 fa82 	bl	801c5bc <My_VDD_to_ES_Switch>
			my_Cmode = DCM;  													// Assume that the Energy Storage Device (ESD) is discharged
 801b0b8:	4b18      	ldr	r3, [pc, #96]	@ (801b11c <HAL_PWR_PVDCallback+0x254>)
 801b0ba:	2200      	movs	r2, #0
 801b0bc:	701a      	strb	r2, [r3, #0]
			My_EDS_Timer(STOP_TIMER);  											// Stop the EDS Timer
 801b0be:	2001      	movs	r0, #1
 801b0c0:	f000 fc5e 	bl	801b980 <My_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);									// Stop the EMS_to_SMS Timer
 801b0c4:	2001      	movs	r0, #1
 801b0c6:	f000 fcdb 	bl	801ba80 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 0;
 801b0ca:	4b1b      	ldr	r3, [pc, #108]	@ (801b138 <HAL_PWR_PVDCallback+0x270>)
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	701a      	strb	r2, [r3, #0]
			my_rtc_B_ems_flag = 0;
 801b0d0:	4b1a      	ldr	r3, [pc, #104]	@ (801b13c <HAL_PWR_PVDCallback+0x274>)
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	701a      	strb	r2, [r3, #0]
			my_RTS_cnt = 0;  													// Resets the transmissions counter
 801b0d6:	4b10      	ldr	r3, [pc, #64]	@ (801b118 <HAL_PWR_PVDCallback+0x250>)
 801b0d8:	2200      	movs	r2, #0
 801b0da:	701a      	strb	r2, [r3, #0]
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801b0dc:	4b15      	ldr	r3, [pc, #84]	@ (801b134 <HAL_PWR_PVDCallback+0x26c>)
 801b0de:	2200      	movs	r2, #0
 801b0e0:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);  		// SendTxData
 801b0e2:	2100      	movs	r1, #0
 801b0e4:	2010      	movs	r0, #16
 801b0e6:	f7fe fbe1 	bl	80198ac <UTIL_SEQ_SetTask>
			break;
 801b0ea:	e00b      	b.n	801b104 <HAL_PWR_PVDCallback+0x23c>
			my_Current_State = EHS;  											// Set Current State as EHS
 801b0ec:	4b08      	ldr	r3, [pc, #32]	@ (801b110 <HAL_PWR_PVDCallback+0x248>)
 801b0ee:	2203      	movs	r2, #3
 801b0f0:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;												// Set Next State as SMS
 801b0f2:	4b06      	ldr	r3, [pc, #24]	@ (801b10c <HAL_PWR_PVDCallback+0x244>)
 801b0f4:	2207      	movs	r2, #7
 801b0f6:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  		// My_SMF -- SMF = Sensors Measurement Function
 801b0f8:	2100      	movs	r1, #0
 801b0fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b0fe:	f7fe fbd5 	bl	80198ac <UTIL_SEQ_SetTask>
			break;
 801b102:	bf00      	nop
}
 801b104:	bf00      	nop
 801b106:	bd80      	pop	{r7, pc}
 801b108:	200006e8 	.word	0x200006e8
 801b10c:	20000638 	.word	0x20000638
 801b110:	20001b85 	.word	0x20001b85
 801b114:	20000843 	.word	0x20000843
 801b118:	20001b56 	.word	0x20001b56
 801b11c:	20001b86 	.word	0x20001b86
 801b120:	20001b5c 	.word	0x20001b5c
 801b124:	08020bac 	.word	0x08020bac
 801b128:	20001adc 	.word	0x20001adc
 801b12c:	20001b58 	.word	0x20001b58
 801b130:	20001b5e 	.word	0x20001b5e
 801b134:	20001b59 	.word	0x20001b59
 801b138:	20001b5a 	.word	0x20001b5a
 801b13c:	20001b5b 	.word	0x20001b5b

0801b140 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)	// LPTIM Callback
{
 801b140:	b580      	push	{r7, lr}
 801b142:	b082      	sub	sp, #8
 801b144:	af00      	add	r7, sp, #0
 801b146:	6078      	str	r0, [r7, #4]
	if(hlptim->Instance == LPTIM1)
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	4a36      	ldr	r2, [pc, #216]	@ (801b228 <HAL_LPTIM_AutoReloadMatchCallback+0xe8>)
 801b14e:	4293      	cmp	r3, r2
 801b150:	d166      	bne.n	801b220 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
	{
		switch(my_Current_State)
 801b152:	4b36      	ldr	r3, [pc, #216]	@ (801b22c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b154:	781b      	ldrb	r3, [r3, #0]
 801b156:	3b03      	subs	r3, #3
 801b158:	2b03      	cmp	r3, #3
 801b15a:	d854      	bhi.n	801b206 <HAL_LPTIM_AutoReloadMatchCallback+0xc6>
 801b15c:	a201      	add	r2, pc, #4	@ (adr r2, 801b164 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 801b15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b162:	bf00      	nop
 801b164:	0801b175 	.word	0x0801b175
 801b168:	0801b1b3 	.word	0x0801b1b3
 801b16c:	0801b1dd 	.word	0x0801b1dd
 801b170:	0801b1eb 	.word	0x0801b1eb
		{
		case EHS: 															// EHS = Energy Harvesting State
		{
			switch (my_Next_State)
 801b174:	4b2e      	ldr	r3, [pc, #184]	@ (801b230 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b176:	781b      	ldrb	r3, [r3, #0]
 801b178:	2b04      	cmp	r3, #4
 801b17a:	d10d      	bne.n	801b198 <HAL_LPTIM_AutoReloadMatchCallback+0x58>
			{
			case ESS:
			{

#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS; 										// 	ESS --> SMS
 801b17c:	4b2c      	ldr	r3, [pc, #176]	@ (801b230 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b17e:	2207      	movs	r2, #7
 801b180:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS; 										// ESS -->  RTS
#endif

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801b182:	2001      	movs	r0, #1
 801b184:	f000 fc38 	bl	801b9f8 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);								// Stop ESW Timer
 801b188:	2001      	movs	r0, #1
 801b18a:	f000 fbad 	bl	801b8e8 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801b18e:	2100      	movs	r1, #0
 801b190:	2020      	movs	r0, #32
 801b192:	f7fe fb8b 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801b196:	e00b      	b.n	801b1b0 <HAL_LPTIM_AutoReloadMatchCallback+0x70>
			}

			default:
			{
				my_Current_State = EHS;  									// Set Current State as EHS
 801b198:	4b24      	ldr	r3, [pc, #144]	@ (801b22c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b19a:	2203      	movs	r2, #3
 801b19c:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;										// Set Next State as SMS
 801b19e:	4b24      	ldr	r3, [pc, #144]	@ (801b230 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b1a0:	2207      	movs	r2, #7
 801b1a2:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801b1a4:	2100      	movs	r1, #0
 801b1a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b1aa:	f7fe fb7f 	bl	80198ac <UTIL_SEQ_SetTask>
				break;
 801b1ae:	bf00      	nop
			}
			}

			break;
 801b1b0:	e036      	b.n	801b220 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case ESS:															// ESS = Energy Storage State
		{
			if (my_Cmode != DCM)
 801b1b2:	4b20      	ldr	r3, [pc, #128]	@ (801b234 <HAL_LPTIM_AutoReloadMatchCallback+0xf4>)
 801b1b4:	781b      	ldrb	r3, [r3, #0]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d031      	beq.n	801b21e <HAL_LPTIM_AutoReloadMatchCallback+0xde>
			{
#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS;										// Set Next State as SMS: ESS --> EHS --> SMS
 801b1ba:	4b1d      	ldr	r3, [pc, #116]	@ (801b230 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b1bc:	2207      	movs	r2, #7
 801b1be:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;										// Set Next State as RTS: ESS --> EHS --> RTS
#endif

				my_Current_State = EHS;										// Set Current State as EHS: ESS --> EHS
 801b1c0:	4b1a      	ldr	r3, [pc, #104]	@ (801b22c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b1c2:	2203      	movs	r2, #3
 801b1c4:	701a      	strb	r2, [r3, #0]

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801b1c6:	2001      	movs	r0, #1
 801b1c8:	f000 fc16 	bl	801b9f8 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);									// Stop ESW Timer
 801b1cc:	2001      	movs	r0, #1
 801b1ce:	f000 fb8b 	bl	801b8e8 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801b1d2:	2100      	movs	r1, #0
 801b1d4:	2020      	movs	r0, #32
 801b1d6:	f7fe fb69 	bl	80198ac <UTIL_SEQ_SetTask>
			}
			break;
 801b1da:	e020      	b.n	801b21e <HAL_LPTIM_AutoReloadMatchCallback+0xde>
		}

		case EMS:															// EMS = Energy Missing State
		{
			My_EDS_Timer(STOP_TIMER); 										// Stop the Energy Detection Timer
 801b1dc:	2001      	movs	r0, #1
 801b1de:	f000 fbcf 	bl	801b980 <My_EDS_Timer>
			my_rm_failure_flag = 1; 										// Resistance Measurement in EMS State has failed because the LPTIM1 Interrupt has been triggered earlier than the COMP Interrupt
 801b1e2:	4b15      	ldr	r3, [pc, #84]	@ (801b238 <HAL_LPTIM_AutoReloadMatchCallback+0xf8>)
 801b1e4:	2201      	movs	r2, #1
 801b1e6:	701a      	strb	r2, [r3, #0]
			break;
 801b1e8:	e01a      	b.n	801b220 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case EDS:															// EDS = Energy Detection State
		{
			My_EMS_to_EDS_Timer(START_TIMER); 								// Start the Timer for the Energy Presence Check (EDC)
 801b1ea:	2000      	movs	r0, #0
 801b1ec:	f000 fc26 	bl	801ba3c <My_EMS_to_EDS_Timer>
			My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the switch Between Vdd and ES Start Supplying from the Energy Storage Device (ESD)
 801b1f0:	2001      	movs	r0, #1
 801b1f2:	f001 f9e3 	bl	801c5bc <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
			My_VDD_to_VDDS2_Switch(Switch_OPEN);							// unBias the Sensors: Open the switch between VDD and VDDS2
#endif

			my_Current_State = EMS; 										// Set Current State as EMS: EDS --> EMS
 801b1f6:	4b0d      	ldr	r3, [pc, #52]	@ (801b22c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b1f8:	2205      	movs	r2, #5
 801b1fa:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF -- Back to Harvest
 801b1fc:	2100      	movs	r1, #0
 801b1fe:	2020      	movs	r0, #32
 801b200:	f7fe fb54 	bl	80198ac <UTIL_SEQ_SetTask>
			break;
 801b204:	e00c      	b.n	801b220 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		default:
		{
			my_Current_State = EHS;  										// Set Current State as EHS
 801b206:	4b09      	ldr	r3, [pc, #36]	@ (801b22c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b208:	2203      	movs	r2, #3
 801b20a:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;											// Set Next State as SMS
 801b20c:	4b08      	ldr	r3, [pc, #32]	@ (801b230 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b20e:	2207      	movs	r2, #7
 801b210:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b212:	2100      	movs	r1, #0
 801b214:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b218:	f7fe fb48 	bl	80198ac <UTIL_SEQ_SetTask>
			break;
 801b21c:	e000      	b.n	801b220 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
			break;
 801b21e:	bf00      	nop
		}
		}
	}
}
 801b220:	bf00      	nop
 801b222:	3708      	adds	r7, #8
 801b224:	46bd      	mov	sp, r7
 801b226:	bd80      	pop	{r7, pc}
 801b228:	40007c00 	.word	0x40007c00
 801b22c:	20001b85 	.word	0x20001b85
 801b230:	20000638 	.word	0x20000638
 801b234:	20001b86 	.word	0x20001b86
 801b238:	20001b64 	.word	0x20001b64

0801b23c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)			// RTC Alarm A CallBack
{
 801b23c:	b580      	push	{r7, lr}
 801b23e:	b082      	sub	sp, #8
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]

	switch(my_Current_State)
 801b244:	4b11      	ldr	r3, [pc, #68]	@ (801b28c <HAL_RTC_AlarmAEventCallback+0x50>)
 801b246:	781b      	ldrb	r3, [r3, #0]
 801b248:	2b05      	cmp	r3, #5
 801b24a:	d002      	beq.n	801b252 <HAL_RTC_AlarmAEventCallback+0x16>
 801b24c:	2b07      	cmp	r3, #7
 801b24e:	d00e      	beq.n	801b26e <HAL_RTC_AlarmAEventCallback+0x32>
	default:
	{
#if MY_TX_OTAA
		UTIL_TIMER_IRQ_Handler();
#endif
		break;
 801b250:	e018      	b.n	801b284 <HAL_RTC_AlarmAEventCallback+0x48>
		My_EMS_to_SMS_Timer(STOP_TIMER);							// Stop EMS to SMS Timer
 801b252:	2001      	movs	r0, #1
 801b254:	f000 fc14 	bl	801ba80 <My_EMS_to_SMS_Timer>
		my_rtc_A_ems_flag = 0;
 801b258:	4b0d      	ldr	r3, [pc, #52]	@ (801b290 <HAL_RTC_AlarmAEventCallback+0x54>)
 801b25a:	2200      	movs	r2, #0
 801b25c:	701a      	strb	r2, [r3, #0]
		my_Current_State = EMS;										// Set Current State as EMS
 801b25e:	4b0b      	ldr	r3, [pc, #44]	@ (801b28c <HAL_RTC_AlarmAEventCallback+0x50>)
 801b260:	2205      	movs	r2, #5
 801b262:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801b264:	2100      	movs	r1, #0
 801b266:	2020      	movs	r0, #32
 801b268:	f7fe fb20 	bl	80198ac <UTIL_SEQ_SetTask>
		break;
 801b26c:	e00a      	b.n	801b284 <HAL_RTC_AlarmAEventCallback+0x48>
		My_VDD_to_VDDS2_Switch(Switch_OPEN);						// unBias the Sensors: Open the switch between VDD and VDDS2
 801b26e:	2000      	movs	r0, #0
 801b270:	f001 fa22 	bl	801c6b8 <My_VDD_to_VDDS2_Switch>
		my_Current_State = EHS;										// Set Current State as EHS
 801b274:	4b05      	ldr	r3, [pc, #20]	@ (801b28c <HAL_RTC_AlarmAEventCallback+0x50>)
 801b276:	2203      	movs	r2, #3
 801b278:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801b27a:	2100      	movs	r1, #0
 801b27c:	2020      	movs	r0, #32
 801b27e:	f7fe fb15 	bl	80198ac <UTIL_SEQ_SetTask>
		break;
 801b282:	bf00      	nop
	}
	}
}
 801b284:	bf00      	nop
 801b286:	3708      	adds	r7, #8
 801b288:	46bd      	mov	sp, r7
 801b28a:	bd80      	pop	{r7, pc}
 801b28c:	20001b85 	.word	0x20001b85
 801b290:	20001b5a 	.word	0x20001b5a

0801b294 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)	// RTC Alarm B CallBack
{
 801b294:	b580      	push	{r7, lr}
 801b296:	b082      	sub	sp, #8
 801b298:	af00      	add	r7, sp, #0
 801b29a:	6078      	str	r0, [r7, #4]
	switch (my_Current_State)
 801b29c:	4b3e      	ldr	r3, [pc, #248]	@ (801b398 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b29e:	781b      	ldrb	r3, [r3, #0]
 801b2a0:	2b05      	cmp	r3, #5
 801b2a2:	d04e      	beq.n	801b342 <HAL_RTCEx_AlarmBEventCallback+0xae>
 801b2a4:	2b05      	cmp	r3, #5
 801b2a6:	dc67      	bgt.n	801b378 <HAL_RTCEx_AlarmBEventCallback+0xe4>
 801b2a8:	2b03      	cmp	r3, #3
 801b2aa:	d034      	beq.n	801b316 <HAL_RTCEx_AlarmBEventCallback+0x82>
 801b2ac:	2b04      	cmp	r3, #4
 801b2ae:	d163      	bne.n	801b378 <HAL_RTCEx_AlarmBEventCallback+0xe4>
		/* The Time Measured by the RTC Alarm B Timer has gone beyond T_DCM_CCM
		 * The system switches from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM)
		 */

	{
		My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);						// Configures PVD at the Highest Voltage and Normal Mode
 801b2b0:	2100      	movs	r1, #0
 801b2b2:	200c      	movs	r0, #12
 801b2b4:	f000 fee6 	bl	801c084 <My_Set_PVD>
		My_HAL_Delay(100);												// Add Delay to settle PVD
 801b2b8:	2064      	movs	r0, #100	@ 0x64
 801b2ba:	f001 fa45 	bl	801c748 <My_HAL_Delay>

		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)						// If VDD is > VPS_CHECK and Internal Reference is Ready
 801b2be:	4b37      	ldr	r3, [pc, #220]	@ (801b39c <HAL_RTCEx_AlarmBEventCallback+0x108>)
 801b2c0:	695b      	ldr	r3, [r3, #20]
 801b2c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d111      	bne.n	801b2ee <HAL_RTCEx_AlarmBEventCallback+0x5a>
		{
			my_Check_ESD = 1;
 801b2ca:	4b35      	ldr	r3, [pc, #212]	@ (801b3a0 <HAL_RTCEx_AlarmBEventCallback+0x10c>)
 801b2cc:	2201      	movs	r2, #1
 801b2ce:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN);							// Open the VDD to ES Switch
 801b2d0:	2000      	movs	r0, #0
 801b2d2:	f001 f973 	bl	801c5bc <My_VDD_to_ES_Switch>
			my_Current_State = SMS;										// Set Current State as SMS
 801b2d6:	4b30      	ldr	r3, [pc, #192]	@ (801b398 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b2d8:	2207      	movs	r2, #7
 801b2da:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;										// Set Next State as SMS
 801b2dc:	4b31      	ldr	r3, [pc, #196]	@ (801b3a4 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801b2de:	2207      	movs	r2, #7
 801b2e0:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0); 	// My_SMF = Sensors Measurement Function
 801b2e2:	2100      	movs	r1, #0
 801b2e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b2e8:	f7fe fae0 	bl	80198ac <UTIL_SEQ_SetTask>
 801b2ec:	e00f      	b.n	801b30e <HAL_RTCEx_AlarmBEventCallback+0x7a>
		}
		else
		{
			my_Cmode = CCM;												// Switch to Continuous Charge Mode
 801b2ee:	4b2e      	ldr	r3, [pc, #184]	@ (801b3a8 <HAL_RTCEx_AlarmBEventCallback+0x114>)
 801b2f0:	2201      	movs	r2, #1
 801b2f2:	701a      	strb	r2, [r3, #0]
			My_ESW_DCM_Timer(STOP_TIMER);								// Stop ESW DCM Timer
 801b2f4:	2001      	movs	r0, #1
 801b2f6:	f000 fad1 	bl	801b89c <My_ESW_DCM_Timer>
			My_ESW_CCM_Timer(START_TIMER);								// Start ESW CCM Timer
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	f000 faf4 	bl	801b8e8 <My_ESW_CCM_Timer>

			my_Current_State = ESS;										// System keeps Staying in Energy Storage State (ESS)
 801b300:	4b25      	ldr	r3, [pc, #148]	@ (801b398 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b302:	2204      	movs	r2, #4
 801b304:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0); 	// My_ESF = Energy Storage Function
 801b306:	2100      	movs	r1, #0
 801b308:	2040      	movs	r0, #64	@ 0x40
 801b30a:	f7fe facf 	bl	80198ac <UTIL_SEQ_SetTask>
		}

		My_DCM_to_CCM_Timer(STOP_TIMER);								// Stop DCM to CCM Timer
 801b30e:	2001      	movs	r0, #1
 801b310:	f000 fb72 	bl	801b9f8 <My_DCM_to_CCM_Timer>

		break;
 801b314:	e03c      	b.n	801b390 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/* If RTC ALARM B is triggered during EHS: EHS --> EMS to manage Energy absence*/
	case EHS: 														// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(STOP_TIMER); 							// Stop EHS_to_EMS Timer
 801b316:	2001      	movs	r0, #1
 801b318:	f000 fb4c 	bl	801b9b4 <My_EHS_to_EMS_Timer>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Stop RTC A Alarm
 801b31c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b320:	6878      	ldr	r0, [r7, #4]
 801b322:	f7eb f8a9 	bl	8006478 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801b326:	4b21      	ldr	r3, [pc, #132]	@ (801b3ac <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801b328:	2200      	movs	r2, #0
 801b32a:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801b32c:	4b20      	ldr	r3, [pc, #128]	@ (801b3b0 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801b32e:	2200      	movs	r2, #0
 801b330:	701a      	strb	r2, [r3, #0]

		my_Current_State = EMS;										// Set Current State as EMS: EHS --> EMS
 801b332:	4b19      	ldr	r3, [pc, #100]	@ (801b398 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b334:	2205      	movs	r2, #5
 801b336:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);  // My_EHF -- Back to Harvest
 801b338:	2100      	movs	r1, #0
 801b33a:	2020      	movs	r0, #32
 801b33c:	f7fe fab6 	bl	80198ac <UTIL_SEQ_SetTask>
		break;
 801b340:	e026      	b.n	801b390 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/*If the Alarm B has been Triggered during the EMS a EDS is performed */
	case EMS: 														// EMS = Energy missing State
	{
		My_VDD_to_ES_Switch(Switch_OPEN);							// Open The Switch Beteween Vdd and ES
 801b342:	2000      	movs	r0, #0
 801b344:	f001 f93a 	bl	801c5bc <My_VDD_to_ES_Switch>

		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Deactivate Alarm A
 801b348:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b34c:	6878      	ldr	r0, [r7, #4]
 801b34e:	f7eb f893 	bl	8006478 <HAL_RTC_DeactivateAlarm>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);					// Deactivate Alarm B
 801b352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b356:	6878      	ldr	r0, [r7, #4]
 801b358:	f7eb f88e 	bl	8006478 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801b35c:	4b13      	ldr	r3, [pc, #76]	@ (801b3ac <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801b35e:	2200      	movs	r2, #0
 801b360:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801b362:	4b13      	ldr	r3, [pc, #76]	@ (801b3b0 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801b364:	2200      	movs	r2, #0
 801b366:	701a      	strb	r2, [r3, #0]

		my_Current_State = EDS; 									// Set Current State as EDS: EMS --> EDS
 801b368:	4b0b      	ldr	r3, [pc, #44]	@ (801b398 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b36a:	2206      	movs	r2, #6
 801b36c:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF
 801b36e:	2100      	movs	r1, #0
 801b370:	2020      	movs	r0, #32
 801b372:	f7fe fa9b 	bl	80198ac <UTIL_SEQ_SetTask>
		break;
 801b376:	e00b      	b.n	801b390 <HAL_RTCEx_AlarmBEventCallback+0xfc>

	default:
	{

#if MY_TX_ABP
		my_Current_State = EHS;  									// Set Current State as EHS
 801b378:	4b07      	ldr	r3, [pc, #28]	@ (801b398 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b37a:	2203      	movs	r2, #3
 801b37c:	701a      	strb	r2, [r3, #0]
		my_Next_State = SMS;										// Set Next State as SMS
 801b37e:	4b09      	ldr	r3, [pc, #36]	@ (801b3a4 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801b380:	2207      	movs	r2, #7
 801b382:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801b384:	2100      	movs	r1, #0
 801b386:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b38a:	f7fe fa8f 	bl	80198ac <UTIL_SEQ_SetTask>
#endif
		break;
 801b38e:	bf00      	nop
	}

	}
}
 801b390:	bf00      	nop
 801b392:	3708      	adds	r7, #8
 801b394:	46bd      	mov	sp, r7
 801b396:	bd80      	pop	{r7, pc}
 801b398:	20001b85 	.word	0x20001b85
 801b39c:	58000400 	.word	0x58000400
 801b3a0:	20001b5c 	.word	0x20001b5c
 801b3a4:	20000638 	.word	0x20000638
 801b3a8:	20001b86 	.word	0x20001b86
 801b3ac:	20001b5b 	.word	0x20001b5b
 801b3b0:	20001b5a 	.word	0x20001b5a

0801b3b4 <My_RTC_Init>:

/* CallBack Section End */
/*my rtc init*/
void My_RTC_Init(void)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b092      	sub	sp, #72	@ 0x48
 801b3b8:	af00      	add	r7, sp, #0
#if MY_RTC_INIT
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801b3ba:	202a      	movs	r0, #42	@ 0x2a
 801b3bc:	f7e7 fbc5 	bl	8002b4a <HAL_NVIC_DisableIRQ>

	RTC_TimeTypeDef sTime = {0};
 801b3c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b3c4:	2200      	movs	r2, #0
 801b3c6:	601a      	str	r2, [r3, #0]
 801b3c8:	605a      	str	r2, [r3, #4]
 801b3ca:	609a      	str	r2, [r3, #8]
 801b3cc:	60da      	str	r2, [r3, #12]
 801b3ce:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	633b      	str	r3, [r7, #48]	@ 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 801b3d4:	1d3b      	adds	r3, r7, #4
 801b3d6:	222c      	movs	r2, #44	@ 0x2c
 801b3d8:	2100      	movs	r1, #0
 801b3da:	4618      	mov	r0, r3
 801b3dc:	f003 ff6f 	bl	801f2be <memset>
#define CFG_RTC_SYNCH_PRESCALER     (DIVR( LSE_VALUE, (CFG_RTC_ASYNCH_PRESCALER+1) ) - 1 )
	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 801b3e0:	4b3f      	ldr	r3, [pc, #252]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b3e2:	4a40      	ldr	r2, [pc, #256]	@ (801b4e4 <My_RTC_Init+0x130>)
 801b3e4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801b3e6:	4b3e      	ldr	r3, [pc, #248]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 801b3ec:	4b3c      	ldr	r3, [pc, #240]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b3ee:	220f      	movs	r2, #15
 801b3f0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 801b3f2:	4b3b      	ldr	r3, [pc, #236]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b3f4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801b3f8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801b3fa:	4b39      	ldr	r3, [pc, #228]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b3fc:	2200      	movs	r2, #0
 801b3fe:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801b400:	4b37      	ldr	r3, [pc, #220]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b402:	2200      	movs	r2, #0
 801b404:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801b406:	4b36      	ldr	r3, [pc, #216]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b408:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801b40c:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801b40e:	4b34      	ldr	r3, [pc, #208]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b410:	2200      	movs	r2, #0
 801b412:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801b414:	4832      	ldr	r0, [pc, #200]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b416:	f7ea fd1d 	bl	8005e54 <HAL_RTC_Init>
 801b41a:	4603      	mov	r3, r0
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d001      	beq.n	801b424 <My_RTC_Init+0x70>
	{
		Error_Handler();
 801b420:	f7e5 fed2 	bl	80011c8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 801b424:	2300      	movs	r3, #0
 801b426:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	sTime.Minutes = 0;
 801b42a:	2300      	movs	r3, #0
 801b42c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	sTime.Seconds = 0;
 801b430:	2300      	movs	r3, #0
 801b432:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	sTime.SubSeconds = 0x0;
 801b436:	2300      	movs	r3, #0
 801b438:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801b43a:	2300      	movs	r3, #0
 801b43c:	643b      	str	r3, [r7, #64]	@ 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801b43e:	2300      	movs	r3, #0
 801b440:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 801b442:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b446:	2200      	movs	r2, #0
 801b448:	4619      	mov	r1, r3
 801b44a:	4825      	ldr	r0, [pc, #148]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b44c:	f7ea fd84 	bl	8005f58 <HAL_RTC_SetTime>
 801b450:	4603      	mov	r3, r0
 801b452:	2b00      	cmp	r3, #0
 801b454:	d001      	beq.n	801b45a <My_RTC_Init+0xa6>
	{
		Error_Handler();
 801b456:	f7e5 feb7 	bl	80011c8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801b45a:	2301      	movs	r3, #1
 801b45c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 801b460:	2301      	movs	r3, #1
 801b462:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	sDate.Date = 1;
 801b466:	2301      	movs	r3, #1
 801b468:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	sDate.Year = 0;
 801b46c:	2300      	movs	r3, #0
 801b46e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801b472:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801b476:	2200      	movs	r2, #0
 801b478:	4619      	mov	r1, r3
 801b47a:	4819      	ldr	r0, [pc, #100]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b47c:	f7ea fe6a 	bl	8006154 <HAL_RTC_SetDate>
 801b480:	4603      	mov	r3, r0
 801b482:	2b00      	cmp	r3, #0
 801b484:	d001      	beq.n	801b48a <My_RTC_Init+0xd6>
	{
		Error_Handler();
 801b486:	f7e5 fe9f 	bl	80011c8 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 801b48a:	2300      	movs	r3, #0
 801b48c:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0;
 801b48e:	2300      	movs	r3, #0
 801b490:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0;
 801b492:	2300      	movs	r3, #0
 801b494:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0;
 801b496:	2300      	movs	r3, #0
 801b498:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801b49a:	2300      	movs	r3, #0
 801b49c:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801b49e:	2300      	movs	r3, #0
 801b4a0:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801b4a6:	2300      	movs	r3, #0
 801b4a8:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = 1;
 801b4ae:	2301      	movs	r3, #1
 801b4b0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 801b4b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801b4ba:	1d3b      	adds	r3, r7, #4
 801b4bc:	2200      	movs	r2, #0
 801b4be:	4619      	mov	r1, r3
 801b4c0:	4807      	ldr	r0, [pc, #28]	@ (801b4e0 <My_RTC_Init+0x12c>)
 801b4c2:	f7ea fecd 	bl	8006260 <HAL_RTC_SetAlarm_IT>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d001      	beq.n	801b4d0 <My_RTC_Init+0x11c>
	{
		Error_Handler();
 801b4cc:	f7e5 fe7c 	bl	80011c8 <Error_Handler>
	}

	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801b4d0:	202a      	movs	r0, #42	@ 0x2a
 801b4d2:	f7e7 fb3a 	bl	8002b4a <HAL_NVIC_DisableIRQ>
#endif
}
 801b4d6:	bf00      	nop
 801b4d8:	3748      	adds	r7, #72	@ 0x48
 801b4da:	46bd      	mov	sp, r7
 801b4dc:	bd80      	pop	{r7, pc}
 801b4de:	bf00      	nop
 801b4e0:	200006ec 	.word	0x200006ec
 801b4e4:	40002800 	.word	0x40002800

0801b4e8 <My_EHF>:

/* FSM Function Begin */

void My_EHF(void)	// EHF = Energy Harvesting Function
{
 801b4e8:	b580      	push	{r7, lr}
 801b4ea:	af00      	add	r7, sp, #0
	/*
	 * The EHF Function manages the Energy Harvesting feature of the system
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();										// Set all GPIO in Analog Mode
 801b4ec:	f000 fcfc 	bl	801bee8 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 										// Clear all Pending Interrupts
 801b4f0:	2002      	movs	r0, #2
 801b4f2:	f000 fde5 	bl	801c0c0 <My_Interrupts_Manager>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);										// Open VDD to ES Switch
 801b4f6:	2000      	movs	r0, #0
 801b4f8:	f001 f860 	bl	801c5bc <My_VDD_to_ES_Switch>
#endif

	switch (my_Current_State)
 801b4fc:	4b5e      	ldr	r3, [pc, #376]	@ (801b678 <My_EHF+0x190>)
 801b4fe:	781b      	ldrb	r3, [r3, #0]
 801b500:	3b02      	subs	r3, #2
 801b502:	2b05      	cmp	r3, #5
 801b504:	f200 80ae 	bhi.w	801b664 <My_EHF+0x17c>
 801b508:	a201      	add	r2, pc, #4	@ (adr r2, 801b510 <My_EHF+0x28>)
 801b50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b50e:	bf00      	nop
 801b510:	0801b577 	.word	0x0801b577
 801b514:	0801b529 	.word	0x0801b529
 801b518:	0801b5d9 	.word	0x0801b5d9
 801b51c:	0801b5ff 	.word	0x0801b5ff
 801b520:	0801b653 	.word	0x0801b653
 801b524:	0801b5ed 	.word	0x0801b5ed
	{
	case EHS:  																// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS timer
 801b528:	2000      	movs	r0, #0
 801b52a:	f000 fa43 	bl	801b9b4 <My_EHS_to_EMS_Timer>

		switch (my_Next_State)
 801b52e:	4b53      	ldr	r3, [pc, #332]	@ (801b67c <My_EHF+0x194>)
 801b530:	781b      	ldrb	r3, [r3, #0]
 801b532:	2b09      	cmp	r3, #9
 801b534:	d012      	beq.n	801b55c <My_EHF+0x74>
 801b536:	2b09      	cmp	r3, #9
 801b538:	dc16      	bgt.n	801b568 <My_EHF+0x80>
 801b53a:	2b04      	cmp	r3, #4
 801b53c:	d002      	beq.n	801b544 <My_EHF+0x5c>
 801b53e:	2b07      	cmp	r3, #7
 801b540:	d006      	beq.n	801b550 <My_EHF+0x68>
 801b542:	e011      	b.n	801b568 <My_EHF+0x80>
		{

		case ESS:
		{
			My_Enter_Stop2_Mode_WFI(VESS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801b544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b548:	2008      	movs	r0, #8
 801b54a:	f000 fd15 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
			break;
 801b54e:	e011      	b.n	801b574 <My_EHF+0x8c>
		}

		case SMS:
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801b550:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b554:	200c      	movs	r0, #12
 801b556:	f000 fd0f 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
			break;
 801b55a:	e00b      	b.n	801b574 <My_EHF+0x8c>
		}
		case AIS:
		{
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801b55c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b560:	200c      	movs	r0, #12
 801b562:	f000 fd09 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
			break;
 801b566:	e005      	b.n	801b574 <My_EHF+0x8c>
		}

		default:
		{
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 			// Set Enter Stop2 Mode and WFI
 801b568:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b56c:	200c      	movs	r0, #12
 801b56e:	f000 fd03 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
			break;
 801b572:	bf00      	nop
		}
		}

		break;
 801b574:	e07d      	b.n	801b672 <My_EHF+0x18a>
	}

	case RTS:  																// RTS = Radio Transmission State
	{
#if MY_ES_FEATURE_ENABLE  													// If the Energy Storage Feature is enabled
		if (++my_RTS_cnt >= N_LORA_TX)  									// If the number of transmissions has reached the threshold
 801b576:	4b42      	ldr	r3, [pc, #264]	@ (801b680 <My_EHF+0x198>)
 801b578:	781b      	ldrb	r3, [r3, #0]
 801b57a:	3301      	adds	r3, #1
 801b57c:	b2da      	uxtb	r2, r3
 801b57e:	4b40      	ldr	r3, [pc, #256]	@ (801b680 <My_EHF+0x198>)
 801b580:	701a      	strb	r2, [r3, #0]
 801b582:	4b3f      	ldr	r3, [pc, #252]	@ (801b680 <My_EHF+0x198>)
 801b584:	781b      	ldrb	r3, [r3, #0]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d017      	beq.n	801b5ba <My_EHF+0xd2>
		{
			if (my_Cmode != EOC)											// If the Energy Storage Device (ESD) is NOT in End of Charge (EOC)
 801b58a:	4b3e      	ldr	r3, [pc, #248]	@ (801b684 <My_EHF+0x19c>)
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	2b02      	cmp	r3, #2
 801b590:	d006      	beq.n	801b5a0 <My_EHF+0xb8>
			{
				my_Current_State = EHS;  									// RTS --> EHS
 801b592:	4b39      	ldr	r3, [pc, #228]	@ (801b678 <My_EHF+0x190>)
 801b594:	2203      	movs	r2, #3
 801b596:	701a      	strb	r2, [r3, #0]
				my_Next_State = ESS;  										// RTS --> EHS --> ESS
 801b598:	4b38      	ldr	r3, [pc, #224]	@ (801b67c <My_EHF+0x194>)
 801b59a:	2204      	movs	r2, #4
 801b59c:	701a      	strb	r2, [r3, #0]
 801b59e:	e008      	b.n	801b5b2 <My_EHF+0xca>
			}
			else  															// If Energy Storage Device (ESD) is in End of Charge (EOC)
			{
				My_VDD_to_ES_Switch(Switch_OPEN);  							// Open the Vdd to ES Switch
 801b5a0:	2000      	movs	r0, #0
 801b5a2:	f001 f80b 	bl	801c5bc <My_VDD_to_ES_Switch>
				my_Current_State = EHS;  									// RTS --> EHS
 801b5a6:	4b34      	ldr	r3, [pc, #208]	@ (801b678 <My_EHF+0x190>)
 801b5a8:	2203      	movs	r2, #3
 801b5aa:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE  													// If the Sensor Measurements Feature is enabled
				my_Next_State = SMS;										// RTS --> EHS --> SMS
 801b5ac:	4b33      	ldr	r3, [pc, #204]	@ (801b67c <My_EHF+0x194>)
 801b5ae:	2207      	movs	r2, #7
 801b5b0:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;  										// RTS --> EHS --> RTS
#endif
			}
			my_RTS_cnt = 0;  												// Reset the transmissions counter
 801b5b2:	4b33      	ldr	r3, [pc, #204]	@ (801b680 <My_EHF+0x198>)
 801b5b4:	2200      	movs	r2, #0
 801b5b6:	701a      	strb	r2, [r3, #0]
 801b5b8:	e005      	b.n	801b5c6 <My_EHF+0xde>
		}
		else  																// If the number of Radio transmissions is lower than N_LORA_TX
		{
			my_Current_State = EHS;  										// RTS --> EHS
 801b5ba:	4b2f      	ldr	r3, [pc, #188]	@ (801b678 <My_EHF+0x190>)
 801b5bc:	2203      	movs	r2, #3
 801b5be:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  											// RTS --> EHS --> RTS
 801b5c0:	4b2e      	ldr	r3, [pc, #184]	@ (801b67c <My_EHF+0x194>)
 801b5c2:	2202      	movs	r2, #2
 801b5c4:	701a      	strb	r2, [r3, #0]
#else
		my_Next_State = RTS;  												// Set Following State as RTS
#endif
#endif

		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801b5c6:	2000      	movs	r0, #0
 801b5c8:	f000 f9f4 	bl	801b9b4 <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801b5cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b5d0:	200c      	movs	r0, #12
 801b5d2:	f000 fcd1 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b5d6:	e04c      	b.n	801b672 <My_EHF+0x18a>
	}

	case ESS:
	{
		if (my_Next_State == SMS)
 801b5d8:	4b28      	ldr	r3, [pc, #160]	@ (801b67c <My_EHF+0x194>)
 801b5da:	781b      	ldrb	r3, [r3, #0]
 801b5dc:	2b07      	cmp	r3, #7
 801b5de:	d147      	bne.n	801b670 <My_EHF+0x188>
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  	// Enter Stop2 Power Mode and Wait for Interrupt
 801b5e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b5e4:	200c      	movs	r0, #12
 801b5e6:	f000 fcc7 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		}
		break;
 801b5ea:	e041      	b.n	801b670 <My_EHF+0x188>
	}

	case SMS:
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801b5ec:	2000      	movs	r0, #0
 801b5ee:	f000 f9e1 	bl	801b9b4 <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  		// Enter Stop2 Power Mode and Wait for Interrupt
 801b5f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b5f6:	200c      	movs	r0, #12
 801b5f8:	f000 fcbe 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b5fc:	e039      	b.n	801b672 <My_EHF+0x18a>
	}

	case EMS:  																// EMS = Energy Missing State
	{
		My_ESW_DCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801b5fe:	2001      	movs	r0, #1
 801b600:	f000 f94c 	bl	801b89c <My_ESW_DCM_Timer>
		My_ESW_CCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801b604:	2001      	movs	r0, #1
 801b606:	f000 f96f 	bl	801b8e8 <My_ESW_CCM_Timer>
#if MY_LIS2DU12 && STEVAL_HARVEST1
		My_VDD_to_VDDS1_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
		My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801b60a:	2000      	movs	r0, #0
 801b60c:	f001 f854 	bl	801c6b8 <My_VDD_to_VDDS2_Switch>
#endif

#endif

		My_VDD_to_ES_Switch(Switch_CLOSED);  								// The system is supplied by the Energy Storage Device (ESD)
 801b610:	2001      	movs	r0, #1
 801b612:	f000 ffd3 	bl	801c5bc <My_VDD_to_ES_Switch>

		My_PVD_Delay();														// 2 sec delay
 801b616:	f000 ff95 	bl	801c544 <My_PVD_Delay>
		My_PVD_Delay();														// 2 sec delay
 801b61a:	f000 ff93 	bl	801c544 <My_PVD_Delay>

		if (my_rtc_B_ems_flag == 0)  										// Flag the occurrence of EDS
 801b61e:	4b1a      	ldr	r3, [pc, #104]	@ (801b688 <My_EHF+0x1a0>)
 801b620:	781b      	ldrb	r3, [r3, #0]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d105      	bne.n	801b632 <My_EHF+0x14a>
		{
			My_EMS_to_EDS_Timer(START_TIMER);  								// Start an Energy Presence Check
 801b626:	2000      	movs	r0, #0
 801b628:	f000 fa08 	bl	801ba3c <My_EMS_to_EDS_Timer>
			my_rtc_B_ems_flag = 1;
 801b62c:	4b16      	ldr	r3, [pc, #88]	@ (801b688 <My_EHF+0x1a0>)
 801b62e:	2201      	movs	r2, #1
 801b630:	701a      	strb	r2, [r3, #0]
		}

		if (my_rtc_A_ems_flag == 0)  										// Flag the occurrence of ems Measurement
 801b632:	4b16      	ldr	r3, [pc, #88]	@ (801b68c <My_EHF+0x1a4>)
 801b634:	781b      	ldrb	r3, [r3, #0]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d105      	bne.n	801b646 <My_EHF+0x15e>
		{
			My_EMS_to_SMS_Timer(START_TIMER);  								// Start the timer to move from EMS to SMS
 801b63a:	2000      	movs	r0, #0
 801b63c:	f000 fa20 	bl	801ba80 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 1;
 801b640:	4b12      	ldr	r3, [pc, #72]	@ (801b68c <My_EHF+0x1a4>)
 801b642:	2201      	movs	r2, #1
 801b644:	701a      	strb	r2, [r3, #0]
		}

		My_Enter_Stop2_Mode_WFI(PVD_EMS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801b646:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b64a:	2008      	movs	r0, #8
 801b64c:	f000 fc94 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b650:	e00f      	b.n	801b672 <My_EHF+0x18a>
	}

	case EDS:  																// EDS = Energy Detection State
	{
		My_EDS_Timer(START_TIMER);  										// Start the EDS Timer
 801b652:	2000      	movs	r0, #0
 801b654:	f000 f994 	bl	801b980 <My_EDS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801b658:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b65c:	200c      	movs	r0, #12
 801b65e:	f000 fc8b 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b662:	e006      	b.n	801b672 <My_EHF+0x18a>
	}

	default:
	{
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801b664:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b668:	200c      	movs	r0, #12
 801b66a:	f000 fc85 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b66e:	e000      	b.n	801b672 <My_EHF+0x18a>
		break;
 801b670:	bf00      	nop
	}
	}
}
 801b672:	bf00      	nop
 801b674:	bd80      	pop	{r7, pc}
 801b676:	bf00      	nop
 801b678:	20001b85 	.word	0x20001b85
 801b67c:	20000638 	.word	0x20000638
 801b680:	20001b56 	.word	0x20001b56
 801b684:	20001b86 	.word	0x20001b86
 801b688:	20001b5b 	.word	0x20001b5b
 801b68c:	20001b5a 	.word	0x20001b5a

0801b690 <My_ESF>:
/*
 * The ESF Function performs the actions executed during the Energy Storage State (ESS).
 * In the Energy Storage State (ESS) the additional Energy Storage Device (ESD) gets charged.
 */

{
 801b690:	b580      	push	{r7, lr}
 801b692:	af00      	add	r7, sp, #0

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();									// Set all GPIO in Analog Mode
 801b694:	f000 fc28 	bl	801bee8 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 									// Clear all Pending Interrupts
 801b698:	2002      	movs	r0, #2
 801b69a:	f000 fd11 	bl	801c0c0 <My_Interrupts_Manager>
#endif

	my_Check_ESD = 0;													// Reset my_Check_ESD
 801b69e:	4b43      	ldr	r3, [pc, #268]	@ (801b7ac <My_ESF+0x11c>)
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	701a      	strb	r2, [r3, #0]

	my_Current_State = ESS;												// Set Current State as Energy Storage State (ESS)
 801b6a4:	4b42      	ldr	r3, [pc, #264]	@ (801b7b0 <My_ESF+0x120>)
 801b6a6:	2204      	movs	r2, #4
 801b6a8:	701a      	strb	r2, [r3, #0]

	switch (my_Cmode)
 801b6aa:	4b42      	ldr	r3, [pc, #264]	@ (801b7b4 <My_ESF+0x124>)
 801b6ac:	781b      	ldrb	r3, [r3, #0]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d002      	beq.n	801b6b8 <My_ESF+0x28>
 801b6b2:	2b01      	cmp	r3, #1
 801b6b4:	d027      	beq.n	801b706 <My_ESF+0x76>
		break;
	}

	default:
	{
		break;
 801b6b6:	e077      	b.n	801b7a8 <My_ESF+0x118>
		My_Interrupts_Manager(NVIC_DISABLE);							// Disable all the interrupts
 801b6b8:	2001      	movs	r0, #1
 801b6ba:	f000 fd01 	bl	801c0c0 <My_Interrupts_Manager>
		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable only interrupts for PVD During DCM
 801b6be:	2001      	movs	r0, #1
 801b6c0:	f7e7 fa35 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		if (HAL_LPTIM_ReadCounter(&hlptim1) > T_ESW || (my_ESS_cnt >= DCM_MAX))
 801b6c4:	483c      	ldr	r0, [pc, #240]	@ (801b7b8 <My_ESF+0x128>)
 801b6c6:	f001 fb9b 	bl	801ce00 <HAL_LPTIM_ReadCounter>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	f241 4208 	movw	r2, #5128	@ 0x1408
 801b6d0:	4293      	cmp	r3, r2
 801b6d2:	d803      	bhi.n	801b6dc <My_ESF+0x4c>
 801b6d4:	4b39      	ldr	r3, [pc, #228]	@ (801b7bc <My_ESF+0x12c>)
 801b6d6:	781b      	ldrb	r3, [r3, #0]
 801b6d8:	2b04      	cmp	r3, #4
 801b6da:	d906      	bls.n	801b6ea <My_ESF+0x5a>
			My_ESW_DCM_Timer(STOP_TIMER);
 801b6dc:	2001      	movs	r0, #1
 801b6de:	f000 f8dd 	bl	801b89c <My_ESW_DCM_Timer>
			my_Next_State = SMS;
 801b6e2:	4b37      	ldr	r3, [pc, #220]	@ (801b7c0 <My_ESF+0x130>)
 801b6e4:	2207      	movs	r2, #7
 801b6e6:	701a      	strb	r2, [r3, #0]
 801b6e8:	e002      	b.n	801b6f0 <My_ESF+0x60>
			My_ESW_DCM_Timer(START_TIMER);								// Start the EWS DCM Timer
 801b6ea:	2000      	movs	r0, #0
 801b6ec:	f000 f8d6 	bl	801b89c <My_ESW_DCM_Timer>
		My_DCM_to_CCM_Timer(START_TIMER); 								// Start Timer to monitor DCM to CCM.
 801b6f0:	2000      	movs	r0, #0
 801b6f2:	f000 f981 	bl	801b9f8 <My_DCM_to_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801b6f6:	2001      	movs	r0, #1
 801b6f8:	f000 ff60 	bl	801c5bc <My_VDD_to_ES_Switch>
		My_Enter_Stop2_Mode_WFI(VESS_LOW, PWR_PVD_MODE_IT_FALLING); 	// Set PVD to level VESS_LOW with Interrupt for Falling Vdd and Enter Stop2 Mode and Wait for Interrupt
 801b6fc:	4931      	ldr	r1, [pc, #196]	@ (801b7c4 <My_ESF+0x134>)
 801b6fe:	2002      	movs	r0, #2
 801b700:	f000 fc3a 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b704:	e050      	b.n	801b7a8 <My_ESF+0x118>
		My_ESW_CCM_Timer(START_TIMER);									// Start the EWS CCM Timer
 801b706:	2000      	movs	r0, #0
 801b708:	f000 f8ee 	bl	801b8e8 <My_ESW_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801b70c:	2001      	movs	r0, #1
 801b70e:	f000 ff55 	bl	801c5bc <My_VDD_to_ES_Switch>
		My_Set_PVD(VEOC, PWR_PVD_MODE_NORMAL); 							// Set PVD in Normal Mode and VEOC
 801b712:	2100      	movs	r1, #0
 801b714:	2008      	movs	r0, #8
 801b716:	f000 fcb5 	bl	801c084 <My_Set_PVD>
		My_PVD_Delay(); 												// Delay to allow the PVD to Settle
 801b71a:	f000 ff13 	bl	801c544 <My_PVD_Delay>
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 					// If the voltage across the Energy Storage Device (ESD) is higher than VEOC the System is in End of Charge (EOC)
 801b71e:	4b2a      	ldr	r3, [pc, #168]	@ (801b7c8 <My_ESF+0x138>)
 801b720:	695b      	ldr	r3, [r3, #20]
 801b722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b726:	2b00      	cmp	r3, #0
 801b728:	d11a      	bne.n	801b760 <My_ESF+0xd0>
			my_Cmode = EOC; 											// Set Charging Mode in End of Charge (EOC)
 801b72a:	4b22      	ldr	r3, [pc, #136]	@ (801b7b4 <My_ESF+0x124>)
 801b72c:	2202      	movs	r2, #2
 801b72e:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;										// Set Current State as Energy Harvesting State (EHS): ESS --> EHS
 801b730:	4b1f      	ldr	r3, [pc, #124]	@ (801b7b0 <My_ESF+0x120>)
 801b732:	2203      	movs	r2, #3
 801b734:	701a      	strb	r2, [r3, #0]
			My_EBK_status = 100;
 801b736:	4b25      	ldr	r3, [pc, #148]	@ (801b7cc <My_ESF+0x13c>)
 801b738:	2264      	movs	r2, #100	@ 0x64
 801b73a:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS; 										// Set Next State as Radio Transmission State (RTS): ESS --> EHS --> SMS
 801b73c:	4b20      	ldr	r3, [pc, #128]	@ (801b7c0 <My_ESF+0x130>)
 801b73e:	2207      	movs	r2, #7
 801b740:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN); 							// Stop Charging: Open the Switch between Vdd and ES
 801b742:	2000      	movs	r0, #0
 801b744:	f000 ff3a 	bl	801c5bc <My_VDD_to_ES_Switch>
			My_ESW_CCM_Timer(STOP_TIMER);								// Stop the Energy Storage Window (ESW) Timer
 801b748:	2001      	movs	r0, #1
 801b74a:	f000 f8cd 	bl	801b8e8 <My_ESW_CCM_Timer>
			My_EHS_to_EMS_Timer(START_TIMER); 							// Start the EHS to EMS Timer (Detects if Energy to Harvest is Missing)
 801b74e:	2000      	movs	r0, #0
 801b750:	f000 f930 	bl	801b9b4 <My_EHS_to_EMS_Timer>
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 		// Enter Stop 2 Power Mode and Wait for Interrupt
 801b754:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b758:	200c      	movs	r0, #12
 801b75a:	f000 fc0d 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b75e:	e022      	b.n	801b7a6 <My_ESF+0x116>
				My_Set_PVD(V2P2, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801b760:	2100      	movs	r1, #0
 801b762:	2002      	movs	r0, #2
 801b764:	f000 fc8e 	bl	801c084 <My_Set_PVD>
				My_PVD_Delay(); 										// Delay to allow the PVD to Settle
 801b768:	f000 feec 	bl	801c544 <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P2
 801b76c:	4b16      	ldr	r3, [pc, #88]	@ (801b7c8 <My_ESF+0x138>)
 801b76e:	695b      	ldr	r3, [r3, #20]
 801b770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b774:	2b00      	cmp	r3, #0
 801b776:	d102      	bne.n	801b77e <My_ESF+0xee>
					My_EBK_status = 33;
 801b778:	4b14      	ldr	r3, [pc, #80]	@ (801b7cc <My_ESF+0x13c>)
 801b77a:	2221      	movs	r2, #33	@ 0x21
 801b77c:	701a      	strb	r2, [r3, #0]
				My_Set_PVD(V2P4, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801b77e:	2100      	movs	r1, #0
 801b780:	2004      	movs	r0, #4
 801b782:	f000 fc7f 	bl	801c084 <My_Set_PVD>
				My_PVD_Delay();
 801b786:	f000 fedd 	bl	801c544 <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P4
 801b78a:	4b0f      	ldr	r3, [pc, #60]	@ (801b7c8 <My_ESF+0x138>)
 801b78c:	695b      	ldr	r3, [r3, #20]
 801b78e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b792:	2b00      	cmp	r3, #0
 801b794:	d102      	bne.n	801b79c <My_ESF+0x10c>
					My_EBK_status = 66;
 801b796:	4b0d      	ldr	r3, [pc, #52]	@ (801b7cc <My_ESF+0x13c>)
 801b798:	2242      	movs	r2, #66	@ 0x42
 801b79a:	701a      	strb	r2, [r3, #0]
				My_Enter_Stop2_Mode_WFI(VEOC, PWR_PVD_MODE_IT_RISING);	// Enter Stop2 Mode and Wait for Interrupt and wait for the charging to be completed
 801b79c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801b7a0:	2008      	movs	r0, #8
 801b7a2:	f000 fbe9 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
		break;
 801b7a6:	bf00      	nop
	}
	}
}
 801b7a8:	bf00      	nop
 801b7aa:	bd80      	pop	{r7, pc}
 801b7ac:	20001b5c 	.word	0x20001b5c
 801b7b0:	20001b85 	.word	0x20001b85
 801b7b4:	20001b86 	.word	0x20001b86
 801b7b8:	20001adc 	.word	0x20001adc
 801b7bc:	20001b57 	.word	0x20001b57
 801b7c0:	20000638 	.word	0x20000638
 801b7c4:	00010002 	.word	0x00010002
 801b7c8:	58000400 	.word	0x58000400
 801b7cc:	20001b55 	.word	0x20001b55

0801b7d0 <My_SMF>:

void My_SMF(void)	// SMF = Sensor Measurement Function
{
 801b7d0:	b580      	push	{r7, lr}
 801b7d2:	af00      	add	r7, sp, #0
	 * SMF = Sensor Measurement Function
	 * The SMF Function Manages the Sensors
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 801b7d4:	f000 fb88 	bl	801bee8 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 								// Clear all Pending Interrupts
 801b7d8:	2002      	movs	r0, #2
 801b7da:	f000 fc71 	bl	801c0c0 <My_Interrupts_Manager>
#endif

	HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);								// Disable Interrupt for RTC_WKUP
 801b7de:	2003      	movs	r0, #3
 801b7e0:	f7e7 f9b3 	bl	8002b4a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);							// Disable Interrupt for RTC_Alarm_IRQn
 801b7e4:	202a      	movs	r0, #42	@ 0x2a
 801b7e6:	f7e7 f9b0 	bl	8002b4a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(LPTIM1_IRQn);								// Disable Interrupt for LPTIM1
 801b7ea:	2027      	movs	r0, #39	@ 0x27
 801b7ec:	f7e7 f9ad 	bl	8002b4a <HAL_NVIC_DisableIRQ>

	my_Current_State = SMS;											// Set Current State as SMS
 801b7f0:	4b1a      	ldr	r3, [pc, #104]	@ (801b85c <My_SMF+0x8c>)
 801b7f2:	2207      	movs	r2, #7
 801b7f4:	701a      	strb	r2, [r3, #0]
	My_SMW_Timer(START_TIMER);										// Start Sensor Measurement Window Timer
 801b7f6:	2000      	movs	r0, #0
 801b7f8:	f000 f89c 	bl	801b934 <My_SMW_Timer>

	My_Set_PVD(VSMS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801b7fc:	4918      	ldr	r1, [pc, #96]	@ (801b860 <My_SMF+0x90>)
 801b7fe:	2004      	movs	r0, #4
 801b800:	f000 fc40 	bl	801c084 <My_Set_PVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);	// Set Internal Voltage Regulator at 1.2 V
 801b804:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b808:	f7e8 ff04 	bl	8004614 <HAL_PWREx_ControlVoltageScaling>
	My_HAL_Delay(10);												// Add a Delay
	My_I2C_Init(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_CLOSED);							// Bias the Sensors: Close the switch between VDD and VDDS2 to Power Sensors
 801b80c:	2001      	movs	r0, #1
 801b80e:	f000 ff53 	bl	801c6b8 <My_VDD_to_VDDS2_Switch>
	My_HAL_Delay(10);												// Add a Delay
 801b812:	200a      	movs	r0, #10
 801b814:	f000 ff98 	bl	801c748 <My_HAL_Delay>
	My_I2C_Init(MY_I2C2);											// Initialize I2C2
 801b818:	2001      	movs	r0, #1
 801b81a:	f000 fa71 	bl	801bd00 <My_I2C_Init>
#endif

#if MY_SHT40 && STEVAL_HARVEST1
	My_SHT40_Get_Data();											// SHT40 Get Data
 801b81e:	f000 faad 	bl	801bd7c <My_SHT40_Get_Data>
#if MY_LIS2DU12 && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C2);											// DeInitialize I2C2
 801b822:	2001      	movs	r0, #1
 801b824:	f000 fa8e 	bl	801bd44 <My_I2C_Deinit>
#endif

#endif

	if (my_Cmode == DCM && my_Check_ESD == 0)						// If in DCM Mode --> Charge the Energy Backup Device
 801b828:	4b0e      	ldr	r3, [pc, #56]	@ (801b864 <My_SMF+0x94>)
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d107      	bne.n	801b840 <My_SMF+0x70>
 801b830:	4b0d      	ldr	r3, [pc, #52]	@ (801b868 <My_SMF+0x98>)
 801b832:	781b      	ldrb	r3, [r3, #0]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d103      	bne.n	801b840 <My_SMF+0x70>
	{
		My_VDD_to_ES_Switch(Switch_CLOSED);							// Charge the Energy Backup Device
 801b838:	2001      	movs	r0, #1
 801b83a:	f000 febf 	bl	801c5bc <My_VDD_to_ES_Switch>
 801b83e:	e003      	b.n	801b848 <My_SMF+0x78>
	}
	else
	{
		Radio.Rx(1);												// Turn the Radio in RX Mode
 801b840:	4b0a      	ldr	r3, [pc, #40]	@ (801b86c <My_SMF+0x9c>)
 801b842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b844:	2001      	movs	r0, #1
 801b846:	4798      	blx	r3
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801b848:	2001      	movs	r0, #1
 801b84a:	f000 fc39 	bl	801c0c0 <My_Interrupts_Manager>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801b84e:	2001      	movs	r0, #1
 801b850:	f7e7 f96d 	bl	8002b2e <HAL_NVIC_EnableIRQ>
	__WFI();														// Wait for Interrupt From PVD
 801b854:	bf30      	wfi
}
 801b856:	bf00      	nop
 801b858:	bd80      	pop	{r7, pc}
 801b85a:	bf00      	nop
 801b85c:	20001b85 	.word	0x20001b85
 801b860:	00010002 	.word	0x00010002
 801b864:	20001b86 	.word	0x20001b86
 801b868:	20001b5c 	.word	0x20001b5c
 801b86c:	08020bac 	.word	0x08020bac

0801b870 <My_AIF>:

void My_AIF(void)
{
 801b870:	b580      	push	{r7, lr}
 801b872:	af00      	add	r7, sp, #0
	My_LPTIM1_Monitor(Switch_CLOSED);
 801b874:	2001      	movs	r0, #1
 801b876:	f000 ff73 	bl	801c760 <My_LPTIM1_Monitor>

//	my_Current_State = EHS;
//	my_Next_State = ESS;
	My_Set_PVD(VAIS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801b87a:	4907      	ldr	r1, [pc, #28]	@ (801b898 <My_AIF+0x28>)
 801b87c:	2002      	movs	r0, #2
 801b87e:	f000 fc01 	bl	801c084 <My_Set_PVD>
	My_PVD_Delay();
 801b882:	f000 fe5f 	bl	801c544 <My_PVD_Delay>
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//	GPIO_InitStruct.Pin =  GPIO_PIN_7; 	// PA7 = CN10[15]
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);

	MX_X_CUBE_AI_Process();
 801b886:	f7fe ff51 	bl	801a72c <MX_X_CUBE_AI_Process>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801b88a:	2100      	movs	r1, #0
 801b88c:	2010      	movs	r0, #16
 801b88e:	f7fe f80d 	bl	80198ac <UTIL_SEQ_SetTask>

//	HAL_Delay(1500);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 801b892:	bf00      	nop
 801b894:	bd80      	pop	{r7, pc}
 801b896:	bf00      	nop
 801b898:	00010002 	.word	0x00010002

0801b89c <My_ESW_DCM_Timer>:


/* Timer Section Begin */

void My_ESW_DCM_Timer(My_Timer_td mode)
{
 801b89c:	b580      	push	{r7, lr}
 801b89e:	b082      	sub	sp, #8
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in DCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801b8a6:	79fb      	ldrb	r3, [r7, #7]
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d10c      	bne.n	801b8c6 <My_ESW_DCM_Timer+0x2a>
 801b8ac:	4b0c      	ldr	r3, [pc, #48]	@ (801b8e0 <My_ESW_DCM_Timer+0x44>)
 801b8ae:	781b      	ldrb	r3, [r3, #0]
 801b8b0:	1c5a      	adds	r2, r3, #1
 801b8b2:	b2d1      	uxtb	r1, r2
 801b8b4:	4a0a      	ldr	r2, [pc, #40]	@ (801b8e0 <My_ESW_DCM_Timer+0x44>)
 801b8b6:	7011      	strb	r1, [r2, #0]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d104      	bne.n	801b8c6 <My_ESW_DCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Energy Storage Window (ESW)
 801b8bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801b8c0:	4808      	ldr	r0, [pc, #32]	@ (801b8e4 <My_ESW_DCM_Timer+0x48>)
 801b8c2:	f001 f935 	bl	801cb30 <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801b8c6:	79fb      	ldrb	r3, [r7, #7]
 801b8c8:	2b01      	cmp	r3, #1
 801b8ca:	d105      	bne.n	801b8d8 <My_ESW_DCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801b8cc:	4b04      	ldr	r3, [pc, #16]	@ (801b8e0 <My_ESW_DCM_Timer+0x44>)
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801b8d2:	4804      	ldr	r0, [pc, #16]	@ (801b8e4 <My_ESW_DCM_Timer+0x48>)
 801b8d4:	f001 f970 	bl	801cbb8 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801b8d8:	bf00      	nop
 801b8da:	3708      	adds	r7, #8
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	bd80      	pop	{r7, pc}
 801b8e0:	20001b57 	.word	0x20001b57
 801b8e4:	20001adc 	.word	0x20001adc

0801b8e8 <My_ESW_CCM_Timer>:

void My_ESW_CCM_Timer(My_Timer_td mode)
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	b082      	sub	sp, #8
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	4603      	mov	r3, r0
 801b8f0:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in CCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801b8f2:	79fb      	ldrb	r3, [r7, #7]
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d10c      	bne.n	801b912 <My_ESW_CCM_Timer+0x2a>
 801b8f8:	4b0c      	ldr	r3, [pc, #48]	@ (801b92c <My_ESW_CCM_Timer+0x44>)
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	1c5a      	adds	r2, r3, #1
 801b8fe:	b2d1      	uxtb	r1, r2
 801b900:	4a0a      	ldr	r2, [pc, #40]	@ (801b92c <My_ESW_CCM_Timer+0x44>)
 801b902:	7011      	strb	r1, [r2, #0]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d104      	bne.n	801b912 <My_ESW_CCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_ESW);
 801b908:	f241 4108 	movw	r1, #5128	@ 0x1408
 801b90c:	4808      	ldr	r0, [pc, #32]	@ (801b930 <My_ESW_CCM_Timer+0x48>)
 801b90e:	f001 f96f 	bl	801cbf0 <HAL_LPTIM_Counter_Start_IT>
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif

	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801b912:	79fb      	ldrb	r3, [r7, #7]
 801b914:	2b01      	cmp	r3, #1
 801b916:	d105      	bne.n	801b924 <My_ESW_CCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801b918:	4b04      	ldr	r3, [pc, #16]	@ (801b92c <My_ESW_CCM_Timer+0x44>)
 801b91a:	2200      	movs	r2, #0
 801b91c:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop_IT(&hlptim1); 			// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801b91e:	4804      	ldr	r0, [pc, #16]	@ (801b930 <My_ESW_CCM_Timer+0x48>)
 801b920:	f001 fa08 	bl	801cd34 <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801b924:	bf00      	nop
 801b926:	3708      	adds	r7, #8
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}
 801b92c:	20001b57 	.word	0x20001b57
 801b930:	20001adc 	.word	0x20001adc

0801b934 <My_SMW_Timer>:

void My_SMW_Timer(My_Timer_td mode)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b082      	sub	sp, #8
 801b938:	af00      	add	r7, sp, #0
 801b93a:	4603      	mov	r3, r0
 801b93c:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_SMW that defines the Sensor Measure Window (SMW) */

	if ((mode == START_TIMER) && (my_SMS_cnt++ == 0))	// Start the Sensor Measurement Window (SMW) Timer
 801b93e:	79fb      	ldrb	r3, [r7, #7]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d10c      	bne.n	801b95e <My_SMW_Timer+0x2a>
 801b944:	4b0c      	ldr	r3, [pc, #48]	@ (801b978 <My_SMW_Timer+0x44>)
 801b946:	781b      	ldrb	r3, [r3, #0]
 801b948:	1c5a      	adds	r2, r3, #1
 801b94a:	b2d1      	uxtb	r1, r2
 801b94c:	4a0a      	ldr	r2, [pc, #40]	@ (801b978 <My_SMW_Timer+0x44>)
 801b94e:	7011      	strb	r1, [r2, #0]
 801b950:	2b00      	cmp	r3, #0
 801b952:	d104      	bne.n	801b95e <My_SMW_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Sensor Measurement Window (SMW)
 801b954:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801b958:	4808      	ldr	r0, [pc, #32]	@ (801b97c <My_SMW_Timer+0x48>)
 801b95a:	f001 f8e9 	bl	801cb30 <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Sensor Measurement Window (SMW) Timer
 801b95e:	79fb      	ldrb	r3, [r7, #7]
 801b960:	2b01      	cmp	r3, #1
 801b962:	d105      	bne.n	801b970 <My_SMW_Timer+0x3c>
	{
		my_SMS_cnt = 0;									// Reset my_SMS_cnt
 801b964:	4b04      	ldr	r3, [pc, #16]	@ (801b978 <My_SMW_Timer+0x44>)
 801b966:	2200      	movs	r2, #0
 801b968:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Sensor Measurement Window (SMW)
 801b96a:	4804      	ldr	r0, [pc, #16]	@ (801b97c <My_SMW_Timer+0x48>)
 801b96c:	f001 f924 	bl	801cbb8 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801b970:	bf00      	nop
 801b972:	3708      	adds	r7, #8
 801b974:	46bd      	mov	sp, r7
 801b976:	bd80      	pop	{r7, pc}
 801b978:	20001b58 	.word	0x20001b58
 801b97c:	20001adc 	.word	0x20001adc

0801b980 <My_EDS_Timer>:

void My_EDS_Timer(My_Timer_td mode)
{
 801b980:	b580      	push	{r7, lr}
 801b982:	b082      	sub	sp, #8
 801b984:	af00      	add	r7, sp, #0
 801b986:	4603      	mov	r3, r0
 801b988:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_EDS that defines the Energy Detection State time Window */

	if (mode == START_TIMER) // Start the Energy Detection State (EDS) Timer
 801b98a:	79fb      	ldrb	r3, [r7, #7]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d104      	bne.n	801b99a <My_EDS_Timer+0x1a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_EDS);
 801b990:	f643 2198 	movw	r1, #15000	@ 0x3a98
 801b994:	4806      	ldr	r0, [pc, #24]	@ (801b9b0 <My_EDS_Timer+0x30>)
 801b996:	f001 f92b 	bl	801cbf0 <HAL_LPTIM_Counter_Start_IT>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop the Energy Detection State (EDS) Timer
 801b99a:	79fb      	ldrb	r3, [r7, #7]
 801b99c:	2b01      	cmp	r3, #1
 801b99e:	d102      	bne.n	801b9a6 <My_EDS_Timer+0x26>
	{
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 801b9a0:	4803      	ldr	r0, [pc, #12]	@ (801b9b0 <My_EDS_Timer+0x30>)
 801b9a2:	f001 f9c7 	bl	801cd34 <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801b9a6:	bf00      	nop
 801b9a8:	3708      	adds	r7, #8
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd80      	pop	{r7, pc}
 801b9ae:	bf00      	nop
 801b9b0:	20001adc 	.word	0x20001adc

0801b9b4 <My_EHS_to_EMS_Timer>:

void My_EHS_to_EMS_Timer(My_Timer_td mode)
{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b082      	sub	sp, #8
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	4603      	mov	r3, r0
 801b9bc:	71fb      	strb	r3, [r7, #7]
	 * This Function Starts and Stops the EHS to EMS Timer
	 * It starts an RCT Alarm B Timer to detect, if the energy to harvest is missing while the System is in Energy Harvesting State (EHS).
	 * If the Energy to Harvest is missing for a time longer than T_EHS_EMS the System switches from the Energy Harvesting State (EHS) into the Energy Missing State (EMS).
	 */

	if (mode == START_TIMER)
 801b9be:	79fb      	ldrb	r3, [r7, #7]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d10a      	bne.n	801b9da <My_EHS_to_EMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801b9c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b9c8:	480a      	ldr	r0, [pc, #40]	@ (801b9f4 <My_EHS_to_EMS_Timer+0x40>)
 801b9ca:	f7ea fd55 	bl	8006478 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B	// Start EHS to EMS Timer
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	2104      	movs	r1, #4
 801b9d4:	2000      	movs	r0, #0
 801b9d6:	f000 fcc5 	bl	801c364 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801b9da:	79fb      	ldrb	r3, [r7, #7]
 801b9dc:	2b01      	cmp	r3, #1
 801b9de:	d104      	bne.n	801b9ea <My_EHS_to_EMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801b9e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b9e4:	4803      	ldr	r0, [pc, #12]	@ (801b9f4 <My_EHS_to_EMS_Timer+0x40>)
 801b9e6:	f7ea fd47 	bl	8006478 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}

}
 801b9ea:	bf00      	nop
 801b9ec:	3708      	adds	r7, #8
 801b9ee:	46bd      	mov	sp, r7
 801b9f0:	bd80      	pop	{r7, pc}
 801b9f2:	bf00      	nop
 801b9f4:	200006ec 	.word	0x200006ec

0801b9f8 <My_DCM_to_CCM_Timer>:

void My_DCM_to_CCM_Timer(My_Timer_td mode)
{
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	b082      	sub	sp, #8
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	4603      	mov	r3, r0
 801ba00:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts and Stops the RCT Alarm B Timer to detect, while in Energy Storage State (EHS), to measure the time T_DCM_CCM.
	 * The time T_DC_CCM, defines when to switch from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM).
	 */

	if (mode == START_TIMER)
 801ba02:	79fb      	ldrb	r3, [r7, #7]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d10a      	bne.n	801ba1e <My_DCM_to_CCM_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801ba08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ba0c:	480a      	ldr	r0, [pc, #40]	@ (801ba38 <My_DCM_to_CCM_Timer+0x40>)
 801ba0e:	f7ea fd33 	bl	8006478 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801ba12:	2300      	movs	r3, #0
 801ba14:	2207      	movs	r2, #7
 801ba16:	2100      	movs	r1, #0
 801ba18:	2000      	movs	r0, #0
 801ba1a:	f000 fca3 	bl	801c364 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801ba1e:	79fb      	ldrb	r3, [r7, #7]
 801ba20:	2b01      	cmp	r3, #1
 801ba22:	d104      	bne.n	801ba2e <My_DCM_to_CCM_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801ba24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ba28:	4803      	ldr	r0, [pc, #12]	@ (801ba38 <My_DCM_to_CCM_Timer+0x40>)
 801ba2a:	f7ea fd25 	bl	8006478 <HAL_RTC_DeactivateAlarm>

#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801ba2e:	bf00      	nop
 801ba30:	3708      	adds	r7, #8
 801ba32:	46bd      	mov	sp, r7
 801ba34:	bd80      	pop	{r7, pc}
 801ba36:	bf00      	nop
 801ba38:	200006ec 	.word	0x200006ec

0801ba3c <My_EMS_to_EDS_Timer>:

void My_EMS_to_EDS_Timer(My_Timer_td mode)
{
 801ba3c:	b580      	push	{r7, lr}
 801ba3e:	b082      	sub	sp, #8
 801ba40:	af00      	add	r7, sp, #0
 801ba42:	4603      	mov	r3, r0
 801ba44:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RCT Alarm B Timer to detect, while in Energy Missing State (EMS), to measure the time T_EMS_EDS.
	 * The time T_EMS_EDS, defines When to switch from Energy Missing State (EMS) to Energy Detection State (EDS), to perform an Energy presence check.
	 */

	if (mode == START_TIMER)
 801ba46:	79fb      	ldrb	r3, [r7, #7]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d10a      	bne.n	801ba62 <My_EMS_to_EDS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801ba4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ba50:	480a      	ldr	r0, [pc, #40]	@ (801ba7c <My_EMS_to_EDS_Timer+0x40>)
 801ba52:	f7ea fd11 	bl	8006478 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801ba56:	2300      	movs	r3, #0
 801ba58:	2200      	movs	r2, #0
 801ba5a:	2102      	movs	r1, #2
 801ba5c:	2000      	movs	r0, #0
 801ba5e:	f000 fc81 	bl	801c364 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801ba62:	79fb      	ldrb	r3, [r7, #7]
 801ba64:	2b01      	cmp	r3, #1
 801ba66:	d104      	bne.n	801ba72 <My_EMS_to_EDS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801ba68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ba6c:	4803      	ldr	r0, [pc, #12]	@ (801ba7c <My_EMS_to_EDS_Timer+0x40>)
 801ba6e:	f7ea fd03 	bl	8006478 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801ba72:	bf00      	nop
 801ba74:	3708      	adds	r7, #8
 801ba76:	46bd      	mov	sp, r7
 801ba78:	bd80      	pop	{r7, pc}
 801ba7a:	bf00      	nop
 801ba7c:	200006ec 	.word	0x200006ec

0801ba80 <My_EMS_to_SMS_Timer>:

void My_EMS_to_SMS_Timer(My_Timer_td mode)
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b082      	sub	sp, #8
 801ba84:	af00      	add	r7, sp, #0
 801ba86:	4603      	mov	r3, r0
 801ba88:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RTC Alarm A Timer to periodically switch into the Sensor Measurement State (SMS)
	 * while the system is in the Energy Missing State (EMS)
	 * */

	if (mode == START_TIMER)
 801ba8a:	79fb      	ldrb	r3, [r7, #7]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d10a      	bne.n	801baa6 <My_EMS_to_SMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801ba90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ba94:	480a      	ldr	r0, [pc, #40]	@ (801bac0 <My_EMS_to_SMS_Timer+0x40>)
 801ba96:	f7ea fcef 	bl	8006478 <HAL_RTC_DeactivateAlarm>
		My_Set_RTC_Alarm_A
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	221e      	movs	r2, #30
 801ba9e:	2100      	movs	r1, #0
 801baa0:	2000      	movs	r0, #0
 801baa2:	f000 fc0f 	bl	801c2c4 <My_Set_RTC_Alarm_A>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to SMS Timer
 801baa6:	79fb      	ldrb	r3, [r7, #7]
 801baa8:	2b01      	cmp	r3, #1
 801baaa:	d104      	bne.n	801bab6 <My_EMS_to_SMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801baac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801bab0:	4803      	ldr	r0, [pc, #12]	@ (801bac0 <My_EMS_to_SMS_Timer+0x40>)
 801bab2:	f7ea fce1 	bl	8006478 <HAL_RTC_DeactivateAlarm>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_OPEN);
#endif
	}
}
 801bab6:	bf00      	nop
 801bab8:	3708      	adds	r7, #8
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}
 801babe:	bf00      	nop
 801bac0:	200006ec 	.word	0x200006ec

0801bac4 <My_MX_I2C1_Init>:


/* Sensor Section Begin */

HAL_StatusTypeDef My_MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 801bac4:	b580      	push	{r7, lr}
 801bac6:	b084      	sub	sp, #16
 801bac8:	af00      	add	r7, sp, #0
 801baca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801bacc:	2300      	movs	r3, #0
 801bace:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C1;
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	4a1c      	ldr	r2, [pc, #112]	@ (801bb44 <My_MX_I2C1_Init+0x80>)
 801bad4:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	4a1b      	ldr	r2, [pc, #108]	@ (801bb48 <My_MX_I2C1_Init+0x84>)
 801bada:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	2200      	movs	r2, #0
 801bae0:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	2201      	movs	r2, #1
 801bae6:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	2200      	movs	r2, #0
 801baec:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	2200      	movs	r2, #0
 801baf2:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	2200      	movs	r2, #0
 801baf8:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	2200      	movs	r2, #0
 801bafe:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	2200      	movs	r2, #0
 801bb04:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801bb06:	6878      	ldr	r0, [r7, #4]
 801bb08:	f7e7 febc 	bl	8003884 <HAL_I2C_Init>
 801bb0c:	4603      	mov	r3, r0
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d001      	beq.n	801bb16 <My_MX_I2C1_Init+0x52>
	{
		ret = HAL_ERROR;
 801bb12:	2301      	movs	r3, #1
 801bb14:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801bb16:	2100      	movs	r1, #0
 801bb18:	6878      	ldr	r0, [r7, #4]
 801bb1a:	f7e8 fb9f 	bl	800425c <HAL_I2CEx_ConfigAnalogFilter>
 801bb1e:	4603      	mov	r3, r0
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d001      	beq.n	801bb28 <My_MX_I2C1_Init+0x64>
	{
		ret = HAL_ERROR;
 801bb24:	2301      	movs	r3, #1
 801bb26:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801bb28:	2100      	movs	r1, #0
 801bb2a:	6878      	ldr	r0, [r7, #4]
 801bb2c:	f7e8 fbe0 	bl	80042f0 <HAL_I2CEx_ConfigDigitalFilter>
 801bb30:	4603      	mov	r3, r0
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d001      	beq.n	801bb3a <My_MX_I2C1_Init+0x76>
	{
		ret = HAL_ERROR;
 801bb36:	2301      	movs	r3, #1
 801bb38:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801bb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	3710      	adds	r7, #16
 801bb40:	46bd      	mov	sp, r7
 801bb42:	bd80      	pop	{r7, pc}
 801bb44:	40005400 	.word	0x40005400
 801bb48:	9010deff 	.word	0x9010deff

0801bb4c <My_I2C1_MspInit>:

void My_I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b096      	sub	sp, #88	@ 0x58
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801bb54:	f107 030c 	add.w	r3, r7, #12
 801bb58:	2238      	movs	r2, #56	@ 0x38
 801bb5a:	2100      	movs	r1, #0
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f003 fbae 	bl	801f2be <memset>

	/* USER CODE END I2C1_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 801bb62:	2340      	movs	r3, #64	@ 0x40
 801bb64:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801bb66:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 801bb6a:	623b      	str	r3, [r7, #32]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801bb6c:	f107 030c 	add.w	r3, r7, #12
 801bb70:	4618      	mov	r0, r3
 801bb72:	f7ea f855 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOB_CLK_ENABLE();
 801bb76:	2002      	movs	r0, #2
 801bb78:	f7ff f952 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801bb7c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801bb80:	647b      	str	r3, [r7, #68]	@ 0x44

	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801bb82:	2312      	movs	r3, #18
 801bb84:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bb86:	2301      	movs	r3, #1
 801bb88:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bb8a:	2303      	movs	r3, #3
 801bb8c:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801bb8e:	2304      	movs	r3, #4
 801bb90:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801bb92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801bb96:	4619      	mov	r1, r3
 801bb98:	4805      	ldr	r0, [pc, #20]	@ (801bbb0 <My_I2C1_MspInit+0x64>)
 801bb9a:	f7e7 fc0b 	bl	80033b4 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 801bb9e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801bba2:	f7ff f967 	bl	801ae74 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C1_MspInit 1 */

	/* USER CODE END I2C1_MspInit 1 */
}
 801bba6:	bf00      	nop
 801bba8:	3758      	adds	r7, #88	@ 0x58
 801bbaa:	46bd      	mov	sp, r7
 801bbac:	bd80      	pop	{r7, pc}
 801bbae:	bf00      	nop
 801bbb0:	48000400 	.word	0x48000400

0801bbb4 <My_I2C1_MspDeInit>:

void My_I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801bbb4:	b580      	push	{r7, lr}
 801bbb6:	b082      	sub	sp, #8
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C1_MspDeInit 0 */

	/* USER CODE END I2C1_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C1_CLK_DISABLE();
 801bbbc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801bbc0:	f7ff f970 	bl	801aea4 <LL_APB1_GRP1_DisableClock>

	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 801bbc4:	2180      	movs	r1, #128	@ 0x80
 801bbc6:	4806      	ldr	r0, [pc, #24]	@ (801bbe0 <My_I2C1_MspDeInit+0x2c>)
 801bbc8:	f7e7 fd54 	bl	8003674 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 801bbcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801bbd0:	4803      	ldr	r0, [pc, #12]	@ (801bbe0 <My_I2C1_MspDeInit+0x2c>)
 801bbd2:	f7e7 fd4f 	bl	8003674 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C1_MspDeInit 1 */

	/* USER CODE END I2C1_MspDeInit 1 */
}
 801bbd6:	bf00      	nop
 801bbd8:	3708      	adds	r7, #8
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	bd80      	pop	{r7, pc}
 801bbde:	bf00      	nop
 801bbe0:	48000400 	.word	0x48000400

0801bbe4 <My_MX_I2C2_Init>:


HAL_StatusTypeDef My_MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b084      	sub	sp, #16
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801bbec:	2300      	movs	r3, #0
 801bbee:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C2;
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	4a1c      	ldr	r2, [pc, #112]	@ (801bc64 <My_MX_I2C2_Init+0x80>)
 801bbf4:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	4a1b      	ldr	r2, [pc, #108]	@ (801bc68 <My_MX_I2C2_Init+0x84>)
 801bbfa:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	2200      	movs	r2, #0
 801bc00:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	2201      	movs	r2, #1
 801bc06:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	2200      	movs	r2, #0
 801bc0c:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	2200      	movs	r2, #0
 801bc12:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	2200      	movs	r2, #0
 801bc18:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	2200      	movs	r2, #0
 801bc24:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801bc26:	6878      	ldr	r0, [r7, #4]
 801bc28:	f7e7 fe2c 	bl	8003884 <HAL_I2C_Init>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d001      	beq.n	801bc36 <My_MX_I2C2_Init+0x52>
	{
		ret = HAL_ERROR;
 801bc32:	2301      	movs	r3, #1
 801bc34:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801bc36:	2100      	movs	r1, #0
 801bc38:	6878      	ldr	r0, [r7, #4]
 801bc3a:	f7e8 fb0f 	bl	800425c <HAL_I2CEx_ConfigAnalogFilter>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d001      	beq.n	801bc48 <My_MX_I2C2_Init+0x64>
	{
		ret = HAL_ERROR;
 801bc44:	2301      	movs	r3, #1
 801bc46:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801bc48:	2100      	movs	r1, #0
 801bc4a:	6878      	ldr	r0, [r7, #4]
 801bc4c:	f7e8 fb50 	bl	80042f0 <HAL_I2CEx_ConfigDigitalFilter>
 801bc50:	4603      	mov	r3, r0
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d001      	beq.n	801bc5a <My_MX_I2C2_Init+0x76>
	{
		ret = HAL_ERROR;
 801bc56:	2301      	movs	r3, #1
 801bc58:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801bc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	3710      	adds	r7, #16
 801bc60:	46bd      	mov	sp, r7
 801bc62:	bd80      	pop	{r7, pc}
 801bc64:	40005800 	.word	0x40005800
 801bc68:	9010deff 	.word	0x9010deff

0801bc6c <My_I2C2_MspInit>:

void My_I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b096      	sub	sp, #88	@ 0x58
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801bc74:	f107 030c 	add.w	r3, r7, #12
 801bc78:	2238      	movs	r2, #56	@ 0x38
 801bc7a:	2100      	movs	r1, #0
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	f003 fb1e 	bl	801f2be <memset>

	/* USER CODE END I2C2_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801bc82:	2380      	movs	r3, #128	@ 0x80
 801bc84:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801bc86:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 801bc8a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801bc8c:	f107 030c 	add.w	r3, r7, #12
 801bc90:	4618      	mov	r0, r3
 801bc92:	f7e9 ffc5 	bl	8005c20 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 801bc96:	2001      	movs	r0, #1
 801bc98:	f7ff f8c2 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 801bc9c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 801bca0:	647b      	str	r3, [r7, #68]	@ 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801bca2:	2312      	movs	r3, #18
 801bca4:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bca6:	2301      	movs	r3, #1
 801bca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bcaa:	2303      	movs	r3, #3
 801bcac:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801bcae:	2304      	movs	r3, #4
 801bcb0:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bcb2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801bcb6:	4619      	mov	r1, r3
 801bcb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801bcbc:	f7e7 fb7a 	bl	80033b4 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C2_CLK_ENABLE();
 801bcc0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801bcc4:	f7ff f8d6 	bl	801ae74 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C2_MspInit 1 */

	/* USER CODE END I2C2_MspInit 1 */
}
 801bcc8:	bf00      	nop
 801bcca:	3758      	adds	r7, #88	@ 0x58
 801bccc:	46bd      	mov	sp, r7
 801bcce:	bd80      	pop	{r7, pc}

0801bcd0 <My_I2C2_MspDeInit>:

void My_I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b082      	sub	sp, #8
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C2_MspDeInit 0 */

	/* USER CODE END I2C2_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C2_CLK_DISABLE();
 801bcd8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801bcdc:	f7ff f8e2 	bl	801aea4 <LL_APB1_GRP1_DisableClock>

	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 801bce0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801bce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801bce8:	f7e7 fcc4 	bl	8003674 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 801bcec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801bcf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801bcf4:	f7e7 fcbe 	bl	8003674 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C2_MspDeInit 1 */

	/* USER CODE END I2C2_MspDeInit 1 */
}
 801bcf8:	bf00      	nop
 801bcfa:	3708      	adds	r7, #8
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bd80      	pop	{r7, pc}

0801bd00 <My_I2C_Init>:


void My_I2C_Init(My_I2C_td mode)
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b082      	sub	sp, #8
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	4603      	mov	r3, r0
 801bd08:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801bd0a:	79fb      	ldrb	r3, [r7, #7]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d002      	beq.n	801bd16 <My_I2C_Init+0x16>
 801bd10:	2b01      	cmp	r3, #1
 801bd12:	d007      	beq.n	801bd24 <My_I2C_Init+0x24>
		break;
	}

	default:
	{
		break;
 801bd14:	e00d      	b.n	801bd32 <My_I2C_Init+0x32>
		My_I2C1_MspInit(&hi2c1);
 801bd16:	4809      	ldr	r0, [pc, #36]	@ (801bd3c <My_I2C_Init+0x3c>)
 801bd18:	f7ff ff18 	bl	801bb4c <My_I2C1_MspInit>
		My_MX_I2C1_Init(&hi2c1);
 801bd1c:	4807      	ldr	r0, [pc, #28]	@ (801bd3c <My_I2C_Init+0x3c>)
 801bd1e:	f7ff fed1 	bl	801bac4 <My_MX_I2C1_Init>
		break;
 801bd22:	e006      	b.n	801bd32 <My_I2C_Init+0x32>
		My_I2C2_MspInit(&hi2c2);
 801bd24:	4806      	ldr	r0, [pc, #24]	@ (801bd40 <My_I2C_Init+0x40>)
 801bd26:	f7ff ffa1 	bl	801bc6c <My_I2C2_MspInit>
		My_MX_I2C2_Init(&hi2c2);
 801bd2a:	4805      	ldr	r0, [pc, #20]	@ (801bd40 <My_I2C_Init+0x40>)
 801bd2c:	f7ff ff5a 	bl	801bbe4 <My_MX_I2C2_Init>
		break;
 801bd30:	bf00      	nop
	}
	}
}
 801bd32:	bf00      	nop
 801bd34:	3708      	adds	r7, #8
 801bd36:	46bd      	mov	sp, r7
 801bd38:	bd80      	pop	{r7, pc}
 801bd3a:	bf00      	nop
 801bd3c:	20001bd8 	.word	0x20001bd8
 801bd40:	20001c2c 	.word	0x20001c2c

0801bd44 <My_I2C_Deinit>:

void My_I2C_Deinit(My_I2C_td mode)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b082      	sub	sp, #8
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801bd4e:	79fb      	ldrb	r3, [r7, #7]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d002      	beq.n	801bd5a <My_I2C_Deinit+0x16>
 801bd54:	2b01      	cmp	r3, #1
 801bd56:	d004      	beq.n	801bd62 <My_I2C_Deinit+0x1e>
		break;
	}

	default:
	{
		break;
 801bd58:	e007      	b.n	801bd6a <My_I2C_Deinit+0x26>
		My_I2C1_MspDeInit(&hi2c1);
 801bd5a:	4806      	ldr	r0, [pc, #24]	@ (801bd74 <My_I2C_Deinit+0x30>)
 801bd5c:	f7ff ff2a 	bl	801bbb4 <My_I2C1_MspDeInit>
		break;
 801bd60:	e003      	b.n	801bd6a <My_I2C_Deinit+0x26>
		My_I2C2_MspDeInit(&hi2c2);
 801bd62:	4805      	ldr	r0, [pc, #20]	@ (801bd78 <My_I2C_Deinit+0x34>)
 801bd64:	f7ff ffb4 	bl	801bcd0 <My_I2C2_MspDeInit>
		break;
 801bd68:	bf00      	nop
	}
	}
}
 801bd6a:	bf00      	nop
 801bd6c:	3708      	adds	r7, #8
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bd80      	pop	{r7, pc}
 801bd72:	bf00      	nop
 801bd74:	20001bd8 	.word	0x20001bd8
 801bd78:	20001c2c 	.word	0x20001c2c

0801bd7c <My_SHT40_Get_Data>:

#if MY_SHT40

void My_SHT40_Get_Data(void)
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b086      	sub	sp, #24
 801bd80:	af02      	add	r7, sp, #8
	my_SHT40_Temp = 0;																								// Reset my_SHT40_Temp
 801bd82:	4b4d      	ldr	r3, [pc, #308]	@ (801beb8 <My_SHT40_Get_Data+0x13c>)
 801bd84:	2200      	movs	r2, #0
 801bd86:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid = 0;																								// Reset my_SHT40_Humid
 801bd88:	4b4c      	ldr	r3, [pc, #304]	@ (801bebc <My_SHT40_Get_Data+0x140>)
 801bd8a:	2200      	movs	r2, #0
 801bd8c:	601a      	str	r2, [r3, #0]

	uint8_t SHT40_Raw_Data[6];																						// Define raw data vector
	memset(SHT40_Raw_Data, 0, sizeof(SHT40_Raw_Data));																// Initialize raw data vector
 801bd8e:	1d3b      	adds	r3, r7, #4
 801bd90:	2206      	movs	r2, #6
 801bd92:	2100      	movs	r1, #0
 801bd94:	4618      	mov	r0, r3
 801bd96:	f003 fa92 	bl	801f2be <memset>

	uint8_t SHT40_Measure_Cmd = SHT40_MEASURE_CMD_HP;																// Initialize SHT40 Address
 801bd9a:	23fd      	movs	r3, #253	@ 0xfd
 801bd9c:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, SHT40AD1B_I2C_ADDRESS, &SHT40_Measure_Cmd, 1, HAL_MAX_DELAY); 					// Transmit Data through I2C2
 801bd9e:	1cfa      	adds	r2, r7, #3
 801bda0:	f04f 33ff 	mov.w	r3, #4294967295
 801bda4:	9300      	str	r3, [sp, #0]
 801bda6:	2301      	movs	r3, #1
 801bda8:	2189      	movs	r1, #137	@ 0x89
 801bdaa:	4845      	ldr	r0, [pc, #276]	@ (801bec0 <My_SHT40_Get_Data+0x144>)
 801bdac:	f7e7 fe02 	bl	80039b4 <HAL_I2C_Master_Transmit>

	My_HAL_Delay(25);																								// Add delay to ensure the sensor is ready to provide data
 801bdb0:	2019      	movs	r0, #25
 801bdb2:	f000 fcc9 	bl	801c748 <My_HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c2, SHT40AD1B_I2C_ADDRESS, SHT40_Raw_Data, sizeof(SHT40_Raw_Data), HAL_MAX_DELAY);	// Receive Data through I2C2
 801bdb6:	1d3a      	adds	r2, r7, #4
 801bdb8:	f04f 33ff 	mov.w	r3, #4294967295
 801bdbc:	9300      	str	r3, [sp, #0]
 801bdbe:	2306      	movs	r3, #6
 801bdc0:	2189      	movs	r1, #137	@ 0x89
 801bdc2:	483f      	ldr	r0, [pc, #252]	@ (801bec0 <My_SHT40_Get_Data+0x144>)
 801bdc4:	f7e7 feea 	bl	8003b9c <HAL_I2C_Master_Receive>

	uint16_t SHT40_Raw_Temp = (SHT40_Raw_Data[0] << 8) | SHT40_Raw_Data[1];											// Temperature Data From SHT40
 801bdc8:	793b      	ldrb	r3, [r7, #4]
 801bdca:	b21b      	sxth	r3, r3
 801bdcc:	021b      	lsls	r3, r3, #8
 801bdce:	b21a      	sxth	r2, r3
 801bdd0:	797b      	ldrb	r3, [r7, #5]
 801bdd2:	b21b      	sxth	r3, r3
 801bdd4:	4313      	orrs	r3, r2
 801bdd6:	b21b      	sxth	r3, r3
 801bdd8:	81fb      	strh	r3, [r7, #14]
	uint16_t SHT40_Raw_Humid = (SHT40_Raw_Data[3] << 8) | SHT40_Raw_Data[4];										// Relative Humidity (RH) From SHT40
 801bdda:	79fb      	ldrb	r3, [r7, #7]
 801bddc:	b21b      	sxth	r3, r3
 801bdde:	021b      	lsls	r3, r3, #8
 801bde0:	b21a      	sxth	r2, r3
 801bde2:	7a3b      	ldrb	r3, [r7, #8]
 801bde4:	b21b      	sxth	r3, r3
 801bde6:	4313      	orrs	r3, r2
 801bde8:	b21b      	sxth	r3, r3
 801bdea:	81bb      	strh	r3, [r7, #12]

//	float my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
//	float my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
	my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
 801bdec:	89fb      	ldrh	r3, [r7, #14]
 801bdee:	4618      	mov	r0, r3
 801bdf0:	f7e4 fd40 	bl	8000874 <__aeabi_ui2f>
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	4933      	ldr	r1, [pc, #204]	@ (801bec4 <My_SHT40_Get_Data+0x148>)
 801bdf8:	4618      	mov	r0, r3
 801bdfa:	f7e4 fe47 	bl	8000a8c <__aeabi_fdiv>
 801bdfe:	4603      	mov	r3, r0
 801be00:	4931      	ldr	r1, [pc, #196]	@ (801bec8 <My_SHT40_Get_Data+0x14c>)
 801be02:	4618      	mov	r0, r3
 801be04:	f7e4 fd8e 	bl	8000924 <__aeabi_fmul>
 801be08:	4603      	mov	r3, r0
 801be0a:	4930      	ldr	r1, [pc, #192]	@ (801becc <My_SHT40_Get_Data+0x150>)
 801be0c:	4618      	mov	r0, r3
 801be0e:	f7e4 fc7f 	bl	8000710 <__aeabi_fsub>
 801be12:	4603      	mov	r3, r0
 801be14:	461a      	mov	r2, r3
 801be16:	4b2e      	ldr	r3, [pc, #184]	@ (801bed0 <My_SHT40_Get_Data+0x154>)
 801be18:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
 801be1a:	89bb      	ldrh	r3, [r7, #12]
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7e4 fd29 	bl	8000874 <__aeabi_ui2f>
 801be22:	4603      	mov	r3, r0
 801be24:	4927      	ldr	r1, [pc, #156]	@ (801bec4 <My_SHT40_Get_Data+0x148>)
 801be26:	4618      	mov	r0, r3
 801be28:	f7e4 fe30 	bl	8000a8c <__aeabi_fdiv>
 801be2c:	4603      	mov	r3, r0
 801be2e:	4929      	ldr	r1, [pc, #164]	@ (801bed4 <My_SHT40_Get_Data+0x158>)
 801be30:	4618      	mov	r0, r3
 801be32:	f7e4 fd77 	bl	8000924 <__aeabi_fmul>
 801be36:	4603      	mov	r3, r0
 801be38:	4927      	ldr	r1, [pc, #156]	@ (801bed8 <My_SHT40_Get_Data+0x15c>)
 801be3a:	4618      	mov	r0, r3
 801be3c:	f7e4 fc68 	bl	8000710 <__aeabi_fsub>
 801be40:	4603      	mov	r3, r0
 801be42:	461a      	mov	r2, r3
 801be44:	4b25      	ldr	r3, [pc, #148]	@ (801bedc <My_SHT40_Get_Data+0x160>)
 801be46:	601a      	str	r2, [r3, #0]

	if (my_SHT40_Humid_Float > 100.0f)																				// Clamp Humidity values to valid range (0-100%)
 801be48:	4b24      	ldr	r3, [pc, #144]	@ (801bedc <My_SHT40_Get_Data+0x160>)
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	4924      	ldr	r1, [pc, #144]	@ (801bee0 <My_SHT40_Get_Data+0x164>)
 801be4e:	4618      	mov	r0, r3
 801be50:	f7e4 ff24 	bl	8000c9c <__aeabi_fcmpgt>
 801be54:	4603      	mov	r3, r0
 801be56:	2b00      	cmp	r3, #0
 801be58:	d002      	beq.n	801be60 <My_SHT40_Get_Data+0xe4>
	{
		my_SHT40_Humid_Float = 100.0f;
 801be5a:	4b20      	ldr	r3, [pc, #128]	@ (801bedc <My_SHT40_Get_Data+0x160>)
 801be5c:	4a20      	ldr	r2, [pc, #128]	@ (801bee0 <My_SHT40_Get_Data+0x164>)
 801be5e:	601a      	str	r2, [r3, #0]
	}

	if (my_SHT40_Humid_Float < 0.0f)																				// Clamp Humidity values to valid range (0-100%)
 801be60:	4b1e      	ldr	r3, [pc, #120]	@ (801bedc <My_SHT40_Get_Data+0x160>)
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f04f 0100 	mov.w	r1, #0
 801be68:	4618      	mov	r0, r3
 801be6a:	f7e4 fef9 	bl	8000c60 <__aeabi_fcmplt>
 801be6e:	4603      	mov	r3, r0
 801be70:	2b00      	cmp	r3, #0
 801be72:	d003      	beq.n	801be7c <My_SHT40_Get_Data+0x100>
	{
		my_SHT40_Humid_Float = 0.0f;
 801be74:	4b19      	ldr	r3, [pc, #100]	@ (801bedc <My_SHT40_Get_Data+0x160>)
 801be76:	f04f 0200 	mov.w	r2, #0
 801be7a:	601a      	str	r2, [r3, #0]
	}

	my_SHT40_Temp =  (uint32_t)(10*my_SHT40_Temp_Float);															// Scale Temperature Value and convert to integer values
 801be7c:	4b14      	ldr	r3, [pc, #80]	@ (801bed0 <My_SHT40_Get_Data+0x154>)
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	4918      	ldr	r1, [pc, #96]	@ (801bee4 <My_SHT40_Get_Data+0x168>)
 801be82:	4618      	mov	r0, r3
 801be84:	f7e4 fd4e 	bl	8000924 <__aeabi_fmul>
 801be88:	4603      	mov	r3, r0
 801be8a:	4618      	mov	r0, r3
 801be8c:	f7e4 ff36 	bl	8000cfc <__aeabi_f2uiz>
 801be90:	4603      	mov	r3, r0
 801be92:	4a09      	ldr	r2, [pc, #36]	@ (801beb8 <My_SHT40_Get_Data+0x13c>)
 801be94:	6013      	str	r3, [r2, #0]
	my_SHT40_Humid = (uint32_t)(10*my_SHT40_Humid_Float);															// Scale Humidity Value and convert to integer values
 801be96:	4b11      	ldr	r3, [pc, #68]	@ (801bedc <My_SHT40_Get_Data+0x160>)
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	4912      	ldr	r1, [pc, #72]	@ (801bee4 <My_SHT40_Get_Data+0x168>)
 801be9c:	4618      	mov	r0, r3
 801be9e:	f7e4 fd41 	bl	8000924 <__aeabi_fmul>
 801bea2:	4603      	mov	r3, r0
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7e4 ff29 	bl	8000cfc <__aeabi_f2uiz>
 801beaa:	4603      	mov	r3, r0
 801beac:	4a03      	ldr	r2, [pc, #12]	@ (801bebc <My_SHT40_Get_Data+0x140>)
 801beae:	6013      	str	r3, [r2, #0]
}
 801beb0:	bf00      	nop
 801beb2:	3710      	adds	r7, #16
 801beb4:	46bd      	mov	sp, r7
 801beb6:	bd80      	pop	{r7, pc}
 801beb8:	20001b90 	.word	0x20001b90
 801bebc:	20001b94 	.word	0x20001b94
 801bec0:	20001c2c 	.word	0x20001c2c
 801bec4:	477fff00 	.word	0x477fff00
 801bec8:	432f0000 	.word	0x432f0000
 801becc:	42340000 	.word	0x42340000
 801bed0:	20001b88 	.word	0x20001b88
 801bed4:	42fa0000 	.word	0x42fa0000
 801bed8:	40c00000 	.word	0x40c00000
 801bedc:	20001b8c 	.word	0x20001b8c
 801bee0:	42c80000 	.word	0x42c80000
 801bee4:	41200000 	.word	0x41200000

0801bee8 <My_Set_All_GPIO_To_Analog_Mode>:
#endif

/* Sensor Section End */

void My_Set_All_GPIO_To_Analog_Mode(void)
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b086      	sub	sp, #24
 801beec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801beee:	1d3b      	adds	r3, r7, #4
 801bef0:	2200      	movs	r2, #0
 801bef2:	601a      	str	r2, [r3, #0]
 801bef4:	605a      	str	r2, [r3, #4]
 801bef6:	609a      	str	r2, [r3, #8]
 801bef8:	60da      	str	r2, [r3, #12]
 801befa:	611a      	str	r2, [r3, #16]

	// Enable clocks for all available GPIO ports
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801befc:	2001      	movs	r0, #1
 801befe:	f7fe ff8f 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801bf02:	2002      	movs	r0, #2
 801bf04:	f7fe ff8c 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801bf08:	2004      	movs	r0, #4
 801bf0a:	f7fe ff89 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801bf0e:	2080      	movs	r0, #128	@ 0x80
 801bf10:	f7fe ff86 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>

	// Configure all pins of the GPIO ports as analog to reduce power consumption
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801bf14:	2303      	movs	r3, #3
 801bf16:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bf18:	2300      	movs	r3, #0
 801bf1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 801bf1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bf20:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bf22:	1d3b      	adds	r3, r7, #4
 801bf24:	4619      	mov	r1, r3
 801bf26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801bf2a:	f7e7 fa43 	bl	80033b4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801bf2e:	1d3b      	adds	r3, r7, #4
 801bf30:	4619      	mov	r1, r3
 801bf32:	480e      	ldr	r0, [pc, #56]	@ (801bf6c <My_Set_All_GPIO_To_Analog_Mode+0x84>)
 801bf34:	f7e7 fa3e 	bl	80033b4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bf38:	1d3b      	adds	r3, r7, #4
 801bf3a:	4619      	mov	r1, r3
 801bf3c:	480c      	ldr	r0, [pc, #48]	@ (801bf70 <My_Set_All_GPIO_To_Analog_Mode+0x88>)
 801bf3e:	f7e7 fa39 	bl	80033b4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801bf42:	1d3b      	adds	r3, r7, #4
 801bf44:	4619      	mov	r1, r3
 801bf46:	480b      	ldr	r0, [pc, #44]	@ (801bf74 <My_Set_All_GPIO_To_Analog_Mode+0x8c>)
 801bf48:	f7e7 fa34 	bl	80033b4 <HAL_GPIO_Init>

	// Disable clocks to save power
	__HAL_RCC_GPIOA_CLK_DISABLE();
 801bf4c:	2001      	movs	r0, #1
 801bf4e:	f7fe ff7f 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801bf52:	2002      	movs	r0, #2
 801bf54:	f7fe ff7c 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801bf58:	2004      	movs	r0, #4
 801bf5a:	f7fe ff79 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801bf5e:	2080      	movs	r0, #128	@ 0x80
 801bf60:	f7fe ff76 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
}
 801bf64:	bf00      	nop
 801bf66:	3718      	adds	r7, #24
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	bd80      	pop	{r7, pc}
 801bf6c:	48000400 	.word	0x48000400
 801bf70:	48000800 	.word	0x48000800
 801bf74:	48001c00 	.word	0x48001c00

0801bf78 <My_Enter_Stop2_Mode_WFI>:

void My_Enter_Stop2_Mode_WFI(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Enter in STOP2 MODE and Wait for Interrupts (WFI)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b082      	sub	sp, #8
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]
 801bf80:	6039      	str	r1, [r7, #0]

	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801bf82:	4a31      	ldr	r2, [pc, #196]	@ (801c048 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Config PVD to provide Interrupt
 801bf88:	4a2f      	ldr	r2, [pc, #188]	@ (801c048 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801bf8a:	683b      	ldr	r3, [r7, #0]
 801bf8c:	6053      	str	r3, [r2, #4]

	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801bf8e:	482e      	ldr	r0, [pc, #184]	@ (801c048 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801bf90:	f7e8 fa78 	bl	8004484 <HAL_PWR_ConfigPVD>

	if (my_MX_GPIO_Init_done == 1)
 801bf94:	4b2d      	ldr	r3, [pc, #180]	@ (801c04c <My_Enter_Stop2_Mode_WFI+0xd4>)
 801bf96:	781b      	ldrb	r3, [r3, #0]
 801bf98:	2b01      	cmp	r3, #1
 801bf9a:	d101      	bne.n	801bfa0 <My_Enter_Stop2_Mode_WFI+0x28>
	{
		BSP_RADIO_DeInit();											// Deinit the External Radio Amplifier
 801bf9c:	f7e6 fb94 	bl	80026c8 <BSP_RADIO_DeInit>
	}

	if (my_SystemClock_Config_done == 1)							// Check if the Clock System has been configured
 801bfa0:	4b2b      	ldr	r3, [pc, #172]	@ (801c050 <My_Enter_Stop2_Mode_WFI+0xd8>)
 801bfa2:	781b      	ldrb	r3, [r3, #0]
 801bfa4:	2b01      	cmp	r3, #1
 801bfa6:	d104      	bne.n	801bfb2 <My_Enter_Stop2_Mode_WFI+0x3a>
	{
		HAL_SuspendTick();											// Suspend Tick increment of System Clock
 801bfa8:	f7e6 fc82 	bl	80028b0 <HAL_SuspendTick>
		__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI); 	// Ensure that MSI is wake-up system clock
 801bfac:	2000      	movs	r0, #0
 801bfae:	f7fe ff24 	bl	801adfa <LL_RCC_SetClkAfterWakeFromStop>
	}

	if((LL_PWR_IsActiveFlag_C1SB() == 0) || (LL_PWR_IsActiveFlag_C2SB() == 0))
 801bfb2:	f7fe fecd 	bl	801ad50 <LL_PWR_IsActiveFlag_C1SB>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d004      	beq.n	801bfc6 <My_Enter_Stop2_Mode_WFI+0x4e>
 801bfbc:	f7fe fedc 	bl	801ad78 <LL_PWR_IsActiveFlag_C2SB>
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d109      	bne.n	801bfda <My_Enter_Stop2_Mode_WFI+0x62>
	{
		LL_PWR_ClearFlag_C1STOP_C1STB();			  				// Clear standby and stop flags for CPU1
 801bfc6:	f7fe feeb 	bl	801ada0 <LL_PWR_ClearFlag_C1STOP_C1STB>
		LL_PWR_ClearFlag_C2STOP_C2STB();							// Clear standby and stop flags for CPU2
 801bfca:	f7fe fef5 	bl	801adb8 <LL_PWR_ClearFlag_C2STOP_C2STB>
		LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN); 				// Set the lowest low-power mode for CPU2: shutdown mode
 801bfce:	2007      	movs	r0, #7
 801bfd0:	f7fe fea8 	bl	801ad24 <LL_C2_PWR_SetPowerMode>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);						// Set Low-Power mode for CPU1
 801bfd4:	2002      	movs	r0, #2
 801bfd6:	f7fe fe91 	bl	801acfc <LL_PWR_SetPowerMode>
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801bfda:	2001      	movs	r0, #1
 801bfdc:	f000 f870 	bl	801c0c0 <My_Interrupts_Manager>
	HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);							// Clear Pending Bit for PVD
 801bfe0:	2001      	movs	r0, #1
 801bfe2:	f7e6 fdc0 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);						// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801bfe6:	202a      	movs	r0, #42	@ 0x2a
 801bfe8:	f7e6 fdbd 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(COMP_IRQn);							// Clear Pending Bit for Comparator
 801bfec:	2015      	movs	r0, #21
 801bfee:	f7e6 fdba 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801bff2:	4b18      	ldr	r3, [pc, #96]	@ (801c054 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801bff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bff8:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801bffa:	4b16      	ldr	r3, [pc, #88]	@ (801c054 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801bffc:	2207      	movs	r2, #7
 801bffe:	619a      	str	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801c000:	2001      	movs	r0, #1
 801c002:	f7e6 fd94 	bl	8002b2e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);								// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801c006:	202a      	movs	r0, #42	@ 0x2a
 801c008:	f7e6 fd91 	bl	8002b2e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPTIM1_IRQn);								// Enable Interrupt for LPTIM1
 801c00c:	2027      	movs	r0, #39	@ 0x27
 801c00e:	f7e6 fd8e 	bl	8002b2e <HAL_NVIC_EnableIRQ>

	if (__HAL_PWR_GET_FLAG(PWR_CR1_LPR) == 1)						// Check if PWR_CR1_LPR is set (must be 0 in Stop2 Mode)
 801c012:	4b10      	ldr	r3, [pc, #64]	@ (801c054 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c018:	f003 0301 	and.w	r3, r3, #1
 801c01c:	2b01      	cmp	r3, #1
 801c01e:	d105      	bne.n	801c02c <My_Enter_Stop2_Mode_WFI+0xb4>
	{
		CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 							// LPR bit must be cleared to enter stop 2 mode.
 801c020:	4b0c      	ldr	r3, [pc, #48]	@ (801c054 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4a0b      	ldr	r2, [pc, #44]	@ (801c054 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801c02a:	6013      	str	r3, [r2, #0]
	}

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);					// Enter STOP2 mode and WFI
 801c02c:	2001      	movs	r0, #1
 801c02e:	f7e8 fbb1 	bl	8004794 <HAL_PWREx_EnterSTOP2Mode>

	if (my_SubghzApp_Init_done == 0)
 801c032:	4b09      	ldr	r3, [pc, #36]	@ (801c058 <My_Enter_Stop2_Mode_WFI+0xe0>)
 801c034:	781b      	ldrb	r3, [r3, #0]
 801c036:	2b00      	cmp	r3, #0
 801c038:	d101      	bne.n	801c03e <My_Enter_Stop2_Mode_WFI+0xc6>
	{
		My_Exit_Stop2_Mode_WFI();									// Exit From Stop2 Mode
 801c03a:	f000 f80f 	bl	801c05c <My_Exit_Stop2_Mode_WFI>
	}
}
 801c03e:	bf00      	nop
 801c040:	3708      	adds	r7, #8
 801c042:	46bd      	mov	sp, r7
 801c044:	bd80      	pop	{r7, pc}
 801c046:	bf00      	nop
 801c048:	20001b7c 	.word	0x20001b7c
 801c04c:	20000840 	.word	0x20000840
 801c050:	200006e8 	.word	0x200006e8
 801c054:	58000400 	.word	0x58000400
 801c058:	20000843 	.word	0x20000843

0801c05c <My_Exit_Stop2_Mode_WFI>:

void My_Exit_Stop2_Mode_WFI(void)	// Exit Stop2 Mode After Interrupt
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	af00      	add	r7, sp, #0
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);		// Undervolting
 801c060:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801c064:	f7e8 fad6 	bl	8004614 <HAL_PWREx_ControlVoltageScaling>
	My_Interrupts_Manager(NVIC_ENABLE);									// Re-Enable Interrupts
 801c068:	2000      	movs	r0, #0
 801c06a:	f000 f829 	bl	801c0c0 <My_Interrupts_Manager>
	if (my_SystemClock_Config_done == 1)
 801c06e:	4b04      	ldr	r3, [pc, #16]	@ (801c080 <My_Exit_Stop2_Mode_WFI+0x24>)
 801c070:	781b      	ldrb	r3, [r3, #0]
 801c072:	2b01      	cmp	r3, #1
 801c074:	d101      	bne.n	801c07a <My_Exit_Stop2_Mode_WFI+0x1e>
	{
		HAL_ResumeTick();												// Resume Tick Increment
 801c076:	f7e6 fc29 	bl	80028cc <HAL_ResumeTick>
	}
}
 801c07a:	bf00      	nop
 801c07c:	bd80      	pop	{r7, pc}
 801c07e:	bf00      	nop
 801c080:	200006e8 	.word	0x200006e8

0801c084 <My_Set_PVD>:

void My_Set_PVD(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Sets PVD Threshold and Interrupt Modes
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b082      	sub	sp, #8
 801c088:	af00      	add	r7, sp, #0
 801c08a:	6078      	str	r0, [r7, #4]
 801c08c:	6039      	str	r1, [r7, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801c08e:	4b0a      	ldr	r3, [pc, #40]	@ (801c0b8 <My_Set_PVD+0x34>)
 801c090:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c094:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801c096:	4b08      	ldr	r3, [pc, #32]	@ (801c0b8 <My_Set_PVD+0x34>)
 801c098:	2207      	movs	r2, #7
 801c09a:	619a      	str	r2, [r3, #24]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801c09c:	4a07      	ldr	r2, [pc, #28]	@ (801c0bc <My_Set_PVD+0x38>)
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Set PVD to provide Interrupt
 801c0a2:	4a06      	ldr	r2, [pc, #24]	@ (801c0bc <My_Set_PVD+0x38>)
 801c0a4:	683b      	ldr	r3, [r7, #0]
 801c0a6:	6053      	str	r3, [r2, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801c0a8:	4804      	ldr	r0, [pc, #16]	@ (801c0bc <My_Set_PVD+0x38>)
 801c0aa:	f7e8 f9eb 	bl	8004484 <HAL_PWR_ConfigPVD>
}
 801c0ae:	bf00      	nop
 801c0b0:	3708      	adds	r7, #8
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bd80      	pop	{r7, pc}
 801c0b6:	bf00      	nop
 801c0b8:	58000400 	.word	0x58000400
 801c0bc:	20001b7c 	.word	0x20001b7c

0801c0c0 <My_Interrupts_Manager>:

	__WFI(); 														// Wait for the Interrupt
}

void My_Interrupts_Manager(My_Interrupts_Manager_td My_Interrupts_Status)	// Enable or Disable IRQ
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b082      	sub	sp, #8
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	71fb      	strb	r3, [r7, #7]
	switch (My_Interrupts_Status)
 801c0ca:	79fb      	ldrb	r3, [r7, #7]
 801c0cc:	2b02      	cmp	r3, #2
 801c0ce:	f000 80aa 	beq.w	801c226 <My_Interrupts_Manager+0x166>
 801c0d2:	2b02      	cmp	r3, #2
 801c0d4:	f300 80f0 	bgt.w	801c2b8 <My_Interrupts_Manager+0x1f8>
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d033      	beq.n	801c144 <My_Interrupts_Manager+0x84>
 801c0dc:	2b01      	cmp	r3, #1
 801c0de:	f040 80eb 	bne.w	801c2b8 <My_Interrupts_Manager+0x1f8>
	{
	case NVIC_DISABLE:
	{

		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801c0e2:	2001      	movs	r0, #1
 801c0e4:	f7e6 fd31 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801c0e8:	2003      	movs	r0, #3
 801c0ea:	f7e6 fd2e 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c0ee:	2002      	movs	r0, #2
 801c0f0:	f7e6 fd2b 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801c0f4:	200f      	movs	r0, #15
 801c0f6:	f7e6 fd28 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801c0fa:	2025      	movs	r0, #37	@ 0x25
 801c0fc:	f7e6 fd25 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c100:	202a      	movs	r0, #42	@ 0x2a
 801c102:	f7e6 fd22 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801c106:	2032      	movs	r0, #50	@ 0x32
 801c108:	f7e6 fd1f 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801c10c:	2027      	movs	r0, #39	@ 0x27
 801c10e:	f7e6 fd1c 	bl	8002b4a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801c112:	2001      	movs	r0, #1
 801c114:	f7e6 fd27 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801c118:	2003      	movs	r0, #3
 801c11a:	f7e6 fd24 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c11e:	2002      	movs	r0, #2
 801c120:	f7e6 fd21 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801c124:	200f      	movs	r0, #15
 801c126:	f7e6 fd1e 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801c12a:	2025      	movs	r0, #37	@ 0x25
 801c12c:	f7e6 fd1b 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c130:	202a      	movs	r0, #42	@ 0x2a
 801c132:	f7e6 fd18 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801c136:	2032      	movs	r0, #50	@ 0x32
 801c138:	f7e6 fd15 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801c13c:	2027      	movs	r0, #39	@ 0x27
 801c13e:	f7e6 fd12 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>

		break;
 801c142:	e0ba      	b.n	801c2ba <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_ENABLE:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801c144:	2001      	movs	r0, #1
 801c146:	f7e6 fd00 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801c14a:	2003      	movs	r0, #3
 801c14c:	f7e6 fcfd 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c150:	2002      	movs	r0, #2
 801c152:	f7e6 fcfa 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801c156:	200f      	movs	r0, #15
 801c158:	f7e6 fcf7 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801c15c:	2025      	movs	r0, #37	@ 0x25
 801c15e:	f7e6 fcf4 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c162:	202a      	movs	r0, #42	@ 0x2a
 801c164:	f7e6 fcf1 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801c168:	2032      	movs	r0, #50	@ 0x32
 801c16a:	f7e6 fcee 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801c16e:	2027      	movs	r0, #39	@ 0x27
 801c170:	f7e6 fceb 	bl	8002b4a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801c174:	2001      	movs	r0, #1
 801c176:	f7e6 fcf6 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801c17a:	2003      	movs	r0, #3
 801c17c:	f7e6 fcf3 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c180:	2002      	movs	r0, #2
 801c182:	f7e6 fcf0 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801c186:	200f      	movs	r0, #15
 801c188:	f7e6 fced 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801c18c:	2025      	movs	r0, #37	@ 0x25
 801c18e:	f7e6 fcea 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c192:	202a      	movs	r0, #42	@ 0x2a
 801c194:	f7e6 fce7 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801c198:	2032      	movs	r0, #50	@ 0x32
 801c19a:	f7e6 fce4 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801c19e:	2027      	movs	r0, #39	@ 0x27
 801c1a0:	f7e6 fce1 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);							// Set Interrupt Priority
 801c1a4:	2200      	movs	r2, #0
 801c1a6:	2100      	movs	r1, #0
 801c1a8:	2001      	movs	r0, #1
 801c1aa:	f7e6 fca6 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);							// Set Interrupt Priority
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	2101      	movs	r1, #1
 801c1b2:	2003      	movs	r0, #3
 801c1b4:	f7e6 fca1 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 1, 0);			// Set Interrupt Priority
 801c1b8:	2200      	movs	r2, #0
 801c1ba:	2101      	movs	r1, #1
 801c1bc:	2002      	movs	r0, #2
 801c1be:	f7e6 fc9c 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);						// Set Interrupt Priority
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	2101      	movs	r1, #1
 801c1c6:	200f      	movs	r0, #15
 801c1c8:	f7e6 fc97 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);							// Set Interrupt Priority
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	2101      	movs	r1, #1
 801c1d0:	2025      	movs	r0, #37	@ 0x25
 801c1d2:	f7e6 fc92 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);							// Set Interrupt Priority
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	2101      	movs	r1, #1
 801c1da:	202a      	movs	r0, #42	@ 0x2a
 801c1dc:	f7e6 fc8d 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 1, 0);						// Set Interrupt Priority
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	2101      	movs	r1, #1
 801c1e4:	2032      	movs	r0, #50	@ 0x32
 801c1e6:	f7e6 fc88 	bl	8002afa <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);							// Set Interrupt Priority
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	2101      	movs	r1, #1
 801c1ee:	2027      	movs	r0, #39	@ 0x27
 801c1f0:	f7e6 fc83 	bl	8002afa <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801c1f4:	2001      	movs	r0, #1
 801c1f6:	f7e6 fc9a 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801c1fa:	2003      	movs	r0, #3
 801c1fc:	f7e6 fc97 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c200:	2002      	movs	r0, #2
 801c202:	f7e6 fc94 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c206:	200f      	movs	r0, #15
 801c208:	f7e6 fc91 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801c20c:	2025      	movs	r0, #37	@ 0x25
 801c20e:	f7e6 fc8e 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801c212:	202a      	movs	r0, #42	@ 0x2a
 801c214:	f7e6 fc8b 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c218:	2032      	movs	r0, #50	@ 0x32
 801c21a:	f7e6 fc88 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801c21e:	2027      	movs	r0, #39	@ 0x27
 801c220:	f7e6 fc85 	bl	8002b2e <HAL_NVIC_EnableIRQ>

		break;
 801c224:	e049      	b.n	801c2ba <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_CLEAR:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801c226:	2001      	movs	r0, #1
 801c228:	f7e6 fc8f 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801c22c:	2003      	movs	r0, #3
 801c22e:	f7e6 fc8c 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c232:	2002      	movs	r0, #2
 801c234:	f7e6 fc89 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801c238:	200f      	movs	r0, #15
 801c23a:	f7e6 fc86 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801c23e:	2025      	movs	r0, #37	@ 0x25
 801c240:	f7e6 fc83 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c244:	202a      	movs	r0, #42	@ 0x2a
 801c246:	f7e6 fc80 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801c24a:	2032      	movs	r0, #50	@ 0x32
 801c24c:	f7e6 fc7d 	bl	8002b4a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801c250:	2027      	movs	r0, #39	@ 0x27
 801c252:	f7e6 fc7a 	bl	8002b4a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801c256:	2001      	movs	r0, #1
 801c258:	f7e6 fc85 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801c25c:	2003      	movs	r0, #3
 801c25e:	f7e6 fc82 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c262:	2002      	movs	r0, #2
 801c264:	f7e6 fc7f 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801c268:	200f      	movs	r0, #15
 801c26a:	f7e6 fc7c 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801c26e:	2025      	movs	r0, #37	@ 0x25
 801c270:	f7e6 fc79 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c274:	202a      	movs	r0, #42	@ 0x2a
 801c276:	f7e6 fc76 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801c27a:	2032      	movs	r0, #50	@ 0x32
 801c27c:	f7e6 fc73 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801c280:	2027      	movs	r0, #39	@ 0x27
 801c282:	f7e6 fc70 	bl	8002b66 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801c286:	2001      	movs	r0, #1
 801c288:	f7e6 fc51 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801c28c:	2003      	movs	r0, #3
 801c28e:	f7e6 fc4e 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c292:	2002      	movs	r0, #2
 801c294:	f7e6 fc4b 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c298:	200f      	movs	r0, #15
 801c29a:	f7e6 fc48 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801c29e:	2025      	movs	r0, #37	@ 0x25
 801c2a0:	f7e6 fc45 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801c2a4:	202a      	movs	r0, #42	@ 0x2a
 801c2a6:	f7e6 fc42 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c2aa:	2032      	movs	r0, #50	@ 0x32
 801c2ac:	f7e6 fc3f 	bl	8002b2e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801c2b0:	2027      	movs	r0, #39	@ 0x27
 801c2b2:	f7e6 fc3c 	bl	8002b2e <HAL_NVIC_EnableIRQ>

		break;
 801c2b6:	e000      	b.n	801c2ba <My_Interrupts_Manager+0x1fa>
	}

	default:
	{
		break;
 801c2b8:	bf00      	nop
	}

	}
}
 801c2ba:	bf00      	nop
 801c2bc:	3708      	adds	r7, #8
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bd80      	pop	{r7, pc}
	...

0801c2c4 <My_Set_RTC_Alarm_A>:

void My_Set_RTC_Alarm_A(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801c2c4:	b580      	push	{r7, lr}
 801c2c6:	b082      	sub	sp, #8
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	603b      	str	r3, [r7, #0]
 801c2cc:	4603      	mov	r3, r0
 801c2ce:	71fb      	strb	r3, [r7, #7]
 801c2d0:	460b      	mov	r3, r1
 801c2d2:	71bb      	strb	r3, [r7, #6]
 801c2d4:	4613      	mov	r3, r2
 801c2d6:	717b      	strb	r3, [r7, #5]

	/* This function Sets the RTC ALARM A Timer */

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801c2d8:	2200      	movs	r2, #0
 801c2da:	491f      	ldr	r1, [pc, #124]	@ (801c358 <My_Set_RTC_Alarm_A+0x94>)
 801c2dc:	481f      	ldr	r0, [pc, #124]	@ (801c35c <My_Set_RTC_Alarm_A+0x98>)
 801c2de:	f7e9 fed7 	bl	8006090 <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours + my_hours;
 801c2e2:	4b1d      	ldr	r3, [pc, #116]	@ (801c358 <My_Set_RTC_Alarm_A+0x94>)
 801c2e4:	781a      	ldrb	r2, [r3, #0]
 801c2e6:	79fb      	ldrb	r3, [r7, #7]
 801c2e8:	4413      	add	r3, r2
 801c2ea:	b2da      	uxtb	r2, r3
 801c2ec:	4b1c      	ldr	r3, [pc, #112]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c2ee:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = my_minutes + sTime.Minutes;
 801c2f0:	4b19      	ldr	r3, [pc, #100]	@ (801c358 <My_Set_RTC_Alarm_A+0x94>)
 801c2f2:	785a      	ldrb	r2, [r3, #1]
 801c2f4:	79bb      	ldrb	r3, [r7, #6]
 801c2f6:	4413      	add	r3, r2
 801c2f8:	b2da      	uxtb	r2, r3
 801c2fa:	4b19      	ldr	r3, [pc, #100]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c2fc:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = my_seconds + sTime.Seconds;
 801c2fe:	4b16      	ldr	r3, [pc, #88]	@ (801c358 <My_Set_RTC_Alarm_A+0x94>)
 801c300:	789a      	ldrb	r2, [r3, #2]
 801c302:	797b      	ldrb	r3, [r7, #5]
 801c304:	4413      	add	r3, r2
 801c306:	b2da      	uxtb	r2, r3
 801c308:	4b15      	ldr	r3, [pc, #84]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c30a:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds + sTime.SubSeconds;
 801c30c:	4b12      	ldr	r3, [pc, #72]	@ (801c358 <My_Set_RTC_Alarm_A+0x94>)
 801c30e:	685a      	ldr	r2, [r3, #4]
 801c310:	683b      	ldr	r3, [r7, #0]
 801c312:	4413      	add	r3, r2
 801c314:	4a12      	ldr	r2, [pc, #72]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c316:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c318:	4b11      	ldr	r3, [pc, #68]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c31a:	2200      	movs	r2, #0
 801c31c:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c31e:	4b10      	ldr	r3, [pc, #64]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c320:	2200      	movs	r2, #0
 801c322:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801c324:	4b0e      	ldr	r3, [pc, #56]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c326:	2200      	movs	r2, #0
 801c328:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801c32a:	4b0d      	ldr	r3, [pc, #52]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c32c:	2200      	movs	r2, #0
 801c32e:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801c330:	4b0b      	ldr	r3, [pc, #44]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c332:	2200      	movs	r2, #0
 801c334:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801c336:	4b0a      	ldr	r3, [pc, #40]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c338:	2201      	movs	r2, #1
 801c33a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 801c33e:	4b08      	ldr	r3, [pc, #32]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c344:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);			// Set RTC Alarm Time with Interrupt
 801c346:	2200      	movs	r2, #0
 801c348:	4905      	ldr	r1, [pc, #20]	@ (801c360 <My_Set_RTC_Alarm_A+0x9c>)
 801c34a:	4804      	ldr	r0, [pc, #16]	@ (801c35c <My_Set_RTC_Alarm_A+0x98>)
 801c34c:	f7e9 ff88 	bl	8006260 <HAL_RTC_SetAlarm_IT>
}
 801c350:	bf00      	nop
 801c352:	3708      	adds	r7, #8
 801c354:	46bd      	mov	sp, r7
 801c356:	bd80      	pop	{r7, pc}
 801c358:	20001b98 	.word	0x20001b98
 801c35c:	200006ec 	.word	0x200006ec
 801c360:	20001bac 	.word	0x20001bac

0801c364 <My_Set_RTC_Alarm_B>:

void My_Set_RTC_Alarm_B(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b082      	sub	sp, #8
 801c368:	af00      	add	r7, sp, #0
 801c36a:	603b      	str	r3, [r7, #0]
 801c36c:	4603      	mov	r3, r0
 801c36e:	71fb      	strb	r3, [r7, #7]
 801c370:	460b      	mov	r3, r1
 801c372:	71bb      	strb	r3, [r7, #6]
 801c374:	4613      	mov	r3, r2
 801c376:	717b      	strb	r3, [r7, #5]
	/* Set the RTC ALARM B Timer */

	sTime.Hours = 0x00; 														// Config Time Parameter RTC Struct Init
 801c378:	4b22      	ldr	r3, [pc, #136]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c37a:	2200      	movs	r2, #0
 801c37c:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x00;
 801c37e:	4b21      	ldr	r3, [pc, #132]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c380:	2200      	movs	r2, #0
 801c382:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x00;
 801c384:	4b1f      	ldr	r3, [pc, #124]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c386:	2200      	movs	r2, #0
 801c388:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x00;
 801c38a:	4b1e      	ldr	r3, [pc, #120]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c38c:	2200      	movs	r2, #0
 801c38e:	605a      	str	r2, [r3, #4]
	sTime.SecondFraction = 0x00;
 801c390:	4b1c      	ldr	r3, [pc, #112]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c392:	2200      	movs	r2, #0
 801c394:	609a      	str	r2, [r3, #8]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c396:	4b1b      	ldr	r3, [pc, #108]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c398:	2200      	movs	r2, #0
 801c39a:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c39c:	4b19      	ldr	r3, [pc, #100]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c39e:	2200      	movs	r2, #0
 801c3a0:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmTime.Hours = my_hours;											// Config Time Parameter of RTC_Alarm Struct
 801c3a2:	4a19      	ldr	r2, [pc, #100]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3a4:	79fb      	ldrb	r3, [r7, #7]
 801c3a6:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = my_minutes;
 801c3a8:	4a17      	ldr	r2, [pc, #92]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3aa:	79bb      	ldrb	r3, [r7, #6]
 801c3ac:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = my_seconds;
 801c3ae:	4a16      	ldr	r2, [pc, #88]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3b0:	797b      	ldrb	r3, [r7, #5]
 801c3b2:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds;
 801c3b4:	4a14      	ldr	r2, [pc, #80]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3b6:	683b      	ldr	r3, [r7, #0]
 801c3b8:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c3ba:	4b13      	ldr	r3, [pc, #76]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3bc:	2200      	movs	r2, #0
 801c3be:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c3c0:	4b11      	ldr	r3, [pc, #68]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801c3c6:	4b10      	ldr	r3, [pc, #64]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3c8:	2200      	movs	r2, #0
 801c3ca:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801c3cc:	4b0e      	ldr	r3, [pc, #56]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801c3d2:	4b0d      	ldr	r3, [pc, #52]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801c3d8:	4b0b      	ldr	r3, [pc, #44]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3da:	2201      	movs	r2, #1
 801c3dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_B;
 801c3e0:	4b09      	ldr	r3, [pc, #36]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c3e6:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);								// Set RTC Time (this Command needed for Set Alarm)
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	4906      	ldr	r1, [pc, #24]	@ (801c404 <My_Set_RTC_Alarm_B+0xa0>)
 801c3ec:	4807      	ldr	r0, [pc, #28]	@ (801c40c <My_Set_RTC_Alarm_B+0xa8>)
 801c3ee:	f7e9 fdb3 	bl	8005f58 <HAL_RTC_SetTime>
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);						// Set RTC Alarm Time with Interrupt
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	4904      	ldr	r1, [pc, #16]	@ (801c408 <My_Set_RTC_Alarm_B+0xa4>)
 801c3f6:	4805      	ldr	r0, [pc, #20]	@ (801c40c <My_Set_RTC_Alarm_B+0xa8>)
 801c3f8:	f7e9 ff32 	bl	8006260 <HAL_RTC_SetAlarm_IT>
}
 801c3fc:	bf00      	nop
 801c3fe:	3708      	adds	r7, #8
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}
 801c404:	20001b98 	.word	0x20001b98
 801c408:	20001bac 	.word	0x20001bac
 801c40c:	200006ec 	.word	0x200006ec

0801c410 <My_SystemClock_Config>:

void My_SystemClock_Config(void)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b09a      	sub	sp, #104	@ 0x68
 801c414:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801c416:	f107 0320 	add.w	r3, r7, #32
 801c41a:	2248      	movs	r2, #72	@ 0x48
 801c41c:	2100      	movs	r1, #0
 801c41e:	4618      	mov	r0, r3
 801c420:	f002 ff4d 	bl	801f2be <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801c424:	1d3b      	adds	r3, r7, #4
 801c426:	2200      	movs	r2, #0
 801c428:	601a      	str	r2, [r3, #0]
 801c42a:	605a      	str	r2, [r3, #4]
 801c42c:	609a      	str	r2, [r3, #8]
 801c42e:	60da      	str	r2, [r3, #12]
 801c430:	611a      	str	r2, [r3, #16]
 801c432:	615a      	str	r2, [r3, #20]
 801c434:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 801c436:	f7e8 f817 	bl	8004468 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801c43a:	2000      	movs	r0, #0
 801c43c:	f7fe fcc8 	bl	801add0 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801c440:	4b1e      	ldr	r3, [pc, #120]	@ (801c4bc <My_SystemClock_Config+0xac>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801c448:	4a1c      	ldr	r2, [pc, #112]	@ (801c4bc <My_SystemClock_Config+0xac>)
 801c44a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801c44e:	6013      	str	r3, [r2, #0]
 801c450:	4b1a      	ldr	r3, [pc, #104]	@ (801c4bc <My_SystemClock_Config+0xac>)
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801c458:	603b      	str	r3, [r7, #0]
 801c45a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 801c45c:	2324      	movs	r3, #36	@ 0x24
 801c45e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801c460:	2381      	movs	r3, #129	@ 0x81
 801c462:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801c464:	2301      	movs	r3, #1
 801c466:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 801c468:	2300      	movs	r3, #0
 801c46a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;				// Set Clock Frequency Below 16 MHz to allow Undervolting
 801c46c:	2370      	movs	r3, #112	@ 0x70
 801c46e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801c470:	2300      	movs	r3, #0
 801c472:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801c474:	f107 0320 	add.w	r3, r7, #32
 801c478:	4618      	mov	r0, r3
 801c47a:	f7e8 fc8f 	bl	8004d9c <HAL_RCC_OscConfig>
 801c47e:	4603      	mov	r3, r0
 801c480:	2b00      	cmp	r3, #0
 801c482:	d001      	beq.n	801c488 <My_SystemClock_Config+0x78>
	{
		Error_Handler();
 801c484:	f7e4 fea0 	bl	80011c8 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 801c488:	234f      	movs	r3, #79	@ 0x4f
 801c48a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 801c48c:	2300      	movs	r3, #0
 801c48e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801c490:	2300      	movs	r3, #0
 801c492:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801c494:	2300      	movs	r3, #0
 801c496:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801c498:	2300      	movs	r3, #0
 801c49a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 801c49c:	2300      	movs	r3, #0
 801c49e:	61fb      	str	r3, [r7, #28]


	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801c4a0:	1d3b      	adds	r3, r7, #4
 801c4a2:	2102      	movs	r1, #2
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f7e8 fffb 	bl	80054a0 <HAL_RCC_ClockConfig>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d001      	beq.n	801c4b4 <My_SystemClock_Config+0xa4>
	{
		Error_Handler();
 801c4b0:	f7e4 fe8a 	bl	80011c8 <Error_Handler>
	}
}
 801c4b4:	bf00      	nop
 801c4b6:	3768      	adds	r7, #104	@ 0x68
 801c4b8:	46bd      	mov	sp, r7
 801c4ba:	bd80      	pop	{r7, pc}
 801c4bc:	58000400 	.word	0x58000400

0801c4c0 <My_Trise_Meas>:
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOBEN);
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOCEN);
}

void My_Trise_Meas(void)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	af00      	add	r7, sp, #0
	/* This Function measures the charging time (Trise) during the Energy Harvesting State (EHS) from the last SMS State to the following RTS State */

	my_Trise_time_stop = HAL_LPTIM_ReadCounter(&hlptim1);// Stop Measuring Trise
 801c4c4:	481a      	ldr	r0, [pc, #104]	@ (801c530 <My_Trise_Meas+0x70>)
 801c4c6:	f000 fc9b 	bl	801ce00 <HAL_LPTIM_ReadCounter>
 801c4ca:	4603      	mov	r3, r0
 801c4cc:	b29a      	uxth	r2, r3
 801c4ce:	4b19      	ldr	r3, [pc, #100]	@ (801c534 <My_Trise_Meas+0x74>)
 801c4d0:	801a      	strh	r2, [r3, #0]

	if (my_Trise_time_stop > my_Trise_time_start)
 801c4d2:	4b18      	ldr	r3, [pc, #96]	@ (801c534 <My_Trise_Meas+0x74>)
 801c4d4:	881a      	ldrh	r2, [r3, #0]
 801c4d6:	4b18      	ldr	r3, [pc, #96]	@ (801c538 <My_Trise_Meas+0x78>)
 801c4d8:	881b      	ldrh	r3, [r3, #0]
 801c4da:	429a      	cmp	r2, r3
 801c4dc:	d908      	bls.n	801c4f0 <My_Trise_Meas+0x30>
	{
		my_Trise_time = my_Trise_time_stop - my_Trise_time_start;
 801c4de:	4b15      	ldr	r3, [pc, #84]	@ (801c534 <My_Trise_Meas+0x74>)
 801c4e0:	881a      	ldrh	r2, [r3, #0]
 801c4e2:	4b15      	ldr	r3, [pc, #84]	@ (801c538 <My_Trise_Meas+0x78>)
 801c4e4:	881b      	ldrh	r3, [r3, #0]
 801c4e6:	1ad3      	subs	r3, r2, r3
 801c4e8:	b29a      	uxth	r2, r3
 801c4ea:	4b14      	ldr	r3, [pc, #80]	@ (801c53c <My_Trise_Meas+0x7c>)
 801c4ec:	801a      	strh	r2, [r3, #0]
		else
		{
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
		}
	}
}
 801c4ee:	e01c      	b.n	801c52a <My_Trise_Meas+0x6a>
		if (my_Cmode == EOC)
 801c4f0:	4b13      	ldr	r3, [pc, #76]	@ (801c540 <My_Trise_Meas+0x80>)
 801c4f2:	781b      	ldrb	r3, [r3, #0]
 801c4f4:	2b02      	cmp	r3, #2
 801c4f6:	d10c      	bne.n	801c512 <My_Trise_Meas+0x52>
			my_Trise_time = my_Trise_time_stop + (T_ESW + T_SMW) - my_Trise_time_start;
 801c4f8:	4b0e      	ldr	r3, [pc, #56]	@ (801c534 <My_Trise_Meas+0x74>)
 801c4fa:	881a      	ldrh	r2, [r3, #0]
 801c4fc:	4b0e      	ldr	r3, [pc, #56]	@ (801c538 <My_Trise_Meas+0x78>)
 801c4fe:	881b      	ldrh	r3, [r3, #0]
 801c500:	1ad3      	subs	r3, r2, r3
 801c502:	b29b      	uxth	r3, r3
 801c504:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 801c508:	3310      	adds	r3, #16
 801c50a:	b29a      	uxth	r2, r3
 801c50c:	4b0b      	ldr	r3, [pc, #44]	@ (801c53c <My_Trise_Meas+0x7c>)
 801c50e:	801a      	strh	r2, [r3, #0]
}
 801c510:	e00b      	b.n	801c52a <My_Trise_Meas+0x6a>
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
 801c512:	4b08      	ldr	r3, [pc, #32]	@ (801c534 <My_Trise_Meas+0x74>)
 801c514:	881a      	ldrh	r2, [r3, #0]
 801c516:	4b08      	ldr	r3, [pc, #32]	@ (801c538 <My_Trise_Meas+0x78>)
 801c518:	881b      	ldrh	r3, [r3, #0]
 801c51a:	1ad3      	subs	r3, r2, r3
 801c51c:	b29b      	uxth	r3, r3
 801c51e:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 801c522:	3308      	adds	r3, #8
 801c524:	b29a      	uxth	r2, r3
 801c526:	4b05      	ldr	r3, [pc, #20]	@ (801c53c <My_Trise_Meas+0x7c>)
 801c528:	801a      	strh	r2, [r3, #0]
}
 801c52a:	bf00      	nop
 801c52c:	bd80      	pop	{r7, pc}
 801c52e:	bf00      	nop
 801c530:	20001adc 	.word	0x20001adc
 801c534:	20001b60 	.word	0x20001b60
 801c538:	20001b5e 	.word	0x20001b5e
 801c53c:	20001b62 	.word	0x20001b62
 801c540:	20001b86 	.word	0x20001b86

0801c544 <My_PVD_Delay>:

void My_PVD_Delay(void)
{
 801c544:	b580      	push	{r7, lr}
 801c546:	af00      	add	r7, sp, #0
	/* This Function creates a Delay to allow the PVD to settle */

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); 	// Deactivate the RTC Alarm A
 801c548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c54c:	4808      	ldr	r0, [pc, #32]	@ (801c570 <My_PVD_Delay+0x2c>)
 801c54e:	f7e9 ff93 	bl	8006478 <HAL_RTC_DeactivateAlarm>

	My_Set_RTC_Alarm_A								// Sets the RTC Alarm A Timer to create a Delay of time T_Delay_PVD
 801c552:	2300      	movs	r3, #0
 801c554:	2202      	movs	r2, #2
 801c556:	2100      	movs	r1, #0
 801c558:	2000      	movs	r0, #0
 801c55a:	f7ff feb3 	bl	801c2c4 <My_Set_RTC_Alarm_A>
			T_Delay_PVD_hours,
			T_Delay_PVD_minutes,
			T_Delay_PVD_seconds,
			T_Delay_PVD_subseconds
	);
	__WFI(); 										// Wait for the Interrupt
 801c55e:	bf30      	wfi

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);   	// Deactivate the RTC Alarm A
 801c560:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c564:	4802      	ldr	r0, [pc, #8]	@ (801c570 <My_PVD_Delay+0x2c>)
 801c566:	f7e9 ff87 	bl	8006478 <HAL_RTC_DeactivateAlarm>
}
 801c56a:	bf00      	nop
 801c56c:	bd80      	pop	{r7, pc}
 801c56e:	bf00      	nop
 801c570:	200006ec 	.word	0x200006ec

0801c574 <My_PS_Detection>:

void My_PS_Detection(void)
{
 801c574:	b580      	push	{r7, lr}
 801c576:	af00      	add	r7, sp, #0
	My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);  	  					// Configures PVD at the Highest Voltage and Normal Mode
 801c578:	2100      	movs	r1, #0
 801c57a:	200c      	movs	r0, #12
 801c57c:	f7ff fd82 	bl	801c084 <My_Set_PVD>

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)							// If VDD is > 2.9 Volt and and Internal Reference is Ready
 801c580:	4b0b      	ldr	r3, [pc, #44]	@ (801c5b0 <My_PS_Detection+0x3c>)
 801c582:	695b      	ldr	r3, [r3, #20]
 801c584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d103      	bne.n	801c594 <My_PS_Detection+0x20>
	{
		my_Current_State = PSS;											// System is Supplied by a Power Supply with voltage > 3.0 V
 801c58c:	4b09      	ldr	r3, [pc, #36]	@ (801c5b4 <My_PS_Detection+0x40>)
 801c58e:	2201      	movs	r2, #1
 801c590:	701a      	strb	r2, [r3, #0]
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
//		My_Enter_Stop2_Mode_WFI(V2P5, PWR_PVD_MODE_IT_RISING);
	}
}
 801c592:	e00a      	b.n	801c5aa <My_PS_Detection+0x36>
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
 801c594:	4b07      	ldr	r3, [pc, #28]	@ (801c5b4 <My_PS_Detection+0x40>)
 801c596:	2203      	movs	r2, #3
 801c598:	701a      	strb	r2, [r3, #0]
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
 801c59a:	4b07      	ldr	r3, [pc, #28]	@ (801c5b8 <My_PS_Detection+0x44>)
 801c59c:	2202      	movs	r2, #2
 801c59e:	701a      	strb	r2, [r3, #0]
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
 801c5a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c5a4:	200c      	movs	r0, #12
 801c5a6:	f7ff fce7 	bl	801bf78 <My_Enter_Stop2_Mode_WFI>
}
 801c5aa:	bf00      	nop
 801c5ac:	bd80      	pop	{r7, pc}
 801c5ae:	bf00      	nop
 801c5b0:	58000400 	.word	0x58000400
 801c5b4:	20001b85 	.word	0x20001b85
 801c5b8:	20000638 	.word	0x20000638

0801c5bc <My_VDD_to_ES_Switch>:


#if STEVAL_HARVEST1
void My_VDD_to_ES_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and ES net
{
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b08c      	sub	sp, #48	@ 0x30
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801c5c6:	2001      	movs	r0, #1
 801c5c8:	f7fe fc2a 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801c5cc:	2002      	movs	r0, #2
 801c5ce:	f7fe fc27 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801c5d2:	2004      	movs	r0, #4
 801c5d4:	f7fe fc24 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801c5d8:	2080      	movs	r0, #128	@ 0x80
 801c5da:	f7fe fc21 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>

	if (mode == Switch_OPEN)
 801c5de:	79fb      	ldrb	r3, [r7, #7]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d11d      	bne.n	801c620 <My_VDD_to_ES_Switch+0x64>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c5e4:	f107 031c 	add.w	r3, r7, #28
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	601a      	str	r2, [r3, #0]
 801c5ec:	605a      	str	r2, [r3, #4]
 801c5ee:	609a      	str	r2, [r3, #8]
 801c5f0:	60da      	str	r2, [r3, #12]
 801c5f2:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801c5f4:	2303      	movs	r3, #3
 801c5f6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801c5fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801c600:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801c602:	f107 031c 	add.w	r3, r7, #28
 801c606:	4619      	mov	r1, r3
 801c608:	4829      	ldr	r0, [pc, #164]	@ (801c6b0 <My_VDD_to_ES_Switch+0xf4>)
 801c60a:	f7e6 fed3 	bl	80033b4 <HAL_GPIO_Init>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801c60e:	f244 0318 	movw	r3, #16408	@ 0x4018
 801c612:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801c614:	f107 031c 	add.w	r3, r7, #28
 801c618:	4619      	mov	r1, r3
 801c61a:	4826      	ldr	r0, [pc, #152]	@ (801c6b4 <My_VDD_to_ES_Switch+0xf8>)
 801c61c:	f7e6 feca 	bl	80033b4 <HAL_GPIO_Init>
	}

	if (mode == Switch_CLOSED)
 801c620:	79fb      	ldrb	r3, [r7, #7]
 801c622:	2b01      	cmp	r3, #1
 801c624:	d133      	bne.n	801c68e <My_VDD_to_ES_Switch+0xd2>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c626:	f107 0308 	add.w	r3, r7, #8
 801c62a:	2200      	movs	r2, #0
 801c62c:	601a      	str	r2, [r3, #0]
 801c62e:	605a      	str	r2, [r3, #4]
 801c630:	609a      	str	r2, [r3, #8]
 801c632:	60da      	str	r2, [r3, #12]
 801c634:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c636:	2301      	movs	r3, #1
 801c638:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c63a:	2300      	movs	r3, #0
 801c63c:	613b      	str	r3, [r7, #16]

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801c63e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801c642:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801c644:	f107 0308 	add.w	r3, r7, #8
 801c648:	4619      	mov	r1, r3
 801c64a:	4819      	ldr	r0, [pc, #100]	@ (801c6b0 <My_VDD_to_ES_Switch+0xf4>)
 801c64c:	f7e6 feb2 	bl	80033b4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortC, ES_Pin4, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin4 to Vdd
 801c650:	2201      	movs	r2, #1
 801c652:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801c656:	4816      	ldr	r0, [pc, #88]	@ (801c6b0 <My_VDD_to_ES_Switch+0xf4>)
 801c658:	f7e7 f8da 	bl	8003810 <HAL_GPIO_WritePin>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801c65c:	f244 0318 	movw	r3, #16408	@ 0x4018
 801c660:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801c662:	f107 0308 	add.w	r3, r7, #8
 801c666:	4619      	mov	r1, r3
 801c668:	4812      	ldr	r0, [pc, #72]	@ (801c6b4 <My_VDD_to_ES_Switch+0xf8>)
 801c66a:	f7e6 fea3 	bl	80033b4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin1, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin1 to Vdd
 801c66e:	2201      	movs	r2, #1
 801c670:	2108      	movs	r1, #8
 801c672:	4810      	ldr	r0, [pc, #64]	@ (801c6b4 <My_VDD_to_ES_Switch+0xf8>)
 801c674:	f7e7 f8cc 	bl	8003810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin2, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin2 to Vdd
 801c678:	2201      	movs	r2, #1
 801c67a:	2110      	movs	r1, #16
 801c67c:	480d      	ldr	r0, [pc, #52]	@ (801c6b4 <My_VDD_to_ES_Switch+0xf8>)
 801c67e:	f7e7 f8c7 	bl	8003810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin3, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin3 to Vdd
 801c682:	2201      	movs	r2, #1
 801c684:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801c688:	480a      	ldr	r0, [pc, #40]	@ (801c6b4 <My_VDD_to_ES_Switch+0xf8>)
 801c68a:	f7e7 f8c1 	bl	8003810 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801c68e:	2001      	movs	r0, #1
 801c690:	f7fe fbde 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801c694:	2002      	movs	r0, #2
 801c696:	f7fe fbdb 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801c69a:	2004      	movs	r0, #4
 801c69c:	f7fe fbd8 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801c6a0:	2080      	movs	r0, #128	@ 0x80
 801c6a2:	f7fe fbd5 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
}
 801c6a6:	bf00      	nop
 801c6a8:	3730      	adds	r7, #48	@ 0x30
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	bd80      	pop	{r7, pc}
 801c6ae:	bf00      	nop
 801c6b0:	48000800 	.word	0x48000800
 801c6b4:	48000400 	.word	0x48000400

0801c6b8 <My_VDD_to_VDDS2_Switch>:
	__HAL_RCC_GPIOC_CLK_DISABLE();
	__HAL_RCC_GPIOH_CLK_DISABLE();
}

void My_VDD_to_VDDS2_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and VDDS2
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b088      	sub	sp, #32
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	4603      	mov	r3, r0
 801c6c0:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801c6c2:	2001      	movs	r0, #1
 801c6c4:	f7fe fbac 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801c6c8:	2002      	movs	r0, #2
 801c6ca:	f7fe fba9 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801c6ce:	2004      	movs	r0, #4
 801c6d0:	f7fe fba6 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801c6d4:	2080      	movs	r0, #128	@ 0x80
 801c6d6:	f7fe fba3 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c6da:	f107 030c 	add.w	r3, r7, #12
 801c6de:	2200      	movs	r2, #0
 801c6e0:	601a      	str	r2, [r3, #0]
 801c6e2:	605a      	str	r2, [r3, #4]
 801c6e4:	609a      	str	r2, [r3, #8]
 801c6e6:	60da      	str	r2, [r3, #12]
 801c6e8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c6ea:	2301      	movs	r3, #1
 801c6ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c6f2:	2303      	movs	r3, #3
 801c6f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin =  VDDS2_Pin;
 801c6f6:	2310      	movs	r3, #16
 801c6f8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(VDDS2_Port, &GPIO_InitStruct);
 801c6fa:	f107 030c 	add.w	r3, r7, #12
 801c6fe:	4619      	mov	r1, r3
 801c700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c704:	f7e6 fe56 	bl	80033b4 <HAL_GPIO_Init>

	if (mode == Switch_CLOSED)
 801c708:	79fb      	ldrb	r3, [r7, #7]
 801c70a:	2b01      	cmp	r3, #1
 801c70c:	d106      	bne.n	801c71c <My_VDD_to_VDDS2_Switch+0x64>
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_SET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801c70e:	2201      	movs	r2, #1
 801c710:	2110      	movs	r1, #16
 801c712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c716:	f7e7 f87b 	bl	8003810 <HAL_GPIO_WritePin>
 801c71a:	e005      	b.n	801c728 <My_VDD_to_VDDS2_Switch+0x70>
	}
	else
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_RESET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801c71c:	2200      	movs	r2, #0
 801c71e:	2110      	movs	r1, #16
 801c720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c724:	f7e7 f874 	bl	8003810 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801c728:	2001      	movs	r0, #1
 801c72a:	f7fe fb91 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801c72e:	2002      	movs	r0, #2
 801c730:	f7fe fb8e 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801c734:	2004      	movs	r0, #4
 801c736:	f7fe fb8b 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801c73a:	2080      	movs	r0, #128	@ 0x80
 801c73c:	f7fe fb88 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
}
 801c740:	bf00      	nop
 801c742:	3720      	adds	r7, #32
 801c744:	46bd      	mov	sp, r7
 801c746:	bd80      	pop	{r7, pc}

0801c748 <My_HAL_Delay>:
#endif

void My_HAL_Delay(__IO uint32_t Delay)
{
 801c748:	b580      	push	{r7, lr}
 801c74a:	b082      	sub	sp, #8
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	4618      	mov	r0, r3
 801c754:	f7e5 f9af 	bl	8001ab6 <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 801c758:	bf00      	nop
 801c75a:	3708      	adds	r7, #8
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bd80      	pop	{r7, pc}

0801c760 <My_LPTIM1_Monitor>:

void My_LPTIM1_Monitor(My_Switch_td mode)					// Opens and Closes the switches (High side of a GPIO) between Vdd and VDDS2
{
 801c760:	b580      	push	{r7, lr}
 801c762:	b088      	sub	sp, #32
 801c764:	af00      	add	r7, sp, #0
 801c766:	4603      	mov	r3, r0
 801c768:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801c76a:	2001      	movs	r0, #1
 801c76c:	f7fe fb58 	bl	801ae20 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c770:	f107 030c 	add.w	r3, r7, #12
 801c774:	2200      	movs	r2, #0
 801c776:	601a      	str	r2, [r3, #0]
 801c778:	605a      	str	r2, [r3, #4]
 801c77a:	609a      	str	r2, [r3, #8]
 801c77c:	60da      	str	r2, [r3, #12]
 801c77e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c780:	2301      	movs	r3, #1
 801c782:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c784:	2300      	movs	r3, #0
 801c786:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c788:	2303      	movs	r3, #3
 801c78a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin =  GPIO_PIN_0; 						// PA0 = CN10[1]
 801c78c:	2301      	movs	r3, #1
 801c78e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(VDDS1_Port, &GPIO_InitStruct);
 801c790:	f107 030c 	add.w	r3, r7, #12
 801c794:	4619      	mov	r1, r3
 801c796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c79a:	f7e6 fe0b 	bl	80033b4 <HAL_GPIO_Init>

	if (mode == Switch_CLOSED)
 801c79e:	79fb      	ldrb	r3, [r7, #7]
 801c7a0:	2b01      	cmp	r3, #1
 801c7a2:	d106      	bne.n	801c7b2 <My_LPTIM1_Monitor+0x52>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Close the High Side of the GPIO to connect VDDS1 to Vdd
 801c7a4:	2201      	movs	r2, #1
 801c7a6:	2101      	movs	r1, #1
 801c7a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c7ac:	f7e7 f830 	bl	8003810 <HAL_GPIO_WritePin>
 801c7b0:	e005      	b.n	801c7be <My_LPTIM1_Monitor+0x5e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // OPen the High Side of the GPIO to connect VDDS1 to Vdd
 801c7b2:	2200      	movs	r2, #0
 801c7b4:	2101      	movs	r1, #1
 801c7b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c7ba:	f7e7 f829 	bl	8003810 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801c7be:	2001      	movs	r0, #1
 801c7c0:	f7fe fb46 	bl	801ae50 <LL_AHB2_GRP1_DisableClock>
}
 801c7c4:	bf00      	nop
 801c7c6:	3720      	adds	r7, #32
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	bd80      	pop	{r7, pc}

0801c7cc <SystemInit>:
	return deviceAddress;
}

#if !MY_SYSTEM_INIT
void SystemInit(void)	// System Init Function
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	af00      	add	r7, sp, #0
	SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
#else
	//	My_Set_GPIO_ANALOG();							// Configure all GPIOs in Analog Mode (High Impedance)
#endif

	HAL_Init();										// Configure HAL
 801c7d0:	f7e6 f84e 	bl	8002870 <HAL_Init>

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 801c7d4:	f7ff fb88 	bl	801bee8 <My_Set_All_GPIO_To_Analog_Mode>
#endif

	HAL_PWR_EnablePVD();							// Enable PVD
 801c7d8:	f7e7 fe92 	bl	8004500 <HAL_PWR_EnablePVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2); // Undervolting
 801c7dc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801c7e0:	f7e7 ff18 	bl	8004614 <HAL_PWREx_ControlVoltageScaling>

	My_Set_PVD(V2P0, PWR_PVD_MODE_IT_RISING);		// Configure PVD
 801c7e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c7e8:	2000      	movs	r0, #0
 801c7ea:	f7ff fc4b 	bl	801c084 <My_Set_PVD>
	HAL_PWREx_EnableLowPowerRunMode();				// Enter Low Power Run Mode
 801c7ee:	f7e7 ff65 	bl	80046bc <HAL_PWREx_EnableLowPowerRunMode>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn); 				// Enable PVD Interrupt
 801c7f2:	2001      	movs	r0, #1
 801c7f4:	f7e6 f99b 	bl	8002b2e <HAL_NVIC_EnableIRQ>
	HAL_PWREx_EnterSTOP0Mode(PWR_STOPENTRY_WFI);	// Enter STOP0 mode and WFI
 801c7f8:	2001      	movs	r0, #1
 801c7fa:	f7e7 ffa3 	bl	8004744 <HAL_PWREx_EnterSTOP0Mode>
	HAL_PWREx_DisableLowPowerRunMode();				// Disable Low Power Run Mode
 801c7fe:	f7e7 ff6b 	bl	80046d8 <HAL_PWREx_DisableLowPowerRunMode>
}
 801c802:	bf00      	nop
 801c804:	bd80      	pop	{r7, pc}
	...

0801c808 <LL_EXTI_IsActiveFlag_0_31>:
{
 801c808:	b480      	push	{r7}
 801c80a:	b083      	sub	sp, #12
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 801c810:	4b07      	ldr	r3, [pc, #28]	@ (801c830 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 801c812:	68da      	ldr	r2, [r3, #12]
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	4013      	ands	r3, r2
 801c818:	687a      	ldr	r2, [r7, #4]
 801c81a:	429a      	cmp	r2, r3
 801c81c:	d101      	bne.n	801c822 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 801c81e:	2301      	movs	r3, #1
 801c820:	e000      	b.n	801c824 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 801c822:	2300      	movs	r3, #0
}
 801c824:	4618      	mov	r0, r3
 801c826:	370c      	adds	r7, #12
 801c828:	46bd      	mov	sp, r7
 801c82a:	bc80      	pop	{r7}
 801c82c:	4770      	bx	lr
 801c82e:	bf00      	nop
 801c830:	58000800 	.word	0x58000800

0801c834 <LL_EXTI_ClearFlag_0_31>:
{
 801c834:	b480      	push	{r7}
 801c836:	b083      	sub	sp, #12
 801c838:	af00      	add	r7, sp, #0
 801c83a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 801c83c:	4a03      	ldr	r2, [pc, #12]	@ (801c84c <LL_EXTI_ClearFlag_0_31+0x18>)
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	60d3      	str	r3, [r2, #12]
}
 801c842:	bf00      	nop
 801c844:	370c      	adds	r7, #12
 801c846:	46bd      	mov	sp, r7
 801c848:	bc80      	pop	{r7}
 801c84a:	4770      	bx	lr
 801c84c:	58000800 	.word	0x58000800

0801c850 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b084      	sub	sp, #16
 801c854:	af00      	add	r7, sp, #0
 801c856:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	4a11      	ldr	r2, [pc, #68]	@ (801c8a4 <HAL_COMP_IRQHandler+0x54>)
 801c85e:	4293      	cmp	r3, r2
 801c860:	d102      	bne.n	801c868 <HAL_COMP_IRQHandler+0x18>
 801c862:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801c866:	e001      	b.n	801c86c <HAL_COMP_IRQHandler+0x1c>
 801c868:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801c86c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 801c86e:	68f8      	ldr	r0, [r7, #12]
 801c870:	f7ff ffca 	bl	801c808 <LL_EXTI_IsActiveFlag_0_31>
 801c874:	4603      	mov	r3, r0
 801c876:	2b00      	cmp	r3, #0
 801c878:	d010      	beq.n	801c89c <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 801c87a:	4b0b      	ldr	r3, [pc, #44]	@ (801c8a8 <HAL_COMP_IRQHandler+0x58>)
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801c882:	2b00      	cmp	r3, #0
 801c884:	d004      	beq.n	801c890 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 801c886:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 801c88a:	f7ff ffd3 	bl	801c834 <LL_EXTI_ClearFlag_0_31>
 801c88e:	e002      	b.n	801c896 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 801c890:	68f8      	ldr	r0, [r7, #12]
 801c892:	f7ff ffcf 	bl	801c834 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 801c896:	6878      	ldr	r0, [r7, #4]
 801c898:	f000 f808 	bl	801c8ac <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 801c89c:	bf00      	nop
 801c89e:	3710      	adds	r7, #16
 801c8a0:	46bd      	mov	sp, r7
 801c8a2:	bd80      	pop	{r7, pc}
 801c8a4:	40010200 	.word	0x40010200
 801c8a8:	40010204 	.word	0x40010204

0801c8ac <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 801c8ac:	b480      	push	{r7}
 801c8ae:	b083      	sub	sp, #12
 801c8b0:	af00      	add	r7, sp, #0
 801c8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 801c8b4:	bf00      	nop
 801c8b6:	370c      	adds	r7, #12
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bc80      	pop	{r7}
 801c8bc:	4770      	bx	lr

0801c8be <LL_RCC_SetLPTIMClockSource>:
{
 801c8be:	b480      	push	{r7}
 801c8c0:	b083      	sub	sp, #12
 801c8c2:	af00      	add	r7, sp, #0
 801c8c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801c8c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c8ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	0c1b      	lsrs	r3, r3, #16
 801c8d2:	041b      	lsls	r3, r3, #16
 801c8d4:	43db      	mvns	r3, r3
 801c8d6:	401a      	ands	r2, r3
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	041b      	lsls	r3, r3, #16
 801c8dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c8e0:	4313      	orrs	r3, r2
 801c8e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801c8e6:	bf00      	nop
 801c8e8:	370c      	adds	r7, #12
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	bc80      	pop	{r7}
 801c8ee:	4770      	bx	lr

0801c8f0 <LL_RCC_GetLPTIMClockSource>:
{
 801c8f0:	b480      	push	{r7}
 801c8f2:	b083      	sub	sp, #12
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 801c8f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c8fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	4013      	ands	r3, r2
 801c904:	0c1a      	lsrs	r2, r3, #16
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	4313      	orrs	r3, r2
}
 801c90a:	4618      	mov	r0, r3
 801c90c:	370c      	adds	r7, #12
 801c90e:	46bd      	mov	sp, r7
 801c910:	bc80      	pop	{r7}
 801c912:	4770      	bx	lr

0801c914 <LL_APB1_GRP1_ForceReset>:
{
 801c914:	b480      	push	{r7}
 801c916:	b083      	sub	sp, #12
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 801c91c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c922:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	4313      	orrs	r3, r2
 801c92a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801c92c:	bf00      	nop
 801c92e:	370c      	adds	r7, #12
 801c930:	46bd      	mov	sp, r7
 801c932:	bc80      	pop	{r7}
 801c934:	4770      	bx	lr

0801c936 <LL_APB1_GRP2_ForceReset>:
{
 801c936:	b480      	push	{r7}
 801c938:	b083      	sub	sp, #12
 801c93a:	af00      	add	r7, sp, #0
 801c93c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 801c93e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801c944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	4313      	orrs	r3, r2
 801c94c:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801c94e:	bf00      	nop
 801c950:	370c      	adds	r7, #12
 801c952:	46bd      	mov	sp, r7
 801c954:	bc80      	pop	{r7}
 801c956:	4770      	bx	lr

0801c958 <LL_APB1_GRP1_ReleaseReset>:
{
 801c958:	b480      	push	{r7}
 801c95a:	b083      	sub	sp, #12
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 801c960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	43db      	mvns	r3, r3
 801c96a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c96e:	4013      	ands	r3, r2
 801c970:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801c972:	bf00      	nop
 801c974:	370c      	adds	r7, #12
 801c976:	46bd      	mov	sp, r7
 801c978:	bc80      	pop	{r7}
 801c97a:	4770      	bx	lr

0801c97c <LL_APB1_GRP2_ReleaseReset>:
{
 801c97c:	b480      	push	{r7}
 801c97e:	b083      	sub	sp, #12
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 801c984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	43db      	mvns	r3, r3
 801c98e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801c992:	4013      	ands	r3, r2
 801c994:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801c996:	bf00      	nop
 801c998:	370c      	adds	r7, #12
 801c99a:	46bd      	mov	sp, r7
 801c99c:	bc80      	pop	{r7}
 801c99e:	4770      	bx	lr

0801c9a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 801c9a0:	b580      	push	{r7, lr}
 801c9a2:	b084      	sub	sp, #16
 801c9a4:	af00      	add	r7, sp, #0
 801c9a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d101      	bne.n	801c9b2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 801c9ae:	2301      	movs	r3, #1
 801c9b0:	e0b6      	b.n	801cb20 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	685b      	ldr	r3, [r3, #4]
 801c9b6:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801c9be:	b2db      	uxtb	r3, r3
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d106      	bne.n	801c9d2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	2200      	movs	r2, #0
 801c9c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 801c9cc:	6878      	ldr	r0, [r7, #4]
 801c9ce:	f7fe f93f 	bl	801ac50 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	2202      	movs	r2, #2
 801c9d6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	691a      	ldr	r2, [r3, #16]
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	f042 0201 	orr.w	r2, r2, #1
 801c9e8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c9f2:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	687a      	ldr	r2, [r7, #4]
 801c9fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801c9fc:	629a      	str	r2, [r3, #40]	@ 0x28
//  if(hlptim -> Instance == LPTIM2)
//  {
//	  RCC->CCIPR |= (1 << 21) | (1 << 20);
//  }
  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801c9fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ca02:	6878      	ldr	r0, [r7, #4]
 801ca04:	f000 fb26 	bl	801d054 <LPTIM_WaitForFlag>
 801ca08:	4603      	mov	r3, r0
 801ca0a:	2b03      	cmp	r3, #3
 801ca0c:	d101      	bne.n	801ca12 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 801ca0e:	2303      	movs	r3, #3
 801ca10:	e086      	b.n	801cb20 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801ca12:	6878      	ldr	r0, [r7, #4]
 801ca14:	f000 fb4e 	bl	801d0b4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801ca18:	6878      	ldr	r0, [r7, #4]
 801ca1a:	f000 fb0d 	bl	801d038 <HAL_LPTIM_GetState>
 801ca1e:	4603      	mov	r3, r0
 801ca20:	2b03      	cmp	r3, #3
 801ca22:	d101      	bne.n	801ca28 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 801ca24:	2303      	movs	r3, #3
 801ca26:	e07b      	b.n	801cb20 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	68db      	ldr	r3, [r3, #12]
 801ca2e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	685b      	ldr	r3, [r3, #4]
 801ca34:	2b01      	cmp	r3, #1
 801ca36:	d004      	beq.n	801ca42 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801ca40:	d103      	bne.n	801ca4a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	f023 031e 	bic.w	r3, r3, #30
 801ca48:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	695b      	ldr	r3, [r3, #20]
 801ca4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ca52:	4293      	cmp	r3, r2
 801ca54:	d005      	beq.n	801ca62 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801ca5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801ca60:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 801ca62:	68fa      	ldr	r2, [r7, #12]
 801ca64:	4b30      	ldr	r3, [pc, #192]	@ (801cb28 <HAL_LPTIM_Init+0x188>)
 801ca66:	4013      	ands	r3, r2
 801ca68:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ca72:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 801ca78:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 801ca7e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 801ca84:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801ca86:	68fa      	ldr	r2, [r7, #12]
 801ca88:	4313      	orrs	r3, r2
 801ca8a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	685b      	ldr	r3, [r3, #4]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d107      	bne.n	801caa4 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801ca9c:	4313      	orrs	r3, r2
 801ca9e:	68fa      	ldr	r2, [r7, #12]
 801caa0:	4313      	orrs	r3, r2
 801caa2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	685b      	ldr	r3, [r3, #4]
 801caa8:	2b01      	cmp	r3, #1
 801caaa:	d004      	beq.n	801cab6 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cab4:	d107      	bne.n	801cac6 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801cabe:	4313      	orrs	r3, r2
 801cac0:	68fa      	ldr	r2, [r7, #12]
 801cac2:	4313      	orrs	r3, r2
 801cac4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	695b      	ldr	r3, [r3, #20]
 801caca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cace:	4293      	cmp	r3, r2
 801cad0:	d00a      	beq.n	801cae8 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801cada:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 801cae0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801cae2:	68fa      	ldr	r2, [r7, #12]
 801cae4:	4313      	orrs	r3, r2
 801cae6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	681b      	ldr	r3, [r3, #0]
 801caec:	68fa      	ldr	r2, [r7, #12]
 801caee:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	4a0d      	ldr	r2, [pc, #52]	@ (801cb2c <HAL_LPTIM_Init+0x18c>)
 801caf6:	4293      	cmp	r3, r2
 801caf8:	d108      	bne.n	801cb0c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	430a      	orrs	r2, r1
 801cb08:	621a      	str	r2, [r3, #32]
 801cb0a:	e004      	b.n	801cb16 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	681b      	ldr	r3, [r3, #0]
 801cb10:	687a      	ldr	r2, [r7, #4]
 801cb12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801cb14:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	2201      	movs	r2, #1
 801cb1a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801cb1e:	2300      	movs	r3, #0
}
 801cb20:	4618      	mov	r0, r3
 801cb22:	3710      	adds	r7, #16
 801cb24:	46bd      	mov	sp, r7
 801cb26:	bd80      	pop	{r7, pc}
 801cb28:	ff19f1fe 	.word	0xff19f1fe
 801cb2c:	40007c00 	.word	0x40007c00

0801cb30 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801cb30:	b580      	push	{r7, lr}
 801cb32:	b082      	sub	sp, #8
 801cb34:	af00      	add	r7, sp, #0
 801cb36:	6078      	str	r0, [r7, #4]
 801cb38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	2202      	movs	r2, #2
 801cb3e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	685b      	ldr	r3, [r3, #4]
 801cb46:	2b01      	cmp	r3, #1
 801cb48:	d00c      	beq.n	801cb64 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cb52:	d107      	bne.n	801cb64 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	68da      	ldr	r2, [r3, #12]
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801cb62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	691a      	ldr	r2, [r3, #16]
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	f042 0201 	orr.w	r2, r2, #1
 801cb72:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	2210      	movs	r2, #16
 801cb7a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	683a      	ldr	r2, [r7, #0]
 801cb82:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801cb84:	2110      	movs	r1, #16
 801cb86:	6878      	ldr	r0, [r7, #4]
 801cb88:	f000 fa64 	bl	801d054 <LPTIM_WaitForFlag>
 801cb8c:	4603      	mov	r3, r0
 801cb8e:	2b03      	cmp	r3, #3
 801cb90:	d101      	bne.n	801cb96 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 801cb92:	2303      	movs	r3, #3
 801cb94:	e00c      	b.n	801cbb0 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	691a      	ldr	r2, [r3, #16]
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	f042 0204 	orr.w	r2, r2, #4
 801cba4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	2201      	movs	r2, #1
 801cbaa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801cbae:	2300      	movs	r3, #0
}
 801cbb0:	4618      	mov	r0, r3
 801cbb2:	3708      	adds	r7, #8
 801cbb4:	46bd      	mov	sp, r7
 801cbb6:	bd80      	pop	{r7, pc}

0801cbb8 <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b082      	sub	sp, #8
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	2202      	movs	r2, #2
 801cbc4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801cbc8:	6878      	ldr	r0, [r7, #4]
 801cbca:	f000 fa73 	bl	801d0b4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801cbce:	6878      	ldr	r0, [r7, #4]
 801cbd0:	f000 fa32 	bl	801d038 <HAL_LPTIM_GetState>
 801cbd4:	4603      	mov	r3, r0
 801cbd6:	2b03      	cmp	r3, #3
 801cbd8:	d101      	bne.n	801cbde <HAL_LPTIM_Counter_Stop+0x26>
  {
    return HAL_TIMEOUT;
 801cbda:	2303      	movs	r3, #3
 801cbdc:	e004      	b.n	801cbe8 <HAL_LPTIM_Counter_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	2201      	movs	r2, #1
 801cbe2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801cbe6:	2300      	movs	r3, #0
}
 801cbe8:	4618      	mov	r0, r3
 801cbea:	3708      	adds	r7, #8
 801cbec:	46bd      	mov	sp, r7
 801cbee:	bd80      	pop	{r7, pc}

0801cbf0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b082      	sub	sp, #8
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
 801cbf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	2202      	movs	r2, #2
 801cbfe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	4a48      	ldr	r2, [pc, #288]	@ (801cd28 <HAL_LPTIM_Counter_Start_IT+0x138>)
 801cc08:	4293      	cmp	r3, r2
 801cc0a:	d108      	bne.n	801cc1e <HAL_LPTIM_Counter_Start_IT+0x2e>
 801cc0c:	4b47      	ldr	r3, [pc, #284]	@ (801cd2c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801cc0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cc12:	4a46      	ldr	r2, [pc, #280]	@ (801cd2c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801cc14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801cc18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801cc1c:	e015      	b.n	801cc4a <HAL_LPTIM_Counter_Start_IT+0x5a>
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	4a43      	ldr	r2, [pc, #268]	@ (801cd30 <HAL_LPTIM_Counter_Start_IT+0x140>)
 801cc24:	4293      	cmp	r3, r2
 801cc26:	d108      	bne.n	801cc3a <HAL_LPTIM_Counter_Start_IT+0x4a>
 801cc28:	4b40      	ldr	r3, [pc, #256]	@ (801cd2c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801cc2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cc2e:	4a3f      	ldr	r2, [pc, #252]	@ (801cd2c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801cc30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cc34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801cc38:	e007      	b.n	801cc4a <HAL_LPTIM_Counter_Start_IT+0x5a>
 801cc3a:	4b3c      	ldr	r3, [pc, #240]	@ (801cd2c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801cc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cc40:	4a3a      	ldr	r2, [pc, #232]	@ (801cd2c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801cc42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801cc46:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	685b      	ldr	r3, [r3, #4]
 801cc4e:	2b01      	cmp	r3, #1
 801cc50:	d00c      	beq.n	801cc6c <HAL_LPTIM_Counter_Start_IT+0x7c>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cc5a:	d107      	bne.n	801cc6c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	68da      	ldr	r2, [r3, #12]
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801cc6a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	691a      	ldr	r2, [r3, #16]
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	f042 0201 	orr.w	r2, r2, #1
 801cc7a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	2210      	movs	r2, #16
 801cc82:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	683a      	ldr	r2, [r7, #0]
 801cc8a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801cc8c:	2110      	movs	r1, #16
 801cc8e:	6878      	ldr	r0, [r7, #4]
 801cc90:	f000 f9e0 	bl	801d054 <LPTIM_WaitForFlag>
 801cc94:	4603      	mov	r3, r0
 801cc96:	2b03      	cmp	r3, #3
 801cc98:	d101      	bne.n	801cc9e <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 801cc9a:	2303      	movs	r3, #3
 801cc9c:	e03f      	b.n	801cd1e <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801cc9e:	6878      	ldr	r0, [r7, #4]
 801cca0:	f000 fa08 	bl	801d0b4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801cca4:	6878      	ldr	r0, [r7, #4]
 801cca6:	f000 f9c7 	bl	801d038 <HAL_LPTIM_GetState>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	2b03      	cmp	r3, #3
 801ccae:	d101      	bne.n	801ccb4 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 801ccb0:	2303      	movs	r3, #3
 801ccb2:	e034      	b.n	801cd1e <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	689a      	ldr	r2, [r3, #8]
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	f042 0210 	orr.w	r2, r2, #16
 801ccc2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	689a      	ldr	r2, [r3, #8]
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	f042 0202 	orr.w	r2, r2, #2
 801ccd2:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	689a      	ldr	r2, [r3, #8]
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801cce2:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	689a      	ldr	r2, [r3, #8]
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801ccf2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	691a      	ldr	r2, [r3, #16]
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	f042 0201 	orr.w	r2, r2, #1
 801cd02:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	691a      	ldr	r2, [r3, #16]
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	f042 0204 	orr.w	r2, r2, #4
 801cd12:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	2201      	movs	r2, #1
 801cd18:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801cd1c:	2300      	movs	r3, #0
}
 801cd1e:	4618      	mov	r0, r3
 801cd20:	3708      	adds	r7, #8
 801cd22:	46bd      	mov	sp, r7
 801cd24:	bd80      	pop	{r7, pc}
 801cd26:	bf00      	nop
 801cd28:	40007c00 	.word	0x40007c00
 801cd2c:	58000800 	.word	0x58000800
 801cd30:	40009400 	.word	0x40009400

0801cd34 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	b082      	sub	sp, #8
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	681b      	ldr	r3, [r3, #0]
 801cd40:	4a2c      	ldr	r2, [pc, #176]	@ (801cdf4 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 801cd42:	4293      	cmp	r3, r2
 801cd44:	d108      	bne.n	801cd58 <HAL_LPTIM_Counter_Stop_IT+0x24>
 801cd46:	4b2c      	ldr	r3, [pc, #176]	@ (801cdf8 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801cd48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cd4c:	4a2a      	ldr	r2, [pc, #168]	@ (801cdf8 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801cd4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801cd52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801cd56:	e015      	b.n	801cd84 <HAL_LPTIM_Counter_Stop_IT+0x50>
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	4a27      	ldr	r2, [pc, #156]	@ (801cdfc <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 801cd5e:	4293      	cmp	r3, r2
 801cd60:	d108      	bne.n	801cd74 <HAL_LPTIM_Counter_Stop_IT+0x40>
 801cd62:	4b25      	ldr	r3, [pc, #148]	@ (801cdf8 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801cd64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cd68:	4a23      	ldr	r2, [pc, #140]	@ (801cdf8 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801cd6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801cd6e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801cd72:	e007      	b.n	801cd84 <HAL_LPTIM_Counter_Stop_IT+0x50>
 801cd74:	4b20      	ldr	r3, [pc, #128]	@ (801cdf8 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801cd76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cd7a:	4a1f      	ldr	r2, [pc, #124]	@ (801cdf8 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801cd7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cd80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	2202      	movs	r2, #2
 801cd88:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801cd8c:	6878      	ldr	r0, [r7, #4]
 801cd8e:	f000 f991 	bl	801d0b4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801cd92:	6878      	ldr	r0, [r7, #4]
 801cd94:	f000 f950 	bl	801d038 <HAL_LPTIM_GetState>
 801cd98:	4603      	mov	r3, r0
 801cd9a:	2b03      	cmp	r3, #3
 801cd9c:	d101      	bne.n	801cda2 <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 801cd9e:	2303      	movs	r3, #3
 801cda0:	e024      	b.n	801cdec <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	689a      	ldr	r2, [r3, #8]
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	f022 0210 	bic.w	r2, r2, #16
 801cdb0:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	689a      	ldr	r2, [r3, #8]
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	f022 0202 	bic.w	r2, r2, #2
 801cdc0:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	689a      	ldr	r2, [r3, #8]
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801cdd0:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	689a      	ldr	r2, [r3, #8]
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801cde0:	609a      	str	r2, [r3, #8]
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	2201      	movs	r2, #1
 801cde6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801cdea:	2300      	movs	r3, #0
}
 801cdec:	4618      	mov	r0, r3
 801cdee:	3708      	adds	r7, #8
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}
 801cdf4:	40007c00 	.word	0x40007c00
 801cdf8:	58000800 	.word	0x58000800
 801cdfc:	40009400 	.word	0x40009400

0801ce00 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 801ce00:	b480      	push	{r7}
 801ce02:	b083      	sub	sp, #12
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	69db      	ldr	r3, [r3, #28]
}
 801ce0e:	4618      	mov	r0, r3
 801ce10:	370c      	adds	r7, #12
 801ce12:	46bd      	mov	sp, r7
 801ce14:	bc80      	pop	{r7}
 801ce16:	4770      	bx	lr

0801ce18 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b082      	sub	sp, #8
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	6078      	str	r0, [r7, #4]

  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	f003 0301 	and.w	r3, r3, #1
 801ce2a:	2b01      	cmp	r3, #1
 801ce2c:	d10d      	bne.n	801ce4a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	689b      	ldr	r3, [r3, #8]
 801ce34:	f003 0301 	and.w	r3, r3, #1
 801ce38:	2b01      	cmp	r3, #1
 801ce3a:	d106      	bne.n	801ce4a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	2201      	movs	r2, #1
 801ce42:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 801ce44:	6878      	ldr	r0, [r7, #4]
 801ce46:	f000 f8af 	bl	801cfa8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	f003 0302 	and.w	r3, r3, #2
 801ce54:	2b02      	cmp	r3, #2
 801ce56:	d10d      	bne.n	801ce74 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	689b      	ldr	r3, [r3, #8]
 801ce5e:	f003 0302 	and.w	r3, r3, #2
 801ce62:	2b02      	cmp	r3, #2
 801ce64:	d106      	bne.n	801ce74 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	2202      	movs	r2, #2
 801ce6c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 801ce6e:	6878      	ldr	r0, [r7, #4]
 801ce70:	f7fe f966 	bl	801b140 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	f003 0304 	and.w	r3, r3, #4
 801ce7e:	2b04      	cmp	r3, #4
 801ce80:	d10d      	bne.n	801ce9e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	689b      	ldr	r3, [r3, #8]
 801ce88:	f003 0304 	and.w	r3, r3, #4
 801ce8c:	2b04      	cmp	r3, #4
 801ce8e:	d106      	bne.n	801ce9e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	2204      	movs	r2, #4
 801ce96:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 801ce98:	6878      	ldr	r0, [r7, #4]
 801ce9a:	f000 f88e 	bl	801cfba <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	f003 0308 	and.w	r3, r3, #8
 801cea8:	2b08      	cmp	r3, #8
 801ceaa:	d10d      	bne.n	801cec8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	681b      	ldr	r3, [r3, #0]
 801ceb0:	689b      	ldr	r3, [r3, #8]
 801ceb2:	f003 0308 	and.w	r3, r3, #8
 801ceb6:	2b08      	cmp	r3, #8
 801ceb8:	d106      	bne.n	801cec8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	2208      	movs	r2, #8
 801cec0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 801cec2:	6878      	ldr	r0, [r7, #4]
 801cec4:	f000 f882 	bl	801cfcc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	f003 0310 	and.w	r3, r3, #16
 801ced2:	2b10      	cmp	r3, #16
 801ced4:	d10d      	bne.n	801cef2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	689b      	ldr	r3, [r3, #8]
 801cedc:	f003 0310 	and.w	r3, r3, #16
 801cee0:	2b10      	cmp	r3, #16
 801cee2:	d106      	bne.n	801cef2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	2210      	movs	r2, #16
 801ceea:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 801ceec:	6878      	ldr	r0, [r7, #4]
 801ceee:	f000 f876 	bl	801cfde <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	f003 0320 	and.w	r3, r3, #32
 801cefc:	2b20      	cmp	r3, #32
 801cefe:	d10d      	bne.n	801cf1c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	689b      	ldr	r3, [r3, #8]
 801cf06:	f003 0320 	and.w	r3, r3, #32
 801cf0a:	2b20      	cmp	r3, #32
 801cf0c:	d106      	bne.n	801cf1c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	2220      	movs	r2, #32
 801cf14:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 801cf16:	6878      	ldr	r0, [r7, #4]
 801cf18:	f000 f86a 	bl	801cff0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cf26:	2b40      	cmp	r3, #64	@ 0x40
 801cf28:	d10d      	bne.n	801cf46 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	689b      	ldr	r3, [r3, #8]
 801cf30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cf34:	2b40      	cmp	r3, #64	@ 0x40
 801cf36:	d106      	bne.n	801cf46 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	2240      	movs	r2, #64	@ 0x40
 801cf3e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 801cf40:	6878      	ldr	r0, [r7, #4]
 801cf42:	f000 f85e 	bl	801d002 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801cf50:	2b80      	cmp	r3, #128	@ 0x80
 801cf52:	d10d      	bne.n	801cf70 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	689b      	ldr	r3, [r3, #8]
 801cf5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801cf5e:	2b80      	cmp	r3, #128	@ 0x80
 801cf60:	d106      	bne.n	801cf70 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	2280      	movs	r2, #128	@ 0x80
 801cf68:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 801cf6a:	6878      	ldr	r0, [r7, #4]
 801cf6c:	f000 f852 	bl	801d014 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cf7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cf7e:	d10f      	bne.n	801cfa0 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	689b      	ldr	r3, [r3, #8]
 801cf86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cf8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cf8e:	d107      	bne.n	801cfa0 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cf98:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801cf9a:	6878      	ldr	r0, [r7, #4]
 801cf9c:	f000 f843 	bl	801d026 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 801cfa0:	bf00      	nop
 801cfa2:	3708      	adds	r7, #8
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}

0801cfa8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801cfa8:	b480      	push	{r7}
 801cfaa:	b083      	sub	sp, #12
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 801cfb0:	bf00      	nop
 801cfb2:	370c      	adds	r7, #12
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	bc80      	pop	{r7}
 801cfb8:	4770      	bx	lr

0801cfba <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 801cfba:	b480      	push	{r7}
 801cfbc:	b083      	sub	sp, #12
 801cfbe:	af00      	add	r7, sp, #0
 801cfc0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 801cfc2:	bf00      	nop
 801cfc4:	370c      	adds	r7, #12
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	bc80      	pop	{r7}
 801cfca:	4770      	bx	lr

0801cfcc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801cfcc:	b480      	push	{r7}
 801cfce:	b083      	sub	sp, #12
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 801cfd4:	bf00      	nop
 801cfd6:	370c      	adds	r7, #12
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	bc80      	pop	{r7}
 801cfdc:	4770      	bx	lr

0801cfde <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801cfde:	b480      	push	{r7}
 801cfe0:	b083      	sub	sp, #12
 801cfe2:	af00      	add	r7, sp, #0
 801cfe4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 801cfe6:	bf00      	nop
 801cfe8:	370c      	adds	r7, #12
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bc80      	pop	{r7}
 801cfee:	4770      	bx	lr

0801cff0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 801cff0:	b480      	push	{r7}
 801cff2:	b083      	sub	sp, #12
 801cff4:	af00      	add	r7, sp, #0
 801cff6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 801cff8:	bf00      	nop
 801cffa:	370c      	adds	r7, #12
 801cffc:	46bd      	mov	sp, r7
 801cffe:	bc80      	pop	{r7}
 801d000:	4770      	bx	lr

0801d002 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d002:	b480      	push	{r7}
 801d004:	b083      	sub	sp, #12
 801d006:	af00      	add	r7, sp, #0
 801d008:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 801d00a:	bf00      	nop
 801d00c:	370c      	adds	r7, #12
 801d00e:	46bd      	mov	sp, r7
 801d010:	bc80      	pop	{r7}
 801d012:	4770      	bx	lr

0801d014 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d014:	b480      	push	{r7}
 801d016:	b083      	sub	sp, #12
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 801d01c:	bf00      	nop
 801d01e:	370c      	adds	r7, #12
 801d020:	46bd      	mov	sp, r7
 801d022:	bc80      	pop	{r7}
 801d024:	4770      	bx	lr

0801d026 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d026:	b480      	push	{r7}
 801d028:	b083      	sub	sp, #12
 801d02a:	af00      	add	r7, sp, #0
 801d02c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 801d02e:	bf00      	nop
 801d030:	370c      	adds	r7, #12
 801d032:	46bd      	mov	sp, r7
 801d034:	bc80      	pop	{r7}
 801d036:	4770      	bx	lr

0801d038 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 801d038:	b480      	push	{r7}
 801d03a:	b083      	sub	sp, #12
 801d03c:	af00      	add	r7, sp, #0
 801d03e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801d046:	b2db      	uxtb	r3, r3
}
 801d048:	4618      	mov	r0, r3
 801d04a:	370c      	adds	r7, #12
 801d04c:	46bd      	mov	sp, r7
 801d04e:	bc80      	pop	{r7}
 801d050:	4770      	bx	lr
	...

0801d054 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 801d054:	b480      	push	{r7}
 801d056:	b085      	sub	sp, #20
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
 801d05c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 801d05e:	2300      	movs	r3, #0
 801d060:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 801d062:	4b12      	ldr	r3, [pc, #72]	@ (801d0ac <LPTIM_WaitForFlag+0x58>)
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	4a12      	ldr	r2, [pc, #72]	@ (801d0b0 <LPTIM_WaitForFlag+0x5c>)
 801d068:	fba2 2303 	umull	r2, r3, r2, r3
 801d06c:	0b9b      	lsrs	r3, r3, #14
 801d06e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d072:	fb02 f303 	mul.w	r3, r2, r3
 801d076:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 801d078:	68bb      	ldr	r3, [r7, #8]
 801d07a:	3b01      	subs	r3, #1
 801d07c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 801d07e:	68bb      	ldr	r3, [r7, #8]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d101      	bne.n	801d088 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 801d084:	2303      	movs	r3, #3
 801d086:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	681a      	ldr	r2, [r3, #0]
 801d08e:	683b      	ldr	r3, [r7, #0]
 801d090:	4013      	ands	r3, r2
 801d092:	683a      	ldr	r2, [r7, #0]
 801d094:	429a      	cmp	r2, r3
 801d096:	d002      	beq.n	801d09e <LPTIM_WaitForFlag+0x4a>
 801d098:	68bb      	ldr	r3, [r7, #8]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d1ec      	bne.n	801d078 <LPTIM_WaitForFlag+0x24>

  return result;
 801d09e:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	3714      	adds	r7, #20
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bc80      	pop	{r7}
 801d0a8:	4770      	bx	lr
 801d0aa:	bf00      	nop
 801d0ac:	20000070 	.word	0x20000070
 801d0b0:	d1b71759 	.word	0xd1b71759

0801d0b4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 801d0b4:	b580      	push	{r7, lr}
 801d0b6:	b08e      	sub	sp, #56	@ 0x38
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 801d0bc:	2300      	movs	r3, #0
 801d0be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0c0:	f3ef 8310 	mrs	r3, PRIMASK
 801d0c4:	613b      	str	r3, [r7, #16]
  return(result);
 801d0c6:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 801d0c8:	633b      	str	r3, [r7, #48]	@ 0x30
 801d0ca:	2301      	movs	r3, #1
 801d0cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0ce:	697b      	ldr	r3, [r7, #20]
 801d0d0:	f383 8810 	msr	PRIMASK, r3
}
 801d0d4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	4a8f      	ldr	r2, [pc, #572]	@ (801d318 <LPTIM_Disable+0x264>)
 801d0dc:	4293      	cmp	r3, r2
 801d0de:	d015      	beq.n	801d10c <LPTIM_Disable+0x58>
 801d0e0:	4a8d      	ldr	r2, [pc, #564]	@ (801d318 <LPTIM_Disable+0x264>)
 801d0e2:	4293      	cmp	r3, r2
 801d0e4:	d818      	bhi.n	801d118 <LPTIM_Disable+0x64>
 801d0e6:	4a8d      	ldr	r2, [pc, #564]	@ (801d31c <LPTIM_Disable+0x268>)
 801d0e8:	4293      	cmp	r3, r2
 801d0ea:	d003      	beq.n	801d0f4 <LPTIM_Disable+0x40>
 801d0ec:	4a8c      	ldr	r2, [pc, #560]	@ (801d320 <LPTIM_Disable+0x26c>)
 801d0ee:	4293      	cmp	r3, r2
 801d0f0:	d006      	beq.n	801d100 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 801d0f2:	e011      	b.n	801d118 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 801d0f4:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801d0f8:	f7ff fbfa 	bl	801c8f0 <LL_RCC_GetLPTIMClockSource>
 801d0fc:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d0fe:	e00c      	b.n	801d11a <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 801d100:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801d104:	f7ff fbf4 	bl	801c8f0 <LL_RCC_GetLPTIMClockSource>
 801d108:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d10a:	e006      	b.n	801d11a <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 801d10c:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801d110:	f7ff fbee 	bl	801c8f0 <LL_RCC_GetLPTIMClockSource>
 801d114:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d116:	e000      	b.n	801d11a <LPTIM_Disable+0x66>
      break;
 801d118:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	689b      	ldr	r3, [r3, #8]
 801d120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	68db      	ldr	r3, [r3, #12]
 801d128:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpCMP = hlptim->Instance->CMP;
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	695b      	ldr	r3, [r3, #20]
 801d130:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpARR = hlptim->Instance->ARR;
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	699b      	ldr	r3, [r3, #24]
 801d138:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	6a1b      	ldr	r3, [r3, #32]
 801d140:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d148:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	4a72      	ldr	r2, [pc, #456]	@ (801d318 <LPTIM_Disable+0x264>)
 801d150:	4293      	cmp	r3, r2
 801d152:	d019      	beq.n	801d188 <LPTIM_Disable+0xd4>
 801d154:	4a70      	ldr	r2, [pc, #448]	@ (801d318 <LPTIM_Disable+0x264>)
 801d156:	4293      	cmp	r3, r2
 801d158:	d81d      	bhi.n	801d196 <LPTIM_Disable+0xe2>
 801d15a:	4a70      	ldr	r2, [pc, #448]	@ (801d31c <LPTIM_Disable+0x268>)
 801d15c:	4293      	cmp	r3, r2
 801d15e:	d003      	beq.n	801d168 <LPTIM_Disable+0xb4>
 801d160:	4a6f      	ldr	r2, [pc, #444]	@ (801d320 <LPTIM_Disable+0x26c>)
 801d162:	4293      	cmp	r3, r2
 801d164:	d009      	beq.n	801d17a <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 801d166:	e016      	b.n	801d196 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 801d168:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801d16c:	f7ff fbd2 	bl	801c914 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 801d170:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801d174:	f7ff fbf0 	bl	801c958 <LL_APB1_GRP1_ReleaseReset>
      break;
 801d178:	e00e      	b.n	801d198 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 801d17a:	2020      	movs	r0, #32
 801d17c:	f7ff fbdb 	bl	801c936 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 801d180:	2020      	movs	r0, #32
 801d182:	f7ff fbfb 	bl	801c97c <LL_APB1_GRP2_ReleaseReset>
      break;
 801d186:	e007      	b.n	801d198 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 801d188:	2040      	movs	r0, #64	@ 0x40
 801d18a:	f7ff fbd4 	bl	801c936 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 801d18e:	2040      	movs	r0, #64	@ 0x40
 801d190:	f7ff fbf4 	bl	801c97c <LL_APB1_GRP2_ReleaseReset>
      break;
 801d194:	e000      	b.n	801d198 <LPTIM_Disable+0xe4>
      break;
 801d196:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 801d198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d106      	bne.n	801d1ac <LPTIM_Disable+0xf8>
 801d19e:	6a3b      	ldr	r3, [r7, #32]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d103      	bne.n	801d1ac <LPTIM_Disable+0xf8>
 801d1a4:	69bb      	ldr	r3, [r7, #24]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	f000 8097 	beq.w	801d2da <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	4a59      	ldr	r2, [pc, #356]	@ (801d318 <LPTIM_Disable+0x264>)
 801d1b2:	4293      	cmp	r3, r2
 801d1b4:	d013      	beq.n	801d1de <LPTIM_Disable+0x12a>
 801d1b6:	4a58      	ldr	r2, [pc, #352]	@ (801d318 <LPTIM_Disable+0x264>)
 801d1b8:	4293      	cmp	r3, r2
 801d1ba:	d815      	bhi.n	801d1e8 <LPTIM_Disable+0x134>
 801d1bc:	4a57      	ldr	r2, [pc, #348]	@ (801d31c <LPTIM_Disable+0x268>)
 801d1be:	4293      	cmp	r3, r2
 801d1c0:	d003      	beq.n	801d1ca <LPTIM_Disable+0x116>
 801d1c2:	4a57      	ldr	r2, [pc, #348]	@ (801d320 <LPTIM_Disable+0x26c>)
 801d1c4:	4293      	cmp	r3, r2
 801d1c6:	d005      	beq.n	801d1d4 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 801d1c8:	e00e      	b.n	801d1e8 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 801d1ca:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801d1ce:	f7ff fb76 	bl	801c8be <LL_RCC_SetLPTIMClockSource>
        break;
 801d1d2:	e00a      	b.n	801d1ea <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 801d1d4:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801d1d8:	f7ff fb71 	bl	801c8be <LL_RCC_SetLPTIMClockSource>
        break;
 801d1dc:	e005      	b.n	801d1ea <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 801d1de:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801d1e2:	f7ff fb6c 	bl	801c8be <LL_RCC_SetLPTIMClockSource>
        break;
 801d1e6:	e000      	b.n	801d1ea <LPTIM_Disable+0x136>
        break;
 801d1e8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 801d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d01a      	beq.n	801d226 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	691a      	ldr	r2, [r3, #16]
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	f042 0201 	orr.w	r2, r2, #1
 801d1fe:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d206:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 801d208:	2108      	movs	r1, #8
 801d20a:	6878      	ldr	r0, [r7, #4]
 801d20c:	f7ff ff22 	bl	801d054 <LPTIM_WaitForFlag>
 801d210:	4603      	mov	r3, r0
 801d212:	2b03      	cmp	r3, #3
 801d214:	d103      	bne.n	801d21e <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	2203      	movs	r2, #3
 801d21a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	2208      	movs	r2, #8
 801d224:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 801d226:	6a3b      	ldr	r3, [r7, #32]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d01a      	beq.n	801d262 <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	691a      	ldr	r2, [r3, #16]
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	f042 0201 	orr.w	r2, r2, #1
 801d23a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	6a3a      	ldr	r2, [r7, #32]
 801d242:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801d244:	2110      	movs	r1, #16
 801d246:	6878      	ldr	r0, [r7, #4]
 801d248:	f7ff ff04 	bl	801d054 <LPTIM_WaitForFlag>
 801d24c:	4603      	mov	r3, r0
 801d24e:	2b03      	cmp	r3, #3
 801d250:	d103      	bne.n	801d25a <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	2203      	movs	r2, #3
 801d256:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	2210      	movs	r2, #16
 801d260:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 801d262:	69bb      	ldr	r3, [r7, #24]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d01c      	beq.n	801d2a2 <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	691a      	ldr	r2, [r3, #16]
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	f042 0201 	orr.w	r2, r2, #1
 801d276:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	69ba      	ldr	r2, [r7, #24]
 801d27e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801d280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d284:	6878      	ldr	r0, [r7, #4]
 801d286:	f7ff fee5 	bl	801d054 <LPTIM_WaitForFlag>
 801d28a:	4603      	mov	r3, r0
 801d28c:	2b03      	cmp	r3, #3
 801d28e:	d103      	bne.n	801d298 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	2203      	movs	r2, #3
 801d294:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d2a0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	4a1c      	ldr	r2, [pc, #112]	@ (801d318 <LPTIM_Disable+0x264>)
 801d2a8:	4293      	cmp	r3, r2
 801d2aa:	d011      	beq.n	801d2d0 <LPTIM_Disable+0x21c>
 801d2ac:	4a1a      	ldr	r2, [pc, #104]	@ (801d318 <LPTIM_Disable+0x264>)
 801d2ae:	4293      	cmp	r3, r2
 801d2b0:	d812      	bhi.n	801d2d8 <LPTIM_Disable+0x224>
 801d2b2:	4a1a      	ldr	r2, [pc, #104]	@ (801d31c <LPTIM_Disable+0x268>)
 801d2b4:	4293      	cmp	r3, r2
 801d2b6:	d003      	beq.n	801d2c0 <LPTIM_Disable+0x20c>
 801d2b8:	4a19      	ldr	r2, [pc, #100]	@ (801d320 <LPTIM_Disable+0x26c>)
 801d2ba:	4293      	cmp	r3, r2
 801d2bc:	d004      	beq.n	801d2c8 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 801d2be:	e00b      	b.n	801d2d8 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 801d2c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d2c2:	f7ff fafc 	bl	801c8be <LL_RCC_SetLPTIMClockSource>
        break;
 801d2c6:	e008      	b.n	801d2da <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 801d2c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d2ca:	f7ff faf8 	bl	801c8be <LL_RCC_SetLPTIMClockSource>
        break;
 801d2ce:	e004      	b.n	801d2da <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 801d2d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d2d2:	f7ff faf4 	bl	801c8be <LL_RCC_SetLPTIMClockSource>
        break;
 801d2d6:	e000      	b.n	801d2da <LPTIM_Disable+0x226>
        break;
 801d2d8:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	691a      	ldr	r2, [r3, #16]
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	f022 0201 	bic.w	r2, r2, #1
 801d2e8:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d2f0:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d2f8:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	69fa      	ldr	r2, [r7, #28]
 801d300:	621a      	str	r2, [r3, #32]
 801d302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d304:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	f383 8810 	msr	PRIMASK, r3
}
 801d30c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801d30e:	bf00      	nop
 801d310:	3738      	adds	r7, #56	@ 0x38
 801d312:	46bd      	mov	sp, r7
 801d314:	bd80      	pop	{r7, pc}
 801d316:	bf00      	nop
 801d318:	40009800 	.word	0x40009800
 801d31c:	40007c00 	.word	0x40007c00
 801d320:	40009400 	.word	0x40009400

0801d324 <ai_buffer_get_size>:
 801d324:	b370      	cbz	r0, 801d384 <ai_buffer_get_size+0x60>
 801d326:	b410      	push	{r4}
 801d328:	6803      	ldr	r3, [r0, #0]
 801d32a:	4a17      	ldr	r2, [pc, #92]	@ (801d388 <ai_buffer_get_size+0x64>)
 801d32c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801d330:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801d334:	4293      	cmp	r3, r2
 801d336:	d01d      	beq.n	801d374 <ai_buffer_get_size+0x50>
 801d338:	6984      	ldr	r4, [r0, #24]
 801d33a:	6862      	ldr	r2, [r4, #4]
 801d33c:	7d03      	ldrb	r3, [r0, #20]
 801d33e:	6941      	ldr	r1, [r0, #20]
 801d340:	f1a3 0301 	sub.w	r3, r3, #1
 801d344:	fab3 f383 	clz	r3, r3
 801d348:	095b      	lsrs	r3, r3, #5
 801d34a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801d34e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801d352:	da0b      	bge.n	801d36c <ai_buffer_get_size+0x48>
 801d354:	2b01      	cmp	r3, #1
 801d356:	d102      	bne.n	801d35e <ai_buffer_get_size+0x3a>
 801d358:	2802      	cmp	r0, #2
 801d35a:	d007      	beq.n	801d36c <ai_buffer_get_size+0x48>
 801d35c:	2302      	movs	r3, #2
 801d35e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801d362:	3301      	adds	r3, #1
 801d364:	4298      	cmp	r0, r3
 801d366:	fb01 f202 	mul.w	r2, r1, r2
 801d36a:	d1f3      	bne.n	801d354 <ai_buffer_get_size+0x30>
 801d36c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801d370:	bc10      	pop	{r4}
 801d372:	4770      	bx	lr
 801d374:	2900      	cmp	r1, #0
 801d376:	d0df      	beq.n	801d338 <ai_buffer_get_size+0x14>
 801d378:	6984      	ldr	r4, [r0, #24]
 801d37a:	6862      	ldr	r2, [r4, #4]
 801d37c:	321f      	adds	r2, #31
 801d37e:	f022 021f 	bic.w	r2, r2, #31
 801d382:	e7db      	b.n	801d33c <ai_buffer_get_size+0x18>
 801d384:	4770      	bx	lr
 801d386:	bf00      	nop
 801d388:	000400c0 	.word	0x000400c0

0801d38c <ai_buffer_array_sane>:
 801d38c:	b138      	cbz	r0, 801d39e <ai_buffer_array_sane+0x12>
 801d38e:	6843      	ldr	r3, [r0, #4]
 801d390:	b123      	cbz	r3, 801d39c <ai_buffer_array_sane+0x10>
 801d392:	8840      	ldrh	r0, [r0, #2]
 801d394:	3800      	subs	r0, #0
 801d396:	bf18      	it	ne
 801d398:	2001      	movne	r0, #1
 801d39a:	4770      	bx	lr
 801d39c:	4618      	mov	r0, r3
 801d39e:	4770      	bx	lr

0801d3a0 <ai_buffer_array_item_set_address>:
 801d3a0:	b150      	cbz	r0, 801d3b8 <ai_buffer_array_item_set_address+0x18>
 801d3a2:	6843      	ldr	r3, [r0, #4]
 801d3a4:	b14b      	cbz	r3, 801d3ba <ai_buffer_array_item_set_address+0x1a>
 801d3a6:	8840      	ldrh	r0, [r0, #2]
 801d3a8:	b900      	cbnz	r0, 801d3ac <ai_buffer_array_item_set_address+0xc>
 801d3aa:	4770      	bx	lr
 801d3ac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d3b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d3b4:	2001      	movs	r0, #1
 801d3b6:	605a      	str	r2, [r3, #4]
 801d3b8:	4770      	bx	lr
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	4770      	bx	lr
 801d3be:	bf00      	nop

0801d3c0 <ai_platform_get_weights_map>:
 801d3c0:	b3aa      	cbz	r2, 801d42e <ai_platform_get_weights_map+0x6e>
 801d3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3c4:	4605      	mov	r5, r0
 801d3c6:	b1a0      	cbz	r0, 801d3f2 <ai_platform_get_weights_map+0x32>
 801d3c8:	460c      	mov	r4, r1
 801d3ca:	b191      	cbz	r1, 801d3f2 <ai_platform_get_weights_map+0x32>
 801d3cc:	4b23      	ldr	r3, [pc, #140]	@ (801d45c <ai_platform_get_weights_map+0x9c>)
 801d3ce:	6811      	ldr	r1, [r2, #0]
 801d3d0:	4299      	cmp	r1, r3
 801d3d2:	4616      	mov	r6, r2
 801d3d4:	d00f      	beq.n	801d3f6 <ai_platform_get_weights_map+0x36>
 801d3d6:	6856      	ldr	r6, [r2, #4]
 801d3d8:	b15e      	cbz	r6, 801d3f2 <ai_platform_get_weights_map+0x32>
 801d3da:	6837      	ldr	r7, [r6, #0]
 801d3dc:	429f      	cmp	r7, r3
 801d3de:	d028      	beq.n	801d432 <ai_platform_get_weights_map+0x72>
 801d3e0:	6006      	str	r6, [r0, #0]
 801d3e2:	f1a4 0001 	sub.w	r0, r4, #1
 801d3e6:	fab0 f080 	clz	r0, r0
 801d3ea:	0940      	lsrs	r0, r0, #5
 801d3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3ee:	428c      	cmp	r4, r1
 801d3f0:	d032      	beq.n	801d458 <ai_platform_get_weights_map+0x98>
 801d3f2:	2000      	movs	r0, #0
 801d3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3f6:	1d10      	adds	r0, r2, #4
 801d3f8:	f7ff ffc8 	bl	801d38c <ai_buffer_array_sane>
 801d3fc:	2800      	cmp	r0, #0
 801d3fe:	d0f8      	beq.n	801d3f2 <ai_platform_get_weights_map+0x32>
 801d400:	88f3      	ldrh	r3, [r6, #6]
 801d402:	429c      	cmp	r4, r3
 801d404:	d1f5      	bne.n	801d3f2 <ai_platform_get_weights_map+0x32>
 801d406:	2100      	movs	r1, #0
 801d408:	1f28      	subs	r0, r5, #4
 801d40a:	468c      	mov	ip, r1
 801d40c:	68b3      	ldr	r3, [r6, #8]
 801d40e:	440b      	add	r3, r1
 801d410:	311c      	adds	r1, #28
 801d412:	685b      	ldr	r3, [r3, #4]
 801d414:	b12b      	cbz	r3, 801d422 <ai_platform_get_weights_map+0x62>
 801d416:	f10c 0c01 	add.w	ip, ip, #1
 801d41a:	4564      	cmp	r4, ip
 801d41c:	f840 3f04 	str.w	r3, [r0, #4]!
 801d420:	d1f4      	bne.n	801d40c <ai_platform_get_weights_map+0x4c>
 801d422:	eba4 000c 	sub.w	r0, r4, ip
 801d426:	fab0 f080 	clz	r0, r0
 801d42a:	0940      	lsrs	r0, r0, #5
 801d42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d42e:	2000      	movs	r0, #0
 801d430:	4770      	bx	lr
 801d432:	4632      	mov	r2, r6
 801d434:	3804      	subs	r0, #4
 801d436:	2100      	movs	r1, #0
 801d438:	e000      	b.n	801d43c <ai_platform_get_weights_map+0x7c>
 801d43a:	4619      	mov	r1, r3
 801d43c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801d440:	42bb      	cmp	r3, r7
 801d442:	d0d4      	beq.n	801d3ee <ai_platform_get_weights_map+0x2e>
 801d444:	f840 3f04 	str.w	r3, [r0, #4]!
 801d448:	1c4b      	adds	r3, r1, #1
 801d44a:	429c      	cmp	r4, r3
 801d44c:	d1f5      	bne.n	801d43a <ai_platform_get_weights_map+0x7a>
 801d44e:	3102      	adds	r1, #2
 801d450:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 801d454:	42bb      	cmp	r3, r7
 801d456:	d1cc      	bne.n	801d3f2 <ai_platform_get_weights_map+0x32>
 801d458:	2001      	movs	r0, #1
 801d45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d45c:	a1facade 	.word	0xa1facade

0801d460 <ai_platform_get_activations_map>:
 801d460:	2a00      	cmp	r2, #0
 801d462:	d036      	beq.n	801d4d2 <ai_platform_get_activations_map+0x72>
 801d464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d466:	4605      	mov	r5, r0
 801d468:	b1a0      	cbz	r0, 801d494 <ai_platform_get_activations_map+0x34>
 801d46a:	460c      	mov	r4, r1
 801d46c:	b191      	cbz	r1, 801d494 <ai_platform_get_activations_map+0x34>
 801d46e:	4b24      	ldr	r3, [pc, #144]	@ (801d500 <ai_platform_get_activations_map+0xa0>)
 801d470:	6811      	ldr	r1, [r2, #0]
 801d472:	4299      	cmp	r1, r3
 801d474:	4616      	mov	r6, r2
 801d476:	d00f      	beq.n	801d498 <ai_platform_get_activations_map+0x38>
 801d478:	6a16      	ldr	r6, [r2, #32]
 801d47a:	b15e      	cbz	r6, 801d494 <ai_platform_get_activations_map+0x34>
 801d47c:	6837      	ldr	r7, [r6, #0]
 801d47e:	429f      	cmp	r7, r3
 801d480:	d029      	beq.n	801d4d6 <ai_platform_get_activations_map+0x76>
 801d482:	6006      	str	r6, [r0, #0]
 801d484:	f1a4 0001 	sub.w	r0, r4, #1
 801d488:	fab0 f080 	clz	r0, r0
 801d48c:	0940      	lsrs	r0, r0, #5
 801d48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d490:	428c      	cmp	r4, r1
 801d492:	d033      	beq.n	801d4fc <ai_platform_get_activations_map+0x9c>
 801d494:	2000      	movs	r0, #0
 801d496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d498:	f102 000c 	add.w	r0, r2, #12
 801d49c:	f7ff ff76 	bl	801d38c <ai_buffer_array_sane>
 801d4a0:	2800      	cmp	r0, #0
 801d4a2:	d0f7      	beq.n	801d494 <ai_platform_get_activations_map+0x34>
 801d4a4:	89f3      	ldrh	r3, [r6, #14]
 801d4a6:	429c      	cmp	r4, r3
 801d4a8:	d1f4      	bne.n	801d494 <ai_platform_get_activations_map+0x34>
 801d4aa:	2100      	movs	r1, #0
 801d4ac:	1f28      	subs	r0, r5, #4
 801d4ae:	468c      	mov	ip, r1
 801d4b0:	6933      	ldr	r3, [r6, #16]
 801d4b2:	440b      	add	r3, r1
 801d4b4:	311c      	adds	r1, #28
 801d4b6:	685b      	ldr	r3, [r3, #4]
 801d4b8:	b12b      	cbz	r3, 801d4c6 <ai_platform_get_activations_map+0x66>
 801d4ba:	f10c 0c01 	add.w	ip, ip, #1
 801d4be:	4564      	cmp	r4, ip
 801d4c0:	f840 3f04 	str.w	r3, [r0, #4]!
 801d4c4:	d1f4      	bne.n	801d4b0 <ai_platform_get_activations_map+0x50>
 801d4c6:	eba4 000c 	sub.w	r0, r4, ip
 801d4ca:	fab0 f080 	clz	r0, r0
 801d4ce:	0940      	lsrs	r0, r0, #5
 801d4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4d2:	2000      	movs	r0, #0
 801d4d4:	4770      	bx	lr
 801d4d6:	4632      	mov	r2, r6
 801d4d8:	3804      	subs	r0, #4
 801d4da:	2100      	movs	r1, #0
 801d4dc:	e000      	b.n	801d4e0 <ai_platform_get_activations_map+0x80>
 801d4de:	4619      	mov	r1, r3
 801d4e0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801d4e4:	42bb      	cmp	r3, r7
 801d4e6:	d0d3      	beq.n	801d490 <ai_platform_get_activations_map+0x30>
 801d4e8:	f840 3f04 	str.w	r3, [r0, #4]!
 801d4ec:	1c4b      	adds	r3, r1, #1
 801d4ee:	429c      	cmp	r4, r3
 801d4f0:	d1f5      	bne.n	801d4de <ai_platform_get_activations_map+0x7e>
 801d4f2:	3102      	adds	r1, #2
 801d4f4:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 801d4f8:	42bb      	cmp	r3, r7
 801d4fa:	d1cb      	bne.n	801d494 <ai_platform_get_activations_map+0x34>
 801d4fc:	2001      	movs	r0, #1
 801d4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d500:	a1facade 	.word	0xa1facade

0801d504 <ai_platform_bind_network_params>:
 801d504:	b198      	cbz	r0, 801d52e <ai_platform_bind_network_params+0x2a>
 801d506:	b1a9      	cbz	r1, 801d534 <ai_platform_bind_network_params+0x30>
 801d508:	b1ba      	cbz	r2, 801d53a <ai_platform_bind_network_params+0x36>
 801d50a:	b410      	push	{r4}
 801d50c:	4603      	mov	r3, r0
 801d50e:	4c0c      	ldr	r4, [pc, #48]	@ (801d540 <ai_platform_bind_network_params+0x3c>)
 801d510:	f843 4b04 	str.w	r4, [r3], #4
 801d514:	f100 0c0c 	add.w	ip, r0, #12
 801d518:	c903      	ldmia	r1, {r0, r1}
 801d51a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d51e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d522:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d526:	2301      	movs	r3, #1
 801d528:	4618      	mov	r0, r3
 801d52a:	bc10      	pop	{r4}
 801d52c:	4770      	bx	lr
 801d52e:	4603      	mov	r3, r0
 801d530:	4618      	mov	r0, r3
 801d532:	4770      	bx	lr
 801d534:	460b      	mov	r3, r1
 801d536:	4618      	mov	r0, r3
 801d538:	4770      	bx	lr
 801d53a:	4613      	mov	r3, r2
 801d53c:	4618      	mov	r0, r3
 801d53e:	4770      	bx	lr
 801d540:	a1facade 	.word	0xa1facade

0801d544 <ai_platform_network_get_error>:
 801d544:	4b04      	ldr	r3, [pc, #16]	@ (801d558 <ai_platform_network_get_error+0x14>)
 801d546:	6802      	ldr	r2, [r0, #0]
 801d548:	4393      	bics	r3, r2
 801d54a:	d102      	bne.n	801d552 <ai_platform_network_get_error+0xe>
 801d54c:	300c      	adds	r0, #12
 801d54e:	f000 bc79 	b.w	801de44 <core_get_error>
 801d552:	f241 0010 	movw	r0, #4112	@ 0x1010
 801d556:	4770      	bx	lr
 801d558:	a1c00100 	.word	0xa1c00100

0801d55c <ai_platform_network_set_error>:
 801d55c:	b110      	cbz	r0, 801d564 <ai_platform_network_set_error+0x8>
 801d55e:	300c      	adds	r0, #12
 801d560:	f000 bc76 	b.w	801de50 <core_set_error>
 801d564:	4770      	bx	lr
 801d566:	bf00      	nop

0801d568 <ai_platform_inputs_get>:
 801d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d56c:	4b38      	ldr	r3, [pc, #224]	@ (801d650 <ai_platform_inputs_get+0xe8>)
 801d56e:	6802      	ldr	r2, [r0, #0]
 801d570:	b085      	sub	sp, #20
 801d572:	4393      	bics	r3, r2
 801d574:	9003      	str	r0, [sp, #12]
 801d576:	9102      	str	r1, [sp, #8]
 801d578:	d160      	bne.n	801d63c <ai_platform_inputs_get+0xd4>
 801d57a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d04f      	beq.n	801d620 <ai_platform_inputs_get+0xb8>
 801d580:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 801d584:	f1ba 0f00 	cmp.w	sl, #0
 801d588:	d04a      	beq.n	801d620 <ai_platform_inputs_get+0xb8>
 801d58a:	f04f 0b00 	mov.w	fp, #0
 801d58e:	465d      	mov	r5, fp
 801d590:	e017      	b.n	801d5c2 <ai_platform_inputs_get+0x5a>
 801d592:	9901      	ldr	r1, [sp, #4]
 801d594:	f04f 0c01 	mov.w	ip, #1
 801d598:	f847 c001 	str.w	ip, [r7, r1]
 801d59c:	69b1      	ldr	r1, [r6, #24]
 801d59e:	684e      	ldr	r6, [r1, #4]
 801d5a0:	60a3      	str	r3, [r4, #8]
 801d5a2:	f04f 0101 	mov.w	r1, #1
 801d5a6:	7521      	strb	r1, [r4, #20]
 801d5a8:	6961      	ldr	r1, [r4, #20]
 801d5aa:	6020      	str	r0, [r4, #0]
 801d5ac:	f369 211f 	bfi	r1, r9, #8, #24
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	e9c4 3603 	strd	r3, r6, [r4, #12]
 801d5b6:	e9c4 1805 	strd	r1, r8, [r4, #20]
 801d5ba:	6062      	str	r2, [r4, #4]
 801d5bc:	3501      	adds	r5, #1
 801d5be:	f10b 0b1c 	add.w	fp, fp, #28
 801d5c2:	f8ba 3000 	ldrh.w	r3, [sl]
 801d5c6:	42ab      	cmp	r3, r5
 801d5c8:	b2aa      	uxth	r2, r5
 801d5ca:	d93b      	bls.n	801d644 <ai_platform_inputs_get+0xdc>
 801d5cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d5d0:	00e9      	lsls	r1, r5, #3
 801d5d2:	9101      	str	r1, [sp, #4]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d035      	beq.n	801d644 <ai_platform_inputs_get+0xdc>
 801d5d8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801d5dc:	2e00      	cmp	r6, #0
 801d5de:	d031      	beq.n	801d644 <ai_platform_inputs_get+0xdc>
 801d5e0:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d5e4:	69b2      	ldr	r2, [r6, #24]
 801d5e6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801d5ea:	6810      	ldr	r0, [r2, #0]
 801d5ec:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801d5f0:	68b3      	ldr	r3, [r6, #8]
 801d5f2:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801d5f6:	f001 fbff 	bl	801edf8 <ai_array_to_buffer_fmt>
 801d5fa:	69b1      	ldr	r1, [r6, #24]
 801d5fc:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801d600:	688a      	ldr	r2, [r1, #8]
 801d602:	445c      	add	r4, fp
 801d604:	2b00      	cmp	r3, #0
 801d606:	d0ca      	beq.n	801d59e <ai_platform_inputs_get+0x36>
 801d608:	2100      	movs	r1, #0
 801d60a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 801d60e:	6831      	ldr	r1, [r6, #0]
 801d610:	6059      	str	r1, [r3, #4]
 801d612:	b111      	cbz	r1, 801d61a <ai_platform_inputs_get+0xb2>
 801d614:	8849      	ldrh	r1, [r1, #2]
 801d616:	2900      	cmp	r1, #0
 801d618:	d1bb      	bne.n	801d592 <ai_platform_inputs_get+0x2a>
 801d61a:	69b1      	ldr	r1, [r6, #24]
 801d61c:	2300      	movs	r3, #0
 801d61e:	e7be      	b.n	801d59e <ai_platform_inputs_get+0x36>
 801d620:	9803      	ldr	r0, [sp, #12]
 801d622:	2218      	movs	r2, #24
 801d624:	2111      	movs	r1, #17
 801d626:	300c      	adds	r0, #12
 801d628:	f000 fc12 	bl	801de50 <core_set_error>
 801d62c:	2200      	movs	r2, #0
 801d62e:	4610      	mov	r0, r2
 801d630:	9b02      	ldr	r3, [sp, #8]
 801d632:	b103      	cbz	r3, 801d636 <ai_platform_inputs_get+0xce>
 801d634:	801a      	strh	r2, [r3, #0]
 801d636:	b005      	add	sp, #20
 801d638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d63c:	2000      	movs	r0, #0
 801d63e:	b005      	add	sp, #20
 801d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d644:	2a00      	cmp	r2, #0
 801d646:	d0eb      	beq.n	801d620 <ai_platform_inputs_get+0xb8>
 801d648:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d64c:	6858      	ldr	r0, [r3, #4]
 801d64e:	e7ef      	b.n	801d630 <ai_platform_inputs_get+0xc8>
 801d650:	a1c00100 	.word	0xa1c00100

0801d654 <ai_platform_outputs_get>:
 801d654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d658:	4b37      	ldr	r3, [pc, #220]	@ (801d738 <ai_platform_outputs_get+0xe4>)
 801d65a:	6802      	ldr	r2, [r0, #0]
 801d65c:	b085      	sub	sp, #20
 801d65e:	4393      	bics	r3, r2
 801d660:	9003      	str	r0, [sp, #12]
 801d662:	9102      	str	r1, [sp, #8]
 801d664:	d15d      	bne.n	801d722 <ai_platform_outputs_get+0xce>
 801d666:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801d668:	2b01      	cmp	r3, #1
 801d66a:	d94c      	bls.n	801d706 <ai_platform_outputs_get+0xb2>
 801d66c:	f04f 0b00 	mov.w	fp, #0
 801d670:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 801d674:	465d      	mov	r5, fp
 801d676:	46d8      	mov	r8, fp
 801d678:	e017      	b.n	801d6aa <ai_platform_outputs_get+0x56>
 801d67a:	9a01      	ldr	r2, [sp, #4]
 801d67c:	f04f 0c01 	mov.w	ip, #1
 801d680:	f847 c002 	str.w	ip, [r7, r2]
 801d684:	69b2      	ldr	r2, [r6, #24]
 801d686:	6856      	ldr	r6, [r2, #4]
 801d688:	6020      	str	r0, [r4, #0]
 801d68a:	f04f 0201 	mov.w	r2, #1
 801d68e:	7522      	strb	r2, [r4, #20]
 801d690:	6960      	ldr	r0, [r4, #20]
 801d692:	6061      	str	r1, [r4, #4]
 801d694:	f369 201f 	bfi	r0, r9, #8, #24
 801d698:	e9c4 6004 	strd	r6, r0, [r4, #16]
 801d69c:	e9c4 3802 	strd	r3, r8, [r4, #8]
 801d6a0:	9b00      	ldr	r3, [sp, #0]
 801d6a2:	61a3      	str	r3, [r4, #24]
 801d6a4:	3501      	adds	r5, #1
 801d6a6:	f10b 0b1c 	add.w	fp, fp, #28
 801d6aa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801d6ae:	42ab      	cmp	r3, r5
 801d6b0:	b2aa      	uxth	r2, r5
 801d6b2:	d93a      	bls.n	801d72a <ai_platform_outputs_get+0xd6>
 801d6b4:	f8da 3010 	ldr.w	r3, [sl, #16]
 801d6b8:	00e9      	lsls	r1, r5, #3
 801d6ba:	9101      	str	r1, [sp, #4]
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d034      	beq.n	801d72a <ai_platform_outputs_get+0xd6>
 801d6c0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801d6c4:	2e00      	cmp	r6, #0
 801d6c6:	d030      	beq.n	801d72a <ai_platform_outputs_get+0xd6>
 801d6c8:	f8da 3014 	ldr.w	r3, [sl, #20]
 801d6cc:	69b2      	ldr	r2, [r6, #24]
 801d6ce:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801d6d2:	68b3      	ldr	r3, [r6, #8]
 801d6d4:	6810      	ldr	r0, [r2, #0]
 801d6d6:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801d6da:	68f3      	ldr	r3, [r6, #12]
 801d6dc:	9300      	str	r3, [sp, #0]
 801d6de:	f001 fb8b 	bl	801edf8 <ai_array_to_buffer_fmt>
 801d6e2:	69b2      	ldr	r2, [r6, #24]
 801d6e4:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801d6e8:	6891      	ldr	r1, [r2, #8]
 801d6ea:	445c      	add	r4, fp
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d0ca      	beq.n	801d686 <ai_platform_outputs_get+0x32>
 801d6f0:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 801d6f4:	6832      	ldr	r2, [r6, #0]
 801d6f6:	605a      	str	r2, [r3, #4]
 801d6f8:	b112      	cbz	r2, 801d700 <ai_platform_outputs_get+0xac>
 801d6fa:	8852      	ldrh	r2, [r2, #2]
 801d6fc:	2a00      	cmp	r2, #0
 801d6fe:	d1bc      	bne.n	801d67a <ai_platform_outputs_get+0x26>
 801d700:	69b2      	ldr	r2, [r6, #24]
 801d702:	2300      	movs	r3, #0
 801d704:	e7bf      	b.n	801d686 <ai_platform_outputs_get+0x32>
 801d706:	9803      	ldr	r0, [sp, #12]
 801d708:	2218      	movs	r2, #24
 801d70a:	2111      	movs	r1, #17
 801d70c:	300c      	adds	r0, #12
 801d70e:	f000 fb9f 	bl	801de50 <core_set_error>
 801d712:	2200      	movs	r2, #0
 801d714:	4610      	mov	r0, r2
 801d716:	9b02      	ldr	r3, [sp, #8]
 801d718:	b103      	cbz	r3, 801d71c <ai_platform_outputs_get+0xc8>
 801d71a:	801a      	strh	r2, [r3, #0]
 801d71c:	b005      	add	sp, #20
 801d71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d722:	2000      	movs	r0, #0
 801d724:	b005      	add	sp, #20
 801d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d72a:	2a00      	cmp	r2, #0
 801d72c:	d0eb      	beq.n	801d706 <ai_platform_outputs_get+0xb2>
 801d72e:	f8da 3014 	ldr.w	r3, [sl, #20]
 801d732:	6858      	ldr	r0, [r3, #4]
 801d734:	e7ef      	b.n	801d716 <ai_platform_outputs_get+0xc2>
 801d736:	bf00      	nop
 801d738:	a1c00100 	.word	0xa1c00100

0801d73c <ai_platform_network_create>:
 801d73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d740:	b083      	sub	sp, #12
 801d742:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 801d746:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801d74a:	b320      	cbz	r0, 801d796 <ai_platform_network_create+0x5a>
 801d74c:	6002      	str	r2, [r0, #0]
 801d74e:	4616      	mov	r6, r2
 801d750:	461f      	mov	r7, r3
 801d752:	4604      	mov	r4, r0
 801d754:	f000 fb74 	bl	801de40 <core_init>
 801d758:	b970      	cbnz	r0, 801d778 <ai_platform_network_create+0x3c>
 801d75a:	2530      	movs	r5, #48	@ 0x30
 801d75c:	2300      	movs	r3, #0
 801d75e:	6023      	str	r3, [r4, #0]
 801d760:	2410      	movs	r4, #16
 801d762:	4642      	mov	r2, r8
 801d764:	4649      	mov	r1, r9
 801d766:	4638      	mov	r0, r7
 801d768:	f001 fbc8 	bl	801eefc <ai_version_get>
 801d76c:	60b0      	str	r0, [r6, #8]
 801d76e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801d772:	b003      	add	sp, #12
 801d774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d778:	2200      	movs	r2, #0
 801d77a:	4649      	mov	r1, r9
 801d77c:	4638      	mov	r0, r7
 801d77e:	f001 fbbd 	bl	801eefc <ai_version_get>
 801d782:	2200      	movs	r2, #0
 801d784:	4605      	mov	r5, r0
 801d786:	2105      	movs	r1, #5
 801d788:	2001      	movs	r0, #1
 801d78a:	f001 fbb7 	bl	801eefc <ai_version_get>
 801d78e:	4285      	cmp	r5, r0
 801d790:	d008      	beq.n	801d7a4 <ai_platform_network_create+0x68>
 801d792:	2501      	movs	r5, #1
 801d794:	e7e2      	b.n	801d75c <ai_platform_network_create+0x20>
 801d796:	2510      	movs	r5, #16
 801d798:	462c      	mov	r4, r5
 801d79a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801d79e:	b003      	add	sp, #12
 801d7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7a4:	4b05      	ldr	r3, [pc, #20]	@ (801d7bc <ai_platform_network_create+0x80>)
 801d7a6:	9301      	str	r3, [sp, #4]
 801d7a8:	a801      	add	r0, sp, #4
 801d7aa:	f000 fb5d 	bl	801de68 <ai_check_custom_types>
 801d7ae:	b110      	cbz	r0, 801d7b6 <ai_platform_network_create+0x7a>
 801d7b0:	2400      	movs	r4, #0
 801d7b2:	4625      	mov	r5, r4
 801d7b4:	e7d5      	b.n	801d762 <ai_platform_network_create+0x26>
 801d7b6:	2502      	movs	r5, #2
 801d7b8:	e7d0      	b.n	801d75c <ai_platform_network_create+0x20>
 801d7ba:	bf00      	nop
 801d7bc:	84048403 	.word	0x84048403

0801d7c0 <ai_platform_network_init>:
 801d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c4:	4b63      	ldr	r3, [pc, #396]	@ (801d954 <ai_platform_network_init+0x194>)
 801d7c6:	6802      	ldr	r2, [r0, #0]
 801d7c8:	4393      	bics	r3, r2
 801d7ca:	b083      	sub	sp, #12
 801d7cc:	d154      	bne.n	801d878 <ai_platform_network_init+0xb8>
 801d7ce:	4604      	mov	r4, r0
 801d7d0:	460f      	mov	r7, r1
 801d7d2:	2900      	cmp	r1, #0
 801d7d4:	f000 80a8 	beq.w	801d928 <ai_platform_network_init+0x168>
 801d7d8:	680b      	ldr	r3, [r1, #0]
 801d7da:	495f      	ldr	r1, [pc, #380]	@ (801d958 <ai_platform_network_init+0x198>)
 801d7dc:	428b      	cmp	r3, r1
 801d7de:	d113      	bne.n	801d808 <ai_platform_network_init+0x48>
 801d7e0:	495c      	ldr	r1, [pc, #368]	@ (801d954 <ai_platform_network_init+0x194>)
 801d7e2:	89bd      	ldrh	r5, [r7, #12]
 801d7e4:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 801d7e8:	f8d7 8010 	ldr.w	r8, [r7, #16]
 801d7ec:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 801d7f0:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 801d7f4:	68be      	ldr	r6, [r7, #8]
 801d7f6:	428a      	cmp	r2, r1
 801d7f8:	d02a      	beq.n	801d850 <ai_platform_network_init+0x90>
 801d7fa:	2303      	movs	r3, #3
 801d7fc:	6123      	str	r3, [r4, #16]
 801d7fe:	4627      	mov	r7, r4
 801d800:	4638      	mov	r0, r7
 801d802:	b003      	add	sp, #12
 801d804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d808:	2101      	movs	r1, #1
 801d80a:	4638      	mov	r0, r7
 801d80c:	9301      	str	r3, [sp, #4]
 801d80e:	687d      	ldr	r5, [r7, #4]
 801d810:	f7ff fd88 	bl	801d324 <ai_buffer_get_size>
 801d814:	f107 081c 	add.w	r8, r7, #28
 801d818:	4683      	mov	fp, r0
 801d81a:	2101      	movs	r1, #1
 801d81c:	4640      	mov	r0, r8
 801d81e:	463e      	mov	r6, r7
 801d820:	6a3f      	ldr	r7, [r7, #32]
 801d822:	f7ff fd7f 	bl	801d324 <ai_buffer_get_size>
 801d826:	f1bb 0f00 	cmp.w	fp, #0
 801d82a:	9b01      	ldr	r3, [sp, #4]
 801d82c:	bf0a      	itet	eq
 801d82e:	46d9      	moveq	r9, fp
 801d830:	f04f 0901 	movne.w	r9, #1
 801d834:	465e      	moveq	r6, fp
 801d836:	b320      	cbz	r0, 801d882 <ai_platform_network_init+0xc2>
 801d838:	2f00      	cmp	r7, #0
 801d83a:	f000 8083 	beq.w	801d944 <ai_platform_network_init+0x184>
 801d83e:	f04f 0a01 	mov.w	sl, #1
 801d842:	b30d      	cbz	r5, 801d888 <ai_platform_network_init+0xc8>
 801d844:	6822      	ldr	r2, [r4, #0]
 801d846:	4943      	ldr	r1, [pc, #268]	@ (801d954 <ai_platform_network_init+0x194>)
 801d848:	2500      	movs	r5, #0
 801d84a:	428a      	cmp	r2, r1
 801d84c:	46ab      	mov	fp, r5
 801d84e:	d1d4      	bne.n	801d7fa <ai_platform_network_init+0x3a>
 801d850:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 801d852:	454a      	cmp	r2, r9
 801d854:	4a40      	ldr	r2, [pc, #256]	@ (801d958 <ai_platform_network_init+0x198>)
 801d856:	d222      	bcs.n	801d89e <ai_platform_network_init+0xde>
 801d858:	4293      	cmp	r3, r2
 801d85a:	d15d      	bne.n	801d918 <ai_platform_network_init+0x158>
 801d85c:	6266      	str	r6, [r4, #36]	@ 0x24
 801d85e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 801d862:	f8a4 b020 	strh.w	fp, [r4, #32]
 801d866:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 801d86a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 801d86e:	8525      	strh	r5, [r4, #40]	@ 0x28
 801d870:	4620      	mov	r0, r4
 801d872:	f000 fb23 	bl	801debc <ai_layers_init_all>
 801d876:	e7c0      	b.n	801d7fa <ai_platform_network_init+0x3a>
 801d878:	2700      	movs	r7, #0
 801d87a:	4638      	mov	r0, r7
 801d87c:	b003      	add	sp, #12
 801d87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d882:	4680      	mov	r8, r0
 801d884:	4682      	mov	sl, r0
 801d886:	e7dc      	b.n	801d842 <ai_platform_network_init+0x82>
 801d888:	f1bb 0f00 	cmp.w	fp, #0
 801d88c:	d0da      	beq.n	801d844 <ai_platform_network_init+0x84>
 801d88e:	2212      	movs	r2, #18
 801d890:	2110      	movs	r1, #16
 801d892:	f104 000c 	add.w	r0, r4, #12
 801d896:	f000 fadb 	bl	801de50 <core_set_error>
 801d89a:	462f      	mov	r7, r5
 801d89c:	e7b0      	b.n	801d800 <ai_platform_network_init+0x40>
 801d89e:	4293      	cmp	r3, r2
 801d8a0:	d0dc      	beq.n	801d85c <ai_platform_network_init+0x9c>
 801d8a2:	f1b9 0f00 	cmp.w	r9, #0
 801d8a6:	d018      	beq.n	801d8da <ai_platform_network_init+0x11a>
 801d8a8:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 801d8ac:	009b      	lsls	r3, r3, #2
 801d8ae:	f8cd 9004 	str.w	r9, [sp, #4]
 801d8b2:	2700      	movs	r7, #0
 801d8b4:	4699      	mov	r9, r3
 801d8b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d8b8:	eb06 0e07 	add.w	lr, r6, r7
 801d8bc:	eb03 0c07 	add.w	ip, r3, r7
 801d8c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d8c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8c8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801d8cc:	371c      	adds	r7, #28
 801d8ce:	45b9      	cmp	r9, r7
 801d8d0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801d8d4:	d1ef      	bne.n	801d8b6 <ai_platform_network_init+0xf6>
 801d8d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d8da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801d8dc:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 801d8e0:	4553      	cmp	r3, sl
 801d8e2:	f8a4 b020 	strh.w	fp, [r4, #32]
 801d8e6:	d325      	bcc.n	801d934 <ai_platform_network_init+0x174>
 801d8e8:	f1ba 0f00 	cmp.w	sl, #0
 801d8ec:	d0bd      	beq.n	801d86a <ai_platform_network_init+0xaa>
 801d8ee:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 801d8f2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801d8f6:	f04f 0c00 	mov.w	ip, #0
 801d8fa:	eb08 070c 	add.w	r7, r8, ip
 801d8fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801d900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d902:	4466      	add	r6, ip
 801d904:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801d906:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801d90a:	f10c 0c1c 	add.w	ip, ip, #28
 801d90e:	45f4      	cmp	ip, lr
 801d910:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801d914:	d1f1      	bne.n	801d8fa <ai_platform_network_init+0x13a>
 801d916:	e7a8      	b.n	801d86a <ai_platform_network_init+0xaa>
 801d918:	2212      	movs	r2, #18
 801d91a:	2116      	movs	r1, #22
 801d91c:	f104 000c 	add.w	r0, r4, #12
 801d920:	f000 fa96 	bl	801de50 <core_set_error>
 801d924:	2700      	movs	r7, #0
 801d926:	e76b      	b.n	801d800 <ai_platform_network_init+0x40>
 801d928:	2211      	movs	r2, #17
 801d92a:	2110      	movs	r1, #16
 801d92c:	300c      	adds	r0, #12
 801d92e:	f000 fa8f 	bl	801de50 <core_set_error>
 801d932:	e765      	b.n	801d800 <ai_platform_network_init+0x40>
 801d934:	2213      	movs	r2, #19
 801d936:	2116      	movs	r1, #22
 801d938:	f104 000c 	add.w	r0, r4, #12
 801d93c:	f000 fa88 	bl	801de50 <core_set_error>
 801d940:	2700      	movs	r7, #0
 801d942:	e75d      	b.n	801d800 <ai_platform_network_init+0x40>
 801d944:	2213      	movs	r2, #19
 801d946:	2110      	movs	r1, #16
 801d948:	f104 000c 	add.w	r0, r4, #12
 801d94c:	f000 fa80 	bl	801de50 <core_set_error>
 801d950:	e756      	b.n	801d800 <ai_platform_network_init+0x40>
 801d952:	bf00      	nop
 801d954:	a1c00100 	.word	0xa1c00100
 801d958:	a1facade 	.word	0xa1facade

0801d95c <ai_platform_network_post_init>:
 801d95c:	b538      	push	{r3, r4, r5, lr}
 801d95e:	4b16      	ldr	r3, [pc, #88]	@ (801d9b8 <ai_platform_network_post_init+0x5c>)
 801d960:	6802      	ldr	r2, [r0, #0]
 801d962:	ea02 0103 	and.w	r1, r2, r3
 801d966:	4393      	bics	r3, r2
 801d968:	d108      	bne.n	801d97c <ai_platform_network_post_init+0x20>
 801d96a:	6903      	ldr	r3, [r0, #16]
 801d96c:	f013 0502 	ands.w	r5, r3, #2
 801d970:	4604      	mov	r4, r0
 801d972:	d005      	beq.n	801d980 <ai_platform_network_post_init+0x24>
 801d974:	428a      	cmp	r2, r1
 801d976:	d00a      	beq.n	801d98e <ai_platform_network_post_init+0x32>
 801d978:	2001      	movs	r0, #1
 801d97a:	bd38      	pop	{r3, r4, r5, pc}
 801d97c:	2000      	movs	r0, #0
 801d97e:	bd38      	pop	{r3, r4, r5, pc}
 801d980:	2210      	movs	r2, #16
 801d982:	2111      	movs	r1, #17
 801d984:	300c      	adds	r0, #12
 801d986:	f000 fa63 	bl	801de50 <core_set_error>
 801d98a:	4628      	mov	r0, r5
 801d98c:	bd38      	pop	{r3, r4, r5, pc}
 801d98e:	f000 faa3 	bl	801ded8 <ai_layers_post_init_all>
 801d992:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d994:	2b00      	cmp	r3, #0
 801d996:	d0ef      	beq.n	801d978 <ai_platform_network_post_init+0x1c>
 801d998:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801d99a:	e008      	b.n	801d9ae <ai_platform_network_post_init+0x52>
 801d99c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 801d9a0:	4798      	blx	r3
 801d9a2:	692b      	ldr	r3, [r5, #16]
 801d9a4:	42ab      	cmp	r3, r5
 801d9a6:	d0e7      	beq.n	801d978 <ai_platform_network_post_init+0x1c>
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d0e5      	beq.n	801d978 <ai_platform_network_post_init+0x1c>
 801d9ac:	461d      	mov	r5, r3
 801d9ae:	4629      	mov	r1, r5
 801d9b0:	2000      	movs	r0, #0
 801d9b2:	2d00      	cmp	r5, #0
 801d9b4:	d1f2      	bne.n	801d99c <ai_platform_network_post_init+0x40>
 801d9b6:	e7df      	b.n	801d978 <ai_platform_network_post_init+0x1c>
 801d9b8:	a1c00100 	.word	0xa1c00100

0801d9bc <ai_platform_network_process>:
 801d9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9c0:	4bb6      	ldr	r3, [pc, #728]	@ (801dc9c <ai_platform_network_process+0x2e0>)
 801d9c2:	4605      	mov	r5, r0
 801d9c4:	6800      	ldr	r0, [r0, #0]
 801d9c6:	b085      	sub	sp, #20
 801d9c8:	4383      	bics	r3, r0
 801d9ca:	9202      	str	r2, [sp, #8]
 801d9cc:	f040 8142 	bne.w	801dc54 <ai_platform_network_process+0x298>
 801d9d0:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	f000 8127 	beq.w	801dc26 <ai_platform_network_process+0x26a>
 801d9d8:	692b      	ldr	r3, [r5, #16]
 801d9da:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 801d9de:	f003 0303 	and.w	r3, r3, #3
 801d9e2:	2700      	movs	r7, #0
 801d9e4:	2b03      	cmp	r3, #3
 801d9e6:	61af      	str	r7, [r5, #24]
 801d9e8:	f040 8139 	bne.w	801dc5e <ai_platform_network_process+0x2a2>
 801d9ec:	2900      	cmp	r1, #0
 801d9ee:	f000 8120 	beq.w	801dc32 <ai_platform_network_process+0x276>
 801d9f2:	f1ba 0f00 	cmp.w	sl, #0
 801d9f6:	f000 811c 	beq.w	801dc32 <ai_platform_network_process+0x276>
 801d9fa:	f8ba 3000 	ldrh.w	r3, [sl]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	f000 8117 	beq.w	801dc32 <ai_platform_network_process+0x276>
 801da04:	698b      	ldr	r3, [r1, #24]
 801da06:	9503      	str	r5, [sp, #12]
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	9301      	str	r3, [sp, #4]
 801da0c:	460e      	mov	r6, r1
 801da0e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801da12:	2b00      	cmp	r3, #0
 801da14:	d072      	beq.n	801dafc <ai_platform_network_process+0x140>
 801da16:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801da1a:	2c00      	cmp	r4, #0
 801da1c:	d06e      	beq.n	801dafc <ai_platform_network_process+0x140>
 801da1e:	f8da 3008 	ldr.w	r3, [sl, #8]
 801da22:	f8d3 9000 	ldr.w	r9, [r3]
 801da26:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 801da2a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801da2e:	f000 81d5 	beq.w	801dddc <ai_platform_network_process+0x420>
 801da32:	69a3      	ldr	r3, [r4, #24]
 801da34:	2101      	movs	r1, #1
 801da36:	4630      	mov	r0, r6
 801da38:	685d      	ldr	r5, [r3, #4]
 801da3a:	f7ff fc73 	bl	801d324 <ai_buffer_get_size>
 801da3e:	4285      	cmp	r5, r0
 801da40:	f0c0 8118 	bcc.w	801dc74 <ai_platform_network_process+0x2b8>
 801da44:	68e0      	ldr	r0, [r4, #12]
 801da46:	69b1      	ldr	r1, [r6, #24]
 801da48:	68c2      	ldr	r2, [r0, #12]
 801da4a:	68cb      	ldr	r3, [r1, #12]
 801da4c:	429a      	cmp	r2, r3
 801da4e:	f040 8111 	bne.w	801dc74 <ai_platform_network_process+0x2b8>
 801da52:	6882      	ldr	r2, [r0, #8]
 801da54:	688b      	ldr	r3, [r1, #8]
 801da56:	429a      	cmp	r2, r3
 801da58:	f040 810c 	bne.w	801dc74 <ai_platform_network_process+0x2b8>
 801da5c:	6842      	ldr	r2, [r0, #4]
 801da5e:	684b      	ldr	r3, [r1, #4]
 801da60:	429a      	cmp	r2, r3
 801da62:	f040 8107 	bne.w	801dc74 <ai_platform_network_process+0x2b8>
 801da66:	69a3      	ldr	r3, [r4, #24]
 801da68:	e9d3 0100 	ldrd	r0, r1, [r3]
 801da6c:	f001 fa34 	bl	801eed8 <ai_array_get_data_byte_size>
 801da70:	4605      	mov	r5, r0
 801da72:	4620      	mov	r0, r4
 801da74:	f001 fa48 	bl	801ef08 <get_tensor_byte_size>
 801da78:	4285      	cmp	r5, r0
 801da7a:	f0c0 80fb 	bcc.w	801dc74 <ai_platform_network_process+0x2b8>
 801da7e:	69a3      	ldr	r3, [r4, #24]
 801da80:	6818      	ldr	r0, [r3, #0]
 801da82:	f001 f9b9 	bl	801edf8 <ai_array_to_buffer_fmt>
 801da86:	6833      	ldr	r3, [r6, #0]
 801da88:	4058      	eors	r0, r3
 801da8a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801da8e:	f040 81a7 	bne.w	801dde0 <ai_platform_network_process+0x424>
 801da92:	6873      	ldr	r3, [r6, #4]
 801da94:	2b00      	cmp	r3, #0
 801da96:	f000 81a1 	beq.w	801dddc <ai_platform_network_process+0x420>
 801da9a:	69b3      	ldr	r3, [r6, #24]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	f000 81a7 	beq.w	801ddf2 <ai_platform_network_process+0x436>
 801daa4:	9a01      	ldr	r2, [sp, #4]
 801daa6:	429a      	cmp	r2, r3
 801daa8:	bf38      	it	cc
 801daaa:	461a      	movcc	r2, r3
 801daac:	4620      	mov	r0, r4
 801daae:	9201      	str	r2, [sp, #4]
 801dab0:	f001 fa2a 	bl	801ef08 <get_tensor_byte_size>
 801dab4:	f8c8 0008 	str.w	r0, [r8, #8]
 801dab8:	69b3      	ldr	r3, [r6, #24]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	fb00 f303 	mul.w	r3, r0, r3
 801dac0:	f8c8 300c 	str.w	r3, [r8, #12]
 801dac4:	6871      	ldr	r1, [r6, #4]
 801dac6:	f8c8 1004 	str.w	r1, [r8, #4]
 801daca:	440b      	add	r3, r1
 801dacc:	f849 300b 	str.w	r3, [r9, fp]
 801dad0:	69a0      	ldr	r0, [r4, #24]
 801dad2:	6803      	ldr	r3, [r0, #0]
 801dad4:	009a      	lsls	r2, r3, #2
 801dad6:	f107 0701 	add.w	r7, r7, #1
 801dada:	f106 061c 	add.w	r6, r6, #28
 801dade:	f100 80b3 	bmi.w	801dc48 <ai_platform_network_process+0x28c>
 801dae2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801dae6:	1a9b      	subs	r3, r3, r2
 801dae8:	4419      	add	r1, r3
 801daea:	6081      	str	r1, [r0, #8]
 801daec:	69a3      	ldr	r3, [r4, #24]
 801daee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801daf2:	60da      	str	r2, [r3, #12]
 801daf4:	f8ba 3000 	ldrh.w	r3, [sl]
 801daf8:	42bb      	cmp	r3, r7
 801dafa:	d888      	bhi.n	801da0e <ai_platform_network_process+0x52>
 801dafc:	9d03      	ldr	r5, [sp, #12]
 801dafe:	9b02      	ldr	r3, [sp, #8]
 801db00:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 801db02:	2b00      	cmp	r3, #0
 801db04:	f000 817e 	beq.w	801de04 <ai_platform_network_process+0x448>
 801db08:	2a01      	cmp	r2, #1
 801db0a:	f240 80bf 	bls.w	801dc8c <ai_platform_network_process+0x2d0>
 801db0e:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 801db12:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801db16:	2b00      	cmp	r3, #0
 801db18:	f000 80b8 	beq.w	801dc8c <ai_platform_network_process+0x2d0>
 801db1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 801db20:	2700      	movs	r7, #0
 801db22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801db26:	2b00      	cmp	r3, #0
 801db28:	f000 80bf 	beq.w	801dcaa <ai_platform_network_process+0x2ee>
 801db2c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 801db30:	2e00      	cmp	r6, #0
 801db32:	f000 80ba 	beq.w	801dcaa <ai_platform_network_process+0x2ee>
 801db36:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801db3a:	681c      	ldr	r4, [r3, #0]
 801db3c:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 801db40:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801db44:	f000 8162 	beq.w	801de0c <ai_platform_network_process+0x450>
 801db48:	69b3      	ldr	r3, [r6, #24]
 801db4a:	2101      	movs	r1, #1
 801db4c:	685b      	ldr	r3, [r3, #4]
 801db4e:	9302      	str	r3, [sp, #8]
 801db50:	4658      	mov	r0, fp
 801db52:	f7ff fbe7 	bl	801d324 <ai_buffer_get_size>
 801db56:	9b02      	ldr	r3, [sp, #8]
 801db58:	4283      	cmp	r3, r0
 801db5a:	f0c0 8097 	bcc.w	801dc8c <ai_platform_network_process+0x2d0>
 801db5e:	68f0      	ldr	r0, [r6, #12]
 801db60:	f8db 1018 	ldr.w	r1, [fp, #24]
 801db64:	68c2      	ldr	r2, [r0, #12]
 801db66:	68cb      	ldr	r3, [r1, #12]
 801db68:	429a      	cmp	r2, r3
 801db6a:	f040 808f 	bne.w	801dc8c <ai_platform_network_process+0x2d0>
 801db6e:	6882      	ldr	r2, [r0, #8]
 801db70:	688b      	ldr	r3, [r1, #8]
 801db72:	429a      	cmp	r2, r3
 801db74:	f040 808a 	bne.w	801dc8c <ai_platform_network_process+0x2d0>
 801db78:	6842      	ldr	r2, [r0, #4]
 801db7a:	684b      	ldr	r3, [r1, #4]
 801db7c:	429a      	cmp	r2, r3
 801db7e:	f040 8085 	bne.w	801dc8c <ai_platform_network_process+0x2d0>
 801db82:	69b3      	ldr	r3, [r6, #24]
 801db84:	e9d3 0100 	ldrd	r0, r1, [r3]
 801db88:	f001 f9a6 	bl	801eed8 <ai_array_get_data_byte_size>
 801db8c:	9002      	str	r0, [sp, #8]
 801db8e:	4630      	mov	r0, r6
 801db90:	f001 f9ba 	bl	801ef08 <get_tensor_byte_size>
 801db94:	9b02      	ldr	r3, [sp, #8]
 801db96:	4283      	cmp	r3, r0
 801db98:	d378      	bcc.n	801dc8c <ai_platform_network_process+0x2d0>
 801db9a:	69b3      	ldr	r3, [r6, #24]
 801db9c:	6818      	ldr	r0, [r3, #0]
 801db9e:	f001 f92b 	bl	801edf8 <ai_array_to_buffer_fmt>
 801dba2:	f8db 3000 	ldr.w	r3, [fp]
 801dba6:	4043      	eors	r3, r0
 801dba8:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 801dbac:	f040 8136 	bne.w	801de1c <ai_platform_network_process+0x460>
 801dbb0:	f8db 2004 	ldr.w	r2, [fp, #4]
 801dbb4:	2a00      	cmp	r2, #0
 801dbb6:	f000 8129 	beq.w	801de0c <ai_platform_network_process+0x450>
 801dbba:	f8db 2018 	ldr.w	r2, [fp, #24]
 801dbbe:	6812      	ldr	r2, [r2, #0]
 801dbc0:	2a00      	cmp	r2, #0
 801dbc2:	f000 8135 	beq.w	801de30 <ai_platform_network_process+0x474>
 801dbc6:	9b01      	ldr	r3, [sp, #4]
 801dbc8:	4293      	cmp	r3, r2
 801dbca:	bf38      	it	cc
 801dbcc:	4613      	movcc	r3, r2
 801dbce:	4630      	mov	r0, r6
 801dbd0:	9301      	str	r3, [sp, #4]
 801dbd2:	f001 f999 	bl	801ef08 <get_tensor_byte_size>
 801dbd6:	f8c9 0008 	str.w	r0, [r9, #8]
 801dbda:	f8db 2018 	ldr.w	r2, [fp, #24]
 801dbde:	6812      	ldr	r2, [r2, #0]
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	fb02 f303 	mul.w	r3, r2, r3
 801dbe6:	f8c9 300c 	str.w	r3, [r9, #12]
 801dbea:	f8db 1004 	ldr.w	r1, [fp, #4]
 801dbee:	f8c9 1004 	str.w	r1, [r9, #4]
 801dbf2:	440b      	add	r3, r1
 801dbf4:	f844 300a 	str.w	r3, [r4, sl]
 801dbf8:	69b0      	ldr	r0, [r6, #24]
 801dbfa:	6803      	ldr	r3, [r0, #0]
 801dbfc:	009b      	lsls	r3, r3, #2
 801dbfe:	f107 0701 	add.w	r7, r7, #1
 801dc02:	f10b 0b1c 	add.w	fp, fp, #28
 801dc06:	d44b      	bmi.n	801dca0 <ai_platform_network_process+0x2e4>
 801dc08:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801dc0c:	1a9b      	subs	r3, r3, r2
 801dc0e:	4419      	add	r1, r3
 801dc10:	6081      	str	r1, [r0, #8]
 801dc12:	69b3      	ldr	r3, [r6, #24]
 801dc14:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801dc18:	60da      	str	r2, [r3, #12]
 801dc1a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801dc1e:	42bb      	cmp	r3, r7
 801dc20:	f63f af7f 	bhi.w	801db22 <ai_platform_network_process+0x166>
 801dc24:	e041      	b.n	801dcaa <ai_platform_network_process+0x2ee>
 801dc26:	692a      	ldr	r2, [r5, #16]
 801dc28:	61ab      	str	r3, [r5, #24]
 801dc2a:	f002 0203 	and.w	r2, r2, #3
 801dc2e:	2a03      	cmp	r2, #3
 801dc30:	d115      	bne.n	801dc5e <ai_platform_network_process+0x2a2>
 801dc32:	2217      	movs	r2, #23
 801dc34:	2112      	movs	r1, #18
 801dc36:	f105 000c 	add.w	r0, r5, #12
 801dc3a:	f000 f909 	bl	801de50 <core_set_error>
 801dc3e:	2400      	movs	r4, #0
 801dc40:	4620      	mov	r0, r4
 801dc42:	b005      	add	sp, #20
 801dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc48:	f8ba 3000 	ldrh.w	r3, [sl]
 801dc4c:	429f      	cmp	r7, r3
 801dc4e:	f4ff aede 	bcc.w	801da0e <ai_platform_network_process+0x52>
 801dc52:	e753      	b.n	801dafc <ai_platform_network_process+0x140>
 801dc54:	2400      	movs	r4, #0
 801dc56:	4620      	mov	r0, r4
 801dc58:	b005      	add	sp, #20
 801dc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc5e:	2230      	movs	r2, #48	@ 0x30
 801dc60:	2111      	movs	r1, #17
 801dc62:	f105 000c 	add.w	r0, r5, #12
 801dc66:	f000 f8f3 	bl	801de50 <core_set_error>
 801dc6a:	2400      	movs	r4, #0
 801dc6c:	4620      	mov	r0, r4
 801dc6e:	b005      	add	sp, #20
 801dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc74:	9d03      	ldr	r5, [sp, #12]
 801dc76:	2218      	movs	r2, #24
 801dc78:	2112      	movs	r1, #18
 801dc7a:	f105 000c 	add.w	r0, r5, #12
 801dc7e:	f000 f8e7 	bl	801de50 <core_set_error>
 801dc82:	2400      	movs	r4, #0
 801dc84:	4620      	mov	r0, r4
 801dc86:	b005      	add	sp, #20
 801dc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc8c:	2218      	movs	r2, #24
 801dc8e:	2113      	movs	r1, #19
 801dc90:	f105 000c 	add.w	r0, r5, #12
 801dc94:	f000 f8dc 	bl	801de50 <core_set_error>
 801dc98:	2400      	movs	r4, #0
 801dc9a:	e7d1      	b.n	801dc40 <ai_platform_network_process+0x284>
 801dc9c:	a1c00100 	.word	0xa1c00100
 801dca0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801dca4:	429f      	cmp	r7, r3
 801dca6:	f4ff af3c 	bcc.w	801db22 <ai_platform_network_process+0x166>
 801dcaa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801dcae:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 801dcb0:	832b      	strh	r3, [r5, #24]
 801dcb2:	2a00      	cmp	r2, #0
 801dcb4:	f040 808c 	bne.w	801ddd0 <ai_platform_network_process+0x414>
 801dcb8:	4616      	mov	r6, r2
 801dcba:	4617      	mov	r7, r2
 801dcbc:	8b6c      	ldrh	r4, [r5, #26]
 801dcbe:	429c      	cmp	r4, r3
 801dcc0:	bf38      	it	cc
 801dcc2:	46ab      	movcc	fp, r5
 801dcc4:	d2bc      	bcs.n	801dc40 <ai_platform_network_process+0x284>
 801dcc6:	2e00      	cmp	r6, #0
 801dcc8:	d030      	beq.n	801dd2c <ai_platform_network_process+0x370>
 801dcca:	f04f 0800 	mov.w	r8, #0
 801dcce:	e014      	b.n	801dcfa <ai_platform_network_process+0x33e>
 801dcd0:	6882      	ldr	r2, [r0, #8]
 801dcd2:	68c5      	ldr	r5, [r0, #12]
 801dcd4:	6863      	ldr	r3, [r4, #4]
 801dcd6:	1b52      	subs	r2, r2, r5
 801dcd8:	4413      	add	r3, r2
 801dcda:	6083      	str	r3, [r0, #8]
 801dcdc:	698b      	ldr	r3, [r1, #24]
 801dcde:	6862      	ldr	r2, [r4, #4]
 801dce0:	60da      	str	r2, [r3, #12]
 801dce2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801dce6:	f859 200a 	ldr.w	r2, [r9, sl]
 801dcea:	440b      	add	r3, r1
 801dcec:	4293      	cmp	r3, r2
 801dcee:	bf24      	itt	cs
 801dcf0:	68e3      	ldrcs	r3, [r4, #12]
 801dcf2:	1ad3      	subcs	r3, r2, r3
 801dcf4:	6063      	str	r3, [r4, #4]
 801dcf6:	f108 0801 	add.w	r8, r8, #1
 801dcfa:	8833      	ldrh	r3, [r6, #0]
 801dcfc:	4543      	cmp	r3, r8
 801dcfe:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801dd02:	d913      	bls.n	801dd2c <ai_platform_network_process+0x370>
 801dd04:	6873      	ldr	r3, [r6, #4]
 801dd06:	b18b      	cbz	r3, 801dd2c <ai_platform_network_process+0x370>
 801dd08:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 801dd0c:	b171      	cbz	r1, 801dd2c <ai_platform_network_process+0x370>
 801dd0e:	6988      	ldr	r0, [r1, #24]
 801dd10:	68b2      	ldr	r2, [r6, #8]
 801dd12:	6803      	ldr	r3, [r0, #0]
 801dd14:	f8d2 9000 	ldr.w	r9, [r2]
 801dd18:	009d      	lsls	r5, r3, #2
 801dd1a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801dd1e:	d5d7      	bpl.n	801dcd0 <ai_platform_network_process+0x314>
 801dd20:	6881      	ldr	r1, [r0, #8]
 801dd22:	68a2      	ldr	r2, [r4, #8]
 801dd24:	6860      	ldr	r0, [r4, #4]
 801dd26:	f000 ffc5 	bl	801ecb4 <st_int8_copy>
 801dd2a:	e7da      	b.n	801dce2 <ai_platform_network_process+0x326>
 801dd2c:	4658      	mov	r0, fp
 801dd2e:	f000 f8e7 	bl	801df00 <ai_layers_forward_all>
 801dd32:	2f00      	cmp	r7, #0
 801dd34:	d03d      	beq.n	801ddb2 <ai_platform_network_process+0x3f6>
 801dd36:	2400      	movs	r4, #0
 801dd38:	e016      	b.n	801dd68 <ai_platform_network_process+0x3ac>
 801dd3a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801dd3e:	f859 100a 	ldr.w	r1, [r9, sl]
 801dd42:	4413      	add	r3, r2
 801dd44:	428b      	cmp	r3, r1
 801dd46:	bf24      	itt	cs
 801dd48:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801dd4c:	1acb      	subcs	r3, r1, r3
 801dd4e:	f8c8 3004 	str.w	r3, [r8, #4]
 801dd52:	6981      	ldr	r1, [r0, #24]
 801dd54:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801dd58:	1b52      	subs	r2, r2, r5
 801dd5a:	4413      	add	r3, r2
 801dd5c:	608b      	str	r3, [r1, #8]
 801dd5e:	6983      	ldr	r3, [r0, #24]
 801dd60:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801dd64:	60da      	str	r2, [r3, #12]
 801dd66:	3401      	adds	r4, #1
 801dd68:	883b      	ldrh	r3, [r7, #0]
 801dd6a:	42a3      	cmp	r3, r4
 801dd6c:	d921      	bls.n	801ddb2 <ai_platform_network_process+0x3f6>
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	b1fb      	cbz	r3, 801ddb2 <ai_platform_network_process+0x3f6>
 801dd72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801dd76:	b1e0      	cbz	r0, 801ddb2 <ai_platform_network_process+0x3f6>
 801dd78:	68ba      	ldr	r2, [r7, #8]
 801dd7a:	6983      	ldr	r3, [r0, #24]
 801dd7c:	f8d2 9000 	ldr.w	r9, [r2]
 801dd80:	681a      	ldr	r2, [r3, #0]
 801dd82:	0092      	lsls	r2, r2, #2
 801dd84:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801dd88:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801dd8c:	d5d5      	bpl.n	801dd3a <ai_platform_network_process+0x37e>
 801dd8e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 801dd92:	6898      	ldr	r0, [r3, #8]
 801dd94:	f000 ff8e 	bl	801ecb4 <st_int8_copy>
 801dd98:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801dd9c:	f859 200a 	ldr.w	r2, [r9, sl]
 801dda0:	440b      	add	r3, r1
 801dda2:	4293      	cmp	r3, r2
 801dda4:	bf24      	itt	cs
 801dda6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801ddaa:	1ad3      	subcs	r3, r2, r3
 801ddac:	f8c8 3004 	str.w	r3, [r8, #4]
 801ddb0:	e7d9      	b.n	801dd66 <ai_platform_network_process+0x3aa>
 801ddb2:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 801ddb6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801ddba:	3401      	adds	r4, #1
 801ddbc:	b2a4      	uxth	r4, r4
 801ddbe:	42a3      	cmp	r3, r4
 801ddc0:	f8ab 401a 	strh.w	r4, [fp, #26]
 801ddc4:	f63f af7f 	bhi.w	801dcc6 <ai_platform_network_process+0x30a>
 801ddc8:	4620      	mov	r0, r4
 801ddca:	b005      	add	sp, #20
 801ddcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddd0:	2a01      	cmp	r2, #1
 801ddd2:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 801ddd4:	d02a      	beq.n	801de2c <ai_platform_network_process+0x470>
 801ddd6:	f106 070c 	add.w	r7, r6, #12
 801ddda:	e76f      	b.n	801dcbc <ai_platform_network_process+0x300>
 801dddc:	9d03      	ldr	r5, [sp, #12]
 801ddde:	e728      	b.n	801dc32 <ai_platform_network_process+0x276>
 801dde0:	9d03      	ldr	r5, [sp, #12]
 801dde2:	2219      	movs	r2, #25
 801dde4:	2112      	movs	r1, #18
 801dde6:	f105 000c 	add.w	r0, r5, #12
 801ddea:	f000 f831 	bl	801de50 <core_set_error>
 801ddee:	2400      	movs	r4, #0
 801ddf0:	e726      	b.n	801dc40 <ai_platform_network_process+0x284>
 801ddf2:	9d03      	ldr	r5, [sp, #12]
 801ddf4:	4604      	mov	r4, r0
 801ddf6:	2221      	movs	r2, #33	@ 0x21
 801ddf8:	2112      	movs	r1, #18
 801ddfa:	f105 000c 	add.w	r0, r5, #12
 801ddfe:	f000 f827 	bl	801de50 <core_set_error>
 801de02:	e71d      	b.n	801dc40 <ai_platform_network_process+0x284>
 801de04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801de08:	832b      	strh	r3, [r5, #24]
 801de0a:	e752      	b.n	801dcb2 <ai_platform_network_process+0x2f6>
 801de0c:	2217      	movs	r2, #23
 801de0e:	2113      	movs	r1, #19
 801de10:	f105 000c 	add.w	r0, r5, #12
 801de14:	f000 f81c 	bl	801de50 <core_set_error>
 801de18:	2400      	movs	r4, #0
 801de1a:	e711      	b.n	801dc40 <ai_platform_network_process+0x284>
 801de1c:	2219      	movs	r2, #25
 801de1e:	2113      	movs	r1, #19
 801de20:	f105 000c 	add.w	r0, r5, #12
 801de24:	f000 f814 	bl	801de50 <core_set_error>
 801de28:	2400      	movs	r4, #0
 801de2a:	e709      	b.n	801dc40 <ai_platform_network_process+0x284>
 801de2c:	2700      	movs	r7, #0
 801de2e:	e745      	b.n	801dcbc <ai_platform_network_process+0x300>
 801de30:	2221      	movs	r2, #33	@ 0x21
 801de32:	2113      	movs	r1, #19
 801de34:	f105 000c 	add.w	r0, r5, #12
 801de38:	461c      	mov	r4, r3
 801de3a:	f000 f809 	bl	801de50 <core_set_error>
 801de3e:	e6ff      	b.n	801dc40 <ai_platform_network_process+0x284>

0801de40 <core_init>:
 801de40:	2001      	movs	r0, #1
 801de42:	4770      	bx	lr

0801de44 <core_get_error>:
 801de44:	4603      	mov	r3, r0
 801de46:	2200      	movs	r2, #0
 801de48:	6800      	ldr	r0, [r0, #0]
 801de4a:	601a      	str	r2, [r3, #0]
 801de4c:	4770      	bx	lr
 801de4e:	bf00      	nop

0801de50 <core_set_error>:
 801de50:	4603      	mov	r3, r0
 801de52:	7800      	ldrb	r0, [r0, #0]
 801de54:	b108      	cbz	r0, 801de5a <core_set_error+0xa>
 801de56:	2000      	movs	r0, #0
 801de58:	4770      	bx	lr
 801de5a:	7019      	strb	r1, [r3, #0]
 801de5c:	6819      	ldr	r1, [r3, #0]
 801de5e:	f362 211f 	bfi	r1, r2, #8, #24
 801de62:	2001      	movs	r0, #1
 801de64:	6019      	str	r1, [r3, #0]
 801de66:	4770      	bx	lr

0801de68 <ai_check_custom_types>:
 801de68:	b082      	sub	sp, #8
 801de6a:	4b13      	ldr	r3, [pc, #76]	@ (801deb8 <ai_check_custom_types+0x50>)
 801de6c:	9301      	str	r3, [sp, #4]
 801de6e:	b118      	cbz	r0, 801de78 <ai_check_custom_types+0x10>
 801de70:	7803      	ldrb	r3, [r0, #0]
 801de72:	2b03      	cmp	r3, #3
 801de74:	d002      	beq.n	801de7c <ai_check_custom_types+0x14>
 801de76:	2000      	movs	r0, #0
 801de78:	b002      	add	sp, #8
 801de7a:	4770      	bx	lr
 801de7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801de80:	4293      	cmp	r3, r2
 801de82:	d004      	beq.n	801de8e <ai_check_custom_types+0x26>
 801de84:	2001      	movs	r0, #1
 801de86:	f080 0001 	eor.w	r0, r0, #1
 801de8a:	b002      	add	sp, #8
 801de8c:	4770      	bx	lr
 801de8e:	7842      	ldrb	r2, [r0, #1]
 801de90:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801de94:	429a      	cmp	r2, r3
 801de96:	f100 0001 	add.w	r0, r0, #1
 801de9a:	d1f3      	bne.n	801de84 <ai_check_custom_types+0x1c>
 801de9c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801dea0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801dea4:	429a      	cmp	r2, r3
 801dea6:	d1ed      	bne.n	801de84 <ai_check_custom_types+0x1c>
 801dea8:	7842      	ldrb	r2, [r0, #1]
 801deaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801deae:	429a      	cmp	r2, r3
 801deb0:	d1e8      	bne.n	801de84 <ai_check_custom_types+0x1c>
 801deb2:	2000      	movs	r0, #0
 801deb4:	e7e7      	b.n	801de86 <ai_check_custom_types+0x1e>
 801deb6:	bf00      	nop
 801deb8:	84048403 	.word	0x84048403

0801debc <ai_layers_init_all>:
 801debc:	4601      	mov	r1, r0
 801debe:	2000      	movs	r0, #0
 801dec0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801dec2:	b143      	cbz	r3, 801ded6 <ai_layers_init_all+0x1a>
 801dec4:	691a      	ldr	r2, [r3, #16]
 801dec6:	60d9      	str	r1, [r3, #12]
 801dec8:	429a      	cmp	r2, r3
 801deca:	f100 0001 	add.w	r0, r0, #1
 801dece:	d002      	beq.n	801ded6 <ai_layers_init_all+0x1a>
 801ded0:	b10a      	cbz	r2, 801ded6 <ai_layers_init_all+0x1a>
 801ded2:	4613      	mov	r3, r2
 801ded4:	e7f5      	b.n	801dec2 <ai_layers_init_all+0x6>
 801ded6:	4770      	bx	lr

0801ded8 <ai_layers_post_init_all>:
 801ded8:	b538      	push	{r3, r4, r5, lr}
 801deda:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801dedc:	2500      	movs	r5, #0
 801dede:	b16c      	cbz	r4, 801defc <ai_layers_post_init_all+0x24>
 801dee0:	6863      	ldr	r3, [r4, #4]
 801dee2:	07db      	lsls	r3, r3, #31
 801dee4:	d504      	bpl.n	801def0 <ai_layers_post_init_all+0x18>
 801dee6:	6a23      	ldr	r3, [r4, #32]
 801dee8:	4620      	mov	r0, r4
 801deea:	b10b      	cbz	r3, 801def0 <ai_layers_post_init_all+0x18>
 801deec:	4798      	blx	r3
 801deee:	3501      	adds	r5, #1
 801def0:	6923      	ldr	r3, [r4, #16]
 801def2:	42a3      	cmp	r3, r4
 801def4:	d002      	beq.n	801defc <ai_layers_post_init_all+0x24>
 801def6:	b10b      	cbz	r3, 801defc <ai_layers_post_init_all+0x24>
 801def8:	461c      	mov	r4, r3
 801defa:	e7f0      	b.n	801dede <ai_layers_post_init_all+0x6>
 801defc:	4628      	mov	r0, r5
 801defe:	bd38      	pop	{r3, r4, r5, pc}

0801df00 <ai_layers_forward_all>:
 801df00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df04:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801df08:	4604      	mov	r4, r0
 801df0a:	f1b8 0f00 	cmp.w	r8, #0
 801df0e:	d02b      	beq.n	801df68 <ai_layers_forward_all+0x68>
 801df10:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801df12:	63c1      	str	r1, [r0, #60]	@ 0x3c
 801df14:	b321      	cbz	r1, 801df60 <ai_layers_forward_all+0x60>
 801df16:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801df18:	2001      	movs	r0, #1
 801df1a:	47c0      	blx	r8
 801df1c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801df1e:	b1fe      	cbz	r6, 801df60 <ai_layers_forward_all+0x60>
 801df20:	2700      	movs	r7, #0
 801df22:	4631      	mov	r1, r6
 801df24:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801df26:	2002      	movs	r0, #2
 801df28:	47c0      	blx	r8
 801df2a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801df2c:	4628      	mov	r0, r5
 801df2e:	696b      	ldr	r3, [r5, #20]
 801df30:	4798      	blx	r3
 801df32:	692e      	ldr	r6, [r5, #16]
 801df34:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801df36:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801df38:	42b5      	cmp	r5, r6
 801df3a:	f04f 0003 	mov.w	r0, #3
 801df3e:	d007      	beq.n	801df50 <ai_layers_forward_all+0x50>
 801df40:	47c0      	blx	r8
 801df42:	3701      	adds	r7, #1
 801df44:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801df46:	2e00      	cmp	r6, #0
 801df48:	d1eb      	bne.n	801df22 <ai_layers_forward_all+0x22>
 801df4a:	4638      	mov	r0, r7
 801df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df50:	2003      	movs	r0, #3
 801df52:	47c0      	blx	r8
 801df54:	2300      	movs	r3, #0
 801df56:	3701      	adds	r7, #1
 801df58:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801df5a:	4638      	mov	r0, r7
 801df5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df60:	2700      	movs	r7, #0
 801df62:	4638      	mov	r0, r7
 801df64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df68:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801df6a:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801df6c:	2d00      	cmp	r5, #0
 801df6e:	d0f7      	beq.n	801df60 <ai_layers_forward_all+0x60>
 801df70:	4647      	mov	r7, r8
 801df72:	696b      	ldr	r3, [r5, #20]
 801df74:	4628      	mov	r0, r5
 801df76:	4798      	blx	r3
 801df78:	462b      	mov	r3, r5
 801df7a:	692d      	ldr	r5, [r5, #16]
 801df7c:	429d      	cmp	r5, r3
 801df7e:	d004      	beq.n	801df8a <ai_layers_forward_all+0x8a>
 801df80:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801df82:	3701      	adds	r7, #1
 801df84:	2d00      	cmp	r5, #0
 801df86:	d1f4      	bne.n	801df72 <ai_layers_forward_all+0x72>
 801df88:	e7df      	b.n	801df4a <ai_layers_forward_all+0x4a>
 801df8a:	2300      	movs	r3, #0
 801df8c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801df8e:	3701      	adds	r7, #1
 801df90:	e7db      	b.n	801df4a <ai_layers_forward_all+0x4a>
 801df92:	bf00      	nop

0801df94 <forward_dense>:
 801df94:	6982      	ldr	r2, [r0, #24]
 801df96:	8813      	ldrh	r3, [r2, #0]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d040      	beq.n	801e01e <forward_dense+0x8a>
 801df9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dfa0:	6855      	ldr	r5, [r2, #4]
 801dfa2:	6869      	ldr	r1, [r5, #4]
 801dfa4:	b08f      	sub	sp, #60	@ 0x3c
 801dfa6:	b101      	cbz	r1, 801dfaa <forward_dense+0x16>
 801dfa8:	6809      	ldr	r1, [r1, #0]
 801dfaa:	2b01      	cmp	r3, #1
 801dfac:	d066      	beq.n	801e07c <forward_dense+0xe8>
 801dfae:	692a      	ldr	r2, [r5, #16]
 801dfb0:	b102      	cbz	r2, 801dfb4 <forward_dense+0x20>
 801dfb2:	6812      	ldr	r2, [r2, #0]
 801dfb4:	2b02      	cmp	r3, #2
 801dfb6:	d05e      	beq.n	801e076 <forward_dense+0xe2>
 801dfb8:	69ec      	ldr	r4, [r5, #28]
 801dfba:	2c00      	cmp	r4, #0
 801dfbc:	d054      	beq.n	801e068 <forward_dense+0xd4>
 801dfbe:	8b2e      	ldrh	r6, [r5, #24]
 801dfc0:	6820      	ldr	r0, [r4, #0]
 801dfc2:	2e01      	cmp	r6, #1
 801dfc4:	d952      	bls.n	801e06c <forward_dense+0xd8>
 801dfc6:	6864      	ldr	r4, [r4, #4]
 801dfc8:	6986      	ldr	r6, [r0, #24]
 801dfca:	68d0      	ldr	r0, [r2, #12]
 801dfcc:	68cf      	ldr	r7, [r1, #12]
 801dfce:	e9d0 ce02 	ldrd	ip, lr, [r0, #8]
 801dfd2:	fb0e f80c 	mul.w	r8, lr, ip
 801dfd6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801dfda:	6830      	ldr	r0, [r6, #0]
 801dfdc:	687f      	ldr	r7, [r7, #4]
 801dfde:	2b03      	cmp	r3, #3
 801dfe0:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 801dfe4:	d044      	beq.n	801e070 <forward_dense+0xdc>
 801dfe6:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 801dfe8:	b11d      	cbz	r5, 801dff2 <forward_dense+0x5e>
 801dfea:	682d      	ldr	r5, [r5, #0]
 801dfec:	b10d      	cbz	r5, 801dff2 <forward_dense+0x5e>
 801dfee:	69ab      	ldr	r3, [r5, #24]
 801dff0:	689d      	ldr	r5, [r3, #8]
 801dff2:	6992      	ldr	r2, [r2, #24]
 801dff4:	698b      	ldr	r3, [r1, #24]
 801dff6:	6890      	ldr	r0, [r2, #8]
 801dff8:	6899      	ldr	r1, [r3, #8]
 801dffa:	b10c      	cbz	r4, 801e000 <forward_dense+0x6c>
 801dffc:	69a3      	ldr	r3, [r4, #24]
 801dffe:	689c      	ldr	r4, [r3, #8]
 801e000:	4b20      	ldr	r3, [pc, #128]	@ (801e084 <forward_dense+0xf0>)
 801e002:	459c      	cmp	ip, r3
 801e004:	e9d6 2902 	ldrd	r2, r9, [r6, #8]
 801e008:	d023      	beq.n	801e052 <forward_dense+0xbe>
 801e00a:	4e1f      	ldr	r6, [pc, #124]	@ (801e088 <forward_dense+0xf4>)
 801e00c:	45b4      	cmp	ip, r6
 801e00e:	d015      	beq.n	801e03c <forward_dense+0xa8>
 801e010:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 801e014:	459c      	cmp	ip, r3
 801e016:	d004      	beq.n	801e022 <forward_dense+0x8e>
 801e018:	b00f      	add	sp, #60	@ 0x3c
 801e01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e01e:	685b      	ldr	r3, [r3, #4]
 801e020:	deff      	udf	#255	@ 0xff
 801e022:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801e026:	a807      	add	r0, sp, #28
 801e028:	e9cd 470a 	strd	r4, r7, [sp, #40]	@ 0x28
 801e02c:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 801e030:	9209      	str	r2, [sp, #36]	@ 0x24
 801e032:	f000 f97f 	bl	801e334 <forward_lite_dense_if32of32wf32>
 801e036:	b00f      	add	sp, #60	@ 0x3c
 801e038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e03c:	e9cd e803 	strd	lr, r8, [sp, #12]
 801e040:	e9cd 4701 	strd	r4, r7, [sp, #4]
 801e044:	9500      	str	r5, [sp, #0]
 801e046:	464b      	mov	r3, r9
 801e048:	f000 fb50 	bl	801e6ec <forward_lite_dense_if32of32wf32_lut4>
 801e04c:	b00f      	add	sp, #60	@ 0x3c
 801e04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e052:	e9cd e803 	strd	lr, r8, [sp, #12]
 801e056:	e9cd 4701 	strd	r4, r7, [sp, #4]
 801e05a:	9500      	str	r5, [sp, #0]
 801e05c:	464b      	mov	r3, r9
 801e05e:	f000 fcb9 	bl	801e9d4 <forward_lite_dense_if32of32wf32_lut8>
 801e062:	b00f      	add	sp, #60	@ 0x3c
 801e064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e068:	4620      	mov	r0, r4
 801e06a:	e7ad      	b.n	801dfc8 <forward_dense+0x34>
 801e06c:	2400      	movs	r4, #0
 801e06e:	e7ab      	b.n	801dfc8 <forward_dense+0x34>
 801e070:	2300      	movs	r3, #0
 801e072:	685b      	ldr	r3, [r3, #4]
 801e074:	deff      	udf	#255	@ 0xff
 801e076:	2300      	movs	r3, #0
 801e078:	685b      	ldr	r3, [r3, #4]
 801e07a:	deff      	udf	#255	@ 0xff
 801e07c:	2300      	movs	r3, #0
 801e07e:	685b      	ldr	r3, [r3, #4]
 801e080:	deff      	udf	#255	@ 0xff
 801e082:	bf00      	nop
 801e084:	00d01040 	.word	0x00d01040
 801e088:	00f01040 	.word	0x00f01040

0801e08c <forward_sigmoid>:
 801e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e08e:	6982      	ldr	r2, [r0, #24]
 801e090:	8813      	ldrh	r3, [r2, #0]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d038      	beq.n	801e108 <forward_sigmoid+0x7c>
 801e096:	6852      	ldr	r2, [r2, #4]
 801e098:	6854      	ldr	r4, [r2, #4]
 801e09a:	b104      	cbz	r4, 801e09e <forward_sigmoid+0x12>
 801e09c:	6824      	ldr	r4, [r4, #0]
 801e09e:	2b01      	cmp	r3, #1
 801e0a0:	d031      	beq.n	801e106 <forward_sigmoid+0x7a>
 801e0a2:	6915      	ldr	r5, [r2, #16]
 801e0a4:	b105      	cbz	r5, 801e0a8 <forward_sigmoid+0x1c>
 801e0a6:	682d      	ldr	r5, [r5, #0]
 801e0a8:	68a3      	ldr	r3, [r4, #8]
 801e0aa:	0a1b      	lsrs	r3, r3, #8
 801e0ac:	d02e      	beq.n	801e10c <forward_sigmoid+0x80>
 801e0ae:	68e0      	ldr	r0, [r4, #12]
 801e0b0:	2201      	movs	r2, #1
 801e0b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e0b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e0ba:	4298      	cmp	r0, r3
 801e0bc:	fb01 f202 	mul.w	r2, r1, r2
 801e0c0:	d1f9      	bne.n	801e0b6 <forward_sigmoid+0x2a>
 801e0c2:	69a7      	ldr	r7, [r4, #24]
 801e0c4:	69a9      	ldr	r1, [r5, #24]
 801e0c6:	68bb      	ldr	r3, [r7, #8]
 801e0c8:	688d      	ldr	r5, [r1, #8]
 801e0ca:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e0ce:	3a01      	subs	r2, #1
 801e0d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e0d4:	42a3      	cmp	r3, r4
 801e0d6:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801e0da:	d813      	bhi.n	801e104 <forward_sigmoid+0x78>
 801e0dc:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
 801e0e0:	f854 0904 	ldr.w	r0, [r4], #-4
 801e0e4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 801e0e8:	f001 fe4c 	bl	801fd84 <expf>
 801e0ec:	4631      	mov	r1, r6
 801e0ee:	f7e2 fb11 	bl	8000714 <__addsf3>
 801e0f2:	4601      	mov	r1, r0
 801e0f4:	4630      	mov	r0, r6
 801e0f6:	f7e2 fcc9 	bl	8000a8c <__aeabi_fdiv>
 801e0fa:	f845 0904 	str.w	r0, [r5], #-4
 801e0fe:	68bb      	ldr	r3, [r7, #8]
 801e100:	42a3      	cmp	r3, r4
 801e102:	d9ed      	bls.n	801e0e0 <forward_sigmoid+0x54>
 801e104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e106:	2300      	movs	r3, #0
 801e108:	685b      	ldr	r3, [r3, #4]
 801e10a:	deff      	udf	#255	@ 0xff
 801e10c:	69a7      	ldr	r7, [r4, #24]
 801e10e:	69ab      	ldr	r3, [r5, #24]
 801e110:	68bc      	ldr	r4, [r7, #8]
 801e112:	689d      	ldr	r5, [r3, #8]
 801e114:	e7e2      	b.n	801e0dc <forward_sigmoid+0x50>
 801e116:	bf00      	nop

0801e118 <forward_relu>:
 801e118:	6982      	ldr	r2, [r0, #24]
 801e11a:	8813      	ldrh	r3, [r2, #0]
 801e11c:	b333      	cbz	r3, 801e16c <forward_relu+0x54>
 801e11e:	6851      	ldr	r1, [r2, #4]
 801e120:	684a      	ldr	r2, [r1, #4]
 801e122:	b102      	cbz	r2, 801e126 <forward_relu+0xe>
 801e124:	6812      	ldr	r2, [r2, #0]
 801e126:	2b01      	cmp	r3, #1
 801e128:	f000 8082 	beq.w	801e230 <forward_relu+0x118>
 801e12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e130:	6909      	ldr	r1, [r1, #16]
 801e132:	b101      	cbz	r1, 801e136 <forward_relu+0x1e>
 801e134:	6809      	ldr	r1, [r1, #0]
 801e136:	69c6      	ldr	r6, [r0, #28]
 801e138:	b1d6      	cbz	r6, 801e170 <forward_relu+0x58>
 801e13a:	6873      	ldr	r3, [r6, #4]
 801e13c:	6988      	ldr	r0, [r1, #24]
 801e13e:	6991      	ldr	r1, [r2, #24]
 801e140:	2b01      	cmp	r3, #1
 801e142:	d03f      	beq.n	801e1c4 <forward_relu+0xac>
 801e144:	6893      	ldr	r3, [r2, #8]
 801e146:	6880      	ldr	r0, [r0, #8]
 801e148:	6889      	ldr	r1, [r1, #8]
 801e14a:	0a1b      	lsrs	r3, r3, #8
 801e14c:	d067      	beq.n	801e21e <forward_relu+0x106>
 801e14e:	68d5      	ldr	r5, [r2, #12]
 801e150:	2201      	movs	r2, #1
 801e152:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801e156:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801e15a:	429d      	cmp	r5, r3
 801e15c:	fb04 f202 	mul.w	r2, r4, r2
 801e160:	d1f9      	bne.n	801e156 <forward_relu+0x3e>
 801e162:	68b3      	ldr	r3, [r6, #8]
 801e164:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e168:	f000 b866 	b.w	801e238 <forward_lite_nl_relu_generic_if32of32_kernel>
 801e16c:	685b      	ldr	r3, [r3, #4]
 801e16e:	deff      	udf	#255	@ 0xff
 801e170:	6893      	ldr	r3, [r2, #8]
 801e172:	6988      	ldr	r0, [r1, #24]
 801e174:	6991      	ldr	r1, [r2, #24]
 801e176:	6887      	ldr	r7, [r0, #8]
 801e178:	688e      	ldr	r6, [r1, #8]
 801e17a:	0a1b      	lsrs	r3, r3, #8
 801e17c:	d051      	beq.n	801e222 <forward_relu+0x10a>
 801e17e:	68d0      	ldr	r0, [r2, #12]
 801e180:	2201      	movs	r2, #1
 801e182:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e18a:	4283      	cmp	r3, r0
 801e18c:	fb01 f202 	mul.w	r2, r1, r2
 801e190:	d1f9      	bne.n	801e186 <forward_relu+0x6e>
 801e192:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e196:	3a01      	subs	r2, #1
 801e198:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 801e19c:	42ae      	cmp	r6, r5
 801e19e:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 801e1a2:	d80d      	bhi.n	801e1c0 <forward_relu+0xa8>
 801e1a4:	f04f 0800 	mov.w	r8, #0
 801e1a8:	f855 4904 	ldr.w	r4, [r5], #-4
 801e1ac:	4641      	mov	r1, r8
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	f7e2 fd6a 	bl	8000c88 <__aeabi_fcmpge>
 801e1b4:	b900      	cbnz	r0, 801e1b8 <forward_relu+0xa0>
 801e1b6:	4644      	mov	r4, r8
 801e1b8:	42ae      	cmp	r6, r5
 801e1ba:	f847 4904 	str.w	r4, [r7], #-4
 801e1be:	d9f3      	bls.n	801e1a8 <forward_relu+0x90>
 801e1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1c4:	688c      	ldr	r4, [r1, #8]
 801e1c6:	6891      	ldr	r1, [r2, #8]
 801e1c8:	6887      	ldr	r7, [r0, #8]
 801e1ca:	0a09      	lsrs	r1, r1, #8
 801e1cc:	d02b      	beq.n	801e226 <forward_relu+0x10e>
 801e1ce:	68d0      	ldr	r0, [r2, #12]
 801e1d0:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801e1d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801e1d8:	4290      	cmp	r0, r2
 801e1da:	fb01 f303 	mul.w	r3, r1, r3
 801e1de:	d1f9      	bne.n	801e1d4 <forward_relu+0xbc>
 801e1e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801e1e4:	3b01      	subs	r3, #1
 801e1e6:	68b2      	ldr	r2, [r6, #8]
 801e1e8:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 801e1ec:	42ac      	cmp	r4, r5
 801e1ee:	f8d2 8000 	ldr.w	r8, [r2]
 801e1f2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801e1f6:	d8e3      	bhi.n	801e1c0 <forward_relu+0xa8>
 801e1f8:	f04f 0900 	mov.w	r9, #0
 801e1fc:	f855 6904 	ldr.w	r6, [r5], #-4
 801e200:	4640      	mov	r0, r8
 801e202:	4631      	mov	r1, r6
 801e204:	f7e2 fd2c 	bl	8000c60 <__aeabi_fcmplt>
 801e208:	b920      	cbnz	r0, 801e214 <forward_relu+0xfc>
 801e20a:	42ac      	cmp	r4, r5
 801e20c:	f847 9904 	str.w	r9, [r7], #-4
 801e210:	d9f4      	bls.n	801e1fc <forward_relu+0xe4>
 801e212:	e7d5      	b.n	801e1c0 <forward_relu+0xa8>
 801e214:	42ac      	cmp	r4, r5
 801e216:	f847 6904 	str.w	r6, [r7], #-4
 801e21a:	d9ef      	bls.n	801e1fc <forward_relu+0xe4>
 801e21c:	e7d0      	b.n	801e1c0 <forward_relu+0xa8>
 801e21e:	2201      	movs	r2, #1
 801e220:	e79f      	b.n	801e162 <forward_relu+0x4a>
 801e222:	4635      	mov	r5, r6
 801e224:	e7be      	b.n	801e1a4 <forward_relu+0x8c>
 801e226:	68b3      	ldr	r3, [r6, #8]
 801e228:	4625      	mov	r5, r4
 801e22a:	f8d3 8000 	ldr.w	r8, [r3]
 801e22e:	e7e3      	b.n	801e1f8 <forward_relu+0xe0>
 801e230:	2300      	movs	r3, #0
 801e232:	685b      	ldr	r3, [r3, #4]
 801e234:	deff      	udf	#255	@ 0xff
 801e236:	bf00      	nop

0801e238 <forward_lite_nl_relu_generic_if32of32_kernel>:
 801e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e23c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801e240:	681f      	ldr	r7, [r3, #0]
 801e242:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801e246:	4606      	mov	r6, r0
 801e248:	4688      	mov	r8, r1
 801e24a:	4648      	mov	r0, r9
 801e24c:	2100      	movs	r1, #0
 801e24e:	4614      	mov	r4, r2
 801e250:	f7e2 fd06 	bl	8000c60 <__aeabi_fcmplt>
 801e254:	bb58      	cbnz	r0, 801e2ae <forward_lite_nl_relu_generic_if32of32_kernel+0x76>
 801e256:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 801e25a:	3c01      	subs	r4, #1
 801e25c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 801e260:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 801e264:	45a0      	cmp	r8, r4
 801e266:	d910      	bls.n	801e28a <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 801e268:	e01f      	b.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e26a:	f7e2 fd0d 	bl	8000c88 <__aeabi_fcmpge>
 801e26e:	4603      	mov	r3, r0
 801e270:	4639      	mov	r1, r7
 801e272:	4628      	mov	r0, r5
 801e274:	b12b      	cbz	r3, 801e282 <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 801e276:	f7e2 fa4b 	bl	8000710 <__aeabi_fsub>
 801e27a:	4651      	mov	r1, sl
 801e27c:	f7e2 fb52 	bl	8000924 <__aeabi_fmul>
 801e280:	4605      	mov	r5, r0
 801e282:	45a0      	cmp	r8, r4
 801e284:	f846 5904 	str.w	r5, [r6], #-4
 801e288:	d80f      	bhi.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e28a:	f854 5904 	ldr.w	r5, [r4], #-4
 801e28e:	4648      	mov	r0, r9
 801e290:	4629      	mov	r1, r5
 801e292:	f7e2 fcf9 	bl	8000c88 <__aeabi_fcmpge>
 801e296:	4603      	mov	r3, r0
 801e298:	4629      	mov	r1, r5
 801e29a:	4638      	mov	r0, r7
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	d1e4      	bne.n	801e26a <forward_lite_nl_relu_generic_if32of32_kernel+0x32>
 801e2a0:	464d      	mov	r5, r9
 801e2a2:	45a0      	cmp	r8, r4
 801e2a4:	f846 5904 	str.w	r5, [r6], #-4
 801e2a8:	d9ef      	bls.n	801e28a <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 801e2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2ae:	2100      	movs	r1, #0
 801e2b0:	4650      	mov	r0, sl
 801e2b2:	f7e2 fccb 	bl	8000c4c <__aeabi_fcmpeq>
 801e2b6:	bb08      	cbnz	r0, 801e2fc <forward_lite_nl_relu_generic_if32of32_kernel+0xc4>
 801e2b8:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 801e2bc:	3c01      	subs	r4, #1
 801e2be:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 801e2c2:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 801e2c6:	45a0      	cmp	r8, r4
 801e2c8:	d8ef      	bhi.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e2ca:	f854 5904 	ldr.w	r5, [r4], #-4
 801e2ce:	4639      	mov	r1, r7
 801e2d0:	4628      	mov	r0, r5
 801e2d2:	f7e2 fccf 	bl	8000c74 <__aeabi_fcmple>
 801e2d6:	4603      	mov	r3, r0
 801e2d8:	4639      	mov	r1, r7
 801e2da:	4628      	mov	r0, r5
 801e2dc:	b14b      	cbz	r3, 801e2f2 <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801e2de:	f7e2 fa17 	bl	8000710 <__aeabi_fsub>
 801e2e2:	4651      	mov	r1, sl
 801e2e4:	f7e2 fb1e 	bl	8000924 <__aeabi_fmul>
 801e2e8:	45a0      	cmp	r8, r4
 801e2ea:	f846 0904 	str.w	r0, [r6], #-4
 801e2ee:	d9ec      	bls.n	801e2ca <forward_lite_nl_relu_generic_if32of32_kernel+0x92>
 801e2f0:	e7db      	b.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e2f2:	45a0      	cmp	r8, r4
 801e2f4:	f846 5904 	str.w	r5, [r6], #-4
 801e2f8:	d9e7      	bls.n	801e2ca <forward_lite_nl_relu_generic_if32of32_kernel+0x92>
 801e2fa:	e7d6      	b.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e2fc:	f104 4580 	add.w	r5, r4, #1073741824	@ 0x40000000
 801e300:	3d01      	subs	r5, #1
 801e302:	eb08 0485 	add.w	r4, r8, r5, lsl #2
 801e306:	45a0      	cmp	r8, r4
 801e308:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 801e30c:	d8cd      	bhi.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e30e:	f04f 0900 	mov.w	r9, #0
 801e312:	f854 6904 	ldr.w	r6, [r4], #-4
 801e316:	4638      	mov	r0, r7
 801e318:	4631      	mov	r1, r6
 801e31a:	f7e2 fca1 	bl	8000c60 <__aeabi_fcmplt>
 801e31e:	b920      	cbnz	r0, 801e32a <forward_lite_nl_relu_generic_if32of32_kernel+0xf2>
 801e320:	45a0      	cmp	r8, r4
 801e322:	f845 9904 	str.w	r9, [r5], #-4
 801e326:	d9f4      	bls.n	801e312 <forward_lite_nl_relu_generic_if32of32_kernel+0xda>
 801e328:	e7bf      	b.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e32a:	45a0      	cmp	r8, r4
 801e32c:	f845 6904 	str.w	r6, [r5], #-4
 801e330:	d9ef      	bls.n	801e312 <forward_lite_nl_relu_generic_if32of32_kernel+0xda>
 801e332:	e7ba      	b.n	801e2aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>

0801e334 <forward_lite_dense_if32of32wf32>:
 801e334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e338:	b08b      	sub	sp, #44	@ 0x2c
 801e33a:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 801e33e:	4601      	mov	r1, r0
 801e340:	9007      	str	r0, [sp, #28]
 801e342:	6800      	ldr	r0, [r0, #0]
 801e344:	684c      	ldr	r4, [r1, #4]
 801e346:	9008      	str	r0, [sp, #32]
 801e348:	fb03 f202 	mul.w	r2, r3, r2
 801e34c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801e350:	4290      	cmp	r0, r2
 801e352:	9209      	str	r2, [sp, #36]	@ 0x24
 801e354:	9401      	str	r4, [sp, #4]
 801e356:	f080 81a8 	bcs.w	801e6aa <forward_lite_dense_if32of32wf32+0x376>
 801e35a:	f8d1 b010 	ldr.w	fp, [r1, #16]
 801e35e:	009a      	lsls	r2, r3, #2
 801e360:	9908      	ldr	r1, [sp, #32]
 801e362:	9807      	ldr	r0, [sp, #28]
 801e364:	188a      	adds	r2, r1, r2
 801e366:	428a      	cmp	r2, r1
 801e368:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801e36c:	9202      	str	r2, [sp, #8]
 801e36e:	f240 8188 	bls.w	801e682 <forward_lite_dense_if32of32wf32+0x34e>
 801e372:	f1ab 0310 	sub.w	r3, fp, #16
 801e376:	091b      	lsrs	r3, r3, #4
 801e378:	3301      	adds	r3, #1
 801e37a:	ea4f 028b 	mov.w	r2, fp, lsl #2
 801e37e:	9203      	str	r2, [sp, #12]
 801e380:	019a      	lsls	r2, r3, #6
 801e382:	9205      	str	r2, [sp, #20]
 801e384:	9a01      	ldr	r2, [sp, #4]
 801e386:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 801e38a:	9306      	str	r3, [sp, #24]
 801e38c:	4689      	mov	r9, r1
 801e38e:	f1bb 0f0f 	cmp.w	fp, #15
 801e392:	f240 818d 	bls.w	801e6b0 <forward_lite_dense_if32of32wf32+0x37c>
 801e396:	9b01      	ldr	r3, [sp, #4]
 801e398:	f108 0540 	add.w	r5, r8, #64	@ 0x40
 801e39c:	f103 0640 	add.w	r6, r3, #64	@ 0x40
 801e3a0:	46da      	mov	sl, fp
 801e3a2:	2400      	movs	r4, #0
 801e3a4:	f855 1c40 	ldr.w	r1, [r5, #-64]
 801e3a8:	f856 0c40 	ldr.w	r0, [r6, #-64]
 801e3ac:	f7e2 faba 	bl	8000924 <__aeabi_fmul>
 801e3b0:	f855 1c3c 	ldr.w	r1, [r5, #-60]
 801e3b4:	4607      	mov	r7, r0
 801e3b6:	f856 0c3c 	ldr.w	r0, [r6, #-60]
 801e3ba:	f7e2 fab3 	bl	8000924 <__aeabi_fmul>
 801e3be:	4601      	mov	r1, r0
 801e3c0:	4638      	mov	r0, r7
 801e3c2:	f7e2 f9a7 	bl	8000714 <__addsf3>
 801e3c6:	f855 1c38 	ldr.w	r1, [r5, #-56]
 801e3ca:	4607      	mov	r7, r0
 801e3cc:	f856 0c38 	ldr.w	r0, [r6, #-56]
 801e3d0:	f7e2 faa8 	bl	8000924 <__aeabi_fmul>
 801e3d4:	4601      	mov	r1, r0
 801e3d6:	4638      	mov	r0, r7
 801e3d8:	f7e2 f99c 	bl	8000714 <__addsf3>
 801e3dc:	f855 1c34 	ldr.w	r1, [r5, #-52]
 801e3e0:	4607      	mov	r7, r0
 801e3e2:	f856 0c34 	ldr.w	r0, [r6, #-52]
 801e3e6:	f7e2 fa9d 	bl	8000924 <__aeabi_fmul>
 801e3ea:	4601      	mov	r1, r0
 801e3ec:	4638      	mov	r0, r7
 801e3ee:	f7e2 f991 	bl	8000714 <__addsf3>
 801e3f2:	f855 1c30 	ldr.w	r1, [r5, #-48]
 801e3f6:	4607      	mov	r7, r0
 801e3f8:	f856 0c30 	ldr.w	r0, [r6, #-48]
 801e3fc:	f7e2 fa92 	bl	8000924 <__aeabi_fmul>
 801e400:	4601      	mov	r1, r0
 801e402:	4638      	mov	r0, r7
 801e404:	f7e2 f986 	bl	8000714 <__addsf3>
 801e408:	f855 1c2c 	ldr.w	r1, [r5, #-44]
 801e40c:	4607      	mov	r7, r0
 801e40e:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 801e412:	f7e2 fa87 	bl	8000924 <__aeabi_fmul>
 801e416:	4601      	mov	r1, r0
 801e418:	4638      	mov	r0, r7
 801e41a:	f7e2 f97b 	bl	8000714 <__addsf3>
 801e41e:	f855 1c28 	ldr.w	r1, [r5, #-40]
 801e422:	4607      	mov	r7, r0
 801e424:	f856 0c28 	ldr.w	r0, [r6, #-40]
 801e428:	f7e2 fa7c 	bl	8000924 <__aeabi_fmul>
 801e42c:	4601      	mov	r1, r0
 801e42e:	4638      	mov	r0, r7
 801e430:	f7e2 f970 	bl	8000714 <__addsf3>
 801e434:	f855 1c24 	ldr.w	r1, [r5, #-36]
 801e438:	4607      	mov	r7, r0
 801e43a:	f856 0c24 	ldr.w	r0, [r6, #-36]
 801e43e:	f7e2 fa71 	bl	8000924 <__aeabi_fmul>
 801e442:	4601      	mov	r1, r0
 801e444:	4638      	mov	r0, r7
 801e446:	f7e2 f965 	bl	8000714 <__addsf3>
 801e44a:	f855 1c20 	ldr.w	r1, [r5, #-32]
 801e44e:	4607      	mov	r7, r0
 801e450:	f856 0c20 	ldr.w	r0, [r6, #-32]
 801e454:	f7e2 fa66 	bl	8000924 <__aeabi_fmul>
 801e458:	4601      	mov	r1, r0
 801e45a:	4638      	mov	r0, r7
 801e45c:	f7e2 f95a 	bl	8000714 <__addsf3>
 801e460:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 801e464:	4607      	mov	r7, r0
 801e466:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 801e46a:	f7e2 fa5b 	bl	8000924 <__aeabi_fmul>
 801e46e:	4601      	mov	r1, r0
 801e470:	4638      	mov	r0, r7
 801e472:	f7e2 f94f 	bl	8000714 <__addsf3>
 801e476:	f855 1c18 	ldr.w	r1, [r5, #-24]
 801e47a:	4607      	mov	r7, r0
 801e47c:	f856 0c18 	ldr.w	r0, [r6, #-24]
 801e480:	f7e2 fa50 	bl	8000924 <__aeabi_fmul>
 801e484:	4601      	mov	r1, r0
 801e486:	4638      	mov	r0, r7
 801e488:	f7e2 f944 	bl	8000714 <__addsf3>
 801e48c:	f855 1c14 	ldr.w	r1, [r5, #-20]
 801e490:	4607      	mov	r7, r0
 801e492:	f856 0c14 	ldr.w	r0, [r6, #-20]
 801e496:	f7e2 fa45 	bl	8000924 <__aeabi_fmul>
 801e49a:	4601      	mov	r1, r0
 801e49c:	4638      	mov	r0, r7
 801e49e:	f7e2 f939 	bl	8000714 <__addsf3>
 801e4a2:	f855 1c10 	ldr.w	r1, [r5, #-16]
 801e4a6:	4607      	mov	r7, r0
 801e4a8:	f856 0c10 	ldr.w	r0, [r6, #-16]
 801e4ac:	f7e2 fa3a 	bl	8000924 <__aeabi_fmul>
 801e4b0:	4601      	mov	r1, r0
 801e4b2:	4638      	mov	r0, r7
 801e4b4:	f7e2 f92e 	bl	8000714 <__addsf3>
 801e4b8:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 801e4bc:	4607      	mov	r7, r0
 801e4be:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 801e4c2:	f7e2 fa2f 	bl	8000924 <__aeabi_fmul>
 801e4c6:	4601      	mov	r1, r0
 801e4c8:	4638      	mov	r0, r7
 801e4ca:	f7e2 f923 	bl	8000714 <__addsf3>
 801e4ce:	f855 1c08 	ldr.w	r1, [r5, #-8]
 801e4d2:	4607      	mov	r7, r0
 801e4d4:	f856 0c08 	ldr.w	r0, [r6, #-8]
 801e4d8:	f7e2 fa24 	bl	8000924 <__aeabi_fmul>
 801e4dc:	4601      	mov	r1, r0
 801e4de:	4638      	mov	r0, r7
 801e4e0:	f7e2 f918 	bl	8000714 <__addsf3>
 801e4e4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 801e4e8:	4607      	mov	r7, r0
 801e4ea:	f856 0c04 	ldr.w	r0, [r6, #-4]
 801e4ee:	f7e2 fa19 	bl	8000924 <__aeabi_fmul>
 801e4f2:	4601      	mov	r1, r0
 801e4f4:	4638      	mov	r0, r7
 801e4f6:	f7e2 f90d 	bl	8000714 <__addsf3>
 801e4fa:	4601      	mov	r1, r0
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	f7e2 f909 	bl	8000714 <__addsf3>
 801e502:	f1aa 0a10 	sub.w	sl, sl, #16
 801e506:	f1ba 0f0f 	cmp.w	sl, #15
 801e50a:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 801e50e:	4604      	mov	r4, r0
 801e510:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 801e514:	f63f af46 	bhi.w	801e3a4 <forward_lite_dense_if32of32wf32+0x70>
 801e518:	9b05      	ldr	r3, [sp, #20]
 801e51a:	9d06      	ldr	r5, [sp, #24]
 801e51c:	eb08 0603 	add.w	r6, r8, r3
 801e520:	f00b 070f 	and.w	r7, fp, #15
 801e524:	2f03      	cmp	r7, #3
 801e526:	f240 8082 	bls.w	801e62e <forward_lite_dense_if32of32wf32+0x2fa>
 801e52a:	6871      	ldr	r1, [r6, #4]
 801e52c:	6868      	ldr	r0, [r5, #4]
 801e52e:	f7e2 f9f9 	bl	8000924 <__aeabi_fmul>
 801e532:	6831      	ldr	r1, [r6, #0]
 801e534:	4682      	mov	sl, r0
 801e536:	6828      	ldr	r0, [r5, #0]
 801e538:	f7e2 f9f4 	bl	8000924 <__aeabi_fmul>
 801e53c:	4601      	mov	r1, r0
 801e53e:	4650      	mov	r0, sl
 801e540:	f7e2 f8e8 	bl	8000714 <__addsf3>
 801e544:	4621      	mov	r1, r4
 801e546:	f7e2 f8e5 	bl	8000714 <__addsf3>
 801e54a:	68b1      	ldr	r1, [r6, #8]
 801e54c:	4604      	mov	r4, r0
 801e54e:	68a8      	ldr	r0, [r5, #8]
 801e550:	f7e2 f9e8 	bl	8000924 <__aeabi_fmul>
 801e554:	4601      	mov	r1, r0
 801e556:	4620      	mov	r0, r4
 801e558:	f7e2 f8dc 	bl	8000714 <__addsf3>
 801e55c:	68f1      	ldr	r1, [r6, #12]
 801e55e:	4604      	mov	r4, r0
 801e560:	68e8      	ldr	r0, [r5, #12]
 801e562:	f7e2 f9df 	bl	8000924 <__aeabi_fmul>
 801e566:	4621      	mov	r1, r4
 801e568:	f7e2 f8d4 	bl	8000714 <__addsf3>
 801e56c:	f1a7 0a04 	sub.w	sl, r7, #4
 801e570:	f1ba 0f03 	cmp.w	sl, #3
 801e574:	4604      	mov	r4, r0
 801e576:	d951      	bls.n	801e61c <forward_lite_dense_if32of32wf32+0x2e8>
 801e578:	6971      	ldr	r1, [r6, #20]
 801e57a:	6968      	ldr	r0, [r5, #20]
 801e57c:	f7e2 f9d2 	bl	8000924 <__aeabi_fmul>
 801e580:	6931      	ldr	r1, [r6, #16]
 801e582:	9004      	str	r0, [sp, #16]
 801e584:	6928      	ldr	r0, [r5, #16]
 801e586:	f7e2 f9cd 	bl	8000924 <__aeabi_fmul>
 801e58a:	9a04      	ldr	r2, [sp, #16]
 801e58c:	4601      	mov	r1, r0
 801e58e:	4610      	mov	r0, r2
 801e590:	f7e2 f8c0 	bl	8000714 <__addsf3>
 801e594:	69b1      	ldr	r1, [r6, #24]
 801e596:	9004      	str	r0, [sp, #16]
 801e598:	69a8      	ldr	r0, [r5, #24]
 801e59a:	f7e2 f9c3 	bl	8000924 <__aeabi_fmul>
 801e59e:	9a04      	ldr	r2, [sp, #16]
 801e5a0:	4601      	mov	r1, r0
 801e5a2:	4610      	mov	r0, r2
 801e5a4:	f7e2 f8b6 	bl	8000714 <__addsf3>
 801e5a8:	69f1      	ldr	r1, [r6, #28]
 801e5aa:	9004      	str	r0, [sp, #16]
 801e5ac:	69e8      	ldr	r0, [r5, #28]
 801e5ae:	f7e2 f9b9 	bl	8000924 <__aeabi_fmul>
 801e5b2:	9a04      	ldr	r2, [sp, #16]
 801e5b4:	4601      	mov	r1, r0
 801e5b6:	4610      	mov	r0, r2
 801e5b8:	f7e2 f8ac 	bl	8000714 <__addsf3>
 801e5bc:	4601      	mov	r1, r0
 801e5be:	4620      	mov	r0, r4
 801e5c0:	f7e2 f8a8 	bl	8000714 <__addsf3>
 801e5c4:	f1a7 0208 	sub.w	r2, r7, #8
 801e5c8:	2a03      	cmp	r2, #3
 801e5ca:	4604      	mov	r4, r0
 801e5cc:	d926      	bls.n	801e61c <forward_lite_dense_if32of32wf32+0x2e8>
 801e5ce:	6a29      	ldr	r1, [r5, #32]
 801e5d0:	6a30      	ldr	r0, [r6, #32]
 801e5d2:	f7e2 f9a7 	bl	8000924 <__aeabi_fmul>
 801e5d6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801e5d8:	9004      	str	r0, [sp, #16]
 801e5da:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801e5dc:	f7e2 f9a2 	bl	8000924 <__aeabi_fmul>
 801e5e0:	9a04      	ldr	r2, [sp, #16]
 801e5e2:	4601      	mov	r1, r0
 801e5e4:	4610      	mov	r0, r2
 801e5e6:	f7e2 f895 	bl	8000714 <__addsf3>
 801e5ea:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 801e5ec:	9004      	str	r0, [sp, #16]
 801e5ee:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 801e5f0:	f7e2 f998 	bl	8000924 <__aeabi_fmul>
 801e5f4:	9a04      	ldr	r2, [sp, #16]
 801e5f6:	4601      	mov	r1, r0
 801e5f8:	4610      	mov	r0, r2
 801e5fa:	f7e2 f88b 	bl	8000714 <__addsf3>
 801e5fe:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 801e600:	9004      	str	r0, [sp, #16]
 801e602:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801e604:	f7e2 f98e 	bl	8000924 <__aeabi_fmul>
 801e608:	9a04      	ldr	r2, [sp, #16]
 801e60a:	4601      	mov	r1, r0
 801e60c:	4610      	mov	r0, r2
 801e60e:	f7e2 f881 	bl	8000714 <__addsf3>
 801e612:	4601      	mov	r1, r0
 801e614:	4620      	mov	r0, r4
 801e616:	f7e2 f87d 	bl	8000714 <__addsf3>
 801e61a:	4604      	mov	r4, r0
 801e61c:	ea4f 039a 	mov.w	r3, sl, lsr #2
 801e620:	3301      	adds	r3, #1
 801e622:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 801e626:	eb05 1503 	add.w	r5, r5, r3, lsl #4
 801e62a:	f007 0703 	and.w	r7, r7, #3
 801e62e:	b1f7      	cbz	r7, 801e66e <forward_lite_dense_if32of32wf32+0x33a>
 801e630:	6831      	ldr	r1, [r6, #0]
 801e632:	6828      	ldr	r0, [r5, #0]
 801e634:	f7e2 f976 	bl	8000924 <__aeabi_fmul>
 801e638:	4601      	mov	r1, r0
 801e63a:	4620      	mov	r0, r4
 801e63c:	f7e2 f86a 	bl	8000714 <__addsf3>
 801e640:	3f01      	subs	r7, #1
 801e642:	4604      	mov	r4, r0
 801e644:	d013      	beq.n	801e66e <forward_lite_dense_if32of32wf32+0x33a>
 801e646:	6871      	ldr	r1, [r6, #4]
 801e648:	6868      	ldr	r0, [r5, #4]
 801e64a:	f7e2 f96b 	bl	8000924 <__aeabi_fmul>
 801e64e:	4601      	mov	r1, r0
 801e650:	4620      	mov	r0, r4
 801e652:	f7e2 f85f 	bl	8000714 <__addsf3>
 801e656:	2f01      	cmp	r7, #1
 801e658:	4604      	mov	r4, r0
 801e65a:	d008      	beq.n	801e66e <forward_lite_dense_if32of32wf32+0x33a>
 801e65c:	68a9      	ldr	r1, [r5, #8]
 801e65e:	68b0      	ldr	r0, [r6, #8]
 801e660:	f7e2 f960 	bl	8000924 <__aeabi_fmul>
 801e664:	4601      	mov	r1, r0
 801e666:	4620      	mov	r0, r4
 801e668:	f7e2 f854 	bl	8000714 <__addsf3>
 801e66c:	4604      	mov	r4, r0
 801e66e:	9b03      	ldr	r3, [sp, #12]
 801e670:	f849 4b04 	str.w	r4, [r9], #4
 801e674:	4498      	add	r8, r3
 801e676:	9b02      	ldr	r3, [sp, #8]
 801e678:	454b      	cmp	r3, r9
 801e67a:	f63f ae88 	bhi.w	801e38e <forward_lite_dense_if32of32wf32+0x5a>
 801e67e:	9b07      	ldr	r3, [sp, #28]
 801e680:	695b      	ldr	r3, [r3, #20]
 801e682:	9e07      	ldr	r6, [sp, #28]
 801e684:	68f2      	ldr	r2, [r6, #12]
 801e686:	b9c2      	cbnz	r2, 801e6ba <forward_lite_dense_if32of32wf32+0x386>
 801e688:	9a07      	ldr	r2, [sp, #28]
 801e68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e68c:	f8d2 b010 	ldr.w	fp, [r2, #16]
 801e690:	9a08      	ldr	r2, [sp, #32]
 801e692:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e696:	9a01      	ldr	r2, [sp, #4]
 801e698:	9108      	str	r1, [sp, #32]
 801e69a:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 801e69e:	4288      	cmp	r0, r1
 801e6a0:	9201      	str	r2, [sp, #4]
 801e6a2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801e6a6:	f63f ae5b 	bhi.w	801e360 <forward_lite_dense_if32of32wf32+0x2c>
 801e6aa:	b00b      	add	sp, #44	@ 0x2c
 801e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6b0:	9d01      	ldr	r5, [sp, #4]
 801e6b2:	465f      	mov	r7, fp
 801e6b4:	4646      	mov	r6, r8
 801e6b6:	2400      	movs	r4, #0
 801e6b8:	e734      	b.n	801e524 <forward_lite_dense_if32of32wf32+0x1f0>
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d0e4      	beq.n	801e688 <forward_lite_dense_if32of32wf32+0x354>
 801e6be:	9d08      	ldr	r5, [sp, #32]
 801e6c0:	6811      	ldr	r1, [r2, #0]
 801e6c2:	6828      	ldr	r0, [r5, #0]
 801e6c4:	f7e2 f826 	bl	8000714 <__addsf3>
 801e6c8:	6028      	str	r0, [r5, #0]
 801e6ca:	6973      	ldr	r3, [r6, #20]
 801e6cc:	2b01      	cmp	r3, #1
 801e6ce:	d9db      	bls.n	801e688 <forward_lite_dense_if32of32wf32+0x354>
 801e6d0:	2401      	movs	r4, #1
 801e6d2:	68f3      	ldr	r3, [r6, #12]
 801e6d4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801e6d8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801e6dc:	f7e2 f81a 	bl	8000714 <__addsf3>
 801e6e0:	6028      	str	r0, [r5, #0]
 801e6e2:	6973      	ldr	r3, [r6, #20]
 801e6e4:	3401      	adds	r4, #1
 801e6e6:	42a3      	cmp	r3, r4
 801e6e8:	d8f3      	bhi.n	801e6d2 <forward_lite_dense_if32of32wf32+0x39e>
 801e6ea:	e7cd      	b.n	801e688 <forward_lite_dense_if32of32wf32+0x354>

0801e6ec <forward_lite_dense_if32of32wf32_lut4>:
 801e6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6f0:	b097      	sub	sp, #92	@ 0x5c
 801e6f2:	469b      	mov	fp, r3
 801e6f4:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e6f6:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	@ 0x8c
 801e6fa:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e6fc:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 801e6fe:	900c      	str	r0, [sp, #48]	@ 0x30
 801e700:	fb02 f303 	mul.w	r3, r2, r3
 801e704:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e708:	460c      	mov	r4, r1
 801e70a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e70c:	b12e      	cbz	r6, 801e71a <forward_lite_dense_if32of32wf32_lut4+0x2e>
 801e70e:	4658      	mov	r0, fp
 801e710:	2240      	movs	r2, #64	@ 0x40
 801e712:	4631      	mov	r1, r6
 801e714:	f000 face 	bl	801ecb4 <st_int8_copy>
 801e718:	46b3      	mov	fp, r6
 801e71a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e71c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e71e:	4293      	cmp	r3, r2
 801e720:	f080 8153 	bcs.w	801e9ca <forward_lite_dense_if32of32wf32_lut4+0x2de>
 801e724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e726:	009a      	lsls	r2, r3, #2
 801e728:	f025 0301 	bic.w	r3, r5, #1
 801e72c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e730:	9304      	str	r3, [sp, #16]
 801e732:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e734:	920d      	str	r2, [sp, #52]	@ 0x34
 801e736:	1f18      	subs	r0, r3, #4
 801e738:	f06f 0303 	mvn.w	r3, #3
 801e73c:	1a9b      	subs	r3, r3, r2
 801e73e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e740:	f005 0301 	and.w	r3, r5, #1
 801e744:	08e9      	lsrs	r1, r5, #3
 801e746:	9309      	str	r3, [sp, #36]	@ 0x24
 801e748:	00ab      	lsls	r3, r5, #2
 801e74a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e74c:	eb04 1341 	add.w	r3, r4, r1, lsl #5
 801e750:	9307      	str	r3, [sp, #28]
 801e752:	f104 0320 	add.w	r3, r4, #32
 801e756:	9306      	str	r3, [sp, #24]
 801e758:	008b      	lsls	r3, r1, #2
 801e75a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e75c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e75e:	9214      	str	r2, [sp, #80]	@ 0x50
 801e760:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e764:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e766:	9108      	str	r1, [sp, #32]
 801e768:	9010      	str	r0, [sp, #64]	@ 0x40
 801e76a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e76c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e76e:	9906      	ldr	r1, [sp, #24]
 801e770:	18d3      	adds	r3, r2, r3
 801e772:	3920      	subs	r1, #32
 801e774:	4293      	cmp	r3, r2
 801e776:	9305      	str	r3, [sp, #20]
 801e778:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e77a:	f240 8129 	bls.w	801e9d0 <forward_lite_dense_if32of32wf32_lut4+0x2e4>
 801e77e:	9b04      	ldr	r3, [sp, #16]
 801e780:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e782:	9201      	str	r2, [sp, #4]
 801e784:	3b01      	subs	r3, #1
 801e786:	930a      	str	r3, [sp, #40]	@ 0x28
 801e788:	9b08      	ldr	r3, [sp, #32]
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	f000 80ee 	beq.w	801e96c <forward_lite_dense_if32of32wf32_lut4+0x280>
 801e790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e792:	9c06      	ldr	r4, [sp, #24]
 801e794:	18f7      	adds	r7, r6, r3
 801e796:	2500      	movs	r5, #0
 801e798:	f896 8000 	ldrb.w	r8, [r6]
 801e79c:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801e7a0:	ea4f 1318 	mov.w	r3, r8, lsr #4
 801e7a4:	f008 080f 	and.w	r8, r8, #15
 801e7a8:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801e7ac:	f7e2 f8ba 	bl	8000924 <__aeabi_fmul>
 801e7b0:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801e7b4:	4681      	mov	r9, r0
 801e7b6:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 801e7ba:	f896 8001 	ldrb.w	r8, [r6, #1]
 801e7be:	f7e2 f8b1 	bl	8000924 <__aeabi_fmul>
 801e7c2:	4601      	mov	r1, r0
 801e7c4:	4648      	mov	r0, r9
 801e7c6:	f7e1 ffa5 	bl	8000714 <__addsf3>
 801e7ca:	ea4f 1318 	mov.w	r3, r8, lsr #4
 801e7ce:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801e7d2:	4681      	mov	r9, r0
 801e7d4:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801e7d8:	f7e2 f8a4 	bl	8000924 <__aeabi_fmul>
 801e7dc:	4601      	mov	r1, r0
 801e7de:	4648      	mov	r0, r9
 801e7e0:	f7e1 ff98 	bl	8000714 <__addsf3>
 801e7e4:	f008 080f 	and.w	r8, r8, #15
 801e7e8:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801e7ec:	4681      	mov	r9, r0
 801e7ee:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 801e7f2:	f896 8002 	ldrb.w	r8, [r6, #2]
 801e7f6:	f7e2 f895 	bl	8000924 <__aeabi_fmul>
 801e7fa:	4601      	mov	r1, r0
 801e7fc:	4648      	mov	r0, r9
 801e7fe:	f7e1 ff89 	bl	8000714 <__addsf3>
 801e802:	ea4f 1318 	mov.w	r3, r8, lsr #4
 801e806:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801e80a:	4681      	mov	r9, r0
 801e80c:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801e810:	f7e2 f888 	bl	8000924 <__aeabi_fmul>
 801e814:	4601      	mov	r1, r0
 801e816:	4648      	mov	r0, r9
 801e818:	f7e1 ff7c 	bl	8000714 <__addsf3>
 801e81c:	f008 080f 	and.w	r8, r8, #15
 801e820:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801e824:	4681      	mov	r9, r0
 801e826:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 801e82a:	f896 8003 	ldrb.w	r8, [r6, #3]
 801e82e:	f7e2 f879 	bl	8000924 <__aeabi_fmul>
 801e832:	4601      	mov	r1, r0
 801e834:	4648      	mov	r0, r9
 801e836:	f7e1 ff6d 	bl	8000714 <__addsf3>
 801e83a:	ea4f 1318 	mov.w	r3, r8, lsr #4
 801e83e:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801e842:	4681      	mov	r9, r0
 801e844:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801e848:	f7e2 f86c 	bl	8000924 <__aeabi_fmul>
 801e84c:	4601      	mov	r1, r0
 801e84e:	4648      	mov	r0, r9
 801e850:	f7e1 ff60 	bl	8000714 <__addsf3>
 801e854:	f008 080f 	and.w	r8, r8, #15
 801e858:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801e85c:	4681      	mov	r9, r0
 801e85e:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 801e862:	f7e2 f85f 	bl	8000924 <__aeabi_fmul>
 801e866:	4601      	mov	r1, r0
 801e868:	4648      	mov	r0, r9
 801e86a:	f7e1 ff53 	bl	8000714 <__addsf3>
 801e86e:	4601      	mov	r1, r0
 801e870:	4628      	mov	r0, r5
 801e872:	f7e1 ff4f 	bl	8000714 <__addsf3>
 801e876:	3604      	adds	r6, #4
 801e878:	42be      	cmp	r6, r7
 801e87a:	4605      	mov	r5, r0
 801e87c:	f104 0420 	add.w	r4, r4, #32
 801e880:	d18a      	bne.n	801e798 <forward_lite_dense_if32of32wf32_lut4+0xac>
 801e882:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801e886:	9b04      	ldr	r3, [sp, #16]
 801e888:	4599      	cmp	r9, r3
 801e88a:	d277      	bcs.n	801e97c <forward_lite_dense_if32of32wf32_lut4+0x290>
 801e88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e88e:	9703      	str	r7, [sp, #12]
 801e890:	eba3 0609 	sub.w	r6, r3, r9
 801e894:	08f3      	lsrs	r3, r6, #3
 801e896:	f107 3aff 	add.w	sl, r7, #4294967295
 801e89a:	eb07 06d6 	add.w	r6, r7, r6, lsr #3
 801e89e:	f109 0808 	add.w	r8, r9, #8
 801e8a2:	9302      	str	r3, [sp, #8]
 801e8a4:	4657      	mov	r7, sl
 801e8a6:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 801e8aa:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801e8ae:	0922      	lsrs	r2, r4, #4
 801e8b0:	f004 040f 	and.w	r4, r4, #15
 801e8b4:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801e8b8:	f7e2 f834 	bl	8000924 <__aeabi_fmul>
 801e8bc:	f858 1c04 	ldr.w	r1, [r8, #-4]
 801e8c0:	4682      	mov	sl, r0
 801e8c2:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 801e8c6:	f7e2 f82d 	bl	8000924 <__aeabi_fmul>
 801e8ca:	4601      	mov	r1, r0
 801e8cc:	4650      	mov	r0, sl
 801e8ce:	f7e1 ff21 	bl	8000714 <__addsf3>
 801e8d2:	4601      	mov	r1, r0
 801e8d4:	4628      	mov	r0, r5
 801e8d6:	f7e1 ff1d 	bl	8000714 <__addsf3>
 801e8da:	42be      	cmp	r6, r7
 801e8dc:	4605      	mov	r5, r0
 801e8de:	f108 0808 	add.w	r8, r8, #8
 801e8e2:	d1e0      	bne.n	801e8a6 <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 801e8e4:	e9dd 3702 	ldrd	r3, r7, [sp, #8]
 801e8e8:	f103 0a01 	add.w	sl, r3, #1
 801e8ec:	eb07 060a 	add.w	r6, r7, sl
 801e8f0:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
 801e8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d02d      	beq.n	801e956 <forward_lite_dense_if32of32wf32_lut4+0x26a>
 801e8fa:	f816 3b01 	ldrb.w	r3, [r6], #1
 801e8fe:	f8d9 1000 	ldr.w	r1, [r9]
 801e902:	091b      	lsrs	r3, r3, #4
 801e904:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801e908:	f7e2 f80c 	bl	8000924 <__aeabi_fmul>
 801e90c:	4629      	mov	r1, r5
 801e90e:	f7e1 ff01 	bl	8000714 <__addsf3>
 801e912:	9b01      	ldr	r3, [sp, #4]
 801e914:	9a05      	ldr	r2, [sp, #20]
 801e916:	f843 0b04 	str.w	r0, [r3], #4
 801e91a:	429a      	cmp	r2, r3
 801e91c:	9301      	str	r3, [sp, #4]
 801e91e:	f63f af33 	bhi.w	801e788 <forward_lite_dense_if32of32wf32_lut4+0x9c>
 801e922:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e924:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e926:	189c      	adds	r4, r3, r2
 801e928:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e92a:	2b00      	cmp	r3, #0
 801e92c:	d13a      	bne.n	801e9a4 <forward_lite_dense_if32of32wf32_lut4+0x2b8>
 801e92e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e930:	42a3      	cmp	r3, r4
 801e932:	d94a      	bls.n	801e9ca <forward_lite_dense_if32of32wf32_lut4+0x2de>
 801e934:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e936:	9a04      	ldr	r2, [sp, #16]
 801e938:	441a      	add	r2, r3
 801e93a:	9204      	str	r2, [sp, #16]
 801e93c:	9a07      	ldr	r2, [sp, #28]
 801e93e:	441a      	add	r2, r3
 801e940:	9207      	str	r2, [sp, #28]
 801e942:	9a06      	ldr	r2, [sp, #24]
 801e944:	441a      	add	r2, r3
 801e946:	9206      	str	r2, [sp, #24]
 801e948:	9b05      	ldr	r3, [sp, #20]
 801e94a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e94c:	4293      	cmp	r3, r2
 801e94e:	d917      	bls.n	801e980 <forward_lite_dense_if32of32wf32_lut4+0x294>
 801e950:	940c      	str	r4, [sp, #48]	@ 0x30
 801e952:	4622      	mov	r2, r4
 801e954:	e70a      	b.n	801e76c <forward_lite_dense_if32of32wf32_lut4+0x80>
 801e956:	9b01      	ldr	r3, [sp, #4]
 801e958:	9a05      	ldr	r2, [sp, #20]
 801e95a:	f843 5b04 	str.w	r5, [r3], #4
 801e95e:	429a      	cmp	r2, r3
 801e960:	9301      	str	r3, [sp, #4]
 801e962:	d9de      	bls.n	801e922 <forward_lite_dense_if32of32wf32_lut4+0x236>
 801e964:	9b08      	ldr	r3, [sp, #32]
 801e966:	2b00      	cmp	r3, #0
 801e968:	f47f af12 	bne.w	801e790 <forward_lite_dense_if32of32wf32_lut4+0xa4>
 801e96c:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 801e970:	9b04      	ldr	r3, [sp, #16]
 801e972:	4599      	cmp	r9, r3
 801e974:	4637      	mov	r7, r6
 801e976:	f04f 0500 	mov.w	r5, #0
 801e97a:	d387      	bcc.n	801e88c <forward_lite_dense_if32of32wf32_lut4+0x1a0>
 801e97c:	463e      	mov	r6, r7
 801e97e:	e7b9      	b.n	801e8f4 <forward_lite_dense_if32of32wf32_lut4+0x208>
 801e980:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e982:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801e986:	f06f 0703 	mvn.w	r7, #3
 801e98a:	1aff      	subs	r7, r7, r3
 801e98c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801e98e:	19e6      	adds	r6, r4, r7
 801e990:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801e994:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801e998:	f7e1 febc 	bl	8000714 <__addsf3>
 801e99c:	4545      	cmp	r5, r8
 801e99e:	6030      	str	r0, [r6, #0]
 801e9a0:	d1f6      	bne.n	801e990 <forward_lite_dense_if32of32wf32_lut4+0x2a4>
 801e9a2:	e7f3      	b.n	801e98c <forward_lite_dense_if32of32wf32_lut4+0x2a0>
 801e9a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d0c1      	beq.n	801e92e <forward_lite_dense_if32of32wf32_lut4+0x242>
 801e9aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e9ac:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801e9ae:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801e9b0:	18e6      	adds	r6, r4, r3
 801e9b2:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801e9b6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801e9ba:	f7e1 feab 	bl	8000714 <__addsf3>
 801e9be:	42bd      	cmp	r5, r7
 801e9c0:	6030      	str	r0, [r6, #0]
 801e9c2:	d1f6      	bne.n	801e9b2 <forward_lite_dense_if32of32wf32_lut4+0x2c6>
 801e9c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e9c6:	42a3      	cmp	r3, r4
 801e9c8:	d8b4      	bhi.n	801e934 <forward_lite_dense_if32of32wf32_lut4+0x248>
 801e9ca:	b017      	add	sp, #92	@ 0x5c
 801e9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9d0:	4614      	mov	r4, r2
 801e9d2:	e7a9      	b.n	801e928 <forward_lite_dense_if32of32wf32_lut4+0x23c>

0801e9d4 <forward_lite_dense_if32of32wf32_lut8>:
 801e9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9d8:	b091      	sub	sp, #68	@ 0x44
 801e9da:	461e      	mov	r6, r3
 801e9dc:	920d      	str	r2, [sp, #52]	@ 0x34
 801e9de:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801e9e2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801e9e4:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801e9e6:	9006      	str	r0, [sp, #24]
 801e9e8:	fb02 f303 	mul.w	r3, r2, r3
 801e9ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e9f0:	460c      	mov	r4, r1
 801e9f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e9f4:	b137      	cbz	r7, 801ea04 <forward_lite_dense_if32of32wf32_lut8+0x30>
 801e9f6:	4630      	mov	r0, r6
 801e9f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801e9fc:	4639      	mov	r1, r7
 801e9fe:	f000 f959 	bl	801ecb4 <st_int8_copy>
 801ea02:	463e      	mov	r6, r7
 801ea04:	9b06      	ldr	r3, [sp, #24]
 801ea06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ea08:	4293      	cmp	r3, r2
 801ea0a:	f080 814e 	bcs.w	801ecaa <forward_lite_dense_if32of32wf32_lut8+0x2d6>
 801ea0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea10:	009a      	lsls	r2, r3, #2
 801ea12:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ea14:	9207      	str	r2, [sp, #28]
 801ea16:	1f18      	subs	r0, r3, #4
 801ea18:	f06f 0303 	mvn.w	r3, #3
 801ea1c:	1a9b      	subs	r3, r3, r2
 801ea1e:	08e9      	lsrs	r1, r5, #3
 801ea20:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ea22:	00ab      	lsls	r3, r5, #2
 801ea24:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea26:	eb04 1341 	add.w	r3, r4, r1, lsl #5
 801ea2a:	9303      	str	r3, [sp, #12]
 801ea2c:	f104 0320 	add.w	r3, r4, #32
 801ea30:	9302      	str	r3, [sp, #8]
 801ea32:	00cb      	lsls	r3, r1, #3
 801ea34:	9305      	str	r3, [sp, #20]
 801ea36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea38:	920e      	str	r2, [sp, #56]	@ 0x38
 801ea3a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801ea3e:	9a06      	ldr	r2, [sp, #24]
 801ea40:	9104      	str	r1, [sp, #16]
 801ea42:	900a      	str	r0, [sp, #40]	@ 0x28
 801ea44:	f005 0b07 	and.w	fp, r5, #7
 801ea48:	9308      	str	r3, [sp, #32]
 801ea4a:	9b07      	ldr	r3, [sp, #28]
 801ea4c:	9902      	ldr	r1, [sp, #8]
 801ea4e:	18d3      	adds	r3, r2, r3
 801ea50:	3920      	subs	r1, #32
 801ea52:	4293      	cmp	r3, r2
 801ea54:	9301      	str	r3, [sp, #4]
 801ea56:	9109      	str	r1, [sp, #36]	@ 0x24
 801ea58:	f240 812a 	bls.w	801ecb0 <forward_lite_dense_if32of32wf32_lut8+0x2dc>
 801ea5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ea5e:	9200      	str	r2, [sp, #0]
 801ea60:	9b04      	ldr	r3, [sp, #16]
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	f000 8109 	beq.w	801ec7a <forward_lite_dense_if32of32wf32_lut8+0x2a6>
 801ea68:	9b05      	ldr	r3, [sp, #20]
 801ea6a:	9d02      	ldr	r5, [sp, #8]
 801ea6c:	eb04 0803 	add.w	r8, r4, r3
 801ea70:	2700      	movs	r7, #0
 801ea72:	7823      	ldrb	r3, [r4, #0]
 801ea74:	f855 1c20 	ldr.w	r1, [r5, #-32]
 801ea78:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801ea7c:	f7e1 ff52 	bl	8000924 <__aeabi_fmul>
 801ea80:	7863      	ldrb	r3, [r4, #1]
 801ea82:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 801ea86:	4681      	mov	r9, r0
 801ea88:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801ea8c:	f7e1 ff4a 	bl	8000924 <__aeabi_fmul>
 801ea90:	4601      	mov	r1, r0
 801ea92:	4648      	mov	r0, r9
 801ea94:	f7e1 fe3e 	bl	8000714 <__addsf3>
 801ea98:	78a3      	ldrb	r3, [r4, #2]
 801ea9a:	f855 1c18 	ldr.w	r1, [r5, #-24]
 801ea9e:	4681      	mov	r9, r0
 801eaa0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801eaa4:	f7e1 ff3e 	bl	8000924 <__aeabi_fmul>
 801eaa8:	4601      	mov	r1, r0
 801eaaa:	4648      	mov	r0, r9
 801eaac:	f7e1 fe32 	bl	8000714 <__addsf3>
 801eab0:	78e3      	ldrb	r3, [r4, #3]
 801eab2:	f855 1c14 	ldr.w	r1, [r5, #-20]
 801eab6:	4681      	mov	r9, r0
 801eab8:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801eabc:	f7e1 ff32 	bl	8000924 <__aeabi_fmul>
 801eac0:	4601      	mov	r1, r0
 801eac2:	4648      	mov	r0, r9
 801eac4:	f7e1 fe26 	bl	8000714 <__addsf3>
 801eac8:	7923      	ldrb	r3, [r4, #4]
 801eaca:	f855 1c10 	ldr.w	r1, [r5, #-16]
 801eace:	4681      	mov	r9, r0
 801ead0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801ead4:	f7e1 ff26 	bl	8000924 <__aeabi_fmul>
 801ead8:	4649      	mov	r1, r9
 801eada:	f7e1 fe1b 	bl	8000714 <__addsf3>
 801eade:	7963      	ldrb	r3, [r4, #5]
 801eae0:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 801eae4:	4681      	mov	r9, r0
 801eae6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801eaea:	f7e1 ff1b 	bl	8000924 <__aeabi_fmul>
 801eaee:	4601      	mov	r1, r0
 801eaf0:	4648      	mov	r0, r9
 801eaf2:	f7e1 fe0f 	bl	8000714 <__addsf3>
 801eaf6:	79a3      	ldrb	r3, [r4, #6]
 801eaf8:	f894 a007 	ldrb.w	sl, [r4, #7]
 801eafc:	f855 1c08 	ldr.w	r1, [r5, #-8]
 801eb00:	4681      	mov	r9, r0
 801eb02:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801eb06:	f7e1 ff0d 	bl	8000924 <__aeabi_fmul>
 801eb0a:	4601      	mov	r1, r0
 801eb0c:	4648      	mov	r0, r9
 801eb0e:	f7e1 fe01 	bl	8000714 <__addsf3>
 801eb12:	f855 1c04 	ldr.w	r1, [r5, #-4]
 801eb16:	4681      	mov	r9, r0
 801eb18:	f856 002a 	ldr.w	r0, [r6, sl, lsl #2]
 801eb1c:	f7e1 ff02 	bl	8000924 <__aeabi_fmul>
 801eb20:	4601      	mov	r1, r0
 801eb22:	4648      	mov	r0, r9
 801eb24:	f7e1 fdf6 	bl	8000714 <__addsf3>
 801eb28:	4601      	mov	r1, r0
 801eb2a:	4638      	mov	r0, r7
 801eb2c:	f7e1 fdf2 	bl	8000714 <__addsf3>
 801eb30:	3408      	adds	r4, #8
 801eb32:	4544      	cmp	r4, r8
 801eb34:	4607      	mov	r7, r0
 801eb36:	f105 0520 	add.w	r5, r5, #32
 801eb3a:	d19a      	bne.n	801ea72 <forward_lite_dense_if32of32wf32_lut8+0x9e>
 801eb3c:	9c03      	ldr	r4, [sp, #12]
 801eb3e:	f1bb 0f00 	cmp.w	fp, #0
 801eb42:	f000 8098 	beq.w	801ec76 <forward_lite_dense_if32of32wf32_lut8+0x2a2>
 801eb46:	f898 3000 	ldrb.w	r3, [r8]
 801eb4a:	6821      	ldr	r1, [r4, #0]
 801eb4c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801eb50:	f7e1 fee8 	bl	8000924 <__aeabi_fmul>
 801eb54:	4601      	mov	r1, r0
 801eb56:	4638      	mov	r0, r7
 801eb58:	f7e1 fddc 	bl	8000714 <__addsf3>
 801eb5c:	f1bb 0f01 	cmp.w	fp, #1
 801eb60:	4607      	mov	r7, r0
 801eb62:	d056      	beq.n	801ec12 <forward_lite_dense_if32of32wf32_lut8+0x23e>
 801eb64:	f898 3001 	ldrb.w	r3, [r8, #1]
 801eb68:	6861      	ldr	r1, [r4, #4]
 801eb6a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801eb6e:	f7e1 fed9 	bl	8000924 <__aeabi_fmul>
 801eb72:	4601      	mov	r1, r0
 801eb74:	4638      	mov	r0, r7
 801eb76:	f7e1 fdcd 	bl	8000714 <__addsf3>
 801eb7a:	f1bb 0f02 	cmp.w	fp, #2
 801eb7e:	4607      	mov	r7, r0
 801eb80:	d047      	beq.n	801ec12 <forward_lite_dense_if32of32wf32_lut8+0x23e>
 801eb82:	f898 3002 	ldrb.w	r3, [r8, #2]
 801eb86:	68a1      	ldr	r1, [r4, #8]
 801eb88:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801eb8c:	f7e1 feca 	bl	8000924 <__aeabi_fmul>
 801eb90:	4601      	mov	r1, r0
 801eb92:	4638      	mov	r0, r7
 801eb94:	f7e1 fdbe 	bl	8000714 <__addsf3>
 801eb98:	f1bb 0f03 	cmp.w	fp, #3
 801eb9c:	4607      	mov	r7, r0
 801eb9e:	d038      	beq.n	801ec12 <forward_lite_dense_if32of32wf32_lut8+0x23e>
 801eba0:	f898 3003 	ldrb.w	r3, [r8, #3]
 801eba4:	68e1      	ldr	r1, [r4, #12]
 801eba6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801ebaa:	f7e1 febb 	bl	8000924 <__aeabi_fmul>
 801ebae:	4601      	mov	r1, r0
 801ebb0:	4638      	mov	r0, r7
 801ebb2:	f7e1 fdaf 	bl	8000714 <__addsf3>
 801ebb6:	f1bb 0f04 	cmp.w	fp, #4
 801ebba:	4607      	mov	r7, r0
 801ebbc:	d029      	beq.n	801ec12 <forward_lite_dense_if32of32wf32_lut8+0x23e>
 801ebbe:	f898 3004 	ldrb.w	r3, [r8, #4]
 801ebc2:	6921      	ldr	r1, [r4, #16]
 801ebc4:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801ebc8:	f7e1 feac 	bl	8000924 <__aeabi_fmul>
 801ebcc:	4601      	mov	r1, r0
 801ebce:	4638      	mov	r0, r7
 801ebd0:	f7e1 fda0 	bl	8000714 <__addsf3>
 801ebd4:	f1bb 0f05 	cmp.w	fp, #5
 801ebd8:	4607      	mov	r7, r0
 801ebda:	d01a      	beq.n	801ec12 <forward_lite_dense_if32of32wf32_lut8+0x23e>
 801ebdc:	f898 3005 	ldrb.w	r3, [r8, #5]
 801ebe0:	6961      	ldr	r1, [r4, #20]
 801ebe2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801ebe6:	f7e1 fe9d 	bl	8000924 <__aeabi_fmul>
 801ebea:	4601      	mov	r1, r0
 801ebec:	4638      	mov	r0, r7
 801ebee:	f7e1 fd91 	bl	8000714 <__addsf3>
 801ebf2:	f1bb 0f06 	cmp.w	fp, #6
 801ebf6:	4607      	mov	r7, r0
 801ebf8:	d00b      	beq.n	801ec12 <forward_lite_dense_if32of32wf32_lut8+0x23e>
 801ebfa:	f898 3006 	ldrb.w	r3, [r8, #6]
 801ebfe:	69a1      	ldr	r1, [r4, #24]
 801ec00:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801ec04:	f7e1 fe8e 	bl	8000924 <__aeabi_fmul>
 801ec08:	4601      	mov	r1, r0
 801ec0a:	4638      	mov	r0, r7
 801ec0c:	f7e1 fd82 	bl	8000714 <__addsf3>
 801ec10:	4607      	mov	r7, r0
 801ec12:	eb08 040b 	add.w	r4, r8, fp
 801ec16:	9b00      	ldr	r3, [sp, #0]
 801ec18:	9a01      	ldr	r2, [sp, #4]
 801ec1a:	f843 7b04 	str.w	r7, [r3], #4
 801ec1e:	429a      	cmp	r2, r3
 801ec20:	9300      	str	r3, [sp, #0]
 801ec22:	f63f af1d 	bhi.w	801ea60 <forward_lite_dense_if32of32wf32_lut8+0x8c>
 801ec26:	9b06      	ldr	r3, [sp, #24]
 801ec28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec2a:	189c      	adds	r4, r3, r2
 801ec2c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ec2e:	bb43      	cbnz	r3, 801ec82 <forward_lite_dense_if32of32wf32_lut8+0x2ae>
 801ec30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec32:	42a3      	cmp	r3, r4
 801ec34:	d939      	bls.n	801ecaa <forward_lite_dense_if32of32wf32_lut8+0x2d6>
 801ec36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec38:	9b03      	ldr	r3, [sp, #12]
 801ec3a:	4413      	add	r3, r2
 801ec3c:	9303      	str	r3, [sp, #12]
 801ec3e:	9b02      	ldr	r3, [sp, #8]
 801ec40:	4413      	add	r3, r2
 801ec42:	9302      	str	r3, [sp, #8]
 801ec44:	9a06      	ldr	r2, [sp, #24]
 801ec46:	9b01      	ldr	r3, [sp, #4]
 801ec48:	4293      	cmp	r3, r2
 801ec4a:	d902      	bls.n	801ec52 <forward_lite_dense_if32of32wf32_lut8+0x27e>
 801ec4c:	9406      	str	r4, [sp, #24]
 801ec4e:	4622      	mov	r2, r4
 801ec50:	e6fb      	b.n	801ea4a <forward_lite_dense_if32of32wf32_lut8+0x76>
 801ec52:	9b07      	ldr	r3, [sp, #28]
 801ec54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ec58:	f06f 0703 	mvn.w	r7, #3
 801ec5c:	1aff      	subs	r7, r7, r3
 801ec5e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ec60:	19e6      	adds	r6, r4, r7
 801ec62:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801ec66:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ec6a:	f7e1 fd53 	bl	8000714 <__addsf3>
 801ec6e:	4545      	cmp	r5, r8
 801ec70:	6030      	str	r0, [r6, #0]
 801ec72:	d1f6      	bne.n	801ec62 <forward_lite_dense_if32of32wf32_lut8+0x28e>
 801ec74:	e7f3      	b.n	801ec5e <forward_lite_dense_if32of32wf32_lut8+0x28a>
 801ec76:	4644      	mov	r4, r8
 801ec78:	e7cd      	b.n	801ec16 <forward_lite_dense_if32of32wf32_lut8+0x242>
 801ec7a:	46a0      	mov	r8, r4
 801ec7c:	2700      	movs	r7, #0
 801ec7e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ec80:	e75d      	b.n	801eb3e <forward_lite_dense_if32of32wf32_lut8+0x16a>
 801ec82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d0d3      	beq.n	801ec30 <forward_lite_dense_if32of32wf32_lut8+0x25c>
 801ec88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ec8a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ec8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ec90:	18e7      	adds	r7, r4, r3
 801ec92:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801ec96:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801ec9a:	f7e1 fd3b 	bl	8000714 <__addsf3>
 801ec9e:	45a8      	cmp	r8, r5
 801eca0:	6038      	str	r0, [r7, #0]
 801eca2:	d1f6      	bne.n	801ec92 <forward_lite_dense_if32of32wf32_lut8+0x2be>
 801eca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eca6:	42a3      	cmp	r3, r4
 801eca8:	d8c5      	bhi.n	801ec36 <forward_lite_dense_if32of32wf32_lut8+0x262>
 801ecaa:	b011      	add	sp, #68	@ 0x44
 801ecac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb0:	4614      	mov	r4, r2
 801ecb2:	e7bb      	b.n	801ec2c <forward_lite_dense_if32of32wf32_lut8+0x258>

0801ecb4 <st_int8_copy>:
 801ecb4:	4288      	cmp	r0, r1
 801ecb6:	d022      	beq.n	801ecfe <st_int8_copy+0x4a>
 801ecb8:	b30a      	cbz	r2, 801ecfe <st_int8_copy+0x4a>
 801ecba:	4288      	cmp	r0, r1
 801ecbc:	d312      	bcc.n	801ece4 <st_int8_copy+0x30>
 801ecbe:	2a03      	cmp	r2, #3
 801ecc0:	d81e      	bhi.n	801ed00 <st_int8_copy+0x4c>
 801ecc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ecc6:	f801 3b01 	strb.w	r3, [r1], #1
 801ecca:	2a01      	cmp	r2, #1
 801eccc:	d017      	beq.n	801ecfe <st_int8_copy+0x4a>
 801ecce:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ecd2:	f801 3b01 	strb.w	r3, [r1], #1
 801ecd6:	2a02      	cmp	r2, #2
 801ecd8:	d011      	beq.n	801ecfe <st_int8_copy+0x4a>
 801ecda:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ecde:	f801 3b01 	strb.w	r3, [r1], #1
 801ece2:	4770      	bx	lr
 801ece4:	1883      	adds	r3, r0, r2
 801ece6:	4299      	cmp	r1, r3
 801ece8:	d2e9      	bcs.n	801ecbe <st_int8_copy+0xa>
 801ecea:	4298      	cmp	r0, r3
 801ecec:	440a      	add	r2, r1
 801ecee:	d206      	bcs.n	801ecfe <st_int8_copy+0x4a>
 801ecf0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801ecf4:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801ecf8:	4298      	cmp	r0, r3
 801ecfa:	d1f9      	bne.n	801ecf0 <st_int8_copy+0x3c>
 801ecfc:	4770      	bx	lr
 801ecfe:	4770      	bx	lr
 801ed00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed04:	f001 0403 	and.w	r4, r1, #3
 801ed08:	f1c4 0304 	rsb	r3, r4, #4
 801ed0c:	f000 0e03 	and.w	lr, r0, #3
 801ed10:	eba2 0c03 	sub.w	ip, r2, r3
 801ed14:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ed18:	f801 3b01 	strb.w	r3, [r1], #1
 801ed1c:	2c03      	cmp	r4, #3
 801ed1e:	f1c4 0202 	rsb	r2, r4, #2
 801ed22:	d00e      	beq.n	801ed42 <st_int8_copy+0x8e>
 801ed24:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ed28:	f801 3b01 	strb.w	r3, [r1], #1
 801ed2c:	2a00      	cmp	r2, #0
 801ed2e:	dd08      	ble.n	801ed42 <st_int8_copy+0x8e>
 801ed30:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ed34:	f801 3b01 	strb.w	r3, [r1], #1
 801ed38:	b91c      	cbnz	r4, 801ed42 <st_int8_copy+0x8e>
 801ed3a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ed3e:	f801 3b01 	strb.w	r3, [r1], #1
 801ed42:	4574      	cmp	r4, lr
 801ed44:	d02b      	beq.n	801ed9e <st_int8_copy+0xea>
 801ed46:	ea4f 131c 	mov.w	r3, ip, lsr #4
 801ed4a:	1e5a      	subs	r2, r3, #1
 801ed4c:	b153      	cbz	r3, 801ed64 <st_int8_copy+0xb0>
 801ed4e:	f850 3b04 	ldr.w	r3, [r0], #4
 801ed52:	f850 4b04 	ldr.w	r4, [r0], #4
 801ed56:	f850 5b04 	ldr.w	r5, [r0], #4
 801ed5a:	f850 6b04 	ldr.w	r6, [r0], #4
 801ed5e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801ed60:	3a01      	subs	r2, #1
 801ed62:	d2f4      	bcs.n	801ed4e <st_int8_copy+0x9a>
 801ed64:	f01c 0f08 	tst.w	ip, #8
 801ed68:	d004      	beq.n	801ed74 <st_int8_copy+0xc0>
 801ed6a:	f850 3b04 	ldr.w	r3, [r0], #4
 801ed6e:	f850 4b04 	ldr.w	r4, [r0], #4
 801ed72:	c118      	stmia	r1!, {r3, r4}
 801ed74:	f01c 0f04 	tst.w	ip, #4
 801ed78:	d003      	beq.n	801ed82 <st_int8_copy+0xce>
 801ed7a:	f850 3b04 	ldr.w	r3, [r0], #4
 801ed7e:	f841 3b04 	str.w	r3, [r1], #4
 801ed82:	f01c 0f02 	tst.w	ip, #2
 801ed86:	d003      	beq.n	801ed90 <st_int8_copy+0xdc>
 801ed88:	f830 3b02 	ldrh.w	r3, [r0], #2
 801ed8c:	f821 3b02 	strh.w	r3, [r1], #2
 801ed90:	f01c 0f01 	tst.w	ip, #1
 801ed94:	d001      	beq.n	801ed9a <st_int8_copy+0xe6>
 801ed96:	7803      	ldrb	r3, [r0, #0]
 801ed98:	700b      	strb	r3, [r1, #0]
 801ed9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed9e:	ea4f 139c 	mov.w	r3, ip, lsr #6
 801eda2:	f103 39ff 	add.w	r9, r3, #4294967295
 801eda6:	b183      	cbz	r3, 801edca <st_int8_copy+0x116>
 801eda8:	4688      	mov	r8, r1
 801edaa:	4686      	mov	lr, r0
 801edac:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801edb0:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801edb4:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801edb8:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801edbc:	f109 39ff 	add.w	r9, r9, #4294967295
 801edc0:	f1b9 3fff 	cmp.w	r9, #4294967295
 801edc4:	4641      	mov	r1, r8
 801edc6:	4670      	mov	r0, lr
 801edc8:	d1ee      	bne.n	801eda8 <st_int8_copy+0xf4>
 801edca:	f01c 0f20 	tst.w	ip, #32
 801edce:	d007      	beq.n	801ede0 <st_int8_copy+0x12c>
 801edd0:	4688      	mov	r8, r1
 801edd2:	4686      	mov	lr, r0
 801edd4:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801edd8:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801eddc:	4641      	mov	r1, r8
 801edde:	4670      	mov	r0, lr
 801ede0:	f01c 0f10 	tst.w	ip, #16
 801ede4:	d001      	beq.n	801edea <st_int8_copy+0x136>
 801ede6:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 801ede8:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801edea:	f01c 0f08 	tst.w	ip, #8
 801edee:	d0c1      	beq.n	801ed74 <st_int8_copy+0xc0>
 801edf0:	c818      	ldmia	r0!, {r3, r4}
 801edf2:	c118      	stmia	r1!, {r3, r4}
 801edf4:	e7be      	b.n	801ed74 <st_int8_copy+0xc0>
 801edf6:	bf00      	nop

0801edf8 <ai_array_to_buffer_fmt>:
 801edf8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801edfc:	2b02      	cmp	r3, #2
 801edfe:	d055      	beq.n	801eeac <ai_array_to_buffer_fmt+0xb4>
 801ee00:	4a2d      	ldr	r2, [pc, #180]	@ (801eeb8 <ai_array_to_buffer_fmt+0xc0>)
 801ee02:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 801ee06:	4293      	cmp	r3, r2
 801ee08:	d010      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee0a:	dc21      	bgt.n	801ee50 <ai_array_to_buffer_fmt+0x58>
 801ee0c:	4a2b      	ldr	r2, [pc, #172]	@ (801eebc <ai_array_to_buffer_fmt+0xc4>)
 801ee0e:	4293      	cmp	r3, r2
 801ee10:	d00c      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee12:	dd0f      	ble.n	801ee34 <ai_array_to_buffer_fmt+0x3c>
 801ee14:	4a2a      	ldr	r2, [pc, #168]	@ (801eec0 <ai_array_to_buffer_fmt+0xc8>)
 801ee16:	4293      	cmp	r3, r2
 801ee18:	d008      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee1a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 801ee1e:	4293      	cmp	r3, r2
 801ee20:	d004      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee22:	4a28      	ldr	r2, [pc, #160]	@ (801eec4 <ai_array_to_buffer_fmt+0xcc>)
 801ee24:	4293      	cmp	r3, r2
 801ee26:	bf0c      	ite	eq
 801ee28:	4613      	moveq	r3, r2
 801ee2a:	2340      	movne	r3, #64	@ 0x40
 801ee2c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801ee30:	4318      	orrs	r0, r3
 801ee32:	4770      	bx	lr
 801ee34:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801ee38:	4293      	cmp	r3, r2
 801ee3a:	d0f7      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee3c:	dd2c      	ble.n	801ee98 <ai_array_to_buffer_fmt+0xa0>
 801ee3e:	4a22      	ldr	r2, [pc, #136]	@ (801eec8 <ai_array_to_buffer_fmt+0xd0>)
 801ee40:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801ee44:	4293      	cmp	r3, r2
 801ee46:	bf0c      	ite	eq
 801ee48:	4613      	moveq	r3, r2
 801ee4a:	2340      	movne	r3, #64	@ 0x40
 801ee4c:	4318      	orrs	r0, r3
 801ee4e:	4770      	bx	lr
 801ee50:	4a1e      	ldr	r2, [pc, #120]	@ (801eecc <ai_array_to_buffer_fmt+0xd4>)
 801ee52:	4293      	cmp	r3, r2
 801ee54:	d0ea      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee56:	dd10      	ble.n	801ee7a <ai_array_to_buffer_fmt+0x82>
 801ee58:	4a1d      	ldr	r2, [pc, #116]	@ (801eed0 <ai_array_to_buffer_fmt+0xd8>)
 801ee5a:	4293      	cmp	r3, r2
 801ee5c:	d0e6      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee5e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 801ee62:	4293      	cmp	r3, r2
 801ee64:	d0e2      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee66:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 801ee6a:	4293      	cmp	r3, r2
 801ee6c:	bf0c      	ite	eq
 801ee6e:	4613      	moveq	r3, r2
 801ee70:	2340      	movne	r3, #64	@ 0x40
 801ee72:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801ee76:	4318      	orrs	r0, r3
 801ee78:	4770      	bx	lr
 801ee7a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801ee7e:	4293      	cmp	r3, r2
 801ee80:	d0d4      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee82:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 801ee86:	4293      	cmp	r3, r2
 801ee88:	d0d0      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee8a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801ee8e:	4293      	cmp	r3, r2
 801ee90:	bf0c      	ite	eq
 801ee92:	4613      	moveq	r3, r2
 801ee94:	2340      	movne	r3, #64	@ 0x40
 801ee96:	e7c9      	b.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801ee98:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801ee9c:	4293      	cmp	r3, r2
 801ee9e:	d0c5      	beq.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801eea0:	3280      	adds	r2, #128	@ 0x80
 801eea2:	4293      	cmp	r3, r2
 801eea4:	bf0c      	ite	eq
 801eea6:	4613      	moveq	r3, r2
 801eea8:	2340      	movne	r3, #64	@ 0x40
 801eeaa:	e7bf      	b.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801eeac:	4b09      	ldr	r3, [pc, #36]	@ (801eed4 <ai_array_to_buffer_fmt+0xdc>)
 801eeae:	4003      	ands	r3, r0
 801eeb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801eeb4:	e7ba      	b.n	801ee2c <ai_array_to_buffer_fmt+0x34>
 801eeb6:	bf00      	nop
 801eeb8:	00821040 	.word	0x00821040
 801eebc:	00040840 	.word	0x00040840
 801eec0:	00041040 	.word	0x00041040
 801eec4:	0004084f 	.word	0x0004084f
 801eec8:	00040447 	.word	0x00040447
 801eecc:	00840447 	.word	0x00840447
 801eed0:	0084084f 	.word	0x0084084f
 801eed4:	00803fff 	.word	0x00803fff

0801eed8 <ai_array_get_data_byte_size>:
 801eed8:	b169      	cbz	r1, 801eef6 <ai_array_get_data_byte_size+0x1e>
 801eeda:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801eede:	fb01 f303 	mul.w	r3, r1, r3
 801eee2:	3307      	adds	r3, #7
 801eee4:	f023 0307 	bic.w	r3, r3, #7
 801eee8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801eeec:	fa23 f000 	lsr.w	r0, r3, r0
 801eef0:	3007      	adds	r0, #7
 801eef2:	08c0      	lsrs	r0, r0, #3
 801eef4:	4770      	bx	lr
 801eef6:	4608      	mov	r0, r1
 801eef8:	4770      	bx	lr
 801eefa:	bf00      	nop

0801eefc <ai_version_get>:
 801eefc:	0212      	lsls	r2, r2, #8
 801eefe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801ef02:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801ef06:	4770      	bx	lr

0801ef08 <get_tensor_byte_size>:
 801ef08:	b410      	push	{r4}
 801ef0a:	6983      	ldr	r3, [r0, #24]
 801ef0c:	68c4      	ldr	r4, [r0, #12]
 801ef0e:	6941      	ldr	r1, [r0, #20]
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	68e0      	ldr	r0, [r4, #12]
 801ef14:	4a06      	ldr	r2, [pc, #24]	@ (801ef30 <get_tensor_byte_size+0x28>)
 801ef16:	68c9      	ldr	r1, [r1, #12]
 801ef18:	bc10      	pop	{r4}
 801ef1a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801ef1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801ef22:	fb01 f000 	mul.w	r0, r1, r0
 801ef26:	4293      	cmp	r3, r2
 801ef28:	bf04      	itt	eq
 801ef2a:	3007      	addeq	r0, #7
 801ef2c:	08c0      	lsreq	r0, r0, #3
 801ef2e:	4770      	bx	lr
 801ef30:	000400c0 	.word	0x000400c0

0801ef34 <sbrk_aligned>:
 801ef34:	b570      	push	{r4, r5, r6, lr}
 801ef36:	4e0f      	ldr	r6, [pc, #60]	@ (801ef74 <sbrk_aligned+0x40>)
 801ef38:	460c      	mov	r4, r1
 801ef3a:	6831      	ldr	r1, [r6, #0]
 801ef3c:	4605      	mov	r5, r0
 801ef3e:	b911      	cbnz	r1, 801ef46 <sbrk_aligned+0x12>
 801ef40:	f000 f9fa 	bl	801f338 <_sbrk_r>
 801ef44:	6030      	str	r0, [r6, #0]
 801ef46:	4621      	mov	r1, r4
 801ef48:	4628      	mov	r0, r5
 801ef4a:	f000 f9f5 	bl	801f338 <_sbrk_r>
 801ef4e:	1c43      	adds	r3, r0, #1
 801ef50:	d103      	bne.n	801ef5a <sbrk_aligned+0x26>
 801ef52:	f04f 34ff 	mov.w	r4, #4294967295
 801ef56:	4620      	mov	r0, r4
 801ef58:	bd70      	pop	{r4, r5, r6, pc}
 801ef5a:	1cc4      	adds	r4, r0, #3
 801ef5c:	f024 0403 	bic.w	r4, r4, #3
 801ef60:	42a0      	cmp	r0, r4
 801ef62:	d0f8      	beq.n	801ef56 <sbrk_aligned+0x22>
 801ef64:	1a21      	subs	r1, r4, r0
 801ef66:	4628      	mov	r0, r5
 801ef68:	f000 f9e6 	bl	801f338 <_sbrk_r>
 801ef6c:	3001      	adds	r0, #1
 801ef6e:	d1f2      	bne.n	801ef56 <sbrk_aligned+0x22>
 801ef70:	e7ef      	b.n	801ef52 <sbrk_aligned+0x1e>
 801ef72:	bf00      	nop
 801ef74:	20001c80 	.word	0x20001c80

0801ef78 <_malloc_r>:
 801ef78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef7c:	1ccd      	adds	r5, r1, #3
 801ef7e:	f025 0503 	bic.w	r5, r5, #3
 801ef82:	3508      	adds	r5, #8
 801ef84:	2d0c      	cmp	r5, #12
 801ef86:	bf38      	it	cc
 801ef88:	250c      	movcc	r5, #12
 801ef8a:	2d00      	cmp	r5, #0
 801ef8c:	4606      	mov	r6, r0
 801ef8e:	db01      	blt.n	801ef94 <_malloc_r+0x1c>
 801ef90:	42a9      	cmp	r1, r5
 801ef92:	d904      	bls.n	801ef9e <_malloc_r+0x26>
 801ef94:	230c      	movs	r3, #12
 801ef96:	6033      	str	r3, [r6, #0]
 801ef98:	2000      	movs	r0, #0
 801ef9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f074 <_malloc_r+0xfc>
 801efa2:	f000 f869 	bl	801f078 <__malloc_lock>
 801efa6:	f8d8 3000 	ldr.w	r3, [r8]
 801efaa:	461c      	mov	r4, r3
 801efac:	bb44      	cbnz	r4, 801f000 <_malloc_r+0x88>
 801efae:	4629      	mov	r1, r5
 801efb0:	4630      	mov	r0, r6
 801efb2:	f7ff ffbf 	bl	801ef34 <sbrk_aligned>
 801efb6:	1c43      	adds	r3, r0, #1
 801efb8:	4604      	mov	r4, r0
 801efba:	d158      	bne.n	801f06e <_malloc_r+0xf6>
 801efbc:	f8d8 4000 	ldr.w	r4, [r8]
 801efc0:	4627      	mov	r7, r4
 801efc2:	2f00      	cmp	r7, #0
 801efc4:	d143      	bne.n	801f04e <_malloc_r+0xd6>
 801efc6:	2c00      	cmp	r4, #0
 801efc8:	d04b      	beq.n	801f062 <_malloc_r+0xea>
 801efca:	6823      	ldr	r3, [r4, #0]
 801efcc:	4639      	mov	r1, r7
 801efce:	4630      	mov	r0, r6
 801efd0:	eb04 0903 	add.w	r9, r4, r3
 801efd4:	f000 f9b0 	bl	801f338 <_sbrk_r>
 801efd8:	4581      	cmp	r9, r0
 801efda:	d142      	bne.n	801f062 <_malloc_r+0xea>
 801efdc:	6821      	ldr	r1, [r4, #0]
 801efde:	1a6d      	subs	r5, r5, r1
 801efe0:	4629      	mov	r1, r5
 801efe2:	4630      	mov	r0, r6
 801efe4:	f7ff ffa6 	bl	801ef34 <sbrk_aligned>
 801efe8:	3001      	adds	r0, #1
 801efea:	d03a      	beq.n	801f062 <_malloc_r+0xea>
 801efec:	6823      	ldr	r3, [r4, #0]
 801efee:	442b      	add	r3, r5
 801eff0:	6023      	str	r3, [r4, #0]
 801eff2:	f8d8 3000 	ldr.w	r3, [r8]
 801eff6:	685a      	ldr	r2, [r3, #4]
 801eff8:	bb62      	cbnz	r2, 801f054 <_malloc_r+0xdc>
 801effa:	f8c8 7000 	str.w	r7, [r8]
 801effe:	e00f      	b.n	801f020 <_malloc_r+0xa8>
 801f000:	6822      	ldr	r2, [r4, #0]
 801f002:	1b52      	subs	r2, r2, r5
 801f004:	d420      	bmi.n	801f048 <_malloc_r+0xd0>
 801f006:	2a0b      	cmp	r2, #11
 801f008:	d917      	bls.n	801f03a <_malloc_r+0xc2>
 801f00a:	1961      	adds	r1, r4, r5
 801f00c:	42a3      	cmp	r3, r4
 801f00e:	6025      	str	r5, [r4, #0]
 801f010:	bf18      	it	ne
 801f012:	6059      	strne	r1, [r3, #4]
 801f014:	6863      	ldr	r3, [r4, #4]
 801f016:	bf08      	it	eq
 801f018:	f8c8 1000 	streq.w	r1, [r8]
 801f01c:	5162      	str	r2, [r4, r5]
 801f01e:	604b      	str	r3, [r1, #4]
 801f020:	4630      	mov	r0, r6
 801f022:	f000 f82f 	bl	801f084 <__malloc_unlock>
 801f026:	f104 000b 	add.w	r0, r4, #11
 801f02a:	1d23      	adds	r3, r4, #4
 801f02c:	f020 0007 	bic.w	r0, r0, #7
 801f030:	1ac2      	subs	r2, r0, r3
 801f032:	bf1c      	itt	ne
 801f034:	1a1b      	subne	r3, r3, r0
 801f036:	50a3      	strne	r3, [r4, r2]
 801f038:	e7af      	b.n	801ef9a <_malloc_r+0x22>
 801f03a:	6862      	ldr	r2, [r4, #4]
 801f03c:	42a3      	cmp	r3, r4
 801f03e:	bf0c      	ite	eq
 801f040:	f8c8 2000 	streq.w	r2, [r8]
 801f044:	605a      	strne	r2, [r3, #4]
 801f046:	e7eb      	b.n	801f020 <_malloc_r+0xa8>
 801f048:	4623      	mov	r3, r4
 801f04a:	6864      	ldr	r4, [r4, #4]
 801f04c:	e7ae      	b.n	801efac <_malloc_r+0x34>
 801f04e:	463c      	mov	r4, r7
 801f050:	687f      	ldr	r7, [r7, #4]
 801f052:	e7b6      	b.n	801efc2 <_malloc_r+0x4a>
 801f054:	461a      	mov	r2, r3
 801f056:	685b      	ldr	r3, [r3, #4]
 801f058:	42a3      	cmp	r3, r4
 801f05a:	d1fb      	bne.n	801f054 <_malloc_r+0xdc>
 801f05c:	2300      	movs	r3, #0
 801f05e:	6053      	str	r3, [r2, #4]
 801f060:	e7de      	b.n	801f020 <_malloc_r+0xa8>
 801f062:	230c      	movs	r3, #12
 801f064:	6033      	str	r3, [r6, #0]
 801f066:	4630      	mov	r0, r6
 801f068:	f000 f80c 	bl	801f084 <__malloc_unlock>
 801f06c:	e794      	b.n	801ef98 <_malloc_r+0x20>
 801f06e:	6005      	str	r5, [r0, #0]
 801f070:	e7d6      	b.n	801f020 <_malloc_r+0xa8>
 801f072:	bf00      	nop
 801f074:	20001c84 	.word	0x20001c84

0801f078 <__malloc_lock>:
 801f078:	4801      	ldr	r0, [pc, #4]	@ (801f080 <__malloc_lock+0x8>)
 801f07a:	f000 b9aa 	b.w	801f3d2 <__retarget_lock_acquire_recursive>
 801f07e:	bf00      	nop
 801f080:	20001dc8 	.word	0x20001dc8

0801f084 <__malloc_unlock>:
 801f084:	4801      	ldr	r0, [pc, #4]	@ (801f08c <__malloc_unlock+0x8>)
 801f086:	f000 b9a5 	b.w	801f3d4 <__retarget_lock_release_recursive>
 801f08a:	bf00      	nop
 801f08c:	20001dc8 	.word	0x20001dc8

0801f090 <std>:
 801f090:	2300      	movs	r3, #0
 801f092:	b510      	push	{r4, lr}
 801f094:	4604      	mov	r4, r0
 801f096:	e9c0 3300 	strd	r3, r3, [r0]
 801f09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f09e:	6083      	str	r3, [r0, #8]
 801f0a0:	8181      	strh	r1, [r0, #12]
 801f0a2:	6643      	str	r3, [r0, #100]	@ 0x64
 801f0a4:	81c2      	strh	r2, [r0, #14]
 801f0a6:	6183      	str	r3, [r0, #24]
 801f0a8:	4619      	mov	r1, r3
 801f0aa:	2208      	movs	r2, #8
 801f0ac:	305c      	adds	r0, #92	@ 0x5c
 801f0ae:	f000 f906 	bl	801f2be <memset>
 801f0b2:	4b0d      	ldr	r3, [pc, #52]	@ (801f0e8 <std+0x58>)
 801f0b4:	6263      	str	r3, [r4, #36]	@ 0x24
 801f0b6:	4b0d      	ldr	r3, [pc, #52]	@ (801f0ec <std+0x5c>)
 801f0b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f0ba:	4b0d      	ldr	r3, [pc, #52]	@ (801f0f0 <std+0x60>)
 801f0bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f0be:	4b0d      	ldr	r3, [pc, #52]	@ (801f0f4 <std+0x64>)
 801f0c0:	6323      	str	r3, [r4, #48]	@ 0x30
 801f0c2:	4b0d      	ldr	r3, [pc, #52]	@ (801f0f8 <std+0x68>)
 801f0c4:	6224      	str	r4, [r4, #32]
 801f0c6:	429c      	cmp	r4, r3
 801f0c8:	d006      	beq.n	801f0d8 <std+0x48>
 801f0ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801f0ce:	4294      	cmp	r4, r2
 801f0d0:	d002      	beq.n	801f0d8 <std+0x48>
 801f0d2:	33d0      	adds	r3, #208	@ 0xd0
 801f0d4:	429c      	cmp	r4, r3
 801f0d6:	d105      	bne.n	801f0e4 <std+0x54>
 801f0d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801f0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0e0:	f000 b976 	b.w	801f3d0 <__retarget_lock_init_recursive>
 801f0e4:	bd10      	pop	{r4, pc}
 801f0e6:	bf00      	nop
 801f0e8:	0801f239 	.word	0x0801f239
 801f0ec:	0801f25b 	.word	0x0801f25b
 801f0f0:	0801f293 	.word	0x0801f293
 801f0f4:	0801f2b7 	.word	0x0801f2b7
 801f0f8:	20001c88 	.word	0x20001c88

0801f0fc <stdio_exit_handler>:
 801f0fc:	4a02      	ldr	r2, [pc, #8]	@ (801f108 <stdio_exit_handler+0xc>)
 801f0fe:	4903      	ldr	r1, [pc, #12]	@ (801f10c <stdio_exit_handler+0x10>)
 801f100:	4803      	ldr	r0, [pc, #12]	@ (801f110 <stdio_exit_handler+0x14>)
 801f102:	f000 b869 	b.w	801f1d8 <_fwalk_sglue>
 801f106:	bf00      	nop
 801f108:	2000063c 	.word	0x2000063c
 801f10c:	0801fb05 	.word	0x0801fb05
 801f110:	2000064c 	.word	0x2000064c

0801f114 <cleanup_stdio>:
 801f114:	6841      	ldr	r1, [r0, #4]
 801f116:	4b0c      	ldr	r3, [pc, #48]	@ (801f148 <cleanup_stdio+0x34>)
 801f118:	4299      	cmp	r1, r3
 801f11a:	b510      	push	{r4, lr}
 801f11c:	4604      	mov	r4, r0
 801f11e:	d001      	beq.n	801f124 <cleanup_stdio+0x10>
 801f120:	f000 fcf0 	bl	801fb04 <_fflush_r>
 801f124:	68a1      	ldr	r1, [r4, #8]
 801f126:	4b09      	ldr	r3, [pc, #36]	@ (801f14c <cleanup_stdio+0x38>)
 801f128:	4299      	cmp	r1, r3
 801f12a:	d002      	beq.n	801f132 <cleanup_stdio+0x1e>
 801f12c:	4620      	mov	r0, r4
 801f12e:	f000 fce9 	bl	801fb04 <_fflush_r>
 801f132:	68e1      	ldr	r1, [r4, #12]
 801f134:	4b06      	ldr	r3, [pc, #24]	@ (801f150 <cleanup_stdio+0x3c>)
 801f136:	4299      	cmp	r1, r3
 801f138:	d004      	beq.n	801f144 <cleanup_stdio+0x30>
 801f13a:	4620      	mov	r0, r4
 801f13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f140:	f000 bce0 	b.w	801fb04 <_fflush_r>
 801f144:	bd10      	pop	{r4, pc}
 801f146:	bf00      	nop
 801f148:	20001c88 	.word	0x20001c88
 801f14c:	20001cf0 	.word	0x20001cf0
 801f150:	20001d58 	.word	0x20001d58

0801f154 <global_stdio_init.part.0>:
 801f154:	b510      	push	{r4, lr}
 801f156:	4b0b      	ldr	r3, [pc, #44]	@ (801f184 <global_stdio_init.part.0+0x30>)
 801f158:	4c0b      	ldr	r4, [pc, #44]	@ (801f188 <global_stdio_init.part.0+0x34>)
 801f15a:	4a0c      	ldr	r2, [pc, #48]	@ (801f18c <global_stdio_init.part.0+0x38>)
 801f15c:	601a      	str	r2, [r3, #0]
 801f15e:	4620      	mov	r0, r4
 801f160:	2200      	movs	r2, #0
 801f162:	2104      	movs	r1, #4
 801f164:	f7ff ff94 	bl	801f090 <std>
 801f168:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801f16c:	2201      	movs	r2, #1
 801f16e:	2109      	movs	r1, #9
 801f170:	f7ff ff8e 	bl	801f090 <std>
 801f174:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801f178:	2202      	movs	r2, #2
 801f17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f17e:	2112      	movs	r1, #18
 801f180:	f7ff bf86 	b.w	801f090 <std>
 801f184:	20001dc0 	.word	0x20001dc0
 801f188:	20001c88 	.word	0x20001c88
 801f18c:	0801f0fd 	.word	0x0801f0fd

0801f190 <__sfp_lock_acquire>:
 801f190:	4801      	ldr	r0, [pc, #4]	@ (801f198 <__sfp_lock_acquire+0x8>)
 801f192:	f000 b91e 	b.w	801f3d2 <__retarget_lock_acquire_recursive>
 801f196:	bf00      	nop
 801f198:	20001dc9 	.word	0x20001dc9

0801f19c <__sfp_lock_release>:
 801f19c:	4801      	ldr	r0, [pc, #4]	@ (801f1a4 <__sfp_lock_release+0x8>)
 801f19e:	f000 b919 	b.w	801f3d4 <__retarget_lock_release_recursive>
 801f1a2:	bf00      	nop
 801f1a4:	20001dc9 	.word	0x20001dc9

0801f1a8 <__sinit>:
 801f1a8:	b510      	push	{r4, lr}
 801f1aa:	4604      	mov	r4, r0
 801f1ac:	f7ff fff0 	bl	801f190 <__sfp_lock_acquire>
 801f1b0:	6a23      	ldr	r3, [r4, #32]
 801f1b2:	b11b      	cbz	r3, 801f1bc <__sinit+0x14>
 801f1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1b8:	f7ff bff0 	b.w	801f19c <__sfp_lock_release>
 801f1bc:	4b04      	ldr	r3, [pc, #16]	@ (801f1d0 <__sinit+0x28>)
 801f1be:	6223      	str	r3, [r4, #32]
 801f1c0:	4b04      	ldr	r3, [pc, #16]	@ (801f1d4 <__sinit+0x2c>)
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d1f5      	bne.n	801f1b4 <__sinit+0xc>
 801f1c8:	f7ff ffc4 	bl	801f154 <global_stdio_init.part.0>
 801f1cc:	e7f2      	b.n	801f1b4 <__sinit+0xc>
 801f1ce:	bf00      	nop
 801f1d0:	0801f115 	.word	0x0801f115
 801f1d4:	20001dc0 	.word	0x20001dc0

0801f1d8 <_fwalk_sglue>:
 801f1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1dc:	4607      	mov	r7, r0
 801f1de:	4688      	mov	r8, r1
 801f1e0:	4614      	mov	r4, r2
 801f1e2:	2600      	movs	r6, #0
 801f1e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f1e8:	f1b9 0901 	subs.w	r9, r9, #1
 801f1ec:	d505      	bpl.n	801f1fa <_fwalk_sglue+0x22>
 801f1ee:	6824      	ldr	r4, [r4, #0]
 801f1f0:	2c00      	cmp	r4, #0
 801f1f2:	d1f7      	bne.n	801f1e4 <_fwalk_sglue+0xc>
 801f1f4:	4630      	mov	r0, r6
 801f1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1fa:	89ab      	ldrh	r3, [r5, #12]
 801f1fc:	2b01      	cmp	r3, #1
 801f1fe:	d907      	bls.n	801f210 <_fwalk_sglue+0x38>
 801f200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f204:	3301      	adds	r3, #1
 801f206:	d003      	beq.n	801f210 <_fwalk_sglue+0x38>
 801f208:	4629      	mov	r1, r5
 801f20a:	4638      	mov	r0, r7
 801f20c:	47c0      	blx	r8
 801f20e:	4306      	orrs	r6, r0
 801f210:	3568      	adds	r5, #104	@ 0x68
 801f212:	e7e9      	b.n	801f1e8 <_fwalk_sglue+0x10>

0801f214 <iprintf>:
 801f214:	b40f      	push	{r0, r1, r2, r3}
 801f216:	b507      	push	{r0, r1, r2, lr}
 801f218:	4906      	ldr	r1, [pc, #24]	@ (801f234 <iprintf+0x20>)
 801f21a:	ab04      	add	r3, sp, #16
 801f21c:	6808      	ldr	r0, [r1, #0]
 801f21e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f222:	6881      	ldr	r1, [r0, #8]
 801f224:	9301      	str	r3, [sp, #4]
 801f226:	f000 f949 	bl	801f4bc <_vfiprintf_r>
 801f22a:	b003      	add	sp, #12
 801f22c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f230:	b004      	add	sp, #16
 801f232:	4770      	bx	lr
 801f234:	20000648 	.word	0x20000648

0801f238 <__sread>:
 801f238:	b510      	push	{r4, lr}
 801f23a:	460c      	mov	r4, r1
 801f23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f240:	f000 f868 	bl	801f314 <_read_r>
 801f244:	2800      	cmp	r0, #0
 801f246:	bfab      	itete	ge
 801f248:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801f24a:	89a3      	ldrhlt	r3, [r4, #12]
 801f24c:	181b      	addge	r3, r3, r0
 801f24e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801f252:	bfac      	ite	ge
 801f254:	6563      	strge	r3, [r4, #84]	@ 0x54
 801f256:	81a3      	strhlt	r3, [r4, #12]
 801f258:	bd10      	pop	{r4, pc}

0801f25a <__swrite>:
 801f25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f25e:	461f      	mov	r7, r3
 801f260:	898b      	ldrh	r3, [r1, #12]
 801f262:	05db      	lsls	r3, r3, #23
 801f264:	4605      	mov	r5, r0
 801f266:	460c      	mov	r4, r1
 801f268:	4616      	mov	r6, r2
 801f26a:	d505      	bpl.n	801f278 <__swrite+0x1e>
 801f26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f270:	2302      	movs	r3, #2
 801f272:	2200      	movs	r2, #0
 801f274:	f000 f83c 	bl	801f2f0 <_lseek_r>
 801f278:	89a3      	ldrh	r3, [r4, #12]
 801f27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f27e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801f282:	81a3      	strh	r3, [r4, #12]
 801f284:	4632      	mov	r2, r6
 801f286:	463b      	mov	r3, r7
 801f288:	4628      	mov	r0, r5
 801f28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f28e:	f000 b863 	b.w	801f358 <_write_r>

0801f292 <__sseek>:
 801f292:	b510      	push	{r4, lr}
 801f294:	460c      	mov	r4, r1
 801f296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f29a:	f000 f829 	bl	801f2f0 <_lseek_r>
 801f29e:	1c43      	adds	r3, r0, #1
 801f2a0:	89a3      	ldrh	r3, [r4, #12]
 801f2a2:	bf15      	itete	ne
 801f2a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801f2a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801f2aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801f2ae:	81a3      	strheq	r3, [r4, #12]
 801f2b0:	bf18      	it	ne
 801f2b2:	81a3      	strhne	r3, [r4, #12]
 801f2b4:	bd10      	pop	{r4, pc}

0801f2b6 <__sclose>:
 801f2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2ba:	f000 b809 	b.w	801f2d0 <_close_r>

0801f2be <memset>:
 801f2be:	4402      	add	r2, r0
 801f2c0:	4603      	mov	r3, r0
 801f2c2:	4293      	cmp	r3, r2
 801f2c4:	d100      	bne.n	801f2c8 <memset+0xa>
 801f2c6:	4770      	bx	lr
 801f2c8:	f803 1b01 	strb.w	r1, [r3], #1
 801f2cc:	e7f9      	b.n	801f2c2 <memset+0x4>
	...

0801f2d0 <_close_r>:
 801f2d0:	b538      	push	{r3, r4, r5, lr}
 801f2d2:	4d06      	ldr	r5, [pc, #24]	@ (801f2ec <_close_r+0x1c>)
 801f2d4:	2300      	movs	r3, #0
 801f2d6:	4604      	mov	r4, r0
 801f2d8:	4608      	mov	r0, r1
 801f2da:	602b      	str	r3, [r5, #0]
 801f2dc:	f7e2 fa41 	bl	8001762 <_close>
 801f2e0:	1c43      	adds	r3, r0, #1
 801f2e2:	d102      	bne.n	801f2ea <_close_r+0x1a>
 801f2e4:	682b      	ldr	r3, [r5, #0]
 801f2e6:	b103      	cbz	r3, 801f2ea <_close_r+0x1a>
 801f2e8:	6023      	str	r3, [r4, #0]
 801f2ea:	bd38      	pop	{r3, r4, r5, pc}
 801f2ec:	20001dc4 	.word	0x20001dc4

0801f2f0 <_lseek_r>:
 801f2f0:	b538      	push	{r3, r4, r5, lr}
 801f2f2:	4d07      	ldr	r5, [pc, #28]	@ (801f310 <_lseek_r+0x20>)
 801f2f4:	4604      	mov	r4, r0
 801f2f6:	4608      	mov	r0, r1
 801f2f8:	4611      	mov	r1, r2
 801f2fa:	2200      	movs	r2, #0
 801f2fc:	602a      	str	r2, [r5, #0]
 801f2fe:	461a      	mov	r2, r3
 801f300:	f7e2 fa53 	bl	80017aa <_lseek>
 801f304:	1c43      	adds	r3, r0, #1
 801f306:	d102      	bne.n	801f30e <_lseek_r+0x1e>
 801f308:	682b      	ldr	r3, [r5, #0]
 801f30a:	b103      	cbz	r3, 801f30e <_lseek_r+0x1e>
 801f30c:	6023      	str	r3, [r4, #0]
 801f30e:	bd38      	pop	{r3, r4, r5, pc}
 801f310:	20001dc4 	.word	0x20001dc4

0801f314 <_read_r>:
 801f314:	b538      	push	{r3, r4, r5, lr}
 801f316:	4d07      	ldr	r5, [pc, #28]	@ (801f334 <_read_r+0x20>)
 801f318:	4604      	mov	r4, r0
 801f31a:	4608      	mov	r0, r1
 801f31c:	4611      	mov	r1, r2
 801f31e:	2200      	movs	r2, #0
 801f320:	602a      	str	r2, [r5, #0]
 801f322:	461a      	mov	r2, r3
 801f324:	f7e2 f9e4 	bl	80016f0 <_read>
 801f328:	1c43      	adds	r3, r0, #1
 801f32a:	d102      	bne.n	801f332 <_read_r+0x1e>
 801f32c:	682b      	ldr	r3, [r5, #0]
 801f32e:	b103      	cbz	r3, 801f332 <_read_r+0x1e>
 801f330:	6023      	str	r3, [r4, #0]
 801f332:	bd38      	pop	{r3, r4, r5, pc}
 801f334:	20001dc4 	.word	0x20001dc4

0801f338 <_sbrk_r>:
 801f338:	b538      	push	{r3, r4, r5, lr}
 801f33a:	4d06      	ldr	r5, [pc, #24]	@ (801f354 <_sbrk_r+0x1c>)
 801f33c:	2300      	movs	r3, #0
 801f33e:	4604      	mov	r4, r0
 801f340:	4608      	mov	r0, r1
 801f342:	602b      	str	r3, [r5, #0]
 801f344:	f7e2 fa3e 	bl	80017c4 <_sbrk>
 801f348:	1c43      	adds	r3, r0, #1
 801f34a:	d102      	bne.n	801f352 <_sbrk_r+0x1a>
 801f34c:	682b      	ldr	r3, [r5, #0]
 801f34e:	b103      	cbz	r3, 801f352 <_sbrk_r+0x1a>
 801f350:	6023      	str	r3, [r4, #0]
 801f352:	bd38      	pop	{r3, r4, r5, pc}
 801f354:	20001dc4 	.word	0x20001dc4

0801f358 <_write_r>:
 801f358:	b538      	push	{r3, r4, r5, lr}
 801f35a:	4d07      	ldr	r5, [pc, #28]	@ (801f378 <_write_r+0x20>)
 801f35c:	4604      	mov	r4, r0
 801f35e:	4608      	mov	r0, r1
 801f360:	4611      	mov	r1, r2
 801f362:	2200      	movs	r2, #0
 801f364:	602a      	str	r2, [r5, #0]
 801f366:	461a      	mov	r2, r3
 801f368:	f7e2 f9df 	bl	800172a <_write>
 801f36c:	1c43      	adds	r3, r0, #1
 801f36e:	d102      	bne.n	801f376 <_write_r+0x1e>
 801f370:	682b      	ldr	r3, [r5, #0]
 801f372:	b103      	cbz	r3, 801f376 <_write_r+0x1e>
 801f374:	6023      	str	r3, [r4, #0]
 801f376:	bd38      	pop	{r3, r4, r5, pc}
 801f378:	20001dc4 	.word	0x20001dc4

0801f37c <__errno>:
 801f37c:	4b01      	ldr	r3, [pc, #4]	@ (801f384 <__errno+0x8>)
 801f37e:	6818      	ldr	r0, [r3, #0]
 801f380:	4770      	bx	lr
 801f382:	bf00      	nop
 801f384:	20000648 	.word	0x20000648

0801f388 <__libc_init_array>:
 801f388:	b570      	push	{r4, r5, r6, lr}
 801f38a:	4d0d      	ldr	r5, [pc, #52]	@ (801f3c0 <__libc_init_array+0x38>)
 801f38c:	4c0d      	ldr	r4, [pc, #52]	@ (801f3c4 <__libc_init_array+0x3c>)
 801f38e:	1b64      	subs	r4, r4, r5
 801f390:	10a4      	asrs	r4, r4, #2
 801f392:	2600      	movs	r6, #0
 801f394:	42a6      	cmp	r6, r4
 801f396:	d109      	bne.n	801f3ac <__libc_init_array+0x24>
 801f398:	4d0b      	ldr	r5, [pc, #44]	@ (801f3c8 <__libc_init_array+0x40>)
 801f39a:	4c0c      	ldr	r4, [pc, #48]	@ (801f3cc <__libc_init_array+0x44>)
 801f39c:	f000 feb8 	bl	8020110 <_init>
 801f3a0:	1b64      	subs	r4, r4, r5
 801f3a2:	10a4      	asrs	r4, r4, #2
 801f3a4:	2600      	movs	r6, #0
 801f3a6:	42a6      	cmp	r6, r4
 801f3a8:	d105      	bne.n	801f3b6 <__libc_init_array+0x2e>
 801f3aa:	bd70      	pop	{r4, r5, r6, pc}
 801f3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 801f3b0:	4798      	blx	r3
 801f3b2:	3601      	adds	r6, #1
 801f3b4:	e7ee      	b.n	801f394 <__libc_init_array+0xc>
 801f3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 801f3ba:	4798      	blx	r3
 801f3bc:	3601      	adds	r6, #1
 801f3be:	e7f2      	b.n	801f3a6 <__libc_init_array+0x1e>
 801f3c0:	08020e20 	.word	0x08020e20
 801f3c4:	08020e20 	.word	0x08020e20
 801f3c8:	08020e20 	.word	0x08020e20
 801f3cc:	08020e24 	.word	0x08020e24

0801f3d0 <__retarget_lock_init_recursive>:
 801f3d0:	4770      	bx	lr

0801f3d2 <__retarget_lock_acquire_recursive>:
 801f3d2:	4770      	bx	lr

0801f3d4 <__retarget_lock_release_recursive>:
 801f3d4:	4770      	bx	lr
	...

0801f3d8 <_free_r>:
 801f3d8:	b538      	push	{r3, r4, r5, lr}
 801f3da:	4605      	mov	r5, r0
 801f3dc:	2900      	cmp	r1, #0
 801f3de:	d041      	beq.n	801f464 <_free_r+0x8c>
 801f3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3e4:	1f0c      	subs	r4, r1, #4
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	bfb8      	it	lt
 801f3ea:	18e4      	addlt	r4, r4, r3
 801f3ec:	f7ff fe44 	bl	801f078 <__malloc_lock>
 801f3f0:	4a1d      	ldr	r2, [pc, #116]	@ (801f468 <_free_r+0x90>)
 801f3f2:	6813      	ldr	r3, [r2, #0]
 801f3f4:	b933      	cbnz	r3, 801f404 <_free_r+0x2c>
 801f3f6:	6063      	str	r3, [r4, #4]
 801f3f8:	6014      	str	r4, [r2, #0]
 801f3fa:	4628      	mov	r0, r5
 801f3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f400:	f7ff be40 	b.w	801f084 <__malloc_unlock>
 801f404:	42a3      	cmp	r3, r4
 801f406:	d908      	bls.n	801f41a <_free_r+0x42>
 801f408:	6820      	ldr	r0, [r4, #0]
 801f40a:	1821      	adds	r1, r4, r0
 801f40c:	428b      	cmp	r3, r1
 801f40e:	bf01      	itttt	eq
 801f410:	6819      	ldreq	r1, [r3, #0]
 801f412:	685b      	ldreq	r3, [r3, #4]
 801f414:	1809      	addeq	r1, r1, r0
 801f416:	6021      	streq	r1, [r4, #0]
 801f418:	e7ed      	b.n	801f3f6 <_free_r+0x1e>
 801f41a:	461a      	mov	r2, r3
 801f41c:	685b      	ldr	r3, [r3, #4]
 801f41e:	b10b      	cbz	r3, 801f424 <_free_r+0x4c>
 801f420:	42a3      	cmp	r3, r4
 801f422:	d9fa      	bls.n	801f41a <_free_r+0x42>
 801f424:	6811      	ldr	r1, [r2, #0]
 801f426:	1850      	adds	r0, r2, r1
 801f428:	42a0      	cmp	r0, r4
 801f42a:	d10b      	bne.n	801f444 <_free_r+0x6c>
 801f42c:	6820      	ldr	r0, [r4, #0]
 801f42e:	4401      	add	r1, r0
 801f430:	1850      	adds	r0, r2, r1
 801f432:	4283      	cmp	r3, r0
 801f434:	6011      	str	r1, [r2, #0]
 801f436:	d1e0      	bne.n	801f3fa <_free_r+0x22>
 801f438:	6818      	ldr	r0, [r3, #0]
 801f43a:	685b      	ldr	r3, [r3, #4]
 801f43c:	6053      	str	r3, [r2, #4]
 801f43e:	4408      	add	r0, r1
 801f440:	6010      	str	r0, [r2, #0]
 801f442:	e7da      	b.n	801f3fa <_free_r+0x22>
 801f444:	d902      	bls.n	801f44c <_free_r+0x74>
 801f446:	230c      	movs	r3, #12
 801f448:	602b      	str	r3, [r5, #0]
 801f44a:	e7d6      	b.n	801f3fa <_free_r+0x22>
 801f44c:	6820      	ldr	r0, [r4, #0]
 801f44e:	1821      	adds	r1, r4, r0
 801f450:	428b      	cmp	r3, r1
 801f452:	bf04      	itt	eq
 801f454:	6819      	ldreq	r1, [r3, #0]
 801f456:	685b      	ldreq	r3, [r3, #4]
 801f458:	6063      	str	r3, [r4, #4]
 801f45a:	bf04      	itt	eq
 801f45c:	1809      	addeq	r1, r1, r0
 801f45e:	6021      	streq	r1, [r4, #0]
 801f460:	6054      	str	r4, [r2, #4]
 801f462:	e7ca      	b.n	801f3fa <_free_r+0x22>
 801f464:	bd38      	pop	{r3, r4, r5, pc}
 801f466:	bf00      	nop
 801f468:	20001c84 	.word	0x20001c84

0801f46c <__sfputc_r>:
 801f46c:	6893      	ldr	r3, [r2, #8]
 801f46e:	3b01      	subs	r3, #1
 801f470:	2b00      	cmp	r3, #0
 801f472:	b410      	push	{r4}
 801f474:	6093      	str	r3, [r2, #8]
 801f476:	da07      	bge.n	801f488 <__sfputc_r+0x1c>
 801f478:	6994      	ldr	r4, [r2, #24]
 801f47a:	42a3      	cmp	r3, r4
 801f47c:	db01      	blt.n	801f482 <__sfputc_r+0x16>
 801f47e:	290a      	cmp	r1, #10
 801f480:	d102      	bne.n	801f488 <__sfputc_r+0x1c>
 801f482:	bc10      	pop	{r4}
 801f484:	f000 bb66 	b.w	801fb54 <__swbuf_r>
 801f488:	6813      	ldr	r3, [r2, #0]
 801f48a:	1c58      	adds	r0, r3, #1
 801f48c:	6010      	str	r0, [r2, #0]
 801f48e:	7019      	strb	r1, [r3, #0]
 801f490:	4608      	mov	r0, r1
 801f492:	bc10      	pop	{r4}
 801f494:	4770      	bx	lr

0801f496 <__sfputs_r>:
 801f496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f498:	4606      	mov	r6, r0
 801f49a:	460f      	mov	r7, r1
 801f49c:	4614      	mov	r4, r2
 801f49e:	18d5      	adds	r5, r2, r3
 801f4a0:	42ac      	cmp	r4, r5
 801f4a2:	d101      	bne.n	801f4a8 <__sfputs_r+0x12>
 801f4a4:	2000      	movs	r0, #0
 801f4a6:	e007      	b.n	801f4b8 <__sfputs_r+0x22>
 801f4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f4ac:	463a      	mov	r2, r7
 801f4ae:	4630      	mov	r0, r6
 801f4b0:	f7ff ffdc 	bl	801f46c <__sfputc_r>
 801f4b4:	1c43      	adds	r3, r0, #1
 801f4b6:	d1f3      	bne.n	801f4a0 <__sfputs_r+0xa>
 801f4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f4bc <_vfiprintf_r>:
 801f4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4c0:	460d      	mov	r5, r1
 801f4c2:	b09d      	sub	sp, #116	@ 0x74
 801f4c4:	4614      	mov	r4, r2
 801f4c6:	4698      	mov	r8, r3
 801f4c8:	4606      	mov	r6, r0
 801f4ca:	b118      	cbz	r0, 801f4d4 <_vfiprintf_r+0x18>
 801f4cc:	6a03      	ldr	r3, [r0, #32]
 801f4ce:	b90b      	cbnz	r3, 801f4d4 <_vfiprintf_r+0x18>
 801f4d0:	f7ff fe6a 	bl	801f1a8 <__sinit>
 801f4d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f4d6:	07d9      	lsls	r1, r3, #31
 801f4d8:	d405      	bmi.n	801f4e6 <_vfiprintf_r+0x2a>
 801f4da:	89ab      	ldrh	r3, [r5, #12]
 801f4dc:	059a      	lsls	r2, r3, #22
 801f4de:	d402      	bmi.n	801f4e6 <_vfiprintf_r+0x2a>
 801f4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f4e2:	f7ff ff76 	bl	801f3d2 <__retarget_lock_acquire_recursive>
 801f4e6:	89ab      	ldrh	r3, [r5, #12]
 801f4e8:	071b      	lsls	r3, r3, #28
 801f4ea:	d501      	bpl.n	801f4f0 <_vfiprintf_r+0x34>
 801f4ec:	692b      	ldr	r3, [r5, #16]
 801f4ee:	b99b      	cbnz	r3, 801f518 <_vfiprintf_r+0x5c>
 801f4f0:	4629      	mov	r1, r5
 801f4f2:	4630      	mov	r0, r6
 801f4f4:	f000 fb6c 	bl	801fbd0 <__swsetup_r>
 801f4f8:	b170      	cbz	r0, 801f518 <_vfiprintf_r+0x5c>
 801f4fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f4fc:	07dc      	lsls	r4, r3, #31
 801f4fe:	d504      	bpl.n	801f50a <_vfiprintf_r+0x4e>
 801f500:	f04f 30ff 	mov.w	r0, #4294967295
 801f504:	b01d      	add	sp, #116	@ 0x74
 801f506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f50a:	89ab      	ldrh	r3, [r5, #12]
 801f50c:	0598      	lsls	r0, r3, #22
 801f50e:	d4f7      	bmi.n	801f500 <_vfiprintf_r+0x44>
 801f510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f512:	f7ff ff5f 	bl	801f3d4 <__retarget_lock_release_recursive>
 801f516:	e7f3      	b.n	801f500 <_vfiprintf_r+0x44>
 801f518:	2300      	movs	r3, #0
 801f51a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f51c:	2320      	movs	r3, #32
 801f51e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f522:	f8cd 800c 	str.w	r8, [sp, #12]
 801f526:	2330      	movs	r3, #48	@ 0x30
 801f528:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f6d8 <_vfiprintf_r+0x21c>
 801f52c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f530:	f04f 0901 	mov.w	r9, #1
 801f534:	4623      	mov	r3, r4
 801f536:	469a      	mov	sl, r3
 801f538:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f53c:	b10a      	cbz	r2, 801f542 <_vfiprintf_r+0x86>
 801f53e:	2a25      	cmp	r2, #37	@ 0x25
 801f540:	d1f9      	bne.n	801f536 <_vfiprintf_r+0x7a>
 801f542:	ebba 0b04 	subs.w	fp, sl, r4
 801f546:	d00b      	beq.n	801f560 <_vfiprintf_r+0xa4>
 801f548:	465b      	mov	r3, fp
 801f54a:	4622      	mov	r2, r4
 801f54c:	4629      	mov	r1, r5
 801f54e:	4630      	mov	r0, r6
 801f550:	f7ff ffa1 	bl	801f496 <__sfputs_r>
 801f554:	3001      	adds	r0, #1
 801f556:	f000 80a7 	beq.w	801f6a8 <_vfiprintf_r+0x1ec>
 801f55a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f55c:	445a      	add	r2, fp
 801f55e:	9209      	str	r2, [sp, #36]	@ 0x24
 801f560:	f89a 3000 	ldrb.w	r3, [sl]
 801f564:	2b00      	cmp	r3, #0
 801f566:	f000 809f 	beq.w	801f6a8 <_vfiprintf_r+0x1ec>
 801f56a:	2300      	movs	r3, #0
 801f56c:	f04f 32ff 	mov.w	r2, #4294967295
 801f570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f574:	f10a 0a01 	add.w	sl, sl, #1
 801f578:	9304      	str	r3, [sp, #16]
 801f57a:	9307      	str	r3, [sp, #28]
 801f57c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f580:	931a      	str	r3, [sp, #104]	@ 0x68
 801f582:	4654      	mov	r4, sl
 801f584:	2205      	movs	r2, #5
 801f586:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f58a:	4853      	ldr	r0, [pc, #332]	@ (801f6d8 <_vfiprintf_r+0x21c>)
 801f58c:	f7e0 fe00 	bl	8000190 <memchr>
 801f590:	9a04      	ldr	r2, [sp, #16]
 801f592:	b9d8      	cbnz	r0, 801f5cc <_vfiprintf_r+0x110>
 801f594:	06d1      	lsls	r1, r2, #27
 801f596:	bf44      	itt	mi
 801f598:	2320      	movmi	r3, #32
 801f59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f59e:	0713      	lsls	r3, r2, #28
 801f5a0:	bf44      	itt	mi
 801f5a2:	232b      	movmi	r3, #43	@ 0x2b
 801f5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f5a8:	f89a 3000 	ldrb.w	r3, [sl]
 801f5ac:	2b2a      	cmp	r3, #42	@ 0x2a
 801f5ae:	d015      	beq.n	801f5dc <_vfiprintf_r+0x120>
 801f5b0:	9a07      	ldr	r2, [sp, #28]
 801f5b2:	4654      	mov	r4, sl
 801f5b4:	2000      	movs	r0, #0
 801f5b6:	f04f 0c0a 	mov.w	ip, #10
 801f5ba:	4621      	mov	r1, r4
 801f5bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f5c0:	3b30      	subs	r3, #48	@ 0x30
 801f5c2:	2b09      	cmp	r3, #9
 801f5c4:	d94b      	bls.n	801f65e <_vfiprintf_r+0x1a2>
 801f5c6:	b1b0      	cbz	r0, 801f5f6 <_vfiprintf_r+0x13a>
 801f5c8:	9207      	str	r2, [sp, #28]
 801f5ca:	e014      	b.n	801f5f6 <_vfiprintf_r+0x13a>
 801f5cc:	eba0 0308 	sub.w	r3, r0, r8
 801f5d0:	fa09 f303 	lsl.w	r3, r9, r3
 801f5d4:	4313      	orrs	r3, r2
 801f5d6:	9304      	str	r3, [sp, #16]
 801f5d8:	46a2      	mov	sl, r4
 801f5da:	e7d2      	b.n	801f582 <_vfiprintf_r+0xc6>
 801f5dc:	9b03      	ldr	r3, [sp, #12]
 801f5de:	1d19      	adds	r1, r3, #4
 801f5e0:	681b      	ldr	r3, [r3, #0]
 801f5e2:	9103      	str	r1, [sp, #12]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	bfbb      	ittet	lt
 801f5e8:	425b      	neglt	r3, r3
 801f5ea:	f042 0202 	orrlt.w	r2, r2, #2
 801f5ee:	9307      	strge	r3, [sp, #28]
 801f5f0:	9307      	strlt	r3, [sp, #28]
 801f5f2:	bfb8      	it	lt
 801f5f4:	9204      	strlt	r2, [sp, #16]
 801f5f6:	7823      	ldrb	r3, [r4, #0]
 801f5f8:	2b2e      	cmp	r3, #46	@ 0x2e
 801f5fa:	d10a      	bne.n	801f612 <_vfiprintf_r+0x156>
 801f5fc:	7863      	ldrb	r3, [r4, #1]
 801f5fe:	2b2a      	cmp	r3, #42	@ 0x2a
 801f600:	d132      	bne.n	801f668 <_vfiprintf_r+0x1ac>
 801f602:	9b03      	ldr	r3, [sp, #12]
 801f604:	1d1a      	adds	r2, r3, #4
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	9203      	str	r2, [sp, #12]
 801f60a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f60e:	3402      	adds	r4, #2
 801f610:	9305      	str	r3, [sp, #20]
 801f612:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801f6dc <_vfiprintf_r+0x220>
 801f616:	7821      	ldrb	r1, [r4, #0]
 801f618:	2203      	movs	r2, #3
 801f61a:	4650      	mov	r0, sl
 801f61c:	f7e0 fdb8 	bl	8000190 <memchr>
 801f620:	b138      	cbz	r0, 801f632 <_vfiprintf_r+0x176>
 801f622:	9b04      	ldr	r3, [sp, #16]
 801f624:	eba0 000a 	sub.w	r0, r0, sl
 801f628:	2240      	movs	r2, #64	@ 0x40
 801f62a:	4082      	lsls	r2, r0
 801f62c:	4313      	orrs	r3, r2
 801f62e:	3401      	adds	r4, #1
 801f630:	9304      	str	r3, [sp, #16]
 801f632:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f636:	482a      	ldr	r0, [pc, #168]	@ (801f6e0 <_vfiprintf_r+0x224>)
 801f638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f63c:	2206      	movs	r2, #6
 801f63e:	f7e0 fda7 	bl	8000190 <memchr>
 801f642:	2800      	cmp	r0, #0
 801f644:	d03f      	beq.n	801f6c6 <_vfiprintf_r+0x20a>
 801f646:	4b27      	ldr	r3, [pc, #156]	@ (801f6e4 <_vfiprintf_r+0x228>)
 801f648:	bb1b      	cbnz	r3, 801f692 <_vfiprintf_r+0x1d6>
 801f64a:	9b03      	ldr	r3, [sp, #12]
 801f64c:	3307      	adds	r3, #7
 801f64e:	f023 0307 	bic.w	r3, r3, #7
 801f652:	3308      	adds	r3, #8
 801f654:	9303      	str	r3, [sp, #12]
 801f656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f658:	443b      	add	r3, r7
 801f65a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f65c:	e76a      	b.n	801f534 <_vfiprintf_r+0x78>
 801f65e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f662:	460c      	mov	r4, r1
 801f664:	2001      	movs	r0, #1
 801f666:	e7a8      	b.n	801f5ba <_vfiprintf_r+0xfe>
 801f668:	2300      	movs	r3, #0
 801f66a:	3401      	adds	r4, #1
 801f66c:	9305      	str	r3, [sp, #20]
 801f66e:	4619      	mov	r1, r3
 801f670:	f04f 0c0a 	mov.w	ip, #10
 801f674:	4620      	mov	r0, r4
 801f676:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f67a:	3a30      	subs	r2, #48	@ 0x30
 801f67c:	2a09      	cmp	r2, #9
 801f67e:	d903      	bls.n	801f688 <_vfiprintf_r+0x1cc>
 801f680:	2b00      	cmp	r3, #0
 801f682:	d0c6      	beq.n	801f612 <_vfiprintf_r+0x156>
 801f684:	9105      	str	r1, [sp, #20]
 801f686:	e7c4      	b.n	801f612 <_vfiprintf_r+0x156>
 801f688:	fb0c 2101 	mla	r1, ip, r1, r2
 801f68c:	4604      	mov	r4, r0
 801f68e:	2301      	movs	r3, #1
 801f690:	e7f0      	b.n	801f674 <_vfiprintf_r+0x1b8>
 801f692:	ab03      	add	r3, sp, #12
 801f694:	9300      	str	r3, [sp, #0]
 801f696:	462a      	mov	r2, r5
 801f698:	4b13      	ldr	r3, [pc, #76]	@ (801f6e8 <_vfiprintf_r+0x22c>)
 801f69a:	a904      	add	r1, sp, #16
 801f69c:	4630      	mov	r0, r6
 801f69e:	f3af 8000 	nop.w
 801f6a2:	4607      	mov	r7, r0
 801f6a4:	1c78      	adds	r0, r7, #1
 801f6a6:	d1d6      	bne.n	801f656 <_vfiprintf_r+0x19a>
 801f6a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f6aa:	07d9      	lsls	r1, r3, #31
 801f6ac:	d405      	bmi.n	801f6ba <_vfiprintf_r+0x1fe>
 801f6ae:	89ab      	ldrh	r3, [r5, #12]
 801f6b0:	059a      	lsls	r2, r3, #22
 801f6b2:	d402      	bmi.n	801f6ba <_vfiprintf_r+0x1fe>
 801f6b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f6b6:	f7ff fe8d 	bl	801f3d4 <__retarget_lock_release_recursive>
 801f6ba:	89ab      	ldrh	r3, [r5, #12]
 801f6bc:	065b      	lsls	r3, r3, #25
 801f6be:	f53f af1f 	bmi.w	801f500 <_vfiprintf_r+0x44>
 801f6c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6c4:	e71e      	b.n	801f504 <_vfiprintf_r+0x48>
 801f6c6:	ab03      	add	r3, sp, #12
 801f6c8:	9300      	str	r3, [sp, #0]
 801f6ca:	462a      	mov	r2, r5
 801f6cc:	4b06      	ldr	r3, [pc, #24]	@ (801f6e8 <_vfiprintf_r+0x22c>)
 801f6ce:	a904      	add	r1, sp, #16
 801f6d0:	4630      	mov	r0, r6
 801f6d2:	f000 f879 	bl	801f7c8 <_printf_i>
 801f6d6:	e7e4      	b.n	801f6a2 <_vfiprintf_r+0x1e6>
 801f6d8:	08020dc8 	.word	0x08020dc8
 801f6dc:	08020dce 	.word	0x08020dce
 801f6e0:	08020dd2 	.word	0x08020dd2
 801f6e4:	00000000 	.word	0x00000000
 801f6e8:	0801f497 	.word	0x0801f497

0801f6ec <_printf_common>:
 801f6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6f0:	4616      	mov	r6, r2
 801f6f2:	4698      	mov	r8, r3
 801f6f4:	688a      	ldr	r2, [r1, #8]
 801f6f6:	690b      	ldr	r3, [r1, #16]
 801f6f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f6fc:	4293      	cmp	r3, r2
 801f6fe:	bfb8      	it	lt
 801f700:	4613      	movlt	r3, r2
 801f702:	6033      	str	r3, [r6, #0]
 801f704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801f708:	4607      	mov	r7, r0
 801f70a:	460c      	mov	r4, r1
 801f70c:	b10a      	cbz	r2, 801f712 <_printf_common+0x26>
 801f70e:	3301      	adds	r3, #1
 801f710:	6033      	str	r3, [r6, #0]
 801f712:	6823      	ldr	r3, [r4, #0]
 801f714:	0699      	lsls	r1, r3, #26
 801f716:	bf42      	ittt	mi
 801f718:	6833      	ldrmi	r3, [r6, #0]
 801f71a:	3302      	addmi	r3, #2
 801f71c:	6033      	strmi	r3, [r6, #0]
 801f71e:	6825      	ldr	r5, [r4, #0]
 801f720:	f015 0506 	ands.w	r5, r5, #6
 801f724:	d106      	bne.n	801f734 <_printf_common+0x48>
 801f726:	f104 0a19 	add.w	sl, r4, #25
 801f72a:	68e3      	ldr	r3, [r4, #12]
 801f72c:	6832      	ldr	r2, [r6, #0]
 801f72e:	1a9b      	subs	r3, r3, r2
 801f730:	42ab      	cmp	r3, r5
 801f732:	dc26      	bgt.n	801f782 <_printf_common+0x96>
 801f734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f738:	6822      	ldr	r2, [r4, #0]
 801f73a:	3b00      	subs	r3, #0
 801f73c:	bf18      	it	ne
 801f73e:	2301      	movne	r3, #1
 801f740:	0692      	lsls	r2, r2, #26
 801f742:	d42b      	bmi.n	801f79c <_printf_common+0xb0>
 801f744:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f748:	4641      	mov	r1, r8
 801f74a:	4638      	mov	r0, r7
 801f74c:	47c8      	blx	r9
 801f74e:	3001      	adds	r0, #1
 801f750:	d01e      	beq.n	801f790 <_printf_common+0xa4>
 801f752:	6823      	ldr	r3, [r4, #0]
 801f754:	6922      	ldr	r2, [r4, #16]
 801f756:	f003 0306 	and.w	r3, r3, #6
 801f75a:	2b04      	cmp	r3, #4
 801f75c:	bf02      	ittt	eq
 801f75e:	68e5      	ldreq	r5, [r4, #12]
 801f760:	6833      	ldreq	r3, [r6, #0]
 801f762:	1aed      	subeq	r5, r5, r3
 801f764:	68a3      	ldr	r3, [r4, #8]
 801f766:	bf0c      	ite	eq
 801f768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f76c:	2500      	movne	r5, #0
 801f76e:	4293      	cmp	r3, r2
 801f770:	bfc4      	itt	gt
 801f772:	1a9b      	subgt	r3, r3, r2
 801f774:	18ed      	addgt	r5, r5, r3
 801f776:	2600      	movs	r6, #0
 801f778:	341a      	adds	r4, #26
 801f77a:	42b5      	cmp	r5, r6
 801f77c:	d11a      	bne.n	801f7b4 <_printf_common+0xc8>
 801f77e:	2000      	movs	r0, #0
 801f780:	e008      	b.n	801f794 <_printf_common+0xa8>
 801f782:	2301      	movs	r3, #1
 801f784:	4652      	mov	r2, sl
 801f786:	4641      	mov	r1, r8
 801f788:	4638      	mov	r0, r7
 801f78a:	47c8      	blx	r9
 801f78c:	3001      	adds	r0, #1
 801f78e:	d103      	bne.n	801f798 <_printf_common+0xac>
 801f790:	f04f 30ff 	mov.w	r0, #4294967295
 801f794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f798:	3501      	adds	r5, #1
 801f79a:	e7c6      	b.n	801f72a <_printf_common+0x3e>
 801f79c:	18e1      	adds	r1, r4, r3
 801f79e:	1c5a      	adds	r2, r3, #1
 801f7a0:	2030      	movs	r0, #48	@ 0x30
 801f7a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f7a6:	4422      	add	r2, r4
 801f7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f7ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f7b0:	3302      	adds	r3, #2
 801f7b2:	e7c7      	b.n	801f744 <_printf_common+0x58>
 801f7b4:	2301      	movs	r3, #1
 801f7b6:	4622      	mov	r2, r4
 801f7b8:	4641      	mov	r1, r8
 801f7ba:	4638      	mov	r0, r7
 801f7bc:	47c8      	blx	r9
 801f7be:	3001      	adds	r0, #1
 801f7c0:	d0e6      	beq.n	801f790 <_printf_common+0xa4>
 801f7c2:	3601      	adds	r6, #1
 801f7c4:	e7d9      	b.n	801f77a <_printf_common+0x8e>
	...

0801f7c8 <_printf_i>:
 801f7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f7cc:	7e0f      	ldrb	r7, [r1, #24]
 801f7ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f7d0:	2f78      	cmp	r7, #120	@ 0x78
 801f7d2:	4691      	mov	r9, r2
 801f7d4:	4680      	mov	r8, r0
 801f7d6:	460c      	mov	r4, r1
 801f7d8:	469a      	mov	sl, r3
 801f7da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f7de:	d807      	bhi.n	801f7f0 <_printf_i+0x28>
 801f7e0:	2f62      	cmp	r7, #98	@ 0x62
 801f7e2:	d80a      	bhi.n	801f7fa <_printf_i+0x32>
 801f7e4:	2f00      	cmp	r7, #0
 801f7e6:	f000 80d1 	beq.w	801f98c <_printf_i+0x1c4>
 801f7ea:	2f58      	cmp	r7, #88	@ 0x58
 801f7ec:	f000 80b8 	beq.w	801f960 <_printf_i+0x198>
 801f7f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f7f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f7f8:	e03a      	b.n	801f870 <_printf_i+0xa8>
 801f7fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f7fe:	2b15      	cmp	r3, #21
 801f800:	d8f6      	bhi.n	801f7f0 <_printf_i+0x28>
 801f802:	a101      	add	r1, pc, #4	@ (adr r1, 801f808 <_printf_i+0x40>)
 801f804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f808:	0801f861 	.word	0x0801f861
 801f80c:	0801f875 	.word	0x0801f875
 801f810:	0801f7f1 	.word	0x0801f7f1
 801f814:	0801f7f1 	.word	0x0801f7f1
 801f818:	0801f7f1 	.word	0x0801f7f1
 801f81c:	0801f7f1 	.word	0x0801f7f1
 801f820:	0801f875 	.word	0x0801f875
 801f824:	0801f7f1 	.word	0x0801f7f1
 801f828:	0801f7f1 	.word	0x0801f7f1
 801f82c:	0801f7f1 	.word	0x0801f7f1
 801f830:	0801f7f1 	.word	0x0801f7f1
 801f834:	0801f973 	.word	0x0801f973
 801f838:	0801f89f 	.word	0x0801f89f
 801f83c:	0801f92d 	.word	0x0801f92d
 801f840:	0801f7f1 	.word	0x0801f7f1
 801f844:	0801f7f1 	.word	0x0801f7f1
 801f848:	0801f995 	.word	0x0801f995
 801f84c:	0801f7f1 	.word	0x0801f7f1
 801f850:	0801f89f 	.word	0x0801f89f
 801f854:	0801f7f1 	.word	0x0801f7f1
 801f858:	0801f7f1 	.word	0x0801f7f1
 801f85c:	0801f935 	.word	0x0801f935
 801f860:	6833      	ldr	r3, [r6, #0]
 801f862:	1d1a      	adds	r2, r3, #4
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	6032      	str	r2, [r6, #0]
 801f868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f86c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f870:	2301      	movs	r3, #1
 801f872:	e09c      	b.n	801f9ae <_printf_i+0x1e6>
 801f874:	6833      	ldr	r3, [r6, #0]
 801f876:	6820      	ldr	r0, [r4, #0]
 801f878:	1d19      	adds	r1, r3, #4
 801f87a:	6031      	str	r1, [r6, #0]
 801f87c:	0606      	lsls	r6, r0, #24
 801f87e:	d501      	bpl.n	801f884 <_printf_i+0xbc>
 801f880:	681d      	ldr	r5, [r3, #0]
 801f882:	e003      	b.n	801f88c <_printf_i+0xc4>
 801f884:	0645      	lsls	r5, r0, #25
 801f886:	d5fb      	bpl.n	801f880 <_printf_i+0xb8>
 801f888:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f88c:	2d00      	cmp	r5, #0
 801f88e:	da03      	bge.n	801f898 <_printf_i+0xd0>
 801f890:	232d      	movs	r3, #45	@ 0x2d
 801f892:	426d      	negs	r5, r5
 801f894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f898:	4858      	ldr	r0, [pc, #352]	@ (801f9fc <_printf_i+0x234>)
 801f89a:	230a      	movs	r3, #10
 801f89c:	e011      	b.n	801f8c2 <_printf_i+0xfa>
 801f89e:	6821      	ldr	r1, [r4, #0]
 801f8a0:	6833      	ldr	r3, [r6, #0]
 801f8a2:	0608      	lsls	r0, r1, #24
 801f8a4:	f853 5b04 	ldr.w	r5, [r3], #4
 801f8a8:	d402      	bmi.n	801f8b0 <_printf_i+0xe8>
 801f8aa:	0649      	lsls	r1, r1, #25
 801f8ac:	bf48      	it	mi
 801f8ae:	b2ad      	uxthmi	r5, r5
 801f8b0:	2f6f      	cmp	r7, #111	@ 0x6f
 801f8b2:	4852      	ldr	r0, [pc, #328]	@ (801f9fc <_printf_i+0x234>)
 801f8b4:	6033      	str	r3, [r6, #0]
 801f8b6:	bf14      	ite	ne
 801f8b8:	230a      	movne	r3, #10
 801f8ba:	2308      	moveq	r3, #8
 801f8bc:	2100      	movs	r1, #0
 801f8be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f8c2:	6866      	ldr	r6, [r4, #4]
 801f8c4:	60a6      	str	r6, [r4, #8]
 801f8c6:	2e00      	cmp	r6, #0
 801f8c8:	db05      	blt.n	801f8d6 <_printf_i+0x10e>
 801f8ca:	6821      	ldr	r1, [r4, #0]
 801f8cc:	432e      	orrs	r6, r5
 801f8ce:	f021 0104 	bic.w	r1, r1, #4
 801f8d2:	6021      	str	r1, [r4, #0]
 801f8d4:	d04b      	beq.n	801f96e <_printf_i+0x1a6>
 801f8d6:	4616      	mov	r6, r2
 801f8d8:	fbb5 f1f3 	udiv	r1, r5, r3
 801f8dc:	fb03 5711 	mls	r7, r3, r1, r5
 801f8e0:	5dc7      	ldrb	r7, [r0, r7]
 801f8e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f8e6:	462f      	mov	r7, r5
 801f8e8:	42bb      	cmp	r3, r7
 801f8ea:	460d      	mov	r5, r1
 801f8ec:	d9f4      	bls.n	801f8d8 <_printf_i+0x110>
 801f8ee:	2b08      	cmp	r3, #8
 801f8f0:	d10b      	bne.n	801f90a <_printf_i+0x142>
 801f8f2:	6823      	ldr	r3, [r4, #0]
 801f8f4:	07df      	lsls	r7, r3, #31
 801f8f6:	d508      	bpl.n	801f90a <_printf_i+0x142>
 801f8f8:	6923      	ldr	r3, [r4, #16]
 801f8fa:	6861      	ldr	r1, [r4, #4]
 801f8fc:	4299      	cmp	r1, r3
 801f8fe:	bfde      	ittt	le
 801f900:	2330      	movle	r3, #48	@ 0x30
 801f902:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f906:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f90a:	1b92      	subs	r2, r2, r6
 801f90c:	6122      	str	r2, [r4, #16]
 801f90e:	f8cd a000 	str.w	sl, [sp]
 801f912:	464b      	mov	r3, r9
 801f914:	aa03      	add	r2, sp, #12
 801f916:	4621      	mov	r1, r4
 801f918:	4640      	mov	r0, r8
 801f91a:	f7ff fee7 	bl	801f6ec <_printf_common>
 801f91e:	3001      	adds	r0, #1
 801f920:	d14a      	bne.n	801f9b8 <_printf_i+0x1f0>
 801f922:	f04f 30ff 	mov.w	r0, #4294967295
 801f926:	b004      	add	sp, #16
 801f928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f92c:	6823      	ldr	r3, [r4, #0]
 801f92e:	f043 0320 	orr.w	r3, r3, #32
 801f932:	6023      	str	r3, [r4, #0]
 801f934:	4832      	ldr	r0, [pc, #200]	@ (801fa00 <_printf_i+0x238>)
 801f936:	2778      	movs	r7, #120	@ 0x78
 801f938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801f93c:	6823      	ldr	r3, [r4, #0]
 801f93e:	6831      	ldr	r1, [r6, #0]
 801f940:	061f      	lsls	r7, r3, #24
 801f942:	f851 5b04 	ldr.w	r5, [r1], #4
 801f946:	d402      	bmi.n	801f94e <_printf_i+0x186>
 801f948:	065f      	lsls	r7, r3, #25
 801f94a:	bf48      	it	mi
 801f94c:	b2ad      	uxthmi	r5, r5
 801f94e:	6031      	str	r1, [r6, #0]
 801f950:	07d9      	lsls	r1, r3, #31
 801f952:	bf44      	itt	mi
 801f954:	f043 0320 	orrmi.w	r3, r3, #32
 801f958:	6023      	strmi	r3, [r4, #0]
 801f95a:	b11d      	cbz	r5, 801f964 <_printf_i+0x19c>
 801f95c:	2310      	movs	r3, #16
 801f95e:	e7ad      	b.n	801f8bc <_printf_i+0xf4>
 801f960:	4826      	ldr	r0, [pc, #152]	@ (801f9fc <_printf_i+0x234>)
 801f962:	e7e9      	b.n	801f938 <_printf_i+0x170>
 801f964:	6823      	ldr	r3, [r4, #0]
 801f966:	f023 0320 	bic.w	r3, r3, #32
 801f96a:	6023      	str	r3, [r4, #0]
 801f96c:	e7f6      	b.n	801f95c <_printf_i+0x194>
 801f96e:	4616      	mov	r6, r2
 801f970:	e7bd      	b.n	801f8ee <_printf_i+0x126>
 801f972:	6833      	ldr	r3, [r6, #0]
 801f974:	6825      	ldr	r5, [r4, #0]
 801f976:	6961      	ldr	r1, [r4, #20]
 801f978:	1d18      	adds	r0, r3, #4
 801f97a:	6030      	str	r0, [r6, #0]
 801f97c:	062e      	lsls	r6, r5, #24
 801f97e:	681b      	ldr	r3, [r3, #0]
 801f980:	d501      	bpl.n	801f986 <_printf_i+0x1be>
 801f982:	6019      	str	r1, [r3, #0]
 801f984:	e002      	b.n	801f98c <_printf_i+0x1c4>
 801f986:	0668      	lsls	r0, r5, #25
 801f988:	d5fb      	bpl.n	801f982 <_printf_i+0x1ba>
 801f98a:	8019      	strh	r1, [r3, #0]
 801f98c:	2300      	movs	r3, #0
 801f98e:	6123      	str	r3, [r4, #16]
 801f990:	4616      	mov	r6, r2
 801f992:	e7bc      	b.n	801f90e <_printf_i+0x146>
 801f994:	6833      	ldr	r3, [r6, #0]
 801f996:	1d1a      	adds	r2, r3, #4
 801f998:	6032      	str	r2, [r6, #0]
 801f99a:	681e      	ldr	r6, [r3, #0]
 801f99c:	6862      	ldr	r2, [r4, #4]
 801f99e:	2100      	movs	r1, #0
 801f9a0:	4630      	mov	r0, r6
 801f9a2:	f7e0 fbf5 	bl	8000190 <memchr>
 801f9a6:	b108      	cbz	r0, 801f9ac <_printf_i+0x1e4>
 801f9a8:	1b80      	subs	r0, r0, r6
 801f9aa:	6060      	str	r0, [r4, #4]
 801f9ac:	6863      	ldr	r3, [r4, #4]
 801f9ae:	6123      	str	r3, [r4, #16]
 801f9b0:	2300      	movs	r3, #0
 801f9b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f9b6:	e7aa      	b.n	801f90e <_printf_i+0x146>
 801f9b8:	6923      	ldr	r3, [r4, #16]
 801f9ba:	4632      	mov	r2, r6
 801f9bc:	4649      	mov	r1, r9
 801f9be:	4640      	mov	r0, r8
 801f9c0:	47d0      	blx	sl
 801f9c2:	3001      	adds	r0, #1
 801f9c4:	d0ad      	beq.n	801f922 <_printf_i+0x15a>
 801f9c6:	6823      	ldr	r3, [r4, #0]
 801f9c8:	079b      	lsls	r3, r3, #30
 801f9ca:	d413      	bmi.n	801f9f4 <_printf_i+0x22c>
 801f9cc:	68e0      	ldr	r0, [r4, #12]
 801f9ce:	9b03      	ldr	r3, [sp, #12]
 801f9d0:	4298      	cmp	r0, r3
 801f9d2:	bfb8      	it	lt
 801f9d4:	4618      	movlt	r0, r3
 801f9d6:	e7a6      	b.n	801f926 <_printf_i+0x15e>
 801f9d8:	2301      	movs	r3, #1
 801f9da:	4632      	mov	r2, r6
 801f9dc:	4649      	mov	r1, r9
 801f9de:	4640      	mov	r0, r8
 801f9e0:	47d0      	blx	sl
 801f9e2:	3001      	adds	r0, #1
 801f9e4:	d09d      	beq.n	801f922 <_printf_i+0x15a>
 801f9e6:	3501      	adds	r5, #1
 801f9e8:	68e3      	ldr	r3, [r4, #12]
 801f9ea:	9903      	ldr	r1, [sp, #12]
 801f9ec:	1a5b      	subs	r3, r3, r1
 801f9ee:	42ab      	cmp	r3, r5
 801f9f0:	dcf2      	bgt.n	801f9d8 <_printf_i+0x210>
 801f9f2:	e7eb      	b.n	801f9cc <_printf_i+0x204>
 801f9f4:	2500      	movs	r5, #0
 801f9f6:	f104 0619 	add.w	r6, r4, #25
 801f9fa:	e7f5      	b.n	801f9e8 <_printf_i+0x220>
 801f9fc:	08020dd9 	.word	0x08020dd9
 801fa00:	08020dea 	.word	0x08020dea

0801fa04 <__sflush_r>:
 801fa04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa0a:	0716      	lsls	r6, r2, #28
 801fa0c:	4605      	mov	r5, r0
 801fa0e:	460c      	mov	r4, r1
 801fa10:	d454      	bmi.n	801fabc <__sflush_r+0xb8>
 801fa12:	684b      	ldr	r3, [r1, #4]
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	dc02      	bgt.n	801fa1e <__sflush_r+0x1a>
 801fa18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	dd48      	ble.n	801fab0 <__sflush_r+0xac>
 801fa1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fa20:	2e00      	cmp	r6, #0
 801fa22:	d045      	beq.n	801fab0 <__sflush_r+0xac>
 801fa24:	2300      	movs	r3, #0
 801fa26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801fa2a:	682f      	ldr	r7, [r5, #0]
 801fa2c:	6a21      	ldr	r1, [r4, #32]
 801fa2e:	602b      	str	r3, [r5, #0]
 801fa30:	d030      	beq.n	801fa94 <__sflush_r+0x90>
 801fa32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801fa34:	89a3      	ldrh	r3, [r4, #12]
 801fa36:	0759      	lsls	r1, r3, #29
 801fa38:	d505      	bpl.n	801fa46 <__sflush_r+0x42>
 801fa3a:	6863      	ldr	r3, [r4, #4]
 801fa3c:	1ad2      	subs	r2, r2, r3
 801fa3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801fa40:	b10b      	cbz	r3, 801fa46 <__sflush_r+0x42>
 801fa42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801fa44:	1ad2      	subs	r2, r2, r3
 801fa46:	2300      	movs	r3, #0
 801fa48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fa4a:	6a21      	ldr	r1, [r4, #32]
 801fa4c:	4628      	mov	r0, r5
 801fa4e:	47b0      	blx	r6
 801fa50:	1c43      	adds	r3, r0, #1
 801fa52:	89a3      	ldrh	r3, [r4, #12]
 801fa54:	d106      	bne.n	801fa64 <__sflush_r+0x60>
 801fa56:	6829      	ldr	r1, [r5, #0]
 801fa58:	291d      	cmp	r1, #29
 801fa5a:	d82b      	bhi.n	801fab4 <__sflush_r+0xb0>
 801fa5c:	4a28      	ldr	r2, [pc, #160]	@ (801fb00 <__sflush_r+0xfc>)
 801fa5e:	40ca      	lsrs	r2, r1
 801fa60:	07d6      	lsls	r6, r2, #31
 801fa62:	d527      	bpl.n	801fab4 <__sflush_r+0xb0>
 801fa64:	2200      	movs	r2, #0
 801fa66:	6062      	str	r2, [r4, #4]
 801fa68:	04d9      	lsls	r1, r3, #19
 801fa6a:	6922      	ldr	r2, [r4, #16]
 801fa6c:	6022      	str	r2, [r4, #0]
 801fa6e:	d504      	bpl.n	801fa7a <__sflush_r+0x76>
 801fa70:	1c42      	adds	r2, r0, #1
 801fa72:	d101      	bne.n	801fa78 <__sflush_r+0x74>
 801fa74:	682b      	ldr	r3, [r5, #0]
 801fa76:	b903      	cbnz	r3, 801fa7a <__sflush_r+0x76>
 801fa78:	6560      	str	r0, [r4, #84]	@ 0x54
 801fa7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fa7c:	602f      	str	r7, [r5, #0]
 801fa7e:	b1b9      	cbz	r1, 801fab0 <__sflush_r+0xac>
 801fa80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fa84:	4299      	cmp	r1, r3
 801fa86:	d002      	beq.n	801fa8e <__sflush_r+0x8a>
 801fa88:	4628      	mov	r0, r5
 801fa8a:	f7ff fca5 	bl	801f3d8 <_free_r>
 801fa8e:	2300      	movs	r3, #0
 801fa90:	6363      	str	r3, [r4, #52]	@ 0x34
 801fa92:	e00d      	b.n	801fab0 <__sflush_r+0xac>
 801fa94:	2301      	movs	r3, #1
 801fa96:	4628      	mov	r0, r5
 801fa98:	47b0      	blx	r6
 801fa9a:	4602      	mov	r2, r0
 801fa9c:	1c50      	adds	r0, r2, #1
 801fa9e:	d1c9      	bne.n	801fa34 <__sflush_r+0x30>
 801faa0:	682b      	ldr	r3, [r5, #0]
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	d0c6      	beq.n	801fa34 <__sflush_r+0x30>
 801faa6:	2b1d      	cmp	r3, #29
 801faa8:	d001      	beq.n	801faae <__sflush_r+0xaa>
 801faaa:	2b16      	cmp	r3, #22
 801faac:	d11d      	bne.n	801faea <__sflush_r+0xe6>
 801faae:	602f      	str	r7, [r5, #0]
 801fab0:	2000      	movs	r0, #0
 801fab2:	e021      	b.n	801faf8 <__sflush_r+0xf4>
 801fab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fab8:	b21b      	sxth	r3, r3
 801faba:	e01a      	b.n	801faf2 <__sflush_r+0xee>
 801fabc:	690f      	ldr	r7, [r1, #16]
 801fabe:	2f00      	cmp	r7, #0
 801fac0:	d0f6      	beq.n	801fab0 <__sflush_r+0xac>
 801fac2:	0793      	lsls	r3, r2, #30
 801fac4:	680e      	ldr	r6, [r1, #0]
 801fac6:	bf08      	it	eq
 801fac8:	694b      	ldreq	r3, [r1, #20]
 801faca:	600f      	str	r7, [r1, #0]
 801facc:	bf18      	it	ne
 801face:	2300      	movne	r3, #0
 801fad0:	1bf6      	subs	r6, r6, r7
 801fad2:	608b      	str	r3, [r1, #8]
 801fad4:	2e00      	cmp	r6, #0
 801fad6:	ddeb      	ble.n	801fab0 <__sflush_r+0xac>
 801fad8:	6a21      	ldr	r1, [r4, #32]
 801fada:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801fade:	4633      	mov	r3, r6
 801fae0:	463a      	mov	r2, r7
 801fae2:	4628      	mov	r0, r5
 801fae4:	47e0      	blx	ip
 801fae6:	2800      	cmp	r0, #0
 801fae8:	dc07      	bgt.n	801fafa <__sflush_r+0xf6>
 801faea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801faee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801faf2:	81a3      	strh	r3, [r4, #12]
 801faf4:	f04f 30ff 	mov.w	r0, #4294967295
 801faf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fafa:	4407      	add	r7, r0
 801fafc:	1a36      	subs	r6, r6, r0
 801fafe:	e7e9      	b.n	801fad4 <__sflush_r+0xd0>
 801fb00:	20400001 	.word	0x20400001

0801fb04 <_fflush_r>:
 801fb04:	b538      	push	{r3, r4, r5, lr}
 801fb06:	690b      	ldr	r3, [r1, #16]
 801fb08:	4605      	mov	r5, r0
 801fb0a:	460c      	mov	r4, r1
 801fb0c:	b913      	cbnz	r3, 801fb14 <_fflush_r+0x10>
 801fb0e:	2500      	movs	r5, #0
 801fb10:	4628      	mov	r0, r5
 801fb12:	bd38      	pop	{r3, r4, r5, pc}
 801fb14:	b118      	cbz	r0, 801fb1e <_fflush_r+0x1a>
 801fb16:	6a03      	ldr	r3, [r0, #32]
 801fb18:	b90b      	cbnz	r3, 801fb1e <_fflush_r+0x1a>
 801fb1a:	f7ff fb45 	bl	801f1a8 <__sinit>
 801fb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	d0f3      	beq.n	801fb0e <_fflush_r+0xa>
 801fb26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801fb28:	07d0      	lsls	r0, r2, #31
 801fb2a:	d404      	bmi.n	801fb36 <_fflush_r+0x32>
 801fb2c:	0599      	lsls	r1, r3, #22
 801fb2e:	d402      	bmi.n	801fb36 <_fflush_r+0x32>
 801fb30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fb32:	f7ff fc4e 	bl	801f3d2 <__retarget_lock_acquire_recursive>
 801fb36:	4628      	mov	r0, r5
 801fb38:	4621      	mov	r1, r4
 801fb3a:	f7ff ff63 	bl	801fa04 <__sflush_r>
 801fb3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fb40:	07da      	lsls	r2, r3, #31
 801fb42:	4605      	mov	r5, r0
 801fb44:	d4e4      	bmi.n	801fb10 <_fflush_r+0xc>
 801fb46:	89a3      	ldrh	r3, [r4, #12]
 801fb48:	059b      	lsls	r3, r3, #22
 801fb4a:	d4e1      	bmi.n	801fb10 <_fflush_r+0xc>
 801fb4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fb4e:	f7ff fc41 	bl	801f3d4 <__retarget_lock_release_recursive>
 801fb52:	e7dd      	b.n	801fb10 <_fflush_r+0xc>

0801fb54 <__swbuf_r>:
 801fb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb56:	460e      	mov	r6, r1
 801fb58:	4614      	mov	r4, r2
 801fb5a:	4605      	mov	r5, r0
 801fb5c:	b118      	cbz	r0, 801fb66 <__swbuf_r+0x12>
 801fb5e:	6a03      	ldr	r3, [r0, #32]
 801fb60:	b90b      	cbnz	r3, 801fb66 <__swbuf_r+0x12>
 801fb62:	f7ff fb21 	bl	801f1a8 <__sinit>
 801fb66:	69a3      	ldr	r3, [r4, #24]
 801fb68:	60a3      	str	r3, [r4, #8]
 801fb6a:	89a3      	ldrh	r3, [r4, #12]
 801fb6c:	071a      	lsls	r2, r3, #28
 801fb6e:	d501      	bpl.n	801fb74 <__swbuf_r+0x20>
 801fb70:	6923      	ldr	r3, [r4, #16]
 801fb72:	b943      	cbnz	r3, 801fb86 <__swbuf_r+0x32>
 801fb74:	4621      	mov	r1, r4
 801fb76:	4628      	mov	r0, r5
 801fb78:	f000 f82a 	bl	801fbd0 <__swsetup_r>
 801fb7c:	b118      	cbz	r0, 801fb86 <__swbuf_r+0x32>
 801fb7e:	f04f 37ff 	mov.w	r7, #4294967295
 801fb82:	4638      	mov	r0, r7
 801fb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb86:	6823      	ldr	r3, [r4, #0]
 801fb88:	6922      	ldr	r2, [r4, #16]
 801fb8a:	1a98      	subs	r0, r3, r2
 801fb8c:	6963      	ldr	r3, [r4, #20]
 801fb8e:	b2f6      	uxtb	r6, r6
 801fb90:	4283      	cmp	r3, r0
 801fb92:	4637      	mov	r7, r6
 801fb94:	dc05      	bgt.n	801fba2 <__swbuf_r+0x4e>
 801fb96:	4621      	mov	r1, r4
 801fb98:	4628      	mov	r0, r5
 801fb9a:	f7ff ffb3 	bl	801fb04 <_fflush_r>
 801fb9e:	2800      	cmp	r0, #0
 801fba0:	d1ed      	bne.n	801fb7e <__swbuf_r+0x2a>
 801fba2:	68a3      	ldr	r3, [r4, #8]
 801fba4:	3b01      	subs	r3, #1
 801fba6:	60a3      	str	r3, [r4, #8]
 801fba8:	6823      	ldr	r3, [r4, #0]
 801fbaa:	1c5a      	adds	r2, r3, #1
 801fbac:	6022      	str	r2, [r4, #0]
 801fbae:	701e      	strb	r6, [r3, #0]
 801fbb0:	6962      	ldr	r2, [r4, #20]
 801fbb2:	1c43      	adds	r3, r0, #1
 801fbb4:	429a      	cmp	r2, r3
 801fbb6:	d004      	beq.n	801fbc2 <__swbuf_r+0x6e>
 801fbb8:	89a3      	ldrh	r3, [r4, #12]
 801fbba:	07db      	lsls	r3, r3, #31
 801fbbc:	d5e1      	bpl.n	801fb82 <__swbuf_r+0x2e>
 801fbbe:	2e0a      	cmp	r6, #10
 801fbc0:	d1df      	bne.n	801fb82 <__swbuf_r+0x2e>
 801fbc2:	4621      	mov	r1, r4
 801fbc4:	4628      	mov	r0, r5
 801fbc6:	f7ff ff9d 	bl	801fb04 <_fflush_r>
 801fbca:	2800      	cmp	r0, #0
 801fbcc:	d0d9      	beq.n	801fb82 <__swbuf_r+0x2e>
 801fbce:	e7d6      	b.n	801fb7e <__swbuf_r+0x2a>

0801fbd0 <__swsetup_r>:
 801fbd0:	b538      	push	{r3, r4, r5, lr}
 801fbd2:	4b29      	ldr	r3, [pc, #164]	@ (801fc78 <__swsetup_r+0xa8>)
 801fbd4:	4605      	mov	r5, r0
 801fbd6:	6818      	ldr	r0, [r3, #0]
 801fbd8:	460c      	mov	r4, r1
 801fbda:	b118      	cbz	r0, 801fbe4 <__swsetup_r+0x14>
 801fbdc:	6a03      	ldr	r3, [r0, #32]
 801fbde:	b90b      	cbnz	r3, 801fbe4 <__swsetup_r+0x14>
 801fbe0:	f7ff fae2 	bl	801f1a8 <__sinit>
 801fbe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fbe8:	0719      	lsls	r1, r3, #28
 801fbea:	d422      	bmi.n	801fc32 <__swsetup_r+0x62>
 801fbec:	06da      	lsls	r2, r3, #27
 801fbee:	d407      	bmi.n	801fc00 <__swsetup_r+0x30>
 801fbf0:	2209      	movs	r2, #9
 801fbf2:	602a      	str	r2, [r5, #0]
 801fbf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fbf8:	81a3      	strh	r3, [r4, #12]
 801fbfa:	f04f 30ff 	mov.w	r0, #4294967295
 801fbfe:	e033      	b.n	801fc68 <__swsetup_r+0x98>
 801fc00:	0758      	lsls	r0, r3, #29
 801fc02:	d512      	bpl.n	801fc2a <__swsetup_r+0x5a>
 801fc04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fc06:	b141      	cbz	r1, 801fc1a <__swsetup_r+0x4a>
 801fc08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fc0c:	4299      	cmp	r1, r3
 801fc0e:	d002      	beq.n	801fc16 <__swsetup_r+0x46>
 801fc10:	4628      	mov	r0, r5
 801fc12:	f7ff fbe1 	bl	801f3d8 <_free_r>
 801fc16:	2300      	movs	r3, #0
 801fc18:	6363      	str	r3, [r4, #52]	@ 0x34
 801fc1a:	89a3      	ldrh	r3, [r4, #12]
 801fc1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801fc20:	81a3      	strh	r3, [r4, #12]
 801fc22:	2300      	movs	r3, #0
 801fc24:	6063      	str	r3, [r4, #4]
 801fc26:	6923      	ldr	r3, [r4, #16]
 801fc28:	6023      	str	r3, [r4, #0]
 801fc2a:	89a3      	ldrh	r3, [r4, #12]
 801fc2c:	f043 0308 	orr.w	r3, r3, #8
 801fc30:	81a3      	strh	r3, [r4, #12]
 801fc32:	6923      	ldr	r3, [r4, #16]
 801fc34:	b94b      	cbnz	r3, 801fc4a <__swsetup_r+0x7a>
 801fc36:	89a3      	ldrh	r3, [r4, #12]
 801fc38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801fc3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801fc40:	d003      	beq.n	801fc4a <__swsetup_r+0x7a>
 801fc42:	4621      	mov	r1, r4
 801fc44:	4628      	mov	r0, r5
 801fc46:	f000 f83f 	bl	801fcc8 <__smakebuf_r>
 801fc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc4e:	f013 0201 	ands.w	r2, r3, #1
 801fc52:	d00a      	beq.n	801fc6a <__swsetup_r+0x9a>
 801fc54:	2200      	movs	r2, #0
 801fc56:	60a2      	str	r2, [r4, #8]
 801fc58:	6962      	ldr	r2, [r4, #20]
 801fc5a:	4252      	negs	r2, r2
 801fc5c:	61a2      	str	r2, [r4, #24]
 801fc5e:	6922      	ldr	r2, [r4, #16]
 801fc60:	b942      	cbnz	r2, 801fc74 <__swsetup_r+0xa4>
 801fc62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801fc66:	d1c5      	bne.n	801fbf4 <__swsetup_r+0x24>
 801fc68:	bd38      	pop	{r3, r4, r5, pc}
 801fc6a:	0799      	lsls	r1, r3, #30
 801fc6c:	bf58      	it	pl
 801fc6e:	6962      	ldrpl	r2, [r4, #20]
 801fc70:	60a2      	str	r2, [r4, #8]
 801fc72:	e7f4      	b.n	801fc5e <__swsetup_r+0x8e>
 801fc74:	2000      	movs	r0, #0
 801fc76:	e7f7      	b.n	801fc68 <__swsetup_r+0x98>
 801fc78:	20000648 	.word	0x20000648

0801fc7c <__swhatbuf_r>:
 801fc7c:	b570      	push	{r4, r5, r6, lr}
 801fc7e:	460c      	mov	r4, r1
 801fc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc84:	2900      	cmp	r1, #0
 801fc86:	b096      	sub	sp, #88	@ 0x58
 801fc88:	4615      	mov	r5, r2
 801fc8a:	461e      	mov	r6, r3
 801fc8c:	da0d      	bge.n	801fcaa <__swhatbuf_r+0x2e>
 801fc8e:	89a3      	ldrh	r3, [r4, #12]
 801fc90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801fc94:	f04f 0100 	mov.w	r1, #0
 801fc98:	bf14      	ite	ne
 801fc9a:	2340      	movne	r3, #64	@ 0x40
 801fc9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801fca0:	2000      	movs	r0, #0
 801fca2:	6031      	str	r1, [r6, #0]
 801fca4:	602b      	str	r3, [r5, #0]
 801fca6:	b016      	add	sp, #88	@ 0x58
 801fca8:	bd70      	pop	{r4, r5, r6, pc}
 801fcaa:	466a      	mov	r2, sp
 801fcac:	f000 f848 	bl	801fd40 <_fstat_r>
 801fcb0:	2800      	cmp	r0, #0
 801fcb2:	dbec      	blt.n	801fc8e <__swhatbuf_r+0x12>
 801fcb4:	9901      	ldr	r1, [sp, #4]
 801fcb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801fcba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801fcbe:	4259      	negs	r1, r3
 801fcc0:	4159      	adcs	r1, r3
 801fcc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801fcc6:	e7eb      	b.n	801fca0 <__swhatbuf_r+0x24>

0801fcc8 <__smakebuf_r>:
 801fcc8:	898b      	ldrh	r3, [r1, #12]
 801fcca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fccc:	079d      	lsls	r5, r3, #30
 801fcce:	4606      	mov	r6, r0
 801fcd0:	460c      	mov	r4, r1
 801fcd2:	d507      	bpl.n	801fce4 <__smakebuf_r+0x1c>
 801fcd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801fcd8:	6023      	str	r3, [r4, #0]
 801fcda:	6123      	str	r3, [r4, #16]
 801fcdc:	2301      	movs	r3, #1
 801fcde:	6163      	str	r3, [r4, #20]
 801fce0:	b003      	add	sp, #12
 801fce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fce4:	ab01      	add	r3, sp, #4
 801fce6:	466a      	mov	r2, sp
 801fce8:	f7ff ffc8 	bl	801fc7c <__swhatbuf_r>
 801fcec:	9f00      	ldr	r7, [sp, #0]
 801fcee:	4605      	mov	r5, r0
 801fcf0:	4639      	mov	r1, r7
 801fcf2:	4630      	mov	r0, r6
 801fcf4:	f7ff f940 	bl	801ef78 <_malloc_r>
 801fcf8:	b948      	cbnz	r0, 801fd0e <__smakebuf_r+0x46>
 801fcfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fcfe:	059a      	lsls	r2, r3, #22
 801fd00:	d4ee      	bmi.n	801fce0 <__smakebuf_r+0x18>
 801fd02:	f023 0303 	bic.w	r3, r3, #3
 801fd06:	f043 0302 	orr.w	r3, r3, #2
 801fd0a:	81a3      	strh	r3, [r4, #12]
 801fd0c:	e7e2      	b.n	801fcd4 <__smakebuf_r+0xc>
 801fd0e:	89a3      	ldrh	r3, [r4, #12]
 801fd10:	6020      	str	r0, [r4, #0]
 801fd12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fd16:	81a3      	strh	r3, [r4, #12]
 801fd18:	9b01      	ldr	r3, [sp, #4]
 801fd1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801fd1e:	b15b      	cbz	r3, 801fd38 <__smakebuf_r+0x70>
 801fd20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd24:	4630      	mov	r0, r6
 801fd26:	f000 f81d 	bl	801fd64 <_isatty_r>
 801fd2a:	b128      	cbz	r0, 801fd38 <__smakebuf_r+0x70>
 801fd2c:	89a3      	ldrh	r3, [r4, #12]
 801fd2e:	f023 0303 	bic.w	r3, r3, #3
 801fd32:	f043 0301 	orr.w	r3, r3, #1
 801fd36:	81a3      	strh	r3, [r4, #12]
 801fd38:	89a3      	ldrh	r3, [r4, #12]
 801fd3a:	431d      	orrs	r5, r3
 801fd3c:	81a5      	strh	r5, [r4, #12]
 801fd3e:	e7cf      	b.n	801fce0 <__smakebuf_r+0x18>

0801fd40 <_fstat_r>:
 801fd40:	b538      	push	{r3, r4, r5, lr}
 801fd42:	4d07      	ldr	r5, [pc, #28]	@ (801fd60 <_fstat_r+0x20>)
 801fd44:	2300      	movs	r3, #0
 801fd46:	4604      	mov	r4, r0
 801fd48:	4608      	mov	r0, r1
 801fd4a:	4611      	mov	r1, r2
 801fd4c:	602b      	str	r3, [r5, #0]
 801fd4e:	f7e1 fd13 	bl	8001778 <_fstat>
 801fd52:	1c43      	adds	r3, r0, #1
 801fd54:	d102      	bne.n	801fd5c <_fstat_r+0x1c>
 801fd56:	682b      	ldr	r3, [r5, #0]
 801fd58:	b103      	cbz	r3, 801fd5c <_fstat_r+0x1c>
 801fd5a:	6023      	str	r3, [r4, #0]
 801fd5c:	bd38      	pop	{r3, r4, r5, pc}
 801fd5e:	bf00      	nop
 801fd60:	20001dc4 	.word	0x20001dc4

0801fd64 <_isatty_r>:
 801fd64:	b538      	push	{r3, r4, r5, lr}
 801fd66:	4d06      	ldr	r5, [pc, #24]	@ (801fd80 <_isatty_r+0x1c>)
 801fd68:	2300      	movs	r3, #0
 801fd6a:	4604      	mov	r4, r0
 801fd6c:	4608      	mov	r0, r1
 801fd6e:	602b      	str	r3, [r5, #0]
 801fd70:	f7e1 fd11 	bl	8001796 <_isatty>
 801fd74:	1c43      	adds	r3, r0, #1
 801fd76:	d102      	bne.n	801fd7e <_isatty_r+0x1a>
 801fd78:	682b      	ldr	r3, [r5, #0]
 801fd7a:	b103      	cbz	r3, 801fd7e <_isatty_r+0x1a>
 801fd7c:	6023      	str	r3, [r4, #0]
 801fd7e:	bd38      	pop	{r3, r4, r5, pc}
 801fd80:	20001dc4 	.word	0x20001dc4

0801fd84 <expf>:
 801fd84:	b538      	push	{r3, r4, r5, lr}
 801fd86:	4605      	mov	r5, r0
 801fd88:	f000 f8ca 	bl	801ff20 <__ieee754_expf>
 801fd8c:	4604      	mov	r4, r0
 801fd8e:	4628      	mov	r0, r5
 801fd90:	f000 f81e 	bl	801fdd0 <finitef>
 801fd94:	b150      	cbz	r0, 801fdac <expf+0x28>
 801fd96:	490c      	ldr	r1, [pc, #48]	@ (801fdc8 <expf+0x44>)
 801fd98:	4628      	mov	r0, r5
 801fd9a:	f7e0 ff7f 	bl	8000c9c <__aeabi_fcmpgt>
 801fd9e:	b138      	cbz	r0, 801fdb0 <expf+0x2c>
 801fda0:	f7ff faec 	bl	801f37c <__errno>
 801fda4:	2322      	movs	r3, #34	@ 0x22
 801fda6:	6003      	str	r3, [r0, #0]
 801fda8:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 801fdac:	4620      	mov	r0, r4
 801fdae:	bd38      	pop	{r3, r4, r5, pc}
 801fdb0:	4906      	ldr	r1, [pc, #24]	@ (801fdcc <expf+0x48>)
 801fdb2:	4628      	mov	r0, r5
 801fdb4:	f7e0 ff54 	bl	8000c60 <__aeabi_fcmplt>
 801fdb8:	2800      	cmp	r0, #0
 801fdba:	d0f7      	beq.n	801fdac <expf+0x28>
 801fdbc:	f7ff fade 	bl	801f37c <__errno>
 801fdc0:	2322      	movs	r3, #34	@ 0x22
 801fdc2:	6003      	str	r3, [r0, #0]
 801fdc4:	2400      	movs	r4, #0
 801fdc6:	e7f1      	b.n	801fdac <expf+0x28>
 801fdc8:	42b17217 	.word	0x42b17217
 801fdcc:	c2cff1b5 	.word	0xc2cff1b5

0801fdd0 <finitef>:
 801fdd0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801fdd4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801fdd8:	bfac      	ite	ge
 801fdda:	2000      	movge	r0, #0
 801fddc:	2001      	movlt	r0, #1
 801fdde:	4770      	bx	lr

0801fde0 <with_errnof>:
 801fde0:	b538      	push	{r3, r4, r5, lr}
 801fde2:	4604      	mov	r4, r0
 801fde4:	460d      	mov	r5, r1
 801fde6:	f7ff fac9 	bl	801f37c <__errno>
 801fdea:	6005      	str	r5, [r0, #0]
 801fdec:	4620      	mov	r0, r4
 801fdee:	bd38      	pop	{r3, r4, r5, pc}

0801fdf0 <xflowf>:
 801fdf0:	b508      	push	{r3, lr}
 801fdf2:	b140      	cbz	r0, 801fe06 <xflowf+0x16>
 801fdf4:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 801fdf8:	f7e0 fd94 	bl	8000924 <__aeabi_fmul>
 801fdfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801fe00:	2122      	movs	r1, #34	@ 0x22
 801fe02:	f7ff bfed 	b.w	801fde0 <with_errnof>
 801fe06:	4608      	mov	r0, r1
 801fe08:	e7f6      	b.n	801fdf8 <xflowf+0x8>

0801fe0a <__math_uflowf>:
 801fe0a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 801fe0e:	f7ff bfef 	b.w	801fdf0 <xflowf>

0801fe12 <__math_oflowf>:
 801fe12:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 801fe16:	f7ff bfeb 	b.w	801fdf0 <xflowf>
 801fe1a:	0000      	movs	r0, r0
 801fe1c:	0000      	movs	r0, r0
	...

0801fe20 <floor>:
 801fe20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe24:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fe28:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801fe2c:	2e13      	cmp	r6, #19
 801fe2e:	4602      	mov	r2, r0
 801fe30:	460b      	mov	r3, r1
 801fe32:	460c      	mov	r4, r1
 801fe34:	4605      	mov	r5, r0
 801fe36:	4680      	mov	r8, r0
 801fe38:	dc35      	bgt.n	801fea6 <floor+0x86>
 801fe3a:	2e00      	cmp	r6, #0
 801fe3c:	da17      	bge.n	801fe6e <floor+0x4e>
 801fe3e:	a334      	add	r3, pc, #208	@ (adr r3, 801ff10 <floor+0xf0>)
 801fe40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe44:	f7e0 f9fa 	bl	800023c <__adddf3>
 801fe48:	2200      	movs	r2, #0
 801fe4a:	2300      	movs	r3, #0
 801fe4c:	f7e0 fc2a 	bl	80006a4 <__aeabi_dcmpgt>
 801fe50:	b150      	cbz	r0, 801fe68 <floor+0x48>
 801fe52:	2c00      	cmp	r4, #0
 801fe54:	da57      	bge.n	801ff06 <floor+0xe6>
 801fe56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801fe5a:	432c      	orrs	r4, r5
 801fe5c:	2500      	movs	r5, #0
 801fe5e:	42ac      	cmp	r4, r5
 801fe60:	4c2d      	ldr	r4, [pc, #180]	@ (801ff18 <floor+0xf8>)
 801fe62:	bf08      	it	eq
 801fe64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801fe68:	4623      	mov	r3, r4
 801fe6a:	462a      	mov	r2, r5
 801fe6c:	e024      	b.n	801feb8 <floor+0x98>
 801fe6e:	4f2b      	ldr	r7, [pc, #172]	@ (801ff1c <floor+0xfc>)
 801fe70:	4137      	asrs	r7, r6
 801fe72:	ea01 0c07 	and.w	ip, r1, r7
 801fe76:	ea5c 0c00 	orrs.w	ip, ip, r0
 801fe7a:	d01d      	beq.n	801feb8 <floor+0x98>
 801fe7c:	a324      	add	r3, pc, #144	@ (adr r3, 801ff10 <floor+0xf0>)
 801fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe82:	f7e0 f9db 	bl	800023c <__adddf3>
 801fe86:	2200      	movs	r2, #0
 801fe88:	2300      	movs	r3, #0
 801fe8a:	f7e0 fc0b 	bl	80006a4 <__aeabi_dcmpgt>
 801fe8e:	2800      	cmp	r0, #0
 801fe90:	d0ea      	beq.n	801fe68 <floor+0x48>
 801fe92:	2c00      	cmp	r4, #0
 801fe94:	bfbe      	ittt	lt
 801fe96:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801fe9a:	4133      	asrlt	r3, r6
 801fe9c:	18e4      	addlt	r4, r4, r3
 801fe9e:	ea24 0407 	bic.w	r4, r4, r7
 801fea2:	2500      	movs	r5, #0
 801fea4:	e7e0      	b.n	801fe68 <floor+0x48>
 801fea6:	2e33      	cmp	r6, #51	@ 0x33
 801fea8:	dd0a      	ble.n	801fec0 <floor+0xa0>
 801feaa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801feae:	d103      	bne.n	801feb8 <floor+0x98>
 801feb0:	f7e0 f9c4 	bl	800023c <__adddf3>
 801feb4:	4602      	mov	r2, r0
 801feb6:	460b      	mov	r3, r1
 801feb8:	4610      	mov	r0, r2
 801feba:	4619      	mov	r1, r3
 801febc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fec0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801fec4:	f04f 3cff 	mov.w	ip, #4294967295
 801fec8:	fa2c f707 	lsr.w	r7, ip, r7
 801fecc:	4207      	tst	r7, r0
 801fece:	d0f3      	beq.n	801feb8 <floor+0x98>
 801fed0:	a30f      	add	r3, pc, #60	@ (adr r3, 801ff10 <floor+0xf0>)
 801fed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fed6:	f7e0 f9b1 	bl	800023c <__adddf3>
 801feda:	2200      	movs	r2, #0
 801fedc:	2300      	movs	r3, #0
 801fede:	f7e0 fbe1 	bl	80006a4 <__aeabi_dcmpgt>
 801fee2:	2800      	cmp	r0, #0
 801fee4:	d0c0      	beq.n	801fe68 <floor+0x48>
 801fee6:	2c00      	cmp	r4, #0
 801fee8:	da0a      	bge.n	801ff00 <floor+0xe0>
 801feea:	2e14      	cmp	r6, #20
 801feec:	d101      	bne.n	801fef2 <floor+0xd2>
 801feee:	3401      	adds	r4, #1
 801fef0:	e006      	b.n	801ff00 <floor+0xe0>
 801fef2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801fef6:	2301      	movs	r3, #1
 801fef8:	40b3      	lsls	r3, r6
 801fefa:	441d      	add	r5, r3
 801fefc:	4545      	cmp	r5, r8
 801fefe:	d3f6      	bcc.n	801feee <floor+0xce>
 801ff00:	ea25 0507 	bic.w	r5, r5, r7
 801ff04:	e7b0      	b.n	801fe68 <floor+0x48>
 801ff06:	2500      	movs	r5, #0
 801ff08:	462c      	mov	r4, r5
 801ff0a:	e7ad      	b.n	801fe68 <floor+0x48>
 801ff0c:	f3af 8000 	nop.w
 801ff10:	8800759c 	.word	0x8800759c
 801ff14:	7e37e43c 	.word	0x7e37e43c
 801ff18:	bff00000 	.word	0xbff00000
 801ff1c:	000fffff 	.word	0x000fffff

0801ff20 <__ieee754_expf>:
 801ff20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff24:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801ff28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ff2c:	4604      	mov	r4, r0
 801ff2e:	d904      	bls.n	801ff3a <__ieee754_expf+0x1a>
 801ff30:	4601      	mov	r1, r0
 801ff32:	f7e0 fbef 	bl	8000714 <__addsf3>
 801ff36:	4604      	mov	r4, r0
 801ff38:	e005      	b.n	801ff46 <__ieee754_expf+0x26>
 801ff3a:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 801ff3e:	d105      	bne.n	801ff4c <__ieee754_expf+0x2c>
 801ff40:	2e00      	cmp	r6, #0
 801ff42:	f040 80c3 	bne.w	80200cc <__ieee754_expf+0x1ac>
 801ff46:	4620      	mov	r0, r4
 801ff48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff4c:	4960      	ldr	r1, [pc, #384]	@ (80200d0 <__ieee754_expf+0x1b0>)
 801ff4e:	4288      	cmp	r0, r1
 801ff50:	dd04      	ble.n	801ff5c <__ieee754_expf+0x3c>
 801ff52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff56:	2000      	movs	r0, #0
 801ff58:	f7ff bf5b 	b.w	801fe12 <__math_oflowf>
 801ff5c:	2800      	cmp	r0, #0
 801ff5e:	da07      	bge.n	801ff70 <__ieee754_expf+0x50>
 801ff60:	4a5c      	ldr	r2, [pc, #368]	@ (80200d4 <__ieee754_expf+0x1b4>)
 801ff62:	4293      	cmp	r3, r2
 801ff64:	d904      	bls.n	801ff70 <__ieee754_expf+0x50>
 801ff66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff6a:	2000      	movs	r0, #0
 801ff6c:	f7ff bf4d 	b.w	801fe0a <__math_uflowf>
 801ff70:	4a59      	ldr	r2, [pc, #356]	@ (80200d8 <__ieee754_expf+0x1b8>)
 801ff72:	4293      	cmp	r3, r2
 801ff74:	d971      	bls.n	802005a <__ieee754_expf+0x13a>
 801ff76:	4a59      	ldr	r2, [pc, #356]	@ (80200dc <__ieee754_expf+0x1bc>)
 801ff78:	4293      	cmp	r3, r2
 801ff7a:	d851      	bhi.n	8020020 <__ieee754_expf+0x100>
 801ff7c:	4b58      	ldr	r3, [pc, #352]	@ (80200e0 <__ieee754_expf+0x1c0>)
 801ff7e:	4620      	mov	r0, r4
 801ff80:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801ff84:	f7e0 fbc4 	bl	8000710 <__aeabi_fsub>
 801ff88:	4b56      	ldr	r3, [pc, #344]	@ (80200e4 <__ieee754_expf+0x1c4>)
 801ff8a:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 801ff8e:	f086 0301 	eor.w	r3, r6, #1
 801ff92:	4605      	mov	r5, r0
 801ff94:	eba3 0806 	sub.w	r8, r3, r6
 801ff98:	4639      	mov	r1, r7
 801ff9a:	4628      	mov	r0, r5
 801ff9c:	f7e0 fbb8 	bl	8000710 <__aeabi_fsub>
 801ffa0:	4604      	mov	r4, r0
 801ffa2:	4621      	mov	r1, r4
 801ffa4:	4620      	mov	r0, r4
 801ffa6:	f7e0 fcbd 	bl	8000924 <__aeabi_fmul>
 801ffaa:	494f      	ldr	r1, [pc, #316]	@ (80200e8 <__ieee754_expf+0x1c8>)
 801ffac:	4606      	mov	r6, r0
 801ffae:	f7e0 fcb9 	bl	8000924 <__aeabi_fmul>
 801ffb2:	494e      	ldr	r1, [pc, #312]	@ (80200ec <__ieee754_expf+0x1cc>)
 801ffb4:	f7e0 fbac 	bl	8000710 <__aeabi_fsub>
 801ffb8:	4631      	mov	r1, r6
 801ffba:	f7e0 fcb3 	bl	8000924 <__aeabi_fmul>
 801ffbe:	494c      	ldr	r1, [pc, #304]	@ (80200f0 <__ieee754_expf+0x1d0>)
 801ffc0:	f7e0 fba8 	bl	8000714 <__addsf3>
 801ffc4:	4631      	mov	r1, r6
 801ffc6:	f7e0 fcad 	bl	8000924 <__aeabi_fmul>
 801ffca:	494a      	ldr	r1, [pc, #296]	@ (80200f4 <__ieee754_expf+0x1d4>)
 801ffcc:	f7e0 fba0 	bl	8000710 <__aeabi_fsub>
 801ffd0:	4631      	mov	r1, r6
 801ffd2:	f7e0 fca7 	bl	8000924 <__aeabi_fmul>
 801ffd6:	4948      	ldr	r1, [pc, #288]	@ (80200f8 <__ieee754_expf+0x1d8>)
 801ffd8:	f7e0 fb9c 	bl	8000714 <__addsf3>
 801ffdc:	4631      	mov	r1, r6
 801ffde:	f7e0 fca1 	bl	8000924 <__aeabi_fmul>
 801ffe2:	4601      	mov	r1, r0
 801ffe4:	4620      	mov	r0, r4
 801ffe6:	f7e0 fb93 	bl	8000710 <__aeabi_fsub>
 801ffea:	4601      	mov	r1, r0
 801ffec:	4606      	mov	r6, r0
 801ffee:	4620      	mov	r0, r4
 801fff0:	f7e0 fc98 	bl	8000924 <__aeabi_fmul>
 801fff4:	4681      	mov	r9, r0
 801fff6:	f1b8 0f00 	cmp.w	r8, #0
 801fffa:	d143      	bne.n	8020084 <__ieee754_expf+0x164>
 801fffc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8020000:	4630      	mov	r0, r6
 8020002:	f7e0 fb85 	bl	8000710 <__aeabi_fsub>
 8020006:	4601      	mov	r1, r0
 8020008:	4648      	mov	r0, r9
 802000a:	f7e0 fd3f 	bl	8000a8c <__aeabi_fdiv>
 802000e:	4621      	mov	r1, r4
 8020010:	f7e0 fb7e 	bl	8000710 <__aeabi_fsub>
 8020014:	4601      	mov	r1, r0
 8020016:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 802001a:	f7e0 fb79 	bl	8000710 <__aeabi_fsub>
 802001e:	e78a      	b.n	801ff36 <__ieee754_expf+0x16>
 8020020:	4936      	ldr	r1, [pc, #216]	@ (80200fc <__ieee754_expf+0x1dc>)
 8020022:	4620      	mov	r0, r4
 8020024:	f7e0 fc7e 	bl	8000924 <__aeabi_fmul>
 8020028:	4b35      	ldr	r3, [pc, #212]	@ (8020100 <__ieee754_expf+0x1e0>)
 802002a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 802002e:	f7e0 fb71 	bl	8000714 <__addsf3>
 8020032:	f7e0 fe3d 	bl	8000cb0 <__aeabi_f2iz>
 8020036:	4680      	mov	r8, r0
 8020038:	f7e0 fc20 	bl	800087c <__aeabi_i2f>
 802003c:	4931      	ldr	r1, [pc, #196]	@ (8020104 <__ieee754_expf+0x1e4>)
 802003e:	4606      	mov	r6, r0
 8020040:	f7e0 fc70 	bl	8000924 <__aeabi_fmul>
 8020044:	4601      	mov	r1, r0
 8020046:	4620      	mov	r0, r4
 8020048:	f7e0 fb62 	bl	8000710 <__aeabi_fsub>
 802004c:	492e      	ldr	r1, [pc, #184]	@ (8020108 <__ieee754_expf+0x1e8>)
 802004e:	4605      	mov	r5, r0
 8020050:	4630      	mov	r0, r6
 8020052:	f7e0 fc67 	bl	8000924 <__aeabi_fmul>
 8020056:	4607      	mov	r7, r0
 8020058:	e79e      	b.n	801ff98 <__ieee754_expf+0x78>
 802005a:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 802005e:	d20c      	bcs.n	802007a <__ieee754_expf+0x15a>
 8020060:	492a      	ldr	r1, [pc, #168]	@ (802010c <__ieee754_expf+0x1ec>)
 8020062:	4620      	mov	r0, r4
 8020064:	f7e0 fb56 	bl	8000714 <__addsf3>
 8020068:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 802006c:	f7e0 fe16 	bl	8000c9c <__aeabi_fcmpgt>
 8020070:	b130      	cbz	r0, 8020080 <__ieee754_expf+0x160>
 8020072:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8020076:	4620      	mov	r0, r4
 8020078:	e75b      	b.n	801ff32 <__ieee754_expf+0x12>
 802007a:	f04f 0800 	mov.w	r8, #0
 802007e:	e790      	b.n	801ffa2 <__ieee754_expf+0x82>
 8020080:	4680      	mov	r8, r0
 8020082:	e78e      	b.n	801ffa2 <__ieee754_expf+0x82>
 8020084:	4631      	mov	r1, r6
 8020086:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 802008a:	f7e0 fb41 	bl	8000710 <__aeabi_fsub>
 802008e:	4601      	mov	r1, r0
 8020090:	4648      	mov	r0, r9
 8020092:	f7e0 fcfb 	bl	8000a8c <__aeabi_fdiv>
 8020096:	4601      	mov	r1, r0
 8020098:	4638      	mov	r0, r7
 802009a:	f7e0 fb39 	bl	8000710 <__aeabi_fsub>
 802009e:	4629      	mov	r1, r5
 80200a0:	f7e0 fb36 	bl	8000710 <__aeabi_fsub>
 80200a4:	4601      	mov	r1, r0
 80200a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80200aa:	f7e0 fb31 	bl	8000710 <__aeabi_fsub>
 80200ae:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 80200b2:	db02      	blt.n	80200ba <__ieee754_expf+0x19a>
 80200b4:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 80200b8:	e745      	b.n	801ff46 <__ieee754_expf+0x26>
 80200ba:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 80200be:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 80200c2:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 80200c6:	f7e0 fc2d 	bl	8000924 <__aeabi_fmul>
 80200ca:	e734      	b.n	801ff36 <__ieee754_expf+0x16>
 80200cc:	2400      	movs	r4, #0
 80200ce:	e73a      	b.n	801ff46 <__ieee754_expf+0x26>
 80200d0:	42b17217 	.word	0x42b17217
 80200d4:	42cff1b5 	.word	0x42cff1b5
 80200d8:	3eb17218 	.word	0x3eb17218
 80200dc:	3f851591 	.word	0x3f851591
 80200e0:	08020e04 	.word	0x08020e04
 80200e4:	08020dfc 	.word	0x08020dfc
 80200e8:	3331bb4c 	.word	0x3331bb4c
 80200ec:	35ddea0e 	.word	0x35ddea0e
 80200f0:	388ab355 	.word	0x388ab355
 80200f4:	3b360b61 	.word	0x3b360b61
 80200f8:	3e2aaaab 	.word	0x3e2aaaab
 80200fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8020100:	08020e0c 	.word	0x08020e0c
 8020104:	3f317180 	.word	0x3f317180
 8020108:	3717f7d1 	.word	0x3717f7d1
 802010c:	7149f2ca 	.word	0x7149f2ca

08020110 <_init>:
 8020110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020112:	bf00      	nop
 8020114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020116:	bc08      	pop	{r3}
 8020118:	469e      	mov	lr, r3
 802011a:	4770      	bx	lr

0802011c <_fini>:
 802011c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802011e:	bf00      	nop
 8020120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020122:	bc08      	pop	{r3}
 8020124:	469e      	mov	lr, r3
 8020126:	4770      	bx	lr
